syntax = "proto3";

package mosaic_test.v1;

import "google/protobuf/wrappers.proto";
import "mosaic_test/component.proto";
import "mosaic_test/extension_value.proto";
import "mosaic_test/log.proto";

option go_package = "github.com/doordash/services-protobuf/generated/mosaic_test";
option java_multiple_files = true;
option java_package = "com.doordash.rpc.mosaic_test";

// The top-level Mosaic page
message MosaicPage {
  // Specifies different page areas.
  repeated MosaicGroup groups = 1;
  // Mosaic components for this Mosaic Page
  repeated MosaicComponent data = 2;
  // Logging info at the page level.
  mosaic_test.v1.Logging logging = 3;
}

// Grouping of sections that represent an area of the page, could just be one group representing the whole screen.
message MosaicGroup {
  // A unique semantic name of this instance of this element.
  string group_name = 1;
  // List of sections that are in the group.
  repeated MosaicSection sections = 2;
  // Logging info at the group level.
  Logging logging = 3;
}

// Group of mosaic components.
message MosaicSection {
  // ID of this instance of this element.
  string section_id = 1;
  // List of mosaic IDs in this section
  repeated google.protobuf.StringValue content = 2;
  // Logging info at the section level.
  Logging logging = 3;
}

// Building block for components within a page.
message MosaicComponent {
  // The ID of the component
  google.protobuf.StringValue component_id = 1;
  // The component type registered by clients
  google.protobuf.StringValue component_type = 2;
  // Data model actually used to render this view
  Component content = 3;
  // Logging info at the mosaic component level.
  Logging logging = 4;
  // FailureMode enum
  enum FailureMode {
    // If not specified, will default to OPTIONAL
    UNSPECIFIED = 0;
    // When a response contains this element and a client is unable to render it, the
    // entire mosaic page should be excluded from the UI. The client application must
    // provide a suitable failover, ideally a fully tested native implementation.
    REQUIRED = 1;
    // Attempt to render a client default where one is registered. In the event the
    // registered default view isn’t compatible, REQUIRED will be used.
    DEGRADABLE_REQUIRED = 2;
    // Attempt to render a client default where one is registered. In the event the
    // registered default view isn’t compatible, OPTIONAL will be used.
    DEGRADABLE_OPTIONAL = 3;
    // Indicates that when a response contains this element and a client is unable to
    // render it, this component and its subtree should be excluded from the UI.
    OPTIONAL = 4;
  }

  // The FailureMode field is to define the strategy of failure handling semantics on client side
  FailureMode failure_mode = 5;
  // The extension field is to provide a component's context, which will outlive the lifespan of a single screen
  repeated Extension extensions = 6;
}

// Extension message
message Extension {
  // The enum of the type of the extension
  enum ExtensionType {
    // If not specified, will default to the key state type
    KEY_STATE_UNSPECIFIED = 0;
    // dynamic effect type
    DYNAMIC_EFFECT = 1;
  }
  // extension type
  ExtensionType type = 1;
  // The value of the extension. Similar as adding a new component, user needs to add the customized extension
  // value protobuf in mosaic/client_extensions and also append it into the extension_value.proto oneof lineage
  ExtensionValue value = 2;
}
