syntax = "proto3";

package argo_search.common.v1;

import "argo-search/common/types.proto";
import "google/protobuf/struct.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.argo_search.rpc.common";

// Search results metadata
message SearchResultsMetadata {
  // the identifier of the search result set used in the logs of computed fields
  // it is supposed to be passed downstream to the frontend for logging along with
  // consumer behavior events
  string dd_result_set_id = 1;
}

// Stack's common SearchQuery response.
message SearchResults {
  // Total number of documents matched
  int64 total_matched_documents = 1;
  // The number of documents matched per namespace
  map<string, int64> matched_documents_in_namespace = 2;
  // Documents
  repeated Document documents = 3;
  // A map of faceting results, key is field name, value is faceting results for the field
  map<string, FacetResultList> facet_results = 4;
  // A list of FacetingResultsV2, key is a list of field names, value is a list of faceting fields and count.
  FacetingResultsV2 facet_results_v2 = 5;
}

// A list of FieldValue.
message FieldValueList {
  // field values
  repeated FieldValue field_value = 1;
}

// A result document.
message Document {
  // a map of return fields
  map<string, FieldValue> fields = 1;
  // primary key of the document
  string primary_key = 2;
}

// Value of a field.
message FieldValue {
  // the value type.
  oneof value {
    // a string value.
    string string_value = 1;
    // a double value.
    double double_value = 2;
    // an int value.
    int32 int_value = 3;
    // a long value.
    int64 long_value = 4;
    // a boolean value.
    bool bool_value = 5;
    // null value
    google.protobuf.NullValue null = 6;
    // a float value.
    float float_value = 7;
    // a document from inner query
    Document document = 8;
    // a list of field values
    FieldValueList field_value_list = 9;
  }
}

// Compressed ordered collection of homogenious documents
message CompressedDocumentCollection {
  // Compressed document collection
  bytes compressed_collection = 1;
  // The size of the decompressed collection (needed for faster decompression)
  int32 decompressed_size = 2;
}

// Ordered collection of homogeneous documents
message DocumentCollection {
  // The origin namespace of the documents
  string namespace = 1;
  // The number of documents in the collection
  int32 size = 2;
  // The number of documents matched to build the collection
  int32 total_matched = 3;
  // Primary keys of the documents in the collection
  repeated string primary_keys = 4;
  // The number of sort by fields computed per document
  int32 sort_by_num = 5;
  // The names of the sort by fields computed per document
  repeated string sort_by_names = 6;
  // Sort by fields values: [ doc1_sv1, doc1_sv2, doc1_sv3, doc2_sv1, doc2_sv2, doc2_sv3, ...]
  repeated double sort_by_values = 7 [packed = true];
  // The number of second phase sort by fields computed per document
  int32 second_phase_sort_by_num = 22;
  // The names of the second phase sort by fields computed per document
  repeated string second_phase_sort_by_names = 23;
  // Second phase sort by fields values: [ doc1_sv1, doc1_sv2, doc1_sv3, doc2_sv1, doc2_sv2, doc2_sv3, ...]
  repeated double second_phase_sort_by_values = 24 [packed = true];
  // The number of group by fields computed per document
  int32 group_by_num = 8;
  // The names of group by fields computed per document
  repeated string group_by_names = 9;
  // Group by fields values: [ doc1_gv1, doc1_gv2, doc1_gv3, doc2_gv1, doc2_gv2, doc2_gv3, ...]
  repeated FieldValueV2 group_by_values = 10;
  // The number of dedup sort by fields computed per document
  int32 dedup_sort_by_num = 25;
  // The names of the dedup sort by fields computed per document
  repeated string dedup_sort_by_names = 26;
  // Dedup sort by fields values: [ doc1_sv1, doc1_sv2, doc1_sv3, doc2_sv1, doc2_sv2, doc2_sv3, ...]
  repeated double dedup_sort_by_values = 27 [packed = true];
  // The number of dedup by fields computed per document
  int32 dedup_by_num = 16;
  // The names of dedupe by fields computed per document
  repeated string dedup_by_names = 17;
  // Dedup by fields values: [ doc1_dv1, doc1_dv2, doc1_dv3, doc2_dv1, doc2_dv2, doc2_dv3, ...]
  repeated FieldValueV2 dedup_by_values = 18;
  // The number of return computed fields
  int32 return_computed_num = 19;
  // The names of the return computed fields per document
  repeated string return_computed_names = 20;
  // Return computed fields values: [ doc1_cv1, doc1_cv2, doc1_cv3, doc2_cv1, doc2_cv2, doc2_cv3, ...]
  repeated double return_computed_values = 21 [packed = true];
  // The number of return fields computed per document
  int32 return_num = 11;
  // The names of return fields computed per document
  repeated string return_names = 12;
  // Return fields values: [ doc1_rv1, doc1_rv2, doc1_rv3, doc2_rv1, doc2_rv2, doc2_rv3, ...]
  repeated FieldValueV2 return_values = 13;
  // The offsets of the children documents in the children document collections
  repeated ChildDocumentOffsets child_document_offsets = 14;
  // Collections of children documents
  repeated DocumentCollection child_documents = 15;
  // Flag to indicate if a document in this collection is soft deleted
  repeated bool soft_deletions = 28;
  // The number of reordering scores per document
  int32 reordering_score_num = 29;
  // The names of the reordering score computed per document
  repeated string reordering_score_names = 30;
  // Reordering score values: [ doc1_rs1, doc1_rs2, doc1_rs3, doc2_rs1, doc2_rs2, doc2_rs3, ...]
  repeated double reordering_score_values = 31 [packed = true];
}

// Faceting results
message Facets {
  // A map of faceting results, key is field name, value is faceting results for the field
  map<string, FacetResultList> facets = 1;
}

// Nullable field value
message FieldValueV2 {
  // the value
  oneof value {
    // string value
    string string_value = 1;
    // int value
    int32 int_value = 2;
    // long value
    int64 long_value = 3;
    // float value
    float float_value = 4;
    // double value
    double double_value = 5;
    // bool value
    bool bool_value = 6;
    // list value
    FieldValueListV2 field_value_list = 50;
    // null
    google.protobuf.NullValue null = 100;
  }
}

// List of values
message FieldValueListV2 {
  // The values
  repeated FieldValueV2 field_values = 1;
}

// List of foreign keys of a document
message ChildDocumentOffsets {
  // foreign keys of one document
  repeated int32 offset = 1;
}

// A list of faceting results.
message FacetResultList {
  // Faceting results.
  repeated FacetResult facet_result = 1;
}

// Faceting result.
message FacetResult {
  // Value of field.
  string facet_value = 1;
  // Count of documents inside the facet.
  int32 count = 2;
}

// Multi-field faceting results
message FacetingResultsV2 {
  // a list of multi-field Faceting results
  repeated FacetingResultV2 facet_result_v2 = 1;
}

// Multi-field Faceting result
message FacetingResultV2 {
  // a list of multi-facet fields
  repeated string facet_fields = 1;
  // the actual fields values and count
  repeated FacetsV2 facet_v2 = 2;
}

// Multi-field faceting facetV2
message FacetsV2 {
  // list of multi-field facet values
  repeated string facet_values = 1;
  // Count of documents inside the facet
  int32 count = 2;
}

// It represents a component in the blended results.
message Component {
  // A component can be one of: card, widget
  oneof value {
    // A card.
    Card card = 1;
    // A widget.
    Widget widget = 2;
  }
}

// It represents a single document in the blended results.
message Card {
  // A single document.
  Document document = 1;
}

// It represents a list of documents in the blended results.
message Widget {
  // A unique identifier of the widget type.
  string type = 1;
  // A group of documents in the widget.
  repeated Document documents = 2;
  // An identifier of widget
  string id = 3;
  // A payload contains the metadata for the widget
  argo_search.common.v1.Payload metadata = 4;
}
