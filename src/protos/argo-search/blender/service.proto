syntax = "proto3";

package argo_search.blender.v1;

import "argo-search/common/context.proto";
import "argo-search/common/pagination.proto";
import "argo-search/common/search_results.proto";
import "argo-search/common/types.proto";
import "tree-metrics/tree_metrics.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.argo_search.rpc.blender";

// BlenderService Interface
service BlenderService {
  // Generic blender API. [Design doc: https://docs.google.com/document/d/1YuERH3ZZ3WO4KY6c9McioZck2dgMujbLsWUCYkds0mE]
  rpc Blender(BlenderRequest) returns (BlenderResponse);
}

// Blender Request
message BlenderRequest {
  // The blend identifier. [Required]
  string blend_id = 1;
  // The keywords query entered by the clients, e.g. "pizza" and "chicken salad". [Required]
  string client_keywords = 2;
  // The query payload passed through Blender to Broker. The query pipeline context data can be passed here.
  argo_search.common.v1.Payload payload = 3;
  // Pagination information. [Required]
  argo_search.common.v1.Pagination pagination = 4;
  // Search context. [Required]
  argo_search.common.v1.SearchContext search_context = 5;
  // If true the response will contain the query trace.
  bool trace = 100;
  // Trace verbosity of the collected attributes.
  tree_metrics.v1.TreeMetricVerbosity trace_verbosity = 101;
}

// Blender Response
message BlenderResponse {
  // A list of blended components.
  repeated argo_search.common.v1.Component components = 1;
  // [Optional] Additional data for the Consumer Search Service.
  CssAdditionalData css_additional_data = 2;
  // Query debugging/profiling trace info.
  tree_metrics.v1.FrameMessage trace = 100;
}

// consumer search service additional data
message CssAdditionalData {
  // [Optional] next offset for pagination
  int32 next_offset = 1;
  // [Optional] number of results in the search index, NOT number of returned results
  int32 num_results = 2;
  // [Optional] raw query string
  string raw_query = 3;
  // [Optional] processed query string
  string processed_query = 4;
  // [Optional] create store carousel with items or not
  bool create_store_carousel_with_items = 5;
  // [Optional] most recent store business name
  string most_recent_store_business_name = 6;
  // [Optional] store verticals
  repeated StoreVertical store_verticals = 7;
  // [Optional] retail item query
  bool retail_item_query = 8;
  // [Optional] type of search
  string type = 9;
  // [Optional] query intent
  string query_intent = 10;
  // [Optional] enable item first search sku store ranking
  bool enable_item_first_sku_store_ranking = 11;
  // [Optional] spell corrected query string
  string spell_corrected_query = 12;
}

// store vertical
message StoreVertical {
  // [Required] The id of the store vertical
  int32 store_vertical_id = 1;
  // [Required] The name of the store vertical
  string store_vertical_name = 2;
  // [Optional] The number of stores in this vertical
  int32 count = 3;
  // [Required] Whether this vertical is selected
  bool selected = 4;
  // [Required] Whether this vertical is the default vertical
  bool is_default = 5;
}
