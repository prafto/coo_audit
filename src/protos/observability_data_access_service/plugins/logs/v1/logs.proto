syntax = "proto3";

package observability_data_access_service.plugins.logs.v1;

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option go_package = "github.com/doordash/services-protobuf/generated/observability_data_access_service/plugins/logs/v1";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.observability_data_access_service.plugins.logs.v1";

// LogService is an observability data access plugin that provides
// access to log data.
service LogService {
  // CheckConnectionHealth returns the health of logs plugin and connection
  // health of data stores
  rpc CheckConnectionHealth(CheckConnectionHealthRequest) returns (CheckConnectionHealthResponse);
  // GetLogEvents retrieves log events in a streaming fashion
  rpc GetLogEvents(GetLogEventsRequest) returns (stream GetLogEventsResponse);
  // GetLogEventVolumes retrieves log events
  rpc GetLogEventVolumes(GetLogEventVolumesRequest) returns (GetLogEventVolumesResponse);
  // GetMetadata retrieves the infrastructure metadata labels and values
  rpc GetMetadata(GetMetadataRequest) returns (GetMetadataResponse);
  // GetLogAttributes retrieves the log attributes and values with their counts
  rpc GetLogAttributes(GetLogAttributesRequest) returns (GetLogAttributesResponse);
  // GetLogEventsByTraceId retrieves log events by trace id
  rpc GetLogEventsByTraceID(GetLogEventsByTraceIDRequest) returns (stream GetLogEventsByTraceIDResponse);
}

// CheckConnectionHealthRequest request for connection health
message CheckConnectionHealthRequest {
  // Request is empty
  google.protobuf.Empty empty = 1;
}

// CheckConnectionHealthResponse response for connection health
message CheckConnectionHealthResponse {
  // Response contains the error string
  google.protobuf.StringValue response = 1;
}

// Cursor contains info to track pagination
message Cursor {
  // timestamp last fetched
  google.protobuf.Timestamp timestamp = 1;
  // id of the last fetched record
  uint64 id = 2;
}

// Request for GetLogs
message GetLogEventsRequest {
  // DEPRECATED - Use indexes instead
  google.protobuf.StringValue index = 1 [deprecated = true];
  // From time to look for logs. If not specified, it will default to
  // 10 minutes ago
  google.protobuf.Timestamp from_timestamp = 2;
  // To time to look for logs. If not specified, it will default to
  // now
  google.protobuf.Timestamp to_timestamp = 3;
  // Limit number of log records fetched
  google.protobuf.UInt64Value limit = 4;
  // list of filters for logs if applicable
  repeated Filter filters = 5;
  // Multiple indexes to search for logs
  repeated string indexes = 6;
  // Add pagination information
  Cursor cursor = 7;
}

// Request for GetLogEventsByTraceID
message GetLogEventsByTraceIDRequest {
  // TraceId to look for logs
  string trace_id = 1;
  // Limit number of log records fetched
  google.protobuf.UInt64Value limit = 2;
  // Add pagination information
  Cursor cursor = 3;
}

// Response from GetLogs
message GetLogEventsResponse {
  // List of log lines
  repeated Event events = 1;
  // Pagination context
  Cursor cursor = 2;
}

// Response from GetLogEventsByTraceID
message GetLogEventsByTraceIDResponse {
  // List of log lines
  repeated Event events = 1;
  // Pagination context
  Cursor cursor = 2;
}

// Single log line
message Event {
  // Timestamp of the log line
  google.protobuf.Timestamp timestamp = 1;
  // TraceId
  google.protobuf.StringValue trace_id = 2;
  // SpanId
  google.protobuf.StringValue span_id = 3;
  // index
  google.protobuf.StringValue index = 4;
  // service if applicable
  google.protobuf.StringValue service = 5;
  // app if applicable
  google.protobuf.StringValue app = 6;
  // environment
  google.protobuf.StringValue environment = 7;
  // cell
  google.protobuf.StringValue cell = 8;
  // k8s_namespace_name
  google.protobuf.StringValue k8s_namespace_name = 9;
  // k8s_cluster_id
  google.protobuf.StringValue k8s_cluster_id = 10;
  // k8s_pod_name
  google.protobuf.StringValue k8s_pod_name = 11;
  // k8s_node_name
  google.protobuf.StringValue k8s_node_name = 12;
  // k8s_container_name
  google.protobuf.StringValue k8s_container_name = 13;
  // k8s_container_name
  google.protobuf.StringValue k8s_container_image_name = 14;
  // log_level default is info
  google.protobuf.StringValue log_level = 15;
  // logger_name if applicable
  google.protobuf.StringValue logger_name = 16;
  // tenant_id if applicable
  google.protobuf.StringValue tenant_id = 17;
  // Message of the log line
  google.protobuf.StringValue body = 18;
  // All other log attributes encoded as json string
  google.protobuf.StringValue json_attributes = 19;
}

// Request for GetLogs
message GetLogEventVolumesRequest {
  // DEPRECATED - Use indexes instead
  google.protobuf.StringValue index = 1 [deprecated = true];
  // Start of time range to look for logs. Defaults to 10 minutes ago
  google.protobuf.Timestamp from_timestamp = 2;
  // End of time range to look for logs. Defaults to now
  google.protobuf.Timestamp to_timestamp = 3;
  // Attribute filters for the request
  repeated Filter filters = 4;
  // Multiple indexes to search for logs event volumes
  repeated string indexes = 5;
}

// GetLogEventVolumesResponse response from GetLogEventVolumes
message GetLogEventVolumesResponse {
  // List of event volumes
  repeated EventVolume event_volumes = 1;
}

// EventVolume represents the volume of log events
message EventVolume {
  // Timestamp of the log volume
  google.protobuf.Timestamp timestamp = 1;
  // Number of log events
  google.protobuf.UInt64Value event_count = 2;
}

// Metadata names
enum Metadata {
  // Metadata is not specified
  METADATA_UNSPECIFIED = 0;
  // INDEX metadata
  METADATA_INDEX = 1;
  // SERVICE metadata
  METADATA_SERVICE = 2;
  // APP metadata
  METADATA_APP = 3;
  // ENVIRONMENT metadata
  METADATA_ENVIRONMENT = 4;
  // CELL metadata
  METADATA_CELL = 5;
  // K8S_MAMESPACE_NAME metadata
  METADATA_K8S_NAMESPACE_NAME = 6;
  // K8S_CLUSTER_ID metadata
  METADATA_K8S_CLUSTER_ID = 7;
  // K8S_POD_NAME metadata
  METADATA_K8S_POD_NAME = 8;
  // K8S_NODE_NAME metadata
  METADATA_K8S_NODE_NAME = 9;
  // K8S_CONTAINER_NAME metadata
  METADATA_K8S_CONTAINER_NAME = 10;
  // K8S_CONTAINER_IMAGE_NAME metadata
  METADATA_K8S_CONTAINER_IMAGE_NAME = 11;
  // SEVERITY_TEXT metadata
  METADATA_SEVERITY_TEXT = 12;
  // SEVERITY_NUMBER metadata
  METADATA_SEVERITY_NUMBER = 13;
  // LOGGER_NAME metadata
  METADATA_LOGGER_NAME = 14;
  // TENANT_ID metadata
  METADATA_TENANT_ID = 15;
}

// GetMetadataRequest request for GetMetadata
message GetMetadataRequest {
  // Metadata filters for the request
  repeated Filter filters = 1;
  // Start of time range to look for metadata. Defaults to 10 minutes ago
  google.protobuf.Timestamp from_timestamp = 2;
  // End of time range to look for metadata. Defaults to now
  google.protobuf.Timestamp to_timestamp = 3;
  // Names of the metadata that want to request
  repeated Metadata requested_metadata = 4;
  // Multiple indexes to search for logs metadata
  repeated string indexes = 5;
}

// GetMetadataResponse response for GetMetadata
message GetMetadataResponse {
  // List of attribute keys with values and counts for each key
  repeated AttributeInfo metadata = 1;
}

// AttributeInfo - represents the unique values for the attribute and the count of each value
message AttributeInfo {
  // Key for this attribute
  string key = 1;
  // List of values and counts
  repeated ValueCount values = 2;
}

// ValuePair represents a value and the count of occurrences of the value
message ValueCount {
  // Value of the attribute
  google.protobuf.StringValue value = 1;
  // Number of logs line containing this value
  google.protobuf.UInt64Value count = 2;
}

// GetLogAttributesRequest request for GetLogAttributes
message GetLogAttributesRequest {
  // DEPRECATED - Use indexes instead
  google.protobuf.StringValue index = 1 [deprecated = true];
  // Start of time range to look for metadata. Defaults to 10 minutes ago
  google.protobuf.Timestamp from_timestamp = 2;
  // End of time range to look for log attributes. Defaults to now
  google.protobuf.Timestamp to_timestamp = 3;
  // Attribute filters for the request
  repeated Filter filters = 4;
  // Multiple indexes to search for logs attributes
  repeated string indexes = 5;
}

// GetLogAttributesResponse response for GetLogAttributes
message GetLogAttributesResponse {
  // List of attribute keys with values and counts for each key
  repeated AttributeInfo attributes = 1;
}

// Filter for GetLogs
message Filter {
  // Key of the filter (metadata attribute name)
  google.protobuf.StringValue key = 1;
  // Operator of the filter
  Operator operator = 2;
  // DEPRECATED - Use 'values' instead
  google.protobuf.StringValue value = 3 [deprecated = true];
  // Values of the filter
  repeated google.protobuf.StringValue values = 4;
}

// Operator for filter
enum Operator {
  // Operator is not specified
  OPERATOR_UNSPECIFIED = 0;
  // NOT EQUAL operator
  OPERATOR_NOT_EQUAL = 1;
  // EQUAL operator
  OPERATOR_EQUAL = 2;
  // LIKE operator
  OPERATOR_LIKE = 3;
  // NOT LIKE operator
  OPERATOR_NOT_LIKE = 4;
  // LIKE operator case insensitive
  OPERATOR_ILIKE = 5;
  // NOT ILIKE operator case insensitive
  OPERATOR_NOT_ILIKE = 6;
}
