syntax = "proto3";

package upss.v1;

import "common/service_client_config.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "upss/attribute.proto";
import "upss/segment.proto";

option go_package = "github.com/doordash/services-protobuf/generated/upss/api/v1";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.upss.rpc.api";

// Service for all the APIs that trigger Cadence workflows
service OfflineService {
  // Get the count of all targets for a segment
  // Not an async API but takes around ~10 seconds to respond
  rpc GetAllTargetsCountForSegment(GetAllTargetsCountForSegmentRequest) returns (GetAllTargetsCountForSegmentResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 10000; // Timeout of 10 seconds
  }

  // gRPC API to trigger a user attribute batch cadence workflow
  rpc SetUserAttributesBatchJob(SetUserAttributesBatchJobRequest) returns (SetUserAttributesBatchJobResponse);

  // gRPC API to trigger an entity interaction batch cadence workflow
  rpc SetEntityInteractionsBatchJob(SetEntityInteractionsBatchJobRequest) returns (SetEntityInteractionsBatchJobResponse);
}

// Request message for fetching the total target count for a segment
message GetAllTargetsCountForSegmentRequest {
  // Fetch the size by either an existing segment ID or a segment expression
  oneof segment {
    // Existing segment ID to get the total count for
    google.protobuf.StringValue segment_id = 1;
    // Segment expression to get the total count for
    SegmentExpression segment_expression = 2;
  }
}

// Response message for fetching the total target count for a segment
message GetAllTargetsCountForSegmentResponse {
  // Total targets in a particular segment
  google.protobuf.Int64Value count = 1;
}

// Request payload for SetUserAttributesBatchJob API
message SetUserAttributesBatchJobRequest {
  // s3 bucket name
  string s3_bucket = 1;
  // s3 file name
  string s3_key = 2;
  // entity type
  EntityType entity = 3;
  // people who trigger the cadence job.
  string directly_responsible_individual = 4;
  // priority
  InjectPriority priority = 5;
  // upsert or remove
  AttributesBatchJobAction action = 6;
}

// Enum for possible operations on the batch job
enum AttributesBatchJobAction {
  // Insert or Update the data
  // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
  ATTRIBUTES_BATCH_JOB_ACTION_UPSERT = 0;
  // Delete the data
  ATTRIBUTES_BATCH_JOB_ACTION_REMOVE = 1;
}

// Enum for setting the priority
enum InjectPriority {
  // Low priority
  // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
  INJECT_PRIORITY_LOW = 0;
  // High priority
  INJECT_PRIORITY_HIGH = 1;
  // Priority for Backfills
  INJECT_PRIORITY_BACKFILL = 2;
}

// Response struct for SetUserAttributesBatchJob API
message SetUserAttributesBatchJobResponse {
  // error
  string error = 1;
  // info message
  string additional_details = 2;
  // cadence run id
  string run_id = 3;
  // cadence workflow id.
  string workflow_id = 4;
}

// Request struct for SetEntityInteractionsBatchJob API
message SetEntityInteractionsBatchJobRequest {
  // s3 bucket name
  string s3_bucket = 1;
  // s3 file name
  string s3_key = 2;
  // primary entity
  EntityType entity = 3;
  // secondary entity
  EntityType secondary_entity = 4;
  // people who trigger the cadence job.
  string directly_responsible_individual = 5;
  // priority
  InjectPriority priority = 6;
  // upsert or remove
  AttributesBatchJobAction action = 7;
}

// Response struct for SetEntityInteractionsBatchJob API
message SetEntityInteractionsBatchJobResponse {
  // error
  string error = 1;
  // info message
  string additional_details = 2;
  // cadence run id
  string run_id = 3;
  // cadence workflow id.
  string workflow_id = 4;
}
