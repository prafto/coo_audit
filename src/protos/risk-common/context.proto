syntax = "proto3";
// buf:lint:ignore PACKAGE_VERSION_SUFFIX
package risk.common;

import "google/protobuf/wrappers.proto";
import "risk-common/account.proto";
import "risk-common/common.proto";

option go_package = "github.com/doordash/services-protobuf/generated/risk_common/v1";
option java_multiple_files = true;
option java_package = "com.doordash.risk.common";

// Locale
message Locale {
  // Locale
  string value = 1;
}

// Ip
message Ip {
  // Ip
  string value = 1;
}

// This is submitted to risk-gateway via a RiskHandler. For example, see:
// consumer-mobile-bff/src/main/kotlin/com/doordash/consumer/bff/config/ControllerConfiguration.kt#L561
// consumer-mobile-bff/core_services/src/main/kotlin/com/doordash/consumer/bff/core/services/risk/RiskHandler.kt#L166
message RiskContext {
  // A unique ID representing this RiskSession instance.
  // This is typically tied to a single request.
  string instance_id = 1;

  // Encapsulates the different identifiers of the current user.
  UserIdentity user_identity = 2;

  // Value of the `Accept-Language` header in the original request.
  Locale locale = 3;

  // Encapsulates the IP addresses in the original request.
  IpInfo ip_info = 4;

  // Various different session identifiers. Possible keys:
  // - "dd_session_id": TTL of 30 minutes and refreshed on every request
  // - "dd_session_id_2":
  // - "dd_login_id": TTL of 5 years
  map<string, string> session_ids = 5;

  // Details of the device that originated the request.
  DeviceDetails device_details = 6;

  // has_internal_order_bypass
  bool has_internal_order_bypass = 7;

  // Bot information in the original request.
  BotInfo bot_info = 8;

  // Unique id for user behavior assessment based on their interaction on UI
  string user_assessment_id = 9;

  // Flag to indicate if related to a return. Deprecated, will be in OrderProblemRequest
  bool is_return = 10 [deprecated = true];
}

// Risk context or information from which risk context can be derived
message RiskContextOrSource {
  // Risk context or information from which risk context can be derived
  oneof value {
    // Context for evaluation of risk
    RiskContext context = 1;
    // Information from which risk context can be derived
    RiskContextSource source = 2;
  }
}

/*
 * An HTTP header. Headers used (names normalized to lowercase):
 * - `accept-language`
 * - `client-version`
 * - `cookie`
 * - `dd-asn`
 * - `dd-bot-ja3`
 * - `dd-bot-score`
 * - `dd-bot`
 * - `dd-client-ip`
 * - `dd-ids`
 * - `dd-risk-user-assessment-id`
 * - `mfa-session-id`
 * - `risk-blackbox`
 * - `user-agent`
 * - `x-experience-id`
 * - `x-forwarded-for`
 */
message HttpHeader {
  // The header name
  string name = 1;
  // The header value
  string value = 2;
}

// Information from which risk context can be derived
message RiskContextSource {
  // Relevant HTTP headers from the client request that should be evaluated for risk.
  repeated HttpHeader headers = 1;
  // Identifier of the user, if applicable.
  google.protobuf.StringValue user_id = 2;
  // Identifier of the consumer, if applicable.
  google.protobuf.StringValue consumer_id = 3;
  // Identifier of the dasher, if applicable.
  google.protobuf.StringValue dasher_id = 4;
  // Identifier of user impersonating the user identified by `user_id`, if applicable.
  google.protobuf.StringValue login_as_user_id = 5;
}

// UserIdentity
message UserIdentity {
  // user_id
  UserId user_id = 1;

  // Alternative IDs of the user, in the context of the current request. E.g.,
  // consumer ID for checkout and dasher ID for starting a dash.
  ConsumerId consumer_id = 2;
  // dasher_id
  DasherId dasher_id = 3;
  // experience i.e. doordash
  ExperienceType experience = 4;

  // When using the Login-As feature (from Nimda), this stores the user_id
  // of the source user that originated the request.
  // This can be the user Id of an agent acting on behalf of a DD user
  UserId login_as_user_id = 16;
}

// IpInfo
message IpInfo {
  // IP of the client that originated the request.
  Ip client_ip = 1;

  // Value of the x-forwarded-for header, in the order <client>, <proxy1>, ...
  repeated Ip x_forwarded_for = 2;
}

// DeviceDetails
message DeviceDetails {
  // app_name
  string app_name = 1;
  // app_version
  string app_version = 2;
  // user_agent
  string user_agent = 3;
  // os
  string os = 4;
  // os_version
  string os_version = 5;
  // device_manufacturer
  string device_manufacturer = 6;
  // device_model
  string device_model = 7;
  // device_unique_id
  string device_unique_id = 8;
  // device_advertising_id
  string device_advertising_id = 9;
  // device_name
  string device_name = 10;
  // ios_device_check
  oneof ios_device_check {
    // dc_token
    string dc_token = 15;
    // dc_error
    string dc_error = 16;
  }
  // resolved device id (uuid)
  string resolved_device_id = 17;
}

// Information related to bot detection from Cloudflare
message BotInfo {
  // The bot grouping as defined by Cloudflare https://developers.cloudflare.com/bots/concepts/bot-score/
  // Values defined here: https://github.com/doordash/tf_cdn_cloudflare_workers/blob/ae6e5d73ff94c39de5b80475f4d32fc8af3b1386/packages/middleware-locale-unification-headers/src/handler.ts#L14
  enum BotGrouping {
    // Bot score is not specified
    BOT_GROUPING_UNSPECIFIED = 0;
    // Bot score is not computed
    BOT_GROUPING_NOT_COMPUTED = 1;
    // Bot score of 1
    BOT_GROUPING_AUTOMATED = 2;
    // Bot scores of 2 through 29.
    BOT_GROUPING_LIKELY_AUTOMATED = 3;
    // Bot scores of 30 through 99.
    BOT_GROUPING_LIKELY_HUMAN = 4;
    // Non-malicious automated traffic (used to power search engines and other applications).
    BOT_GROUPING_VERIFIED_BOT = 5;
  }

  // The Cloudflare provided bot grouping
  BotGrouping bot_grouping = 1;

  // The JA3 Fingerprint for the request
  string ja3_fingerprint = 2;

  // The autonomous system number (ASN) for the request.
  string asn = 3;

  // The bot score. Values defined here: https://developers.cloudflare.com/bots/concepts/bot-score/
  int64 bot_score = 4;
}
