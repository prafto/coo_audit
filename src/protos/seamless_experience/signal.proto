syntax = "proto3";

package seamless_experience.v1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.seamless_experience.api";

// Service with all the management related APIs for signal types.
// SignalService is used by Admin-Gateway RDT. If you are making changes
// in this proto, then make sure that they are backwards compatible.
// Also, consider updating proto release version in Admin-Gateway.
// Backwards incompatible changes are hard to root cause. Hence,
// its better to test the changes in Admin-Gateway as we develop.
// Refer: https://doordash.slack.com/archives/CQ766QSC8/p1679090708355639
service SignalService {
  // Get all signal types
  rpc GetAllSignalTypes(GetAllSignalTypesRequest) returns (GetAllSignalTypesResponse);

  // Get a specific signal type
  rpc GetSignalTypeById(GetSignalTypeByIdRequest) returns (GetSignalTypeByIdResponse);

  // Create a new signal type
  rpc CreateSignalType(CreateSignalTypeRequest) returns (CreateSignalTypeResponse);

  // Update a specific signal type by id
  rpc UpdateSignalTypeById(UpdateSignalTypeByIdRequest) returns (UpdateSignalTypeByIdResponse);

  // delete a specific signal type by id
  rpc DeleteSignalTypeById(DeleteSignalTypeByIdRequest) returns (DeleteSignalTypeByIdResponse);

  // get all signals by a given signal type.
  rpc GetSignalsBySignalType(GetSignalsBySignalTypeRequest) returns (GetSignalsBySignalTypeResponse);

  // Execute workflow on deliveries from signal type id (must be in config file)
  rpc ExecuteWorkflowBySignalTypeId(ExecuteWorkflowBySignalTypeIdRequest) returns (ExecuteWorkflowBySignalTypeIdResponse);
}

// Request object for GetSignalsBySignalType
// Id for signal type is passed in
message GetSignalsBySignalTypeRequest {
  // Maximum output list size, optional
  google.protobuf.Int32Value list_size = 1;
  // Past minutes as time range, optional
  google.protobuf.Int32Value time_range_minutes = 2;
  /* offset for pagination, optional (default: 0) */
  google.protobuf.Int32Value pagination_offset = 3;
  /* agent id, optional */
  google.protobuf.Int32Value agent_id = 4;
  // pass in id for the signal type (UUID)
  google.protobuf.StringValue signal_type_id = 5;
  /* delivery address country, optional */
  google.protobuf.StringValue country = 6;
  /* Cx type, optional */
  google.protobuf.StringValue cx_type = 7;
}

// Response object for GetSignalsBySignalType
// all signals that matches that id
message GetSignalsBySignalTypeResponse {
  // signals matches the pass in type
  repeated Signal signals = 1;
  /* total row count */
  google.protobuf.Int32Value total_row_count = 2;
}

// Request object for GetAllSignalTypes
message GetAllSignalTypesRequest {}

// Response object for GetAllSignalTypes
// Contains a list of signal types
message GetAllSignalTypesResponse {
  // List of all signal types that exists
  repeated SignalType signal_types = 1;
}

// Request object for GetSignalTypeById
// Id for signal type is passed in
message GetSignalTypeByIdRequest {
  // pass in id for the signal type
  google.protobuf.StringValue id = 1;
}

// Response object for GetSignalTypeById
// Signal type that matches the id
message GetSignalTypeByIdResponse {
  // signel type matches the pass in id
  SignalType signal_type = 1;
}

// Request object for CreateSignalType
message CreateSignalTypeRequest {
  // Id will not be honored since this is a create request
  SignalType input_signal = 1;
}

// Response object for CreateSignalType
message CreateSignalTypeResponse {
  // Id for newly created signal type
  google.protobuf.StringValue id = 1;
}

// Request object for UpdateSignalTypeById
message UpdateSignalTypeByIdRequest {
  // Id will be honored since this is an update request
  SignalType input_signal = 1;
}

// Response object for UpdateSignalTypeById
message UpdateSignalTypeByIdResponse {
  // id for updated signal type
  google.protobuf.StringValue id = 1;
}

// Request object for DeleteSignalTypeById
message DeleteSignalTypeByIdRequest {
  // id for signal type to be deleted
  google.protobuf.StringValue id = 1;
}

// Response object for UpdateSignalTypeById
message DeleteSignalTypeByIdResponse {}

// new SignalType definition
message SignalType {
  // primary key
  google.protobuf.StringValue id = 1;
  // whether this signal is live or not
  google.protobuf.BoolValue live = 2;
  // name of the signal type
  google.protobuf.StringValue name = 3;
  // display friendly name for the signal type
  google.protobuf.StringValue display_name = 4;
  // datasource for the signal type
  // Currently can only be DIP or Seamless (If its a special request)
  google.protobuf.StringValue datasource = 5;
  // Query string of the signal type
  google.protobuf.StringValue query = 6; //timeframe; // rows return // fields?
  // (Optional) sla for timeout
  google.protobuf.Int64Value network_sla = 7;
  // DRI for this signal type
  google.protobuf.StringValue dri = 8;
  // Signal type description
  google.protobuf.StringValue description = 9;
  // Timestamp for when this signal type is created
  google.protobuf.Timestamp created_at = 10;
  // Timestamp for when this signal type is updated
  google.protobuf.Timestamp updated_at = 11;

  // Status of the signal type
  enum SignalStatus {
    // Status of the signal type is unknown
    SIGNAL_STATUS_UNSPECIFIED = 0;
    // The signal is functioning properly and meets performance standards.
    SIGNAL_STATUS_HEALTHY = 1;
    // The signal may have potential for optimization or issues that need addressing.
    SIGNAL_STATUS_REVIEW_REQUIRED = 2;
    // The signal is either invalid or fails to meet performance criteria.
    SIGNAL_STATUS_BLOCKED = 3;
  }

  // Status of the signal type
  SignalStatus status = 12;
}

// new Signal definition
message Signal {
  /* Delivery UUID */
  google.protobuf.StringValue delivery_uuid = 1;
  /* consumer name */
  google.protobuf.StringValue consumer_name = 2;
  /* latest milestone reached in the order */
  google.protobuf.StringValue order_status = 3;
  /* consumerâ€™s phone number */
  google.protobuf.StringValue consumer_phone_number = 4;
  /* ETA we promised customers at checkout */
  google.protobuf.Timestamp quoted_delivery_time = 5;
  /* current ETA that takes into account latest order events */
  google.protobuf.Timestamp dynamic_eta = 6;
  /* difference between dynamic ETA and quoted ETA */
  google.protobuf.Int64Value lateness = 7;
  /* Mx confirmation latency, time between delivery being created and the order being confirmed by store */
  google.protobuf.Int64Value time_to_confirm_order = 8;
  /* Dx confirmation latency, time between delivery being created and Dx being confirmed */
  google.protobuf.Int64Value time_to_assign_dx = 9;
  // id for the signal type (UUID)
  google.protobuf.StringValue signal_type_id = 10;
  /* Cx Type TBD */
  google.protobuf.StringValue cx_type = 11;
  /* agent id */
  google.protobuf.Int32Value agent_id = 12;
  /* delivery address country */
  google.protobuf.StringValue country = 13;
}

// Request for executing workflow based on signal type id
message ExecuteWorkflowBySignalTypeIdRequest {
  // Signal type id (must be in config with corresponding workflow id)
  google.protobuf.StringValue signal_type_id = 1;
}

// Response for executing workflow based on signal type id
message ExecuteWorkflowBySignalTypeIdResponse {
  // Failed delivery uuids
  repeated google.protobuf.StringValue failed_delivery_uuids = 1;
}
