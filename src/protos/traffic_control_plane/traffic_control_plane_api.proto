syntax = "proto3";

package traffic_control_plane.v1;

import "traffic_control_plane/az_draining.proto";
import "traffic_control_plane/ddsd.proto";
import "traffic_control_plane/mesh.proto";
import "traffic_control_plane/mesh2.proto";
import "traffic_control_plane/review.proto";
import "traffic_control_plane/supercell.proto";

option go_package = "github.com/doordash/services-protobuf/generated/traffic_control_plane/api/v1";

// TrafficControlPlane is an infrastructure service to manage traffic resources
service TrafficControlPlaneService {
  // GetDDSDServices gets DDSD services and their details
  rpc GetDDSDServices(GetDDSDServicesRequest) returns (GetDDSDServicesResponse);

  // GetDDSDServiceEndpoints gets endpoints for a DDSD service
  rpc GetDDSDServiceEndpoints(GetDDSDServiceEndpointsRequest) returns (GetDDSDServiceEndpointsResponse);

  // GetMeshServices gets mesh services
  rpc GetMeshServices(GetMeshServicesRequest) returns (GetMeshServicesResponse);

  // GetMeshServiceConfigsV1 gets mesh service configs
  rpc GetMeshServiceConfigsV1(GetMeshServiceConfigsV1Request) returns (GetMeshServiceConfigsV1Response);

  // GetMeshServiceConfigsOverviewV1 gets mesh service configs
  rpc GetMeshServiceConfigsOverviewV1(GetMeshServiceConfigsOverviewV1Request) returns (GetMeshServiceConfigsOverviewV1Response);

  // SetMeshServiceConfigsRequest
  rpc SetMeshServiceConfigs(SetMeshServiceConfigsRequest) returns (SetMeshServiceConfigsResponse);

  // CreateMeshOverride
  rpc CreateMeshOverride(CreateMeshOverrideRequest) returns (CreateMeshOverrideResponse);

  // OnboardMeshService
  rpc OnboardMeshService(OnboardMeshServiceRequest) returns (OnboardMeshServiceResponse);

  // SetPlacementServiceConfigs
  rpc SetPlacementServiceConfigs(SetPlacementServiceConfigsRequest) returns (SetPlacementServiceConfigsResponse);

  // CreateReviewRequest, currently traffic self serve only supports supercell migration
  rpc CreateReview(CreateReviewRequest) returns (CreateReviewResponse);

  // UpdateSupercellWeight to change supercell migration weight splitting
  rpc UpdateSupercellWeight(UpdateSupercellWeightRequest) returns (UpdateSupercellWeightResponse);

  // GetMigrationStatus to get the supercell migration status of a service in a cluster
  rpc GetMigrationStatus(GetMigrationStatusRequest) returns (GetMigrationStatusResponse);

  // EnrollService to establish global <-> cell connectivity
  rpc EnrollService(EnrollServiceRequest) returns (EnrollServiceResponse);

  // UpdateAzDrainingWeight to change different AZ weight splitting
  rpc UpdateAzDrainingWeight(UpdateAzDrainingWeightRequest) returns (UpdateAzDrainingWeightResponse);

  // GetAzDrainingWeight to get the AZ weight for each cell
  rpc GetAzDrainingWeight(GetAzDrainingWeightRequest) returns (GetAzDrainingWeightResponse);
}
