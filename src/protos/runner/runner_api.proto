syntax = "proto3";

package runner.v1;

import "autonomous_delivery_platform/common.proto";
import "common/common.proto";
import "common/money.proto";
import "doordash.api/annotations.proto";
import "doordash.api/field_validate.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option java_generic_services = true;
option java_outer_classname = "Service";
option java_package = "com.doordash.rpc.runner";

// Service powering runner.doordash.com application for AV fulfillment handoffs
service RunnerAPIService {
  option (doordash.api.service) = {
    name: "RunnerAPIService"
    url: "runner-web.service.prod.ddsd"
    port: 50051
    name_spaces: ["runner"],
    owner: {
      id: "doordash-labs-commercial-team",
      name: "runner",
      slack_channel: "#eng-drone",
      email_alias: "foundry-eng@doordash.com",
    }
    target_products: [INTERNAL]
  };

  // Get available deployment sites for runners
  rpc GetDeploymentSites(GetDeploymentSitesRequest) returns (GetDeploymentSitesResponse) {
    option (google.api.http) = {get: "/runner/v1/deployment_sites"};
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [NONE]
    };
  }
  // GetOrders gets unclaimed orders or claimed orders of the target runner within a deployment side.
  rpc GetOrders(GetOrdersRequest) returns (GetOrdersResponse) {
    option (google.api.http) = {get: "/runner/v1/orders"};
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [NONE]
    };
  }
  // GetOrderByDeliveryUuid gets information of an order.
  rpc GetOrderByDeliveryUuid(GetOrderByDeliveryUuidRequest) returns (GetOrderByDeliveryUuidResponse) {
    option (google.api.http) = {get: "/runner/v1/order"};
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [NONE]
    };
  }
  // ClaimOrder marks an order to be owned by the target runner.
  rpc ClaimOrder(ClaimOrderRequest) returns (ClaimOrderResponse) {
    option (google.api.http) = {
      post: "/runner/v1/claim"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [NONE]
    };
  }
  // UnClaimOrder removes the ownership of the order from the target runner.
  rpc UnClaimOrder(UnClaimOrderRequest) returns (UnClaimOrderResponse) {
    option (google.api.http) = {
      post: "/runner/v1/unclaim"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [NONE]
    };
  }
  // ConfirmOrderPickupFromStore marks an order has been picked up from the store.
  rpc ConfirmOrderPickupFromStore(ConfirmOrderPickupFromStoreRequest) returns (ConfirmOrderPickupFromStoreResponse) {
    option (google.api.http) = {
      post: "/runner/v1/confirm_pickup"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [NONE]
    };
  }
  // ConfirmOrderLoaded marks an order transferred to vehicles.
  rpc ConfirmOrderLoaded(ConfirmOrderLoadedRequest) returns (ConfirmOrderLoadedResponse) {
    option (google.api.http) = {
      post: "/runner/v1/confirm_loaded"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [NONE]
    };
  }
  // CallDroneForPickup calls the drone take off and pick up a package.
  rpc CallDroneForPickup(CallDroneForPickupRequest) returns (CallDroneForPickupResponse) {
    option (google.api.http) = {
      post: "/runner/v1/call_drone_for_pickup"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [NONE]
    };
  }
  // ReassignOrderToDasher reassigns an order to dashers.
  rpc ReassignOrderToDasher(ReassignOrderToDasherRequest) returns (ReassignOrderToDasherResponse) {
    option (google.api.http) = {
      post: "/runner/v1/reassign_order_to_dasher"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [NONE]
    };
  }

  // CancelPackage cancels the drone package delivery.
  rpc CancelPackage(CancelPackageRequest) returns (CancelPackageResponse) {
    option (google.api.http) = {
      post: "/runner/v1/cancel_package"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [NONE]
    };
  }
  // CancelOrder cancels an order.
  rpc CancelOrder(CancelOrderRequest) returns (CancelOrderResponse) {
    option (google.api.http) = {
      post: "/runner/v1/cancel_order"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [NONE]
    };
  }
  // OpenRobot opens the robot for loading
  rpc OpenRobot(OpenRobotRequest) returns (OpenRobotResponse) {
    option (google.api.http) = {
      post: "/runner/v1/open_robot"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [NONE]
    };
  }
}

// Request to fetch available deployment sites
message GetDeploymentSitesRequest {}

// Response for available deployment sites
message GetDeploymentSitesResponse {
  // Deployment site denotes area of operation for autonomous vehicle delivery zone
  message DeploymentSite {
    // Unique ID for a given site
    string id = 1;
    // Human readable name for deployment site
    string name = 2;
  }
  // Deployment sites
  repeated DeploymentSite deployment_sites = 1;
}

// Get orders request
message GetOrdersRequest {
  // Deployment site id
  string deployment_site_id = 1;
  // If request is to get all orders of a site
  bool get_all_orders = 2;
}

// Get orders response
message GetOrdersResponse {
  // Unclaimed orders and claimed orders for the runner
  repeated Order orders = 1;
}

// Order message
message Order {
  // Order delivery uuid
  string delivery_uuid = 1;
  // Localized customer name
  string customer_name = 2;
  // Total items in the order
  int32 total_items = 3;
  // Store id
  int64 store_id = 4;
  // Store name
  string store_name = 5;
  // Business logo url
  google.protobuf.StringValue business_img_url = 6;
  // Estimated order pickup time at store
  google.protobuf.Timestamp estimated_store_pickup_time = 7;
  // The section the order belong to
  Section section = 8;
  // Vehicle delivery type
  autonomous_delivery_platform.v1.AvType av_type = 9;
  // Store latitude, only exists in orders at merchant pickup and vehicle drop-off section
  google.protobuf.DoubleValue store_latitude = 10;
  // Store longitude, only exists in orders at merchant pickup and vehicle drop-off section
  google.protobuf.DoubleValue store_longitude = 11;
  // Total order cost, only exists in orders at merchant pickup section
  money.MonetaryFields order_price = 12;
  // The item details of order, only exists for non-drone orders at merchant pickup section
  repeated OrderItem order_items = 13;
  // Total packages of drone order, only exists in drone orders
  google.protobuf.Int32Value drone_package_count = 14;
  // Package details of drone order, only exists for drone orders at merchant pickup section and vehicle drop off section
  repeated Package packages = 15;
  // Vehicle identifier, only exists for non-drone orders at all sections
  google.protobuf.StringValue vehicle_id = 16;
  // Pickup instructions for loader
  repeated string pickup_instructions = 17;
  // Loader name of the order
  google.protobuf.StringValue loader_name = 18;
}

// Package message
message Package {
  // Package id
  string package_id = 1;
  // Total items in the package
  int32 total_items = 2;
  // Minimum allowed package weight, only exists when the order is at vehicle drop off section
  google.protobuf.FloatValue min_allowed_package_weight_grams = 3;
  // Maximum allowed package weight, only exists when the order is at vehicle drop off section
  google.protobuf.FloatValue max_allowed_package_weight_grams = 4;
  // If the measured weight is required when calling drone, only exists when the order is at vehicle drop off section
  google.protobuf.BoolValue is_package_weight_mandatory = 5;
  // Drone package state, only exists when the order is at vehicle drop off section
  PackageState package_state = 6;
  // List of items in this package
  repeated OrderItem order_items = 7;
  // List of objects in this package
  repeated ObjectItem object_items = 8;
  // Estimated time the drone will reach the autoloader, only exits if the package state is at waiting for loading
  google.protobuf.Timestamp estimated_package_loading_time = 9 [(doordash.api.validate.rules).missing_value = {action: IGNORE}];
  // Human readable drone pickup zone for the package, only exists if the package is waiting for loading
  google.protobuf.StringValue drone_pickup_zone = 10;
  // Required action to continue the drone package pick up, only exists if the package state is action required
  google.protobuf.StringValue required_action = 11;
}

// Drone delivery state of the package
enum PackageState {
  // Default
  PACKAGE_STATE_TYPE_UNSPECIFIED = 0;
  // Package is waiting for runner to call drone to pick up
  PACKAGE_STATE_TYPE_WAITING_FOR_DRONE_CALL = 1;
  // Package is waiting for loading after runner calls the drone
  PACKAGE_STATE_TYPE_WAITING_FOR_LOADING = 2;
  // Package is loaded onto drone
  PACKAGE_STATE_TYPE_LOADED = 3;
  // Package needs human action to continue the delivery
  PACKAGE_STATE_TYPE_ACTION_REQUIRED = 4;
  // Package fails in terminate state, further attempts to call the drone pickup again can't be made
  PACKAGE_STATE_TYPE_FAILED = 5;
  // Package is canceled by runner, further attempts to call the drone pickup again can't be made
  PACKAGE_STATE_TYPE_CANCELED = 6;
}

// The section the order belong to
enum Section {
  // Default
  SECTION_TYPE_UNSPECIFIED = 0;
  // Available orders section
  SECTION_TYPE_AVAILABLE_ORDERS = 1;
  // Merchant pickup orders section
  SECTION_TYPE_MERCHANT_PICKUP = 2;
  // Vehicle drop off orders section
  SECTION_TYPE_VEHICLE_DROP_OFF = 3;
}

// Item information
message OrderItem {
  // Item name
  string item_name = 1;
  // Item quantity
  int32 quantity = 2;
  // Flatten nested options
  repeated OrderItemOption item_options = 3;
}

// Item option information
message OrderItemOption {
  // Option name
  string option_name = 1;
  // Option quantity
  int32 quantity = 2;
}

// Objects contained in an item
message ObjectItem {
  // Title of the item. It is not null when the item is non-object
  google.protobuf.StringValue title = 1;
  // Quantity of item, it is not null when the item is non-object
  google.protobuf.Int32Value quantity = 2;
  // Real objects contained in this item
  repeated ObjectDetail objects = 3;
}

// Object information
message ObjectDetail {
  // Object name
  string name = 1;
  // Quantity of this object
  int32 quantity = 2;
  // First level options' names under this object
  repeated string options = 3;
}

// Request to get order information
message GetOrderByDeliveryUuidRequest {
  // Order delivery uuid
  string delivery_uuid = 1;
}

// Response of getting order
message GetOrderByDeliveryUuidResponse {
  // Order information
  Order order = 1;
}

// Request to claim an order
message ClaimOrderRequest {
  // Order delivery uuid
  string delivery_uuid = 1;
}

// Order claim response
message ClaimOrderResponse {}

// Request to un-claim an order
message UnClaimOrderRequest {
  // Order delivery uuid
  string delivery_uuid = 1;
}

// Response of un-claim an order
message UnClaimOrderResponse {}

// Request to pick up
message ConfirmOrderPickupFromStoreRequest {
  // Order delivery uuid
  string delivery_uuid = 1;
}

// Response of confirming order pickup from store
message ConfirmOrderPickupFromStoreResponse {}

// Request to confirm the order is loaded
message ConfirmOrderLoadedRequest {
  // Order delivery uuid
  string delivery_uuid = 1;
}

// Response of confirming order is loaded
message ConfirmOrderLoadedResponse {}

// Request to call drone to pick up package
message CallDroneForPickupRequest {
  // Order deliver uuid
  string delivery_uuid = 1;
  // package id
  string package_id = 2;
  // Measured package weight
  google.protobuf.FloatValue measured_weight_in_grams = 3;
}

// Response to call drone for package pickup
message CallDroneForPickupResponse {}

// Request to reassign order to human dashers
message ReassignOrderToDasherRequest {
  // Order delivery uuid
  string delivery_uuid = 1;
  // Reassign reason
  string reassign_reason = 2;
}

// Response to reassign order to human dashers
message ReassignOrderToDasherResponse {}

// Request to cancel the package
message CancelPackageRequest {
  // Order delivery uuid
  string delivery_uuid = 1;
  // Package id
  string package_id = 2;
  // Cancel reason
  string cancellation_reason = 3;
}

// Response of cancelling package
message CancelPackageResponse {}

// Request to cancel an order
message CancelOrderRequest {
  // Order delivery uuid
  string delivery_uuid = 1;
  // Cancel reason
  string cancel_reason = 2;
}

// Response of cancelling an order
message CancelOrderResponse {}

// Request to open the robot for loading
message OpenRobotRequest {
  // Order delivery uuid
  string delivery_uuid = 1;
}

// Response of opening the robot for loading
message OpenRobotResponse {}
