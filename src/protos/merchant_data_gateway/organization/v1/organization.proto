syntax = "proto3";

package merchant_data_gateway.organization.v1;

import "common/organization_service.proto";
import "common/service_client_config.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.merchant_data_gateway";

// The organization service is responsible for managing organizations.
service OrganizationService {
  option (service_client.client_config).response_attempt_timeout_millis = 5000;
  option (service_client.client_config).retry_config.max_attempts = 1;
  option (service_client.client_config).circuit_breaker_config.failure_rate_threshold = 0.5;
  option (service_client.client_config).circuit_breaker_config.minimum_request_threshold = 50;
  option (service_client.client_config).circuit_breaker_config.counter_sliding_window_millis = 60000;
  option (service_client.client_config).circuit_breaker_config.circuit_open_window_millis = 30000;

  // Get an organization by its id.
  rpc GetOrganizationById(GetOrganizationByIdRequest) returns (GetOrganizationByIdResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 500;
  }

  // Get organizations by their parent model id and status.
  rpc GetByStatusAndParentModel(GetByStatusAndParentModelRequest) returns (GetByStatusAndParentModelResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 500;
  }

  // Create an organization.
  rpc CreateOrganization(CreateOrganizationRequest) returns (CreateOrganizationResponse);

  // Create an organization using a preset organization ID.
  rpc CreateOrganizationWithPresetId(CreateOrganizationWithPresetIdRequest) returns (CreateOrganizationWithPresetIdResponse);

  // Update an organization.
  rpc UpdateOrganization(UpdateOrganizationRequest) returns (UpdateOrganizationResponse);

  // GetAllOrganizationsExceptStatusResponse
  rpc GetAllOrganizationsExceptStatus(GetAllOrganizationsExceptStatusRequest) returns (GetAllOrganizationsExceptStatusResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 500;
  }
}

// Request messages for getting an organization by its id.
message GetOrganizationByIdRequest {
  // The id of the organization.
  int64 id = 1;
}

// Response messages for getting an organization by its id.
message GetOrganizationByIdResponse {
  // The organization.
  OrganizationData organization_data = 1;
}

// Request messages for getting organizations by their parent model id and status.
message GetByStatusAndParentModelRequest {
  // required: The parent model of the organization.
  organization_service.v1.Model parent_model = 1;
  // optional: The status of the organization.
  organization_service.v1.OrganizationStatus status = 2;
  // optional: The page token.
  google.protobuf.StringValue page_token = 3;
  // optional: The limit of the organizations.
  google.protobuf.Int64Value limit = 4;
}

// Response messages for getting organizations by their parent model id and status.
message GetByStatusAndParentModelResponse {
  // The organizations.
  repeated OrganizationData organization_data = 1;
  // The next page token.
  google.protobuf.StringValue next_page_token = 2;
}

// Request messages for creating an organization.
message CreateOrganizationRequest {
  // The organization to create.
  OrganizationData organization = 1;
}

// Response messages for creating an organization.
message CreateOrganizationResponse {
  // The organization.
  OrganizationData organization = 1;
}

// Request messages for creating an organization with a preset organization ID.
message CreateOrganizationWithPresetIdRequest {
  // The organization to create.
  OrganizationData organization = 1;
}

// Response messages for creating an organization with a preset organization ID.
message CreateOrganizationWithPresetIdResponse {
  // The organization.
  OrganizationData organization = 1;
}

// Request messages for updating an organization.
message UpdateOrganizationRequest {
  // The organization to update.
  OrganizationData organization = 1;
}

// Response messages for updating an organization.
message UpdateOrganizationResponse {
  // The organization.
  OrganizationData organization = 1;
}

// Request messages for getting all organizations.
message GetAllOrganizationsExceptStatusRequest {
  // The status of the organizations.
  // optional: The status of the organization.
  // If not passed, it will filter by status = ORGANIZATION_STATUS_UNSPECIFIED
  organization_service.v1.OrganizationStatus status = 1;
  // The page token.
  google.protobuf.StringValue page_token = 2;
  // The limit of the organizations.
  google.protobuf.Int64Value limit = 3;
}

// Request message for getting all organizations except deleted.
message GetAllOrganizationsExceptStatusResponse {
  // The organizations.
  repeated OrganizationData organization_data = 1;
  // The next page token.
  google.protobuf.StringValue next_page_token = 2;
}

// The organization data.
message OrganizationData {
  // The id of the organization.
  int64 id = 1;
  // The name of the organization.
  string name = 2;
  // The type of the organization.
  organization_service.v1.OrganizationType organization_type = 3;
  // The salesforce id of the organization. Can be empty string
  string salesforce_id = 4;
  // The netsuite id of the organization. Can be empty string or null
  google.protobuf.StringValue netsuite_id = 5;
  // The status of the organization.
  organization_service.v1.OrganizationStatus status = 6;
  // The parent model of the organization.
  organization_service.v1.Model parent_model = 7;
  // The time the Organization was updated at.
  google.protobuf.Timestamp updated_at = 8;
}
