syntax = "proto3";

package sinch.v1;

option go_package = "github.com/doordash/services-protobuf/generated/sinch/v1";
option java_generic_services = true;
option java_multiple_files = true;
option java_outer_classname = "Sinch";
option java_package = "com.doordash.sinch";

// Webhook request for handling incoming text messages
message TextMessageCallback {
  // Unique identifier for the project
  string project_id = 1;
  // Unique identifier for the application
  string app_id = 2;
  // Timestamp marking when the channel callback was accepted
  string accepted_time = 3;
  // Timestamp of the event as provided by the underlying channels
  string event_time = 4;
  // Context-dependent metadata
  string message_metadata = 5;
  // The value provided in field correlation_id of a send message request
  string correlation_id = 6;
  // Additional metadata that might be provided by a channel
  ChannelMetadata channel_metadata = 7;
  // Complete message payload
  Message message = 8;
}

// Core message structure containing all message details
message Message {
  // Unique message identifier
  string id = 1;
  // Message direction (TO_APP, FROM_APP)
  string direction = 2;
  // Message content and type information.
  ContactMessage contact_message = 3;
  // Channel and participant identity information for message delivery
  ChannelIdentity channel_identity = 4;
  // Unique identifier for the conversation thread
  string conversation_id = 5;
  // Unique identifier for the contact
  string contact_id = 6;
  // Metadata associated with the message
  string metadata = 7;
  // Timestamp for when the message was sent
  string accept_time = 8;
  // Identifier for the sender of the message
  string sender_id = 9;
  // Processing mode for the message
  string processing_mode = 10;
  // Flag indicating if the message was injected
  bool injected = 11;
}

// Defines the message delivery channel and participant information
message ChannelIdentity {
  // Communication channel type (SMS, RCS)
  string channel = 1;
  // Participant address on the channel (e.g., phone number for SMS).
  string identity = 2;
  // Application identifier for the channel
  string app_id = 3;
}

// Container for different types of message content
message ContactMessage {
  // Text message content container
  TextMessage text_message = 1;
}

// Text message content
message TextMessage {
  // Raw message text content
  string text = 1;
}

// Channel specific metadata
message ChannelMetadata {}
