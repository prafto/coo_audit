syntax = "proto3";

package data_tool_grpc_service.v1;

import "common/user_metadata.proto";
import "data_tool_grpc_service.v1/common.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.data.tools.v1";

// Snowflake FQN
message SnowflakeTableAttr {
  // Snowflake database name
  string database_name = 1; // Required: database name
  // Snowflake schema name
  string schema_name = 2; // Required: schema name
  // Snowflake table name table_name
  string table_name = 3; // Required: table name
}

// Datalake FQN
message DatalakeTableAttr {
  // Data Lake db name a.k.a schema_name
  string db_name = 1; // Required: database name
  // Data Lake table name table_name
  string table_name = 2;
}

// Table fully qualified name attributes
message TableFQN {
  // At least one table attribute based on platform i.e. Snowflake/Datalake
  oneof fqn {
    // Snowflake table attributes
    SnowflakeTableAttr snowflake_fqn = 1;
    // Datalake table attributes
    DatalakeTableAttr datalake_fqn = 2;
  }
}

// Enum for specifying the type of change
enum EntityChangeType {
  // Unspecified change type
  ENTITY_CHANGE_TYPE_UNSPECIFIED = 0;

  // Change in table description
  ENTITY_CHANGE_TYPE_TABLE_DESCRIPTION_CHANGE = 1;

  // Change in column-level description
  ENTITY_CHANGE_TYPE_COLUMN_DESCRIPTION_CHANGE = 2;

  // Change in domain field
  ENTITY_CHANGE_TYPE_DOMAIN_CHANGE = 6;

  // Change in sub-domain field
  ENTITY_CHANGE_TYPE_SUB_DOMAIN_CHANGE = 7;

  // Change in technical owner
  ENTITY_CHANGE_TYPE_TECHNICAL_OWNER_CHANGE = 8;

  // Change in business owner
  ENTITY_CHANGE_TYPE_BUSINESS_OWNER_CHANGE = 9;

  // Change in technical vertical (team)
  ENTITY_CHANGE_TYPE_TECHNICAL_VERTICAL_CHANGE = 10;

  // Change in business vertical (team)
  ENTITY_CHANGE_TYPE_BUSINESS_VERTICAL_CHANGE = 11;

  // Change in Slack channel info
  ENTITY_CHANGE_TYPE_SLACK_CHANNEL_CHANGE = 12;

  // Change in FAQs associated with the table
  ENTITY_CHANGE_TYPE_FAQS_CHANGE = 13;

  // Change in runbook references
  ENTITY_CHANGE_TYPE_RUNBOOK_CHANGE = 14;
}

// changes pertaining to a dataset
message DatasetChangeLog {
  // Unique ID for the change log entry
  string id = 1;

  // Foreign key to the dataset in CRDB
  string metadata_id = 2;

  // When the change occurred
  google.protobuf.Timestamp changed_at = 3;

  // Platform of the dataset (e.g., Snowflake, Datalake)
  user_metadata.v1.Platform platform = 4;

  // The previous value (optional for new inserts)
  string old_value = 5;

  // The new value (optional for deletes)
  string new_value = 6;

  // Optional textual reason for the change
  string change_reason = 7;

  // The structured type of change
  EntityChangeType change_type = 8;

  // Whether this change was synced to DataHub
  bool is_synced_to_datahub = 9;

  // When the sync was attempted
  google.protobuf.Timestamp sync_attempted_at = 10;
}

// Request for upsert a user metadata in Caspian metadata service
message SaveTableMetadataRequest {
  // Table fully qualified name attributes
  TableFQN table_fqn = 1;
  // Platform the table exists on
  user_metadata.v1.Platform platform = 2;
  // Persona of the data user
  user_metadata.v1.Persona persona = 3;
  // A JSON blob of columnMetadata(s)
  repeated user_metadata.v1.ColumnMetadata column_metadata = 4;
  // A JSON blob of platformMetadata
  user_metadata.v1.PlatformMetadata platform_metadata = 5;
  // A JSON blob of ownerMetadata
  user_metadata.v1.OwnerMetadata owner_metadata = 6;
  // A JSON blob of domainMetadata
  user_metadata.v1.DomainMetadata domain_metadata = 7;
  // A JSON blob of teamMetadata
  user_metadata.v1.TeamMetadata team_metadata = 8;
  // is synced to datahub
  bool is_synced_to_datahub = 9;
}

// Response for upsert metadata in Snowflake/Datalake
message SaveTableMetadataResponse {
  // Response code
  ResponseCode response_code = 1;
  // misc message for error handling
  google.protobuf.StringValue error_message = 2;
}

// Request for get all changes pertaining to changes in  metadata
message GetAllChangesRequest {
  // is synced to datahub
  bool is_synced_to_datahub = 1;
  // page number
  int32 offset = 2;
  // page size
  int32 pagination = 3;
}

// Response for get all changes pertaining to changes in  metadata
message GetAllChangesResponse {
  // Response code
  ResponseCode response_code = 1;
  // misc message for error handling
  google.protobuf.StringValue error_message = 2;
  // List of changes
  repeated DatasetChangeLog changes = 3;
}

// Request for get changes pertaining to a dataset
message GetDatasetChangeLogRequest {
  // Table fully qualified name attributes
  TableFQN table_fqn = 1;
  // Platform the table exists on
  user_metadata.v1.Platform platform = 2;
}

// Response for get changes pertaining to a dataset
message GetDatasetChangeLogResponse {
  // Response code
  ResponseCode response_code = 1;
  // misc message for error handling
  google.protobuf.StringValue error_message = 2;
  // List of changes
  repeated DatasetChangeLog changes = 3;
}

// Centralized Service for pushing metadata to Snowflake and Datalake table
service MetadataFederatorService {
  // Upsert table metadata
  rpc SaveTableMetadata(SaveTableMetadataRequest) returns (SaveTableMetadataResponse);
  // Get Changes pertaining to a dataset
  rpc GetDatasetChangeLog(GetDatasetChangeLogRequest) returns (GetDatasetChangeLogResponse);
  // Get all the changes based on a filter
  rpc GetAllChanges(GetAllChangesRequest) returns (GetAllChangesResponse);
}
