syntax = "proto3";

package data_tool_grpc_service.v1;

import "data_tool_grpc_service.v1/common.proto";
import "data_tool_grpc_service.v1/role_onboarding.proto";
import "google/protobuf/any.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.data.tools.v1";

// Users - this proto will create the user and schema for that user.
message UserView {
  // system generated uuid for user id
  google.protobuf.StringValue user_id = 1;
  // user name
  string user_name = 2;
  // email
  string email = 3;
  // schema name
  string schema_name = 4;
  // created at
  google.protobuf.Timestamp created_at = 5;
}

// saving the full user request with predefined provisioning strategy
message SaveFullUserRequest {
  // user name
  string user_name = 1;
  // email
  string email = 2;
  // schema name
  string schema_name = 3;
  // created at
  google.protobuf.Timestamp created_at = 4;
  // is provisioned
  bool is_provisioned = 5;
  // provisioned at
  google.protobuf.Timestamp provisioned_at = 6;
  // comments by provisioner
  google.protobuf.StringValue comments_by_provisioner = 7;
  // user role
  google.protobuf.StringValue user_role = 8;
}

// saving the full user response with predefined provisioning strategy
message SaveFullUserResponse {
  // user view which has been inserted along with the user_id
  FullUserView user_view = 1;
  // Response code
  ResponseCode response_code = 2;
  // misc message for error handling
  google.protobuf.StringValue error_message = 3;
}

// the complete user object
message FullUserView {
  // system generated uuid for user id
  google.protobuf.StringValue user_id = 1;
  // user name
  string user_name = 2;
  // email
  string email = 3;
  // schema name
  string schema_name = 4;
  // created at
  google.protobuf.Timestamp created_at = 5;
  // is provisioned
  bool is_provisioned = 6;
  // provisioned at
  google.protobuf.Timestamp provisioned_at = 7;
  // comments by provisioner
  google.protobuf.StringValue comments_by_provisioner = 8;
  // user role
  google.protobuf.StringValue user_role = 13;
}

// save the user onboarding request
message SaveUserRequest {
  // user name
  string user_name = 1;
  // email
  string email = 2;
  // schema name
  string schema_name = 3;
  // created at
  google.protobuf.Timestamp created_at = 4;
}

// save the user onboarding response
message SaveUserResponse {
  // user name
  string user_name = 1;
  // email
  string email = 2;
  // schema name
  string schema_name = 3;
  // created at
  google.protobuf.Timestamp created_at = 4;
  // user id
  google.protobuf.StringValue user_id = 5;
  // Response code
  ResponseCode response_code = 6;
  // misc message for error handling
  google.protobuf.StringValue error_message = 7;
}

// User Roles - this proto will stitch the roles to a user.
message UserRoleRequestView {
  // system generated user role request id
  google.protobuf.StringValue user_role_request_id = 1;
  // requested by uuid
  google.protobuf.StringValue requested_by = 2;
  // role id which is uuid
  google.protobuf.StringValue role_id = 3;
  // requested at
  google.protobuf.Timestamp requested_at = 4;
  // status name
  google.protobuf.StringValue status_name = 5;
  // comments by user
  google.protobuf.StringValue comments_by_user = 6;
  // role type
  int32 role_type_id = 7;
  // role name
  google.protobuf.StringValue role_name = 8;
  // approved by name
  google.protobuf.StringValue approved_by_name = 9;
  // requested by name
  google.protobuf.StringValue requested_by_name = 10;
  // from time
  google.protobuf.Timestamp access_until_date = 11;
  // role type name
  string role_type_name = 12;
}

// RoleRequests
message SaveUserRoleRequest {
  // this should map to the user_name field of the User object
  google.protobuf.StringValue requested_by_name = 1;
  // this should map to the role_name field of the Role object in role_onboarding.proto
  google.protobuf.StringValue role_name = 2;
  // requested at
  google.protobuf.Timestamp requested_at = 3;
  // this should map to the status_name of the RequestStatus object in dimension_onboarding.proto
  string status_name = 4;
  // comments by user
  google.protobuf.StringValue comments_by_user = 5;
  // request type - PERMANENT/TEMPORARY
  string role_type = 6;
  // from time
  google.protobuf.Timestamp access_until_date = 7;
}

// save use role response
message SaveUserRoleResponse {
  // user role request view
  UserRoleRequestView user_role_request = 1;
  // Response code
  ResponseCode response_code = 2;
  // misc message for error handling
  google.protobuf.StringValue error_message = 3;
}

// list all the role requests made by user
message ListRolesForUserRequest {
  // filter
  repeated Filter filter = 1;
  // page number
  int32 offset = 2;
  // page size
  int32 pagination = 3;
}

// list all the role requests made by user - response
message ListRolesForUserResponse {
  // user role request view
  repeated UserRoleRequestView user_role_requests = 1;
  // Response code
  ResponseCode response_code = 2;
  // misc message for error handling
  google.protobuf.StringValue error_message = 3;
  // roles count
  int32 roles_count = 4;
}

// RoleRequestLogs
message UserRoleApprovalView {
  // user role request approval uuid
  google.protobuf.StringValue user_role_request_approval_id = 1;
  // user role request id
  google.protobuf.StringValue user_role_request_id = 2;
  // processed by uuid
  google.protobuf.StringValue approved_by = 3;
  // process at
  google.protobuf.Timestamp approved_at = 4;
  // decision status id
  int32 decision_status_id = 5;
  // comments by admin
  google.protobuf.StringValue comments_by_admin = 6;
}

// save user role approval request
message SaveUserRoleApprovalRequest {
  // user role request uuid
  google.protobuf.StringValue user_role_request_id = 2;
  // this should map to the user_name field of the User object
  google.protobuf.StringValue approved_by_name = 3;
  // processed at
  google.protobuf.Timestamp approved_at = 4;
  // this should map to the status_name of the DecisionStatus object in dimension_onboarding.proto
  string decision_status_name = 5;
  // comments by admin
  google.protobuf.StringValue comments_by_admin = 6;
}

// save user role approval response
message SaveUserRoleApprovalResponse {
  // user role approval view
  UserRoleApprovalView user_role_approval = 1;
  // Response code
  ResponseCode response_code = 2;
  // misc message for error handling
  google.protobuf.StringValue error_message = 3;
}

// list roles for user approval request
message ListRolesForUserApprovalRequest {
  // filter
  repeated Filter filter = 1;
  // page number
  int32 offset = 2;
  // page size
  int32 pagination = 3;
}

// list roles for user approval request - response
message ListRolesForUserApprovalResponse {
  // all user role approval objects
  repeated UserRoleApprovalView user_role_approvals = 1;
  // Response code
  ResponseCode response_code = 2;
  // misc message for error handling
  google.protobuf.StringValue error_message = 3;
  // roles count
  int32 count = 4;
}

// role request revoke
message UserRoleRevokeView {
  // user role revoke request uuid
  google.protobuf.StringValue user_role_revoke_request_id = 1;
  // requested by uuid
  google.protobuf.StringValue requested_by = 2;
  // role id uuid
  google.protobuf.StringValue role_id = 3;
  // requested at
  google.protobuf.Timestamp requested_at = 4;
  // request status id
  int32 status_id = 5;
  // comments by user
  google.protobuf.StringValue comments_by_user = 6;
  // approved by name
  google.protobuf.StringValue approved_by_name = 7;
  // requested by name
  google.protobuf.StringValue requested_by_name = 8;
  // this should map to the status_name of the RequestStatus object in dimension_onboarding.proto
  string status_name = 9;
  // this should map to the role_name field of the Role object in role_onboarding.proto
  google.protobuf.StringValue role_name = 10;
}

// save user role revoke request
message SaveUserRoleRevokeRequest {
  // this should map to the user_name field of the User object
  google.protobuf.StringValue requested_by_name = 2;
  // this should map to the role_name field of the Role object in role_onboarding.proto
  google.protobuf.StringValue role_name = 3;
  // requested at
  google.protobuf.Timestamp requested_at = 4;
  // this should map to the status_name of the RequestStatus object in dimension_onboarding.proto
  string status_name = 5;
  // comments by user
  google.protobuf.StringValue comments_by_user = 6;
}

// save user role revoke response
message SaveUserRoleRevokeResponse {
  // user role revoke view
  UserRoleRevokeView user_role_revoke_request = 1;
  // Response code
  ResponseCode response_code = 7;
  // misc message for error handling
  google.protobuf.StringValue error_message = 8;
}

// list role revoke requests
message ListRolesRevokeForUserRequest {
  // filter
  repeated Filter filter = 1;
  // page number
  int32 offset = 2;
  // page size
  int32 pagination = 3;
}

// list role revoke requests - response
message ListRolesRevokeForUserResponse {
  // user role revoke view
  repeated UserRoleRevokeView user_role_revoke_requests = 1;
  // Response code
  ResponseCode response_code = 2;
  // misc message for error handling
  google.protobuf.StringValue error_message = 3;
  // count
  int32 count = 4;
}

// role request revoke log
message UserRoleRevokeApprovalView {
  // user role revoke request approval uuid
  google.protobuf.StringValue user_role_revoke_request_approval_id = 1;
  // user role revoke request uuid
  google.protobuf.StringValue user_role_revoke_request_id = 2;
  // processed by uuid
  google.protobuf.StringValue approved_by = 3;
  // processed at
  google.protobuf.Timestamp approved_at = 4;
  // decision status id
  int32 decision_status_id = 5;
  // comments by the admin
  google.protobuf.StringValue comments_by_admin = 6;
}

// save the user role revoke approval request
message SaveUserRoleRevokeApprovalRequest {
  // user role revoke request id
  google.protobuf.StringValue user_role_revoke_request_id = 2;
  // this should map to the user_name field of the User object
  google.protobuf.StringValue approved_by_name = 3;
  // processed at
  google.protobuf.Timestamp approved_at = 4;
  // this should map to the status_name of the DecisionStatus object in dimension_onboarding.proto
  string decision_status_name = 5;
  // comments by admin
  google.protobuf.StringValue comments_by_admin = 6;
}

// save the user role revoke approval response
message SaveUserRoleRevokeApprovalResponse {
  // user role revoke approval
  UserRoleRevokeApprovalView user_role_revoke_approval = 1;
  // Response code
  ResponseCode response_code = 2;
  // misc message for error handling
  google.protobuf.StringValue error_message = 3;
}

// list role revoke approvals request
message ListRolesRevokeForUserApprovalRequest {
  // filter
  repeated Filter filter = 1;
  // page number
  int32 offset = 2;
  // page size
  int32 pagination = 3;
}

// list role revoke approvals request response
message ListRolesRevokeForUserApprovalResponse {
  // user role revoke approval
  repeated UserRoleRevokeApprovalView user_role_revoke_approvals = 1;
  // Response code
  ResponseCode response_code = 2;
  // misc message for error handling
  google.protobuf.StringValue error_message = 3;
  // count
  int32 count = 4;
}

// user password change request
message UserPasswordResetView {
  // reset request uuid
  google.protobuf.StringValue reset_request_id = 1;
  // user's email address
  google.protobuf.StringValue user_email = 2;
  // timestamp received
  google.protobuf.Timestamp requested_at = 3;
  // temp password - this will not be stored in the backend
  google.protobuf.StringValue temp_password = 4;
}

// save user password reset request
message SaveUserPasswordResetRequest {
  // user's email address
  google.protobuf.StringValue user_email = 2;
  // timestamp received
  google.protobuf.Timestamp requested_at = 3;
}

// save the user password reset response
message SaveUserPasswordResetResponse {
  // user password reset view
  UserPasswordResetView user_password_reset_view = 1;
  // Response code
  ResponseCode response_code = 2;
  // misc message for error handling
  google.protobuf.StringValue error_message = 3;
}

// list all the roles for a specific user
message ListRolesForUserView {
  // user view
  UserView user = 1;
  // roles for the user
  repeated RoleView roles = 2;
}

// list the role for user request
message ListRolesForUserViewRequest {
  // user name
  google.protobuf.StringValue user_name = 1;
  // page number
  int32 offset = 2;
  // page size
  int32 pagination = 3;
}

// list the role for user response
message ListRolesForUserViewResponse {
  // list the roles for user view
  ListRolesForUserView roles = 1;
  // Response code
  ResponseCode response_code = 2;
  // misc message for error handling
  google.protobuf.StringValue error_message = 3;
  // count
  int32 roles_count = 4;
}

// list user view based on email
message ListUserView {
  // user name
  string user_name = 1;
  // email
  string email = 2;
  // schema name
  string schema_name = 3;
  // created at
  google.protobuf.Timestamp created_at = 4;
  // user id
  google.protobuf.StringValue user_id = 5;
}

// list user request
message ListUserRequest {
  // email of the user
  string email = 1;
}

// list user response
message ListUserResponse {
  // list user view as output
  ListUserView user = 1;
  // Response code
  ResponseCode response_code = 2;
  // misc message for error handling
  google.protobuf.StringValue error_message = 3;
}

// list all users creation request
message ListAllUserCreationRequest {
  // flag to get provisioned/unprovisioned user requests
  bool is_provisioned = 1;
}

// list all users creation response
message ListAllUserCreationResponse {
  // Response code
  ResponseCode response_code = 2;
  // misc message for error handling
  google.protobuf.StringValue error_message = 3;
  // list requested users view as output
  repeated ListUserView user_creation_requests = 4;

  reserved 1;
  reserved "user";
}

// list all user reset password requests
message ListAllPasswordResetRequest {
  // flag to get provisioned/unprovisioned records
  bool is_provisioned = 1;
}

// list all user reset password response
message ListAllPasswordResetResponse {
  // Response code
  ResponseCode response_code = 2;
  // misc message for error handling
  google.protobuf.StringValue error_message = 3;
  // list reset password records
  repeated UserPasswordResetView reset_password_requests = 4;

  reserved 1;
  reserved "user";
}

// view to be dispatched by the server
message UserRoleApprovalProvisionView {
  // user role type - create role or delete role
  google.protobuf.StringValue user_role_request_type = 1;
  // user role request id - this will either be a deletion request or a creation request id
  google.protobuf.StringValue user_request_id = 2;
  // user role approval id - this will either be a deletion approval or a creation approval id
  google.protobuf.StringValue approval_id = 3;
  // requested by
  google.protobuf.StringValue requested_by = 4;
  // requested at
  google.protobuf.Timestamp requested_at = 5;
  // approved by
  google.protobuf.StringValue approved_by = 6;
  // approved at
  google.protobuf.Timestamp approved_at = 7;
  // is provisioned - this will be false
  bool is_provisioned = 8;
  // provisioned at
  google.protobuf.Timestamp provisioned_at = 9;
  // comments - these will be filled by the client which creates the snowflake role
  google.protobuf.StringValue comments_by_provisioner = 10;
  // provision status id - uuid generated by the server
  google.protobuf.StringValue provision_status_id = 11;
  // role_name which either will be assigned or revoked
  google.protobuf.StringValue role_name = 12;
  // user_role for which either role will be assigned or revoked
  google.protobuf.StringValue user_role = 13;
}

// list the provisioning requests which are not provisioned yet - request
message ListUserRolesApprovalProvisionRequest {
  // Filter condition, return all if no filter
  repeated Filter filter = 1;
  // page number
  int32 offset = 2;
  // page size
  int32 pagination = 3;
}

// list the provisioning requests which are not provisioned yet - response
message ListUserRolesApprovalProvisionResponse {
  // all the pending requests - which should be fulfilled
  repeated UserRoleApprovalProvisionView requests = 1;
  // Response code
  ResponseCode response_code = 2;
  // misc message for error handling
  google.protobuf.StringValue error_message = 3;
  // count
  int32 count = 4;
}

// update the provision request based on id - request
message UpdateUserRoleApprovalProvisionRequest {
  // provision request id
  google.protobuf.StringValue provision_status_id = 1;
  // is provisioned
  bool is_provisioned = 2;
  // comments by provisioner
  google.protobuf.StringValue comments_by_provisioner = 3;
  // timestamp
  google.protobuf.Timestamp provisioned_at = 4;
}

// update the provision request based on id - response
message UpdateUserRoleApprovalProvisionResponse {
  // provision request id
  google.protobuf.StringValue provision_status_id = 1;
  // is provisioned
  bool is_provisioned = 2;
  // comments by provisioner
  google.protobuf.StringValue comments_by_provisioner = 3;
  // timestamp
  google.protobuf.Timestamp provisioned_at = 4;
  // Response code
  ResponseCode response_code = 5;
  // misc message for error handling
  google.protobuf.StringValue error_message = 6;
}

// provision the user in snowflake request
message SaveUserAccountProvisionRequest {
  // email
  string email = 1;
  // is provisioned
  bool is_provisioned = 2;
  // comments by provisioner
  google.protobuf.StringValue comments_by_provisioner = 3;
  // timestamp
  google.protobuf.Timestamp provisioned_at = 4;

  reserved 5;
  reserved "user_id";
}

// this view provisions user in snowflake
message UserProvisionView {
  // email
  string email = 1;
  // is provisioned
  bool is_provisioned = 2;
  // comments by provisioner
  google.protobuf.StringValue comments_by_provisioner = 3;
  // timestamp
  google.protobuf.Timestamp provisioned_at = 4;
}

// provision the user in snowflake - response
message SaveUserAccountProvisionResponse {
  // Response code
  ResponseCode response_code = 5;
  // misc message for error handling
  google.protobuf.StringValue error_message = 6;
  // user provision view
  UserProvisionView user_provision = 7;

  reserved 1, 2, 3, 4;
  reserved "user_id", "is_provisioned", "comments_by_provisioner", "provisioned_at";
}

// this view provisions user reset password in snowflake
message UserPasswordResetProvisionView {
  // reset password user id
  google.protobuf.StringValue reset_user_id = 1;
  // is provisioned
  bool is_provisioned = 2;
  // comments by provisioner
  google.protobuf.StringValue comments_by_provisioner = 3;
  // timestamp
  google.protobuf.Timestamp provisioned_at = 4;
}

// provision the user temp password in snowflake - request
message SaveUserPasswordResetProvisionRequest {
  // reset password user id
  google.protobuf.StringValue reset_user_id = 5;
  // is provisioned
  bool is_provisioned = 2;
  // comments by provisioner
  google.protobuf.StringValue comments_by_provisioner = 3;
  // timestamp
  google.protobuf.Timestamp provisioned_at = 4;
}

// provision the user temp password in snowflake - response
message SaveUserPasswordResetProvisionResponse {
  // Response code
  ResponseCode response_code = 5;
  // misc message for error handling
  google.protobuf.StringValue error_message = 6;
  // reset password provision view
  UserPasswordResetProvisionView reset_password_provision = 7;

  reserved 1, 2, 3, 4;
  reserved "reset_user_id", "is_provisioned", "comments_by_provisioner", "provisioned_at";
}

// list distinct projection in user role requests
message ListDistinctProjectionInUserRoleViewRequest {
  // distinct property which needs to be projected.
  Distinct projection = 1;
}

// list distinct projection in user role requests response
message ListDistinctProjectionInUserRoleViewResponse {
  // distinct projections from userRoleView
  repeated google.protobuf.StringValue projections = 1;
  // Response code
  ResponseCode response_code = 2;
  // misc message for error handling
  google.protobuf.StringValue error_message = 3;
}

// list distinct projection in user role revoke requests
message ListDistinctProjectionInUserRoleRevokeViewRequest {
  // distinct property which needs to be projected.
  Distinct projection = 1;
}

// list distinct projection in user role revoke requests response
message ListDistinctProjectionInUserRoleRevokeViewResponse {
  // distinct projections from userRoleRevokeView
  repeated google.protobuf.StringValue projections = 1;
  // Response code
  ResponseCode response_code = 2;
  // misc message for error handling
  google.protobuf.StringValue error_message = 3;
}

// list FullUserView Request
message ListAllUserRequest {
  // page number
  int32 offset = 2;
  // page size
  int32 pagination = 3;
}

// list FullUserView Response
message ListAllUserResponse {
  // all users
  repeated FullUserView users = 1;
  // Response code
  ResponseCode response_code = 2;
  // misc message for error handling
  google.protobuf.StringValue error_message = 3;
}

// list ListAllUserRoleRequest
message ListAllUserRoleRequest {
  // page number
  int32 offset = 1;
  // page size
  int32 pagination = 2;
}

// list ListAllUserRoleResponse
message ListAllUserRoleResponse {
  // user role objects currently present in crdb
  repeated AllUserRoleView roles = 1;
  // Response code
  ResponseCode response_code = 2;
  // misc message for error handling
  google.protobuf.StringValue error_message = 3;
}

// AllUserRoleView object
message AllUserRoleView {
  // system generated uuid for user id
  google.protobuf.StringValue user_id = 1;
  // role id which is uuid
  google.protobuf.StringValue role_id = 2;
  // user role id
  google.protobuf.StringValue user_role_id = 3;
  // this should map to the user_name field of the User object - this user is the requested user
  google.protobuf.StringValue user_name = 4;
  // this should map to the role_name field of the Role object in role_onboarding.proto
  google.protobuf.StringValue role_name = 5;
  // approved by name
  google.protobuf.StringValue approved_by_name = 6;
  // is active
  bool is_active = 7;
  // requested at
  google.protobuf.Timestamp requested_at = 8;
  // approved at
  google.protobuf.Timestamp approved_at = 9;
}

// save the user role mapping via the airflow dag to keep everything in sync - request
message SaveFullUserRoleRequest {
  // system generated uuid for user id
  google.protobuf.StringValue user_name = 7;
  // role id which is uuid
  google.protobuf.StringValue role_name = 8;
  // is active
  bool is_active = 3;
  // requested at
  google.protobuf.Timestamp requested_at = 4;
  // approved at
  google.protobuf.Timestamp approved_at = 5;
  // approved by uuid
  google.protobuf.StringValue approved_by_name = 9;

  reserved 1, 2, 6;
  reserved "user_id", "role_id", "approved_by";
}

// save the user role mapping via the airflow dag to keep everything in sync - response
message SaveFullUserRoleResponse {
  // full user request
  AllUserRoleView user_role_view = 1;
  // Response code
  ResponseCode response_code = 2;
  // misc message for error handling
  google.protobuf.StringValue error_message = 3;
}

// service for data tool user grpc service
service DataToolUserGrpcService {
  // save the user
  rpc SaveUser(SaveUserRequest) returns (SaveUserResponse);
  // save the user role
  rpc SaveUserRole(SaveUserRoleRequest) returns (SaveUserRoleResponse);
  // save user role approval
  rpc SaveUserRoleApproval(SaveUserRoleApprovalRequest) returns (SaveUserRoleApprovalResponse);
  // save the user role revoke request
  rpc SaveUserRoleRevoke(SaveUserRoleRevokeRequest) returns (SaveUserRoleRevokeResponse);
  // save the user role revoke approval
  rpc SaveUserRoleRevokeApproval(SaveUserRoleRevokeApprovalRequest) returns (SaveUserRoleRevokeApprovalResponse);
  // save the user password reset request
  rpc SaveUserPasswordReset(SaveUserPasswordResetRequest) returns (SaveUserPasswordResetResponse);
  // save the user account provision.
  rpc SaveUserAccountProvision(SaveUserAccountProvisionRequest) returns (SaveUserAccountProvisionResponse);
  // save the user password reset provision.
  rpc SaveUserPasswordResetProvision(SaveUserPasswordResetProvisionRequest) returns (SaveUserPasswordResetProvisionResponse);
  // list roles for user
  rpc ListRolesForUserView(ListRolesForUserViewRequest) returns (ListRolesForUserViewResponse);
  // list user
  rpc ListUser(ListUserRequest) returns (ListUserResponse);
  // list all user creation requests
  rpc ListAllUserCreation(ListAllUserCreationRequest) returns (ListAllUserCreationResponse);
  // list all reset password requests
  rpc ListAllPasswordReset(ListAllPasswordResetRequest) returns (ListAllPasswordResetResponse);
  // list role request for user
  rpc ListRolesForUser(ListRolesForUserRequest) returns (ListRolesForUserResponse);
  // list role request approvals
  rpc ListRolesForUserApproval(ListRolesForUserApprovalRequest) returns (ListRolesForUserApprovalResponse);
  // list role revoke requests for user
  rpc ListRolesRevokeForUser(ListRolesRevokeForUserRequest) returns (ListRolesRevokeForUserResponse);
  // list role revoke reqyest approvals for user
  rpc ListRolesRevokeForUserApproval(ListRolesRevokeForUserApprovalRequest) returns (ListRolesRevokeForUserApprovalResponse);
  // list the user role approvals for assignment and revoke which need to be provisioned
  rpc ListUserRolesApprovalProvision(ListUserRolesApprovalProvisionRequest) returns (ListUserRolesApprovalProvisionResponse);
  // update the role approval provision to provisioned if its done.
  rpc UpdateUserRoleApprovalProvision(UpdateUserRoleApprovalProvisionRequest) returns (UpdateUserRoleApprovalProvisionResponse);
  // list distinct projection in UserRoleView
  rpc ListDistinctProjectionInUserRoleView(ListDistinctProjectionInUserRoleViewRequest) returns (ListDistinctProjectionInUserRoleViewResponse);
  // list distinct projection in UserRoleRevokeView
  rpc ListDistinctProjectionInUserRoleRevokeView(ListDistinctProjectionInUserRoleRevokeViewRequest) returns (ListDistinctProjectionInUserRoleRevokeViewResponse);
  // list all users present in crdb
  rpc ListAllUser(ListAllUserRequest) returns (ListAllUserResponse);
  // save full user - used via airflow
  rpc SaveFullUser(SaveFullUserRequest) returns (SaveFullUserResponse);
  // list all users roles present in crdb
  rpc ListAllUserRole(ListAllUserRoleRequest) returns (ListAllUserRoleResponse);
  // save userdao object for a recurring sync
  rpc SaveFullUserRole(SaveFullUserRoleRequest) returns (SaveFullUserRoleResponse);
}
