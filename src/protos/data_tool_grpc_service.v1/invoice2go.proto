syntax = "proto3";

package data_tool_grpc_service.v1;

import "data_tool_grpc_service.v1/common.proto";
import "doordash.api/annotations.proto";
import "google/api/annotations.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.data.tools.v1";

// Enum for request status
enum RetroJobStatus {
  // Unspecified
  RETRO_JOB_STATUS_UNSPECIFIED = 0;
  // pending
  RETRO_JOB_STATUS_PENDING = 1;
  // pending account manager review
  RETRO_JOB_STATUS_PENDING_AM_REVIEW = 2;
  // pending account reviewer review
  RETRO_JOB_STATUS_PENDING_AR_REVIEW = 3;
  // rejected by account manager
  RETRO_JOB_STATUS_REJECTED_BY_AM = 4;
  // rejected by account reviewer
  RETRO_JOB_STATUS_REJECTED_BY_AR = 5;
  // approved by account manager
  RETRO_JOB_STATUS_APPROVED_BY_AM = 6;
  // approved by account reviewer
  RETRO_JOB_STATUS_APPROVED_BY_AR = 7;
  // ready for retro
  RETRO_JOB_STATUS_READY_FOR_RETRO = 8;
}

// Enum for job status
enum JobStatus {
  // Unspecified
  JOB_STATUS_UNSPECIFIED = 0;
  // pending
  JOB_STATUS_PENDING = 1;
  // scheduled
  JOB_STATUS_SCHEDULED = 2;
  // completed
  JOB_STATUS_COMPLETED = 3;
  // failed
  JOB_STATUS_FAILED = 4;
}

// Enum for reasons behind retro requests
enum RetroReason {
  // Default or unspecified value
  RETRO_REASON_UNSPECIFIED = 0;
  // store mapping
  RETRO_REASON_STORE_MAPPING = 1;
  // store mapping change
  RETRO_REASON_STORE_MAPPING_CHANGE = 2;
  // store change
  RETRO_REASON_STORE_CHANGE = 3;
  // store revised commission rate
  RETRO_REASON_REVISED_COMMISSION_RATE = 4;
  // store volume discount
  RETRO_REASON_VOLUME_DISCOUNT = 5;
}

// Enum for primary retro reasons
enum PrimaryRetroReason {
  // store mapping
  PRIMARY_RETRO_REASON_UNSPECIFIED = 0;
  // store mapping
  PRIMARY_RETRO_REASON_INCORRECT_STORE_MAPPING = 1 [deprecated = true];
  // product bug
  PRIMARY_RETRO_REASON_PRODUCT_BUG = 2;
  //onboarding error
  PRIMARY_RETRO_REASON_ONBOARDING_ERROR = 3;
  // non productized deal term
  PRIMARY_RETRO_REASON_NON_PRODUCTIZED_DEAL_TERM = 4;
  // mx accommodation
  PRIMARY_RETRO_REASON_MX_ACCOMMODATION = 5;
  // billing dispute
  PRIMARY_RETRO_REASON_BILLING_DISPUTE = 6;
  // other
  PRIMARY_RETRO_REASON_OTHER = 7;
  // incorrect store charge
  PRIMARY_RETRO_REASON_INCORRECT_STORE_CHARGE = 8;
}

// Enum for secondary retro reasons
enum SecondaryRetroReason {
  // Default or unspecified value
  SECONDARY_RETRO_REASON_UNSPECIFIED = 0;
  // store mapping
  SECONDARY_RETRO_REASON_STORE_MAPPING = 1;
  // change of store mapping
  SECONDARY_RETRO_REASON_CHANGE_OF_STORE_MAPPING = 2 [deprecated = true];
  // new feature
  SECONDARY_RETRO_REASON_NEW_FEATURE = 3;
  // legacy code
  SECONDARY_RETRO_REASON_LEGACY_CODE = 4;
  // tax issue
  SECONDARY_RETRO_REASON_TAX_ISSUE = 5;
  // extraction issue
  SECONDARY_RETRO_REASON_EXTRACTION_ISSUE = 6;
  // deal term cutover
  SECONDARY_RETRO_REASON_DEAL_TERM_CUTOVER = 7;
  // manual activation
  SECONDARY_RETRO_REASON_MANUAL_ACTIVATION = 8;
  // auto onboarding via api
  SECONDARY_RETRO_REASON_AUTO_ONBOARDING_VIA_API = 9;
  // sfdc boarding
  SECONDARY_RETRO_REASON_SFDC_BOARDING = 10;
  // promotion issue
  SECONDARY_RETRO_REASON_PROMOTION_ISSUE = 11;
  // custom fee login
  SECONDARY_RETRO_REASON_CUSTOM_FEE_LOGIN = 12 [deprecated = true];
  // volume discounts
  SECONDARY_RETRO_REASON_VOLUME_DISCOUNTS = 13;
  // reason dwt penalty incentives
  SECONDARY_RETRO_REASON_DWT_PENALTY_INCENTIVES = 14;
  // active store count
  SECONDARY_RETRO_REASON_ACTIVE_STORE_COUNT = 15;
  // pilot
  SECONDARY_RETRO_REASON_PILOT = 16;
  // return cancellation
  SECONDARY_RETRO_REASON_RETURNS_CANCELLATION = 17;
  // aggregator middleware fees
  SECONDARY_RETRO_REASON_AGGREGATOR_MIDDLEWARE_FEES = 18;
  // saas
  SECONDARY_RETRO_REASON_SAAS = 19;
  // mx unable to pay
  SECONDARY_RETRO_REASON_MX_UNABLE_TO_PAY = 20;
  // dd at fault
  SECONDARY_RETRO_REASON_DD_AT_FAULT = 21;
  // mx refund matrix
  SECONDARY_RETRO_REASON_MX_REFUND_MATRIX = 22;
  // reason not applicable
  SECONDARY_RETRO_REASON_NOT_APPLICABLE = 23;
  // change of ownership
  SECONDARY_RETRO_REASON_CHANGE_OF_OWNERSHIP = 24;
  // custom fee logic
  SECONDARY_RETRO_REASON_CUSTOM_FEE_LOGIC = 25;
}

// I2G - this proto will save retro job request into the DB
message RetroJobRequest {
  //  auto generated request id
  google.protobuf.StringValue request_id = 1;
  //  business unit
  google.protobuf.StringValue business_unit = 2;
  //  jira ticket id
  string jira_ticket_id = 3;
  //  retro job version, same jira tickets will have the number incremented by 1
  google.protobuf.Int32Value version = 4;
  // reason for retro request
  RetroReason retro_reason = 5;
  // primary reason for retro request
  PrimaryRetroReason primary_retro_reason = 6;
  // secondary reason for retro request
  SecondaryRetroReason secondary_retro_reason = 7;
  //  requester email id
  google.protobuf.StringValue requested_by = 8;
  // retro request created date
  google.protobuf.Timestamp requested_at = 9;
  // ar email id
  google.protobuf.StringValue ar_approved_by = 10;
  // ar approved date
  google.protobuf.Timestamp ar_approved_at = 11;
  // account manager email id
  google.protobuf.StringValue am_approved_by = 12;
  // account manager approved date
  google.protobuf.Timestamp am_approved_at = 13;
  // email id of user who last updated the request
  google.protobuf.StringValue updated_by = 14;
  // date at which the request was modified
  google.protobuf.Timestamp updated_at = 15;
  // use case specific data
  google.protobuf.Struct request_metadata = 16;
  // retro request status can be Pending, Rejected by Submitter, Rejected by AR
  RetroJobStatus request_status = 17;
  // retro request job status can be Pending, Scheduled, Completed, Failed
  JobStatus job_status = 18;
}

// retro request response
message RetroJobResponse {
  // Response code
  ResponseCode response_code = 1;
  // misc message for error handling
  google.protobuf.StringValue error_message = 2;
  // retro job request view
  RetroJobRequest retro_request = 3;
}

// Request to save retro job
message CreateRetroJobRequest {
  // retro ob request
  RetroJobRequest retro_request = 1;
}

// Response to save retro job
message CreateRetroJobResponse {
  // retro job response
  RetroJobResponse retro_response = 1;
}

// Request to update retro job
message UpdateRetroJobRequest {
  //  jira ticket id
  string jira_ticket_id = 1;
  //  retro job version, same jira tickets will have the number incremented by 1
  int32 version = 2;
  // retro job request
  RetroJobRequest retro_request = 3;
}

// Response to update retro job
message UpdateRetroJobResponse {
  // retro job response
  RetroJobResponse retro_response = 1;
}

// Request for Cloning retro job
message CloneRetroJobRequest {
  // retro job request
  RetroJobRequest retro_request = 1;
}

// Response sent after cloning retro job
message CloneRetroJobResponse {
  // retro job response
  RetroJobResponse retro_response = 1;
}

// Request to get retro job request by Jira ticket ID and retro job version
message GetRetroJobRequest {
  //  jira ticket id
  string jira_ticket_id = 1;
  //  retro job version, same jira tickets will have the number incremented by 1
  int32 version = 2;
}

// Response for getting retro job request
message GetRetroJobResponse {
  // retro job response
  RetroJobResponse retro_response = 1;
}

// Message to store comments with specific fields for AM and AR
message Comments {
  //  auto generated comment id
  google.protobuf.StringValue comment_id = 1;
  //  comment provided by AM
  google.protobuf.StringValue comment_by_am = 2;
  //  comment provided by AR
  google.protobuf.StringValue comment_by_ar = 3;
}

// Message to combine retro job request with comments
message RetroJobRequestWithComments {
  // RetroJobRequestView details
  RetroJobRequest retro_request = 1;
  // Comments related to the invoice request
  Comments comment = 2;
}

// Request to get a list of retro job
message ListRetroJobRequest {}

// Response containing a list of retro job requests with comments
message ListRetroJobResponse {
  //  RetroJobRequestView requests
  repeated RetroJobRequestWithComments retro_requests_with_comments = 1;
  // Response code
  ResponseCode response_code = 2;
  // misc message for error handling
  google.protobuf.StringValue error_message = 3;
}

// Request to update the status of an retro job request
message UpdateRetroJobStatusRequest {
  //  jira ticket id for which we want to update the status
  string jira_ticket_id = 1;
  //  retro job version for which we want to update the status
  int32 version = 2;
  // email id of the user who approved  the request
  string approved_by = 3;
  // role of the user who approved the request
  string user_role = 4;
  // status: can either be approved or rejected
  string status = 5;
  // comment provided by the user
  google.protobuf.StringValue comment = 6;
}

// Response for updating the status of an retro job request
message UpdateRetroJobStatusResponse {
  // Response code
  ResponseCode response_code = 1;
  // misc message for error handling
  google.protobuf.StringValue error_message = 2;
}

// Request to get sql associated with a jira_ticket and retro_job_version
message ViewSQLRequest {
  // jira ticket number
  string jira_ticket = 1;
  // retro job version used to understand different request versions for same ticket
  google.protobuf.Int32Value version = 2;
}

// Response of a view-sql request
message ViewSQLResponse {
  // response status code
  ResponseCode response_code = 1;
  // sql map containing different sql queries as key value pairs of type string
  map<string, string> sql_map = 2;
  // error message it can be empty if there is no error.
  string error_message = 3;
}

// Request to modify job status
message ModifyStatusRequest {
  // jira ticket number
  string jira_ticket = 1;
  // retro job version used to understand different request versions for same ticket
  int32 version = 2;
  // Required: Modified Job status
  JobStatus job_status = 3;
  // Modified request status
  RetroJobStatus request_status = 4;
  // Success/Error Message
  string message = 5;
}

// Response after updating a job status
message ModifyStatusResponse {
  // response code
  string response_code = 1;
  // response status
  string status = 2;
  // message, can either be success or error
  string message = 3;
}

// Request to get all queries for jobs in Pending status
message GetAllQueriesRequest {}

// Response having jobs with status as pending
message Query {
  // Jira Ticket ID
  string jira_ticket_id = 1;
  // Jira Version Number
  int32 version = 2;
  // Retro Reason
  RetroReason retro_reason = 3;
  // queries to be executed after successful pre validation
  map<string, string> queries = 4;
  // Job Status
  JobStatus job_status = 5;
  // Request Status
  RetroJobStatus request_status = 6;
}

// Response to get all queries
message GetAllQueriesResponse {
  // A repeated field to hold multiple entries
  repeated Query queries = 1;
  // response code
  string response_code = 2;
  // response status
  string status = 3;
  // message, can either be success or error
  string message = 4;
}

// Service definition for retro job
service RetroJobGrpcService {
  option (doordash.api.service) = {
    name: "data-tool-grpc-service-web"
    url: "data-tool-grpc-service-web.service.prod.ddsd"
    port: 50051
    name_spaces: ["retro-job"]
    owner: {
      name: "retro_job"
      id: "data-tools-grpc-service-from-the-data-governance-team"
      slack_channel: "#retro-job-testing"
      email_alias: "retro-job-team@doordash.com"
    }
    target_products: [INTERNAL]
  };
  // Save a new invoice
  rpc CreateRetroJob(CreateRetroJobRequest) returns (CreateRetroJobResponse) {
    option (google.api.http) = {
      post: "/retro-job/v1/create"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      role_based_authorization: {
        mode: ANY,
        roles: ["perm_decision_hub"]
      }
      target_products: [INTERNAL]
      authentication_config: {enable_okta_verification: true}
    };
  }
  // Get an existing invoice by Jira ticket ID and retro job version
  rpc GetRetroJob(GetRetroJobRequest) returns (GetRetroJobResponse) {
    option (google.api.http) = {get: "/retro-job/v1/{jira_ticket_id}/{version}"};
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      role_based_authorization: {
        mode: ANY,
        roles: ["perm_decision_hub"]
      }
      target_products: [INTERNAL]
      authentication_config: {enable_okta_verification: true}
    };
  }
  // Update an existing invoice
  rpc UpdateRetroJob(UpdateRetroJobRequest) returns (UpdateRetroJobResponse) {
    option (google.api.http) = {
      put: "/retro-job/v1/update"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      role_based_authorization: {
        mode: ANY,
        roles: ["perm_decision_hub"]
      }
      target_products: [INTERNAL]
      authentication_config: {enable_okta_verification: true}
    };
  }
  // Clone an existing invoice
  rpc CloneRetroJob(CloneRetroJobRequest) returns (CloneRetroJobResponse) {
    option (google.api.http) = {
      post: "/retro-job/v1/clone"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      role_based_authorization: {
        mode: ANY,
        roles: ["perm_decision_hub"]
      }
      target_products: [INTERNAL]
      authentication_config: {enable_okta_verification: true}
    };
  }
  // List invoices with optional filters and pagination
  rpc ListRetroJob(ListRetroJobRequest) returns (ListRetroJobResponse) {
    option (google.api.http) = {
      post: "/retro-job/v1/list"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      role_based_authorization: {
        mode: ANY,
        roles: ["perm_decision_hub"]
      }
      target_products: [INTERNAL]
      authentication_config: {enable_okta_verification: true}
    };
  }
  // Update the status of an invoice
  rpc UpdateRetroJobStatus(UpdateRetroJobStatusRequest) returns (UpdateRetroJobStatusResponse) {
    option (google.api.http) = {
      patch: "/retro-job/v1/status"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      role_based_authorization: {
        mode: ANY,
        roles: ["perm_decision_hub"]
      }
      target_products: [INTERNAL]
      authentication_config: {enable_okta_verification: true}
    };
  }
  // Get SQL associated with a jira ticket and retro job version
  rpc ViewSQL(ViewSQLRequest) returns (ViewSQLResponse) {
    option (google.api.http) = {get: "/retro-job/v1/retro-request-sql/{jira_ticket}/{version}"};
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      role_based_authorization: {
        mode: ANY,
        roles: ["perm_decision_hub"]
      }
      target_products: [INTERNAL]
      authentication_config: {enable_okta_verification: true}
    };
  }
  // Retrieves all queries associated with retro jobs that require processing.
  rpc GetAllQueries(GetAllQueriesRequest) returns (GetAllQueriesResponse) {
    option (google.api.http) = {get: "/retro-job/v1/queries"};
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      role_based_authorization: {
        mode: ANY,
        roles: ["perm_decision_hub"]
      }
      target_products: [INTERNAL]
      authentication_config: {enable_okta_verification: true}
    };
  }
  // Update job status after processing
  rpc ModifyStatus(ModifyStatusRequest) returns (ModifyStatusResponse) {
    option (google.api.http) = {
      patch: "/retro-job/v1/status/update"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      role_based_authorization: {
        mode: ANY,
        roles: ["perm_decision_hub"]
      }
      target_products: [INTERNAL]
      authentication_config: {enable_okta_verification: true}
    };
  }
}
