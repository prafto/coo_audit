syntax = "proto3";

package data_tool_grpc_service.v1;

import "google/protobuf/any.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.data.tools.v1";

// DataPlatform details the platform hosting the data (e.g., Snowflake).
message DataPlatform {
  // Unique identifier for the platform.
  string urn = 1;
  // Type of the data platform, e.g., DATA_PLATFORM.
  string type = 2;
  // Name of the platform, e.g., Snowflake.
  string name = 3;
  // Properties specific to the platform.
  PlatformProperties properties = 4;
}

// Properties specific to the platform.
message PlatformProperties {
  // Type of platform, e.g., RELATIONAL_DB.
  string type = 1;
  // Human-readable name for the platform.
  string display_name = 2;
  // Delimiter used in dataset names.
  string dataset_name_delimiter = 3;
  // URL to the platform's logo image.
  string logo_url = 4;
}

// SchemaField represents a single field within a dataset schema.
message SchemaField {
  // Indicates if the field is part of the primary key.
  bool ps_part_of_key = 1;
  // Data type of the field, e.g., NUMBER.
  string type = 2;
  // Path to the field within the dataset.
  string field_path = 3;
  // Indicates if the field can contain null values.
  bool nullable = 4;
  // Description of the field.
  string description = 5;
}

// SchemaMetadata encapsulates the schema information of a dataset.
message SchemaMetadata {
  // List of fields within the dataset's schema.
  repeated SchemaField fields = 1;
}

// CustomProperty is a key-value pair representing additional metadata.
message CustomProperty {
  // Key of the property.
  string key = 1;
  // Value of the property.
  string value = 2;
}

// AssertionResult details the result of an assertion check.
message AssertionResult {
  // Result type, e.g., SUCCESS or FAIL.
  string type = 1;
}

// AssertionRunEvent represents an instance of an assertion being run.
message AssertionRunEvent {
  // Identifier for the run event.
  string run_id = 1;
  // Status of the run, e.g., COMPLETE.
  string status = 2;
  // Timestamp of the run event in milliseconds.
  int64 timestamp_millis = 3;
  // Result of the assertion check.
  AssertionResult result = 4;
}

// Assertion details a data quality assertion applied to a dataset.
message Assertion {
  // Unique identifier for the assertion.
  string urn = 1;
  // Type of assertion.
  string type = 2;
  // Events of the assertion being run.
  repeated AssertionRunEvent run_events = 3;
}

// Owner details the ownership information for a dataset.
message Owner {
  // Unique identifier for the owner.
  string urn = 1;
  // Username of the owner.
  string username = 2;
  // Type of ownership.
  OwnershipType ownership_type = 3;
}

// OwnershipType details the type of ownership an owner has.
message OwnershipType {
  // Unique identifier for the ownership type.
  string urn = 1;
  // Name of the ownership type.
  string name = 2;
  // Description of the ownership type.
  string description = 3;
}

// Dataset represents a complete dataset entity as described in your data.
message Dataset {
  // Unique resource identifier for the dataset.
  string urn = 1;
  // Name of the dataset.
  string name = 2;
  // Type of entity, e.g., DATASET.
  string type = 3;
  // Platform the dataset resides on.
  DataPlatform platform = 4;
  // Schema metadata of the dataset.
  SchemaMetadata schema_metadata = 5;
  // Custom properties of the dataset.
  repeated CustomProperty custom_properties = 6;
  // Assertions applied to the dataset.
  repeated Assertion assertions = 7;
  // List of owners of the dataset.
  repeated Owner owners = 8;
  // Description of the dataset.
  string description = 9;
}

// GlobalTag represents tags applied globally to a dataset.
message GlobalTag {
  // Unique identifier for the tag.
  string tag_urn = 1;
  // URN of the entity to which the tag is associated.
  string associated_urn = 2;
}

// Health details the health status of a dataset, including failing assertions.
message Health {
  // Type of health check, e.g., ASSERTIONS.
  string type = 1;
  // Overall status, e.g., FAIL.
  string status = 2;
  // Descriptive message about the health status.
  string message = 3;
  // URNs of assertions causing the failure.
  repeated string causes = 4;
}

// SearchResults encapsulates search results for dataset entities.
message SearchResult {
  // Starting index of the results.
  int32 start = 1;
  // Count of entities returned.
  int32 count = 2;
  // Total number of entities that match the search.
  int32 total = 3;
  // List of datasets matching the search.
  repeated Dataset datasets = 4;
}

// Represents the entire 'data' structure in the JSON.
message DataContainer {
  // Represents the search results as detailed in your JSON.
  SearchResult search_across_entities = 1;
}

// rolled reponse under data
message SearchInputResponse {
  // get the encapsulated data object
  DataContainer data = 1;
}

// Represents a query request for searching datasets.
message QueryRequest {
  // The search query, e.g., 'edw.finance.dimension_deliveries'.
  string query = 1;
  // Starting index for the search results.
  int32 start = 2;
  // Number of results to return.
  int32 count = 3;
  // Optional: Types of entities to search for.
  repeated string types = 4;
  // Optional: OR filters to apply in the search.
  repeated string or_filters = 5;
}

// Represents the entire input including the QueryRequest.
message SearchInputRequest {
  // Nested QueryRequest as 'input'.
  QueryRequest input = 1;
}

// search service for datahub
service DataHubSearchService {
  // datahub search rpc call
  rpc SearchInput(SearchInputRequest) returns (SearchInputResponse);
}
