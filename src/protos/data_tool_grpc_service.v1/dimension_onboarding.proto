syntax = "proto3";

package data_tool_grpc_service.v1;

import "google/protobuf/any.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.data.tools.v1";

// verticals
// this table will be pre-populated with the following values
/*
   Consumer, Data Platform, Data Engineering, Analytics, Merchant, Finance, Marketing, Opex, Finance
   New Verticals, Wolt, Ads, Dasher, International, Labs, Infrastructure, Others
*/
message Vertical {
  // doordash vertical id
  int32 vertical_id = 1;
  // doordash vertical name
  string vertical_name = 2;
}

// empty Vertical request - typically used for tagging snowflake warehouses
message ListVerticalRequest {}

//vertical response
message ListVerticalResponse {
  // doordash verticals
  repeated Vertical verticals = 1;
}

// role type object - typically contains - PERMANENT and TEMPORARY
message RoleType {
  // type id
  int32 role_type_id = 1;
  // type name
  string role_type_name = 2;
}

// empty RoleType request = typlically used for snowflake role creation
message ListRoleTypeRequest {}

// role type response
message ListRoleTypeResponse {
  // doordash verticals
  repeated RoleType role_types = 1;
}

// WarehouseStatus
// This table will be pre-populated with the following values
/*
 ('Active'), ('Inactive'), ('InFlight');
*/
message WarehouseStatus {
  // snowflake warehouse provisioning status id
  int32 status_id = 1;
  // snowflake warehouse provisioning status name
  string status_name = 2;
}

// empty WarehouseStatus request - typically used for tracking the status of the warehouse provisioning
message ListWarehouseStatusRequest {}

// WarehouseStatus response - typically used for tracking the status of the warehouse provisioning
message ListWarehouseStatusResponse {
  // snowflake statuses
  repeated WarehouseStatus statuses = 1;
}

// RequestStatus
// This table will be pre-populated with the following values
/*
 ('Pending), ('Approved'), ('Denied');
*/
message RequestStatus {
  // request status id
  int32 status_id = 1;
  // request status name
  string status_name = 2;
}

// empty RequestStatus request - typically used for tracking the status of the requests raised by user
message ListRequestStatusRequest {}

// RequestStatus response - typically used for tracking the status of the requests raised by the user
message ListRequestStatusResponse {
  // request statuses
  repeated RequestStatus statuses = 1;
}

// SubmissionStatus
// This table will be pre-populated with the following values
/*
 ('Submitted', 'Approved', 'Executed', 'Rejected')
*/
message SubmissionStatus {
  // submission status id
  int32 status_id = 1;
  // submission status name
  string status_name = 2;
}

// empty SubmissionStatus request - typically used for tracking the status of the requests raised by user
message ListSubmissionStatusRequest {}

// SubmissionStatus response - typically used for tracking the status of the requests raised by the user
message ListSubmissionStatusResponse {
  // submission statuses
  repeated SubmissionStatus statuses = 1;
}

// this message is an external approval group like a google-group and one place holder for user.
message ExternalApprovalGroup {
  // auto incremented group id
  int32 external_group_id = 1;
  // group name  - google group email id
  string group_name = 2;
  // description of the google group
  string description = 3;
}

// empty ExternalApprovalGroup request - typically used for tracking all the google groups
message ListExternalApprovalGroupRequest {}

// ExternalApprovalGroup response - typically used for tracking all the google groups
message ListExternalApprovalGroupResponse {
  // submission statuses
  repeated ExternalApprovalGroup statuses = 1;
}

// ExecutionResult
// This table will be pre-populated with the following values
/*
 ('Success'), ('Failure'), ('InProgress');
*/
message ExecutionResult {
  // result id
  int32 result_id = 1;
  // result name
  string result_name = 2;
}

// execution result request
message ListExecutionResultRequest {}

// execution result response
message ListExecutionResultResponse {
  // submission statuses
  repeated ExecutionResult results = 1;
}

// WarehouseSize
// This table will be pre-populated with the following values
/*
 ('X-Small'), ('Small'), ('Medium'), ('Large'), ('X-Large'), ('2X-Large'), ('3X-Large'), ('4X-Large')
*/
message WarehouseSize {
  // snowflake warehouse size id
  int32 size_id = 1;
  // snowflake warehouse size name
  string size_name = 2;
}

// empty WarehouseSize request - typically used for onboarding warehouses
message ListWarehouseSizeRequest {}

// WarehouseSize response - typically used for onboarding warehouses
message ListWarehouseSizeResponse {
  // snowflake warehouse sizes
  repeated WarehouseSize sizes = 1;
}

// ScalingPolicyType
// This table will be pre-populated with the following values
/*
 ('Standard'), ('Economy');
*/
message ScalingPolicyType {
  // scaling policy id
  int32 policy_type_id = 1;
  // scaling policy name
  string policy_type_name = 2;
}

// empty ScalingPolicyType request - typically used for onboarding warehouses
message ListScalingPolicyTypeRequest {}

// ScalingPolicyType response - typically used for onboarding warehouses
message ListScalingPolicyTypeResponse {
  // policy types
  repeated ScalingPolicyType types = 1;
}

// WarehouseType
// This table will be pre-populated with the following values
/*
 ('Team'), ('ETL');
*/
message WarehouseType {
  // type id
  int32 type_id = 1;
  // type name
  string type_name = 2;
}

// empty warehouse type request - typically used for onboarding warehouses
message ListWarehouseTypeRequest {}

// warehouse type response - typically used for onboarding warehouses
message ListWarehouseTypeResponse {
  // warehouse types
  repeated WarehouseType types = 1;
}

// DecisionStatus
// This table will be pre-populated with the following values
/*
 ('Approved'), ('Denied');
*/
message DecisionStatus {
  // decision status id
  int32 decision_status_id = 1;
  // // decision status name
  string decision_status_name = 2;
}

// empty Decision status request - typically ised in all the admin approval flows.
message ListDecisionStatusRequest {}

// decision status response - typically used in all the admin approval flows
message ListDecisionStatusResponse {
  // decision statuses
  repeated DecisionStatus statuses = 1;
}

// SnowflakePrivilege for warehouses
// This table will be pre-populated with the following values
/*
 ('MODIFY'), ('MONITOR'), ('OPERATE'), ('USAGE');
*/
message SnowflakePrivilege {
  // privilege id
  int32 privilege_id = 1;
  // // privilege name
  string privilege_name = 2;
}

// empty SnowflakePrivilegeRequest - typically used for warehouse role assignment.
message ListSnowflakePrivilegeRequest {}

// snowflake privilege response - typically used for warehouse role assignment.
message ListSnowflakePrivilegeResponse {
  // all snowflake privileges
  repeated SnowflakePrivilege privileges = 1;
}

// csv upload type with id and name, rebuild or insert
message CsvUploadType {
  // upload_type_id
  int32 upload_type_id = 1;
  // upload_type_name
  string upload_type_name = 2;
}

// list all upload type request
message ListUploadTypeRequest {}

// list all upload type response
message ListUploadTypeResponse {
  // drop down content
  // insert or rebuild
  repeated CsvUploadType csv_upload_type = 1;
}

// storage system with id and name, snowflake or data lake
message StorageSystem {
  // storage_system_id
  int32 storage_system_id = 1;
  // storage_system_name
  string storage_system_name = 2;
}

// list all storage system request
message ListUploadStorageSystemRequest {}

// list all storage system response
message ListUploadStorageSystemResponse {
  // drop down content, snowflake or datalake
  repeated StorageSystem storage_system = 1;
}

// supported data type for columns: int, boolean, double, decimal, varchar(50), date, time, timestamp, uuid
message ColumnDataType {
  // supported_data_type_id
  int32 column_data_type_id = 1;
  // supported_data_type_name
  string column_data_type_name = 2;
}

// list all data type for table schemas request
message ListColumnDataTypeRequest {}

// list all data type for table schemas response
message ListColumnDataTypeResponse {
  // drop down content for data type when users input table schemas
  repeated ColumnDataType data_type = 1;
}

// service for exposing data tool dimensions
service DataToolDimensionService {
  // list snowflake privileges
  rpc ListSnowflakePrivilege(ListSnowflakePrivilegeRequest) returns (ListSnowflakePrivilegeResponse);
  // list snowflake decision status
  rpc ListDecisionStatus(ListDecisionStatusRequest) returns (ListDecisionStatusResponse);
  // list snowflake warehouse types
  rpc ListWarehouseType(ListWarehouseTypeRequest) returns (ListWarehouseTypeResponse);
  // list snowflake scaling policy types
  rpc ListScalingPolicyType(ListScalingPolicyTypeRequest) returns (ListScalingPolicyTypeResponse);
  // list snowflake sizes
  rpc ListWarehouseSize(ListWarehouseSizeRequest) returns (ListWarehouseSizeResponse);
  // list snowflake request status
  rpc ListRequestStatus(ListRequestStatusRequest) returns (ListRequestStatusResponse);
  // list snowflake warehouse status
  rpc ListWarehouseStatus(ListWarehouseStatusRequest) returns (ListWarehouseStatusResponse);
  // list snowflake verticals
  rpc ListVertical(ListVerticalRequest) returns (ListVerticalResponse);
  // list role request types
  rpc ListRoleType(ListRoleTypeRequest) returns (ListRoleTypeResponse);
  // list csv upload method type
  rpc ListUploadType(ListUploadTypeRequest) returns (ListUploadTypeResponse);
  // list csv upload storage system
  rpc ListUploadStorageSystem(ListUploadStorageSystemRequest) returns (ListUploadStorageSystemResponse);
  // list supported data type
  rpc ListColumnDataType(ListColumnDataTypeRequest) returns (ListColumnDataTypeResponse);
  // list submitted statuses
  rpc ListSubmissionStatus(ListSubmissionStatusRequest) returns (ListSubmissionStatusResponse);
  // list external google groups
  rpc ListExternalApprovalGroup(ListExternalApprovalGroupRequest) returns (ListExternalApprovalGroupResponse);
  // list of execution results
  rpc ListExecutionResult(ListExecutionResultRequest) returns (ListExecutionResultResponse);
}
