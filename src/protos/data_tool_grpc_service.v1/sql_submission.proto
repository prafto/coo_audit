syntax = "proto3";

package data_tool_grpc_service.v1;

import "data_tool_grpc_service.v1/common.proto";
import "data_tool_grpc_service.v1/dimension_onboarding.proto";
import "doordash.api/annotations.proto";
import "google/api/annotations.proto";
import "google/protobuf/any.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.data.tools.v1";

// sql submission request view which goes into the DB
message SqlSubmissionRequestView {
  // auto generated submission id
  google.protobuf.StringValue submission_id = 1;
  // auto generated user id
  google.protobuf.StringValue user_id = 2;
  // auto generated approver
  google.protobuf.StringValue approver_user_id = 3;
  // sql
  google.protobuf.StringValue sql_text = 4;
  // submitted at
  google.protobuf.Timestamp submitted_at = 5;
  // comments by user
  google.protobuf.StringValue comments_by_user = 6;
  // submission status id
  int32 status_id = 7;
  // result status id
  int32 result_id = 8;
  // submission status name
  google.protobuf.StringValue status_name = 9;
  // result status name
  google.protobuf.StringValue result_name = 10;
  // submitter user name
  google.protobuf.StringValue user_name = 13;
  // primary approver user name
  google.protobuf.StringValue primary_approver_name = 14;
  reserved 11, 12;
  reserved "external_groups", "external_groups_list";
}

// sql submission request
message SaveSqlSubmissionRequest {
  // user name who submitted the request
  google.protobuf.StringValue user_name = 1;
  // The SQL code to be executed
  google.protobuf.StringValue sql_text = 3;
  // The timestamp of when the submission was made
  google.protobuf.Timestamp submitted_at = 4;
  // submission status name
  string status_name = 5;
  // comments on why this query is required
  google.protobuf.StringValue comments_by_user = 6;
  // team user_name who should approve the sql
  google.protobuf.StringValue primary_approver_user = 7;
  // result name
  string result_name = 8;
  // map of external group and selected approver from that group and sequence
  repeated ExternalGroupSequenceMap external_group_approvers_sequence = 9;
}

// sql submission response
// at the end of this step the primary approver is notified via slack
message SaveSqlSubmissionResponse {
  // Response code
  ResponseCode response_code = 1;
  // misc message for error handling
  google.protobuf.StringValue error_message = 2;
  // sql submission request view
  SqlSubmissionRequestView submission_request = 3;
}

// list all the available sql submission requests made in general
message ListSqlSubmissionRequest {
  // filter
  repeated Filter filter = 1;
  // page number
  int32 offset = 2;
  // page size
  int32 pagination = 3;
}

// list all the approvals which a user has to do
message ListSqlSubmissionApprovalPathRequest {
  // page number
  int32 offset = 1;
  // page size
  int32 pagination = 2;
  // user name
  google.protobuf.StringValue user_name = 3;
  // groups the user is part off
  repeated google.protobuf.StringValue external_groups = 4;
  // filter
  repeated Filter filter = 5;
}

// list of all the approvals which a user has to do - response
message ListSqlSubmissionApprovalPathResponse {
  // Response code
  ResponseCode response_code = 1;
  // misc message for error handling
  google.protobuf.StringValue error_message = 2;
  // approvals which the user has to do
  repeated SubmissionApprovalPathView approval_requests = 3;
  // count
  int32 count = 4;
}

// list all the available sql submission requests made in general - response
message ListSqlSubmissionResponse {
  // SqlSubmissionRequestView requests
  repeated SqlSubmissionRequestView submission_requests = 1;
  // Response code
  ResponseCode response_code = 2;
  // misc message for error handling
  google.protobuf.StringValue error_message = 3;
  // count
  int32 count = 4;
}

// submission approval path
message SubmissionApprovalPathView {
  // auto generated approval id
  google.protobuf.StringValue approval_id = 1;
  // auto generated submission id
  google.protobuf.StringValue submission_id = 2;
  // external group id
  int32 external_group_id = 3;
  // approver id
  google.protobuf.StringValue approver_id = 4;
  // approval status
  int32 submission_status_id = 5;
  // approval/rejection timestamp
  google.protobuf.Timestamp approval_at = 6;
  // comments by approver
  google.protobuf.StringValue comments_by_approver = 7;
  // approval sequence - 1 will be for primary approver and 2 will be for google group.
  int32 approval_sequence = 8;
  // sql
  google.protobuf.StringValue sql_text = 9;
  // submitted at
  google.protobuf.Timestamp submitted_at = 10;
  // comments by user
  google.protobuf.StringValue comments_by_user = 11;
  // submission status name
  google.protobuf.StringValue submission_status_name = 12;
  // submitter user name
  google.protobuf.StringValue submitted_by = 13;
  // external group name
  string external_group_name = 14;
}

// update the request when the approver changes the status of the sql.
message UpdateSubmissionApprovalPathRequest {
  // auto generated submission id
  google.protobuf.StringValue submission_id = 1;
  // external group name
  string external_group_name = 2;
  // approver name
  google.protobuf.StringValue approved_by = 3;
  // approval status - this is nothing but the submission status message
  string submission_status = 4;
  // approval/rejection timestamp
  google.protobuf.Timestamp approval_at = 5;
  // comments by approver
  google.protobuf.StringValue comments_by_approver = 6;
}

// update the submission approval path response
message UpdateSubmissionApprovalPathResponse {
  reserved 3;
  reserved "submission_requests";
  // Response code
  ResponseCode response_code = 1;
  // misc message for error handling
  google.protobuf.StringValue error_message = 2;
  // sql submission request view - all the approvals for this submission will be sent to the client
  SubmissionApprovalPathView submission_request = 4;
}

// you will see an entry into this view only when both the approvals are met
// 1 from the primary approver shared by the user
// 2 from the relevant google group -> it could either be sox or rev-data based on the sql text
message SqlSubmissionExecutionView {
  // execution id
  google.protobuf.StringValue sql_execution_id = 1;
  // submission id
  google.protobuf.StringValue submission_id = 2;
  // execution timestamp
  google.protobuf.Timestamp executed_at = 3;
  // execution status id
  int32 status_id = 4;
  // result id
  int32 result_id = 5;
  // submitter
  google.protobuf.StringValue submitter_id = 6;
  // primary approver
  google.protobuf.StringValue primary_approver_id = 7;
  // sql query to be executed on snowflake
  google.protobuf.StringValue sql_text = 8;
  // sql failure reason incase sql fails
  string failure_reason = 9;
}

// list all the pending sql submission requests to be executed
message ListSqlSubmissionExecutionRequest {
  // filter
  repeated Filter filter = 1;
  // page number
  int32 offset = 2;
  // page size
  int32 pagination = 3;
}

// list all the pending sql submission responses to be executed
message ListSqlSubmissionExecutionResponse {
  // sql submission approved requests
  repeated SqlSubmissionExecutionView requests = 1;
  // Response code
  ResponseCode response_code = 2;
  // misc message for error handling
  google.protobuf.StringValue error_message = 3;
}

// update request stating that the sql_execution_id is complete
message UpdateSqlSubmissionExecutionRequest {
  // execution id
  google.protobuf.StringValue sql_execution_id = 1;
  // result - execution result
  string result_name = 2;
  // status - submission status
  string status_name = 3;
  // execution timestamp
  google.protobuf.Timestamp executed_at = 4;
  // sql failure reason incase sql fails
  string failure_reason = 5;
}

// update request stating that the sql_execution_id is complete - response
// this should update the sql submission table as well.
message UpdateSqlSubmissionExecutionResponse {
  // sql submission updated response
  SqlSubmissionExecutionView updated_execution = 1;
  // Response code
  ResponseCode response_code = 2;
  // misc message for error handling
  google.protobuf.StringValue error_message = 3;
}

// map the selected approver from the external group to sequence number
message ExternalGroupSequenceMap {
  // sequence number
  int32 sequence = 1;
  // external group name
  ExternalApprovalGroup external_group = 3;
  // selected approver name
  google.protobuf.StringValue selected_approver = 4;

  reserved 2;
  reserved 'external_group_approvers';
}

// sql submission request external group approvers
message ValidateSqlAndDeduceExternalGroupsRequest {
  // The SQL code to be validated
  google.protobuf.StringValue sql_text = 1;
}

// sql submission external group approver select response
message ValidateSqlAndDeduceExternalGroupsResponse {
  // Response code
  ResponseCode response_code = 1;
  // misc message for error handling
  google.protobuf.StringValue error_message = 2;
  // secondary approver external groups
  repeated ExternalGroupSequenceMap external_groups = 3;
}

// stores the external group approval status map
message ExternalGroupApprovalStatus {
  // external group name
  google.protobuf.StringValue external_group = 1;
  // external group name
  google.protobuf.StringValue approver_name = 2;
  // approval status
  google.protobuf.StringValue status_name = 3;
  // approval sequence
  int32 sequence = 4;
}

// list all the approvals status for a sql submission request
message ListSqlSubmissionApprovalStatusRequest {
  // submission id
  google.protobuf.StringValue submission_id = 1;
}

// list of approval statuses for a sql submission request - response
message ListSqlSubmissionApprovalStatusResponse {
  // Response code
  ResponseCode response_code = 1;
  // misc message for error handling
  google.protobuf.StringValue error_message = 2;
  // external group approvers approval status map
  repeated ExternalGroupApprovalStatus approval_status = 3;
}

// list distinct projection in submission approval path view request
message ListDistinctProjectionInSubmissionApprovalPathViewRequest {
  // distinct property which needs to be projected.
  Distinct projection = 1;
}

// list distinct projection in submission approval path view response
message ListDistinctProjectionInSubmissionApprovalPathViewResponse {
  // distinct projections from submissionApprovalPathView
  repeated google.protobuf.StringValue projections = 1;
  // Response code
  ResponseCode response_code = 2;
  // misc message for error handling
  google.protobuf.StringValue error_message = 3;
}

// cancel sql submission request
message CancelSqlSubmissionRequest {
  // sql submission request id
  string submission_id = 1;
}

// cancel sql submission response
message CancelSqlSubmissionResponse {
  // Response code
  ResponseCode response_code = 1;
  // misc message for error handling
  google.protobuf.StringValue error_message = 2;
}

// data tool sql submission grpc service
service DataToolSqlSubmissionGrpcService {
  option (doordash.api.service) = {
    name: "data-tool-sql-submission"
    url: "data-tool-grpc-service-web.service.prod.ddsd"
    port: 50051
    name_spaces: ["sql-submission"]
    owner: {
      name: "sql-submission"
      id: "data-tools-grpc-service-from-the-data-governance-team"
      slack_channel: "#data-tools-alerts"
      email_alias: "eng-data-tools@doordash.com"
    }
    target_products: [INTERNAL]
  };

  // save sql submission
  rpc SaveSqlSubmission(SaveSqlSubmissionRequest) returns (SaveSqlSubmissionResponse) {
    option (google.api.http) = {
      post: "/sql-submission/v1/save"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      role_based_authorization: {
        mode: ANY,
        roles: ["perm_decision_hub"]
      }
      target_products: [INTERNAL]
    };
  }
  // list sql submissions
  rpc ListSqlSubmission(ListSqlSubmissionRequest) returns (ListSqlSubmissionResponse) {
    option (google.api.http) = {
      post: "/sql-submission/v1/list"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      role_based_authorization: {
        mode: ANY,
        roles: ["perm_decision_hub"]
      }
      target_products: [INTERNAL]
    };
  }
  // validate sql and deduce external groups
  rpc ValidateSqlAndDeduceExternalGroups(ValidateSqlAndDeduceExternalGroupsRequest) returns (ValidateSqlAndDeduceExternalGroupsResponse) {
    option (google.api.http) = {
      post: "/sql-submission/v1/validate"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      role_based_authorization: {
        mode: ANY,
        roles: ["perm_decision_hub"]
      }
      target_products: [INTERNAL]
    };
  }
  // list sql submissions approvals
  rpc ListSqlSubmissionApprovalPath(ListSqlSubmissionApprovalPathRequest) returns (ListSqlSubmissionApprovalPathResponse) {
    option (google.api.http) = {
      post: "/sql-submission/v1/approvals"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      role_based_authorization: {
        mode: ANY,
        roles: ["perm_decision_hub"]
      }
      target_products: [INTERNAL]
    };
  }
  // list distinct projection in sqlSubmission approval paths
  rpc ListDistinctProjectionInSubmissionApprovalPathView(ListDistinctProjectionInSubmissionApprovalPathViewRequest) returns (ListDistinctProjectionInSubmissionApprovalPathViewResponse) {
    option (google.api.http) = {get: "/sql-submission/v1/projections"};
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      role_based_authorization: {
        mode: ANY,
        roles: ["perm_decision_hub"]
      }
      target_products: [INTERNAL]
    };
  }
  // list sql submission approvals status
  rpc ListSqlSubmissionApprovalStatus(ListSqlSubmissionApprovalStatusRequest) returns (ListSqlSubmissionApprovalStatusResponse) {
    option (google.api.http) = {get: "/sql-submission/v1/approval-status"};
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      role_based_authorization: {
        mode: ANY,
        roles: ["perm_decision_hub"]
      }
      target_products: [INTERNAL]
    };
  }
  // update sql submission approval status
  rpc UpdateSubmissionApprovalPath(UpdateSubmissionApprovalPathRequest) returns (UpdateSubmissionApprovalPathResponse) {
    option (google.api.http) = {
      patch: "/sql-submission/v1/approval-status"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      role_based_authorization: {
        mode: ANY,
        roles: ["perm_decision_hub"]
      }
      target_products: [INTERNAL]
    };
  }
  // list sql submission execution ready statements
  rpc ListSqlSubmissionExecution(ListSqlSubmissionExecutionRequest) returns (ListSqlSubmissionExecutionResponse) {
    option (google.api.http) = {
      post: "/sql-submission/v1/execution/list"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      role_based_authorization: {
        mode: ANY,
        roles: ["perm_decision_hub"]
      }
      target_products: [INTERNAL]
    };
  }
  // update sql submission execution status and result
  rpc UpdateSqlSubmissionExecution(UpdateSqlSubmissionExecutionRequest) returns (UpdateSqlSubmissionExecutionResponse) {
    option (google.api.http) = {
      patch: "/sql-submission/v1/execution/update"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      role_based_authorization: {
        mode: ANY,
        roles: ["perm_decision_hub"]
      }
      target_products: [INTERNAL]
    };
  }
  // cancel sql submission request
  rpc CancelSqlSubmission(CancelSqlSubmissionRequest) returns (CancelSqlSubmissionResponse) {
    option (google.api.http) = {delete: "/sql-submission/v1/cancel/{submission_id}"};
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      role_based_authorization: {
        mode: ANY,
        roles: ["perm_decision_hub"]
      }
      target_products: [INTERNAL]
    };
  }
}
