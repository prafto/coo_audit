syntax = "proto3";

package data_quality_service.v1;

import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.data.quality.v1";

// service for enhancing data knowledge and improving the data quality
service DataQualityService {
  // Create data quality rule per request
  rpc CreateRule(CreateRuleRequest) returns (GenericResponse);
  // Create data quality rules in bulk
  rpc CreateRulesInBulk(CreateRulesInBulkRequest) returns (GenericResponse);
  // Create data quality rule from YAML file
  rpc CreateRuleFromFile(CreateRuleFromFileRequest) returns (GenericResponse);
  // Create data quality rule from YAML file
  rpc ValidateRuleYaml(ValidateRuleYamlRequest) returns (GenericResponse);
  // Update data quality rule per request
  rpc UpdateRule(UpdateRuleRequest) returns (GenericResponse);
  // Delete data quality rule per request
  rpc DeleteRule(DeleteRuleRequest) returns (GenericResponse);
  // View rules, filter by condition
  rpc ViewRules(ViewRulesRequest) returns (ViewRulesResponse);
  // View rule results, filter by condition
  rpc ViewRuleResults(ViewRuleResultsRequest) returns (ViewRuleResultsResponse);
  // Execute data quality rule
  rpc ExecuteRule(ExecuteRuleRequest) returns (ExecuteRuleResponse);
  // Save rule result
  rpc SaveRuleResult(SaveRuleResultRequest) returns (GenericResponse);
  // create subscription
  rpc CreateRuleSubscription(CreateRuleSubscriptionRequest) returns (GenericResponse);
  // delete rule subscription
  rpc DeleteRuleSubscription(DeleteRuleSubscriptionRequest) returns (GenericResponse);
  // view subscriptions for rule
  rpc ViewRuleSubscriptions(ViewRuleSubscriptionsRequest) returns (ViewRuleSubscriptionsResponse);
  // trigger consistency check request for postgres
  rpc TriggerPostgresConsistencyCheck(TriggerPostgresConsistencyCheckRequest) returns (GenericResponse);
  // trigger consistency check request for crdb
  rpc TriggerCrdbConsistencyCheck(TriggerCrdbConsistencyCheckRequest) returns (GenericResponse);
  // Send Email notification
  rpc SendEmail(SendEmailRequest) returns (GenericResponse);
  // Consistency check
  rpc CheckConsistency(CheckConsistencyRequest) returns (GenericResponse);
  // Create pepto config to enable consistency check
  rpc CreatePeptoConfiguration(CreatePeptoConfigurationRequest) returns (GenericResponse);
  // Register certifier for a data quality check
  rpc RegisterDQCertifier(RegisterDQCertifierRequest) returns (GenericResponse);
  // Get which certifier certifies a specific data quality check
  rpc GetDQCertifier(GetDQCertifierRequest) returns (GetDQCertifierResponse);
  // Publish a DQ certificate for a successful DQ check
  rpc PublishDQCertificate(PublishDQCertificateRequest) returns (GenericResponse);
  // Get a DQ certificate for a specific dataset and partition
  rpc GetDQCertificate(GetDQCertificateRequest) returns (GetDQCertificateResponse);
  // Get user input on DQUI for new DQ rules
  rpc GenerateRuleYAMLInGitHub(GenerateRuleYAMLInGitHubRequest) returns (GenerateRuleYAMLInGitHubResponse);
  // List all the generate Yaml request
  rpc ListRuleYAMLInGitHub(ListRuleYAMLInGitHubRequest) returns (ListRuleYAMLInGitHubResponse);
}

// Create data quality rule request
message CreateRuleRequest {
  // New data quality rule to register
  Rule rule = 1;
}

// Create data quality rule bulk request
message CreateRulesInBulkRequest {
  // A list of rules
  repeated Rule rules = 1;
}

// Create data quality rule from file request
message CreateRuleFromFileRequest {
  // rule file
  bytes content = 1;
  // created by
  google.protobuf.StringValue created_by = 2;
}

// Validate data quality rule yaml
message ValidateRuleYamlRequest {
  // rule file
  bytes content = 1;
}

// Create data quality rule subscription
message CreateRuleSubscriptionRequest {
  // data quality to subscriber for
  Rule rule = 1;
  // Subscriber details
  Subscriber subscriber = 2;
}

// Update data quality rule request
message UpdateRuleRequest {
  // Rule name
  google.protobuf.StringValue name = 1;
  // Updated rule to apply
  Rule rule = 2;
}

// Delete data quality rule request
message DeleteRuleRequest {
  // Rule name
  Rule rule = 1;
}

// Delete rule subscription for a user
message DeleteRuleSubscriptionRequest {
  // data quality to subscriber for
  Rule rule = 1;
  // Subscriber details
  Subscriber subscriber = 2;
}

// Execute rule request
message ExecuteRuleRequest {
  // rule name
  google.protobuf.StringValue name = 1;
  // Run with ETL
  ETLJob etl_job = 2;
  // Run with cron
  bool cron = 3;
  // Run on demand
  bool on_demand = 4;
  // trigger by
  google.protobuf.StringValue triggered_by = 5;
  // Run with unified etl
  UnifiedETL unified_etl = 6;
  // table name
  google.protobuf.StringValue table_name = 7;
  // a list of rule names
  repeated google.protobuf.StringValue rule_names = 8;
}

// Execute rule response
message ExecuteRuleResponse {
  // Response code
  ResponseCode response_code = 1;
  // list of response object
  repeated ResponseObject response_object = 2;
  // Response message with more details
  google.protobuf.StringValue response_message = 3;
}

// Get rules request
message ViewRulesRequest {
  // Filter condition, return all if no filter
  repeated Filter filter = 1;
  // page number
  int32 offset = 2;
  // page size
  int32 pagination = 3;
}

// Get rules response
message ViewRulesResponse {
  // Response code
  ResponseCode response_code = 1;
  // Filtered rules
  repeated Rule rules = 2;
  // page size
  int32 pagination = 3;
  // total count
  int32 total_count = 4;
  // Response message with more details
  google.protobuf.StringValue response_message = 5;
}

// Get rule results request
message ViewRuleResultsRequest {
  // page offset
  int32 offset = 1;
  // Filter condition, return all if no filter
  repeated Filter filter = 2;
  // page size
  int32 pagination = 3;
  // time window start time
  google.protobuf.Timestamp start_time = 4;
  // time window end time
  google.protobuf.Timestamp end_time = 5;
}

// Get rules response
message ViewRuleResultsResponse {
  // Response code
  ResponseCode response_code = 1;
  // Filtered rule results
  repeated ValidationResult results = 2;
  // page size
  int32 pagination = 3;
  // total count
  int32 total_count = 4;
  // Response message with more details
  google.protobuf.StringValue response_message = 5;
}

// Get rules response
message SaveRuleResultRequest {
  // Rule results
  repeated ValidationResult results = 1;
}

// Get Subscriptions for a rule request
message ViewRuleSubscriptionsRequest {
  // page offset
  int32 offset = 1;
  // page size
  int32 pagination = 2;
  // Rule name
  google.protobuf.StringValue rule_name = 3;
}

// Create pepto config request
message CreatePeptoConfigurationRequest {
  // kafka cluster name
  google.protobuf.StringValue kafka_cluster_name = 1;
  // kafka topic name
  google.protobuf.StringValue kafka_topic_name = 2;
  // pepto table name
  google.protobuf.StringValue table_name = 3;
}

// get subscriptions for a rule response
message ViewRuleSubscriptionsResponse {
  // Response code
  ResponseCode response_code = 1;
  // Filtered rule subscribers
  repeated Subscriber subscribers = 2;
  // total count
  int32 total_count = 3;
  // Response message with more details
  google.protobuf.StringValue response_message = 4;
}

// Generic response
message GenericResponse {
  // Response code
  ResponseCode response_code = 1;
  // Response message with more details
  google.protobuf.StringValue response_message = 2;
}

// send email to respective owners based on data validation results
message SendEmailRequest {
  // owner email
  google.protobuf.StringValue email = 1;
  // emails to notify
  repeated google.protobuf.StringValue bcc_emails = 2;
  // email subject and rule execution status
  google.protobuf.StringValue subject = 3;
  // ruleSQL, status, and completed time
  google.protobuf.StringValue content = 4;
  // S3 bucket
  google.protobuf.StringValue s3_bucket = 5;
  // S3 object key
  google.protobuf.StringValue object_key = 6;
}

// Apply consistency check on source and target
message CheckConsistencyRequest {
  // full qualified source table name
  google.protobuf.StringValue fq_source_table_name = 1;
  // full qualified target table name
  google.protobuf.StringValue fq_target_table_name = 2;
  // source data source name e.g. Postgres
  Source source_data_source = 3;
  // target data source name e.g Snowflake
  Source target_data_source = 4;
  // Time window
  TimeWindow time_window = 5;
  // Time column to filter on
  google.protobuf.StringValue time_column_name = 6;
  // Trigger
  BindingType binding_type = 7;
}

// Data quality rule definition
message Rule {
  // Data quality rule Name, should be self explained
  google.protobuf.StringValue name = 1;
  // Qualified table name db.schema.table
  google.protobuf.StringValue table_name = 2;
  // Rule description
  google.protobuf.StringValue description = 3;
  // Rule attribute
  RuleAttribute attribute = 4;
  // Rule owner
  Owner owner = 5;
  // Source
  Source source = 6;
  // True if the rule is active to run
  bool is_active = 7;
  // Check type
  CheckType check_type = 8;
  // Binding type
  BindingType binding_type = 9;
  // Severity
  Severity severity = 10;
  // Email Subscribers
  repeated Subscriber subscribers = 11;
  // Timestamp when the rule is created
  google.protobuf.Timestamp created_at = 12;
  // Email of person who created the rule
  google.protobuf.StringValue created_by = 13;
  // Timestamp when the rule is updated
  google.protobuf.Timestamp last_updated_at = 14;
  // Email of person who last updated the rule
  google.protobuf.StringValue last_update_by = 15;
  // Tagging separate value by comma
  google.protobuf.StringValue tagging = 16;
  // Data Source
  DataSource data_source = 17;
  // github link
  string github_link = 18;
  // error msg
  string error_message = 19;
  // partner platform
  google.protobuf.StringValue partner_platform = 20;
  // suppression list
  repeated string suppression_list = 21;
}

// Data quality result
message ValidationResult {
  // Rule
  Rule rule = 1;
  // Status
  RuleStatus status = 2;
  // Triggered by
  google.protobuf.StringValue triggered_by = 3;
  // when the test started
  google.protobuf.Timestamp started_at = 4;
  // when the test status updated
  google.protobuf.Timestamp updated_at = 5;
  // Result
  google.protobuf.StringValue result = 6;
  // Error Details
  google.protobuf.StringValue error_details = 7;
  // Dim Cols
  google.protobuf.StringValue dim_col = 8;
}

// ETL Job the rule runs against
message ETLJob {
  // Job name
  google.protobuf.StringValue job_name = 1;
  // Which dag ETL job assigns to
  google.protobuf.StringValue dag_id = 2;
  // hard / soft check
  Action action = 3;
  // Order to execute rule in a job
  Order order = 4;
  // snowflake warehouse
  google.protobuf.StringValue snowflake_warehouse = 5;
}

// Cron job
message Cron {
  // period in minute
  google.protobuf.Int64Value period = 1;
  // zone id
  google.protobuf.StringValue zone_id = 2;
  // hour
  google.protobuf.Int32Value hour = 3;
  // minute
  google.protobuf.Int32Value minute = 4;
  // second
  google.protobuf.Int32Value second = 5;
  // dayOfWeek
  google.protobuf.Int32Value day_of_week = 6;
  // dayOfMonth
  google.protobuf.Int32Value day_of_month = 7;
  // dayOfYear
  google.protobuf.Int32Value day_of_year = 8;
  // cron expression
  google.protobuf.StringValue schedule = 9;
  // scheduler k8s pod
  google.protobuf.StringValue scheduler_pod = 10;
}

// Sources
message Source {
  // Snowflake
  Snowflake snowflake = 1;
  // Postgres
  Postgres postgres = 2;
  // Cockroachdb
  Cockroachdb cockroachdb = 3;
  // Trino
  Trino trino = 4;
}

// Data Source to run validation against
message DataSource {
  // Snowflake
  Snowflake snowflake = 1;
  // Datalake
  DataLake datalake = 2;
  // Postgres
  PostgreSQL postgres = 3;
  // Cockroachdb
  CockroachDB crdb = 4;
}

// Spark based ETL
message UnifiedETL {
  // rule threshold dim col mapping
  repeated ExecutableRuleMapping mappings = 1;
  // Order to execute rule
  Order order = 2;
  // Notification
  Owner notification = 3;
  // Severity
  Severity severity = 4;
  // ETL Job name
  string job_name = 5;
}

// rule threshold dim col mapping
message ExecutableRuleMapping {
  // rule id
  string rule_id = 1;
  // threshold values
  map<string, google.protobuf.Any> threshold_values = 2;
  // dimension values
  map<string, google.protobuf.Any> dim_col_values = 3;
}

// Source Snowflake
message Snowflake {
  // DB
  google.protobuf.StringValue database = 1;
  // Schema
  google.protobuf.StringValue schema = 2;
  // warehouse
  google.protobuf.StringValue warehouse = 3;
}

// Postgres
message PostgreSQL {
  // Cluster name
  google.protobuf.StringValue cluster = 1;
  // Database name
  google.protobuf.StringValue database = 2;
}

// Cockroachdb
message CockroachDB {
  // Cluster name
  google.protobuf.StringValue cluster = 1;
  // Database name
  google.protobuf.StringValue database = 2;
}

// Datalake
message DataLake {}

// Instance of which PostgresSQL will be used to execute a rule
enum PostgresInstance {
  // Unknown Postgres instance
  UNKNOWN_INSTANCE = 0;
  // Execute the rule on Curie's PostgresSQL instance
  CURIE_POSTGRES = 1;
}

// Source Postgres
message Postgres {
  // (required) Instance of which PostgresSQL will be used to execute a rule
  PostgresInstance postgres_instance = 1;
  // DB
  google.protobuf.StringValue database = 2;
  // Schema
  google.protobuf.StringValue schema = 3;
  // db profile name
  google.protobuf.StringValue db_profile_name = 4;
}

// Source Cockroachdb
message Cockroachdb {
  // TO be updated
  google.protobuf.StringValue inserted_count_s3 = 1;
}

// Source Trino
message Trino {
  // DB
  google.protobuf.StringValue database = 1;
}

// Rule attribute
enum RuleAttribute {
  /** Measure that there is no unintended data loss as part of either transport or transformation as part of the ETL
     process. This can be done both at the row count level and specific column level.
  */
  COMPLETENESS = 0;
  // Measure of how closely does the data represents reality
  ACCURACY = 1;
  // Detect issues around duplicates introduced either in source systems or through the ETL processes
  UNIQUENESS = 2;
  /**
     Does the table names and column names and column formats meet the company's data policy e.g. `dim_` and `fact_`
     actually mean those and we write `ds_created` rather than `created_ds`, etc.
  */
  STYLE = 3;
  /**
     A measure of staleness of the data in the warehouse.  We can have different buckets of datasets , at a high level,
     NRT < 5 mins, Hourly, Daily, Monthly. Having a standardized way of inspecting when something was last refreshed along
     with SLA guarantess in place is what this strives for.
  */
  FRESHNESS = 4;
  /**
     Does the data stay the same irrespective of where it resides? For example # of fullfilled orders between fact_delivery
     and dimension_delivery
  */
  CONSISTENCY = 5;
  // Are all tables columns documented with helpful, understandable labels
  TRANSPARENCY = 6;
}

// Rule status
enum RuleStatus {
  // Running
  RUNNING = 0;
  // Pass
  PASS = 1;
  // Rule check errored with runtime exception
  ERROR = 2;
  // Rule check failed
  FAIL = 3;
}

// Order to execute rule in a job
enum Order {
  // Run the validation after data is loaded
  POST_CHECK = 0;
  // Run the validation on upstreaming dependencies
  PRE_CHECK = 1;
  // Run the validation on staging tables before data being loaded
  PRE_COMMIT_CHECK = 2;
}

// action to take
enum Action {
  // blocking
  HARD_CHECK = 0;
  // non-blocking
  SOFT_CHECK = 1;
}

// Binding type
message BindingType {
  // Binding with ETL job
  ETLJob etl_job = 1;
  // Binding with Cron job
  Cron cron = 2;
  // On demand
  bool on_demand = 3;
  // Binding with UnifiedETL
  UnifiedETL unified_etl = 4;
}

// Subscriber
message Subscriber {
  // rule id
  google.protobuf.StringValue rule_id = 1;
  // subscriber name
  google.protobuf.StringValue subscriber_name = 2;
  // Timestamp when the rule is created
  google.protobuf.Timestamp created_at = 3;
  // Email of person who created the rule
  google.protobuf.StringValue created_by = 4;
  // Timestamp when the rule is updated
  google.protobuf.Timestamp last_updated_at = 5;
  // Email of person who last updated the rule
  google.protobuf.StringValue last_update_by = 6;
}

// Rule check types
message CheckType {
  // null check
  NullCheck null_check = 1;
  // duplication check
  UniqueCheck unique_check = 2;
  // greater than check
  GreaterCheck greater_check = 3;
  // less than check
  LessCheck less_check = 4;
  // custom check
  CustomCheck custom_check = 5;
  // freshness check
  FreshnessCheck freshness_check = 6;
  // Consistency check
  ConsistencyCheck consistency_check = 7;
  // Between Range check
  BetweenRangeCheck between_range_check = 8;
  // has min length check
  HasMinLengthCheck has_min_length_check = 9;
  // has max length check
  HasMaxLengthCheck has_max_length_check = 10;
  // has min check
  HasMinCheck has_min_check = 11;
  // has max check
  HasMaxCheck has_max_check = 12;
  // has mean check
  HasMeanLessThanCheck has_mean_less_than_check = 13;
  // has sum check
  HasSumGreaterThanCheck has_sum_greater_than_check = 14;
}

// Rule pack - null check
message NullCheck {
  // Validation fails if column is null
  google.protobuf.StringValue column = 1;
  // table name
  google.protobuf.StringValue table = 2;
  // time column name to limit data scan
  google.protobuf.StringValue time_column = 3;
}

// Rule pack - unique check
message UniqueCheck {
  // Validation fails if column has duplicates
  google.protobuf.StringValue column = 1;
  // table name
  google.protobuf.StringValue table = 2;
  // time column name to limit data scan
  google.protobuf.StringValue time_column = 3;
}

// Rule pack - greater than check
message GreaterCheck {
  // Validation fails if returned result <= expected value
  google.protobuf.StringValue rule_sql = 1;
  // Expect value to trigger notification
  Threshold threshold = 2;
}

// Rule pack - less than check
message LessCheck {
  // Validation fails if returned result >= expected value
  google.protobuf.StringValue rule_sql = 1;
  // Expect value to trigger notification
  Threshold threshold = 2;
}

// Rule pack - count check
message CustomCheck {
  // Validation fails if returned result != expected value
  google.protobuf.StringValue rule_sql = 1;
  // Expect value
  google.protobuf.StringValue expect_value = 2;
  // Expect value in SQL
  google.protobuf.StringValue expect_value_sql = 3;
}

// Rule pack - freshness check
message FreshnessCheck {
  // timestamp column
  google.protobuf.StringValue column = 1;
  // table name
  google.protobuf.StringValue table = 2;
  // Expect value to trigger notification
  Threshold threshold = 3;
  // partition column
  google.protobuf.StringValue partition_column = 4;
}

// Rule pack - between range check
message BetweenRangeCheck {
  // timestamp column
  google.protobuf.StringValue column = 1;
  // table name
  google.protobuf.StringValue table = 2;
  // lower bound
  google.protobuf.Int64Value lower_bound = 3;
  // upper bound
  google.protobuf.Int64Value upper_bound = 4;
}

// Rule pack - consistency check
message ConsistencyCheck {
  // source data source name
  google.protobuf.StringValue source_datasource = 1;
  // target data source name
  google.protobuf.StringValue target_datasource = 2;
  // source table name
  google.protobuf.StringValue source_table = 3;
  // target table name
  google.protobuf.StringValue target_table = 4;
  // time column name to limit data scan on source
  google.protobuf.StringValue time_column = 5;
  // time column name to limit data scan on target
  google.protobuf.StringValue target_time_column = 6;
}

// Rule pack - has min length check
message HasMinLengthCheck {
  // column name to check
  google.protobuf.StringValue column = 1;
  // table name
  google.protobuf.StringValue table = 2;
  // Expect value to trigger notification
  Threshold threshold = 3;
}

// Rule pack - has max length check
message HasMaxLengthCheck {
  // column name to check
  google.protobuf.StringValue column = 1;
  // table name
  google.protobuf.StringValue table = 2;
  // Expect value to trigger notification
  Threshold threshold = 3;
}

// Rule pack - has min check
message HasMinCheck {
  // column name to check
  google.protobuf.StringValue column = 1;
  // table name
  google.protobuf.StringValue table = 2;
  // Expect value to trigger notification
  Threshold threshold = 3;
}

// Rule pack - has max check
message HasMaxCheck {
  // column name to check
  google.protobuf.StringValue column = 1;
  // table name
  google.protobuf.StringValue table = 2;
  // Expect value to trigger notification
  Threshold threshold = 3;
}

// Rule pack - has mean check
message HasMeanLessThanCheck {
  // column name to check
  google.protobuf.StringValue column = 1;
  // table name
  google.protobuf.StringValue table = 2;
  // Expect value to trigger notification
  Threshold threshold = 3;
}

// Rule pack - has sum check
message HasSumGreaterThanCheck {
  // column name to check
  google.protobuf.StringValue column = 1;
  // table name
  google.protobuf.StringValue table = 2;
  // Expect value to trigger notification
  Threshold threshold = 3;
}

// Threshold
message Threshold {
  // warning level to trigger email / slack
  google.protobuf.Int32Value warning_value = 1;
  // alert level to trigger pager duty
  google.protobuf.Int32Value alert_value = 2;
}

// Owner of the rule (email/pagerduty/slack), test notification will be sent to
message Owner {
  // Email of rule owner
  google.protobuf.StringValue email = 1;
  // Pagerduty of rule owner
  google.protobuf.StringValue pagerduty = 2;
  // Slack channel of rule owner
  google.protobuf.StringValue slack = 3;
}

// Indicate whether the request has been successfully completed
enum ResponseCode {
  // Unspecified
  RESPONSE_CODE_UNSPECIFIED = 0;
  // Request is successful
  RESPONSE_CODE_SUCCESS = 1;
  // Request fails
  RESPONSE_CODE_ERROR = 2;
  // Request fails
  RESPONSE_CODE_RULE_NOT_FOUND = 3;
  // Request fails
  RESPONSE_CODE_FAILURE = 4;
}

// Indicate the severity level
enum Severity {
  // Alert => PD
  SEVERITY_ALERT = 0;
  // Warning => Email / Slack
  SEVERITY_WARNING = 1;
}

// response object
message ResponseObject {
  // attr map
  map<string, string> attributes = 1;
}

// Filter condition
message Filter {
  // property name
  google.protobuf.StringValue property = 1;
  // filter value
  google.protobuf.StringValue value = 2;
}

// Time window
message TimeWindow {
  // lower bound of the time window
  google.protobuf.Timestamp lower_bound = 1;
  // upper bound of the time window
  google.protobuf.Timestamp upper_bound = 2;
}

// Request for postgres consistency check
message TriggerPostgresConsistencyCheckRequest {
  // database profile for getting db credential
  google.protobuf.StringValue database_profile = 1;
  // target database
  google.protobuf.StringValue target_database = 2;
  // target schema
  google.protobuf.StringValue target_schema = 3;
  // table name
  google.protobuf.StringValue table_name = 4;
  // parameter name of the timestamp
  google.protobuf.StringValue timestamp_param = 5;
  // source database
  google.protobuf.StringValue source_database = 6;
  // source schema
  google.protobuf.StringValue source_schema = 7;
  // group name
  google.protobuf.StringValue group_name = 8;
  // etl job full name
  google.protobuf.StringValue etl_job_full_name = 9;
  // source row count
  google.protobuf.Int64Value target_row_count = 10;
  // time window start time
  google.protobuf.Timestamp time_window_start_time = 11;
  // time window end time
  google.protobuf.Timestamp time_window_end_time = 12;
  // last id used for incremental by id
  google.protobuf.StringValue last_id = 13;
}

// Request for crdb consistency check
message TriggerCrdbConsistencyCheckRequest {
  // row count of the crdb table from s3 snapshot
  google.protobuf.Int32Value crdb_row_count = 1;
  // source database
  google.protobuf.StringValue source_database = 2;
  // source schema
  google.protobuf.StringValue source_schema = 3;
  // target database
  google.protobuf.StringValue target_database = 4;
  // target schema
  google.protobuf.StringValue target_schema = 5;
  // table name
  google.protobuf.StringValue table_name = 6;
  // group name
  google.protobuf.StringValue group_name = 7;
  // etl job full name
  google.protobuf.StringValue etl_job_full_name = 8;
  // parameter name of the timestamp
  google.protobuf.StringValue timestamp_param = 9;
  // time window start time
  google.protobuf.Timestamp time_window_start_time = 10;
  // time window end time
  google.protobuf.Timestamp time_window_end_time = 11;
  // target row count
  google.protobuf.Int64Value target_row_count = 12;
}

// Request for DQ certifier registration
message RegisterDQCertifierRequest {
  // dataset name
  google.protobuf.StringValue dataset = 1;
  // dim col names
  repeated google.protobuf.StringValue dim_col_names = 2;
  // assigned certifier
  google.protobuf.StringValue certifier = 3;
}

// Request to get DQ certifier
message GetDQCertifierRequest {
  // dataset name
  google.protobuf.StringValue dataset = 1;
  // dim col names
  repeated google.protobuf.StringValue dim_col_names = 2;
}

// Response from get DQ certifier
message GetDQCertifierResponse {
  // assigned certifier
  google.protobuf.StringValue certifier = 1;
}

// Dictionary for dim_col including name and value
message DimCol {
  // dim_col name
  google.protobuf.StringValue name = 1;
  // dim_col value
  google.protobuf.StringValue value = 2;
}

// Request for publish a DQ Certificate
message PublishDQCertificateRequest {
  // dataset name
  google.protobuf.StringValue dataset = 1;
  // list of dim_col dictionaries
  repeated DimCol dim_cols = 2;
  // timestamp that DQ is certified
  google.protobuf.Timestamp cerfication_timestamp = 3;
}

// Request to get a DQ Certificate
message GetDQCertificateRequest {
  // dataset name
  google.protobuf.StringValue dataset = 1;
  // list of dim_col dictionaries
  repeated DimCol dim_cols = 2;
}

// Response for get a DQ Certificate
message GetDQCertificateResponse {
  // Response code
  CertificateResponseCode response_code = 1;
  // Optional timestamp
  google.protobuf.Timestamp timestamp = 2;
  // Response message with more details
  google.protobuf.StringValue response_message = 3;
}

// certificate response code definitions
enum CertificateResponseCode {
  // certified
  CERTIFIED_CODE = 0;
  // uncertified
  UNCERTIFIED_CODE = 1;
  // error
  ERROR_CODE = 2;
}

// org type which performs as rule directories
enum OrgType {
  // data_eng
  DATA_ENG = 0;
  // product_eng
  PRODUCT_ENG = 1;
}

// method for rules
enum Method {
  // Create
  CREATE = 0;
  // Update
  UPDATE = 1;
  // DELETE
  DELETE = 2;
}

// read from user input on DQUI
message GenerateRuleYAMLInGitHubRequest {
  // rule name
  Rule rule = 1;
  // org type
  OrgType org_type = 2;
  // method
  Method method = 3;
}

// response from user input on DQUI
message GenerateRuleYAMLInGitHubResponse {
  // Response code
  ResponseCode response_code = 1;
  // misc message for error handling
  google.protobuf.StringValue error_message = 2;
  // github pr link
  string github_pr_link = 3;
}

// read from audit table to list all the generate Yaml request
message ListRuleYAMLInGitHubRequest {
  // Filter condition, return all if no filter
  repeated Filter filter = 1;
  // page offset
  int32 offset = 2;
  // page size
  int32 pagination = 3;
}

// response from audit table to list all the generate Yaml request
message RuleYAMLInGitHub {
  // Rule name
  google.protobuf.StringValue rule_name = 1;
  // created time
  google.protobuf.Timestamp created_at = 2;
  // create_by
  google.protobuf.StringValue created_by = 3;
  // github link
  string github_link = 4;
  // status
  string status = 5;
  // error msg
  string error_message = 6;
}

// response from audit table to list all the generate Yaml request
message ListRuleYAMLInGitHubResponse {
  // Response code
  ResponseCode response_code = 1;
  // Filtered rule yaml in github for PR information
  repeated RuleYAMLInGitHub rule_yaml_in_github = 2;
  // total count
  int32 total_count = 3;
  // Response message with more details
  google.protobuf.StringValue response_message = 4;
}
