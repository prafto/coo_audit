syntax = "proto3";

package chat_platform.dashchat_sdk.v1;

import "chat_platform/common_v1.proto";
import "common/service_client_config.proto";
import "doordash.api/annotations.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.chatplatform.dashchat.sdk.v1";

// gRPC service for DashChat SDK operations.
service DashChatSDKService {
  option (doordash.api.service) = {
    name: "chat-platform-dashchat-service"
    port: 50051
    name_spaces: ["dashchat"]
    owner: {
      id: "chat-platform"
      name: "chat-platform"
      slack_channel: "#ask-conversation-platform"
      email_alias: "team-conversation-platform@doordash.com"
    }
    vertical_domains: [
      CX,
      DX,
      MX
    ]
    target_products: [
      CX,
      DX,
      MX
    ]
  };

  // Returns a channel by its ID.
  rpc GetChannel(GetChannelRequest) returns (GetChannelResponse) {
    option (google.api.http) = {get: "/dashchat/v1/sdk/channels/{channel_id}"};
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: TEST
      authorization: [
        CX_USER,
        DX_USER,
        MX_USER
      ]
    };
  }

  // Returns metadata for a channel.
  rpc GetChannelMetadata(GetChannelMetadataRequest) returns (GetChannelMetadataResponse) {
    option (google.api.http) = {get: "/dashchat/v1/sdk/channels/{channel_id}/metadata"};
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: TEST
      authorization: [
        CX_USER,
        DX_USER,
        MX_USER
      ]
    };
  }

  // Removes the user from a channel.
  rpc LeaveChannel(LeaveChannelRequest) returns (LeaveChannelResponse) {
    option (google.api.http) = {
      post: "/dashchat/v1/sdk/channels/{channel_id}/leave"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: TEST
      authorization: [
        CX_USER,
        DX_USER,
        MX_USER
      ]
    };
  }
  // Returns a list of the user's channels.
  rpc ListChannels(ListChannelsRequest) returns (ListChannelsResponse) {
    option (google.api.http) = {get: "/dashchat/v1/sdk/channels"};
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: TEST
      authorization: [
        CX_USER,
        DX_USER,
        MX_USER
      ]
    };
  }
  // Returns a list of the members for specific channel.
  rpc ListChannelMembers(ListChannelMembersRequest) returns (ListChannelMembersResponse) {
    option (google.api.http) = {get: "/dashchat/v1/sdk/channels/{channel_id}/members"};
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: TEST
      authorization: [
        CX_USER,
        DX_USER,
        MX_USER
      ]
    };
  }
  // Returns a list of messages for a specific channel.
  rpc ListChannelMessages(ListChannelMessagesRequest) returns (ListChannelMessagesResponse) {
    option (google.api.http) = {get: "/dashchat/v1/sdk/channels/{channel_id}/messages"};
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: TEST
      authorization: [
        CX_USER,
        DX_USER,
        MX_USER
      ]
    };
  }
  // Marks the channel as read.
  rpc MarkChannelAsRead(MarkChannelAsReadRequest) returns (MarkChannelAsReadResponse) {
    option (google.api.http) = {
      post: "/dashchat/v1/sdk/channels/{channel_id}/mark_as_read"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: TEST
      authorization: [
        CX_USER,
        DX_USER,
        MX_USER
      ]
    };
  }
  // Sends a new text message to a channel.
  rpc SendTextMessage(SendTextMessageRequest) returns (SendTextMessageResponse) {
    option (google.api.http) = {
      post: "/dashchat/v1/sdk/channels/{channel_id}/send_text_message"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: TEST
      authorization: [
        CX_USER,
        DX_USER,
        MX_USER
      ]
    };
  }
  // Sends a new file message to a channel.
  rpc SendFileMessage(SendFileMessageRequest) returns (SendFileMessageResponse) {
    option (google.api.http) = {
      post: "/dashchat/v1/sdk/channels/{channel_id}/send_file_message"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: TEST
      authorization: [
        CX_USER,
        DX_USER,
        MX_USER
      ]
    };
  }
  // Indicates the user has started typing.
  rpc StartTyping(StartTypingRequest) returns (StartTypingResponse) {
    option (google.api.http) = {
      post: "/dashchat/v1/sdk/channels/{channel_id}/start_typing"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: TEST
      authorization: [
        CX_USER,
        DX_USER,
        MX_USER
      ]
    };
  }
  // Indicates the user has stopped typing.
  rpc StopTyping(StopTypingRequest) returns (StopTypingResponse) {
    option (google.api.http) = {
      post: "/dashchat/v1/sdk/channels/{channel_id}/stop_typing"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: TEST
      authorization: [
        CX_USER,
        DX_USER,
        MX_USER
      ]
    };
  }

  // Upserts key/value pairs into channel metadata.
  rpc UpsertChannelMetadata(UpsertChannelMetadataRequest) returns (UpsertChannelMetadataResponse) {
    option (google.api.http) = {
      put: "/dashchat/v1/sdk/channels/{channel_id}/metadata"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: TEST
      authorization: [
        CX_USER,
        DX_USER,
        MX_USER
      ]
    };
  }

  // Deletes one or more key/value pairs from channel metadata.
  rpc DeleteChannelMetadata(DeleteChannelMetadataRequest) returns (DeleteChannelMetadataResponse) {
    option (google.api.http) = {delete: "/dashchat/v1/sdk/channels/{channel_id}/metadata"};
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: TEST
      authorization: [
        CX_USER,
        DX_USER,
        MX_USER
      ]
    };
  }
}

// gRPC service for DashChat SDK events.
service DashChatSDKEventService {
  option (doordash.api.service) = {
    name: "chat-platform-dashchat-service"
    port: 50051
    name_spaces: ["dashchat"]
    owner: {
      id: "chat-platform"
      name: "chat-platform"
      slack_channel: "#ask-conversation-platform"
      email_alias: "team-conversation-platform@doordash.com"
    }
    vertical_domains: [
      CX,
      DX,
      MX
    ]
    target_products: [
      CX,
      DX,
      MX
    ]
  };

  // Get a batched list of events. If there are no pending events, will wait until either new events are added, or the request times out.
  rpc GetEvents(GetEventsRequest) returns (GetEventsResponse) {
    option (google.api.http) = {get: "/dashchat/v1/sdk/events"};
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: TEST
      authorization: [
        CX_USER,
        DX_USER,
        MX_USER
      ]
    };
    option (service_client.client_method_config).response_attempt_timeout_millis = 60000;
    option (service_client.client_method_config).circuit_breaker_config.do_ignore_grpc_code = 4; // DEADLINE_EXCEEDED
  }
}

// Request for GetEvents RPC.
message GetEventsRequest {
  // Cursor to start reading from.
  google.protobuf.StringValue cursor = 1;
  // DashChat user id of the user making the request.
  google.protobuf.StringValue user_id = 2;
}

// Response for GetEvents RPC.
message GetEventsResponse {
  // List of events.
  repeated Event events = 1;
  // Cursor to be passed with the next request.
  string cursor = 2;
}

// Request for GetChannel RPC.
message GetChannelRequest {
  // ID of the channel to get.
  google.protobuf.StringValue channel_id = 1;
  // DashChat user id of the user making the request.
  google.protobuf.StringValue user_id = 2;
}

// Response for GetChannel RPC.
message GetChannelResponse {
  // The channel.
  chat_platform.common.v1.Channel channel = 1;
}

// Request for GetChannelMetadata RPC.
message GetChannelMetadataRequest {
  // Channel ID.
  google.protobuf.StringValue channel_id = 1;
  // DashChat user id of the user making the request.
  google.protobuf.StringValue user_id = 2;
}

// Response for GetChannelMetadata RPC.
message GetChannelMetadataResponse {
  // Metadata.
  map<string, string> metadata = 1;
}

// Request for LeaveChannel RPC.
message LeaveChannelRequest {
  // ID of the channel to leave.
  google.protobuf.StringValue channel_id = 1;
  // DashChat user id of the user making the request.
  google.protobuf.StringValue user_id = 2;
}

// Response for LeaveChannel RPC.
message LeaveChannelResponse {}

// Request for ListChannels RPC.
message ListChannelsRequest {
  // Pagination options for the list of channels.
  chat_platform.common.v1.PageOptions page_options = 1;
  // DashChat user id of the user making the request.
  google.protobuf.StringValue user_id = 2;
}

// Response for ListChannels RPC.
message ListChannelsResponse {
  // List of channels.
  repeated chat_platform.common.v1.Channel channels = 1;
  // Pagination info for the list of channels.
  chat_platform.common.v1.PageInfo page_info = 2;
}

// Request for ListChannelMembers RPC.
message ListChannelMembersRequest {
  reserved 2; // page_options
  reserved "page_options";
  // ID of the channel.
  google.protobuf.StringValue channel_id = 1;
  // DashChat user id of the user making the request.
  google.protobuf.StringValue user_id = 3;
}

// Response for ListChannelMembers RPC.
message ListChannelMembersResponse {
  reserved 3; // page_info
  reserved "page_info";
  // Channel ID.
  google.protobuf.StringValue channel_id = 1;
  // List of channel members.
  repeated chat_platform.common.v1.ChannelMember channel_members = 2;
}

// Resposne for ListChannelMessages RPC.
message ListChannelMessagesRequest {
  // Channel ID.
  google.protobuf.StringValue channel_id = 1;
  // Pagination options for the list of messages.
  chat_platform.common.v1.PageOptions page_options = 2;
  // DashChat user id of the user making the request.
  google.protobuf.StringValue user_id = 3;
}

// Response for ListChannelMessages RPC.
message ListChannelMessagesResponse {
  // List of messages.
  repeated chat_platform.common.v1.Message messages = 1;
  // Pagination info for the list of messages.
  chat_platform.common.v1.PageInfo page_info = 2;
}

// Request for SendTextMessage RPC.
message SendTextMessageRequest {
  // Channel ID.
  google.protobuf.StringValue channel_id = 1;
  // Message text.
  google.protobuf.StringValue text = 2;
  // String payload for the message.
  google.protobuf.StringValue data = 3;
  // DashChat user id of the user making the request.
  google.protobuf.StringValue user_id = 4;
  // If true, will send a push notification to recipients.
  bool send_push = 5;
}

// Response for SendTextMessage RPC.
message SendTextMessageResponse {
  // The new text message.
  chat_platform.common.v1.TextMessage message = 1;
}

// Request for SendFileMessage RPC.
message SendFileMessageRequest {
  // Channel ID.
  google.protobuf.StringValue channel_id = 1;
  // Message file.
  chat_platform.common.v1.File file = 2;
  // String payload for the message.
  google.protobuf.StringValue data = 3;
  // DashChat user id of the user making the request.
  google.protobuf.StringValue user_id = 4;
  // If true, will send a push notification to recipients.
  bool send_push = 5;
}

// Response for SendFileMessage RPC.
message SendFileMessageResponse {
  // The new file message.
  chat_platform.common.v1.FileMessage message = 1;
}

// A real-time SDK event.
message Event {
  // Unique identifier for the event.
  string event_id = 1;
  // Timestamp of the event.
  google.protobuf.Timestamp timestamp = 2;
  // Event type.
  oneof event {
    // A new message was received.
    MessageReceivedEvent message_received = 3;
    // A message was updated.
    MessageUpdatedEvent message_updated = 4;
    // A user has started typing.
    TypingStartedEvent typing_started = 5;
    // A user has stopped typing.
    TypingStoppedEvent typing_stopped = 6;
    // One or more properties has been created or updated in a channel’s metadata.
    ChannelMetadataUpsertedEvent channel_metadata_upserted = 7;
    // One or more keys were deleted from a channel’s metadata.
    ChannelMetadataDeletedEvent channel_metadata_deleted = 8;
    // A channel was frozen.
    ChannelFrozenEvent channel_frozen = 9;
    // A channel was unfrozen.
    ChannelUnfrozenEvent channel_unfrozen = 10;
    // The user’s unread message count for a channel has changed.
    ChannelUnreadMessageCountUpdatedEvent channel_unread_message_count_updated = 11;
    // A user has joined a channel (may include the current user).
    ChannelJoinedEvent channel_joined = 12;
    // A user has left a channel (may include the current user).
    ChannelLeftEvent channel_left = 13;
    // A channel was hidden.
    ChannelHiddenEvent channel_hidden = 14;
    // The user's chat history was reset for a channel.
    ChatHistoryResetEvent chat_history_reset = 16;
  }
  // Coalesce.
  google.protobuf.StringValue coalesce_key = 15;
}

// A new message was received.
message MessageReceivedEvent {
  // Channel ID for the message.
  string channel_id = 1;
  // The message that was received.
  chat_platform.common.v1.Message message = 2;
  // Channel where the message was received.
  chat_platform.common.v1.Channel channel = 3;
}

// A message was updated.
message MessageUpdatedEvent {
  // Channel ID for the message.
  string channel_id = 1;
  // The updated message.
  chat_platform.common.v1.Message message = 2;
  // Channel where the message was updated.
  chat_platform.common.v1.Channel channel = 3;
}

// A user has started typing.
message TypingStartedEvent {
  // ID of the channel where the user started typing.
  string channel_id = 1;
  // The user who started typing.
  chat_platform.common.v1.ChannelMember typing_user = 2;
  // Channel where typing was started.
  chat_platform.common.v1.Channel channel = 3;
}

// A user has stopped typing.
message TypingStoppedEvent {
  // ID of the channel where the user stopped typing.
  string channel_id = 1;
  // The user who stopped typing.
  chat_platform.common.v1.ChannelMember typing_user = 2;
  // Channel where typing was stopped.
  chat_platform.common.v1.Channel channel = 3;
}

// A user has joined a channel (may include the current user).
message ChannelJoinedEvent {
  // ID of the channel that was joined.
  string channel_id = 1;
  // The member who joined the channel.
  chat_platform.common.v1.ChannelMember channel_member = 2;
  // Channel where a member joined.
  chat_platform.common.v1.Channel channel = 3;
}

// A user has left a channel (may include the current user)
message ChannelLeftEvent {
  // ID of the channel that was left.
  string channel_id = 1;
  // The member who left the channel.
  chat_platform.common.v1.ChannelMember channel_member = 2;
  // Channel where a member left.
  chat_platform.common.v1.Channel channel = 3;
}

// One or more properties has been created or updated in a channel’s metadata.
message ChannelMetadataUpsertedEvent {
  // ID of the channel where metadata was upserted.
  string channel_id = 1;
  // The metadata properties that were upserted.
  map<string, string> metadata = 2;
  // Channel where metadata was upserted.
  chat_platform.common.v1.Channel channel = 3;
}

// One or more keys were deleted from a channel's metadata.
message ChannelMetadataDeletedEvent {
  // ID of the channel where metadata was deleted.
  string channel_id = 1;
  // List of keys that were deleted from channel metadata.
  repeated string deleted_keys = 2;
  // Channel where metadata was deleted.
  chat_platform.common.v1.Channel channel = 3;
}

// A channel was frozen.
message ChannelFrozenEvent {
  // ID of the frozen channel.
  string channel_id = 1;
  // Channel that was frozen.
  chat_platform.common.v1.Channel channel = 2;
}

// A channel was unfrozen.
message ChannelUnfrozenEvent {
  // ID of the unfrozen channel.
  string channel_id = 1;
  // Channel that was unfrozen.
  chat_platform.common.v1.Channel channel = 2;
}

// A channel was frozen.
message ChannelHiddenEvent {
  // ID of the frozen channel.
  string channel_id = 1;
  // Channel that was hidden.
  chat_platform.common.v1.Channel channel = 2;
}

// The user’s unread message count for a channel has changed.
message ChannelUnreadMessageCountUpdatedEvent {
  // Channel id where the unread message count changed.
  string channel_id = 1;
  // The new unread message count.
  int32 unread_message_count = 2;
  // Channel.
  chat_platform.common.v1.Channel channel = 3;
}

// The user's chat history was reset for a channel.
message ChatHistoryResetEvent {
  // Channel id.
  string channel_id = 1;
  // Channel where the history was reset.
  chat_platform.common.v1.Channel channel = 2;
}

// Request for MarkChannelAsReadRequest RPC.
message MarkChannelAsReadRequest {
  // Channel id to be marked as read.
  google.protobuf.StringValue channel_id = 1;
  // Timestamp of when the channel was read.
  google.protobuf.Timestamp timestamp = 2;
  // DashChat user id of the user making the request.
  google.protobuf.StringValue user_id = 3;
}

// Response for MarkChannelAsReadRequest RPC.
message MarkChannelAsReadResponse {}

// Request for StartTyping RPC.
message StartTypingRequest {
  // Channel ID where the user started typing.
  google.protobuf.StringValue channel_id = 1;
  // DashChat user id of the user making the request.
  google.protobuf.StringValue user_id = 2;
}

// Response for StopTyping RPC.
message StartTypingResponse {}

// Request for StopTyping RPC.
message StopTypingRequest {
  // Channel ID where the user stopped typing.
  google.protobuf.StringValue channel_id = 1;
  // DashChat user id of the user making the request.
  google.protobuf.StringValue user_id = 2;
}

// Response for StopTyping RPC.
message StopTypingResponse {}

// Request for UpsertChannelMetadata RPC.
message UpsertChannelMetadataRequest {
  // Channel ID.
  google.protobuf.StringValue channel_id = 1;
  // Metadata to be upserted.
  map<string, string> metadata = 2;
  // DashChat user id of the user making the request.
  google.protobuf.StringValue user_id = 3;
}

// Response for UpsertChannelMetadata RPC.
message UpsertChannelMetadataResponse {
  // Metadata that was upserted.
  map<string, string> metadata = 2;
}

// Request for DeleteChannelMetadata RPC.
message DeleteChannelMetadataRequest {
  // Channel ID.
  google.protobuf.StringValue channel_id = 1;
  // List of metadata keys to be deleted.
  repeated string keys = 2;
  // DashChat user id of the user making the request.
  google.protobuf.StringValue user_id = 3;
}

// Response for DeleteChannelMetadata RPC.
message DeleteChannelMetadataResponse {
  // Channel ID.
  string channel_id = 1;
  // List of metadata keys that were deleted.
  repeated string keys = 2;
}
