syntax = "proto3";

package chat_platform.daschchat_platform_api.v1;

import "chat_platform/common_v1.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.chatplatform.dashchat.platformapi.v1";

// gRPC for DashChat Platform API operations.
service DashChatPlatformAPIService {
  // Adds one or more members to a channel.
  rpc AddMembersToChannel(AddMembersToChannelRequest) returns (AddMembersToChannelResponse);
  // Creates a new channel.
  rpc CreateChannel(CreateChannelRequest) returns (CreateChannelResponse);
  // Deletes one or more key/value pairs from channel metadata.
  rpc DeleteChannelMetadata(DeleteChannelMetadataRequest) returns (DeleteChannelMetadataResponse);
  // Freezes a channel.
  rpc FreezeChannel(FreezeChannelRequest) returns (FreezeChannelResponse);
  // Get details of a single channel.
  rpc GetChannel(GetChannelRequest) returns (GetChannelResponse);
  // Hides a channel.
  rpc HideChannel(HideChannelRequest) returns (HideChannelResponse);
  // Returns a list of channels.
  rpc ListChannels(ListChannelsRequest) returns (ListChannelsResponse);
  // Returns a list of channel members.
  rpc ListChannelMembers(ListChannelMembersRequest) returns (ListChannelMembersResponse);
  // Returns a list of messages for a specific channel.
  rpc ListChannelMessages(ListChannelMessagesRequest) returns (ListChannelMessagesResponse);
  // Removes one or more members from a channel.
  rpc RemoveMembersFromChannel(RemoveMembersFromChannelRequest) returns (RemoveMembersFromChannelResponse);
  // Sends an admin message to a channel.
  rpc SendAdminMessage(SendAdminMessageRequest) returns (SendAdminMessageResponse);
  // Sends an bot message to a channel.
  rpc SendBotMessage(SendBotMessageRequest) returns (SendBotMessageResponse);
  // Unfreezes a channel.
  rpc UnfreezeChannel(UnfreezeChannelRequest) returns (UnfreezeChannelResponse);
  // Upserts key/value pairs into channel metadata.
  rpc UpsertChannelMetadata(UpsertChannelMetadataRequest) returns (UpsertChannelMetadataResponse);
  // Get channel metadata.
  rpc GetChannelMetadata(GetChannelMetadataRequest) returns (GetChannelMetadataResponse);
  // Creates or updates a user.
  rpc UpsertUser(UpsertUserRequest) returns (UpsertUserResponse);
  // Get a user.
  rpc GetUser(GetUserRequest) returns (GetUserResponse);
  // Reset chat history.
  rpc ResetChatHistory(ResetChatHistoryRequest) returns (ResetChatHistoryResponse);
  // Clean up all user data
  rpc CleanupUserData(CleanupUserDataRequest) returns (CleanupUserDataResponse);
  // Start typing indicator
  rpc StartTyping(StartTypingRequest) returns (StartTypingResponse);
  // Stop typing indicator
  rpc StopTyping(StopTypingRequest) returns (StopTypingResponse);
  // Creates or updates a bot.
  rpc UpsertBot(UpsertBotRequest) returns (UpsertBotResponse);
}

// Request for AddMembersToChannel RPC.
message AddMembersToChannelRequest {
  // Channel ID where the members should be added.
  google.protobuf.StringValue channel_id = 1;
  // List of user IDs to add to the channel.
  repeated string user_ids = 2;
  // If true, the user will be able to view messages from before they joined the channel.
  bool show_message_history = 3;
}

// Response for AddMembersToChannel RPC.
message AddMembersToChannelResponse {
  // List of user IDs that were added to the channel.
  repeated string user_ids = 1;
}

// Request for CreateChannel RPC.
message CreateChannelRequest {
  // Unique external ID for the channel.
  google.protobuf.StringValue channel_id = 1;
  // List of user IDs to be added as members on channel creation.
  repeated string member_user_ids = 2;
  // Custom type for the channel.
  google.protobuf.StringValue custom_type = 3;
}

// Resposne for CreatChannel RPC.
message CreateChannelResponse {
  // The new channel.
  chat_platform.common.v1.Channel channel = 1;
}

// Request for FreezeChannel RPC.
message FreezeChannelRequest {
  // ID of the channel to freeze.
  google.protobuf.StringValue channel_id = 1;
}

// Response for FreezeChannel RPC.
message FreezeChannelResponse {
  reserved 1; // channel_id
  reserved "channel_id";
  // Channel.
  chat_platform.common.v1.Channel channel = 2;
}

// Request for GetChannel RPC.
message GetChannelRequest {
  // ID of the channel to fetch.
  google.protobuf.StringValue channel_id = 1;
}

// Response for GetChannel RPC.
message GetChannelResponse {
  // The channel.
  chat_platform.common.v1.Channel channel = 1;
}

// Request for HideChannel RPC.
message HideChannelRequest {
  // ID of the channel to hide.
  google.protobuf.StringValue channel_id = 1;
}

// Response for HideChannel RPC.
message HideChannelResponse {
  reserved 1; // channel_id
  reserved "channel_id";
  // Channel.
  chat_platform.common.v1.Channel channel = 2;
}

// Request for ListChannels RPC.
message ListChannelsRequest {
  // Pagination options for the list of channels.
  chat_platform.common.v1.PageOptions page_options = 1;
}

// Response for ListChannels RPC.
message ListChannelsResponse {
  // List of channels.
  repeated chat_platform.common.v1.Channel channels = 1;
  // Pagination info for the list of channels.
  chat_platform.common.v1.PageInfo page_info = 2;
}

// Request for ListChannelMembers RPC.
message ListChannelMembersRequest {
  reserved 2; // page_options
  reserved "page_options";
  // ID of the channel to list members.
  google.protobuf.StringValue channel_id = 1;
}

// Response for ListChannelMembers RPC.
message ListChannelMembersResponse {
  reserved 2; // page_options
  reserved "page_info";
  // List of channel members.
  repeated chat_platform.common.v1.ChannelMember channel_members = 1;
}

// Request for ListChannelMessages RPC.
message ListChannelMessagesRequest {
  // ID of the channel to list messages for.
  google.protobuf.StringValue channel_id = 1;
  // Pagination options for the list of channels.
  chat_platform.common.v1.PageOptions page_options = 2;
}

// Response for ListChannelMessages RPC.
message ListChannelMessagesResponse {
  // List of messages.
  repeated chat_platform.common.v1.Message messages = 1;
  // Pagination info for the list of messages.
  chat_platform.common.v1.PageInfo page_info = 2;
}

// Request for RemoveMembersFromChannel RPC.
message RemoveMembersFromChannelRequest {
  // ID of the channel to remove members from.
  google.protobuf.StringValue channel_id = 1;
  // List of user IDs for the members to be removed.
  repeated string user_ids = 2;
}

// Response for RemoveMembersFromChannel RPC.
message RemoveMembersFromChannelResponse {
  // List of user IDs for the members who were removed.
  repeated string user_ids = 1;
}

// Request for UpsertChannelMetadata RPC.
message UpsertChannelMetadataRequest {
  // Channel ID.
  google.protobuf.StringValue channel_id = 1;
  // Metadata to be upserted.
  map<string, string> metadata = 2;
}

// Response for UpsertChannelMetadata RPC.
message UpsertChannelMetadataResponse {
  // Metadata that was upserted.
  map<string, string> metadata = 2;
}

// Request for GetChannelMetadata RPC.
message GetChannelMetadataRequest {
  // Channel ID.
  google.protobuf.StringValue channel_id = 1;
}

// Response for GetChannelMetadata RPC.
message GetChannelMetadataResponse {
  // Metadata that was stored.
  map<string, string> metadata = 1;
}

// Request for DeleteChannelMetadata RPC.
message DeleteChannelMetadataRequest {
  // Channel ID.
  google.protobuf.StringValue channel_id = 1;
  // List of metadata keys to be deleted.
  repeated string keys = 2;
}

// Response for DeleteChannelMetadata RPC.
message DeleteChannelMetadataResponse {
  // Channel ID.
  string channel_id = 1;
  // List of metadata keys that were deleted.
  repeated string keys = 2;
}

// Request for SendAdminMessage RPC.
message SendAdminMessageRequest {
  // Channel ID.
  google.protobuf.StringValue channel_id = 1;
  // Message text.
  google.protobuf.StringValue text = 2;
  // String payload for the message.
  google.protobuf.StringValue data = 3;
  // Send push.
  bool send_push = 4;
}

// Response for SendTextMessage RPC.
message SendAdminMessageResponse {
  // The new message.
  chat_platform.common.v1.AdminMessage message = 1;
}

// Request for SendBotMessage RPC.
message SendBotMessageRequest {
  // Channel ID.
  google.protobuf.StringValue channel_id = 1;
  // Bot user ID.
  google.protobuf.StringValue bot_user_id = 2;
  // Message text.
  google.protobuf.StringValue text = 3;
  // String payload for the message.
  google.protobuf.StringValue data = 4;
  // Send push
  bool send_push = 5;
}

// Response for SendBotMessage RPC.
message SendBotMessageResponse {
  // The new message.
  chat_platform.common.v1.TextMessage message = 1;
}

// Request for UnfreezeChannel RPC.
message UnfreezeChannelRequest {
  // ID of the channel to be unfrozen.
  google.protobuf.StringValue channel_id = 1;
}

// Response for UnfreezeChannel RPC.
message UnfreezeChannelResponse {
  reserved 1; // channel_id
  reserved "channel_id";
  // Channel.
  chat_platform.common.v1.Channel channel = 2;
}

// Request for UpsertUser RPC.
message UpsertUserRequest {
  // Unique external id for the user.
  google.protobuf.StringValue user_id = 1;
  // The user's nickname (display name).
  google.protobuf.StringValue nickname = 2;
  // The user's DoorDash user ID.
  google.protobuf.StringValue dd_user_id = 3;
  // Custom type for the user.
  google.protobuf.StringValue custom_type = 4;
}

// Response for UpsertUser RPC.
message UpsertUserResponse {
  // The user that was upserted.
  chat_platform.common.v1.User user = 1;
}

// Request for GetUser RPC.
message GetUserRequest {
  // Unique external id for the user.
  google.protobuf.StringValue user_id = 1;
}

// Response for GetUser RPC.
message GetUserResponse {
  // The user that was fetched.
  chat_platform.common.v1.User user = 1;
}

// Request for ResetChatHistory RPC.
message ResetChatHistoryRequest {
  // Channel ID.
  google.protobuf.StringValue channel_id = 1;
  // Optional list of DashChat user IDs for which to reset the chat history. If none are provided, the history will be reset for all channel members.
  repeated string user_ids = 2;
}

// Response for ResetChatHistory RPC.
message ResetChatHistoryResponse {
  // Channel ID.
  google.protobuf.StringValue channel_id = 1;
}

// Request for CleanupUserData RPC.
message CleanupUserDataRequest {
  // The user id whose data will be cleaned up.
  google.protobuf.StringValue user_id = 1;
}

// Response for CleanupUserData RPC.
message CleanupUserDataResponse {
  // The user whose data has been cleaned up.
  google.protobuf.StringValue user_id = 1;
}

// Request for StartTyping RPC.
message StartTypingRequest {
  // Channel ID where the user started typing.
  google.protobuf.StringValue channel_id = 1;
  // DashChat user id of the user or bot id of the bot making the request.
  google.protobuf.StringValue member_id = 2;
  // If it is bot making the request, set it to true, otherwise false.
  bool is_bot = 3;
}

// Response for StopTyping RPC.
message StartTypingResponse {}

// Request for StopTyping RPC.
message StopTypingRequest {
  // Channel ID where the user stopped typing.
  google.protobuf.StringValue channel_id = 1;
  // DashChat user id of the user or bot id of the bot making the request.
  google.protobuf.StringValue member_id = 2;
  // If it is bot making the request, set it to true, otherwise false.
  bool is_bot = 3;
}

// Response for StopTyping RPC.
message StopTypingResponse {}

// Request for UpsertBot RPC.
message UpsertBotRequest {
  // Unique external id for the bot.
  google.protobuf.StringValue id = 1;
  // The bot's nickname (display name).
  google.protobuf.StringValue nickname = 2;
}

// Response for UpsertBot RPC.
message UpsertBotResponse {
  // The bot that was upserted.
  chat_platform.common.v1.Bot bot = 1;
}
