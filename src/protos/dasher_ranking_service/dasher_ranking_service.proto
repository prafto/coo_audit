syntax = "proto3";

package dasher_ranking_service.v1;

import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option go_package = "github.com/doordash/services-protobuf/generated/dasher_ranking_service/api/v1";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.dasher_ranking_service.rpc.api.v1";

// The DasherCommsService service definition.
service DasherRankingService {
  // Get sample dashers/levers
  rpc GetSample(GetSampleRequest) returns (GetSampleResponse) {}
}

// request schema for GetSample
message GetSampleRequest {
  // how many ordered results to return
  google.protobuf.Int64Value limit = 1;
  // request params based on use case (ranking levers vs dashers)
  oneof request_params {
    // for when we're ranking levers for each dasher
    LeverRankingForDashersRequestParams lever_ranking_for_dashers = 2;
  }
}

// response schema for GetSample
message GetSampleResponse {
  // ordered response for each entity for which we're ranking
  oneof ordered_response {
    // for when we're ranking levers for each dasher
    LeverRankingForDashersResponse lever_ranking_for_dashers_response = 2;
  }
}

// ordered response for each dasher for which we're ranking levers
message LeverRankingForDashersResponse {
  // map from dasher id to ranked levers
  map<string, OrderedLeversWithScore> dasher_id_to_lever_ranking = 1;
}

// object holding ordered levers with associated scores
message OrderedLeversWithScore {
  // list of lever identifiers with a score
  repeated LeverWithScore levers_with_score = 1;
}

// single lever with associated score
message LeverWithScore {
  // lever id string
  google.protobuf.StringValue lever_id = 1;
  // score for the dasher-lever pair
  google.protobuf.DoubleValue score = 2;
}

// input params to perform lever ranking for dashers
message LeverRankingForDashersRequestParams {
  // which dashers to consider
  DasherAudience dasher_audience = 1;
  // which levers to rank
  repeated LeverWithMetadata levers_with_metadata = 2;
  // configuration for the ranking
  google.protobuf.StringValue ranking_config = 3;
}

// input param for which dashers to consider
message DasherAudience {
  // which dashers to consider
  oneof audience {
    // maps to a cohort in segmentation service
    google.protobuf.StringValue dasher_cohort = 1;
    // dasher id list (new msg type since we can't have repeated in oneof)
    IdsList ids = 2;
  }
}

// object holding list of ids
message IdsList {
  // list of ids
  repeated google.protobuf.StringValue ids = 1;
}

// lever details to be used for ranking
message LeverWithMetadata {
  // identifier for lever
  google.protobuf.StringValue lever_id = 1;
  // free form metadata needed to evaluate lever
  map<string, string> metadata = 2;
}

// iguazu logging for ranking results
message LeverRankingForDasherIguazu {
  // dasher id we're ranking for
  google.protobuf.Int32Value dasher_id = 1;
  // levers considered for ranking, in json array format
  google.protobuf.StringValue levers = 2;
  // the configuration we're using, in json format
  google.protobuf.StringValue ranking_config = 3;
  // ranked levers, in json array format
  google.protobuf.StringValue ranking_result = 4;
}
