syntax = "proto3";

// buf:lint:ignore DIRECTORY_SAME_PACKAGE
// buf:lint:ignore PACKAGE_VERSION_SUFFIX
package ratings_service;

import "common/service_client_config.proto";
import "doordash.api/annotations.proto";
import "google/api/annotations.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "ratings_service/common.proto";

option java_generic_services = true;
// buf:lint:ignore PACKAGE_SAME_JAVA_PACKAGE
option java_multiple_files = true;
option java_package = "com.doordash.rpc.ratings";

// social list service
service SocialListService {
  option (doordash.api.service) = {
    name: "social-list-service-web"
    url: "ratings-service-web.service.prod.ddsd"
    port: 50051
    name_spaces: ["sociallist"]
    owner: {
      id: "social-proof"
      name: "social-list-service"
      slack_channel: "#eng-ratings-service-deploy"
      email_alias: "eng-social@doordash.com"
    }
    target_products: [CX]
  };

  option (service_client.client_config).service_name = "ratings-service";
  option (service_client.client_config).service_app = "web";
  option (service_client.client_config).response_attempt_timeout_millis = 500;

  // create social lists
  rpc CreateSocialLists(CreateSocialListsRequest) returns (CreateSocialListsResponse) {
    option (google.api.http) = {
      post: "/sociallist/v1/lists"
      body: '*'
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: TEST
      authorization: [CX_USER]
    };
  }
  // update social lists
  rpc UpdateSocialLists(UpdateSocialListsRequest) returns (UpdateSocialListsResponse) {
    option (google.api.http) = {
      patch: "/sociallist/v1/lists"
      body: '*'
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: TEST
      authorization: [CX_USER]
    };
  }
  // delete social list
  rpc DeleteSocialList(DeleteSocialListRequest) returns (DeleteSocialListResponse);
  // get social lists
  rpc GetSocialLists(GetSocialListsRequest) returns (GetSocialListsResponse);
  // get social lists by attribute
  rpc GetSocialListsByAttribute(GetSocialListsByAttributeRequest) returns (GetSocialListsByAttributeResponse);
  // update social lists visibility
  rpc UpdateSocialListsVisibility(UpdateSocialListsVisibilityRequest) returns (UpdateSocialListsVisibilityResponse);
  // get leaderboard info for stores
  rpc GetLeaderboardInfo(GetLeaderboardInfoRequest) returns (GetLeaderboardInfoResponse);
}

// create social lists request
message CreateSocialListsRequest {
  // SocialList objects to be inserted.
  // Absent attributes will be sent in DB as null/default value if not required
  // "list_id" attribute will be ignored
  repeated SocialList lists = 1;
}

// social list
message SocialList {
  // list id
  google.protobuf.StringValue list_id = 1;
  // targets (store or item), where each list is a collection of targets
  repeated SocialListTarget targets = 2;
  // creator type
  CreatorType creator_type = 3;
  // creator id
  google.protobuf.StringValue creator_id = 4;
  // list name
  google.protobuf.StringValue list_name = 5;
  // list description
  google.protobuf.StringValue list_description = 6;
  // visibility of list
  ListVisibility visibility = 7;
  // cover photo url
  google.protobuf.StringValue cover_photo_url = 8;
  // is active
  google.protobuf.BoolValue is_active = 9;
  // targeting tag
  google.protobuf.Struct targeting_tags = 10;
  // display attribute(attributes used to describe how a list is displayed)
  google.protobuf.Struct display_attributes = 11 [deprecated = true];
  // metadata tag(tags not returned in get endpoints - only analytics)
  google.protobuf.Struct metadata_tags = 12;
  // voting start time
  google.protobuf.Timestamp voting_start_time = 13;
  // voting end time
  google.protobuf.Timestamp voting_end_time = 14;
  // list type
  google.protobuf.StringValue list_type = 15;
  // created at time stamp -- ONLY for read, autogenerated on write
  google.protobuf.Timestamp created_at = 16;
  // updated at time stamp -- ONLY for read, autogenerated on write
  google.protobuf.Timestamp updated_at = 17;
  // stats of the list on the consumer level -- set if consumer id is provided in request
  ConsumerSocialListStats consumer_list_stats = 18;
  // stats of the list on global level
  GlobalSocialListStats global_list_stats = 19;
  // list display attribute(attributes used to describe how a list is displayed)
  ListDisplayAttributes list_display_attributes = 20;
}

// social list target, containing data for a target, where each list is a collection of targets
message SocialListTarget {
  // target information (store or item) -- we assume that each TargetInfo contains only 1 target
  TargetInfo target_info = 1;
  // description attached to each target
  google.protobuf.StringValue description = 2;
  // target tags
  repeated google.protobuf.StringValue target_tags = 3;
  // recommended items
  repeated google.protobuf.StringValue recommended_item_ids = 4 [deprecated = true];
  // rank
  google.protobuf.Int32Value rank = 5;
  // recommended items
  repeated MenuItemDetails recommended_items = 6;
}

// enum message for list visibility
enum ListVisibility {
  // visibility unspecified
  LIST_VISIBILITY_UNSPECIFIED = 0;
  // public to all
  LIST_VISIBILITY_PUBLIC = 1;
  // private to only creator
  LIST_VISIBILITY_PRIVATE = 2;
  //visible to internal team
  LIST_VISIBILITY_INTERNAL_TEAM = 3;
  //visible to all employees
  LIST_VISIBILITY_EMPLOYEES = 4;
}

// enum message for creator type
enum CreatorType {
  // creator type unspecified
  CREATOR_TYPE_UNSPECIFIED = 0;
  // creator type ops
  CREATOR_TYPE_OPS = 1;
  // creator type consumer
  CREATOR_TYPE_CONSUMER = 2;
}

// stats for social lists on the Cx <> list level
message ConsumerSocialListStats {
  // consumer id associated with this stat
  google.protobuf.StringValue consumer_id = 1;
  // total number of clicks
  google.protobuf.Int64Value total_clicks = 2;
  // total number of impressions
  google.protobuf.Int64Value total_impressions = 3;
  // click through rate
  google.protobuf.DoubleValue list_click_through_rate = 4;
  // click to purchase rate
  google.protobuf.DoubleValue click_to_purchase = 5;
}

// stats for social lists on the global aggregate level
message GlobalSocialListStats {
  // total number of clicks
  google.protobuf.Int64Value total_clicks = 1;
  // total number of impressions
  google.protobuf.Int64Value total_impressions = 2;
  // click through rate
  google.protobuf.DoubleValue list_click_through_rate = 3;
  // click to purchase rate
  google.protobuf.DoubleValue click_to_purchase = 4;
}

// create social lists response
message CreateSocialListsResponse {
  // success
  google.protobuf.BoolValue success = 1;
  // response error
  SocialListError error = 2;
}

// error details
message SocialListError {
  // error code
  SocialListErrorCode error_code = 1;
  // error message
  google.protobuf.StringValue error_message = 2;
}

// business logic error codes for social list
enum SocialListErrorCode {
  // unspecified error
  SOCIAL_LIST_ERROR_CODE_UNSPECIFIED = 0;
  // invalid parameter (possibly null) error
  SOCIAL_LIST_ERROR_CODE_INVALID_PARAMETER = 1;
}

// update social lists request
message UpdateSocialListsRequest {
  // update entity object
  message UpdateEntity {
    // operation type
    OperationType operation_type = 1;
    // social list (list_id is an required field)
    SocialList social_list = 2;
    // update mask contains fields to be updated.
    repeated google.protobuf.StringValue update_mask = 3;
  }

  // entity objects to update
  repeated UpdateEntity update_entities = 1;
}

// operation type enum
enum OperationType {
  // unspecified
  OPERATION_TYPE_UNSPECIFIED = 0;
  // add to list
  OPERATION_TYPE_ADD_TO_LIST = 1;
  // remove from list
  OPERATION_TYPE_REMOVE_FROM_LIST = 2;
  // update field
  OPERATION_TYPE_UPDATE_FIELD = 3;
  // remove all targets from list
  OPERATION_TYPE_REMOVE_ALL_TARGETS_FROM_LIST = 4;
}

// update social lists response
message UpdateSocialListsResponse {
  // success
  google.protobuf.BoolValue success = 1;
  // response error
  SocialListError error = 2;
}

// delete social lists request
message DeleteSocialListRequest {
  // list_id to be deleted
  google.protobuf.StringValue list_id = 1;
}

// delete social list response
message DeleteSocialListResponse {
  // success
  google.protobuf.BoolValue success = 1;
  // response error
  SocialListError error = 2;
}

// get social lists request
message GetSocialListsRequest {
  // get entity object
  message GetEntity {
    // ids of SocialList objects to retrieve
    google.protobuf.StringValue list_id = 1;
    // whether to omit targets from response (reduce 1 DB call)
    google.protobuf.BoolValue omit_targets = 2;
    // whether to omit targeting tags from response (reduce 1 DB call)
    google.protobuf.BoolValue omit_targeting_tags = 3;
  }

  // entity objects to get
  repeated GetEntity get_entities = 1;
  // consumer id
  google.protobuf.StringValue consumer_id = 2;
}

// get social lists response
message GetSocialListsResponse {
  // SocialList objects retrieved
  repeated SocialList lists = 1;
  // response error
  SocialListError error = 2;
}

// get social lists by attribute request
message GetSocialListsByAttributeRequest {
  // social list attributes to get
  repeated SocialListAttribute get_entities = 1;
  // whether to omit targets from response (reduce 1 DB call)
  google.protobuf.BoolValue omit_targets = 2;
  // whether to omit targeting tags from response (reduce 1 DB call)
  google.protobuf.BoolValue omit_targeting_tags = 3;
  // whether to include inactive lists
  google.protobuf.BoolValue include_inactive = 4;
  // consumer id
  google.protobuf.StringValue consumer_id = 5;
  // list type
  ListType list_type = 6;
}

// Social List Attribute
message SocialListAttribute {
  // submarket id to retrieve
  repeated google.protobuf.StringValue submarket_id = 1;
  // district id to retrieve
  repeated google.protobuf.StringValue district_id = 2;
  // attribute key value pairs to search by
  google.protobuf.Struct attribute = 3;
  // lat of the address geo to retrieve
  google.protobuf.DoubleValue lat = 4;
  // lng of the address geo to retrieve
  google.protobuf.DoubleValue lng = 5;
  // Use the primary geo ID for geohash or hex.
  // Geo attributes need to be cleaned up after the experiment. There are two paths for querying geo data:
  //   1. By district ID, latitude, and longitude from the consumer geo context.
  //   2. By primary geo ID from another leaderboard's geo context (e.g., using the burger leaderboard with geo context
  //     from the customer’s favorite leaderboard).
  // We should define the proto in two structs: either LeaderboardGeoContext or ConsumerGeoContext.
  // message GeoQuery {
  //   oneof query_path {
  //     ConsumerGeoContext consumer_geo = 1;
  //     LeaderboardGeoContext leaderboard_geo = 2;
  //   }
  // }
  google.protobuf.StringValue primary_geo_id = 6;
  // geohash, hex, district, submarket
  google.protobuf.StringValue primary_geo_type = 7;
}

// get social lists by attribute response
message GetSocialListsByAttributeResponse {
  // attribute entity response object
  message AttributeEntityResponse {
    // social list attribute
    SocialListAttribute social_list_attribute = 1;
    // SocialList objects retrieved
    repeated SocialList lists = 2;
  }

  // attribute entity response objects
  repeated AttributeEntityResponse attribute_entity_responses = 1;

  // response error
  SocialListError error = 2;
}

// update social lists visibility request
message UpdateSocialListsVisibilityRequest {
  // ids of SocialList update visibility
  repeated google.protobuf.StringValue list_id = 1;
  // list visibility to update
  ListVisibility list_visibility = 2;
}

// update social lists visibility response
message UpdateSocialListsVisibilityResponse {
  // success
  google.protobuf.BoolValue success = 1;
  // response error
  SocialListError error = 2;
}

// get leaderboard info request
message GetLeaderboardInfoRequest {
  // store ids to retrieve
  repeated google.protobuf.StringValue store_ids = 1;
  // submarket id to retrieve
  google.protobuf.Int64Value submarket_id = 2;
  // district id to retrieve
  google.protobuf.Int64Value district_id = 3;
  // consumer id to retrieve
  google.protobuf.StringValue consumer_id = 4;
  // lat of the address geo to retrieve
  google.protobuf.DoubleValue lat = 5;
  // lng of the address geo to retrieve
  google.protobuf.DoubleValue lng = 6;
}

// get leaderboard info response
message GetLeaderboardInfoResponse {
  // Leaderboard info
  repeated StoreLeaderboardInfo leaderboard_info = 1;
}

// Store Leaderboard Info
message StoreLeaderboardInfo {
  // store id of badge
  google.protobuf.StringValue store_id = 1;
  // keyword of leaderboard
  google.protobuf.StringValue keyword = 2;
  // rank
  google.protobuf.Int32Value rank = 3;
  // list id
  google.protobuf.StringValue list_id = 4;
}
