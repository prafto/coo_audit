syntax = "proto3";
package risk_core.v1;

import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "risk-common/challenges/redirect_secure_payment.proto";
import "risk-core/account.proto";
import "risk-core/dasher.proto";
import "risk-core/fulfillment.proto";
import "risk-core/store/store.proto";
import "system_of_records_service/common.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_outer_classname = "ActionProtos";
option java_package = "com.doordash.rpc.risk_core";

// Proto representation of an action requested by a checkpoint.
message Action {
  // Name of the original action (typically the class name).
  // This is for debugging only; clients should not rely on this field.
  string name = 1;

  // Details of the original action (typically the `toString()` of the object).
  // This is for debugging only; clients should not rely on this field.
  string details = 2;

  // Weight of the original action.
  // This is for debugging only; clients should not rely on this field.
  double weight = 3;

  // reason for why this action was triggered, shared across all types
  string reason = 100;

  // Optional Challenge ID for specific actions.
  // This ID is sent to clients to display the correct fraud challenge to the end user.
  string challenge_id = 101;

  // Representation of the original action into a generic action clients know
  // how to work with. This is the main field clients should care about.
  oneof kind {
    // block
    Block block = 4;
    // request mfa
    RequestMfa request_mfa = 5;
    // request proof of payment (card scan)
    RequestProofOfPayment request_proof_of_payment = 6;
    // Ban consumer action type
    BanConsumer ban_consumer = 7;
    // Ban Dasher action
    BanDasher ban_dasher = 8;
    // ContestDispute
    ContestDispute contest_dispute = 9;
    // RequestCardReentry
    RequestCardReentry request_card_reentry = 10;
    // ResetPassword
    ResetPassword reset_password = 11;
    // InvalidateReferralBonus
    InvalidateReferralBonus invalidate_referral_bonus = 12;
    // Request3DS
    Request3DS request_three_d_secure = 13;
    // BlockApologyCredits
    BlockApologyCredits block_apology_credits = 14;
    // UpdateIdentityVerificationStatus
    UpdateIdentityVerificationStatus update_identity_verification_status = 15;
    // CreditsOnly
    CreditsOnly credits_only = 16;
    // ReassignDelivery
    ReassignDelivery reassign_delivery = 17;
    // BanDasherBlockPayout
    BanDasherBlockPayout ban_dasher_block_payout = 18;
    // HoldingTank
    HoldingTank holding_tank = 19;
    // MarkPhoneNumberVerified
    MarkPhoneNumberVerified mark_phone_number_verified = 20;
    // EscalateToChat
    EscalateToChat escalate_to_chat = 21;
    // BanCancellationDispute
    BanCancellationDispute ban_cancellation_dispute = 22;
    // Allow
    Allow allow = 23;
    // RequestBankVerification
    RequestBankVerification request_bank_verification = 24;
    // RequestPhoneVerification
    RequestPhoneVerification request_phone_verification = 25;
    // PostToSlack
    PostToSlack post_to_slack = 26;
    // action requires signature
    SignatureRequired signature_required = 27;
    // RefundOnly
    RefundOnly refund_only = 28;
    // ReviewQueue
    ReviewQueue review_queue = 29;
    // PinCodeRequired
    PinCodeRequired pin_code_required = 30;
    // FraudGlobalHoldout
    FraudGlobalHoldout fraud_global_holdout = 31;
    // RequestIdv
    RequestIdv request_idv = 32;
    // ResetAccount
    ResetAccount reset_account = 33;
    // ReviewQueueIsFull
    ReviewQueueIsFull review_queue_is_full = 34;
    // Request Knowledge Based Authentication
    RequestKba request_kba = 35;
    // BlockUserBypassLoginOrMFA
    BlockUserBypassLoginOrMFA block_user_bypass_login_or_mfa = 36;
    // UpdateApp
    UpdateApp update_app = 37;
    // BlockPayout
    BlockPayout block_payout = 38;
    // ExternalApproval
    ExternalApproval external_approval = 39;
    // PayoutDelay
    PayoutDelay payout_delay = 40;
    // RequestPhotoProof
    RequestPhotoProof request_photo_proof = 42;
    // RequestCvc
    RequestCvc request_cvc = 43;
    // CnrEmailWarning
    CnrEmailWarning cnr_email_warning = 44;
    // CnrAppWarning
    CnrAppWarning cnr_app_warning = 45;
    // block cross drsc payouts
    BlockCrossDRSCPayout block_cross_drsc_payout = 46;
    // OptionalPhotoProof
    OptionalPhotoProof optional_photo_proof = 47;
    // TrustedCheckout
    TrustedCheckout trusted_checkout = 48;
    // BlockMxPayout
    BlockMxPayout block_mx_payout = 49;
    // TopUpAdjustment
    TopUpAdjustment top_up_adjustment = 50;
    // PromoEligibilityAction
    PromoEligibilityAction promo_eligibility_action = 51;
    // add review queue case to an rq
    EnqueueForReview enqueue_for_review = 52;
    //RequestTinInfo
    RequestTinInfo request_tin_info = 53;
    // ban global holdout dasher
    BanGlobalHoldoutDasher ban_global_holdout_dasher = 54;
    // warn a dasher
    WarnDasher warn_dasher = 55;
    // flag an entity for a given reason
    FlagEntity flag_entity = 56;
    // request persona
    RequestPersona request_persona = 57;
    // PinCodeNonCompulsory
    PinCodeOptional pin_code_optional_field = 60;
    // PinCodeNonCompulsory
    RevokeAccess revoke_access = 61;
    // PinCodeNonCompulsory
    RegainAccess regain_access = 62;
    // A digital wallet transaction requires a new cryptogram. This may necessitate routing it to a different
    // provider.
    RequiresNewCryptogram requires_new_cryptogram = 63;
    // Redirect to Secure Payment
    RedirectSecurePayment redirect_secure_payment = 64;
    // Sum challenge to demo webview fallback for Project Apparate
    SumChallenge sum_challenge = 65;
    // PinCode Optional is by default opted in
    PinCodeOptionalDefaultOptIn pin_code_optional_default_opt_in = 66;
    // SmartScaleAppWarning
    SmartScaleAppWarning smart_scale_app_warning = 67;
  }

  reserved 58;
  reserved "pin_code_optional";

  reserved 59;
  reserved "pin_code_non_compulsory";

  // An action that blocks the user operation.
  message Block {
    // The code to look up the localized message from a messages resource bundle.
    string message_code = 1;

    // The arg values to be substituted into the message template.
    google.protobuf.Struct args = 2;

    // The final localized, user-visible error message. This might be empty until
    // the localization from `(message_code, args)` happens (in risk-gateway).
    string error_message = 3;
  }

  // An action that allows the user operation.
  message Allow {
    // The code to look up the localized message from a messages resource bundle.
    string message_code = 1;

    // The arg values to be substituted into the message template.
    google.protobuf.Struct args = 2;

    // The final localized, user-visible error message. This might be empty until
    // the localization from `(message_code, args)` happens (in risk-gateway).
    string error_message = 3;
  }

  // An action that requests the user to complete KBA before attempting the original operation again
  // ex. EMAIL -> User must input the correct email address on their account before proceeding
  message RequestKba {
    // KnowledgeType
    enum KnowledgeType {
      // KNOWLEDGE_TYPE_UNSPECIFIED
      KNOWLEDGE_TYPE_UNSPECIFIED = 0;
      // EMAIL
      KNOWLEDGE_TYPE_EMAIL = 1;
    }
    // KnowledgeType
    KnowledgeType knowledge_type = 1;
  }

  // An action that bans user.
  // This is a very strict action so there must be sufficient evidence to use this
  message BanConsumer {
    // A user's id
    message UserId {
      // The user's id
      string value = 1;
    }

    // The id of the user to ban
    UserId id = 1;
    // The reason for the ban
    string reason = 2;
  }

  // An action that requests the user to provide proof of possession of the
  // payment method.
  message RequestProofOfPayment {
    // challenge type
    enum Challenge {
      // unspecified
      CHALLENGE_UNSPECIFIED = 0;
      // stripe card scan
      CHALLENGE_SCAN_CARD = 1;
      // dyneti card scan
      CHALLENGE_SCAN_CARD_DYNETI = 2;
      // tap to verify
      CHALLENGE_TAP_TO_VERIFY = 3;
    }

    // The allowed challenges for completing the proof of possession.
    repeated Challenge allowed_challenges = 1;
  }

  // Action that blocks or defers payout for multiple dashers due to cross DRSC violation check
  // This is needed because dashers who trigger the action is not the dashers we want to action on
  // i.e. cross-dasher DRSC violation check works in a way that if a delivery can be picked up by a Dx, the other Dxs
  // who has reported DRSC before for the same delivery is subject to fraud
  message BlockCrossDRSCPayout {
    // map of dasher ids to dasher job ids
    map<string, string> dasher_job_mapping = 1;

    // INTERNAL ONLY Reason that the user's action is subject for review
    string internal_reason = 2;

    // The queue name the case is sent to
    string queue_name = 3;
  }

  // an action that requires signature
  message SignatureRequired {}

  // Action that blocks or defers dasher payout.
  message BlockPayout {
    // The code to look up the localized message from a messages resource bundle.
    string message_code = 1;

    reserved 2;
    reserved "enqueued_timestamp";

    reserved 3;
    reserved "expiry_timestamp";

    // INTERNAL ONLY Reason that the user's action is subject for review
    string internal_reason = 4;

    // The queue name the case is sent to
    string queue_name = 5;

    // The arg values to be substituted into the message template.
    google.protobuf.Struct args = 6;
  }
}

// An action that requests the user to complete MFA verification before
// attempting the original operation again.
message RequestMfa {
  // mfa channels
  enum Channel {
    // UNSPECIFIED
    CHANNEL_UNSPECIFIED = 0;
    // SMS
    CHANNEL_SMS = 1;
    // EMAIL
    CHANNEL_EMAIL = 2;
  }

  // The allowed channels that the MFA verification may be sent on.
  repeated Channel allowed_channels = 1;
}

// Action that bans dasher.
// This is a very strict action so there must be sufficient evidence to use this
message BanDasher {
  // user id
  UserId id = 1;
  // reason
  string reason = 2;
  // DasherDeactivationReasonId
  DasherDeactivationReasonId deactivation_reason_id = 3;
}

// Action to contest dispute
message ContestDispute {}

// Action to request card reentry
message RequestCardReentry {
  // ConsumerId
  ConsumerId consumer_id = 1;
  // CardDetails
  CardDetails card_details = 2;

  // CardDetails definition
  message CardDetails {
    // card id
    string id = 1;
    // card type
    string type = 2;
    // card last 4
    string last4 = 3;
    // car exp month
    string exp_month = 4;
    // card exp year
    string exp_year = 5;
  }
}

// Action that sends reset password email.
message ResetPassword {
  // user id
  UserId id = 1;
  // reason
  string reason = 2;
}

// Action that invalidate the referral bonus for the associated referrer and referee.
message InvalidateReferralBonus {
  // referrer user id
  UserId referrer_id = 1;
  // referee user id
  UserId referee_id = 2;
  // reason
  string reason = 3;
}

// Action to request 3D Secure
message Request3DS {
  // sticky flag
  bool sticky = 1;
}

// An action that blocks apology credits.
message BlockApologyCredits {
  // The code to look up the localized message from a messages resource bundle.
  string message_code = 1;

  // The arg values to be substituted into the message template.
  google.protobuf.Struct args = 2;

  // The final localized, user-visible error message. This might be empty until
  // the localization from `(message_code, args)` happens (in risk-gateway).
  string error_message = 3;
}

// Action that updates user identity verification status.
message UpdateIdentityVerificationStatus {
  // The status of Identity Verification
  Status idv_status = 1;

  // The arg values to be substituted into the message template.
  google.protobuf.Timestamp verified_at = 2;

  // Inquiry id
  string inquiry_id = 3;

  // Template id
  string template_id = 4;

  // Status
  enum Status {
    // STATUS_UNSPECIFIED
    STATUS_UNSPECIFIED = 0;
    // STATUS_COMPLETED
    STATUS_COMPLETED = 1;
    // STATUS_FAILED
    STATUS_FAILED = 2;
    // STATUS_CREATED
    STATUS_CREATED = 3;
    // STATUS_INTERNAL_ERROR
    STATUS_INTERNAL_ERROR = 4;
    // STATUS_STARTED
    STATUS_STARTED = 5;
    // STATUS_EXPIRED
    STATUS_EXPIRED = 6;
    // STATUS_APPROVED
    STATUS_APPROVED = 7;
    // STATUS_DECLINED
    STATUS_DECLINED = 8;
    // STATUS_NEEDS_REVIEW
    STATUS_NEEDS_REVIEW = 9;
    // STATUS_PENDING
    STATUS_PENDING = 10;
  }
}

// An action that blocks apology credits.
message CreditsOnly {
  // The code to look up the localized message from a messages resource bundle.
  string message_code = 1;

  // The arg values to be substituted into the message template.
  google.protobuf.Struct args = 2;

  // The final localized, user-visible error message. This might be empty until
  // the localization from `(message_code, args)` happens (in risk-gateway).
  string error_message = 3;
}

// Action that reassigns the delivery from the current order
message ReassignDelivery {
  // DeliveryId
  DeliveryId delivery_id = 1;
  // reason
  string reason = 2;
}

// Action that bans the dasher and blocks payout.
// This is a very strict action so there must be sufficient evidence to use this
message BanDasherBlockPayout {
  // user id
  UserId id = 1;
  // reason
  string reason = 2;
  // DasherDeactivationReasonId
  DasherDeactivationReasonId deactivation_reason_id = 3;
}

// An action that suspends a user's action and puts them into a queue for review
message HoldingTank {
  // The code to look up the localized message from a messages resource bundle.
  string message_code = 1;

  // Timestamp at which the "pending for review" state began (could be already in the past)
  google.protobuf.Timestamp enqueued_timestamp = 2;

  // Timestamp at which the "pending for review" state will expire
  google.protobuf.Timestamp expiry_timestamp = 3;

  // INTERNAL ONLY Reason that the user's action is subject for review
  string internal_reason = 4;

  // The queue name the case is sent to
  string queue_name = 5;

  // The arg values to be substituted into the message template.
  google.protobuf.Struct args = 6;
}

//Action to mark phone number verified
message MarkPhoneNumberVerified {}

// An action that escalate the issue from self help workflow to agent chat
message EscalateToChat {}

// An action to reject agent use order problem type: cancellation dispute
message BanCancellationDispute {}

// RequestBankVerification
message RequestBankVerification {}

// An action to request user to verify the phone number associated with the account.
message RequestPhoneVerification {}

// PostToSlack
message PostToSlack {
  // Channel
  enum Channel {
    // CHANNEL_UNSPECIFIED
    CHANNEL_UNSPECIFIED = 0;
    // CARJACKING
    CHANNEL_CARJACKING = 1;
  }
  // Channel
  Channel channel = 1;

  // Extra content in the slack message
  string extra_message_content = 2;
}

// An action that blocks credit as a cancellation payout option.
message RefundOnly {
  // The code to look up the localized message from a messages resource bundle.
  string message_code = 1;

  // The arg values to be substituted into the message template.
  google.protobuf.Struct args = 2;

  // The final localized, user-visible error message. This might be empty until
  // the localization from `(message_code, args)` happens (in risk-gateway).
  string error_message = 3;
}

// An action that puts a user into a queue for review
message ReviewQueue {
  // The code to look up the localized message from a messages resource bundle.
  string message_code = 1;

  // Timestamp at which the "pending for review" state began (could be already in the past)
  google.protobuf.Timestamp enqueued_timestamp = 2;

  // Timestamp at which the "pending for review" state will expire
  google.protobuf.Timestamp expiry_timestamp = 3;

  // INTERNAL ONLY Reason that the user's action is subject for review
  string internal_reason = 4;
}

// PinCodeRequired
message PinCodeRequired {
  // pin_code
  string pin_code = 1;
}

// PinCodeOptional
message PinCodeOptional {
  // pin_code
  string pin_code = 1;
}

// PinCodeOptional - Default opt in
message PinCodeOptionalDefaultOptIn {}

// FraudGlobalHoldout
message FraudGlobalHoldout {
  // Sticky fraud label
  bool sticky = 1;
}

// RequestIdv
message RequestIdv {
  // DasherDeactivationReasonId
  DasherDeactivationReasonId status_code = 1;
  // internal_reason
  string internal_reason = 2;
}

// Action to reset account.
message ResetAccount {
  // reason
  string reason = 1;
}

// An action to reject new cases add into review queue
message ReviewQueueIsFull {}

// Action to block the user from using magic link or MFA
message BlockUserBypassLoginOrMFA {}

// UpdateApp
message UpdateApp {
  // reason
  string reason = 1;
}

// Action to exempt users from all frictions
message ExternalApproval {
  // reason
  string reason = 1;
}

// Action to delay dx weekly payout
message PayoutDelay {
  // reason
  string reason = 1;
  // message code
  string message_code = 2;
}

// RequestPhotoProof
message RequestPhotoProof {
  // Is consumer allow to choose photo from device gallery, rather than taking photo from app
  bool gallery_allowed = 1;
}

// RequestCvc
message RequestCvc {}

// An action to show Cx C&R Warning via Email
message CnrEmailWarning {}

// An action to show Cx C&R Warning via App
message CnrAppWarning {}

// An action to show Cx Smart Scale Warning via App
message SmartScaleAppWarning {}

// OptionalPhotoProof
message OptionalPhotoProof {
  // Is consumer allow to choose photo from device gallery, rather than taking photo from app
  bool gallery_allowed = 1;
}

// TrustedCheckout
message TrustedCheckout {}

// BlockMxPayout
message BlockMxPayout {
  // payment_account_id
  int32 payment_account_id = 1;
  // queue_name
  string queue_name = 2;
  // case_details
  map<string, string> case_details = 3;
  // expiry_timestamp
  google.protobuf.Timestamp expiry_timestamp = 4;
}

// Action to mark the delivery as top-up and store the dat adjustment percentage
message TopUpAdjustment {
  // The code to look up the localized message from a messages resource bundle.
  string message_code = 1;

  // The percentage
  double dat_adjustment_percentage = 2;
}

// PromoEligibilityAction
message PromoEligibilityAction {
  // PromoEligibility
  message PromoEligibility {
    // campaign_id
    string campaign_id = 1;
    // eligibility_blocked
    bool eligibility_blocked = 2;
  }
  // promo_eligibility list
  repeated PromoEligibility promo_eligibility = 1;
}

//RequestTinInfo
message RequestTinInfo {
  // DasherDeactivationReasonId
  DasherDeactivationReasonId status_code = 1;
  // internal_reason
  string internal_reason = 2;
}

// Action that bans dasher bucketed in global holdout.
// This is a very strict action so there must be sufficient evidence to use this
message BanGlobalHoldoutDasher {
  // user id
  UserId id = 1;

  // reason
  string reason = 2;

  // deactivation id
  DasherDeactivationReasonId deactivation_reason_id = 3;
}

// action that sends a warning to a dasher
message WarnDasher {
  // The code to look up the localized message from a messages resource bundle.
  string message_code = 1;

  // Warning notification name
  string warning_notification_name = 3;

  // Warning type id
  int32 warning_type_id = 4;

  reserved 2;
}

// add review queue case
message EnqueueForReview {
  // The code to look up the localized message from a messages resource bundle.
  string message_code = 1;

  // The queue where we want to enqueue
  string queue_name = 2;

  // The arg values to be substituted into the message template.
  google.protobuf.Struct args = 3;
}

// Action that flag an entity
message FlagEntity {
  // reason
  string confirm_fraud_reason = 1;
}

// Request Persona
message RequestPersona {
  //entity
  system_of_records_service.v1.Entity entity = 1;

  //transaction type id
  string transaction_type_id = 2;

  //reference id
  string reference_id = 3;

  //store
  store.v1.Store store = 4;

  //ip
  string ip = 5;

  //associated people
  repeated User associate_people = 6;
}

// Revoke Access action
message RevokeAccess {
  // The domain for which we want to revoke access
  string domain = 1;

  // The arg values
  google.protobuf.Struct args = 2;
}

// Regain Access action
message RegainAccess {
  // The domain for which we want to regain access
  string domain = 1;

  // The arg values
  google.protobuf.Struct args = 2;
}

// A digital wallet transaction requires a new cryptogram. This may necessitate routing it to a different
// provider.
message RequiresNewCryptogram {}

// Action for Redirecting a Block to a secure Payment Method
message RedirectSecurePayment {
  // Allowed secure payment method
  repeated risk_common.challenges.SecurePaymentMethod allowed_secure_payment = 2;

  // Boolean for whether this will be reviewed
  bool will_review = 3;

  // INTERNAL ONLY Reason that the user is subject for review
  string internal_reason = 4;

  // Timestamp at which the "pending for review" state began (could be in past)
  google.protobuf.Timestamp enqueued_timestamp = 5;

  // Timestamp at which the "pending for review" state will expire
  google.protobuf.Timestamp expiry_timestamp = 6;
}

// Sum challenge to demo webview fallback for Project Apparate
message SumChallenge {
  // user id needed to generate the challenge session identifier.
  string user_id = 1;
}
