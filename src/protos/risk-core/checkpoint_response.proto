syntax = "proto3";
package risk_core.v1;

import "google/protobuf/struct.proto";
import "risk-core/action.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_outer_classname = "CheckpointResponseProtos";
option java_package = "com.doordash.rpc.risk_core";

// Encapsulates the response of a checkpoint evaluation.
message CheckpointResponse {
  // The list of actions requested by the checkpoint.
  // The common case should be an empty list (no action requested).
  repeated Action actions = 1;

  // Maps rule name to the result of that rule.
  // Only rules that are live and not exempted will be recorded here.
  map<string, RuleResult> rule_exemptions = 2;
  // rule_labels
  map<string, RuleResult> rule_labels = 3;
  // rule_actions
  map<string, RuleResult> rule_actions = 4;

  // Reason for checkpoint being bypassed
  string bypass_reason = 5;

  // Encapsulates the result (or error) of a rule.
  message RuleResult {
    // kind
    oneof kind {
      // result
      Result result = 1;
      // error
      Error error = 2;
    }
    // provenance
    google.protobuf.Struct provenance = 3;
  }

  // Result
  message Result {
    // Name of the result.
    // This is typically the classname of the Exemption/Label/Action.
    string name = 1;

    // Details of the result.
    // This is typically the `toString()` fo the Exemption/Label/Action.
    string details = 2;

    // Optional source of the result. E.g., for actions, this could be the
    // Label or Rule that originated that action.
    string source = 3;
  }

  // Error
  message Error {
    // `toString()` of the thrown Exception.
    string message = 1;

    // `toString()` of the ancestor Exceptions of the thrown Exception.
    repeated string causes = 2;
  }
}
