syntax = "proto3";

package risk_core.v1.risk_evaluation_service.v1;

import "common/service_client_config.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "risk-core/action.proto";
import "risk-core/risk-evaluation-service/common.proto";
import "risk-core/risk-evaluation-service/dimension.proto";
import "risk-core/risk-evaluation-service/experiment.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.risk_core.riskevaluation";

// This is an example service for using Asgard server library in a Guice environment.
service RiskConfigurationService {
  // Example Hermes client config. The options not listed here use Hermes default.
  // The following applies for all RPCs in the service, if not overridden on individual RPCs.

  // Timeout after 700 milliseconds.
  option (service_client.client_config).response_attempt_timeout_millis = 700;
  // Make a total 2 attempts (initial + one retries).
  option (service_client.client_config).retry_config.max_attempts = 2;
  // Add RESOURCE_EXHAUSTED to the set of retriable codes.
  option (service_client.client_config).retry_config.do_retry_grpc_code = 8;
  // Break the circuit if the error rate exceeds 80%.
  option (service_client.client_config).circuit_breaker_config.failure_rate_threshold = 0.8;
  // Ignore NOT_FOUND from circuit breaker error rate calculation.
  option (service_client.client_config).circuit_breaker_config.do_ignore_grpc_code = 5;

  // Get checkpoints
  rpc GetCheckpoints(GetCheckpointsRequest) returns (GetCheckpointsResponse);

  // Get checkpoint config
  rpc GetCheckpointConfig(GetCheckpointConfigRequest) returns (GetCheckpointConfigResponse);

  // Get current checkpoint config
  rpc GetCurrentCheckpointConfig(GetCurrentCheckpointConfigRequest) returns (GetCurrentCheckpointConfigResponse);

  // Upsert checkpoint config
  rpc UpsertCheckpointConfig(UpsertCheckpointConfigRequest) returns (UpsertCheckpointConfigResponse);

  // Get checkpoint rules
  rpc GetCheckpointRules(GetCheckpointRulesRequest) returns (GetCheckpointRulesResponse);

  // Get rule config
  rpc GetRuleConfig(GetRuleConfigRequest) returns (GetRuleConfigResponse);

  // Get current rule config
  rpc GetCurrentRuleConfig(GetCurrentRuleConfigRequest) returns (GetCurrentRuleConfigResponse);

  // Upsert rule config
  rpc UpsertRuleConfig(UpsertRuleConfigRequest) returns (UpsertRuleConfigResponse);

  // Create rule config
  rpc CreateRuleConfig(CreateRuleConfigRequest) returns (CreateRuleConfigResponse);

  // Update rule config
  rpc UpdateRuleConfig(UpdateRuleConfigRequest) returns (UpdateRuleConfigResponse);

  // UpdateRuleLaunchConfig
  rpc UpdateRuleLaunchConfig(UpdateRuleLaunchConfigRequest) returns (UpdateRuleLaunchConfigResponse);

  // Get checkpoint fact specs
  rpc GetCheckpointFactSpec(GetCheckpointFactSpecRequest) returns (GetCheckpointFactSpecResponse);

  // Get current checkpoint fact specs
  rpc GetCurrentCheckpointFactSpec(GetCurrentCheckpointFactSpecRequest) returns (GetCurrentCheckpointFactSpecResponse);

  // Upsert checkpoint fact specs
  rpc UpsertCheckpointFactSpec(UpsertCheckpointFactSpecRequest) returns (UpsertCheckpointFactSpecResponse);

  // Delete checkpoint rule
  rpc DeleteCheckpointRule(DeleteCheckpointRuleRequest) returns (DeleteCheckpointRuleResponse);

  // Delete fact spec
  rpc DeleteCheckpointFactSpec(DeleteCheckpointFactSpecRequest) returns (DeleteCheckpointFactSpecResponse);

  // Rollback checkpoint config
  rpc RollbackCheckpointConfig(RollbackCheckpointConfigRequest) returns (RollbackCheckpointConfigResponse);

  // Rollback rule config
  rpc RollbackRuleConfig(RollbackRuleConfigRequest) returns (RollbackRuleConfigResponse);

  // Approve config change
  rpc ApproveConfigChange(ApproveConfigChangeRequest) returns (ApproveConfigChangeResponse);

  // Reject config change
  rpc RejectConfigChange(RejectConfigChangeRequest) returns (RejectConfigChangeResponse);

  // Launch config change
  rpc LaunchConfigChange(LaunchConfigChangeRequest) returns (LaunchConfigChangeResponse);

  // Stage config change
  rpc StageConfigChange(StageConfigChangeRequest) returns (StageConfigChangeResponse);

  // Unstage config change
  rpc UnstageConfigChange(UnstageConfigChangeRequest) returns (UnstageConfigChangeResponse);

  // Get Pending changes
  rpc GetConfigChanges(GetConfigChangesRequest) returns (GetConfigChangesResponse);

  // Get Config Changes
  rpc GetConfigChangesV2(GetConfigChangesV2Request) returns (GetConfigChangesV2Response) {
    // Moving all the pagination in GetConfigChanges with more filters, please use GetConfigChanges instead.
    option deprecated = true;
  }

  // Refresh to the latest checkpoint fact specs
  rpc RefreshLatestCheckpointFactSpec(RefreshLatestCheckpointFactSpecRequest) returns (RefreshLatestCheckpointFactSpecResponse);

  // Get Action List for UI
  rpc GetActionList(GetActionListRequest) returns (GetActionListResponse);

  // List checkpoint factspec versions
  rpc ListCheckpointFactSpecVersions(ListCheckpointFactSpecVersionsRequest) returns (ListCheckpointFactSpecVersionsResponse);

  // ValidateRule endpoint validate rule expression (and config)
  rpc ValidateRule(ValidateRuleRequest) returns (ValidateRuleResponse);

  // GetCurrentCheckpointExecutionConfigs get current checkpoint's checkpoint and all rules' configs
  rpc GetCurrentCheckpointExecutionConfigs(GetCurrentCheckpointExecutionConfigsRequest) returns (GetCurrentCheckpointExecutionConfigsResponse);
}

// GetCheckpointsRequest.
message GetCheckpointsRequest {}

// GetCheckpointConfigResponse.
message GetCheckpointsResponse {
  // config
  repeated CheckpointConfig checkpoints = 1 [deprecated = true];
  // checkpoint and change configs
  repeated CheckpointAndChangeConfig checkpoint_and_change_configs = 2;
}

// GetCheckpointConfigRequest.
message GetCheckpointConfigRequest {
  // Checkpoint name
  string checkpoint_name = 1;
  // version
  string version = 2;
}

// GetCheckpointConfigResponse.
message GetCheckpointConfigResponse {
  // config
  CheckpointConfig checkpoint_config = 1;
}

// GetCurrentCheckpointConfigRequest
message GetCurrentCheckpointConfigRequest {
  // Checkpoint name
  string checkpoint_name = 1;
}

// GetCurrentCheckpointConfigResponse
message GetCurrentCheckpointConfigResponse {
  // config
  CheckpointConfig checkpoint_config = 1;
}

// UpsertCheckpointConfigRequest.
message UpsertCheckpointConfigRequest {
  // config
  CheckpointConfig checkpoint_config = 1;
  // change request
  ChangeRequest change_request = 2;
}

// UpsertCheckpointConfigResponse.
message UpsertCheckpointConfigResponse {
  // config
  CheckpointConfig checkpoint_config = 1;
  // change request
  ChangeRequest change_request = 2;
}

// GetCheckpointRulesRequest.
message GetCheckpointRulesRequest {
  // Checkpoint name
  string checkpoint_name = 1;
}

// GetCheckpointRulesResponse.
message GetCheckpointRulesResponse {
  // rule configs
  repeated RuleConfig rules = 1 [deprecated = true];
  // rule and change configs
  repeated RuleAndChangeConfig rule_and_change_configs = 2;
}

// GetRuleConfigRequest.
message GetRuleConfigRequest {
  // Checkpoint name
  string checkpoint_name = 1;
  // Rule name
  string rule_name = 2;
  // version
  string version = 3;
}

// GetRuleConfigResponse.
message GetRuleConfigResponse {
  // Rule config
  RuleConfig rule_config = 1;
}

// GetCurrentRuleConfigRequest.
message GetCurrentRuleConfigRequest {
  // Checkpoint name
  string checkpoint_name = 1;
  // Rule name
  string rule_name = 2;
}

// GetCurrentRuleConfigResponse.
message GetCurrentRuleConfigResponse {
  // Rule config
  RuleConfig rule_config = 1;
}

// UpsertRuleConfigRequest.
message UpsertRuleConfigRequest {
  // Rule config
  RuleConfig rule_config = 1;
  // change request
  ChangeRequest change_request = 2;
}

// UpsertRuleConfigResponse.
message UpsertRuleConfigResponse {
  // Rule config
  RuleConfig rule_config = 1;
  // change
  ChangeRequest change_request = 2;
  // Validation error includes the validation error that happens before upsert the rule to the database. For upsert
  // checkpoint we only return one type of validation error. In the case of validation errors, the rule will not be
  // mutated.
  ValidationError validation_error = 3;
}

// Request to create a rule configuration.
message CreateRuleConfigRequest {
  // Checkpoint name
  string checkpoint_name = 1;

  // Rule name
  string rule_name = 2;

  // The rule decision
  RuleDecision decision = 3;

  // Expression
  string expression = 4;

  // The dimension profiles which gate this rule. These dimension profiles must be satisfied in addition to those of
  // the rule's decision
  repeated string dimension_profile_uuids = 5;

  // The rule's description. This should be human readable and describe the intent of the rule.
  string description = 6;

  // The user change information.
  UserChange user_change = 7;

  // Modified dimension profiles
  repeated ModifiedDimensionProfile dimension_profiles = 8;
}

// CreateRuleConfigResponse.
message CreateRuleConfigResponse {
  // The created rule config.
  RuleConfig rule_config = 1;
  // Change request produced as a result of the creation of the rule.
  ChangeRequest change_request = 2;
  // Validation error, if any occurred during the create. If present, the rule was not created.
  ValidationError validation_error = 3;
}

// Request to update the rule configuration. Wrappers are used for primitive types to allow for partial updates.
message UpdateRuleConfigRequest {
  // Checkpoint name
  string checkpoint_name = 1;

  // Rule name
  string rule_name = 2;

  // The expression to be updated
  google.protobuf.StringValue expression = 3;

  // The dimension profiles which gate this rule. These dimension profiles must be satisfied in addition to those of
  // the rule's decision
  StringListValue dimension_profile_uuids = 4;

  // The current version of the config
  google.protobuf.StringValue current_version = 5;

  // The rule decision
  RuleDecision decision = 6;

  // The rule's description. This should be human readable and describe the intent of the rule.
  google.protobuf.StringValue description = 7;

  // The user change information
  UserChange user_change = 8;

  // Modified dimension profiles
  repeated ModifiedDimensionProfile dimension_profiles = 9;
}

// UpdateRuleConfigResponse.
message UpdateRuleConfigResponse {
  // The updated rule config
  RuleConfig rule_config = 1;
  // Change request produced as a result of the update of the rule.
  ChangeRequest change_request = 2;
  // Validation error, if any occurred during the update. If present, the rule was not updated.
  ValidationError validation_error = 3;
}

// UpdateRuleLaunchConfigRequest
message UpdateRuleLaunchConfigRequest {
  // Rule launch config
  RuleLaunchConfig rule_launch_config = 1;
  // change request
  ChangeRequest change_request = 2 [deprecated = true];
  // The user change information
  UserChange user_change = 3;
}

// UpdateRuleLaunchConfigResponse
message UpdateRuleLaunchConfigResponse {
  // Rule launch config
  RuleLaunchConfig rule_launch_config = 1;
  // change
  ChangeRequest change_request = 2;
}

// ValidateRuleRequest
message ValidateRuleRequest {
  // within this only checkpoint_name, rule_name and expression
  // are required to be present, other values can be sent along if possible
  RuleConfig rule_config = 1;
  // field to indicate if the validate request is for rule creation or update
  bool is_validate_rule_update = 2;
}

// ValidateRuleResponse
message ValidateRuleResponse {
  // list of validation errors, empty means no vaildation issue
  repeated ValidationError error = 1;
}

// ValidationError represents types invalid rule expression/configs
message ValidationError {
  // the line of the expression with the invalid case
  google.protobuf.Int32Value line_num = 1;
  // the position number / column with the invalid case
  google.protobuf.Int32Value pos_num = 2;
  // optional string why the rule failed validation
  google.protobuf.StringValue validation_detail_str = 3;
}

// GetCheckpointFactSpecRequest
message GetCheckpointFactSpecRequest {
  // checkpoint name
  string checkpoint_name = 1;
  // Fact names
  repeated string fact_names = 2;
  // version
  string version = 3;
}

// GetCheckpointFactSpecResponse
message GetCheckpointFactSpecResponse {
  // Fact specs
  repeated CheckpointFactSpec fact_specs = 1;
}

// GetCurrentCheckpointFactSpecRequest
message GetCurrentCheckpointFactSpecRequest {
  // checkpoint name
  string checkpoint_name = 1;
  // Fact names
  repeated string fact_names = 2;
}

// GetCurrentCheckpointFactSpecResponse
message GetCurrentCheckpointFactSpecResponse {
  // Fact specs
  repeated CheckpointFactSpec fact_specs = 1;
}

// ListCheckpointFactSpecVersionsRequest
message ListCheckpointFactSpecVersionsRequest {
  // checkpoint name
  string checkpoint_name = 1;
  // limit
  int32 limit = 2;
}

// ListCheckpointFactSpecVersionsResponse
message ListCheckpointFactSpecVersionsResponse {
  // Fact spec versions
  repeated string checkpoint_fact_spec_versions = 1;
}

// UpsertCheckpointFactSpecRequest
message UpsertCheckpointFactSpecRequest {
  // checkpoint name
  string checkpoint_name = 1;
  // fact specs
  repeated CheckpointFactSpec fact_specs = 2;
  // change
  ChangeRequest change_request = 3 [deprecated = true];
  // bulk upsert
  bool is_bulk_upsert = 4;
  // switch version
  bool is_switch_version = 5;
  // The user change information
  UserChange user_change = 6;
}

// UpsertCheckpointFactSpecResponse
message UpsertCheckpointFactSpecResponse {
  // Fact specs
  repeated CheckpointFactSpec fact_specs = 1;
}

// Rollback checkpoint config
message RollbackCheckpointConfigRequest {
  // checkpoint id
  string checkpoint_name = 1;
  // user_id
  string user_id = 2;
  // user message
  string user_message = 3;
  // base version
  int32 base_version = 4;
  // roll back version
  int32 rollback_to_version = 5;
}

// Rollback config response
message RollbackCheckpointConfigResponse {
  // checkpoint config
  CheckpointConfig config = 1;
  // config change data
  ChangeRequest change_request = 2;
}

// Rollback rule config
message RollbackRuleConfigRequest {
  // Checkpoint name
  string checkpoint_name = 1;
  // Rule name
  string rule_name = 2;
  // user_id
  string user_id = 3;
  // user message
  string user_message = 4;
  // base version
  int32 base_version = 5;
  // roll back version
  int32 rollback_to_version = 6;
}

// Rollback config response
message RollbackRuleConfigResponse {
  // rule config
  RuleConfig config = 1;
  // change request
  ChangeRequest change_request = 2;
}

// Delete checkpoint rule request
message DeleteCheckpointRuleRequest {
  // checkpoint name
  string checkpoint_name = 1;
  // rule name
  string rule_name = 2;
  // change
  ChangeRequest change_request = 3 [deprecated = true];
  // The user change information
  UserChange user_change = 4;
}

// Delete checkpoint rule response
message DeleteCheckpointRuleResponse {
  // rule config
  RuleConfig config = 1;
  // change request
  ChangeRequest change_request = 2;
}

// Delete fact spec request
message DeleteCheckpointFactSpecRequest {
  // checkpoint name
  string checkpoint_name = 1;
  // rule name
  string fact_name = 2;
  // change request
  ChangeRequest change_request = 3 [deprecated = true];
  // The user change information
  UserChange user_change = 4;
}

// Delete fact spec response
message DeleteCheckpointFactSpecResponse {
  // deleted fact specs
  CheckpointFactSpec fact_specs = 1;
  // change request
  ChangeRequest change_request = 2;
}

// ApproveConfigChangeRequest
message ApproveConfigChangeRequest {
  // change id
  string change_id = 1;
  // user Id
  string user_id = 2;
}

// ApproveConfigChangeResponse
message ApproveConfigChangeResponse {
  // change request
  ChangeRequest change_request = 1;
}

// LaunchConfigChangeRequest
message LaunchConfigChangeRequest {
  // change id
  string change_id = 1;
  // user Id
  string user_id = 2;
}

// LaunchConfigChangeResponse
message LaunchConfigChangeResponse {
  // change request
  ChangeRequest change_request = 1;
}

// StageConfigChangeRequest
message StageConfigChangeRequest {
  // change id
  string change_id = 1;
  // user Id
  string user_id = 2;
}

// StageConfigChangeResponse
message StageConfigChangeResponse {
  // change request
  ChangeRequest change_request = 1;
}

// RejectConfigChangeRequest
message RejectConfigChangeRequest {
  // change id
  string change_id = 1;
  // user Id
  string user_id = 2;
}

// UnstageConfigChangeRequest
message UnstageConfigChangeRequest {
  // change id
  string change_id = 1;
  // user Id
  string user_id = 2;
}

// UnstageConfigChangeResponse
message UnstageConfigChangeResponse {
  // change request
  ChangeRequest change_request = 1;
}

// RejectConfigChangeResponse
message RejectConfigChangeResponse {
  // change request
  ChangeRequest change_request = 1;
}

// pagination key for config changes
message ConfigChangePaginationKey {
  // time range - used as pagination keys
  google.protobuf.Timestamp before = 1;
}

// GetConfigChangesV2Request
message GetConfigChangesV2Request {
  // filter
  oneof filter {
    // user filter
    UserFilter user_filter = 1;
    // checkpoint filter
    CheckpointFilter checkpoint_filter = 2;
  }
  // time range [optional]
  // if not provided, all range of data will be returned in pages in reverse chronological order
  TimeRange time_range = 3;
  // pagination key
  ConfigChangePaginationKey pagination_key = 4;

  // time range
  message TimeRange {
    // should be the earliest timestamp (included)
    google.protobuf.Timestamp start_time = 11;
    // should be the latest timestamp (not included)
    google.protobuf.Timestamp end_time = 12;
  }

  // user filter
  message UserFilter {
    // user_id
    string user_id = 21;
  }

  // checkpoint filter
  message CheckpointFilter {
    // checkpoint name
    string checkpoint_name = 31;
  }
}

// GetConfigChangesV2Response
message GetConfigChangesV2Response {
  // config changes
  repeated ChangeRequest change_requests = 1;
  // next pagination key
  ConfigChangePaginationKey next_pagination_key = 2;
}

// GetConfigChangesRequest
message GetConfigChangesRequest {
  // user
  repeated string user_id = 1;
  // checkpoint names
  repeated string checkpoint_name = 2;
  // rule names
  repeated string rule_name = 3;
  // fact names
  repeated string fact_name = 4;
  // change states
  repeated ChangeState change_states = 5;
  // change ids
  repeated string change_id = 6;
  // category
  ConfigChangeCategory category = 7;
  // time range
  TimeRange time_range = 8;
  // next pagination key
  ConfigChangePaginationKey pagination_key = 9;

  // time range
  message TimeRange {
    // should be the earliest timestamp (included)
    google.protobuf.Timestamp start_time = 11;
    // should be the latest timestamp (not included)
    google.protobuf.Timestamp end_time = 12;
  }
}

// GetConfigChangesResponse
message GetConfigChangesResponse {
  // config changes
  repeated ChangeRequest change_requests = 1;
  // next pagination key
  ConfigChangePaginationKey next_pagination_key = 2;
}

// RefreshLatestCheckpointFactSpecRequest.
message RefreshLatestCheckpointFactSpecRequest {
  // checkpoint name
  string checkpoint_name = 1;
  // change request
  ChangeRequest change_request = 2 [deprecated = true];
  // version
  string version = 3;
  // The user change information
  UserChange user_change = 4;
}

// RefreshLatestCheckpointFactSpecResponse
message RefreshLatestCheckpointFactSpecResponse {
  // Fact specs
  repeated CheckpointFactSpec fact_specs = 1;
}

// GetActionListRequest
message GetActionListRequest {}

// GetActionListResponse for UI
message GetActionListResponse {
  // default instance of actions
  repeated Action actions = 1;
  // enum maps (deprecated)
  map<string, EnumMap> enum_map = 2 [deprecated = true];
  // enum maps
  map<string, EnumMapping> enum_maps = 3;

  // enum map
  message EnumMap {
    // name
    string name = 1;
    // value
    int32 value = 2;
  }

  // enum map name to value
  message EnumMapping {
    // enum map name to value
    map<string, int32> enum_map = 1;
  }
}

// GetCurrentCheckpointExecutionConfigsRequest
message GetCurrentCheckpointExecutionConfigsRequest {
  // checkpoint name
  string checkpoint_name = 1;
}

// GetCurrentCheckpointExecutionConfigsResponse
message GetCurrentCheckpointExecutionConfigsResponse {
  // checkpoint config, with decisions, config-extensions, ect
  CheckpointConfig checkpoint_config = 1;
  // all rule configs
  map<string, RuleConfig> all_rule_configs = 2;
  // all experiment configs
  map<string, ExperimentConfig> all_experiment_configs = 3;
}

// supported reducers for the evaluated action
enum ActionReducer {
  // unspecified
  ACTION_REDUCER_UNSPECIFIED = 0;
  // highest weight reducer
  ACTION_REDUCER_HIGHEST_WEIGHT = 1;
  // all distinct types sorted by weight
  ACTION_REDUCER_ALL_DISTINCT_TYPES_SORTED_BY_WEIGHT = 2;
}

// Represents the life cycle of a checkpoint
enum CheckpointLifeCycle {
  // The checkpoint lifecycle was not specified
  CHECKPOINT_LIFE_CYCLE_UNSPECIFIED = 0;
  // The checkpoint is in active development
  CHECKPOINT_LIFE_CYCLE_IN_DEVELOPMENT = 1;
  // The checkpoint is in production
  CHECKPOINT_LIFE_CYCLE_IN_PRODUCTION = 2;
  // The checkpoint has been archived and is no longer in production
  CHECKPOINT_LIFE_CYCLE_ARCHIVED = 3;
}

// Checkpoint config
message CheckpointConfig {
  // Checkpoint name
  string checkpoint_name = 1;
  // version
  string version = 2;
  // Checkpoint description
  string description = 3;
  // Launch config
  CheckpointLaunchConfig launch_config = 4;
  // state
  ConfigState state = 5;
  // Dimensions
  repeated CheckpointDimension checkpoint_dimensions = 6;
  // Shared Dimension Profiles
  repeated DimensionProfile checkpoint_dimension_profiles = 7;
  // Global Dimension Profiles
  repeated DimensionProfile global_dimension_profiles = 8;
  // action reducer
  ActionReducer action_reducer = 9;
  // The decisions that may be made by the checkpoint. Not every decision may be in use by live rules.
  repeated Decision decisions = 10;
  // The experiments can be used in rule expression for bucketing logic
  repeated Experiment experiments = 11;
  // The life cycle of the checkpoint
  CheckpointLifeCycle life_cycle = 12;
}

// CheckpointLaunchConfig
message CheckpointLaunchConfig {
  // kill switch
  bool kill_switch_on = 1;
  // enabled
  Toggle enabled = 2;
  // enabled
  Toggle live = 3;
  // timeout
  int64 timeout_millis = 4;
  // rules config
  map<string, RuleLaunchConfig> rules = 5;
  // Config extensions
  map<string, google.protobuf.Value> config_extensions = 6;
  // Actions
  repeated Action actions = 7 [deprecated = true];
  // Circuit Breaker Configuration
  CheckpointCircuitBreakerConfig circuit_breaker_config = 8;
}

// Checkpoint Circuit Breaker Configuration
message CheckpointCircuitBreakerConfig {
  // Whether the circuit breaker is enabled in the checkpoint.
  bool enabled = 1;
  // If dry run mode is disabled, the circuit breaker will replace included actions when the circuit breaker is open.
  bool dry_run_disabled = 2;
  // Error rate required to open the circuit breaker. Must be between 0 and 100.
  float failure_rate_threshold = 3;
}

// Checkpoint and change config
message CheckpointAndChangeConfig {
  // checkpoint name
  string checkpoint_name = 1;
  // checkpoint config
  CheckpointConfig checkpoint_config = 2;
  // change config
  ChangeRequest change_config = 3;
}

// Rule Config
message RuleLaunchConfig {
  // name
  string rule_name = 1;
  // enabled
  Toggle enabled = 2;
  // live
  Toggle live = 3;
  // current version
  string current_version = 4;
  // checkpoint name
  string checkpoint_name = 5;
}

// The decision made by a rule. Rules can only make one decision.
message RuleDecision {
  // The reference to the decision's unique name.
  string decision_name = 1;
  // Type of the decision. Currently only action and label decisions are allowed.
  DecisionType decision_type = 2;
  // reason why this rule decision is taken
  string reason = 3;
}

// A dependency between a rule and another checkpoint entity.
message RuleDependency {
  // Reference to the dependency. Either a unique name or uuid.
  string dependency_reference = 1;
  // The type of the dependency. one of (dimension profile, fact, label)
  EntityType dependency_type = 2;
}

// Rule config
message RuleConfig {
  // Checkpoint name
  string checkpoint_name = 1;
  // Rule name
  string rule_name = 2;
  // Version
  string version = 3;
  // Fact Dependencies
  repeated string facts = 4 [deprecated = true];
  // Rule Dependencies
  repeated string rules = 5 [deprecated = true];
  // Expression
  string expression = 6;
  // rule outputs
  repeated RuleOutput outputs = 7 [deprecated = true];
  // state
  ConfigState state = 8;
  // rule dimension_profile_uuids are a list of DimensionProfile ids
  repeated string dimension_profile_uuids = 9 [deprecated = true];
  // rule launch config
  RuleLaunchConfig launch_config = 10;
  // the rule decision
  RuleDecision decision = 11;
  // rule dependencies
  repeated RuleDependency dependencies = 12;
  // the rule description
  string description = 13;
  // dimension profiles
  repeated ModifiedDimensionProfile dimension_profiles = 14;
}

// Rule and change config
message RuleAndChangeConfig {
  // rule name
  string rule_name = 1;
  // rule config
  RuleConfig rule_config = 2;
  // change config
  ChangeRequest change_config = 3;
}

// Rule output
message RuleOutput {
  // output type
  OutputType output_type = 1;
  // value
  string value = 2;
  // weight
  string weight = 3;

  // map of customrized properties such as reason <> "block reason"
  map<string, string> properties = 4;
}

// Checkpoint fact spec
message CheckpointFactSpec {
  // Fact name
  string name = 1;
  // Fact type, object, bool, etc
  string type = 2;
  // timeout
  int64 timeout_millis = 3;
  // fields
  repeated FactSpecField fields = 4;
  // description
  string description = 5;
  // version
  string version = 6;
  // is locally updated
  bool is_locally_updated = 7;
  // sample value
  repeated string sample_values = 8;
  // categories
  repeated Category categories = 9;
}

// Category
enum Category {
  // unspecified
  CATEGORY_UNSPECIFIED = 0;
}

// Fact spec field
message FactSpecField {
  // name
  string name = 1;
  // type
  string type = 2;
  // timeout
  int64 timeout_millis = 4;
  // description
  string description = 5;
}

// Toggle
message Toggle {
  // Percentage
  message Percentage {
    // percent
    double percent = 1;
  }

  // Switch
  message Switch {
    // enable
    bool enabled = 1;
  }

  // Experiment
  message ExperimentBucket {
    // name
    string name = 1;
    // bucket
    string bucket_key = 2;
    // default
    string default = 3;
    // distribution
    string distribution = 4;
    // fact name
    string fact_name = 5;
  }

  // Dynamic value
  message DynamicValue {
    // dv name
    string name = 1;
    // bucket
    string bucket = 2;
  }

  // Value one of
  oneof value {
    // Percentage
    Percentage percent = 1;
    // Switch
    Switch switch = 2;
    // Experiment
    ExperimentBucket experiment = 3;
    // Dynamic value
    DynamicValue dynamic_value = 4;
  }
}
