syntax = "proto3";
package risk_core.v1.services.v1;

import "doordash.api/annotations.proto";
import "google/api/annotations.proto";
import "risk-core/backtest.proto";
import "risk-core/configuration.proto";

option java_multiple_files = true;
option java_package = "com.doordash.rpc.risk_core.services";

// Service for backtests of checkpoint configuration.
service BacktestService {
  option (doordash.api.service) = {
    name: "back-test-service"
    url: "back-test-service.service.prod.ddsd"
    port: 50051
    name_spaces: ["fraud"]
    owner: {
      name: "fraud-platform"
      id: "fraud-platform"
      slack_channel: "#ask-fraud-platform"
      email_alias: "team-fraud@doordash.com"
    }
    target_products: [INTERNAL]
  };

  // Create a backtest.
  rpc CreateBacktest(CreateBacktestRequest) returns (CreateBacktestResponse) {
    option (google.api.http) = {get: "/fraud/v1/backtest/create"};
    option (doordash.api.endpoint) = {
      tier: T3
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      role_based_authorization: {
        mode: ANY,
        roles: ["SECURITY-RAVEN-MANAGED-AUTHORIZATION"]
      }
      target_products: [INTERNAL]
    };
  }
  // Get information about a backtest.
  rpc GetBacktest(GetBacktestRequest) returns (GetBacktestResponse) {
    option (google.api.http) = {get: "/fraud/v1/backtest/get"};
    option (doordash.api.endpoint) = {
      tier: T3
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      role_based_authorization: {
        mode: ANY,
        roles: ["SECURITY-RAVEN-MANAGED-AUTHORIZATION"]
      }
      target_products: [INTERNAL]
    };
  }
  // Cancel a backtest. If the backtest is already finished, this has no effect.
  rpc CancelBacktest(CancelBacktestRequest) returns (CancelBacktestResponse) {
    option (google.api.http) = {get: "/fraud/v1/backtest/cancel"};
    option (doordash.api.endpoint) = {
      tier: T3
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      role_based_authorization: {
        mode: ANY,
        roles: ["SECURITY-RAVEN-MANAGED-AUTHORIZATION"]
      }
      target_products: [INTERNAL]
    };
  }
  // Called by metrics job to signal that metrics have been computed for a backtest.
  rpc ReportMetrics(ReportMetricsRequest) returns (ReportMetricsResponse) {
    option (google.api.http) = {get: "/fraud/v1/backtest/report-metrics"};
    option (doordash.api.endpoint) = {
      tier: T3
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      role_based_authorization: {
        mode: ANY,
        roles: ["SECURITY-RAVEN-MANAGED-AUTHORIZATION"]
      }
      target_products: [INTERNAL]
    };
  }
  // List back tests. If no filters are specified, all back tests are returned.
  rpc ListBacktests(ListBacktestsRequest) returns (ListBacktestsResponse) {
    option (google.api.http) = {get: "/fraud/v1/backtest/list"};
    option (doordash.api.endpoint) = {
      tier: T3
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      role_based_authorization: {
        mode: ANY,
        roles: ["SECURITY-RAVEN-MANAGED-AUTHORIZATION"]
      }
      target_products: [INTERNAL]
    };
  }
}

// Request to create a backtest.
message CreateBacktestRequest {
  // UUID identifying the backtest.
  string backtest_id = 1;
  // One or more configurations. All must be for the same checkpoint. Each configuration will be evaluated
  // separately against the selected historical data.
  repeated ConfigurationReference configurations = 2;
  // Criteria for selecting historical data.
  HistoricalDataCriteria historical_data_criteria = 3;
}

// Response to a request to create a backtest.
message CreateBacktestResponse {
  // The backtest that was created.
  Backtest backtest = 1;
}

// Request to retrieve a backtest.
message GetBacktestRequest {
  // UUID identifying the backtest. Required.
  string backtest_id = 1;
  // Whether to include configuration. Defaults to false.
  bool include_configuration = 2;
}

// Response containing requested information about a backtest.
message GetBacktestResponse {
  // The backtest that was requested.
  Backtest backtest = 1;
}

// Request to retrieve a backtest.
message ListBacktestsRequest {
  // Filter for backtests, will return all backtests if not specified.
  ListBacktestFilter filter = 1;
  // page number
  int32 page_num = 2;
  // page size
  int32 page_size = 3;
}

// Response containing requested information about a backtest.
message ListBacktestsResponse {
  // List of backtests found
  repeated Backtest backtest = 1;
  // page number
  int32 page_num = 2;
  // page size
  int32 page_size = 3;
  // total page count
  int32 total_pages_count = 4;
}

// Request to cancel a backtest.
message CancelBacktestRequest {
  // UUID identifying the backtest.
  string backtest_id = 1;
}

// Response to request to cancel a backtest.
message CancelBacktestResponse {}

// Request reporting that metrics computation is complete for a backtest.
message ReportMetricsRequest {
  // UUID identifying the backtest.
  string backtest_id = 1;
  // Metrics
  BacktestMetrics metrics = 2;
}

// Response to request reporting that metrics computation is complete for a backtest.
message ReportMetricsResponse {}
