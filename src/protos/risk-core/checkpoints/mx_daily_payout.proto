syntax = "proto3";
package risk_core.v1.checkpoints.v1;

import "common/service_client_config.proto";
import "risk-core/cart.proto";
import "risk-core/checkpoint_response.proto";
import "risk-core/context.proto";
import "risk-core/services_common.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_outer_classname = "MxDailyPayoutProtos";
option java_package = "com.doordash.rpc.risk_core.checkpoints";

/**
 * Runs to check if a daily payout needs to be blocked or not.
 */
service MxDailyPayoutService {
  // Timeout applied per attempt
  option (service_client.client_config).response_attempt_timeout_millis = 2000;
  // The maximum number of attempts. 1 means no retries.
  option (service_client.client_config).retry_config.max_attempts = 1;
  // The set of status codes on which to retry.
  option (service_client.client_config).retry_config.do_retry_grpc_code = 8;
  // The failure rate threshold for the circuit breaker.
  option (service_client.client_config).circuit_breaker_config.failure_rate_threshold = 0.8;
  // Status codes to ignore from the circuit breaker
  option (service_client.client_config).circuit_breaker_config.do_ignore_grpc_code = 5;

  // Evaluate the checkpoint.
  rpc Evaluate(MxDailyPayoutServiceEvaluateRequest) returns (MxDailyPayoutServiceEvaluateResponse);
}

// Evaluate response
message MxDailyPayoutServiceEvaluateResponse {
  // The checkpoint response
  CheckpointResponse checkpoint_response = 1;
}

// Evaluate request
message MxDailyPayoutServiceEvaluateRequest {
  // The risk context
  RiskContext risk_context = 1;

  // The store id
  StoreId store_id = 2;
}
