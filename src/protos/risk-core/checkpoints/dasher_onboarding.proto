syntax = "proto3";

package risk_core.v1.checkpoints.v1;

import "common/service_client_config.proto";
import "risk-core/account.proto";
import "risk-core/checkpoint_response.proto";
import "risk-core/context.proto";
import "risk-core/services_common.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_outer_classname = "DasherOnboardingProtos";
option java_package = "com.doordash.rpc.risk_core.checkpoints";

/**
   Trust and safety checkpoint called during the dasher onboarding process to determine if this person is
   allowed to proceed with the signup.
*/
service DasherOnboardingService {
  // Example Hermes client config. The options not listed here use Hermes default.
  // The following applies for all RPCs in the service, if not overridden on individual RPCs.

  // Timeout after 5000 milliseconds.
  option (service_client.client_config).response_attempt_timeout_millis = 5000;
  // Make a total 2 attempts (initial + one retries).
  option (service_client.client_config).retry_config.max_attempts = 2;
  // Add RESOURCE_EXHAUSTED to the set of retriable codes.
  option (service_client.client_config).retry_config.do_retry_grpc_code = 8;
  // Break the circuit if the error rate exceeds 80%.
  option (service_client.client_config).circuit_breaker_config.failure_rate_threshold = 0.8;
  // Ignore NOT_FOUND from circuit breaker error rate calculation.
  option (service_client.client_config).circuit_breaker_config.do_ignore_grpc_code = 5;

  // Evaluate the dasher onboarding request
  rpc Evaluate(DasherOnboardingServiceEvaluateRequest) returns (DasherOnboardingServiceEvaluateResponse);
}

/**
   Request object for DasherOnboarding
*/
message DasherOnboardingServiceEvaluateRequest {
  // unique identifier for this request
  RequestId request_id = 1;

  // risk context
  RiskContext risk_context = 2;

  // dasher applicant id
  string dasher_applicant_id = 3;

  // user going through dasher onboarding
  User user = 4;

  // current dasher onboarding step
  OnboardingStep onboarding_step = 5;

  /**
     Dasher onboarding steps
  */
  enum OnboardingStep {
    // unknown
    ONBOARDING_STEP_UNKNOWN_UNSPECIFIED = 0;

    // identity verification
    ONBOARDING_STEP_IDENTITY_VERIFICATION = 1;

    // background check
    ONBOARDING_STEP_BACKGROUND_CHECK = 2;
  }

  // onboarding request
  oneof request {
    // identity verification
    IdentityVerification identity_verification = 6;

    // background check
    BackgroundCheck background_check = 9;
  }

  // caller details
  CallerDetails caller = 7;

  // unique link
  string unique_link = 8;
}

/**
   Response object for DxOnboarding
*/
message DasherOnboardingServiceEvaluateResponse {
  // CheckpointResponse
  CheckpointResponse checkpoint_response = 1;
}

/**
   Identity verification step
*/
message IdentityVerification {
  // inquiry id
  string inquiry_id = 1;

  // event type
  EventType event_type = 2;

  /**
     Types of identity verification events
  */
  enum EventType {
    // unknown
    EVENT_TYPE_UNKNOWN_UNSPECIFIED = 0;

    // start
    EVENT_TYPE_START = 1;

    // complete
    EVENT_TYPE_COMPLETE = 2;

    // fail
    EVENT_TYPE_FAIL = 3;

    // exit
    EVENT_TYPE_EXIT = 4;
  }
}

/**
   Background check step
*/
message BackgroundCheck {
  // SSN hash
  string ssn_hash = 1;
}
