syntax = "proto3";

package risk_core.v1.checkpoints.v1;

import "common/service_client_config.proto";
import "google/protobuf/timestamp.proto";
import "merchant_data_service_store_service/events/common.proto";
import "merchant_data_service_store_service/events/store_update.proto";
import "merchant_data_service_store_service/store.proto";
import "risk-core/checkpoint_response.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_outer_classname = "MxInfoChangeProtos";
option java_package = "com.doordash.rpc.risk_core.checkpoints";

/**
   Fraud checkpoint called when a store's info is updated
*/
service MxInfoChangeService {
  // Timeout after 2000 milliseconds.
  option (service_client.client_config).response_attempt_timeout_millis = 2000;
  // 1 retry
  option (service_client.client_config).retry_config.max_attempts = 2;
  // Add RESOURCE_EXHAUSTED to the set of retriable codes.
  option (service_client.client_config).retry_config.do_retry_grpc_code = 8;
  // Break the circuit if the error rate exceeds 80%.
  option (service_client.client_config).circuit_breaker_config.failure_rate_threshold = 0.8;
  // Ignore NOT_FOUND from circuit breaker error rate calculation.
  option (service_client.client_config).circuit_breaker_config.do_ignore_grpc_code = 5;

  // evaluate the mx info change request
  rpc Evaluate(MxInfoChangeServiceEvaluateRequest) returns (MxInfoChangeServiceEvaluateResponse);
}

/**
   Request object for MxInfoChange
*/
message MxInfoChangeServiceEvaluateRequest {
  // updated store
  store_service.Store updated_store = 1;

  // list of updated fields in store
  repeated store_service_event.v1.UpdateField updated_fields = 2;

  // timestamp
  google.protobuf.Timestamp created_at = 3;

  // updater info
  store_service_event.v1.Actor actor = 4;
}

/**
   Response object for MxInfoChange
*/
message MxInfoChangeServiceEvaluateResponse {
  // The checkpoint response
  CheckpointResponse checkpoint_response = 1;
}
