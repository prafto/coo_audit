syntax = "proto3";
package risk_core.v1.checkpoints.v1;

import "common/service_client_config.proto";
import "risk-core/account.proto";
import "risk-core/checkpoint_response.proto";
import "risk-core/checkpoints/order_problem.proto";
import "risk-core/common.proto";
import "risk-core/context.proto";
import "risk-core/fulfillment.proto";
import "risk-core/services_common.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_outer_classname = "CnrFalsePositiveReviewQueueProto";
option java_package = "com.doordash.rpc.risk_core.checkpoints";

/**
 * Checkpoint that is called by False Positive Queue to decide whether to put a delivery into Review Queue
 */
service CnrFalsePositiveReviewQueueService {
  // Timeout applied per attempt
  option (service_client.client_config).response_attempt_timeout_millis = 5000;
  // The maximum number of attempts. 1 means no retries.
  option (service_client.client_config).retry_config.max_attempts = 1;
  // The set of status codes on which to retry.
  option (service_client.client_config).retry_config.do_retry_grpc_code = 8;
  // The failure rate threshold for the circuit breaker.
  option (service_client.client_config).circuit_breaker_config.failure_rate_threshold = 0.8;
  // Status codes to ignore from the circuit breaker
  option (service_client.client_config).circuit_breaker_config.do_ignore_grpc_code = 5;

  // Evaluate the checkpoint.
  rpc Evaluate(CnrFalsePositiveReviewQueueServiceEvaluateRequest) returns (CnrFalsePositiveReviewQueueServiceEvaluateResponse);
}

// Evaluate response
message CnrFalsePositiveReviewQueueServiceEvaluateResponse {
  // The checkpoint response
  CheckpointResponse checkpoint_response = 1;
}

// Evaluate request
message CnrFalsePositiveReviewQueueServiceEvaluateRequest {
  // This will be used for routing to related checkpoint
  enum Purpose {
    // Unspecified purpose
    PURPOSE_UNSPECIFIED = 0;
    // Add cases into FPRQ
    PURPOSE_INSERT = 1;
    // Check if delivery is eligible for the second review
    PURPOSE_ELIGIBILITY_CHECK = 2;
  }

  // Consumer ID
  ConsumerId consumer_id = 1;

  // Delivery ID
  DeliveryId delivery_id = 2;

  // User ID of the consumer
  UserId cx_user_id = 3;

  // User ID of the agent
  UserId agent_user_id = 4;

  // Risk context
  RiskContext risk_context = 5;

  // Purpose of the request
  Purpose purpose = 6;

  // The item problems
  repeated ItemProblem item_problems = 7;

  // The type of order problem
  string order_problem_type = 8;

  // Whether or not to skip capacity checks
  bool skip_capacity = 9;

  // Description
  string description = 10;
}
