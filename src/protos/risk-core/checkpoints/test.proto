syntax = "proto3";
package risk_core.v1.checkpoints.v1;

import "risk-core/context.proto";
import "risk-core/checkpoint_response.proto";
import "risk-core/services_common.proto";
import "common/service_client_config.proto";

option java_package = "com.doordash.rpc.risk_core.checkpoints";
option java_outer_classname = "TestProtos";
option java_multiple_files = true;
option java_generic_services = true;

// TestService
service TestService {
  // Example Hermes client config. The options not listed here use Hermes default.
  // The following applies for all RPCs in the service, if not overridden on individual RPCs.

  // Timeout after 700 milliseconds.
  option (service_client.client_config).response_attempt_timeout_millis = 700;
  // Make a total 2 attempts (initial + one retries).
  option (service_client.client_config).retry_config.max_attempts = 2;
  // Add RESOURCE_EXHAUSTED to the set of retriable codes.
  option (service_client.client_config).retry_config.do_retry_grpc_code = 8;
  // Break the circuit if the error rate exceeds 80%.
  option (service_client.client_config).circuit_breaker_config.failure_rate_threshold = 0.8;
  // Ignore NOT_FOUND from circuit breaker error rate calculation.
  option (service_client.client_config).circuit_breaker_config.do_ignore_grpc_code = 5;

  // Evaluate
  rpc Evaluate (TestServiceEvaluateRequest) returns (TestServiceEvaluateResponse);
}

// TestRequest
message TestServiceEvaluateRequest {
  // request_id
  RequestId request_id = 1;
  // risk_context
  RiskContext risk_context = 2;
}

// TestServiceEvaluateResponse
message TestServiceEvaluateResponse {
  // CheckpointResponse
  CheckpointResponse checkpoint_response = 1;
}
