syntax = "proto3";
package risk_core.v1.checkpoints.v1;

import "common/service_client_config.proto";
import "risk-core/account.proto";
import "risk-core/cart.proto";
import "risk-core/checkpoint_response.proto";
import "risk-core/common.proto";
import "risk-core/context.proto";
import "risk-core/fulfillment.proto";
import "risk-core/services_common.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_outer_classname = "OrderProblemProtos";
option java_package = "com.doordash.rpc.risk_core.checkpoints";

// Runs during any pending C&R issuance and determines whether or not the consumer will experience friction.
service OrderProblemService {
  // Example Hermes client config. The options not listed here use Hermes default.
  // The following applies for all RPCs in the service, if not overridden on individual RPCs.

  // Timeout after 2500 milliseconds.
  option (service_client.client_config).response_attempt_timeout_millis = 2500;
  // No retires.
  option (service_client.client_config).retry_config.max_attempts = 1;
  // Add RESOURCE_EXHAUSTED to the set of retriable codes.
  option (service_client.client_config).retry_config.do_retry_grpc_code = 8;
  // Break the circuit if the error rate exceeds 80%.
  option (service_client.client_config).circuit_breaker_config.failure_rate_threshold = 0.8;
  // Ignore NOT_FOUND from circuit breaker error rate calculation.
  option (service_client.client_config).circuit_breaker_config.do_ignore_grpc_code = 5;

  // Evaluated
  rpc Evaluate(OrderProblemServiceEvaluateRequest) returns (OrderProblemServiceEvaluateResponse);
}

// OrderProblemServiceEvaluateRequest
message OrderProblemServiceEvaluateRequest {
  // RiskContext
  RiskContext risk_context = 1;
  // UserId
  UserId user_id = 2;
  // DeliveryId
  DeliveryId delivery_id = 3;
  // SessionId
  SessionId session_id = 4;
  // RequestContext
  RequestContext request_context = 5;
  // RequestCredits
  MonetaryAmount request_credits = 6;
  // RequestRefunds
  MonetaryAmount request_refunds = 7;
  // DeliveryCostNoTip
  MonetaryAmount delivery_cost_no_tip = 8;
  // OrderProblemTypes
  repeated string order_problem_types = 9;
  // RequestingAgentId
  UserId requesting_agent_id = 10;
  // OrderResolutionUuid
  // for holding tank, we need to know which order_resolution this maps to
  string order_resolution_uuid = 11;
  // ExtraTrackingProps
  map<string, string> extra_tracking_props = 12;
  // ItemProblem
  repeated ItemProblem item_problems = 13;

  // RequestContext
  enum RequestContext {
    // Unspecified
    REQUEST_CONTEXT_UNSPECIFIED = 0;
    // Self Help
    REQUEST_CONTEXT_SELF_HELP = 1;
    // Support Agent
    REQUEST_CONTEXT_SUPPORT_AGENT = 2;
  }
}

// OrderProblemServiceEvaluateResponse
message OrderProblemServiceEvaluateResponse {
  // CheckpointResponse
  CheckpointResponse checkpoint_response = 1;
}
