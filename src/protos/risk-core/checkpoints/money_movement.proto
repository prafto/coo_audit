syntax = "proto3";
package risk_core.v1.checkpoints.v1;

import "common/service_client_config.proto";
import "risk-core/checkpoint_response.proto";
import "risk-core/context.proto";
import "risk-core/services_common.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_outer_classname = "MoneyMovementProtos";
option java_package = "com.doordash.rpc.risk_core.checkpoints";

// MxSSCOOSubmissionService
service MoneyMovementService {
  // service with hermes configuration
  // Timeout after 2000 milliseconds.
  option (service_client.client_config).response_attempt_timeout_millis = 2000;
  // The maximum number of attempts. 1 means no retries.
  option (service_client.client_config).retry_config.max_attempts = 1;
  // Add RESOURCE_EXHAUSTED to the set of retriable codes.
  option (service_client.client_config).retry_config.do_retry_grpc_code = 8;
  // Break the circuit if the error rate exceeds 80%.
  option (service_client.client_config).circuit_breaker_config.failure_rate_threshold = 0.8;
  // Ignore NOT_FOUND from circuit breaker error rate calculation.
  option (service_client.client_config).circuit_breaker_config.do_ignore_grpc_code = 5;

  // Evaluate the checkpoint.
  rpc Evaluate(MoneyMovementServiceEvaluateRequest) returns (MoneyMovementServiceEvaluateResponse);
}

// Evaluate request
message MoneyMovementServiceEvaluateRequest {
  // Defines the criteria to retrieve the details of a specific money movement
  message MovementDetails {
    // Various identifiers to fetch the movement details
    oneof movement_key {
      // Lookup by fingerprint associated with the payment account
      string external_account_fingerprint = 1;
    }
  }
  // Lookup the info based on the provided criteria
  MovementDetails lookup_key = 1;
}

// Evaluate response
message MoneyMovementServiceEvaluateResponse {
  // CheckpointResponse
  CheckpointResponse checkpoint_response = 1;
}
