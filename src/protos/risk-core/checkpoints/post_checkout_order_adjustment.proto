syntax = "proto3";
package risk_core.v1.checkpoints.v1;

import "common/order.proto";
import "common/service_client_config.proto";
import "order/consumer_order.proto";
import "risk-core/account.proto";
import "risk-core/cart.proto";
import "risk-core/checkpoint_response.proto";
import "risk-core/common.proto";
import "risk-core/context.proto";
import "risk-core/payment.proto";
import "risk-core/services_common.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_outer_classname = "PostCheckoutOrderAdjustmentProtos";
option java_package = "com.doordash.rpc.risk_core.checkpoints";

/*
   Fraud checkpoint when consumer adjust an order after checkout.
*/
service PostCheckoutOrderAdjustmentService {
  // Example Hermes client config. The options not listed here use Hermes default.
  // The following applies for all RPCs in the service, if not overridden on individual RPCs.

  // Timeout after 2000 milliseconds.
  option (service_client.client_config).response_attempt_timeout_millis = 2000;
  // No retires.
  option (service_client.client_config).retry_config.max_attempts = 1;
  // Add RESOURCE_EXHAUSTED to the set of retriable codes.
  option (service_client.client_config).retry_config.do_retry_grpc_code = 8;
  // Break the circuit if the error rate exceeds 80%.
  option (service_client.client_config).circuit_breaker_config.failure_rate_threshold = 0.8;
  // Ignore NOT_FOUND from circuit breaker error rate calculation.
  option (service_client.client_config).circuit_breaker_config.do_ignore_grpc_code = 5;

  // Evaluate
  rpc Evaluate(PostCheckoutOrderAdjustmentServiceEvaluateRequest) returns (PostCheckoutOrderAdjustmentServiceEvaluateResponse);
}

/*
   PostCheckoutOrderAdjustment Service Evaluation Request
*/
message PostCheckoutOrderAdjustmentServiceEvaluateRequest {
  // request id
  RequestId request_id = 1;
  // risk context
  RiskContext risk_context = 2;
  // session id
  SessionId session_id = 3;
  // user id
  UserId user_id = 4;
  // cart
  Cart cart = 5;
  //This will hold the original order values
  Order order = 6;
  // order adjustmnet info
  RiskOrderAdjustmentInfo order_adjustment_info = 7;
}

/*
   PostCheckoutOrderAdjustment Service Evaluation Response
*/
message PostCheckoutOrderAdjustmentServiceEvaluateResponse {
  // CheckpointResponse
  CheckpointResponse checkpoint_response = 1;
}

/*
   Risk order adjustment info
   This can be extended as needed
*/
message RiskOrderAdjustmentInfo {
  // order adjustment source
  order.OrderAdjustmentSource order_adjustment_source = 1;
  // order adjustment type
  order_service.OrderAdjustmentType order_adjustment_type = 2;
  // adjusted delivery address
  Address delivery_address = 3;
  // Updated dasher tip
  MonetaryAmount dasher_tip = 4;
  // Updated subtotal
  MonetaryAmount subtotal = 5;
}
