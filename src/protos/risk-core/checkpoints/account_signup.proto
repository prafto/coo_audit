syntax = "proto3";
package risk_core.v1.checkpoints.v1;

import "common/service_client_config.proto";
import "google/protobuf/timestamp.proto";
import "risk-core/account.proto";
import "risk-core/checkpoint_response.proto";
import "risk-core/common.proto";
import "risk-core/context.proto";
import "risk-core/services_common.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_outer_classname = "AccountSignupProtos";
option java_package = "com.doordash.rpc.risk_core.checkpoints";

// AccountSignupService
service AccountSignupService {
  // service with hermes configuration

  // Timeout after 2000 milliseconds.
  option (service_client.client_config).response_attempt_timeout_millis = 2000;
  // Make a total 2 attempts (initial + one retries).
  option (service_client.client_config).retry_config.max_attempts = 2;
  // Add RESOURCE_EXHAUSTED to the set of retriable codes.
  option (service_client.client_config).retry_config.do_retry_grpc_code = 8;
  // Break the circuit if the error rate exceeds 80%.
  option (service_client.client_config).circuit_breaker_config.failure_rate_threshold = 0.8;
  // Ignore NOT_FOUND from circuit breaker error rate calculation.
  option (service_client.client_config).circuit_breaker_config.do_ignore_grpc_code = 5;

  // Evaluate
  rpc Evaluate(AccountSignupServiceEvaluateRequest) returns (AccountSignupServiceEvaluateResponse);
}

// AccountSignupServiceEvaluateRequest
message AccountSignupServiceEvaluateRequest {
  // Unique identifier for this request
  RequestId request_id = 1;
  // risk_context
  RiskContext risk_context = 2;
  // caller fields
  CallerDetails caller = 3;
  // timestamp info
  Timestamp timestamp = 4;
  // The user signing up
  User user = 5;
  // The phone number used to sign up
  PhoneNumber phone_number = 6;
  // The referral used when signing up
  Referral referral = 7;
  // Social sign on information
  SocialSignOn social_sign_on = 8;
  // The platform used to sign up
  Platform submit_platform = 9;
  // client_id
  string client_id = 10;
  // MFA channel verified
  VerifiedMfaChannel verified_mfa_channel = 11;
}

// AccountSignupServiceEvaluateResponse
message AccountSignupServiceEvaluateResponse {
  // CheckpointResponse
  CheckpointResponse checkpoint_response = 1;
}
