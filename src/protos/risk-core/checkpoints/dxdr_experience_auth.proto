syntax = "proto3";
package risk_core.v1.checkpoints.v1;

import "common/service_client_config.proto";
import "risk-core/account.proto";
import "risk-core/checkpoint_response.proto";
import "risk-core/common.proto";
import "risk-core/context.proto";
import "risk-core/dasher.proto";
import "risk-core/payment.proto";
import "risk-core/payout_common.proto";
import "risk-core/services_common.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_outer_classname = "DxDrExperienceAuthProtos";
option java_package = "com.doordash.rpc.risk_core.checkpoints";

/**
 * Triggered when DxDr experience authentication process needs to evaluate
 * fraud risk
 */
service DxDrExperienceAuthService {
  // Timeout applied per attempt
  option (service_client.client_config).response_attempt_timeout_millis = 2000;
  // The maximum number of attempts. 1 means no retries.
  option (service_client.client_config).retry_config.max_attempts = 1;
  // The set of status codes on which to retry.
  option (service_client.client_config).retry_config.do_retry_grpc_code = 8;
  // The failure rate threshold for the circuit breaker.
  option (service_client.client_config).circuit_breaker_config.failure_rate_threshold = 0.8;
  // Status codes to ignore from the circuit breaker
  option (service_client.client_config).circuit_breaker_config.do_ignore_grpc_code = 5;

  // Evaluate the checkpoint.
  rpc Evaluate(DxDrExperienceAuthServiceEvaluateRequest) returns (DxDrExperienceAuthServiceEvaluateResponse);
}

// Evaluate response
message DxDrExperienceAuthServiceEvaluateResponse {
  // The checkpoint response
  CheckpointResponse checkpoint_response = 1;
}

// Evaluate request
message DxDrExperienceAuthServiceEvaluateRequest {
  // The risk context
  RiskContext risk_context = 1;

  reserved 2;
  reserved "lifetime_num_deliveries_made";

  reserved 3;
  reserved "is_active";

  reserved 4;
  reserved "status";

  // Unique link of the dasher applicant
  string applicant_unique_link = 5;

  // Persona identity verification inquiry id
  string identity_verification_inquiry_id = 6;

  // Session id associated with the request
  SessionId session_id = 7;

  // Payout method associated with the money movement
  oneof payout_method {
    // Bank account
    BankAccount bank_account = 8;

    // Card
    Card card = 9;
  }

  // Current experience type
  DxDrExperienceType type = 10;

  // If the request comes from challenge success auto submit
  bool is_challenge_success_auto_submit = 11;
}

// DxDr experience type
enum DxDrExperienceType {
  // unknown
  DX_DR_EXPERIENCE_TYPE_UNSPECIFIED = 0;

  // Re-issue card
  DX_DR_EXPERIENCE_TYPE_RE_ISSUE_CARD = 1;

  // Update PIN
  DX_DR_EXPERIENCE_TYPE_UPDATE_PIN = 2;

  // Activate card
  DX_DR_EXPERIENCE_TYPE_ACTIVATE_CARD = 3;

  // Transfer funds
  DX_DR_EXPERIENCE_TYPE_TRANSFER_FUNDS = 4;

  // Cancel transfer funds
  DX_DR_EXPERIENCE_TYPE_CANCEL_TRANSFER_FUNDS = 5;

  // Viewing card details
  DX_DR_EXPERIENCE_TYPE_VIEWING_CARD_DETAILS = 6;

  // Lock/Unlock card
  DX_DR_EXPERIENCE_TYPE_LOCK_UNLOCK_CARD = 7;

  // Access account information
  DX_DR_EXPERIENCE_TYPE_ACCESS_ACCOUNT_INFO = 8;
}
