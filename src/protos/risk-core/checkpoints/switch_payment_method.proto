syntax = "proto3";
package risk_core.v1.checkpoints.v1;

import "common/service_client_config.proto";
import "risk-core/account.proto";
import "risk-core/checkpoint_response.proto";
import "risk-core/common.proto";
import "risk-core/context.proto";
import "risk-core/payment.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_outer_classname = "SwitchPaymentMethodProtos";
option java_package = "com.doordash.rpc.risk_core.checkpoints";

/*
   Fraud checkpoint when consumer decides to switch their payment method after checking out.
*/
service SwitchPaymentMethodService {
  // Example Hermes client config. The options not listed here use Hermes default.
  // The following applies for all RPCs in the service, if not overridden on individual RPCs.

  // Timeout after 2000 milliseconds.
  option (service_client.client_config).response_attempt_timeout_millis = 2000;
  // No retires.
  option (service_client.client_config).retry_config.max_attempts = 1;
  // Add RESOURCE_EXHAUSTED to the set of retriable codes.
  option (service_client.client_config).retry_config.do_retry_grpc_code = 8;
  // Break the circuit if the error rate exceeds 80%.
  option (service_client.client_config).circuit_breaker_config.failure_rate_threshold = 0.8;
  // Ignore NOT_FOUND from circuit breaker error rate calculation.
  option (service_client.client_config).circuit_breaker_config.do_ignore_grpc_code = 5;

  // Evaluate
  rpc Evaluate(SwitchPaymentMethodServiceEvaluateRequest) returns (SwitchPaymentMethodServiceEvaluateResponse);
}

/*
   SwitchPaymentMethod Service Evaluation Request
*/
message SwitchPaymentMethodServiceEvaluateRequest {
  // UUID of the order that is having payment method switched
  string order_uuid = 1;
  // RiskContext
  RiskContext risk_context = 2;
  // List of payment intents to update the order to
  repeated PaymentIntent updated_payment_intents = 3;
  // Consumer Id
  ConsumerId consumer_id = 4;
  // User Id
  UserId user_id = 5;
}

/*
   SwitchPaymentMethod Service Evaluation Response
*/
message SwitchPaymentMethodServiceEvaluateResponse {
  // CheckpointResponse
  CheckpointResponse checkpoint_response = 1;
}
