syntax = "proto3";
package risk_core.v1.checkpoints.v1;

import "common/service_client_config.proto";
import "risk-core/checkpoint_response.proto";
import "risk-core/context.proto";
import "risk-core/dasher.proto";
import "risk-core/services_common.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_outer_classname = "DxCreateShiftPreProtos";
option java_package = "com.doordash.rpc.risk_core.checkpoints";

/**
 * Used when dasher creating a shift to determine if this dasher needs additional verification.
 * The additional verification could be one of: request idv, update app, require TIN
 */
service DxCreateShiftPreService {
  // Timeout applied per attempt
  option (service_client.client_config).response_attempt_timeout_millis = 5000;
  // Make a total 2 attempts (initial + one retries) for now.
  option (service_client.client_config).retry_config.max_attempts = 2;
  // The set of status codes on which to retry: RESOURCE_EXHAUSTED
  option (service_client.client_config).retry_config.do_retry_grpc_code = 8;
  // Break the circuit if the error rate exceeds 80%.
  option (service_client.client_config).circuit_breaker_config.failure_rate_threshold = 0.8;
  // Ignore NOT_FOUND from circuit breaker error rate
  option (service_client.client_config).circuit_breaker_config.do_ignore_grpc_code = 5;

  // Evaluate the checkpoint.
  rpc Evaluate(DxCreateShiftPreServiceEvaluateRequest) returns (DxCreateShiftPreServiceEvaluateResponse);
}

// Evaluate response
message DxCreateShiftPreServiceEvaluateResponse {
  // The checkpoint response
  CheckpointResponse checkpoint_response = 1;
}

// Evaluate request
message DxCreateShiftPreServiceEvaluateRequest {
  // The request id
  RequestId request_id = 1;

  // The risk context
  RiskContext risk_context = 2;

  // The vehicle type id
  int32 vehicle_type_id = 3;

  // The dasher's email
  string dasher_email = 4;

  // The country shortname for the shift
  string country_shortname = 5;

  // The device id used in the shift
  string device_id = 6;

  // The dasher contract type
  DasherContractType dasher_contract_type = 7;

  // The submarket id retrieved from the shift
  int32 submarket_id = 8;

  // One of: CREATE_SHIFT, CHECK_IN_SHIFT, RESUME_SHIFT, DROP_OFF_SHIFT
  ShiftStep shift_step = 9;

  // The starting point id
  int32 starting_point_id = 10;
}

/**
   Types of Shift Steps
*/
enum ShiftStep {
  // Unknown or unspecified
  SHIFT_STEP_UNKOWN_UNSPECIFIED = 0;

  // Create shift
  SHIFT_STEP_CREATE_SHIFT = 1;

  // Check in shift
  SHIFT_STEP_CHECK_IN_SHIFT = 2;

  // Resume shift
  SHIFT_STEP_RESUME_SHIFT = 3;

  // Drop off shift
  SHIFT_STEP_DROP_OFF_SHIFT = 4;
}
