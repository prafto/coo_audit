syntax = "proto3";
package risk_core.v1.checkpoints.v1;

import "common/service_client_config.proto";
import "risk-core/account.proto";
import "risk-core/cart.proto";
import "risk-core/checkpoint_response.proto";
import "risk-core/common.proto";
import "risk-core/context.proto";
import "risk-core/payment.proto";
import "risk-core/services_common.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_outer_classname = "CheckoutInProtos";
option java_package = "com.doordash.rpc.risk_core.checkpoints";

/*
   Fraud Checkpoint Called When Consumer Checkout.
*/
service CheckoutInService {
  // Example Hermes client config. The options not listed here use Hermes default.
  // The following applies for all RPCs in the service, if not overridden on individual RPCs.

  // Timeout after 4000 milliseconds.
  option (service_client.client_config).response_attempt_timeout_millis = 4000;
  // No retires.
  option (service_client.client_config).retry_config.max_attempts = 1;
  // Add RESOURCE_EXHAUSTED to the set of retriable codes.
  option (service_client.client_config).retry_config.do_retry_grpc_code = 8;
  // Break the circuit if the error rate exceeds 80%.
  option (service_client.client_config).circuit_breaker_config.failure_rate_threshold = 0.8;
  // Ignore NOT_FOUND from circuit breaker error rate calculation.
  option (service_client.client_config).circuit_breaker_config.do_ignore_grpc_code = 5;

  // Evaluate
  rpc Evaluate(CheckoutInServiceEvaluateRequest) returns (CheckoutInServiceEvaluateResponse);
}

/*
   CheckoutIn Service Evaluation Request
*/
message CheckoutInServiceEvaluateRequest {
  // request id
  RequestId request_id = 1;

  // risk context
  RiskContext risk_context = 2;

  // session id
  SessionId session_id = 3;

  // user id
  UserId user_id = 4;

  // cart
  Cart cart = 5;

  // order
  Order order = 6;

  // cart payment intents
  repeated CartPaymentIntent cart_payment_intents = 7;

  // attempt number
  int32 attempt_number = 8;

  // Json serialized string of FinalizeOrderQuoteResponseV2
  string order_quote_response = 9;

  // challenge metadata
  ChallengeMetadata challenge_metadata = 10;

  // Used for orders in which the primary user_id doesn't match the user_id used for payment processing
  // Currently used for storefront orders that are using a linked DD payment method
  // user_id contains the DD user_id & creator_user_id contains the SF user_id
  UserId creator_user_id = 14;

  // Unique Radar session Id tied to the checkout session in Stripe's ecosystem. This is initially generated
  // by the frontend client.
  string stripe_radar_session_id = 15;
}

/*
   CheckoutIn Service Evaluation Response
*/
message CheckoutInServiceEvaluateResponse {
  // CheckpointResponse
  CheckpointResponse checkpoint_response = 1;
}

/*
   Challenge Metadata
*/
message ChallengeMetadata {
  // is cvc entered
  bool is_cvc_entered = 1;
}
