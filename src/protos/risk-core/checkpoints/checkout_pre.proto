syntax = "proto3";
package risk_core.v1.checkpoints.v1;

import "common/service_client_config.proto";
import "risk-core/account.proto";
import "risk-core/cart.proto";
import "risk-core/checkpoint_response.proto";
import "risk-core/common.proto";
import "risk-core/context.proto";
import "risk-core/services_common.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_outer_classname = "CheckoutPreProtos";
option java_package = "com.doordash.rpc.risk_core.checkpoints";

/**
 * The 1st of 2 checkpoints triggered at checkout.
 * This checkpoint is the last opportunity to prevent and ATO'd or blocklisted account from placing an order.
 * It can be used to trigger Cx Ban, or MFA
 */
service CheckoutPreService {
  // Timeout applied per attempt
  option (service_client.client_config).response_attempt_timeout_millis = 5000;
  // The maximum number of attempts. 1 means no retries.
  option (service_client.client_config).retry_config.max_attempts = 1;
  // The set of status codes on which to retry.
  option (service_client.client_config).retry_config.do_retry_grpc_code = 8;
  // The failure rate threshold for the circuit breaker.
  option (service_client.client_config).circuit_breaker_config.failure_rate_threshold = 0.8;
  // Status codes to ignore from the circuit breaker
  option (service_client.client_config).circuit_breaker_config.do_ignore_grpc_code = 5;

  // Evaluate the checkpoint.
  rpc Evaluate(CheckoutPreServiceEvaluateRequest) returns (CheckoutPreServiceEvaluateResponse);
}

// Evaluate response
message CheckoutPreServiceEvaluateResponse {
  // The checkpoint response
  CheckpointResponse checkpoint_response = 1;
}

// Evaluate request
message CheckoutPreServiceEvaluateRequest {
  // The request id
  RequestId request_id = 1;

  // The risk context
  RiskContext risk_context = 2;

  // The user's session id
  SessionId session_id = 3;

  // The user id
  UserId user_id = 4;

  // The cart being ordered
  Cart cart = 5;

  // Whether or not the payment is tokenized
  bool is_tokenized_pay = 6;

  // The checkout attempt number
  int32 attempt_number = 7;

  // The payment card id
  PaymentCardId payment_card_id = 9;

  // The order being placed
  Order order = 10;

  // Json serialized string of FinalizeOrderQuoteResponseV2
  string order_quote_response = 11;

  // The payment card id for the order
  message PaymentCardId {
    // The id of the payment card
    string value = 1;
  }
}
