syntax = "proto3";

package doordash.test_data_service.v1;

import "google/protobuf/timestamp.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.testdataservice";

// Service for accepting & processing context leak events at DoorDash.
service ContextLeakDetectionService {
  // Process a context leak event
  rpc ProcessContextLeak(ProcessContextLeakRequest) returns (ProcessContextLeakResponse);
}

// Request service to process a context leak
message ProcessContextLeakRequest {
  // Event being requested to process
  ContextLeakEvent context_leak_event = 1;
  // The detecting mechanism that found this context leak
  string leak_detection_source = 2;
}

// The event being submitted to our service
message ContextLeakEvent {
  // The trace ID of the request
  string trace_id = 1;
  // The type of leak this was
  LeakType leak_type = 2;
  // Deprected - unused for alerting
  google.protobuf.Timestamp last_correct_value_detection_time = 3;
  // Deprected - unused for alerting
  google.protobuf.Timestamp carried_leak_detection_time = 4;
  // Deprected - unused for alerting
  repeated string affected_service = 5;
  // The parent span ID where leak was detected
  string parent_span_id = 6;
  // The child span ID where leak was detected
  string child_span_id = 7;
  // Request protocol of the request
  string request_protocol = 8;
  // The service name where leak was detected
  string service_name = 9;
  // The service URL where leak was detected
  string service_url = 10;
  // The service node where leak was detected
  string service_node = 11;
  // The endpoint where leak was detected
  string service_endpoint = 12;
  // The baggage passed in the child span
  string child_baggage = 13;
  // The baggage passed in the parent span
  string parent_baggage = 14;
  // The full path from child to root
  string path_to_root = 15;
  // The path from child to root only containing baggages
  string baggage_path_to_root = 16;
  // The path from child to first parent containing baggage
  string path_to_baggage_parent = 17;
  // The service name on parent
  string parent_service_name = 18;
  // The parent service URL
  string parent_service_url = 19;
  // The parent service node
  string parent_service_node = 20;
  // The parent service endpoint
  string parent_service_endpoint = 21;
  // The child span name
  string span_name = 22;
  // The parent span name
  string parent_span_name = 23;
  // The list of service name from the child span the first parent containing baggage
  string service_names_to_baggage_parent = 24;
  // The list of span names from the child span to the first parent containing baggage
  string span_names_to_baggage_parent = 25;
  // The list of service names that are impacted(potentially) by this leak event
  string impacted_service_names = 26;
}

// The current types of leaks possible
enum LeakType {
  // Unspecified catch-all (for Linter)
  LEAK_TYPE_UNSPECIFIED = 0;
  // The baggage was initially doortest and flipped to prod
  LEAK_TYPE_DOORTEST_TO_PROD = 1;
  // The baggage was initially prod and flipped to doortest
  LEAK_TYPE_PROD_TO_DOORTEST = 2;
  // Inconsistent, for example: tid is prod, ddcontext tid is doortest
  LEAK_TYPE_INCONSISTENT_BAGGAGE = 3;
  // Baggage drops, if `mid` was in parent request but lost in the child
  LEAK_TYPE_BAGGAGE_DROP = 4;
  // Baggage modification, if `mid=1` in parent but changed to `mid=2`
  LEAK_TYPE_BAGGAGE_MODIFICATION = 5;
  // toka-trc drifts, we expect toka-trc==trace-id.
  LEAK_TYPE_TOKA_TRC_DRIFT = 6;
}

// Response status message for ContextLeakEvent
message ProcessContextLeakResponse {
  // 0 if successfully processed, exception otherwise
  int32 status = 1;
}
