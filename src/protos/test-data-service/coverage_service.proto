syntax = "proto3";

package doordash.test_data_service.v1;

import "google/protobuf/timestamp.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.testdataservice";

// Service for retrieving coverage data for entities at DoorDash.
// Currently, we have access to unit test and endpoint level coverage.
service CoverageService {
  // Get a coverage node.
  rpc GetCoverageNode(GetCoverageNodeRequest) returns (GetCoverageNodeResponse);
  // List out all the coverage nodes for an entity in a timeframe.
  rpc ListCoverageNode(ListCoverageNodeRequest) returns (ListCoverageNodeResponse);
  // Get all children nodes that composes the coverage of this entity on a particular date.
  // Assumes that this is a `group` entity in dev-console/catalog.
  rpc GetChildrenCoverageNodes(GetChildrenCoverageNodesRequest) returns (GetChildrenCoverageNodesResponse);
  // Gets a complete summary of the node, including children's statistics, over a date range
  rpc GetCoverageSummaryForNode(GetCoverageSummaryForNodeRequest) returns (GetCoverageSummaryForNodeResponse);
  // Gets the onboarding state in a node for some tool
  rpc GetCurrentOnboardingStatus(GetCurrentOnboardingStatusRequest) returns (GetCurrentOnboardingStatusResponse);

  // DEPRECATED ENDPOINTS
  // Get just the unit test coverage for a node on a particular date.
  // DEPRECATED- call GetAssetCoverageNode/GetGroupCoverageNode and pull the data from the response
  rpc GetUnitTestCoverageForNode(GetUnitTestCoverageForNodeRequest) returns (GetUnitTestCoverageForNodeResponse) {
    option deprecated = true;
  }
  // Get just the endpoint coverage for a node on a particular date.
  // DEPRECATED - call GetAssetCoverageNode/GetGroupCoverageNode and pull the data from the response
  rpc GetEndpointCoverageForNode(GetEndpointCoverageForNodeRequest) returns (GetEndpointCoverageForNodeResponse) {
    option deprecated = true;
  }
  // Gets a summary of statistics for a node over the time range provided
  // DEPRECATED - call GetCoverageSummaryForNode instead.
  rpc GetCoverageStatsForNode(GetCoverageStatsForNodeRequest) returns (GetCoverageStatsForNodeResponse) {
    option deprecated = true;
  }
}

// Get a coverage node for a particular date.
message GetCoverageNodeRequest {
  // The name of the node
  string name = 1;
  // The date this node was created
  google.protobuf.Timestamp date = 2;
  // Force coverage service to rewrite the value in our database
  bool recreate_node = 3;
  // The type of this node
  NodeType node_type = 5;
}

// Response for getCoverageNode
message GetCoverageNodeResponse {
  // The node requested
  CoverageNode node = 1;
}

// List out coverage for this node from start to end date
message ListCoverageNodeRequest {
  // The name of the node
  string name = 1;
  // The start date of the interval
  google.protobuf.Timestamp start_date = 2;
  // The end date of the interval (exclusive)
  google.protobuf.Timestamp end_date = 3;
  // The type of this node
  NodeType node_type = 5;
}

// Response for listCoverageNode
message ListCoverageNodeResponse {
  // List of the coverage nodes
  // These all represent the same entity at DoorDash,
  // just coverage information for each different day in the range.
  repeated CoverageNode nodes = 1;
}

// Get the child components that constitute the coverage of this node
message GetChildrenCoverageNodesRequest {
  // The name of the parent node
  string parent_name = 1;
  // The date of coverage we care about for this node
  google.protobuf.Timestamp date = 2;
}

// Response for getChildrenCoverageNodes
message GetChildrenCoverageNodesResponse {
  // The children nodes that constitute coverage for the node requested
  // on this particular date.
  repeated CoverageNode child_nodes = 1;
}

// Get just unit test coverage for an entity
message GetUnitTestCoverageForNodeRequest {
  // The name of the node
  string name = 1;
  // The coverage date of interest
  google.protobuf.Timestamp date = 2;
}

// Response for getUnitTestCoverageForNode
message GetUnitTestCoverageForNodeResponse {
  // The unit test coverage of this node on that date
  float unit_test_coverage = 1;
}

// Get just endpoint coverage for an entity
message GetEndpointCoverageForNodeRequest {
  // The name of the node
  string name = 1;
  // The coverage date of interest
  google.protobuf.Timestamp date = 2;
}

// Response for getEndpointCoverageForNode
message GetEndpointCoverageForNodeResponse {
  // The endpoint coverage of this node on that date
  float endpoint_coverage = 1;
}

// Get summary stats for a node over a duration
message GetCoverageStatsForNodeRequest {
  // The name of the node
  string name = 1;
  // The start of the duration
  google.protobuf.Timestamp start_date = 2;
  // The end of the duration
  google.protobuf.Timestamp end_date = 3;
}

// Response for GetSummaryStatsForNode
message GetCoverageStatsForNodeResponse {
  /** Fields 1-7 are deprecated, prefer the coverage_stats object */
  // The name of the node
  string name = 1 [deprecated = true];
  // The minimum unit test coverage over the duration
  float min_unit_test_coverage = 2 [deprecated = true];
  // The maximum unit test coverage over the duration
  float max_unit_test_coverage = 3 [deprecated = true];
  // The average unit test coverage over the duration
  float avg_unit_test_coverage = 4 [deprecated = true];
  // The minimum endpoint coverage over the duration
  float min_endpoint_coverage = 5 [deprecated = true];
  // The maximum endpoint coverage over the duration
  float max_endpoint_coverage = 6 [deprecated = true];
  // The average endpoint coverage over the duration
  float avg_endpoint_coverage = 7 [deprecated = true];
  // The coverage stats of this node on the given time frame
  NodeCoverageStatistics coverage_statistics = 8;
}

// Request for GetCoverageSummaryForNode
message GetCoverageSummaryForNodeRequest {
  // The name of the node
  string name = 1;
  // The start date of the timeframe
  google.protobuf.Timestamp start_date = 2;
  // The end date of the timeframe
  google.protobuf.Timestamp end_date = 3;
  // The type of this node
  NodeType node_type = 5;
}

// Response for GetCoverageSummaryForNode
message GetCoverageSummaryForNodeResponse {
  // The name of the node
  string name = 1;
  // The unit test coverage over the duration
  // Deprecated, prefer the parent_data list instead, which includes
  // all the future coverage fields we track.
  repeated float unit_test_coverage = 2 [deprecated = true];
  // The endpoint coverage over the duration
  // Deprecated, prefer the parent_data list instead, which includes
  // all the future coverage fields we track.
  repeated float endpoint_coverage = 3 [deprecated = true];
  // Children's coverage summaries over the duration
  repeated NodeCoverageStatistics children_coverage_statistics = 4;
  // The type of this node
  NodeType node_type = 5;
  // The parent coverage data over the duration
  repeated CoverageNode parent_data = 6;
  // The parent's parent node
  string owning_parent_name = 7;
  // The type of the parent's parent node
  NodeType owning_parent_type = 8;
}

// Request for GetCurrentOnboardingStatus
message GetCurrentOnboardingStatusRequest {
  // The tool we're interested in learning about
  TestingTool tool = 1;
  // The type of the node - whether we're asking for a team or a repository
  NodeType node_type = 2;
  // The name of the node
  string name = 3;
}

// Response for GetCurrentOnboardingStatus
message GetCurrentOnboardingStatusResponse {
  // The name of the node
  string name = 1;
  // The type of the node
  NodeType node_type = 2;
  // The onboarding state of this node
  ToolOnboardingState state = 3;
}

// Software Assets vs. Group - used to distinguish when querying
enum NodeType {
  // Unspecified value
  NODE_TYPE_UNSPECIFIED = 0;
  // Software asset
  NODE_TYPE_SOFTWARE_ASSET = 1;
  // Group
  NODE_TYPE_GROUP = 2;
}

// Test platform tools
enum TestingTool {
  // Unspecified value
  TESTING_TOOL_UNSPECIFIED = 0;
  // Codecov
  TESTING_TOOL_CODECOV = 1;
  // Devbox
  TESTING_TOOL_DEVBOX = 2;
}

// The onboarding state of a group or repository
message ToolOnboardingState {
  // The tool this information corresponds to
  TestingTool tool = 1;
  // If this is an asset (i.e. subproject, or repository), if it's activated in that singular asset
  bool is_onboarded = 2;
  // If this is a group (i.e. a team), the assets underneath it which are onboarded
  repeated string onboarded_assets = 3;
  // If this is a group (i.e. a team), the assets underneath it which are not onboarded
  repeated string not_onboarded_assets = 4;
}

// The coverage statistics for a node
message NodeCoverageStatistics {
  // The name of the node
  string name = 1;
  // The minimum unit test coverage over the duration
  float min_unit_test_coverage = 2;
  // The maximum unit test coverage over the duration
  float max_unit_test_coverage = 3;
  // The average unit test coverage over the duration
  float avg_unit_test_coverage = 4;
  // The current unit test coverage
  float current_unit_test_coverage = 23;
  // The minimum endpoint coverage over the duration
  float min_endpoint_coverage = 5;
  // The maximum endpoint coverage over the duration
  float max_endpoint_coverage = 6;
  // The average endpoint coverage over the duration
  float avg_endpoint_coverage = 7;
  // The current unit test coverage
  float current_endpoint_test_coverage = 24;
  // The minimum system test coverage over the duration
  float min_system_test_coverage = 8;
  // The maximum system test coverage over the duration
  float max_system_test_coverage = 9;
  // The average system test coverage over the duration
  float avg_system_test_coverage = 10;
  // The current unit test coverage
  float current_system_test_coverage = 25;
  // The min total system and unit test coverage over the duration
  float min_total_unit_test_and_system_test_coverage = 11;
  // The max total system and unit coverage over the duration
  float max_total_unit_test_and_system_test_coverage = 12;
  // The average total system and unit  coverage over the duration
  float avg_total_unit_test_and_system_test_coverage = 13;
  // The current total system and unit test coverage
  float current_total_unit_test_and_system_test_coverage = 26;
  // The min line coverage over the duration
  float min_lines_covered = 14;
  // The max line coverage over the duration
  float max_lines_covered = 15;
  // The average line coverage over the duration
  float avg_lines_covered = 16;
  // The current line coverage over the duration
  float current_lines_covered = 27;
  // The min lines missed over the duration
  float min_lines_missed = 17;
  // The max lines missed over the duration
  float max_lines_missed = 18;
  // The avg lines missed over the duration
  float avg_lines_missed = 19;
  // The current lines missed
  float current_lines_missed = 28;
  // The min lines partially covered over the duration
  float min_partial_lines = 20;
  // The max lines partially covered over the duration
  float max_partial_lines = 21;
  // The avg lines partially covered over the duration
  float avg_partial_lines = 22;
  // The current lines partially covered
  float current_partial_lines = 29;
  // The type of this node - used for navigation
  NodeType node_type = 30;
}

// Encapsulates coverage information for an entity at DoorDash.
message CoverageNode {
  // Name of the node
  string name = 1;
  // Date the unit test and endpoint coverage was recorded
  google.protobuf.Timestamp date_recorded = 2;
  // Unit test coverage as a percentage for this node on that date
  float unit_test_coverage = 3;
  // Endpoint coverage for this node on that date
  float endpoint_coverage = 4;
  // The type of this node
  NodeType node_type = 5;
  // The system test coverage as a percentage for this node on that date
  float system_test_coverage = 6;
  // The total of unit test and system test coverage
  float total_unit_test_and_system_test_coverage = 7;
  // The total lines by this node on that data
  float total_reported_lines = 8;
  // The partial lines covered by this node on that date
  float partial_lines = 9;
  // The missed lines of this node on that date
  float missed_lines = 10;
  // The hit lines of this node on that date
  float hit_lines = 11;
}
