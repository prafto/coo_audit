syntax = "proto3";
package merchant_feed_service.v1;

import "common/service_client_config.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "merchant_feed_service/commons.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.merchant_feed";

// Service definition of notification hub
service MerchantNotificationHubService {
  // Endpoint to fetch merchant hub notifications
  rpc GetMerchantNotificationHubEvents(GetMerchantNotificationHubEventsRequest) returns (GetMerchantNotificationHubEventsResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 1000;
    option (service_client.client_method_config).retry_config.initial_wait_millis = 200;
    option (service_client.client_method_config).circuit_breaker_config.failure_rate_threshold = 0.25;
  }
  // Endpoint to check if merchant has new notifications
  rpc CheckMerchantNewNotificationHubEvents(CheckMerchantNewNotificationHubEventsRequest) returns (CheckMerchantNewNotificationHubEventsResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 1000;
    option (service_client.client_method_config).retry_config.initial_wait_millis = 200;
    option (service_client.client_method_config).circuit_breaker_config.failure_rate_threshold = 0.25;
  }
  // Endpoint to mark notification status as read
  rpc UpdateNotificationReadStatus(UpdateNotificationReadStatusRequest) returns (UpdateNotificationReadStatusResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 500;
    option (service_client.client_method_config).retry_config.initial_wait_millis = 200;
    option (service_client.client_method_config).circuit_breaker_config.failure_rate_threshold = 0.25;
  }
  // Endpoint to create merchant notification for hub
  rpc CreateMerchantNotification(CreateMerchantNotificationRequest) returns (CreateMerchantNotificationResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 500;
    option (service_client.client_method_config).retry_config.initial_wait_millis = 200;
    option (service_client.client_method_config).circuit_breaker_config.failure_rate_threshold = 0.25;
  }
  // Endpoint to create merchant notification for hub
  rpc DeleteMerchantNotifications(DeleteMerchantNotificationsRequest) returns (DeleteMerchantNotificationsResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 500;
    option (service_client.client_method_config).retry_config.initial_wait_millis = 200;
    option (service_client.client_method_config).circuit_breaker_config.failure_rate_threshold = 0.25;
  }
}

// client request to mark notification as read
message UpdateNotificationReadStatusRequest {
  // List of unique ids of notifications
  repeated google.protobuf.StringValue notification_ids = 1;
  // merchant user id
  google.protobuf.StringValue merchant_user_id = 2;
}

// Response of marking notification as read
message UpdateNotificationReadStatusResponse {
  // grpc status
  Status status = 1;
}

// Client request to get merchant hub page
message GetMerchantNotificationHubEventsRequest {
  // merchant user id
  google.protobuf.StringValue merchant_user_id = 1;
  // optional field as of now for this endpoint
  google.protobuf.StringValue country_short_name = 2;
  // page number for the notifications
  google.protobuf.Int32Value page_number = 3;
  // Number of notifications per a single request
  google.protobuf.Int32Value notifications_count_per_page = 4;
}

// Response of getting merchant hub page
message GetMerchantNotificationHubEventsResponse {
  // notifications list
  repeated MerchantAggregatedNotification notification_list = 1;
  // filter categories of all notifications
  repeated google.protobuf.StringValue filter_categories = 2;
  // Active/unread notifications count
  google.protobuf.Int32Value active_notification_count = 3;
  // Total notifications count
  google.protobuf.Int32Value total_count = 4;
}

// Merchant Aggregated Notification
message MerchantAggregatedNotification {
  // batch notification
  BatchNotification batch_notification = 1;
  // standalone notification
  MerchantNotification standalone_notification = 2;
  // notification type
  NotificationType notification_type = 3;
}

// Batch Notification
message BatchNotification {
  // notifications list
  repeated MerchantNotification notification_list = 1;
  // description of the batch
  google.protobuf.StringValue description = 2;
}

// Type of Notification in Hub
enum NotificationType {
  // Unspecified
  NOTIFICATION_TYPE_UNSPECIFIED = 0;
  // Standalone
  NOTIFICATION_TYPE_STANDALONE = 1;
  // Batched
  NOTIFICATION_TYPE_BATCHED = 2;
}

// Merchant Notification
message MerchantNotification {
  // unique id of the notification
  google.protobuf.StringValue notification_id = 1;
  // template id of the notification
  google.protobuf.StringValue template_id = 2;
  // notification description
  google.protobuf.StringValue description = 3;
  // icon type for the notification
  google.protobuf.StringValue icon_type = 4;
  // notification creation timestamp
  google.protobuf.Timestamp timestamp = 5;
  // filter category associated with notification, Ex: Error charges, Payouts, Store Status
  google.protobuf.StringValue filter_category = 6;
  // flag to indicate if notification is read
  google.protobuf.BoolValue is_read = 7;
  // deep link url associated with notification cta
  google.protobuf.StringValue deep_link_url = 8;
}

// grpc method which postal-service will use to create merchant notification
message CreateMerchantNotificationRequest {
  // Unique id of notification
  google.protobuf.StringValue notification_id = 1;
  // Consumer ID for which hub notification hub event is being published
  google.protobuf.StringValue merchant_user_id = 2;
  // template id for notification config
  google.protobuf.StringValue template_id = 3;
  // Placeholders for a registered template
  repeated Placeholder placeholders = 4;
  // Timestamp of when event is expiring
  google.protobuf.Timestamp expiration_time = 5;
}

// send notification id in response back to postal-service
message CreateMerchantNotificationResponse {
  // Unique id of the notification
  google.protobuf.StringValue notification_id = 1;
}

// Placeholder
message Placeholder {
  // placeholder key
  google.protobuf.StringValue key = 1;
  // placeholder value
  google.protobuf.StringValue value = 2;
  // Flag to indicate if placeholder value needs to be translated, will use C3PO for translations
  google.protobuf.BoolValue is_translatable = 3;
}

// client request to check if merchant has new notifs
message CheckMerchantNewNotificationHubEventsRequest {
  // merchant user id
  google.protobuf.StringValue merchant_user_id = 1;
}

// Response of checking if merchant has new notifications
message CheckMerchantNewNotificationHubEventsResponse {
  // True or false if merchant has new notifications
  google.protobuf.BoolValue has_new_notifications = 1;
  // total number of notifs mx has
  google.protobuf.Int32Value num_items = 2;
  // total number of unread notifs mx has
  google.protobuf.Int32Value num_unread_items = 3;
  // True or false if bell badge is skipped
  google.protobuf.BoolValue skip_bell_badge = 4;
}

// client request to mark notification as read
message DeleteMerchantNotificationsRequest {
  // List of unique ids of notifications
  repeated google.protobuf.StringValue notification_ids = 1;
  // merchant user id
  google.protobuf.StringValue merchant_user_id = 2;
}

// Response of marking notification as read
message DeleteMerchantNotificationsResponse {
  // grpc status
  Status status = 1;
}
