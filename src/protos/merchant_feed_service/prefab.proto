syntax = "proto3";

package merchant_feed_service.v1;

option java_multiple_files = true;
option java_generic_services = true;
option java_package = "com.doordash.rpc.merchant_feed";

import "google/protobuf/wrappers.proto";
import "google/protobuf/empty.proto";

// Prefab Service
service PrefabService {
    
    // Get Single Page Form UI Schema with empty request
    rpc GetSinglePageFormPOCSchema(GetSinglePageFormPOCSchemaRequest) returns (GetSinglePageFormPOCSchemaResponse);
}

// ***** PRE FAB *****

// Pre fab Single Page POC Request
message GetSinglePageFormPOCSchemaRequest {
    // empty request
    google.protobuf.Empty empty = 1;
}

// Pre fab Single Page POC Response
message GetSinglePageFormPOCSchemaResponse {
    // form type
    PFFormType form_type = 1;
    // screen component type
    PFScreenComponentType component_type = 2;
    // screen configuration
    PFScreen screen = 3;
}

/** Enums */

// Possibile values for Screen Type
enum PFScreenType {
    // unspecified
    PF_SCREEN_TYPE_UNSPECIFIED = 0;
    // modal screen
    PF_SCREEN_TYPE_MODAL = 1;
}

// Possibile values for Screen Component Type
enum PFScreenComponentType {
    // unspecified
    PF_SCREEN_COMPONENT_TYPE_UNSPECIFIED = 0;
    // modal screen component
    PF_SCREEN_COMPONENT_TYPE_MODAL = 1;
}    
// Form Types
enum PFFormType {
    // unspecified
    PF_FORM_TYPE_UNSPECIFIED = 0;
    // single page form
    PF_FORM_TYPE_SINGLE_PAGE = 1;
    // multi page form
    PF_FORM_TYPE_MULTI_PAGE = 2;
    // hub & spoke form
    PF_FORM_TYPE_HUB_AND_SPOKE = 3;
}

// PFComponentType
enum PFComponentType {
    // unspecified
    PF_COMPONENT_TYPE_UNSPECIFIED = 0;
    // text field
    PF_COMPONENT_TYPE_TEXT_FIELD = 1;
    // number field
    PF_COMPONENT_TYPE_NUMBER_FIELD = 2;
}

// PFCTAActionType
enum PFCtaActionType {
    // unspecified
    PF_CTA_ACTION_TYPE_UNSPECIFIED = 0;
    // submit
    PF_CTA_ACTION_TYPE_SUBMIT = 1;
    // next
    PF_CTA_ACTION_TYPE_NEXT = 2;
}

// PFNavBarComponentType
enum PFNavBarComponentType {
    // unspecified
    PF_NAV_BAR_COMPONENT_TYPE_UNSPECIFIED = 0;
    // nav bar in modal for forms
    PF_NAV_BAR_COMPONENT_TYPE_NAV_BAR = 1;
}

// ConditionalOperator for writing dependency condition
enum ConditionalOperator {
    // unspecified
    CONDITIONAL_OPERATOR_UNSPECIFIED = 0;
    // equals
    CONDITIONAL_OPERATOR_EQ = 1;
    // not equals
    CONDITIONAL_OPERATOR_NOT_EQ = 2;
    // gte
    CONDITIONAL_OPERATOR_GTE = 3;
    // lte
    CONDITIONAL_OPERATOR_LTE = 4;
    // gt
    CONDITIONAL_OPERATOR_GT = 5;
    // lt
    CONDITIONAL_OPERATOR_LT = 6;
}

/** Messages */

// DependencyCondition
message DependencyCondition {
// left hand side
 string name = 1;
 // operator
 ConditionalOperator operator = 2;   
 // right hand side
 string value = 3;
}

// PFComponentProps
message PFComponentProps {
    // component configuration
    oneof component_props {
        // text field
        PFTextField text_field = 1;
        // number field
        PFNumberField number_field = 2;
    }
}

// PFFormComponent
message PFFormComponent {
    // id
    string id = 1;
    // dependency
    DependencyCondition dependency = 2;
    // componentType
    PFComponentType component_type = 3;
    // component configuration
    PFComponentProps component_props = 4;
}

// PFCTANavBarHelp
message PFCTANavBarHelp {
    // href link
    // TODO on client side the link has may need interpolations to support locale based links
    // or server will send the correct link based on locale
    string href = 1;
}

// PFScreenNav
message PFScreenNav {
    // component type for Nav
    PFNavBarComponentType component_type = 1;
    // title
    string title = 2;
    // help button config
    PFCTANavBarHelp help_btn = 3;
}

// PFScreenMain
message PFScreenMain {
    // list of pages to be rendered
    // will have just 1 value for single page forms
    // otherwise, can have multiple pages
    repeated PFPages pages = 1;
}

// PFCTAOnClickActionConfig
message PFCTAOnClickActionConfig {
    // action type for the CTA, eg. submit
    PFCtaActionType type = 1;
}

// PFCTAPagePrimaryAction
message PFCTAPagePrimaryAction {
    // text for the cta, eg. submit, next
    string text = 1;
    // on click type action type
    PFCTAOnClickActionConfig on_click_action = 2;
}

// PFPages
message PFPages {
    // list of page ids to be rendered
    string id = 1;
    // optional page title
    string title = 2;
    // optional page description
    string description = 3;
    // ordered list of component to be rendered in the page
    repeated PFFormComponent form_component = 4;
    // primary action configuration
    PFCTAPagePrimaryAction primary_action = 5;
}


// PFScreen
message PFScreen {
     // nav bar config
     PFScreenNav nav = 1;
     // main content config
     PFScreenMain main = 2;
     // footer config
     // empty proto for now, To be implemented later
     google.protobuf.Empty footer = 3;
}

/** Form Components Spec */

// TextField
message PFTextField {
    // label
    string label = 1;
    // hint
    string hint = 2;
    // placeholder
    string placeholder = 3;
    // is_required
    bool is_required = 4;
    // is_multiline
    bool is_multiline = 5;
    //num_of_lines
    int32 num_of_lines = 6;
}

// NumberField
message PFNumberField {
    // label
    string label = 1;
    // hint
    string hint = 2;
    // placeholder
    string placeholder = 3;
    // is_required
    int32 min = 4;
    // is_multiline
    int32 max = 5;
    //allow_floats
    bool allow_floats = 6;
}
