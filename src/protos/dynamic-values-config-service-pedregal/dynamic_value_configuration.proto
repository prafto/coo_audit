syntax = "proto3";

package com.dash.dvcs;

import "google/protobuf/timestamp.proto";

option go_package = "internal/model";

// Lifecycle state enum
enum LifecycleState {
  // Unspecified
  LIFECYCLE_STATE_UNSPECIFIED = 0;

  // Draft
  LIFECYCLE_STATE_DRAFT = 1;

  // Awaiting Ramp
  LIFECYCLE_STATE_AWAITING_RAMP = 2;

  // Ramping
  LIFECYCLE_STATE_RAMPING = 3;

  // Running
  LIFECYCLE_STATE_RUNNING = 4;

  // Concluded
  LIFECYCLE_STATE_CONCLUDED = 5;

  // Archived
  LIFECYCLE_STATE_ARCHIVED = 6;
}

// Segment Type
enum SegmentType {
  // Unspecified
  SEGMENT_TYPE_UNSPECIFIED = 0;

  // Development
  SEGMENT_TYPE_DEVELOPMENT = 1;

  // Experiment
  SEGMENT_TYPE_EXPERIMENT = 2;

  // Release
  SEGMENT_TYPE_RELEASE = 3;
}

// The type of this dynamic value
enum DynamicValueType {
  // Unspecified
  DYNAMIC_VALUE_TYPE_UNSPECIFIED = 0;

  // Experiment
  DYNAMIC_VALUE_TYPE_EXPERIMENT = 1;

  // Flag
  DYNAMIC_VALUE_TYPE_FLAG = 2;
}

// Dynamic value configuration
message DynamicValueConfiguration {
  // User
  message User {
    // user name
    string name = 1;

    // user email
    string email = 2;
  }
  // Dynamic value details
  message Details {
    // The type of value to be returned
    enum ValueType {
      // Unspecified
      VALUE_TYPE_UNSPECIFIED = 0;

      // Long
      VALUE_TYPE_LONG = 1;

      // Double
      VALUE_TYPE_DOUBLE = 2;

      // String
      VALUE_TYPE_STRING = 3;

      // Bool
      VALUE_TYPE_BOOL = 4;
    }

    // ID
    string id = 1;

    // Name
    string name = 2;

    // Type
    DynamicValueType type = 3;

    // Value Type
    ValueType value_type = 4;

    // State
    LifecycleState state = 5;

    // Is this a template?
    bool is_template = 6;

    // Description
    string description = 7;

    // Autoincrementing version
    int32 version = 8;

    // When was the experiment created?
    google.protobuf.Timestamp start_at = 9;

    // When was the experiment created?
    google.protobuf.Timestamp finish_at = 10;

    // When was the experiment created?
    google.protobuf.Timestamp created_at = 11;

    // When was the experiment created?
    google.protobuf.Timestamp updated_at = 12;

    // Owner of the configuration
    User owner = 13;
  }

  // Matches properties with configuration rules
  message Variants {
    // Variant Type
    oneof variant_type {
      // Int Variants
      VariantInts ints = 1;

      // Double Variants
      VariantDoubles doubles = 2;

      // String Variants
      VariantStrings strings = 3;

      // Bool Variants
      VariantBools bools = 4;
    }
  }

  // Variant Ints
  message VariantInts {
    // Variants
    repeated VariantInt variants = 1;
  }

  // Variant Double
  message VariantDoubles {
    // Variants
    repeated VariantDouble variants = 1;
  }

  // Variant Strings
  message VariantStrings {
    // Variants
    repeated VariantString variants = 1;
  }

  // Variant Bool
  message VariantBools {
    // Variants
    repeated VariantBool variants = 1;
  }

  // Variant Int
  message VariantInt {
    // ID
    string id = 1;

    // Name
    string name = 2;

    // Value
    int64 value = 3;
  }

  // Variant Double
  message VariantDouble {
    // ID
    string id = 1;

    // Name
    string name = 2;

    // Value
    double value = 3;
  }

  // Variant String
  message VariantString {
    // ID
    string id = 1;

    // Name
    string name = 2;

    // Value
    string value = 3;
  }

  // Variant Bool
  message VariantBool {
    // ID
    string id = 1;

    // Name
    string name = 2;

    // Value
    bool value = 3;
  }

  // Distribution
  message Distribution {
    // Allocation
    message Allocation {
      // Variant name
      string variant = 1;

      // Allocation
      uint32 allocation = 2;
    }

    // ID
    string id = 1;

    // Name
    string name = 2;

    // Allocations
    repeated Allocation allocations = 3;
  }

  // Salt. Adds randomization to evaluation outcomes. DV name expected to be part of the salt
  message Salt {
    // Rollout randomization "<dv_name>_rollout_<randomization_key>"
    string rollout_salt = 1;

    // Variant randomization "<dv_name>_variant_<randomization_key>"
    string variant_salt = 2;
  }

  // Segment
  message Segment {
    // ID
    string id = 1;

    // Name
    string name = 2;

    // Type
    SegmentType type = 3;

    // Is disabled?
    bool is_disabled = 4;

    // Distribution name for the fallback
    string fallback_distribution = 5;

    // Distribution name for the rollout
    string rollout_distribution = 6;

    // Rollout fraction [0, 1]
    double rollout_fraction = 7;

    // Optional salt override. If not set will use the overall DV salt
    Salt salt_override = 8;

    // Matcher
    Matcher matcher = 9;
  }

  // Dynamic value settings
  message Settings {
    // Logging settings
    message LoggingSettings {
      // Enable exposure logs
      bool enable_exposure_logs = 1;

      // Enable reference logs
      bool enable_reference_logs = 2;

      // A time when we forcefully disable resolution logs
      google.protobuf.Timestamp disable_resolution_log_at = 3;
    }

    // Logging settings
    LoggingSettings logging = 1;
  }

  // Dynamic value randomization
  message Evaluation {
    // Randomization key
    string randomization_key = 1;

    // Overall salts to be applied to all segments
    Salt salt = 2;

    // Which variant to return if randomization key is missing or no segment is matched. Client Side Default expected
    string fallback = 3;

    // What type of randomization
    Randomizer randomizer = 4;
  }

  // Dynamic value details
  Details details = 1;

  // Dynamic value settings
  Settings settings = 2;

  // Evaluation settings
  Evaluation evaluation = 3;

  // Dynamic value variants
  Variants variants = 4;

  // Dynamic value segments
  repeated Segment segments = 5;

  // Dynamic value distributions
  repeated Distribution distributions = 6;
}

// Controls how the DV is randomized
message Randomizer {
  // Randomizer Type
  oneof randomizer_type {
    // AB
    ABRandomizer ab = 1;

    // Switchback
    SwitchbackRandomizer switchback = 2;
  }
}

// AB Randomizer
message ABRandomizer {}

// Switchback Randomizer
message SwitchbackRandomizer {
  // Enables pairing
  bool enable_pairing = 1;

  // Enables mirroring
  bool enable_mirroring = 2;

  // Enables copying
  bool enable_copying = 3;

  // The number of seconds to keep stable randomization
  int32 window = 4;

  // The number of windows before mirroring/copying
  int32 mirror_period = 5;

  // An offset so that time windows don't always occur at the top of the hour
  int64 time_offset = 6;
}

// Matches properties with configuration rules
message Matcher {
  // Matcher Type
  oneof matcher_type {
    // All Matcher
    AllMatcher all = 1;

    // Any Matcher
    AnyMatcher any = 2;

    // Collection Long Matcher
    CollectionLongMatcher collection_long = 3;

    // Collection Double Matcher
    CollectionDoubleMatcher collection_double = 4;

    // Collection String Matcher
    CollectionStringMatcher collection_string = 5;

    // Collection Reference Matcher
    CollectionReferenceMatcher collection_reference = 6;

    // Collection Version Matcher
    CollectionVersionMatcher collection_version = 7;

    // Scalar Bool Matcher
    ScalarBoolMatcher scalar_bool = 8;

    // Scalar Double Matcher
    ScalarDoubleMatcher scalar_double = 9;

    // Scalar Long Matcher
    ScalarLongMatcher scalar_long = 10;

    // Scalar String Matcher
    ScalarStringMatcher scalar_string = 11;

    // Scalar Reference Matcher
    ScalarReferenceMatcher scalar_reference = 12;

    // Scalar Version Matcher
    ScalarVersionMatcher scalar_version = 13;

    // Not Matcher
    NotMatcher not = 14;

    // Fixed Matcher
    FixedMatcher fixed = 15;
  }
}

// Scalar Operator
enum ScalarOperator {
  // Type unspecified
  SCALAR_OPERATOR_UNSPECIFIED = 0;

  // Equals
  SCALAR_OPERATOR_EQUALS = 1;

  // Not Equals
  SCALAR_OPERATOR_NOT_EQUALS = 2;

  // Not Equals
  SCALAR_OPERATOR_GREATER_THAN = 3;

  // Not Equals
  SCALAR_OPERATOR_GREATER_THAN_EQUAL = 4;

  // Not Equals
  SCALAR_OPERATOR_LESS_THAN = 5;

  // Not Equals
  SCALAR_OPERATOR_LESS_THAN_EQUAL = 6;
}

// Collection Operator
enum CollectionOperator {
  // Type unspecified
  COLLECTION_OPERATOR_UNSPECIFIED = 0;

  // Contains
  COLLECTION_OPERATOR_CONTAINS = 1;

  // Not Contains
  COLLECTION_OPERATOR_NOT_CONTAINS = 2;
}

// All Matcher
message AllMatcher {
  // An array of matchers
  repeated Matcher matchers = 1;
}

// Any Matcher
message AnyMatcher {
  // An array of matchers
  repeated Matcher matchers = 1;
}

// Collection Double Matcher
message CollectionDoubleMatcher {
  // The property key
  string key = 1;

  // The operator
  CollectionOperator operator = 2;

  // The values
  repeated double values = 3;
}

// Collection Long Matcher
message CollectionLongMatcher {
  // The property key
  string key = 1;

  // The operator
  CollectionOperator operator = 2;

  // The values
  repeated int64 values = 3;
}

// Collection String Matcher
message CollectionStringMatcher {
  // The property key
  string key = 1;

  // The operator
  CollectionOperator operator = 2;

  // The values
  repeated string values = 3;
}

// Collection Reference Matcher
message CollectionReferenceMatcher {
  // The Dynamic Value to reference
  string dynamic_value = 1;

  // The operator
  CollectionOperator operator = 2;

  // The variants
  repeated string variants = 3;
}

// Collection Version Matcher
message CollectionVersionMatcher {
  // The property key
  string key = 1;

  // The operator
  CollectionOperator operator = 2;

  // The values
  repeated string values = 3;
}

// Scalar Bool Matcher
message ScalarBoolMatcher {
  // The property key
  string key = 1;

  // The operator
  ScalarOperator operator = 2;

  // The values
  bool value = 3;
}

// Scalar Double Matcher
message ScalarDoubleMatcher {
  // The property key
  string key = 1;

  // The operator
  ScalarOperator operator = 2;

  // The values
  double value = 3;
}

// Scalar Long Matcher
message ScalarLongMatcher {
  // The property key
  string key = 1;

  // The operator
  ScalarOperator operator = 2;

  // The values
  int64 value = 3;
}

// Scalar Reference Matcher
message ScalarReferenceMatcher {
  // The Dynamic Value to reference
  string dynamic_value = 1;

  // The operator
  ScalarOperator operator = 2;

  // The variant
  string variant = 3;
}

// Scalar String Matcher
message ScalarStringMatcher {
  // The property key
  string key = 1;

  // The operator
  ScalarOperator operator = 2;

  // The values
  string value = 3;
}

// Scalar Version Matcher
message ScalarVersionMatcher {
  // The property key
  string key = 1;

  // The operator
  ScalarOperator operator = 2;

  // The values
  string value = 3;
}

// Not Matcher
message NotMatcher {
  // Match
  Matcher matcher = 1;
}

// Fixed Matcher
message FixedMatcher {
  // Match
  bool match = 1;
}
