syntax = "proto3";

package monitor_crud_service.v1;

option go_package = "github.com/doordash/services-protobuf/generated/slo-service/monitor_crud_service";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.monitor_crud_service";

// Provides an API for managing monitors.
service MonitorCrudService {
  // CreateMonitor creates a new Monitor
  rpc CreateMonitor(CreateMonitorRequest) returns (CreateMonitorResponse) {}
  // GetMonitor returns a specific Monitor
  rpc GetMonitor(GetMonitorRequest) returns (GetMonitorResponse) {}
  // UpdateMonitor updates a specific Monitor
  rpc UpdateMonitor(UpdateMonitorRequest) returns (UpdateMonitorResponse) {}
  // DeleteMonitor deletes a specific Monitor
  rpc DeleteMonitor(DeleteMonitorRequest) returns (DeleteMonitorResponse) {}
  // ListMonitors returns all Monitors and allows for optional filtering
  rpc ListMonitors(ListMonitorsRequest) returns (ListMonitorsResponse) {}
}

//request message for CreateMonitor
message CreateMonitorRequest {
  // Required, monitor to create
  Monitor monitor = 1;
  // Required. service and app is used to identify github dir to store new alerts
  string service = 2;
  // Optional, but recommended.
  string app = 3;
  // Required, type of monitor to create
  MonitorType type = 4;
}

// Monitor fields
message Monitor {
  // Required, name for the monitor
  string name = 1;
  // Required, collection id that monitor belongs to
  string collection_id = 2;
  // Required, query for the monitor
  string query = 3;
  // Required, series condition for monitor trigger
  SeriesConditions series_condition = 4;
  // Optional, notification policy to override from that of collection
  string notification_policy_id = 5;
  // Optional, schedule to evaluated monitor
  Schedule schedule = 6;
  // Optional, settings to group signal
  SignalGrouping signal_grouping = 7;
  // Optional, labels for monitor
  repeated Label labels = 8;
  // Optional, annotations for monitor
  repeated Annotation annotations = 9;
  // Optional, interval for monitor. Default 60s
  string interval = 10;
}

// Optional, label for monitor
message Label {
  // Required, name of label
  string name = 1;
  // Required, value of label
  string value = 2;
}

// Optional, annotation for monitor
message Annotation {
  // Required, name of annotation
  string name = 1;
  // Required, value of annotation
  string value = 2;
}

// series_condition for a monitor
message SeriesConditions {
  // Required, conditions for the monitor to trigger
  repeated Condition conditions = 1;
  // Optional, settings to override trigger condition
  Override override = 2;
}

// Required, condition for series_condition
message Condition {
  // Required, severity of condition
  string severity = 1;
  // Required, threshold for condition to fire
  float value = 2;
  // Required, operator to use when comparing the query result versus the threshold
  string op = 3;
  // Optional, time the query needs to fail the condition check before an alert is triggered
  string sustain = 4;
  // Required, time the query needs to no longer fire before resolving
  string resolve_sustain = 5;
}

// Optional, override sets of condition to series with matching labels
message Override {
  // Required, one or more matchers for labels on a series
  repeated LabelMatcher label_matcher = 1;
  // Required, condition for override
  Condition condition = 2;
}

// Required, matchers for labels on a series to override
message LabelMatcher {
  // Required, name of the label
  string name = 1;
  // Required, value of the label
  string value = 2;
  // Required, how to match the label
  string type = 3;
}

// Optional, monitors only evaluated during schedule
message Schedule {
  // Required, timezone for the schedule
  string timezone = 1;
  // Required, time range to evaluate monitor
  repeated ScheduleRange range = 2;
}

// Required, time range for schedule
message ScheduleRange {
  // Required, day of the week to evaluate monitor
  string day = 1;
  // Required, time of the day to start evaluate monitor
  string start = 2;
  // Required, time of the day to end evaluate monitor
  string end = 3;
}

// Optional, signal grouping
message SignalGrouping {
  // Optional, list of labels to group
  repeated string label_names = 1;
  // To trigger monitor per series
  bool signal_per_series = 2;
}

//response message for CreateMonitor
message CreateMonitorResponse {
  // UUID of monitor
  string uuid = 1;
}

//request message for GetMonitor
message GetMonitorRequest {
  // Required, uuid to get monitor. Currently the service has a cache that maps uuid to monitor/slos
  string uuid = 1;
  // Optional, name of monitor
  string name = 2;
}

//response message for GetMonitor
message GetMonitorResponse {
  // UUID of monitor
  string uuid = 1;
  // monitors
  Monitor monitor = 2;
}

//request message for UpdateMonitor
message UpdateMonitorRequest {
  // UUID of monitor
  string uuid = 1;
  // monitor fields
  Monitor monitor = 2;
}

//response message for UpdateMonitor
message UpdateMonitorResponse {
  // Update success status
  bool success = 1;
  // monitor updates
  Monitor monitor = 2;
}

//request message for DeleteMonitor
message DeleteMonitorRequest {
  // UUID of monitor
  string uuid = 1;
}

//response message for DeleteMonitor
message DeleteMonitorResponse {
  // Update success status
  bool success = 1;
}

//request message for ListMonitors
message ListMonitorsRequest {
  // Optionally scope by service
  string service = 1;
  // Optionally scope by app
  string app = 2;
  // Optionally scope by owner
  string owner = 3;
}

//response message for ListMonitors
message ListMonitorsResponse {
  // List of monitors
  repeated Monitor monitors = 1;
}

// MonitorType is the type of monitors to create (based on what we have in terraform-cs-alert-module)
enum MonitorType {
  // MONITOR_TYPE_UNSPECIFIED don't use
  MONITOR_TYPE_UNSPECIFIED = 0;
  // MONITOR_TYPE_DEFAULT is a basic monitor
  MONITOR_TYPE_DEFAULT = 1;
  // MONITOR_TYPE_JST_CELLS cell templates for jst alerts
  MONITOR_TYPE_JST_CELLS = 2;
  // MONITOR_TYPE_JST_GQL_CELLS cell template for jst alerts
  MONITOR_TYPE_JST_GQL_CELLS = 3;
  // MONITOR_TYPE_JST_GQL cell template for jst alerts
  MONITOR_TYPE_JST_GQL = 4;
  // MONITOR_TYPE_JST cell template for jst alerts
  MONITOR_TYPE_JST = 5;
  // MONITOR_TYPE_JVM_CELLS template for jvm alerts
  MONITOR_TYPE_JVM_CELLS = 6;
  // MONITOR_TYPE_JVM template for jvm alerts
  MONITOR_TYPE_JVM = 7;
  // MONITOR_TYPE_K8S_ALL_CLUSTERS template for k8s health alerts
  MONITOR_TYPE_K8S_ALL_CLUSTERS = 8;
  // MONITOR_TYPE_K8S_AUTOSCALING template for k8s health alerts
  MONITOR_TYPE_K8S_AUTOSCALING = 9;
  // MONITOR_TYPE_K8S_CELLS template for k8s health alerts
  MONITOR_TYPE_K8S_CELLS = 10;
  // MONITOR_TYPE_K8S_PER_ENVIRONMENT template for k8s health alerts
  MONITOR_TYPE_K8S_PER_ENVIRONMENT = 11;
  // MONITOR_TYPE_K8S template for k8s health alerts
  MONITOR_TYPE_K8S = 12;
  // MONITOR_TYPE_LOG_USAGE templates for log usage alerts per environment and log identifier
  MONITOR_TYPE_LOG_USAGE = 13;
  // MONITOR_TYPE_NODE_HTTP_CLIENT configuring alerts for Node.js services using the http-client http-client
  MONITOR_TYPE_NODE_HTTP_CLIENT = 14;
  // MONITOR_TYPE_NODEJS_CELLS cell aware alert templates for node.js
  MONITOR_TYPE_NODEJS_CELLS = 15;
  // MONITOR_TYPE_NODEJS_HTTP_CIRCUIT_CELLS configuring cell-compatible circuit breaker alerts for for @doordash/http clients
  MONITOR_TYPE_NODEJS_HTTP_CIRCUIT_CELLS = 16;
  // MONITOR_TYPE_NODEJS_HTTP_CLIENT_CELLS configuring cell-compatible latency and error rate alerts for for @doordash/http clients
  MONITOR_TYPE_NODEJS_HTTP_CLIENT_CELLS = 17;
  // MONITOR_TYPE_NODEJS configuring alerts for Node.js services collecting runtime metrics via prom-client
  MONITOR_TYPE_NODEJS = 18;
  // MONITOR_TYPE_PULSE configuring alerts based on metrics from https://github.com/doordash/doordash-pulse
  MONITOR_TYPE_PULSE = 19;
  // MONITOR_TYPE_SERVICE_MESH configuring alerts on service mesh
  MONITOR_TYPE_SERVICE_MESH = 20;
  // MONITOR_TYPE_SYNTHETIC_MONITORING_PROBES alerts on probe health
  MONITOR_TYPE_SYNTHETIC_MONITORING_PROBES = 21;
  // MONITOR_TYPE_SYNTHETIC_MONITORING_SCRIPT_PROBES alerts on probe health
  MONITOR_TYPE_SYNTHETIC_MONITORING_SCRIPT_PROBES = 22;
  // MONITOR_TYPE_TRAFFIC_ROUTER alerts template on traffic router health (failure and unhealthy)
  MONITOR_TYPE_TRAFFIC_ROUTER = 23;
}
