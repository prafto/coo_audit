syntax = "proto3";

package slo.v1;

option go_package = "github.com/doordash/services-protobuf/generated/slo-service";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.slo";

// API for managing SLOs.
service SLOService {
  //// SLO CRUD Operations ////
  // Creates a new SLO
  rpc CreateSLO(CreateSLORequest) returns (CreateSLOResponse) {}
  // Returns a specific SLO including all additional fields and metadata
  rpc GetSLO(GetSLORequest) returns (GetSLOResponse) {}
  // Updates a specific SLO
  rpc UpdateSLO(UpdateSLORequest) returns (UpdateSLOResponse) {}
  // Deletes a specific SLO
  rpc DeleteSLO(DeleteSLORequest) returns (DeleteSLOResponse) {}
  // ListSLOs returns SLO UUIDs and allows for optional filtering
  rpc ListSLOs(ListSLOsRequest) returns (ListSLOsResponse) {}
  // ListOwnedSLOs returns all SLOs owned by the given software asset DDRNs
  rpc ListOwnedSLOs(ListOwnedSLOsRequest) returns (ListOwnedSLOsResponse) {}
  /////////////////////////////

  //// Batch SLO Operations ////
  // Return multiple SLOs including all additional fields and metadata
  rpc GetSLOs(GetSLOsRequest) returns (GetSLOsResponse) {}
  //////////////////////////////

  //// SLO Metadata Operations ////
  // Lists valid SLO types
  rpc ListValidTypes(ListValidTypesRequest) returns (ListValidTypesResponse) {}
  // Lists the required fields for a given SLO type
  rpc ListRequiredFields(ListRequiredFieldsRequest) returns (ListRequiredFieldsResponse) {}
  // Lists the valid fields for a given SLO type
  rpc ListValidFields(ListValidFieldsRequest) returns (ListValidFieldsResponse) {}
  /////////////////////////////////

  //// Workspace Operations ////
  // Lists all SLO workspaces
  rpc ListWorkspaces(ListWorkspacesRequest) returns (ListWorkspacesResponse) {}
  // Generates fresh Terraform templates and applies SLOs for a given workspace
  rpc UpdateWorkspace(UpdateWorkspaceRequest) returns (UpdateWorkspaceResponse) {}
  //////////////////////////////

  // GetDefaults returns the default SLO fields for a given service/app combination
  // TODO add in later
  //rpc GetDefaults(GetDefaultsRequest) returns (GetDefaultsResponse) {}
  // UpdateDefaults updates the default SLO fields for a given service/app combination
  // TODO add in later
  //rpc UpdateDefaults(UpdateDefaultsRequest) returns (UpdateDefaultsResponse) {}
  // DeleteDefaults deletes the SLO defaults for a given service/app combination
  // TODO add in later
  //rpc DeleteDefaults(DeleteDefaultsRequest) returns (DeleteDefaultsResponse) {}
}

// SLO
message SLO {
  // Uniquely identifies an SLO definition
  string uuid = 1;
  // Configuration fields that define this SLO, directly maps to Terraform input variables
  map<string, string> fields = 2;
  // Metadata for each SLO component
  repeated Metadata metadata = 3;
}

// Metadata - Resultant SLO Metadata
message Metadata {
  // Live labels from slo_info metric in Chronosphere
  map<string, string> labels = 1;
}

// Request message for CreateSLO
message CreateSLORequest {
  // Required - The type of SLO to be created. Must be one of the valid types returned by ListValidTypes
  string type = 1;
  // Required - The configuration fields that define this SLO.
  // Must contain all required fields returned by ListRequiredFields
  // Must contain only valid fields returned by ListValidFields
  map<string, string> fields = 2;
}

// Response message for CreateSLO
message CreateSLOResponse {
  // uuid is unique identifier for a particular SLO.
  string uuid = 1;
}

// Request message for GetSLO
message GetSLORequest {
  // Required - The uuid of the SLO definition to get
  string uuid = 1;
}

// Response message for GetSLO
message GetSLOResponse {
  // SLO definition and metadata
  SLO slo = 1;
}

// Request message for BatchGetSLO
message GetSLOsRequest {
  // UUIDs for SLO definitions to get
  repeated string uuid = 1;
}

// Response message for BatchGetSLO
message GetSLOsResponse {
  // SLO definitions and metadata
  repeated SLO slo = 1;
}

// Request message for UpdateSLO
message UpdateSLORequest {
  // Required - The uuid of the SLO definition to update
  string uuid = 1;
  // Required - Configuration fields that define this SLO
  // Must contain all required fields returned by ListRequiredFields
  // Must contain only valid fields returned by ListValidFields
  map<string, string> fields = 2;
}

// Response message for UpdateSLO
message UpdateSLOResponse {}

// Request message for ListSLOs
message ListSLOsRequest {
  // SLO fields and metadata values to filter by
  // EG "service: my-service"
  // EG "ddrn: ddrn::software::1234"
  map<string, string> fields = 1;
}

// Response message for ListSLOs
message ListSLOsResponse {
  // UUIDs for SLO definitions that match the field(s)
  repeated string uuid = 1;
}

// Request message for ListOwnedSLOs
message ListOwnedSLOsRequest {
  // The DDRNs of the software assets to list the SLOs for
  repeated string software_asset_ddrns = 1; // eg: [ddrn::software::1234]
}

// The uuids of the SLOs associated with the given software assets
message ListOwnedSLOsResponse {
  // DDRN -> SLO UUIDs mappings
  repeated OwnedSLO owned_slos = 1;
}

// DDRN -> SLO UUIDs mapping
message OwnedSLO {
  // DDRN of the software asset that owns the SLOs
  string software_asset_ddrn = 1;
  // UUIDs of the SLOs associated with the software asset
  repeated string uuids = 2; // eg: [dc537d27-db24-40fe-9681-2de6b3537b28]
}

// Request message for DeleteSLO
message DeleteSLORequest {
  // Required - The uuid of the SLO definition to delete
  string uuid = 1;
}

// Response message for DeleteSLO
message DeleteSLOResponse {}

// Request message for GetValidSLOTypes
message ListValidTypesRequest {}

// Response message for GetValidSLOTypes
message ListValidTypesResponse {
  // Valid SLO Types
  repeated string types = 1;
}

// Request message for ListRequiredFields
message ListRequiredFieldsRequest {
  // Required - The type of SLO to list required fields for
  string type = 1;
}

// Response message for ListRequiredFields
message ListRequiredFieldsResponse {
  // SLO Fields that are required for this SLO type
  repeated string fields = 1;
}

// Request message for ListValidFields
message ListValidFieldsRequest {
  // Required - The type of SLO to list valid fields for
  string type = 1;
}

// Response message for ListValidFields
message ListValidFieldsResponse {
  // Valid SLO Fields for this SLO type
  repeated string fields = 1;
}

// Identifies a workspace in a request
message WorkspaceIdentifierRequest {
  // Required - Identifies a workspace
  oneof identifier {
    // Optional - Name of the workspace/folder name in alerts/automated/*, IE "service", "service_-_app"
    string name = 1;
    // Optional - ServiceAppIdentifier format of identifier
    ServiceAppIdentifier service_app = 2;
    // Could support a potential future identifier type such as ddrn/other if we move away from service_-_app named folders in alerts/automated/*
  }
}

// Identifies a workspace in a response
message WorkspaceIdentifier {
  // Name of the workspace/folder name in alerts/automated/*, IE "service", "service_-_app"
  string name = 1;
  // Optional - ServiceAppIdentifier format of identifier
  ServiceAppIdentifier service_app = 2;
}

// ServiceAppIdentifier - Identifies a service/app combination
message ServiceAppIdentifier {
  // Required
  string service = 1;
  // Optional
  string app = 2;
}

// Request message for ListWorkspaces
message ListWorkspacesRequest {}

// Response message for ListWorkspaces
message ListWorkspacesResponse {
  // Workspaces
  repeated WorkspaceIdentifier workspace = 1;
}

// Request message for UpdateWorkspace
message UpdateWorkspaceRequest {
  // Required - Identifies a workspace
  WorkspaceIdentifierRequest workspace = 1;
}

// Response message for UpdateWorkspace
message UpdateWorkspaceResponse {}

// Request message for UpdateDefaults
/*
   message UpdateDefaultsRequest {
     // Required
     string service = 1;
     // Optional, but recommended
     string app = 2;
     // Required SLO Default Fields to Update
     map<string, string> fields = 3;
   }
*/

// Response message for UpdateDefaults
/*
   message UpdateDefaultsResponse {}
*/

// Request message for GetDefaults
/*
   message GetDefaultsRequest {
     // Required
     string service = 1;
     // Optional, but recommended
     string app = 2;
   }
*/

// Response message for GetDefaults
/*
   message GetDefaultsResponse {
     // Default SLO Fields
     map<string, string> fields = 1;
   }
*/

// Request message for DeleteDefaults
// Deletes the SLO Defaults for a given service/app combination
/*
   message DeleteDefaultsRequest {
     // Required
     string service = 1;
     // Optional, but recommended
     string app = 2;
   }
*/

// Response message for DeleteDefaults
/*
   message DeleteDefaultsResponse {}
*/
