syntax = "proto3";

package tree_metrics.v1;

import "google/protobuf/timestamp.proto";

option go_package = "tree_metrics";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.tree_metrics";

// TreeMetric attribute collection verbosity levels.
enum TreeMetricVerbosity {
  // Info level.
  TREE_METRIC_VERBOSITY_UNSPECIFIED = 0;
  // Info level.
  TREE_METRIC_VERBOSITY_INFO = 1;
  // Debugging level.
  TREE_METRIC_VERBOSITY_DEBUG = 2;
  // Trace 1 level.
  TREE_METRIC_VERBOSITY_TRACE_1 = 3;
  // Trace 2 level.
  TREE_METRIC_VERBOSITY_TRACE_2 = 4;
  // Trace 3 level.
  TREE_METRIC_VERBOSITY_TRACE_3 = 5;
}

// A frame is a logical unit of execution for tree metrics.
message FrameMessage {
  // Name assigned to this instance of TreeMetrics.
  string name = 1;
  // Start time of the frame.
  int64 start_wall_time_ns = 2;
  // End time of the frame.
  int64 end_wall_time_ns = 3;
  // the wall time it took for this frame to execute.
  int64 wall_time_ns = 4;
  // the cpu time it took for this frame to execute.
  int64 cpu_time_ns = 5;
  // the memory allocated in order to execute this request.
  int64 memory_allocated_bytes = 6;
  // all the counters initialized for this TreeMetrics object.
  map<string, CounterValue> counters = 7;
  // all the attributes initialized for this TreeMetrics object where task-name is a name of one of the tasks.
  map<string, AttributeValue> attributes = 8;
  // list of frames executed as part of servicing this request.
  repeated FrameMessage child_frames = 9;
  // list of tasks (like a frame but executed asynchronously) executed as part of servicing this Frame.
  repeated FrameMessage child_tasks = 10;
  // list of remote tasks (like a frame but executed remotely) executed as part of servicing this Frame.
  repeated FrameMessage remote_tasks = 11;
}

// Value of a counter.
message CounterValue {
  // All possible counter values.
  oneof value {
    // 32-bit integer value.
    int32 int32_value = 1;
    // 64-bit integer value.
    int64 int64_value = 2;
    // Single-precision float-point value.
    float float_value = 3;
    // Double-precision float-point value.
    double double_value = 4;
  }
  // List of tags associated with the counter.
  repeated string tags = 10;
}

// Value of a counter.
message AttributeValue {
  // Attribute value.
  string value = 1;
  // List of tags associated with the attribute.
  repeated string tags = 10;
}
