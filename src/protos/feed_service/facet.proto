syntax = "proto3";
package feed_service;

import "common/service_client_config.proto";
import "consumer_service/cops_consumer.proto";
import "doordash.api/annotations.proto";
import "doordash.api/field_injection.proto";
import "doordash.api/field_validate.proto";
import "feed_service/common.proto";
import "feed_service/facet_response.proto";
import "feed_service/facet_response_v2.proto";
import "google/api/annotations.proto";
import "google/protobuf/wrappers.proto";
import "lego.response/lego_response.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_outer_classname = "FacetFeedApi";
option java_package = "com.doordash.rpc.feed_service.facet";

// Project Codename: Lego
service FacetFeedService {
  option (doordash.api.service) = {
    url: "feed-service-web.service.prod.ddsd"
    name: "FacetFeedService"
    port: 50051
    name_spaces: ["feed"]
    owner: {
      id: "discovery-experience-alerts"
      name: "feed"
      slack_channel: "#eng-discovery-experience-oncall"
      email_alias: "eng-discovery-experience@doordash.com"
    }
    target_products: [CX]
  };

  option (service_client.client_config).circuit_breaker_config.minimum_request_threshold = 1000;
  option (service_client.client_config).circuit_breaker_config.counter_sliding_window_millis = 20000;
  option (service_client.client_config).circuit_breaker_config.circuit_open_window_millis = 1000;
  option (service_client.client_config).response_attempt_timeout_millis = 5000;
  rpc GetFacetFeed(GetFacetFeedRequest) returns (GetFacetFeedResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 4000;

    option (google.api.http) = {get: "/cx/v2/feed"};
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [
        CX_USER,
        CX_GUEST
      ]
    };
    option (doordash.api.inject_headers) = {
      inject: [
        {field: "platform"},
        {field: "is_guest"},
        {field: "is_employee"},
        {field: "cx_id"},
        {field: "cx_geo_submarket_id"}]
    };
    option (doordash.api.forward_headers) = {
      forward: [
        {field: "X-ENABLE-VERBOSE-LOGGING"},
        {field: "X-FACETS-VERSION"},
        {field: "dd-user-agent"},
        {field: "serviceCall"},
        {field: "X-CHANNEL-ID"},
        {field: "X-DEVICE-ID"},
        {field: "X-SESSION-ID"},
        {field: "COOKIES"},
        {field: "X-ENABLE-FACETS"},
        {field: "ENABLE-WEB-DEALS-HUB"},
        {field: "dd_device_id"},
        {field: "feed-service-default"},
        {field: "ENABLE-ALCOHOL-SELF-EXCLUSION-V2"},
        {field: "Deals-Feed-Version"},
        {field: "X-FACETS-FEATURE-SAVE-FOR-LATER-ITEMS"},
        {field: "X-FACETS-FEATURE-BACKEND-DRIVEN-BADGES"},
        {field: "X-SUPPORT-BE-DRIVEN-USER-PREFERENCES"},
        {field: "X-SUPPORT-SCHEDULE-SAVE"},
        {field: "X-SUPPORT-EXTERNAL-STORE-LISTINGS"},
        {field: "X-FACETS-FEATURE-NEW-BADGES"},
        {field: "X-FACETS-FEATURE-CUISINE-FILTER-V2"},
        {field: "X-FACETS-FEATURE-STORE-CELL-REDESIGN-ROUND-1"},
        {field: "X-FACETS-FEATURE-STORE-CELL-REDESIGN-ROUND-2"},
        {field: "X-FACETS-FEATURE-STORE-CELL-REDESIGN-ROUND-3"},
        {field: "X-FACETS-FEATURE-PRODUCT-VARIANTS"},
        {field: "X-FACETS-PLATFORM"},
        {field: "jwt"},
        {field: "X-FEED-SERVICE-CONTEXT-OVERRIDE"},
        {field: "X-DD-MENU-LANGUAGE"},
        {field: "X-DP-PREVIEW-VISIBLE"},
        {field: "X-FACETS-FEATURE-STORE-CAROUSEL-REDESIGN-ROUND-1"},
        {field: "IS_DEBUG"},
        {field: "request-id"},
        {field: "V3-EXPLORE"},
        {field: "X-FACETS-FEATURE-TALL-LOGO-CAROUSEL"},
        {field: "X-FEED-SERVICE-METADATA-OVERRIDE"},
        {field: "X-DP-PREVIEW-ELIGIBLE"},
        {field: "X-FACETS-FEATURE-ALWAYS-OPEN-NV"},
        {field: "X-STORE-DIETARY-TAGGING-ENABLED"},
        {field: "X-DEVICE-CONTEXT"}]
    };
  }

  rpc GetMosaicFeed(GetMosaicFeedRequest) returns (GetMosaicFeedResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 4000;

    option (google.api.http) = {get: "/cx/v2/mosaic_feed"};
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [
        CX_USER,
        CX_GUEST
      ]
    };
    option (doordash.api.inject_headers) = {
      inject: [
        {field: "platform"},
        {field: "is_guest"},
        {field: "is_employee"},
        {field: "cx_id"},
        {field: "cx_geo_submarket_id"}]
    };
    option (doordash.api.forward_headers) = {
      forward: [
        {field: "X-ENABLE-VERBOSE-LOGGING"},
        {field: "X-FACETS-VERSION"},
        {field: "dd-user-agent"},
        {field: "serviceCall"},
        {field: "X-CHANNEL-ID"},
        {field: "X-DEVICE-ID"},
        {field: "X-SESSION-ID"},
        {field: "COOKIES"},
        {field: "X-ENABLE-FACETS"},
        {field: "ENABLE-WEB-DEALS-HUB"},
        {field: "dd_device_id"},
        {field: "feed-service-default"},
        {field: "ENABLE-ALCOHOL-SELF-EXCLUSION-V2"},
        {field: "Deals-Feed-Version"},
        {field: "X-FACETS-FEATURE-SAVE-FOR-LATER-ITEMS"},
        {field: "X-FACETS-FEATURE-BACKEND-DRIVEN-BADGES"},
        {field: "X-SUPPORT-BE-DRIVEN-USER-PREFERENCES"},
        {field: "X-SUPPORT-SCHEDULE-SAVE"},
        {field: "X-SUPPORT-EXTERNAL-STORE-LISTINGS"},
        {field: "X-FACETS-FEATURE-NEW-BADGES"},
        {field: "X-FACETS-FEATURE-CUISINE-FILTER-V2"},
        {field: "X-FACETS-FEATURE-STORE-CELL-REDESIGN-ROUND-1"},
        {field: "X-FACETS-FEATURE-STORE-CELL-REDESIGN-ROUND-2"},
        {field: "X-FACETS-FEATURE-STORE-CELL-REDESIGN-ROUND-3"},
        {field: "X-FACETS-FEATURE-PRODUCT-VARIANTS"},
        {field: "X-FACETS-PLATFORM"},
        {field: "jwt"},
        {field: "X-FEED-SERVICE-CONTEXT-OVERRIDE"},
        {field: "X-DD-MENU-LANGUAGE"},
        {field: "X-DP-PREVIEW-VISIBLE"},
        {field: "X-FACETS-FEATURE-STORE-CAROUSEL-REDESIGN-ROUND-1"},
        {field: "IS_DEBUG"},
        {field: "request-id"},
        {field: "V3-EXPLORE"},
        {field: "X-FACETS-FEATURE-TALL-LOGO-CAROUSEL"},
        {field: "X-FEED-SERVICE-METADATA-OVERRIDE"},
        {field: "X-DP-PREVIEW-ELIGIBLE"},
        {field: "X-FACETS-FEATURE-ALWAYS-OPEN-NV"},
        {field: "X-STORE-DIETARY-TAGGING-ENABLED"},
        {field: "X-DEVICE-CONTEXT"}]
    };
  }

  // Migration from Facet to FacetV2
  rpc GetFacetFeedV2(GetFacetFeedV2Request) returns (GetFacetFeedResponseV2) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 4000;
  }
  rpc GetSearchFacetFeed(GetSearchFacetFeedRequest) returns (GetFacetFeedResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 4500;
  }
  rpc GetPharmaTransferFacetFeed(GetPharmaTransferFacetFeedRequest) returns (GetFacetFeedResponse);

  // X-Vertical Home Page
  rpc GetHomePageFacetFeed(GetHomePageFacetFeedRequest) returns (GetFacetFeedResponseV2) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 5000;
    option (service_client.client_method_config).retry_config.max_attempts = 1;
  }

  // Vertical Landing Page
  rpc GetVerticalPageFacetFeed(GetVerticalPageFacetFeedRequest) returns (GetFacetFeedResponseV2) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 5000;
  }

  // Core search and cuisine filter with Lego v2 response
  rpc GetSearchWithFilterFacetFeed(GetSearchWithFilterFacetFeedRequest) returns (GetFacetFeedResponseV2) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 5000;
  }

  // Search for open stores matching query. returns as carousel with Lego v2 response
  // Use case outlined here: tinyurl.com/bddy68y7
  rpc GetOpenStoresCarouselSearchFacetFeed(GetOpenStoresCarouselSearchFacetFeedRequest) returns (GetFacetFeedResponseV2) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 5000;
  }

  // Autocomplete with Lego V2 response
  rpc GetAutocompleteFacetFeed(GetAutocompleteFacetFeedRequest) returns (GetFacetFeedResponseV2) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 5000;

    option (google.api.http) = {get: "/cx/v3/feed/search/autocomplete"};
    option (doordash.api.endpoint) = {
      owner: {
        id: "search-eq"
        name: "search-eq"
        slack_channel: "#search-eq-oncall"
        email_alias: "search-eq-eng@doordash.com"
      }
      tier: T1
      lifecycle: DEV
      authorization: [
        CX_USER,
        CX_GUEST
      ]
    };
    option (doordash.api.inject_headers) = {
      inject: [
        {field: "platform"},
        {field: "is_guest"},
        {field: "is_employee"},
        {field: "cx_id"},
        {field: "cx_geo_submarket_id"}]
    };
    option (doordash.api.forward_headers) = {
      forward: [
        {field: "dd_device_id"},
        {field: "DD-GEO-INFO"}]
    };
  }

  // Show multiple locations with Lego V2 response
  rpc GetShowMultipleLocationsFacetFeed(GetShowMultipleLocationsFacetFeedRequest) returns (GetFacetFeedResponseV2) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 5000;
  }

  // Saved stores landing page
  rpc GetSavedStoresFacetFeed(GetSavedStoresFacetFeedRequest) returns (GetFacetFeedResponseV2);

  // Saved lists landing page
  rpc GetSavedListsFacetFeed(GetSavedListsFacetFeedRequest) returns (GetFacetFeedResponseV2);

  // Offers Hub
  rpc GetOffersVerticalPageFacetFeed(GetOffersVerticalPageFacetFeedRequest) returns (GetFacetFeedResponseV2);
  // "See All" for personalized offers carousels
  rpc GetOffersCarouselPageFacetFeed(GetOffersCarouselPageFacetFeedRequest) returns (GetFacetFeedResponseV2) {
    option (google.api.http) = {get: "/cx/v3/feed/offers_list"};
    option (doordash.api.endpoint) = {
      owner: {
        id: "services-to-provide-dasher-promotion"
        name: "services-to-provide-dasher-promotion"
        slack_channel: "#promo-platform-working-group"
        email_alias: "promo-platform-working-group@doordash.com"
      }
      tier: T1
      lifecycle: DEV
      authorization: [
        CX_USER,
        CX_GUEST
      ]
    };
    option (doordash.api.inject_headers) = {
      inject: [
        {field: "platform"},
        {field: "is_guest"},
        {field: "is_employee"},
        {field: "cx_id"},
        {field: "cx_geo_submarket_id"}]
    };
    option (doordash.api.forward_headers) = {
      forward: [
        {field: "X-FACETS-FEATURE-NEW-BADGES"},
        {field: "X-FACETS-FEATURE-BACKEND-DRIVEN-BADGES"},
        {field: "X-DP-PREVIEW-VISIBLE"},
        {field: "X-FEED-SERVICE-CONTEXT-OVERRIDE"},
        {field: "IS_DEBUG"},
        {field: "dd-user-agent"}]
    };
  }

  // Affordable Meal Page
  rpc GetAffordableMealPageFacetFeed(GetAffordableMealPageFacetFeedRequest) returns (GetFacetFeedResponseV2) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 5000;

    option (google.api.http) = {get: "/cx/v3/feed/affordable_meal"};
    option (doordash.api.endpoint) = {
      owner: {
        id: "owner-of-meal-box"
        name: "owner-of-meal-box"
        slack_channel: "#ask-affordable-meals"
        email_alias: "affordable-meals@doordash.com"
      }
      tier: T1
      lifecycle: PROD
      authorization: [
        CX_USER,
        CX_GUEST
      ]
    };
    option (doordash.api.inject_headers) = {
      inject: [
        {field: "platform"},
        {field: "is_guest"},
        {field: "is_employee"},
        {field: "cx_id"},
        {field: "cx_geo_submarket_id"}]
    };
    option (doordash.api.forward_headers) = {
      forward: [
        {field: "dd_device_id"},
        {field: "DD-GEO-INFO"}]
    };
  }

  rpc GetItemCarouselPageFacetFeed(GetItemCarouselPageFacetFeedRequest) returns (GetFacetFeedResponseV2) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 5000;
  }

  // Store Info Page
  rpc GetStoreInfoPageFacet(GetStoreInfoPageFacetRequest) returns (GetFacetFeedResponseV2) {
    option (google.api.http) = {get: "/cx/v3/feed/store_info/{store_id}"};
    option (doordash.api.endpoint) = {
      owner: {
        id: "ordering-experience"
        name: "feed-service"
        slack_channel: "#ask-ox"
        email_alias: "store-exp-eng@doordash.com"
      }
      tier: T1
      lifecycle: DEV
      authorization: [
        CX_USER,
        CX_GUEST,
        CX_LITE_GUEST
      ]
    };
    option (doordash.api.inject_headers) = {
      inject: [
        {field: "platform"},
        {field: "is_guest"},
        {field: "is_employee"},
        {field: "cx_id"},
        {field: "cx_geo_submarket_id"}]
    };
    option (doordash.api.forward_headers) = {
      forward: [
        {field: "dd_device_id"},
        {field: "client_id"},
        {field: "X-STORE-DIETARY-TAGGING-ENABLED"},
        {field: "X-FACETS-VERSION"}]
    };
  }

  rpc GetTopSearchFacetFeed(GetTopSearchFacetFeedRequest) returns (GetFacetFeedResponseV2);

  // Item See All Vertical Landing Page
  rpc GetItemSeeAllPageFacetFeed(GetItemSeeAllPageFacetFeedRequest) returns (GetFacetFeedResponseV2) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 5000;

    option (google.api.http) = {get: "/cx/v3/feed/see_all_items"};
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [
        CX_USER,
        CX_GUEST
      ]
    };
    option (doordash.api.inject_headers) = {
      inject: [
        {field: "platform"},
        {field: "is_guest"},
        {field: "is_employee"},
        {field: "cx_id"},
        {field: "cx_geo_submarket_id"}]
    };
    option (doordash.api.forward_headers) = {
      forward: [
        {field: "X-FACETS-FEATURE-NEW-BADGES"},
        {field: "X-FACETS-FEATURE-BACKEND-DRIVEN-BADGES"},
        {field: "X-DP-PREVIEW-VISIBLE"},
        {field: "X-FEED-SERVICE-CONTEXT-OVERRIDE"},
        {field: "IS_DEBUG"},
        {field: "dd-user-agent"}]
    };
  }

  // Get Vertical Page URI. This is only used to serialize cursors and does not perform any validation
  rpc GetVerticalPageURI(GetVerticalPageURIRequest) returns (GetVerticalPageURIResponse);

  // Browse Page
  rpc GetBrowsePageFacetFeed(GetBrowsePageFacetFeedRequest) returns (GetFacetFeedResponseV2) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 5000;
  }

  // Cuisine See All Page
  rpc GetCuisineSeeAllPageFacetFeed(GetCuisineSeeAllPageFacetFeedRequest) returns (GetFacetFeedResponseV2) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 5000;
  }

  // Preference modal
  rpc GetPreferenceModalFacetFeed(GetPreferenceModalFacetFeedRequest) returns (GetFacetFeedResponseV2);

  // Homepage caoursel horizontal paginaiton
  rpc GetCarouselPaginatedFacetFeed(GetCarouselPaginatedFacetFeedRequest) returns (GetCarouselPaginatedFacetFeedResonse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 5000;
  }

  // Me Tab Page
  rpc GetMeTabPageFacetFeed(GetMeTabPageFacetFeedRequest) returns (GetFacetFeedResponseV2) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 5000;
  }

  // Realtime (V3) Recommendation Feed
  rpc GetRealtimeRecommendationFacetFeed(GetRealtimeRecommendationFacetFeedRequest) returns (GetFacetFeedResponseV2) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 5000;
    option (google.api.http) = {get: "/cx/v3/feed/realtime_recommendation"};
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: PROD
      authorization: [
        CX_USER,
        CX_GUEST
      ]
      target_products: [CX]
    };
    option (doordash.api.forward_headers) = {
      forward: [
        {field: "X-ENABLE-VERBOSE-LOGGING"},
        {field: "X-FACETS-VERSION"},
        {field: "dd-user-agent"},
        {field: "serviceCall"},
        {field: "X-CHANNEL-ID"},
        {field: "X-DEVICE-ID"},
        {field: "X-SESSION-ID"},
        {field: "COOKIES"},
        {field: "X-ENABLE-FACETS"},
        {field: "ENABLE-WEB-DEALS-HUB"},
        {field: "dd_device_id"},
        {field: "feed-service-default"},
        {field: "ENABLE-ALCOHOL-SELF-EXCLUSION-V2"},
        {field: "Deals-Feed-Version"},
        {field: "X-FACETS-FEATURE-SAVE-FOR-LATER-ITEMS"},
        {field: "X-FACETS-FEATURE-BACKEND-DRIVEN-BADGES"},
        {field: "X-SUPPORT-BE-DRIVEN-USER-PREFERENCES"},
        {field: "X-SUPPORT-SCHEDULE-SAVE"},
        {field: "X-SUPPORT-EXTERNAL-STORE-LISTINGS"},
        {field: "X-FACETS-FEATURE-NEW-BADGES"},
        {field: "X-FACETS-FEATURE-CUISINE-FILTER-V2"},
        {field: "X-FACETS-FEATURE-STORE-CELL-REDESIGN-ROUND-1"},
        {field: "X-FACETS-FEATURE-STORE-CELL-REDESIGN-ROUND-2"},
        {field: "X-FACETS-FEATURE-STORE-CELL-REDESIGN-ROUND-3"},
        {field: "X-FACETS-FEATURE-PRODUCT-VARIANTS"},
        {field: "X-FACETS-PLATFORM"},
        {field: "jwt"},
        {field: "X-FEED-SERVICE-CONTEXT-OVERRIDE"},
        {field: "X-DD-MENU-LANGUAGE"},
        {field: "X-DP-PREVIEW-VISIBLE"},
        {field: "X-FACETS-FEATURE-STORE-CAROUSEL-REDESIGN-ROUND-1"},
        {field: "IS_DEBUG"},
        {field: "request-id"},
        {field: "V3-EXPLORE"},
        {field: "X-FACETS-FEATURE-TALL-LOGO-CAROUSEL"},
        {field: "X-FEED-SERVICE-METADATA-OVERRIDE"},
        {field: "X-DP-PREVIEW-ELIGIBLE"},
        {field: "X-FACETS-FEATURE-ALWAYS-OPEN-NV"},
        {field: "X-STORE-DIETARY-TAGGING-ENABLED"},
        {field: "X-DEVICE-CONTEXT"},
        {field: "X-REALTIME-RECOMMENDATION-EVENTS"}]
    };
    option (doordash.api.inject_headers) = {
      inject: [
        {field: "platform"},
        {field: "is_employee"},
        {field: "cx_id"},
        {field: "is_guest"},
        {field: "cx_geo_submarket_id"},
        {field: "cx_geo_lng"},
        {field: "cx_geo_lat"},
        {field: "cx_geo_district_id"},
        {field: "cx_geo_time_zone"}]
    };
  }

  // Search Landing Page for Homepage
  rpc GetSearchLandingPageFacetFeed(GetSearchLandingPageFacetFeedRequest) returns (GetFacetFeedResponseV2) {
    option (google.api.http) = {get: "/cx/v3/feed/search/search_landing_page"};
    option (service_client.client_method_config).response_attempt_timeout_millis = 3000;
    option (doordash.api.endpoint) = {
      owner: {
        id: "search-eq"
        name: "search-eq"
        slack_channel: "#search-eq-oncall"
        email_alias: "search-eq-eng@doordash.com"
      }
      tier: T1
      lifecycle: PROD
      authorization: [
        CX_USER,
        CX_GUEST
      ]
      target_products: [CX]
    };
    option (doordash.api.inject_headers) = {
      inject: [
        {field: "platform"},
        {field: "is_employee"},
        {field: "cx_id"},
        {field: "is_guest"},
        {field: "cx_geo_submarket_id"},
        {field: "cx_geo_lng"},
        {field: "cx_geo_lat"},
        {field: "cx_geo_district_id"},
        {field: "cx_geo_time_zone"}]
    };
  }

  rpc GetTokenLandingPageFacetFeed(GetTokenLandingPageFacetFeedRequest) returns (GetFacetFeedResponseV2) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 5000;

    option (google.api.http) = {get: "/cx/v2/feed/token/{token_type}"};
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [CX_USER]
    };
    option (doordash.api.inject_headers) = {
      inject: [
        {field: "platform"},
        {field: "is_guest"},
        {field: "is_employee"},
        {field: "cx_id"},
        {field: "cx_geo_submarket_id"}]
    };
    option (doordash.api.forward_headers) = {
      forward: [
        {field: "X-FACETS-FEATURE-NEW-BADGES"},
        {field: "X-FACETS-FEATURE-BACKEND-DRIVEN-BADGES"},
        {field: "X-DP-PREVIEW-VISIBLE"},
        {field: "X-FEED-SERVICE-CONTEXT-OVERRIDE"},
        {field: "IS_DEBUG"},
        {field: "dd-user-agent"}]
    };
  }

  // if creating a new facet feed request, instead of copying and pasting the common fields,
  // use CommonFacetRequestFields and add on specific use case in your request message
}

message CommonFacetRequestFields {
  double lat = 1 [(doordash.api.validate.rules).missing_value = {action: FAIL}];
  double lng = 2 [(doordash.api.validate.rules).missing_value = {action: FAIL}];
  google.protobuf.Int64Value consumer_id = 3 [(doordash.api.inject_id) = CX_ID];
  int64 submarket_id = 4 [
    (doordash.api.inject_from_headers) = {
      field: "DD-LOCATION-CONTEXT.submarket_id",
      injection_rule: {
        cast_type: "int64",
        conversions: [
          DECODE_BASE64,
          JSON
        ]
      }
    },
    (doordash.api.inject) = {
      field: "cx_geo_submarket_id",
      injection_rule: {
        cast_type: "int64",
        default_value: "-1"
      }
    }
  ];
  int64 district_id = 5 [
    (doordash.api.inject_from_headers) = {
      field: "DD-LOCATION-CONTEXT.district_id",
      injection_rule: {
        cast_type: "int64",
        conversions: [
          DECODE_BASE64,
          JSON
        ]
      }
    },
    (doordash.api.inject) = {
      field: "cx_geo_district_id",
      injection_rule: {
        cast_type: "int64",
        default_value: "-1"
      }
    }
  ];
  google.protobuf.StringValue time_zone = 6 [
    (doordash.api.inject_from_headers) = {
      field: "DD-LOCATION-CONTEXT.timezone",
      injection_rule: {
        cast_type: "nullable_string",
        conversions: [
          DECODE_BASE64,
          JSON
        ]
      }
    },
    (doordash.api.inject) = {field: "cx_geo_time_zone"}
  ];
  google.protobuf.StringValue cursor = 7;
  repeated EFSFilter filters = 8;
}

message GetFacetFeedRequest {
  double lat = 1 [(doordash.api.validate.rules).missing_value = {action: FAIL}];
  double lng = 2 [(doordash.api.validate.rules).missing_value = {action: FAIL}];
  google.protobuf.Int64Value consumer_id = 3 [(doordash.api.inject_id) = CX_ID];
  int64 submarket_id = 4 [
    (doordash.api.inject_from_headers) = {
      field: "DD-LOCATION-CONTEXT.submarket_id",
      injection_rule: {
        cast_type: "int64",
        conversions: [
          DECODE_BASE64,
          JSON
        ]
      }
    },
    (doordash.api.inject) = {
      field: "cx_geo_submarket_id",
      injection_rule: {
        cast_type: "int64",
        default_value: "-1"
      }
    }
  ];
  int64 district_id = 5 [
    (doordash.api.inject_from_headers) = {
      field: "DD-LOCATION-CONTEXT.district_id",
      injection_rule: {
        cast_type: "int64",
        conversions: [
          DECODE_BASE64,
          JSON
        ]
      }
    },
    (doordash.api.inject) = {
      field: "cx_geo_district_id",
      injection_rule: {
        cast_type: "int64",
        default_value: "-1"
      }
    }
  ];
  google.protobuf.StringValue uri = 6 [(doordash.api.validate.rules).missing_value = {action: FAIL}];
  google.protobuf.StringValue time_zone = 7 [
    (doordash.api.inject_from_headers) = {
      field: "DD-LOCATION-CONTEXT.timezone",
      injection_rule: {
        cast_type: "nullable_string",
        conversions: [
          DECODE_BASE64,
          JSON
        ]
      }
    },
    (doordash.api.inject) = {field: "cx_geo_time_zone"}
  ];
  google.protobuf.StringValue scheduled_time = 8;
  google.protobuf.StringValue zip_code = 9 [
    (doordash.api.inject_from_headers) = {
      field: "DD-LOCATION-CONTEXT.zipcode",
      injection_rule: {
        cast_type: "nullable_string",
        conversions: [
          DECODE_BASE64,
          JSON
        ]
      }
    },
    (doordash.api.inject) = {field: "cx_geo_zip_code"}
  ];
  //Optional filters for carousel landing page
  repeated EFSFilter filters = 10;
}

message GetMosaicFeedRequest {
  CommonFacetRequestFields common_fields = 1;
  google.protobuf.StringValue uri = 2 [(doordash.api.validate.rules).missing_value = {action: FAIL}];
  google.protobuf.StringValue scheduled_time = 3;
  google.protobuf.StringValue zip_code = 4 [
    (doordash.api.inject_from_headers) = {
      field: "DD-LOCATION-CONTEXT.zipcode",
      injection_rule: {
        cast_type: "nullable_string",
        conversions: [
          DECODE_BASE64,
          JSON
        ]
      }
    },
    (doordash.api.inject) = {field: "cx_geo_zip_code"}
  ];
}

// The response is only used for the Home screen's see all page as we are migrating to Mosaic.
message GetMosaicFeedResponse {
  // the lego page response to be rendered by frontend
  lego.response.v1.LegoPageResponse lego_page_response = 1;
}

message GetFacetFeedV2Request {
  CommonFacetRequestFields common_fields = 1;
  google.protobuf.StringValue uri = 2;
  google.protobuf.StringValue scheduled_time = 3;
}

message GetSearchFacetFeedRequest {
  double lat = 1;
  double lng = 2;
  google.protobuf.Int64Value consumer_id = 3;
  int64 submarket_id = 4;
  int64 district_id = 5;
  google.protobuf.StringValue query = 6;
  google.protobuf.StringValue time_zone = 7;
  google.protobuf.StringValue scheduled_time = 8;
  google.protobuf.BoolValue is_pickup = 9;
}

message GetPharmaTransferFacetFeedRequest {
  google.protobuf.Int64Value store_id = 1;
  google.protobuf.Int64Value consumer_id = 2;
}

message ConsumerContext {
  repeated doordash_consumer_service.BlockedItemType blocked_item_types = 1;
}

// Request for Homepage
message GetHomePageFacetFeedRequest {
  // lat
  double lat = 1;

  // lng
  double lng = 2;

  // Optional, since some requests may be from guests
  google.protobuf.Int64Value consumer_id = 3;

  // Provided at the BFF layer
  int64 submarket_id = 4;

  // Provided at the BFF layer
  int64 district_id = 5;

  // tz
  google.protobuf.StringValue time_zone = 6;

  // scheduled order time
  google.protobuf.StringValue scheduled_time = 7;

  // Opaque to clients, and represented as a string
  google.protobuf.StringValue cursor = 8;

  // Params for how stores should be deduplicated across carousels (Platform-dependent)
  google.protobuf.Int64Value dedupe_config_id = 9;

  // Filters (if any)
  repeated EFSFilter filters = 10;

  // country code
  google.protobuf.StringValue country_shortname = 11;

  // Stores self exclusion data for Cx who opt out of purchasing certain items
  ConsumerContext consumer_context = 12;

  // if header(cuisine filter etc.) should be returned
  google.protobuf.BoolValue display_header = 13;

  // Provided at the BFF layer
  google.protobuf.StringValue zip_code = 14;

  // Indicates whether a request is an asynchronous request for realtime reranking
  google.protobuf.BoolValue is_in_scroll_reload = 15;
}

// Request for Vertical Landing Page
message GetVerticalPageFacetFeedRequest {
  // lat
  double lat = 1;

  // lng
  double lng = 2;

  // Optional, since some requests may be from guests
  google.protobuf.Int64Value consumer_id = 3;

  // Provided at the BFF layer
  int64 submarket_id = 4;

  // Provided at the BFF layer
  int64 district_id = 5;

  // tz
  google.protobuf.StringValue time_zone = 6;

  // scheduled order time
  google.protobuf.StringValue scheduled_time = 7;

  // Opaque to clients, and represented as a string
  google.protobuf.StringValue cursor = 8;

  // Params for how stores should be deduplicated across carousels (Platform-dependent)
  google.protobuf.Int64Value dedupe_config_id = 9;

  // Filters (if any)
  repeated EFSFilter filters = 10;

  // country code
  google.protobuf.StringValue country_shortname = 11;

  // utm metadata for ads
  map<string, string> utm_metadata = 12;
}

// Request for Vertical Landing Page
message GetSearchWithFilterFacetFeedRequest {
  // lat
  double lat = 1;

  // lng
  double lng = 2;

  // Optional, since some requests may be from guests
  google.protobuf.Int64Value consumer_id = 3;

  // Provided at the BFF layer
  int64 submarket_id = 4;

  // Provided at the BFF layer
  int64 district_id = 5;

  // search query
  google.protobuf.StringValue query = 6;

  // tz
  google.protobuf.StringValue time_zone = 7;

  // scheduled order time
  google.protobuf.StringValue scheduled_time = 8;

  // Opaque to clients, and represented as a string
  google.protobuf.StringValue cursor = 9;

  // Params for how stores should be deduplicated across carousels (Platform-dependent)
  google.protobuf.Int64Value dedupe_config_id = 10;

  // Filters (if any)
  repeated EFSFilter filters = 11;

  // country code
  google.protobuf.StringValue country_shortname = 12;

  // debug mode flag
  google.protobuf.BoolValue is_debug = 13;

  // if header(cuisine filter etc.) should be returned
  google.protobuf.BoolValue display_header = 14;

  // page name such as grocery tab page (if any)
  google.protobuf.StringValue page_name = 15;

  // A flag which indicates whether filters have changed. Used initially for when filters are preselected
  // and need to be differentiated from being user de-selected or a new request.
  // When user first performs a search -> from_filter_change = false (from client).
  // When user performs any subsequent search with the same query and a different filter state ->
  // from_filter_change = true.  This allows backend to support different logic on new requests, and when
  // user clears filters (both requests would look the same without this flag).
  google.protobuf.BoolValue from_filter_change = 16;

  // Serialized BundleGlobalSearchContext string. Used for bundle-specific search operations.
  google.protobuf.StringValue serialized_bundle_global_search_context = 17;

  // Field which indicates from which product surface the request is being made from
  google.protobuf.StringValue suggestion_type = 18;

  // Field which indicates verticals to search for nv cuisine filters, e.g. "1,2,3"
  // For convenience of client-side to pass it in the request param, define it as a string instead of a list
  google.protobuf.StringValue cuisine_filter_vertical_ids = 19;

  // search type such as dish for dish first page use case (if any)
  google.protobuf.StringValue search_type = 20;

  // search execution plan augmentation. e.g. "nvsep=sep_123,qiuep=qiuep_234"
  google.protobuf.StringValue sep_augmentation = 21;

  // Source of request
  enum RequestSource {
    //Unspecified
    REQUEST_SOURCE_UNSPECIFIED = 0;
    //Request from SEO
    REQUEST_SOURCE_SEO = 1;
  }
  RequestSource request_source = 22;

  // used for cx pricing sensitivity experiments
  google.protobuf.StringValue cx_geo_address_id = 23;

  // state
  google.protobuf.StringValue state = 24;
}

// Request for searching available stores matching given query string
message GetOpenStoresCarouselSearchFacetFeedRequest {
  // lat
  double lat = 1;

  // lng
  double lng = 2;

  // Optional, since some requests may be from guests
  google.protobuf.Int64Value consumer_id = 3;

  // Provided at the BFF layer
  int64 submarket_id = 4;

  // Provided at the BFF layer
  int64 district_id = 5;

  // search query
  google.protobuf.StringValue query = 6;

  // tz
  google.protobuf.StringValue time_zone = 7;

  // Opaque to clients, and represented as a string
  google.protobuf.StringValue cursor = 8;

  // country code
  google.protobuf.StringValue country_shortname = 9;
}

message GetAutocompleteFacetFeedRequest {
  // lat
  double lat = 1 [
    (doordash.api.validate.rules).missing_value = {action: FAIL},
    (doordash.api.inject_from_headers) = {
      field: "DD-LOCATION-CONTEXT.lat",
      injection_rule: {
        cast_type: "double",
        conversions: [
          DECODE_BASE64,
          JSON
        ]
      }
    },
    (doordash.api.inject) = {
      field: "cx_geo_lat",
      injection_rule: {cast_type: "double"}
    }
  ];

  // lng
  double lng = 2 [
    (doordash.api.validate.rules).missing_value = {action: FAIL},
    (doordash.api.inject_from_headers) = {
      field: "DD-LOCATION-CONTEXT.lng",
      injection_rule: {
        cast_type: "double",
        conversions: [
          DECODE_BASE64,
          JSON
        ]
      }
    },
    (doordash.api.inject) = {
      field: "cx_geo_lng",
      injection_rule: {cast_type: "double"}
    }
  ];

  // Optional, since some requests may be from guests
  google.protobuf.Int64Value consumer_id = 3 [(doordash.api.inject_id) = CX_ID];

  // Provided at the BFF layer
  int64 submarket_id = 4 [
    (doordash.api.inject_from_headers) = {
      field: "DD-LOCATION-CONTEXT.submarket_id",
      injection_rule: {
        cast_type: "int64",
        conversions: [
          DECODE_BASE64,
          JSON
        ]
      }
    },
    (doordash.api.inject) = {
      field: "cx_geo_submarket_id",
      injection_rule: {
        cast_type: "int64",
        default_value: "-1"
      }
    }
  ];

  // Provided at the BFF layer
  int64 district_id = 5 [
    (doordash.api.inject_from_headers) = {
      field: "DD-LOCATION-CONTEXT.district_id",
      injection_rule: {
        cast_type: "int64",
        conversions: [
          DECODE_BASE64,
          JSON
        ]
      }
    },
    (doordash.api.inject) = {
      field: "cx_geo_district_id",
      injection_rule: {
        cast_type: "int64",
        default_value: "-1"
      }
    }
  ];

  // search query
  google.protobuf.StringValue query = 6 [(doordash.api.validate.rules).missing_value = {action: FAIL}];

  // whether request is coming from pickup
  google.protobuf.BoolValue is_pickup = 7;

  // Cx device location lat
  double consumer_lat = 8;

  // Cx device location lng
  double consumer_lng = 9;

  // distinguish different use cases for search and pickup
  SearchUseCase search_use_case = 10;

  // page name such as grocery tab page (if any)
  google.protobuf.StringValue page_name = 11;

  // Serialized BundleGlobalSearchContext string. Used for bundle-specific search operations.
  google.protobuf.StringValue serialized_bundle_global_search_context = 12;
}

message GetShowMultipleLocationsFacetFeedRequest {
  // lat
  double lat = 1;

  // lng
  double lng = 2;

  // Optional, since some requests may be from guests
  google.protobuf.Int64Value consumer_id = 3;

  // Provided at the BFF layer
  int64 submarket_id = 4;

  // Provided at the BFF layer
  int64 district_id = 5;

  // search query
  google.protobuf.StringValue query = 6;

  // Cx device location lat
  double consumer_lat = 7;

  // Cx device location lng
  double consumer_lng = 8;

  // cursor for passing business group id
  google.protobuf.StringValue cursor = 9;
}

// Request for Saved Stores Landing Page
message GetSavedStoresFacetFeedRequest {
  // lat
  double lat = 1;

  // lng
  double lng = 2;

  // consumer id to get saved stores for
  google.protobuf.Int64Value consumer_id = 3;

  // Provided at the BFF layer
  int64 submarket_id = 4;

  // Provided at the BFF layer
  int64 district_id = 5;

  // tz
  google.protobuf.StringValue time_zone = 6;

  // scheduled order time
  google.protobuf.StringValue scheduled_time = 7;

  // Opaque to clients, and represented as a string
  google.protobuf.StringValue cursor = 8;
}

// Request for Offers Hub page
message GetOffersVerticalPageFacetFeedRequest {
  CommonFacetRequestFields common_fields = 1;
  google.protobuf.StringValue country_shortname = 2;
}
message GetOffersCarouselPageFacetFeedRequest {
  CommonFacetRequestFields common_fields = 1;
}

message GetItemCarouselPageFacetFeedRequest {
  CommonFacetRequestFields common_fields = 1;
  // carousel id for which we want to see carousel for
  // This will be passed in if passed via deeplink
  google.protobuf.StringValue carousel_id = 2;
}

message GetStoreInfoPageFacetRequest {
  CommonFacetRequestFields common_fields = 1;
  google.protobuf.Int64Value store_id = 2;
}

// Request for GetVerticalTopSearchFacetFeed
message GetTopSearchFacetFeedRequest {
  // cursor
  google.protobuf.StringValue cursor = 1;
  // page name such as grocery tab page (if any)
  google.protobuf.StringValue page_name = 2;
}

message GetItemSeeAllPageFacetFeedRequest {
  CommonFacetRequestFields common_fields = 1;
  // carousel id for which we want to see carousel for
  // This will be passed in if passed via deeplink
  google.protobuf.StringValue carousel_id = 2;
  // used for cx pricing sensitivity experiments
  google.protobuf.StringValue cx_geo_address_id = 3;
}

message GetVerticalPageURIRequest {
  google.protobuf.Int64Value consumer_id = 1;

  // Vertical Ids can be found at https://admin-gateway.doordash.com/tools/mhub/discovery
  // or calling DiscoveryConfigService.ListVerticals
  google.protobuf.StringValue vertical_id = 2;

  // Optional - DD Place Id for Hyperlocal Vertical Pages. Note, this does not check if the id is valid
  google.protobuf.StringValue doordash_place_id = 3;

  // Submarket Id required to validate and resolve vertical id
  int64 submarket_id = 4;
}

message GetVerticalPageURIResponse {
  // URI usually includes a cursor that contains embed data of vertical id, offsets, page_type, etc
  google.protobuf.StringValue uri = 1;
  // Usually points to either Doordash or Caviar
  google.protobuf.StringValue domain = 2;
}

message GetSavedListsFacetFeedRequest {
  // lat
  double lat = 1;

  // lng
  double lng = 2;

  // consumer id to get saved lists for
  google.protobuf.Int64Value consumer_id = 3;

  // Provided at the BFF layer
  int64 submarket_id = 4;

  // Provided at the BFF layer
  int64 district_id = 5;

  // tz
  google.protobuf.StringValue time_zone = 6;

  // filter
  repeated EFSFilter filter = 7;

  // scheduled order time
  google.protobuf.StringValue scheduled_time = 8;

  // Opaque to clients, and represented as a string
  google.protobuf.StringValue cursor = 9;
}

message GetCuisineSeeAllPageFacetFeedRequest {
  CommonFacetRequestFields common_fields = 1;

  // country code
  google.protobuf.StringValue country_shortname = 2;

  // cuisine localized friendly name
  google.protobuf.StringValue cuisine_localized_friendly_name = 3;
}

message GetBrowsePageFacetFeedRequest {
  CommonFacetRequestFields common_fields = 1;

  // country code
  google.protobuf.StringValue country_shortname = 2;

  // Stores self exclusion data for Cx who opt out of purchasing certain items
  ConsumerContext consumer_context = 3;
}

message GetPreferenceModalFacetFeedRequest {
  CommonFacetRequestFields common_fields = 1;
}

// Request for homepage carousel horizontal pagination
message GetCarouselPaginatedFacetFeedRequest {
  // lat
  double lat = 1;
  // lng
  double lng = 2;
  // consumer id
  google.protobuf.Int64Value consumer_id = 3;
  // submarket id
  int64 submarket_id = 4;
  // district id
  int64 district_id = 5;
  // pagination_cursor
  google.protobuf.StringValue cursor = 6;
  // time zone
  google.protobuf.StringValue time_zone = 7;
}

// Response for homepage carousel horizontal paginaiton
message GetCarouselPaginatedFacetFeedResonse {
  // list of facets in response
  repeated FacetV2 facets = 1;
  // next page cursor
  google.protobuf.StringValue cursor = 2;
}

message GetMeTabPageFacetFeedRequest {
  // common fields
  CommonFacetRequestFields common_fields = 1;

  // country code
  google.protobuf.StringValue country_shortname = 2;
}

message GetRealtimeRecommendationFacetFeedRequest {
  // common fields
  CommonFacetRequestFields common_fields = 1;

  // clicked carousel facet id - the carousel facet id belonging to the store that was clicked.
  // For Example, Cx clicks Store X within Carousel Y, this value is equal to the facet id of Carousel Y.
  google.protobuf.StringValue clicked_carousel_facet_id = 2;

  // next page cursor - provided by client to inform BE what is the cached page cursor for next page.
  // Ensures subsequent pages can dedupe any injected recommendation content.
  google.protobuf.StringValue next_page_cursor = 3;
}

message GetSearchLandingPageFacetFeedRequest {
  // common fields
  CommonFacetRequestFields common_fields = 1;
  // country code
  google.protobuf.StringValue country_shortname = 2;
}

message GetAffordableMealPageFacetFeedRequest {
  // common fields
  CommonFacetRequestFields common_fields = 1;
}

message GetTokenLandingPageFacetFeedRequest {
  // Reserved field number
  reserved 3;
  reserved "token_benefit_type";

  // common fields
  CommonFacetRequestFields common_fields = 1;

  // country code
  google.protobuf.StringValue country_shortname = 2;

  // landing page token type
  string token_type = 4;
}
