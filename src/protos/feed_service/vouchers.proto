syntax = "proto3";
package feed_service;

import "feed_service/common.proto";
import "common/service_client_config.proto";

option java_package = "com.doordash.rpc.feed_service.vouchers";
option java_outer_classname = "VouchersFeedAPI";
option java_multiple_files = true;
option java_generic_services = true;

// VoucherService is the service for dine-in vouchers
service VoucherService {
  option (service_client.client_config).retry_config.max_attempts = 3;
  option (service_client.client_config).retry_config.wait_multiplier = 2.0;
  // GetVouchersFeed lists the consumer's vouchers
  rpc GetVouchersFeed (GetVouchersFeedRequest) returns (GetVouchersFeedResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 500;
  }
  // GetVoucherPage retrieves the details of a particular voucher including corresponding store data
  rpc GetVoucherPage (GetVoucherPageRequest) returns (GetVoucherPageResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 500;
  }
}

// GetVouchersFeedRequest is a request to get the vouchers belonging to a consumer
message GetVouchersFeedRequest {
  // consumer_id is the id of the consumer
  string consumer_id = 1;
}

// VoucherDM is the voucher itself
message VoucherDM {
  // Store is the store that voucher can be used at
  Store store = 1;
  // title is the voucher's title
  string title = 2;
  // image_url is the image URL of the voucher
  string image_url = 3;
  // voucher_id is the id of the voucher
  string voucher_id = 4;
  // restriction is a string detailing the restriction a voucher may have (example: "dine-in only")
  string restriction = 5;
  // voucher_state contains expiration and redemption info for a voucher
  VoucherState voucher_state = 6;
}

// VoucherStatus indicates whether the voucher is unknown, active, redeemed, or expired
enum VoucherStatus {
  // Status of voucher is unknown
  UNKNOWN = 0;
  // Voucher is able to be used - neither redeemed nor expired
  ACTIVE = 1;
  // Voucher has been redeemed
  REDEEMED = 2;
  // Voucher has expired
  EXPIRED = 3;
}
// GetVouchersResponse is the response for GetVouchers
message GetVouchersFeedResponse {
  // vouchers is a list of VoucherDMs
  repeated VoucherDM vouchers = 1;
}

// GetVoucherPageRequest is a request to get the details related to a particular voucher
message GetVoucherPageRequest {
  // GetVoucherPageRequest requires either a voucher id or campaign id
  oneof identifier {
    // voucher_id is the id of the voucher
    string voucher_id = 1;
    // campaign_id is the id of the campaign associated with the voucher - used for fetching banner content
    string campaign_id = 2;
  }
  // consumer_id is the id of the consumer
  string consumer_id = 3;
}

// GetVoucherPageResponse contains the voucher's display components, details, and corresponding store information
message GetVoucherPageResponse {
  // display_component_bundle contains the components displaying voucher details
  DisplayComponentBundle display_component_bundle = 1;
  // voucher contains information about the state of the voucher
  VoucherState voucher = 2;
  // store is the store that the voucher can be used at
  Store store = 3;
  // store_address is the address of the store that the voucher can be used at
  StoreAddress store_address = 4;
}

// VoucherState contains information about the state of the voucher
message VoucherState {
  // id is the id of the voucher
  string id = 1;
  // captioned_date contains data about a voucher's expiration or redemption date
  CaptionedDate captioned_date = 2;
  // voucher_status indicates the status of a voucher
  VoucherStatus voucher_status = 3;
  // delivery_uuid contains the delivery uuid of the voucher
  string delivery_uuid = 4;
}

// CaptionedDate contains data about a voucher's expiration and redemption dates
message CaptionedDate {
  // caption will be either "expired" or "redeemed"
  string caption = 1;
  // date is the expiration date or redemption date of the voucher (example: "6/30/2021")
  string date = 2;
}

// DisplayComponentBundle contains components that are used to display information about a voucher
message DisplayComponentBundle {
  // title is the title of the displayed voucher
  string title = 1;
  // subtitle is the subtitle of the displayed voucher
  string subtitle = 2;
  // header_image is the header image of the displayed voucher
  string header_image = 3;
  // sections are the sections of the display components
  repeated Section sections = 4;
  // footers are the footers of the display components
  repeated Footer footers = 5;
  // button_text is the button text of the displayed voucher
  string button_text = 6;

  // Section is a displayed section
  message Section {
    // title is the title of the section
    string title = 1;
    // body is the body of the section
    string body = 2;
  }

  // Footer is a displayed footer
  message Footer {
    // icon_label is the icon label of the footer
    string icon_label = 1;
    // text is the text of the footer
    string text = 2;
  }
}
