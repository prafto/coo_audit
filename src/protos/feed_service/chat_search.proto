syntax = "proto3";
// buf:lint:ignore DIRECTORY_SAME_PACKAGE
// buf:lint:ignore PACKAGE_VERSION_SUFFIX
package feed_service;

import "feed_service/common.proto";
import "feed_service/facet.proto";
import "feed_service/facet_response_v2.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/wrappers.proto";

// buf:lint:ignore PACKAGE_SAME_JAVA_MULTIPLE_FILES
option java_multiple_files = true;
// buf:lint:ignore PACKAGE_SAME_JAVA_PACKAGE
option java_package = "com.doordash.rpc.feed_service.chat_search";

// request struct for search with array of store names as query
message GetSearchWithStoreQueryFacetFeedRequest {
  // all the common fields for discovery related APIs
  CommonFacetRequestFields common_fields = 1;

  // search store names with payload
  repeated StoreQuery store_queries = 2;

  // normal search query term that will be passed to /v1/consumer_search
  google.protobuf.StringValue search_query = 3;

  // normal EFS filters that will be passed to /v1/consumer_search
  repeated EFSFilter search_filters = 4;

  // limit instructs the max number of results (DDstores) that will be returned
  google.protobuf.Int32Value limit = 5;

  // list of store ids to exclude due to duplicates
  repeated string store_ids_to_exclude = 6;
}

// A new query type with underlying metadata as payload
// This struct is temporary, should be supported as part of query + EFSFilter in future
message StoreQuery {
  // store names
  google.protobuf.StringValue query = 1;
  // descriptions returned from OpenAI
  google.protobuf.StringValue description = 2;
}

// For DashBot use case, return both DD stores (in Lego) and non DD stores
message GetSearchWithStoreQueryFacetFeedResponse {
  // DD stores
  repeated FacetV2 dd_stores = 1;
  // non DD stores
  repeated ExternalStoreInfo external_stores_info = 2;
  // enum for the fuzzy match result
  StoreQueryResultStatus store_query_match_status = 3;
}

// enum for the fuzzy match result
enum StoreQueryResultStatus {
  // unset
  STORE_QUERY_RESULT_STATUS_UNSPECIFIED = 0;
  // failure
  STORE_QUERY_RESULT_STATUS_FAILURE = 1;
  // match size = 0
  STORE_QUERY_RESULT_STATUS_EMPTY = 2;
  // match size < desirable limit
  STORE_QUERY_RESULT_STATUS_PARTIAL = 3;
  // match size = desirable limit
  STORE_QUERY_RESULT_STATUS_COMPLETE = 4;
}

// Struct for external stores
message ExternalStoreInfo {
  // store names
  google.protobuf.StringValue name = 1;
  // descriptions returned from OpenAI
  google.protobuf.StringValue description = 2;
}
