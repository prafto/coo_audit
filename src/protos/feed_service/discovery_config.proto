syntax = "proto3";
package feed_service;

import "google/protobuf/wrappers.proto";
import "feed_service/common.proto";
import "feed_service/vertical.proto";
import "common/common.proto";
import "common/service_client_config.proto";

option java_package = "com.doordash.rpc.feed_service.discovery_config";
option java_outer_classname = "DiscoveryConfigApi";
option java_multiple_files = true;
option java_generic_services = true;

// API for CRUD operations on verticals and their respective configs
service DiscoveryConfigService {
    option (service_client.client_config).circuit_breaker_config.minimum_request_threshold = 1000;
    option (service_client.client_config).circuit_breaker_config.counter_sliding_window_millis = 20000;
    option (service_client.client_config).circuit_breaker_config.circuit_open_window_millis = 1000;
    option (service_client.client_config).response_attempt_timeout_millis = 1250;
    // Vertical CRUD
    // Get vertical by vertical id
    rpc GetVerticalById(GetVerticalByIdRequest)             returns (GetVerticalByIdResponse);
    // Get all verticals
    rpc ListVerticals(ListVerticalsRequest)                 returns (ListVerticalsResponse);
    // Create vertical
    rpc CreateVertical(CreateVerticalRequest)               returns (CreateVerticalResponse);
    // Update vertical
    rpc UpdateVertical(UpdateVerticalRequest)               returns (UpdateVerticalResponse);
    // Delete vertical
    rpc DeleteVertical(DeleteVerticalRequest)               returns (DeleteVerticalResponse);

    // Vertical Config CRUD
    // Get one or many vertical configs
    rpc GetVerticalConfig(GetVerticalConfigRequest)         returns (GetVerticalConfigResponse);
    // Create vertical config
    rpc CreateVerticalConfig(CreateVerticalConfigRequest)   returns (CreateVerticalConfigResponse);
    // Update vertical config
    rpc UpdateVerticalConfig(UpdateVerticalConfigRequest)   returns (UpdateVerticalConfigResponse);
    // Remove vertical config
    rpc DeleteVerticalConfig(DeleteVerticalConfigRequest)   returns (DeleteVerticalConfigResponse);
}

// Get vertical by id request
message GetVerticalByIdRequest {
    // Id of the vertical
    int64 id = 1;
}

// Get vertical by id response
message GetVerticalByIdResponse {
    // Vertical found by id
    Vertical vertical = 1;
}

// List verticals request
message ListVerticalsRequest {
    // Empty message for now - can add skip / limits if required
}

// List verticals response
message ListVerticalsResponse {
    // All the verticals which matched the request
    repeated Vertical verticals = 1;
}

// Create vertical request
message CreateVerticalRequest {
    // Canonical name, i.e. "Restaurant"
    string name            = 1;
    // Image uri for vertical tile on home page
    string tile_image_uri  = 2 [deprecated=true];
    // Image uri for vertical section on home page
    string section_image_uri = 3 [deprecated=true];
    // Image uri for vertical icon for one row on home page
    string one_row_uri = 4;
    // Image uri for vertical icon for one row web on home page
    string one_row_svg_uri = 5;
    // Image uri for vertical icon for two row on home page
    string two_row_uri = 6;
    // Image uri for vertical icon for two row web on home page
    string two_row_svg_uri = 7;
    // Optional, A/B testing config for vertical.
    // https://docs.google.com/document/d/1VzpzevdDzoThrX0KYqj-iRg46iWeCio3DYqrkUuaniw/edit#bookmark=id.1rc0m18bwosa
    string experiment_config = 8;
    // Image uri for browse page
    string navigation_image_uri  = 9;
    // Square image uri introduced for browse page V2
    string square_image_uri  = 10;
}

// Create vertical response
message CreateVerticalResponse {
    // Newly created vertical
    Vertical vertical = 1;
}

// Update vertical request
message UpdateVerticalRequest {
    // Id of vertical to update
    int64                       id                  = 1;
    // Updated canonical name of vertical
    string                      name                = 2;
    // Optionally, updated tile image uri
    google.protobuf.StringValue tile_image_uri      = 3 [deprecated=true];
    // Optionally, updated section image uri
    google.protobuf.StringValue section_image_uri   = 4 [deprecated=true];
    // Optionally, updated image uri for vertical icon for one row on home page
    google.protobuf.StringValue one_row_uri = 5;
    // Optionally, updated image uri for vertical icon for one row web on home page
    google.protobuf.StringValue one_row_svg_uri = 6;
    // Optionally, updated image uri for vertical icon for two row on home page
    google.protobuf.StringValue two_row_uri = 7;
    // Optionally, updated image uri for vertical icon for two row web on home page
    google.protobuf.StringValue two_row_svg_uri = 8;
    // Optionally, updated A/B testing config for vertical.
    // https://docs.google.com/document/d/1VzpzevdDzoThrX0KYqj-iRg46iWeCio3DYqrkUuaniw/edit#bookmark=id.1rc0m18bwosa
    google.protobuf.StringValue experiment_config = 9;
    // Image uri for browse page
    google.protobuf.StringValue navigation_image_uri  = 10;
    // Square image uri introduced for browse page V2
    google.protobuf.StringValue square_image_uri  = 11;
}

// Update vertical response
message UpdateVerticalResponse {
    // Vertical with newly updated fields
    Vertical vertical = 1;
}

// Delete vertical request
message DeleteVerticalRequest {
    // id of vertical to delete
    int64 id = 1;
}

// Delete vertical response - "soft delete"
message DeleteVerticalResponse {
    // Deleted vertical with `deleted_at` set
    Vertical vertical = 1;
}

// Get vertical config request
message GetVerticalConfigRequest {
    // Vertical id
    int64 vertical_id     = 1;
    // Submarket id - optional
    google.protobuf.Int64Value  submarket_id    = 2;
    // Config tied to this experience
    common.Experience experience = 3;
}

// Get vertical config response - a request with 
// just vertical_id will return  the configs for 
// that vertical across all submarkets
message GetVerticalConfigResponse {
    // Vertical configurations matching request fields
    repeated VerticalConfig config = 1;
}

// Create vertical config request
message CreateVerticalConfigRequest {
    // Vertical configuration
    VerticalConfig config = 1;
}

// Create vertical config response
message CreateVerticalConfigResponse {
    // Newly created vertical config
    VerticalConfig config = 1;
}

// Update vertical config request
message UpdateVerticalConfigRequest {
    // Vertical config with only fields that will be updated set
    VerticalConfig config = 2;
}

// Update vertical config response
message UpdateVerticalConfigResponse {
    // Vertical config with updated fields
    VerticalConfig config = 1;
}

// Delete vertical config request
message DeleteVerticalConfigRequest {
    // Vertical id
    int64 vertical_id   = 1;
    // Submarket for config to delete
    int64 submarket_id  = 2;
    // Experience
    common.Experience experience = 3;
    // Deleted by
    Author deleted_by = 4;
}

// Delete vertical config response - "soft delete"
message DeleteVerticalConfigResponse {
    // Deleted vertical config with `deleted_at` and `deleted_by` set
    VerticalConfig config = 1;
}
