syntax = "proto3";
package feed_service;

import "doordash.api/field_validate.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/wrappers.proto";
import "lego.response/lego_response.proto";

option java_multiple_files = true;
option java_outer_classname = "FacetFeedResponse";
option java_package = "com.doordash.rpc.feed_service.v2.facet";

// Response in terms of FacetV2
// Reason for this Fork - https://docs.google.com/document/d/15rT2qhlxfwa6sLgoczWcj2mgvV6E8YuqV98ckR0J6xM/
message GetFacetFeedResponseV2 {
  // Body-grouping of Facets
  repeated FacetSection body = 1;

  // Action describing behavior on reaching end-of-page
  Page page = 2 [(doordash.api.validate.rules).missing_value = {action: IGNORE}];

  // Any data that doesn't fit other fields in this proto
  google.protobuf.Struct custom = 3 [(doordash.api.validate.rules).missing_value = {action: IGNORE}];

  // Header-grouping of Facets. May be treated / rendered with different behavior compared to Body.
  repeated FacetV2 header = 4;

  // Only contains event data. The event name is implicit based on the placement of the "logging" field.
  // This one refers to page loads
  google.protobuf.Struct logging = 5 [(doordash.api.validate.rules).missing_value = {action: IGNORE}];

  // page level style
  Style style = 6 [(doordash.api.validate.rules).missing_value = {action: IGNORE}];

  // footer-grouping of Facets. May be treated / rendered with different behavior compared to Body.
  repeated FacetV2 footer = 7;
}

// Facet Section
// Do not need any logging at the section level, the Facet level and page level logging should suffice.
// Also no use-case for a custom struct yet. Can add later if needed.
message FacetSection {
  // ID of this instance of this element.
  google.protobuf.StringValue id = 1 [(doordash.api.validate.rules).missing_value = {action: IGNORE}];

  // header element
  repeated FacetV2 header = 2;

  // in a way, just replaces GetFacetFeedResponse.body
  repeated FacetV2 body = 3;

  // Layout Data
  Layout layout = 4 [(doordash.api.validate.rules).missing_value = {action: IGNORE}];

  // section level style
  Style style = 5 [(doordash.api.validate.rules).missing_value = {action: IGNORE}];

  // footer element
  repeated FacetV2 footer = 6;
}

// The Guest of Honor.
// Reason for this Fork - https://docs.google.com/document/d/15rT2qhlxfwa6sLgoczWcj2mgvV6E8YuqV98ckR0J6xM/
message FacetV2 {
  // ID of this instance of this element.
  google.protobuf.StringValue id = 1 [(doordash.api.validate.rules).missing_value = {action: IGNORE}];

  // Which component should this information be rendered in the form of?
  Component component = 2 [(doordash.api.validate.rules).missing_value = {action: IGNORE}];

  // All text fields pertaining to this element.
  Text text = 3 [(doordash.api.validate.rules).missing_value = {action: IGNORE}];

  // All image fields pertaining to this element.
  Images images = 4 [(doordash.api.validate.rules).missing_value = {action: IGNORE}];

  // Any data that doesn't fit other fields in this proto
  google.protobuf.Struct custom = 5 [(doordash.api.validate.rules).missing_value = {action: IGNORE}];

  // Events related to this element, for example: clicks, selection etc.
  Events events = 6 [(doordash.api.validate.rules).missing_value = {action: IGNORE}];

  // Nesting
  repeated FacetV2 children = 7;

  // Only contains event data. The event name is implicit based on the placement of the "logging" field.
  // This one refers to clicks and views
  google.protobuf.Struct logging = 8 [(doordash.api.validate.rules).missing_value = {action: IGNORE}];

  // Layout Data
  Layout layout = 9 [(doordash.api.validate.rules).missing_value = {action: IGNORE}];

  // facet level style
  Style style = 10 [(doordash.api.validate.rules).missing_value = {action: IGNORE}];

  // Nesting
  map<string, FacetV2> children_map = 11;

  // LegoV2 Response
  lego.response.v1.LegoResponse lego_2 = 12 [(doordash.api.validate.rules).missing_value = {action: IGNORE}];

  // shared logging amongst children grouped by facet id
  map<string, google.protobuf.Struct> children_joint = 13 [(doordash.api.validate.rules).missing_value = {action: IGNORE}];

  // Component information
  message Component {
    // Maps to an Id in the component library - https://docs.google.com/document/d/1IWSggUGns5fMTUq6ysVP3ZpRB0jZqIjhpUvH90_ncZI/
    google.protobuf.StringValue id = 1 [(doordash.api.validate.rules).missing_value = {action: IGNORE}];

    // This can in the future to define fallback component group for old(er) app versions
    google.protobuf.StringValue category = 2 [(doordash.api.validate.rules).missing_value = {action: IGNORE}];
  }

  // Text fields
  message Text {
    // Means different things in the context of different components. Refer to component library for details.
    google.protobuf.StringValue title = 1 [(doordash.api.validate.rules).missing_value = {action: IGNORE}];

    // Means different things in the context of different components. Refer to component library for details.
    google.protobuf.StringValue subtitle = 2 [(doordash.api.validate.rules).missing_value = {action: IGNORE}];

    // Means different things in the context of different components. Refer to component library for details.
    google.protobuf.StringValue accessory = 3 [(doordash.api.validate.rules).missing_value = {action: IGNORE}];

    // Means different things in the context of different components. Refer to component library for details.
    google.protobuf.StringValue description = 4 [(doordash.api.validate.rules).missing_value = {action: IGNORE}];

    // Any other text
    map<string, google.protobuf.StringValue> custom = 5;

    // Title text attribute
    TextAttributes title_text_attributes = 6 [(doordash.api.validate.rules).missing_value = {action: IGNORE}];

    // Subtitle text attribute
    TextAttributes subtitle_text_attributes = 7 [(doordash.api.validate.rules).missing_value = {action: IGNORE}];

    // Accessory text attribute
    TextAttributes accessory_text_attributes = 8 [(doordash.api.validate.rules).missing_value = {action: IGNORE}];

    // Description text attribute
    TextAttributes description_text_attributes = 9 [(doordash.api.validate.rules).missing_value = {action: IGNORE}];
  }

  // Image fields
  message Images {
    // Means different things in the context of different components. Refer to component library for details.
    Image main = 1 [(doordash.api.validate.rules).missing_value = {action: IGNORE}];

    // Means different things in the context of different components. Refer to component library for details.
    Image icon = 2 [(doordash.api.validate.rules).missing_value = {action: IGNORE}];

    // Means different things in the context of different components. Refer to component library for details.
    Image background = 3 [(doordash.api.validate.rules).missing_value = {action: IGNORE}];

    // Means different things in the context of different components. Refer to component library for details.
    Image accessory = 5 [(doordash.api.validate.rules).missing_value = {action: IGNORE}];

    // Means different things in the context of different components. Refer to component library for details.
    map<string, Image> custom = 4;
  }

  // Image type
  message Image {
    // URI for image
    google.protobuf.StringValue uri = 1 [(doordash.api.validate.rules).missing_value = {action: IGNORE}];

    // Placeholder text / string
    google.protobuf.StringValue placeholder = 2 [(doordash.api.validate.rules).missing_value = {action: IGNORE}];

    // Placeholder local asset identifier (in case)
    google.protobuf.StringValue local = 4 [(doordash.api.validate.rules).missing_value = {action: IGNORE}];

    // Display Style
    Style style = 3;

    // Display Style Enum
    enum Style {
      // If unset
      STYLE_UNSPECIFIED = 0;

      // Rect image w/ rounded corners
      STYLE_ROUNDED = 1;

      // Circular image
      STYLE_CIRCLE = 2;
      // Add more here as needed
    }

    // Events related to this element, for example: clicks, selection etc.
    Events events = 5 [(doordash.api.validate.rules).missing_value = {action: IGNORE}];

    // Only contains event data. The event name is implicit based on the
    // placement of the "logging" field. This one refers to clicks and views
    google.protobuf.Struct logging = 7 [(doordash.api.validate.rules).missing_value = {action: IGNORE}];

    // Optional video URI for the video merchandising
    google.protobuf.StringValue video_uri = 8 [(doordash.api.validate.rules).missing_value = {action: IGNORE}];
  }

  // Event
  message Events {
    // Click option definition
    Action click = 1 [(doordash.api.validate.rules).missing_value = {action: IGNORE}];
    // Secondary click to handle two click events in one component
    Action secondary_click = 2 [(doordash.api.validate.rules).missing_value = {action: IGNORE}];
  }

  // Action
  message Action {
    // Action name
    google.protobuf.StringValue name = 1 [(doordash.api.validate.rules).missing_value = {action: IGNORE}];

    // Action - related data
    google.protobuf.Struct data = 2 [(doordash.api.validate.rules).missing_value = {action: IGNORE}];
  }
}

// Page
message Page {
  // "Next" option definition
  FacetV2.Action next = 1 [(doordash.api.validate.rules).missing_value = {action: IGNORE}];
  // "Onload" action when page loads: meant for pickup announcement while market is killed
  repeated FacetV2.Action on_load = 2;
}

// Layout (only contains omit_footer for now, but is a good place to add other config applicable broadly across Facets)
message Layout {
  // Omit Footer (default = false)
  google.protobuf.BoolValue omit_footer = 1 [(doordash.api.validate.rules).missing_value = {action: IGNORE}];

  // grid style
  Style.Grid grid = 2 [(doordash.api.validate.rules).missing_value = {action: IGNORE}];

  // deprecated: please use dls_padding instead
  Padding padding = 3 [deprecated = true];

  // dls_padding
  Padding dls_padding = 4 [(doordash.api.validate.rules).missing_value = {action: IGNORE}];

  /**
   * Indicate if there is custom padding around the cell.
   * This is used for carousel legos, since most carousel legos have standard padding (16.0 points), but some carousels, especially thin ones,
   * e.g. carousels that contain animation toggle cards, don’t want padding. Some other legos utilize this padding override as well.
   */
  message Padding {
    // Indicates if there should be custom padding that comes back from the backend in the left region
    Style.Spacing left = 1;
    // Indicates if there should be custom padding that comes back from the backend in the right region
    Style.Spacing right = 2;
    // Indicates if there should be custom padding that comes back from the backend in the top region
    Style.Spacing top = 3;
    // Indicates if there should be custom padding that comes back from the backend in the bottom region
    Style.Spacing bottom = 4;
  }

  // grid_specs
  GridSpecs grid_specs = 5 [(doordash.api.validate.rules).missing_value = {action: IGNORE}];

  // GridSpecs
  // For more information, see https://docs.google.com/document/d/1VrnIUsGJatLtWfc9Li0fIJmplDjxbVExXOrl75z1DDw/edit#
  message GridSpecs {
    // mobile specifies the grid specs for mobile
    Style.Grid mobile = 1 [(doordash.api.validate.rules).missing_value = {action: IGNORE}];
    // phablet specifies the grid specs for phablet
    Style.Grid phablet = 2 [(doordash.api.validate.rules).missing_value = {action: IGNORE}];
    // tablet specifies the grid specs for tablet
    Style.Grid tablet = 3 [(doordash.api.validate.rules).missing_value = {action: IGNORE}];
    // desktop specifies the grid specs for desktop
    Style.Grid desktop = 4 [(doordash.api.validate.rules).missing_value = {action: IGNORE}];
    // wide_screen specifies the grid specs for wide screen
    Style.Grid wide_screen = 5 [(doordash.api.validate.rules).missing_value = {action: IGNORE}];
    // ultra_wide_screen specifies the grid specs for ultra wide screen
    Style.Grid ultra_wide_screen = 6 [(doordash.api.validate.rules).missing_value = {action: IGNORE}];
  }

  // configuration for whether to ignore safe spaces
  repeated SafeSpace ignore_safe_spaces = 6;

  // list of possible safe spaces
  enum SafeSpace {
    // default
    SAFE_SPACE_UNSPECIFIED = 0;

    // top
    SAFE_SPACE_TOP = 1;

    // bottom
    SAFE_SPACE_BOTTOM = 2;

    // leading
    SAFE_SPACE_LEADING = 3;

    // right
    SAFE_SPACE_TRAILING = 4;
  }
}

// Style can be used for things like color, font, etc.
message Style {
  // background color
  Color background_color = 1;

  // size
  SizeClass size_class = 2;

  // dls(Design Language System) type
  DLSType dls_type = 3;

  // border
  Border border = 4 [(doordash.api.validate.rules).missing_value = {action: IGNORE}];

  // going to be deprecated, use grid instead
  // spacing
  Spacing spacing = 5;

  // going to be deprecated, use grid on layout instead
  // grid style
  Grid grid = 6 [(doordash.api.validate.rules).missing_value = {action: IGNORE}];

  // Optional. whether sticky during scrolling, default to false
  google.protobuf.BoolValue is_not_sticky = 7 [(doordash.api.validate.rules).missing_value = {action: IGNORE}];

  // enum for colors
  enum Color {
    // default when unset
    COLOR_UNSPECIFIED = 0;

    // primary background color
    COLOR_BACKGROUND_PRIMARY = 1;

    // secondary background color
    COLOR_BACKGROUND_SECONDARY = 2;

    // tertiary background color
    COLOR_BACKGROUND_TERTIARY = 3;

    // banner highlight default background color
    COLOR_BANNER_HIGHLIGHT_DEFAULT_BACKGROUND = 4;

    // light read background color
    COLOR_BACKGROUND_LIGHT_RED = 5;

    // background color teal gradient
    COLOR_BACKGROUND_TEAL_GRADIENT = 6;

    // background color for border
    COLOR_BACKGROUND_BORDER_HIGHLIGHT = 7;

    // background color for SODP Teal
    COLOR_SPOTLIGHT_SODP_TEAL = 8;

    // Following colors are added specifically for #ask-occasions use cases
    // background color for lightmode: neutral/5, darkmode: red/90
    COLOR_OCC_NEUTRAL_5_RED_90 = 9;

    // background color for lightmode: neutral/5, darkmode: purple/70
    COLOR_OCC_NEUTRAL_5_PURPLE_70 = 10;

    // background color for lightmode: neutral/5, darkmode: blue/90
    COLOR_OCC_NEUTRAL_5_BLUE_90 = 11;

    // background color for lightmode: cyan/30, darkmode: cyan/70
    COLOR_OCC_CYAN_30_CYAN_70 = 12;

    // background color for lightmode: neutral/5, darkmode: neutral/80
    COLOR_OCC_NEUTRAL_5_NEUTRAL_80 = 13;

    // background color for lightmode: neutral/5, darkmode: amber/90
    COLOR_OCC_NEUTRAL_5_AMBER_90 = 14;

    // background color for lightmode: neutral/5, darkmode: cyan/90
    COLOR_OCC_NEUTRAL_5_CYAN_90 = 15;

    // background color for lightmode: neutral/5, darkmode: green/90
    COLOR_OCC_NEUTRAL_5_GREEN_90 = 16;

    // background color for lightmode: neutral/5, darkmode: blue/80
    COLOR_OCC_NEUTRAL_5_BLUE_80 = 17;

    // background color for lightmode: teal/30, darkmode: teal/70
    COLOR_OCC_TEAL_30_TEAL_70 = 18;

    // background color for lightmode: purple/0, darkmode: purple/80
    COLOR_OCC_PURPLE_0_PURPLE_80 = 19;

    // background color for lightmode: neutral/5, darkmode: neutral/70
    COLOR_OCC_NEUTRAL_5_NEUTRAL_70 = 20;

    // background color for lightmode: green/40, darkmode: teal/80
    COLOR_OCC_GREEN_40_TEAL_80 = 21;

    // background color for lightmode: neutral/5, darkmode: neutral/90
    COLOR_OCC_NEUTRAL_5_NEUTRAL_90 = 22;

    // background color for lightmode: red/5, darkmode: red/90
    COLOR_OCC_RED_5_RED_90 = 23;

    // background color for lightmode: magenta/10, darkmode: magenta/90
    COLOR_DFC_MAGENTA_10_MAGENTA_90 = 24 [deprecated = true];

    // background color for lightmode: amber/5, darkmode: neutral/90
    COLOR_DFC_AMBER_5_NEUTRAL_90 = 25 [deprecated = true];

    // background color for lightmode: yellow/30, darkmode: yellow/90
    COLOR_DFC_YELLOW_30_YELLOW_90 = 26 [deprecated = true];

    // background color for lightmode: cyan/20, darkmode: cyan/90
    COLOR_DFC_CYAN_20_CYAN_90 = 27 [deprecated = true];

    // background color for lightmode: pink/90, darkmode: pink/90
    COLOR_DFC_PINK_90 = 28 [deprecated = true];

    // background color for lightmode: magenta/10, darkmode: magenta/90
    COLOR_SPOTLIGHT_BOUQUET = 29;

    // background color for lightmode: amber/5, darkmode: neutral/90
    COLOR_SPOTLIGHT_DEFAULT = 30;

    // background color for lightmode: yellow/30, darkmode: yellow/90
    COLOR_SPOTLIGHT_YOLK = 31;

    // background color for lightmode: cyan/20, darkmode: cyan/90
    COLOR_SPOTLIGHT_DETERGENT = 32;

    // background color for lightmode: pink/90, darkmode: pink/90
    COLOR_SPOTLIGHT_PINOTNOIR = 33;

    // background color for lightmode: dashpass/10, darkmode: dashpass/80
    COLOR_SPOTLIGHT_DASHPASS = 34;

    // background color for lightmode: teal/10, darkmode: teal/90
    COLOR_SPOTLIGHT_DTDS_TEAL = 35;

    // background color for lightmode: red/10, darkmode: red/100
    COLOR_SPOTLIGHT_DTDS_RED = 36;

    // background color for lightmode: cyan/5, darkmode: cyan/80
    COLOR_SPOTLIGHT_DTDS_CYAN = 37;

    // primary background color inverted
    COLOR_BACKGROUND_INVERSE_DEFAULT = 38;

    // secondary background color inverted
    COLOR_BACKGROUND_INVERSE_SUBDUED_DEFAULT = 39;
  }

  // enum for size
  enum SizeClass {
    // default when unset
    SIZE_CLASS_UNSPECIFIED = 0;

    // small size
    SIZE_CLASS_SMALL = 1;

    // medium size
    SIZE_CLASS_MEDIUM = 2;

    // large size
    SIZE_CLASS_LARGE = 3;

    // extra small size
    SIZE_CLASS_X_SMALL = 4;

    // extra extra small size
    SIZE_CLASS_XX_SMALL = 5;
  }

  // enum for dls (Design Language System) type
  enum DLSType {
    // default when unset
    DLS_TYPE_UNSPECIFIED = 0;

    // primary button type
    DLS_TYPE_BUTTON_PRIMARY = 1;

    // secondary button type
    DLS_TYPE_BUTTON_SECONDARY = 2;

    // tertiary button type
    DLS_TYPE_BUTTON_TERTIARY = 3;

    // floating button type
    DLS_TYPE_BUTTON_FLOATING = 4;

    // plain button type
    DLS_TYPE_BUTTON_PLAIN = 5;
  }

  // enum for border
  message Border {
    // border color
    Color color = 1;

    // border width
    Width width = 2;

    // border style
    BorderStyle style = 3;
  }

  // border style
  enum BorderStyle {
    // default unspecified border style
    BORDER_STYLE_UNSPECIFIED = 0;

    // border style dashed
    BORDER_STYLE_DASHED = 1;
  }

  // enum for width
  enum Width {
    // unspecified width
    WIDTH_UNSPECIFIED = 0;

    // none width
    WIDTH_NONE = 1;

    // hairline width
    WIDTH_HAIRLINE = 2;

    // default width
    WIDTH_DEFAULT = 3;

    // regular width
    WIDTH_REGULAR = 4;

    // medium width
    WIDTH_MEDIUM = 5;

    // bold width
    WIDTH_BOLD = 6;
  }

  // enum for spacing (https://s3-design-language-system.cdn4dd.com/master/index.html?path=/story/design-language-spacing--all-spacing-values)
  enum Spacing {
    // unspecified spacing
    SPACING_UNSPECIFIED = 0;

    // none spacing
    SPACING_NONE = 1;

    // small spacing
    SPACING_SMALL = 2;

    // medium spacing
    SPACING_MEDIUM = 3;

    // large spacing
    SPACING_LARGE = 4;

    // xxxx small spacing
    SPACING_XXXX_SMALL = 5;

    // xxx small spacing
    SPACING_XXX_SMALL = 6;

    // xx small spacing
    SPACING_XX_SMALL = 7;

    // x small spacing
    SPACING_X_SMALL = 8;

    // large x spacing
    SPACING_X_LARGE = 9;

    // large xx spacing
    SPACING_XX_LARGE = 10;

    // large xxx spacing
    SPACING_XXX_LARGE = 11;

    // large xxxx spacing
    SPACING_XXXX_LARGE = 12;
  }

  // Grid Attributes
  message Grid {
    // grid spacing between item in the same row
    Spacing inter_row_spacing = 1;

    // grid spacing between item in the same column
    Spacing inter_column_spacing = 2;

    // min number of items we would like to see in the same row or column
    google.protobuf.UInt32Value min_dimension_count = 4 [(doordash.api.validate.rules).missing_value = {action: IGNORE}];

    // config for grid accordion UI
    AccordionConfig accordion_config = 5 [(doordash.api.validate.rules).missing_value = {action: IGNORE}];

    // max number of items we would like to see in the same row or column
    google.protobuf.UInt32Value max_dimension_count = 6 [(doordash.api.validate.rules).missing_value = {action: IGNORE}];

    // config for grid accordion UI
    message AccordionConfig {
      // Size mapping to the number of open rows visible in closed state
      google.protobuf.StringValue exposed_rows_size = 1 [(doordash.api.validate.rules).missing_value = {action: IGNORE}];
    }

    // Optional. Whether to fade grid bottom edge
    google.protobuf.BoolValue use_bottom_fading_edge = 7 [(doordash.api.validate.rules).missing_value = {action: IGNORE}];
  }
}

// Text Attributes
message TextAttributes {
  // Text style
  DLSTextStyle text_style = 1;

  // Text color
  DLSTextColor text_color = 2;

  // Enum for DLS(Design Language System) Text Style
  enum DLSTextStyle {
    // default when unset
    DLS_TEXT_STYLE_UNSPECIFIED = 0;

    // Major page title
    DLS_TEXT_STYLE_MAJOR_PAGE_TITLE = 1;

    // Page title
    DLS_TEXT_STYLE_PAGE_TITLE = 2;

    // Different styling of a page title that map directly to dls definition
    DLS_TEXT_STYLE_PAGE_TITLE_1 = 3;

    // Different styling of a page title that map directly to dls definition
    DLS_TEXT_STYLE_PAGE_TITLE_2 = 4;

    // Page section subtext
    DLS_TEXT_STYLE_PAGE_SECTION_SUBTEXT = 5;

    // Page section title
    DLS_TEXT_STYLE_PAGE_SECTION_TITLE = 6;

    // Page section title large
    DLS_TEXT_STYLE_PAGE_SECTION_TITLE_LARGE = 7;

    // List row section title
    DLS_TEXT_STYLE_LIST_ROW_TITLE_LARGE = 8;

    // Label variation 2
    DLS_TEXT_STYLE_LABEL_2 = 9;

    // Label variation 2 with emphasis (bold)
    DLS_TEXT_STYLE_LABEL_2_EMPHASIS = 10;

    // Body text variation 2
    DLS_TEXT_STYLE_BODY_2 = 11;

    // Caption text variation 2
    DLS_TEXT_STYLE_CAPTION_2 = 12;

    // Text overlaid on top of map (i.e. annotations and pins)
    DLS_TEXT_STYLE_MAP_UI_TEXT_ON_MAP_UNSELECTED = 13;

    // Body text variation 1
    DLS_TEXT_STYLE_BODY_1 = 14;

    // Body variation 2 emphasis (bold)
    DLS_TEXT_STYLE_BODY_2_EMPHASIS = 15;

    // Taste of Dashpass title variation 1
    DLS_TEXT_STYLE_TITLE_1 = 16;

    // Taste of Dashpass title variation 2
    DLS_TEXT_STYLE_TITLE_2 = 17;

    // Label variation 1 with emphasis (bold)
    DLS_TEXT_STYLE_LABEL_1_EMPHASIS = 18;
  }

  // Enum for DLS(Design Language System) Text Color
  enum DLSTextColor {
    // default when unset
    DLS_TEXT_COLOR_UNSPECIFIED = 0;

    // Primary color (black)
    DLS_TEXT_COLOR_PRIMARY = 1;

    // Secondary color (dark gray)
    DLS_TEXT_COLOR_SECONDARY = 2;

    // Positive color (green)
    DLS_TEXT_COLOR_POSITIVE = 3;

    // Warning color (yellow)
    DLS_TEXT_COLOR_WARNING = 4;

    // Error color (red)
    DLS_TEXT_COLOR_ERROR = 5;

    // Secondary color (teal)
    DLS_TEXT_COLOR_ACCENTED_SECONDARY = 6;

    // Tertiary color
    DLS_TEXT_COLOR_TEXT_TERTIARY = 7;

    // Red Spotlight text color for lightmode: red/60, darkmode: red/50
    DLS_TEXT_COLOR_SPOTLIGHT_RED = 8;

    // DashPass teal Spotlight text color for lightmode: brand/dashpass/60, darkmode: brand/dashpass/10
    DLS_TEXT_COLOR_SPOTLIGHT_DASHPASS = 9;

    // Pink Spotlight text color for lightmode: brand/doordash/60, darkmode: magenta/10
    DLS_TEXT_COLOR_SPOTLIGHT_PINK = 10;

    // Yellow Spotlight text color for lightmode: brand/doordash/60, darkmode: yellow/30
    DLS_TEXT_COLOR_SPOTLIGHT_YELLOW = 11;

    // Blue Spotlight text color for lightmode: brand/doordash/60, darkmode: cyan/30
    DLS_TEXT_COLOR_SPOTLIGHT_BLUE = 12;

    // Primary color for dark background (white)
    DLS_TEXT_COLOR_PRIMARY_ON_DARK = 13;

    // Teal Spotlight text color for lightmode: teal/80, darkmode: teal/10
    DLS_TEXT_COLOR_SPOTLIGHT_DTDS_TEAL = 14;
  }
}
