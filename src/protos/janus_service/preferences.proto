syntax = "proto3";

package janus_service.v1;

import "common/authorization.proto";
import "common/notification.proto";
import "common/service_client_config.proto";
import "google/protobuf/wrappers.proto";
import "janus_service/janus_service_common.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.janus_service";

// janus-service manages storing and retrieving communication preferences of various user types and tenants.
// Documentation: https://doordash.atlassian.net/wiki/spaces/Eng/pages/2924609823/Janus+Service
// Onboarding info: https://doordash.atlassian.net/wiki/spaces/Eng/pages/3153526871
service JanusService {
  // ---- Preference management APIs ----

  // Set preferences for an entity
  // Documentation: https://doordash.atlassian.net/wiki/spaces/Eng/pages/3153527008/SetPreferences
  rpc SetPreferences(SetPreferencesRequest) returns (SetPreferencesResponse);

  // Get preferences for an entity by preference ID
  // Documentation: https://doordash.atlassian.net/wiki/spaces/Eng/pages/3153428785/GetPreferencesById
  rpc GetPreferencesById(GetPreferencesByIdRequest) returns (GetPreferencesByIdResponse);

  // Get all preferences for an entity
  // Documentation: https://doordash.atlassian.net/wiki/spaces/Eng/pages/3153428775/GetPreferences
  rpc GetPreferences(GetPreferencesRequest) returns (GetPreferencesResponse);

  // Set preferences for entities
  // Documentation: https://doordash.atlassian.net/wiki/spaces/Eng/pages/3378844050/SetPreferencesV2
  rpc SetPreferencesV2(SetPreferencesV2Request) returns (SetPreferencesV2Response);

  // Get preferences for entities by preference ID
  // Documentation: https://doordash.atlassian.net/wiki/spaces/Eng/pages/3378907068/GetPreferencesByIdV2
  rpc GetPreferencesByIdV2(GetPreferencesByIdV2Request) returns (GetPreferencesByIdV2Response);

  // Get all preferences for entities
  // Documentation: https://doordash.atlassian.net/wiki/spaces/Eng/pages/3378874849/GetPreferencesV2
  rpc GetPreferencesV2(GetPreferencesV2Request) returns (GetPreferencesV2Response);

  // ---- Web tool APIs ----

  // Get past emails metadata for a user
  rpc GetMessages(GetMessagesRequest) returns (GetMessagesResponse) {
    option (authorization.v1.method_config).type = AUTHORIZATION_TYPE_AUTHZ;
    option (authorization.v1.method_config).rule_name = "can_get_subscription";
  }

  // Get user subscribed message channels
  rpc GetUserEmailSubscriptions(GetUserEmailSubscriptionsRequest) returns (GetUserEmailSubscriptionsResponse) {
    option (authorization.v1.method_config).type = AUTHORIZATION_TYPE_AUTHZ;
    option (authorization.v1.method_config).rule_name = "can_get_subscription";
  }

  // Get suppression lists for a user
  rpc GetUserEmailSuppressions(GetUserEmailSuppressionsRequest) returns (GetUserEmailSuppressionsResponse) {
    option (authorization.v1.method_config).type = AUTHORIZATION_TYPE_AUTHZ;
    option (authorization.v1.method_config).rule_name = "can_get_subscription";
  }

  // Update subscription for a user
  rpc ManageSubscriptions(ManageSubscriptionsRequest) returns (ManageSubscriptionsResponse) {
    option (authorization.v1.method_config).type = AUTHORIZATION_TYPE_AUTHZ;
    option (authorization.v1.method_config).rule_name = "can_update_subscription";
  }

  // Handle privacy action for a user
  rpc HandlePrivacyAction(HandlePrivacyActionRequest) returns (HandlePrivacyActionResponse);
  // Handle privacy action for a user V2 - only update Janus preferences
  rpc HandlePrivacyActionV2(HandlePrivacyActionV2Request) returns (HandlePrivacyActionV2Response);

  // Update suppression for a user
  rpc ManageSuppressions(ManageSuppressionsRequest) returns (ManageSuppressionsResponse) {
    option (authorization.v1.method_config).type = AUTHORIZATION_TYPE_AUTHZ;
    option (authorization.v1.method_config).rule_name = "can_update_subscription";
  }
}

/**
   Get preferences request
*/
message GetPreferencesRequest {
  // Entity id
  string entity_id = 1;

  // Entity type
  string entity_type = 2;

  // template id
  string template_id = 3;

  // locale
  string locale = 4;
}

/**
   Get preferences response
*/
message GetPreferencesResponse {
  // Preference type
  message Preference {
    // preference id
    string id = 1;

    // name
    string name = 2;

    // is default value
    bool is_default = 3;

    // value
    string value = 4;

    // meta data
    map<string, string> metadata = 5;

    // children
    repeated Preference children = 6;
  }

  // template id
  string template_id = 1;
  // list of preferences
  repeated Preference preferences = 2;
}

/**
   Get preferences by id request
*/
message GetPreferencesByIdRequest {
  // Entity id
  string entity_id = 1;

  // Entity type
  string entity_type = 2;

  // template id
  string template_id = 3;

  // locale
  string locale = 4;

  // list of ids of preferences to return
  repeated string preference_ids = 5;
}

/**
   Get preferences by id response
*/
message GetPreferencesByIdResponse {
  // Preference type
  message Preference {
    // preference id
    string id = 1;

    // name
    string name = 2;

    // is default value
    bool is_default = 3;

    // value
    string value = 4;

    // meta data
    map<string, string> metadata = 5;
  }

  // list of preferences
  repeated Preference preferences = 1;
}

/**
   Set preferences request
*/
message SetPreferencesRequest {
  // Entity id
  string entity_id = 1;

  // Entity type
  string entity_type = 2;

  // template id
  string template_id = 3;

  // preferences
  repeated PreferenceValue preference_value = 4;

  // Preference Value type to setup overrides
  message PreferenceValue {
    // preference id
    string id = 1;
    // value
    string value = 2;
  }
}

/**
   Set preferences response
*/
message SetPreferencesResponse {}

/**
   Set preferences V2 request
*/
message SetPreferencesV2Request {
  // Primary Entity id
  string primary_entity_id = 1;

  // Primary Entity type
  PrimaryEntityType primary_entity_type = 2;

  // (optional) Secondary Entity id
  string secondary_entity_id = 3;

  // (optional) Secondary Entity type
  SecondaryEntityType secondary_entity_type = 4;

  // (optional) Third Entity id
  string third_entity_id = 5;

  // (optional) Third Entity type
  ThirdEntityType third_entity_type = 6;

  // template id
  string template_id = 7;

  // preferences
  repeated PreferenceValue preference_value = 8;

  // Preference Value type to setup overrides
  message PreferenceValue {
    // preference id
    string id = 1;
    // value
    string value = 2;
  }
}

/**
   Set preferences v2 response
*/
message SetPreferencesV2Response {}

/**
   get preferences by id V2 request
*/
message GetPreferencesByIdV2Request {
  // Primary Entity id
  string primary_entity_id = 1;

  // Primary Entity type
  PrimaryEntityType primary_entity_type = 2;

  // (optional) Secondary Entity id
  string secondary_entity_id = 3;

  // (optional) Secondary Entity type
  SecondaryEntityType secondary_entity_type = 4;

  // (optional) Third Entity id
  string third_entity_id = 5;

  // (optional) Third Entity type
  ThirdEntityType third_entity_type = 6;

  // template id
  string template_id = 7;

  // locale
  string locale = 8;

  // list of ids of preferences to return
  repeated string preference_ids = 9;
}

/**
   Get preferences by id v2 response
*/
message GetPreferencesByIdV2Response {
  // Preference type
  message Preference {
    // preference id
    string preference_id = 1;

    // Primary Entity id
    string primary_entity_id = 2;

    // Secondary Entity id
    string secondary_entity_id = 3;

    // Third Entity id
    string third_entity_id = 4;

    // name
    string name = 5;

    // is default value
    bool is_default = 6;

    // value
    string value = 7;

    // meta data
    map<string, string> metadata = 8;
  }

  // list of preferences
  repeated Preference preferences = 1;
}

/**
   Get preferences V2 request
*/
message GetPreferencesV2Request {
  // Primary Entity id
  string primary_entity_id = 1;

  // Primary Entity type
  PrimaryEntityType primary_entity_type = 2;

  // (optional) Secondary Entity id
  string secondary_entity_id = 3;

  // (optional) Secondary Entity type
  SecondaryEntityType secondary_entity_type = 4;

  // (optional) Third Entity id
  string third_entity_id = 5;

  // (optional) Third Entity type
  ThirdEntityType third_entity_type = 6;

  // template id
  string template_id = 7;

  // locale
  string locale = 8;

  // (optional) preference id
  string preference_id = 9;
}

/**
   Get preferences V2 response
*/
message GetPreferencesV2Response {
  // Preference type
  message Preference {
    // preference id
    string preference_id = 1;

    // Primary Entity id
    string primary_entity_id = 2;

    // name
    string name = 3;

    // is default value
    bool is_default = 4;

    // Preference Values for different 2nd and 3rd entity ids
    repeated PreferenceValues preference_values = 5;

    // meta data
    map<string, string> metadata = 6;

    // children
    repeated Preference children = 7;

    // Preference Value type
    message PreferenceValues {
      // Secondary Entity id
      string secondary_entity_id = 1;

      // Third Entity id
      string third_entity_id = 2;

      // value
      string value = 3;
    }
  }

  // template id
  string template_id = 1;

  // list of preferences
  repeated Preference preferences = 2;
}

/**
   Get messages request
*/
message GetMessagesRequest {
  // user's email
  string email = 1;
  // (optional) number of most recent messages
  int32 limit = 2;
  // (optional) start date & time filter
  string start_date_time = 3;
  // (optional) end date & time filter
  string end_date_time = 4;
  // user persona (consumer, dasher, merchant, DDFW, etc.)
  Persona persona = 5;
  // DD experience
  Experience experience = 6;
  // email service provider
  EmailProvider email_provider = 7;
  // sub-account for SendGrid accounts
  string sub_account = 8;
}

/**
   Get messages response
*/
message GetMessagesResponse {
  /**
     SendGrid message object
  */
  message Message {
    // sender's email
    string from_email = 1;
    // unique message id
    string message_id = 2;
    // email's subject
    string subject = 3;
    // user's email
    string to_email = 4;
    // status of email delivery
    string status = 5;
    // number of times the email has been opened
    int32 opens_count = 6;
    // number of times the recipient has clicked on links in the email
    int32 clicks_count = 7;
    // time of the last event that was received for the email
    string last_event_time = 8;
    // message campaign id
    int32 campaign_id = 9;
    // message template id
    int32 template_id = 10;
    // message create date & time
    string created_at = 11;
    // recipient state, indicating email bounce reason
    string recipient_state = 12;
  }
  // list of email messages
  repeated Message messages = 1;
}

/**
   Get user subscription request
*/
message GetUserEmailSubscriptionsRequest {
  // user's email
  string email = 1;
  // user persona (consumer, dasher, merchant, DDFW, etc.)
  Persona persona = 2;
  // DD experience
  Experience experience = 3;
}

/**
   Get user subscription response
*/
message GetUserEmailSubscriptionsResponse {
  /**
     user subscriptions for specific email service provider
  */
  message SubscriptionInfo {
    /**
       message channel object
    */
    message MessageChannel {
      // message channel id
      int32 id = 1;
      // message channel name
      string name = 2;
      // boolean indicating user's subscription status to the message channel or not
      bool subscribed = 3;
    }

    /**
       message type object
    */
    message MessageType {
      // message type
      int32 id = 1;
      // message type name
      string name = 2;
      // boolean indicating user's subscription status to the message type or not
      bool subscribed = 3;
    }

    /**
       message group object
    */
    message MessageGroup {
      // message type
      int32 id = 1;
      // message type name
      string name = 2;
      // boolean indicating user's subscription status to the message type or not
      bool subscribed = 3;
    }
    // email provider enum (ex. Iterable)
    EmailProvider email_provider = 1;
    // list of message channels for specific email service provider
    repeated MessageChannel message_channels = 2;
    // list of message types for specific email service provider
    repeated MessageType message_types = 3;
    // list of message groups for specific email service provider
    repeated MessageGroup message_groups = 4;
  }
  // list of email providers with user subscription
  repeated SubscriptionInfo subscriptions = 1;
}

/**
   Get user subscription response
*/
message GetUserEmailSuppressionsResponse {
  /**
     user suppressions for specific email service provider
  */
  message SuppressionInfo {
    /**
       suppression list detail
    */
    message SuppressionList {
      // suppression list name
      string name = 1;
      // suppression list type
      SuppressionType suppression_type = 2;
      // boolean indicating user's suppression list status
      bool in_suppression_list = 3;
      // group id if suppression type is sendgrid unsubscribe group
      int32 group_id = 4;
    }
    // email provider enum(ex. SendGrid, SparkPost)
    EmailProvider email_provider = 1;
    // list of suppressions for specific email service provider
    repeated SuppressionList suppression_lists = 2;
    // sub-account for SendGrid accounts
    string sub_account = 3;
  }
  // list of email providers with suppression lists
  repeated SuppressionInfo suppressions = 2;
}

/**
   Get user suppressions request
*/
message GetUserEmailSuppressionsRequest {
  // user's email
  string email = 1;
  // user persona (consumer, dasher, merchant, DDFW, etc.)
  Persona persona = 2;
  // DD experience
  Experience experience = 3;
}

/**
   Manage subscription request
*/
message ManageSubscriptionsRequest {
  // user's email
  string email = 1;
  // email service provider enum
  EmailProvider email_provider = 2;
  // subscription action to be performed
  SubscriptionAction subscription_action = 3;
  // subscription group id
  int32 subscription_group_id = 4;
  // user's persona
  Persona persona = 5;
  // DD experience
  Experience experience = 6;
}

/**
   Manage subscription response
*/
message ManageSubscriptionsResponse {
  // boolean indicating the request execution status
  bool success = 1;
}

/**
   Manage suppression request
*/
message ManageSuppressionsRequest {
  // user's email
  string email = 1;
  // email service provider enum
  EmailProvider email_provider = 2;
  // suppression action to be performed
  SuppressionAction suppression_action = 3;
  // suppression list type
  SuppressionType suppression_type = 4;
  // user's persona
  Persona persona = 5;
  // DD experience
  Experience experience = 6;
  // subscription group id
  int32 subscription_group_id = 7;
  // sub-account for SendGrid accounts
  string sub_account = 8;
}

/**
   Manage suppression response
*/
message ManageSuppressionsResponse {
  // boolean indicating the request execution status
  bool success = 1;
}

/**
   Handle privacy action request
*/
message HandlePrivacyActionRequest {
  // privacy action
  PrivacyAction action = 1;
  // communication provider enum
  CommunicationProvider provider = 2;
  // user persona
  Persona persona = 3;
  // user's email
  google.protobuf.StringValue email = 4;
  // user id
  int64 user_id = 5;
  // profile id
  int64 profile_id = 6;
  // experience
  Experience experience = 7;
  // phone number
  google.protobuf.StringValue phone_number = 8;
  // privacy request id
  google.protobuf.StringValue privacy_request_id = 9;
}

/**
   Handle privacy action response
*/
message HandlePrivacyActionResponse {}

/**
   Handle privacy action V2 request
*/
message HandlePrivacyActionV2Request {
  // privacy request id
  string privacy_request_id = 1;
  // privacy action
  PrivacyAction action = 2;
  // audience type
  common.notification.v1.NotificationAudienceType audience_type = 3;
  // user id
  int64 user_id = 4;
  // profile id
  int64 profile_id = 5;
  // user's email
  google.protobuf.StringValue email = 6;
  // phone number
  google.protobuf.StringValue phone_number = 7;
}

/**
   Handle privacy action V2 response
*/
message HandlePrivacyActionV2Response {}

/**
   Suppression list types
*/
enum SuppressionType {
  // unspecified suppression type
  SUPPRESSION_TYPE_UNSPECIFIED = 0;
  // sparkpost transactional
  SUPPRESSION_TYPE_SPARKPOST_TRANSACTIONAL = 1;
  // sparkpost non transactional
  SUPPRESSION_TYPE_SPARKPOST_NON_TRANSACTIONAL = 2;
  // sendgrid global suppressions
  SUPPRESSION_TYPE_SENDGRID_GLOBAL_SUPPRESSIONS = 3;
  // sendgrid bounces
  SUPPRESSION_TYPE_SENDGRID_BOUNCES = 4;
  // sendgrid spam reports
  SUPPRESSION_TYPE_SENDGRID_SPAM_REPORTS = 5;
  // sendgrid blocks
  SUPPRESSION_TYPE_SENDGRID_BLOCKS = 6;
  // sendgrid invalid
  SUPPRESSION_TYPE_SENDGRID_INVALID = 7;
  // sendgrid unsubscribe group
  SUPPRESSION_TYPE_SENDGRID_UNSUBSCRIBE_GROUP = 8;
  // braze bounces
  SUPPRESSION_TYPE_BRAZE_BOUNCES = 9;
}

/**
   Suppression list action types
*/
enum SuppressionAction {
  // unspecified action
  SUPPRESSION_ACTION_UNSPECIFIED = 0;
  // add action
  SUPPRESSION_ACTION_ADD = 1;
  // remove action
  SUPPRESSION_ACTION_REMOVE = 2;
}

/**
   Subscription action type
*/
enum SubscriptionAction {
  // unspecified action
  SUBSCRIPTION_ACTION_UNSPECIFIED = 0;
  // message channel subscribe action
  SUBSCRIPTION_ACTION_MESSAGE_CHANNEL_SUBSCRIBE = 1;
  // message channel unsubscribe action
  SUBSCRIPTION_ACTION_MESSAGE_CHANNEL_UNSUBSCRIBE = 2;
  // message type subscribe action
  SUBSCRIPTION_ACTION_MESSAGE_TYPE_SUBSCRIBE = 3;
  // message type unsubscribe action
  SUBSCRIPTION_ACTION_MESSAGE_TYPE_UNSUBSCRIBE = 4;
  // group subscribe action
  SUBSCRIPTION_ACTION_GROUP_SUBSCRIBE = 5;
  // group unsubscribe action
  SUBSCRIPTION_ACTION_GROUP_UNSUBSCRIBE = 6;
}

/**
   Email providers
*/
enum EmailProvider {
  // unspecified email provider
  EMAIL_PROVIDER_UNSPECIFIED = 0;
  // sendgrid email
  EMAIL_PROVIDER_SENDGRID = 1;
  // iterable email
  EMAIL_PROVIDER_ITERABLE = 2;
  // sparkpost email
  EMAIL_PROVIDER_SPARKPOST = 3;
  // hubspot email
  EMAIL_PROVIDER_HUBSPOT = 4;
  // braze email
  EMAIL_PROVIDER_BRAZE = 5;
}

// communication provider enum
enum CommunicationProvider {
  // unspecified communication provider
  COMMUNICATION_PROVIDER_UNSPECIFIED = 0;
  // sendgrid
  COMMUNICATION_PROVIDER_SENDGRID = 1;
  // braze
  COMMUNICATION_PROVIDER_BRAZE = 2;
  // janus preferences
  // on any privacy action, we also have to update/delete the preferences in janus
  COMMUNICATION_PROVIDER_JANUS_PREFERENCES = 3;
}

/**
   Message medium
*/
enum MessageMedium {
  // unspecified message medium
  MESSAGE_MEDIUM_UNSPECIFIED = 0;
  // email
  MESSAGE_MEDIUM_EMAIL = 1;
  // sms
  MESSAGE_MEDIUM_SMS = 2;
  // push notifications
  MESSAGE_MEDIUM_PUSH = 3;
  // in-app message
  MESSAGE_MEDIUM_IN_APP = 4;
}

/**
   Privacy action
*/
enum PrivacyAction {
  // unspecified privacy action
  PRIVACY_ACTION_UNSPECIFIED = 0;
  // communications unsubscribe
  PRIVACY_ACTION_COMMUNICATIONS_UNSUBSCRIBE = 1;
  // communications resubscribe
  PRIVACY_ACTION_COMMUNICATIONS_RESUBSCRIBE = 2;
  // communications forget
  PRIVACY_ACTION_COMMUNICATIONS_FORGET = 3;
}

/**
   Primary entity type
*/
enum PrimaryEntityType {
  // unspecified
  PRIMARY_ENTITY_TYPE_UNSPECIFIED = 0;

  // consumer id
  PRIMARY_ENTITY_TYPE_CONSUMER_ID = 1;

  // dasher id
  PRIMARY_ENTITY_TYPE_DASHER_ID = 2;

  // merchant id
  PRIMARY_ENTITY_TYPE_MERCHANT_ID = 3;

  // user phone number
  PRIMARY_ENTITY_TYPE_USER_PHONE_NUMBER = 4;

  // consumer hashed email
  PRIMARY_ENTITY_TYPE_CONSUMER_HASHED_EMAIL = 5;

  // dasher hashed email
  PRIMARY_ENTITY_TYPE_DASHER_HASHED_EMAIL = 6;

  // merchant hashed email
  PRIMARY_ENTITY_TYPE_MERCHANT_HASHED_EMAIL = 7;

  // consumer email
  PRIMARY_ENTITY_TYPE_CONSUMER_EMAIL = 8;

  // dasher email
  PRIMARY_ENTITY_TYPE_DASHER_EMAIL = 9;

  // merchant email
  PRIMARY_ENTITY_TYPE_MERCHANT_EMAIL = 10;

  // DDfW consumer email
  PRIMARY_ENTITY_TYPE_DDFW_CONSUMER_EMAIL = 11;
}

/**
   Secondary entity type
*/
enum SecondaryEntityType {
  // unspecified
  SECONDARY_ENTITY_TYPE_UNSPECIFIED = 0;

  // business id
  SECONDARY_ENTITY_TYPE_BUSINESS_ID = 1;

  // device id
  SECONDARY_ENTITY_TYPE_DEVICE_ID = 2;
}

/**
   Third entity type
*/
enum ThirdEntityType {
  // unspecified
  THIRD_ENTITY_TYPE_UNSPECIFIED = 0;
}
