syntax = "proto3";
// buf:lint:ignore DIRECTORY_SAME_PACKAGE
// buf:lint:ignore PACKAGE_VERSION_SUFFIX
package custom_integrations_service.v1;

import "google/protobuf/wrappers.proto";

option java_multiple_files = true;
option java_generic_services = true;
option java_package = "com.doordash.rpc.customintegrations";

import "common/service_client_config.proto";

// CRM related integration services
service CrmIntegrationService {
  // Connect to a CRM provider
  rpc ConnectCrmProvider(ConnectCrmProviderRequest) returns (ConnectCrmProviderResponse) {}
  // Update CRM provider data
  rpc UpdateCrmProviderData(UpdateCrmProviderDataRequest) returns (UpdateCrmProviderDataResponse) {};
  // Get CRM provider data
  rpc GetCrmProviderData(GetCrmProviderDataRequest) returns (GetCrmProviderDataResponse) {};
}

// update crm provider data request
message UpdateCrmProviderDataRequest {
  // crm integration id
  string crm_integration_id = 1;
  // CRM provider to connect the integration for
  CrmIntegrationProvider provider = 2;
  // CRM provider data
  ProviderData provider_data = 4;
}

// update crm provider data response
message UpdateCrmProviderDataResponse {
}

// get crm provider data request
message GetCrmProviderDataRequest {
  // crm integration id
  string crm_integration_id = 1;
  // CRM provider to connect the integration for
  CrmIntegrationProvider provider = 2;
}

// get crm provider data response
message GetCrmProviderDataResponse {
  // crm integration id
  string crm_integration_id = 1;
  // CRM provider to connect the integration for
  CrmIntegrationProvider provider = 2;
  // CRM provider data
  ProviderData provider_data = 4;
}

// Connect CRM provider integration request message
message ConnectCrmProviderRequest {
  // crm integration id
  string crm_integration_id = 1;
  // CRM provider to connect the integration for
  CrmIntegrationProvider provider = 2;
  // CRM provider auth data
  ProviderOAuthData oauth_data = 3;
  // CRM provider data
  ProviderData provider_data = 4;
}

// Connect CRM provider integration response message
message ConnectCrmProviderResponse {
}

// CRM providers to perform sync for
enum CrmIntegrationProvider {
  // unspecified
  CRM_INTEGRATION_PROVIDER_UNSPECIFIED = 0;
  // Mailchimp email marketing provider
  CRM_INTEGRATION_PROVIDER_MAILCHIMP = 1;
}

// OAuth data to persist for provider.
// i.e. for Mailchimp: https://mailchimp.com/developer/marketing/guides/access-user-data-oauth-2/
message ProviderOAuthData {
  // OAuth's access_token
  string access_token = 1;
  // OAuth's server_prefix
  string server_prefix = 2;
}

// Provider data used for sync (sync configuration)
message ProviderData {
  // Tags
  repeated Tag tags = 1;
  // Lists
  repeated List lists = 2;
}

// Tags are like labels associated to contacts.
// i.e. for Mailchimp: https://mailchimp.com/developer/transactional/api/tags/
message Tag {
  // Tag string
  string tag = 1;
  // External tag ID
  string external_tag_id = 2;
  // If the tag is selected to associate to the customers data
  bool selected_for_sync = 3;
}

// List consisting of contacts.
// i.e. for Mailchimp (Audiences): https://mailchimp.com/developer/marketing/api/lists/
message List {
  // name
  string name = 1;
  // Mailchimp list ID
  string external_list_id = 2;
  // If the list is selected for sync.
  bool selected_for_sync = 3;
}