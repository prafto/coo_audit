syntax = "proto3";

package growth_governance_center.v1;

import "common/notification.proto";
import "doordash.api/annotations.proto";
import "doordash.api/client.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "growth_journey_service/journey_ui.proto";
import "templating_service/templating_service_common.proto";

option go_package = "github.com/doordash/services-protobuf/generated/growth_governance_center/api/v1";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.growth_governance_center.rpc.api";

// Growth Governance Center endpoints
service GovernanceService {
  option (doordash.api.service) = {
    name: "growth-governance-center"
    url: "growth-governance-center-api.service.prod.ddsd"
    port: 50051
    name_spaces: ["growth-governance-center"]
    api_key_name: "GROWTH_GOVERNANCE_CENTER_API_KEY_FOR_UNIFIED_GATEWAY"
    owner: {
      name: "gplat-eng"
      id: "growth-platform-alerts"
      slack_channel: "#growth-governance-ops"
      email_alias: "gplat-eng@doordash.com"
    }
    target_products: [CX]
  };

  // create owner group and members
  rpc CreateOwnerGroup(CreateOwnerGroupRequest) returns (CreateOwnerGroupResponse) {
    option (google.api.http) = {
      post: "/growth-governance-center/v1/create_owner_group"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      authentication_config: {enable_okta_verification: true}
      target_products: [CX]
    };
  }
  // update owner group
  rpc UpdateOwnerGroup(UpdateOwnerGroupRequest) returns (UpdateOwnerGroupResponse) {
    option (google.api.http) = {
      post: "/growth-governance-center/v1/update_owner_group"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      authentication_config: {enable_okta_verification: true}
      target_products: [CX]
    };
  }
  // bulk add members to a given group
  rpc BulkAddOwnerGroupMembers(BulkAddOwnerGroupMembersRequest) returns (BulkAddOwnerGroupMembersResponse) {
    option (google.api.http) = {
      post: "/growth-governance-center/v1/bulk_add_owner_group_members"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      authentication_config: {enable_okta_verification: true}
      target_products: [CX]
    };
  }
  // bulk remove members from the given group
  rpc BulkRemoveOwnerGroupMembers(BulkRemoveOwnerGroupMembersRequest) returns (BulkRemoveOwnerGroupMembersResponse) {
    option (google.api.http) = {
      post: "/growth-governance-center/v1/bulk_remove_owner_group_members"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      authentication_config: {enable_okta_verification: true}
      target_products: [CX]
    };
  }
  // get the roles of an operator in a group
  rpc GetOwnerGroupRolesForOperator(GetOwnerGroupRolesForOperatorRequest) returns (GetOwnerGroupRolesForOperatorResponse) {
    option (google.api.http) = {get: "/growth-governance-center/v1/get_owner_group_roles_for_operator"};
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      authentication_config: {enable_okta_verification: true}
      target_products: [CX]
    };
  }
  // get a list of owner groups which a given operator is a member of
  rpc GetOperatorOwnerGroups(GetOperatorOwnerGroupsRequest) returns (GetOperatorOwnerGroupsResponse) {
    option (google.api.http) = {get: "/growth-governance-center/v1/get_operator_owner_groups"};
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      authentication_config: {enable_okta_verification: true}
      target_products: [CX]
    };
  }
  // verify whether a given operator is a super-user
  rpc IsSuperUser(IsSuperUserRequest) returns (IsSuperUserResponse) {
    option (google.api.http) = {get: "/growth-governance-center/v1/is_super_user"};
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      authentication_config: {enable_okta_verification: true}
      target_products: [CX]
    };
  }
  // get a list of operators from a given owner group
  rpc GetOwnerGroupOperators(GetOwnerGroupOperatorsRequest) returns (GetOwnerGroupOperatorsResponse) {
    option (google.api.http) = {get: "/growth-governance-center/v1/get_owner_group_operators"};
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      authentication_config: {enable_okta_verification: true}
      target_products: [CX]
    };
  }
  // get all owner groups available in the governance platform
  rpc GetAllOwnerGroups(GetAllOwnerGroupsRequest) returns (GetAllOwnerGroupsResponse) {
    option (google.api.http) = {get: "/growth-governance-center/v1/get_all_owner_groups"};
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      authentication_config: {enable_okta_verification: true}
      target_products: [CX]
    };
  }
  // get all owner groups available in the governance platform
  rpc GetOwnerGroup(GetOwnerGroupRequest) returns (GetOwnerGroupResponse) {
    option (google.api.http) = {get: "/growth-governance-center/v1/get_owner_group"};
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      authentication_config: {enable_okta_verification: true}
      target_products: [CX]
    };
  }

  // assign an owner group to an artifact
  rpc AssignOwnerGroupToArtifact(AssignOwnerGroupToArtifactRequest) returns (AssignOwnerGroupToArtifactResponse) {
    option (google.api.http) = {
      post: "/growth-governance-center/v1/assign_owner_group_to_artifact"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      authentication_config: {enable_okta_verification: true}
      target_products: [CX]
    };
  }

  // get the owner group of an artifact
  rpc GetArtifactOwnerGroup(GetArtifactOwnerGroupRequest) returns (GetArtifactOwnerGroupResponse) {
    option (google.api.http) = {get: "/growth-governance-center/v1/get_artifact_owner_group"};
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      authentication_config: {enable_okta_verification: true}
      target_products: [CX]
    };
  }

  // get the artifacts owned by a given group
  rpc GetOwnerGroupArtifacts(GetOwnerGroupArtifactsRequest) returns (GetOwnerGroupArtifactsResponse) {
    option (google.api.http) = {get: "/growth-governance-center/v1/get_owner_group_artifacts"};
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      authentication_config: {enable_okta_verification: true}
      target_products: [CX]
    };
  }

  // notify owner group
  rpc NotifyOwnerGroup(NotifyOwnerGroupRequest) returns (NotifyOwnerGroupResponse) {
    option (google.api.http) = {
      post: "/growth-governance-center/v1/notify_owner_group"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      authentication_config: {enable_okta_verification: true}
      target_products: [CX]
    };
  }

  // create an approval request
  rpc CreateApprovalRequest(CreateApprovalRequestRequest) returns (CreateApprovalRequestResponse) {
    option (google.api.http) = {
      post: "/growth-governance-center/v1/create_approval_request"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      authentication_config: {enable_okta_verification: true}
      target_products: [CX]
    };
  }

  // update approval policy
  rpc UpdateApprovalRequest(UpdateApprovalRequestRequest) returns (UpdateApprovalRequestResponse) {
    option (google.api.http) = {
      post: "/growth-governance-center/v1/update_approval_request"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      authentication_config: {enable_okta_verification: true}
      target_products: [CX]
    };
  }

  // get an approval request by id
  rpc GetApprovalRequest(GetApprovalRequestRequest) returns (GetApprovalRequestResponse) {
    option (google.api.http) = {get: "/growth-governance-center/v1/get_approval_request"};
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      authentication_config: {enable_okta_verification: true}
      target_products: [CX]
    };
  }

  // get approval requests for a given owner group
  rpc GetApprovalRequestsForOwnerGroup(GetApprovalRequestsForOwnerGroupRequest) returns (GetApprovalRequestsForOwnerGroupResponse) {
    option (google.api.http) = {get: "/growth-governance-center/v1/get_approval_requests_for_owner_group"};
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      authentication_config: {enable_okta_verification: true}
      target_products: [CX]
    };
  }

  // is there any active approval request for an artifact
  rpc GetPendingApprovalRequestForArtifact(GetPendingApprovalRequestForArtifactRequest) returns (GetPendingApprovalRequestForArtifactResponse) {
    option (google.api.http) = {get: "/growth-governance-center/v1/get_pending_approval_request_for_artifact"};
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      authentication_config: {enable_okta_verification: true}
      target_products: [CX]
    };
  }

  // get an operator’s approval requests
  rpc GetApprovalRequestsForOperator(GetApprovalRequestsForOperatorRequest) returns (GetApprovalRequestsForOperatorResponse) {
    option (google.api.http) = {get: "/growth-governance-center/v1/get_approval_requests_for_operator"};
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      authentication_config: {enable_okta_verification: true}
      target_products: [CX]
    };
  }

  // get the requests an operator needs to approve
  rpc GetRequestsForApproval(GetRequestsForApprovalRequest) returns (GetRequestsForApprovalResponse) {
    option (google.api.http) = {get: "/growth-governance-center/v1/get_requests_for_approval"};
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      authentication_config: {enable_okta_verification: true}
      target_products: [CX]
    };
  }

  // submit approval or rejection on an approval request
  rpc SubmitDecision(SubmitDecisionRequest) returns (SubmitDecisionResponse) {
    option (google.api.http) = {
      post: "/growth-governance-center/v1/submit_decision"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      authentication_config: {enable_okta_verification: true}
      target_products: [CX]
    };
  }

  // create an approval policy
  rpc CreateApprovalPolicy(CreateApprovalPolicyRequest) returns (CreateApprovalPolicyResponse) {
    option (google.api.http) = {
      post: "/growth-governance-center/v1/create_approval_policy"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      authentication_config: {enable_okta_verification: true}
      target_products: [CX]
    };
  }

  // update approval policy
  rpc UpdateApprovalPolicy(UpdateApprovalPolicyRequest) returns (UpdateApprovalPolicyResponse) {
    option (google.api.http) = {
      post: "/growth-governance-center/v1/update_approval_policy"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      authentication_config: {enable_okta_verification: true}
      target_products: [CX]
    };
  }

  // get an approval policy by id
  rpc GetApprovalPolicy(GetApprovalPolicyRequest) returns (GetApprovalPolicyResponse) {
    option (google.api.http) = {get: "/growth-governance-center/v1/get_approval_policy"};
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      authentication_config: {enable_okta_verification: true}
      target_products: [CX]
    };
  }

  // get all approval policies
  rpc GetAllApprovalPolicies(GetAllApprovalPoliciesRequest) returns (GetAllApprovalPoliciesResponse) {
    option (google.api.http) = {get: "/growth-governance-center/v1/get_all_approval_policies"};
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      authentication_config: {enable_okta_verification: true}
      target_products: [CX]
    };
  }

  // get the owner group history
  rpc GetOwnerGroupHistory(GetOwnerGroupHistoryRequest) returns (GetOwnerGroupHistoryResponse) {
    option (google.api.http) = {get: "/growth-governance-center/v1/get_owner_group_history"};
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      authentication_config: {enable_okta_verification: true}
      target_products: [CX]
    };
  }

  // get approval requests for a given artifact
  rpc GetApprovalRequestsForArtifact(GetApprovalRequestsForArtifactRequest) returns (GetApprovalRequestsForArtifactResponse) {
    option (google.api.http) = {get: "/growth-governance-center/v1/get_approval_requests_for_artifact"};
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      authentication_config: {enable_okta_verification: true}
      target_products: [CX]
    };
  }

  // create change entry
  rpc CreateChangeEntry(CreateChangeEntryRequest) returns (CreateChangeEntryResponse) {
    option (google.api.http) = {post: "/growth-governance-center/v1/create_change_entry"};
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      authentication_config: {enable_okta_verification: true}
      target_products: [CX]
    };
  }

  // get a list of change entries
  rpc GetChangeEntries(GetChangeEntriesRequest) returns (GetChangeEntriesResponse) {
    option (google.api.http) = {get: "/growth-governance-center/v1/get_change_entries"};
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      authentication_config: {enable_okta_verification: true}
      target_products: [CX]
    };
  }

  // get a single change entry
  rpc GetChangeEntry(GetChangeEntryRequest) returns (GetChangeEntryResponse) {
    option (google.api.http) = {get: "/growth-governance-center/v1/get_change_entry"};
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      authentication_config: {enable_okta_verification: true}
      target_products: [CX]
    };
  }

  // assign an owner group to an artifact using the group name
  rpc AssignOwnerGroupToArtifactByGroupName(AssignOwnerGroupToArtifactByGroupNameRequest) returns (AssignOwnerGroupToArtifactByGroupNameResponse) {
    option (google.api.http) = {
      post: "/growth-governance-center/v1/assign_owner_group_to_artifact_by_group_name"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      authentication_config: {enable_okta_verification: true}
      target_products: [CX]
    };
  }

  // get an owner group by name
  rpc GetOwnerGroupByName(GetOwnerGroupByNameRequest) returns (GetOwnerGroupByNameResponse) {
    option (google.api.http) = {get: "/growth-governance-center/v1/get_owner_group_by_name"};
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      authentication_config: {enable_okta_verification: true}
      target_products: [CX]
    };
  }

  // bulk get owner groups
  rpc BulkGetOwnerGroups(BulkGetOwnerGroupsRequest) returns (BulkGetOwnerGroupsResponse) {
    option (google.api.http) = {get: "/growth-governance-center/v1/bulk_get_owner_groups"};
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      authentication_config: {enable_okta_verification: true}
      target_products: [CX]
    };
  }

  // get the list of slack channels where the caller is a member of
  rpc GetSlackChannels(GetSlackChannelsRequest) returns (GetSlackChannelsResponse) {
    option (google.api.http) = {get: "/growth-governance-center/v1/get_slack_channels"};
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      authentication_config: {enable_okta_verification: true}
      target_products: [CX]
    };
  }

  // get a list of operators matching a given name
  rpc GetOperatorsList(GetOperatorsListRequest) returns (GetOperatorsListResponse) {
    option (google.api.http) = {get: "/growth-governance-center/v1/get_operators_list"};
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      authentication_config: {enable_okta_verification: true}
      target_products: [CX]
    };
  }

  // get the url mapping for all artifact types
  rpc GetUrlMappings(GetUrlMappingsRequest) returns (GetUrlMappingsResponse) {
    option (google.api.http) = {get: "/growth-governance-center/v1/get_url_mappings"};
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      authentication_config: {enable_okta_verification: true}
      target_products: [CX]
    };
  }
  // fetch all the hashtags associated to a given artifact
  rpc GetHashtagsForArtifact(GetHashtagsForArtifactRequest) returns (GetHashtagsForArtifactResponse) {
    option (google.api.http) = {get: "/growth-governance-center/v1/get_hashtags_for_artifact"};
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      authentication_config: {enable_okta_verification: true}
      target_products: [CX]
    };
  }
  // remove hashtags from an artifact in bulk
  rpc BulkRemoveHashtags(BulkRemoveHashtagsRequest) returns (BulkRemoveHashtagsResponse) {
    option (google.api.http) = {
      post: "/growth-governance-center/v1/bulk_remove_hashtags"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      authentication_config: {enable_okta_verification: true}
      target_products: [CX]
    };
  }
  // add hashtags to an artifact in bulk
  rpc BulkAddHashtags(BulkAddHashtagsRequest) returns (BulkAddHashtagsResponse) {
    option (google.api.http) = {post: "/growth-governance-center/v1/bulk_add_hashtags"};
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      authentication_config: {enable_okta_verification: true}
      target_products: [CX]
    };
  }

  // fetch all the existing / non-repeating hashtags across all artifacts from all groups
  rpc GetAllHashtags(GetAllHashtagsRequest) returns (GetAllHashtagsResponse) {
    option (google.api.http) = {get: "/growth-governance-center/v1/get_all_hashtags"};
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      authentication_config: {enable_okta_verification: true}
      target_products: [CX]
    };
  }

  // fetch all the artifacts associated to a given hashtag
  rpc GetArtifactsForHashtag(GetArtifactsForHashtagRequest) returns (GetArtifactsForHashtagResponse) {
    option (google.api.http) = {get: "/growth-governance-center/v1/get_artifacts_for_hashtag"};
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      authentication_config: {enable_okta_verification: true}
      target_products: [CX]
    };
  }
}

// role
enum Role {
  // unspecified
  ROLE_UNSPECIFIED = 0;
  // operator
  ROLE_OPERATOR = 1;
  // manager
  ROLE_MANAGER = 2;
}

// platform
enum Platform {
  // unspecified
  PLATFORM_UNSPECIFIED = 0;
  // journey
  PLATFORM_JOURNEY = 1;
  // ep
  PLATFORM_EP = 2;
  // np
  PLATFORM_NP = 3;
}

// ArtifactType
enum ArtifactType {
  // unspecified
  ARTIFACT_TYPE_UNSPECIFIED = 0;
  // journey workflow
  ARTIFACT_TYPE_JOURNEY_WORKFLOW = 1;
  // ep program
  ARTIFACT_TYPE_EP_PROGRAM = 2;
  // np campaign
  ARTIFACT_TYPE_NOTIFICATION_CAMPAIGN = 3;
  // np template
  ARTIFACT_TYPE_NOTIFICATION_TEMPLATE = 4;
}

// ApprovalRequestStatus
enum ApprovalRequestStatus {
  // unspecified
  APPROVAL_REQUEST_STATUS_UNSPECIFIED = 0;
  // pending manager
  APPROVAL_REQUEST_STATUS_PENDING_MANAGER_DECISION = 1;
  // pending final approver
  APPROVAL_REQUEST_STATUS_PENDING_FINAL_APPROVER_DECISION = 2;
  // manager approved
  APPROVAL_REQUEST_STATUS_MANAGER_APPROVED = 3;
  // approved by final approver
  APPROVAL_REQUEST_STATUS_FINAL_APPROVER_APPROVED = 4;
  // manager rejected
  APPROVAL_REQUEST_STATUS_MANAGER_REJECTED = 5;
  // rejected by final approver
  APPROVAL_REQUEST_STATUS_FINAL_APPROVER_REJECTED = 6;
  // canceled by requestor
  APPROVAL_REQUEST_STATUS_CANCELLED = 7;
}

// Decision
enum Decision {
  // unspecified
  DECISION_UNSPECIFIED = 0;
  // approved
  DECISION_APPROVED = 1;
  // rejected
  DECISION_REJECTED = 2;
  // canceled
  DECISION_CANCELED = 3;
}

// Change Type
enum ChangeType {
  // unspecified
  CHANGE_TYPE_UNSPECIFIED = 0;
  // create the artifact
  CHANGE_TYPE_CREATE = 1;
  // update the artifact
  CHANGE_TYPE_UPDATE = 2;
  // delete the artifact
  CHANGE_TYPE_DELETE = 3;
}

// Change Content Type
enum ChangeContentType {
  // unspecified
  CHANGE_CONTENT_TYPE_UNSPECIFIED = 0;
  // simple value changes
  CHANGE_CONTENT_TYPE_SIMPLE_VALUES = 1;
  // workflow graph change
  CHANGE_CONTENT_TYPE_JOURNEY_WORKFLOW_GRAPH = 2;
  // notification template content change
  CHANGE_CONTENT_TYPE_NOTIFICATION_TEMPLATE_CONTENT = 3;
}

// ApprovalRequest
message ApprovalRequest {
  // uuid
  google.protobuf.StringValue request_uuid = 1;
  // justification
  google.protobuf.StringValue justification = 2;
  // status
  ApprovalRequestStatus status = 3;
  // artifact id
  google.protobuf.StringValue artifact_id = 4;
  // platform
  Platform platform = 5;
  // owner group
  google.protobuf.StringValue owner_group_uuid = 6;
  // policy
  google.protobuf.StringValue policy_uuid = 7;
  // requested by
  google.protobuf.StringValue requested_by_email = 8;
  // requested at
  google.protobuf.Timestamp requested_at_utc = 9;
  // manager
  google.protobuf.StringValue manager_reviewer_email = 10;
  // reviewed at
  google.protobuf.Timestamp manager_reviewed_at_utc = 11;
  // manager comment
  google.protobuf.StringValue manager_reviewer_comment = 12;
  // final reviewer
  google.protobuf.StringValue final_reviewer_email = 13;
  // final reviewer submitted at
  google.protobuf.Timestamp final_reviewed_at_utc = 14;
  // final reviewer comment
  google.protobuf.StringValue final_reviewer_comment = 15;
  // artifact type
  ArtifactType artifact_type = 16;
}

// approval policy
message ApprovalPolicy {
  // policy uuid
  google.protobuf.StringValue policy_uuid = 1;
  // display_name
  google.protobuf.StringValue display_name = 2;
  // description
  google.protobuf.StringValue description = 3;
  // platform
  Platform platform = 4;
  // created by
  google.protobuf.StringValue created_by_email = 5;
  // created at
  google.protobuf.Timestamp created_at_utc = 6;
  // updated by
  google.protobuf.StringValue updated_by_email = 7;
  // updated at
  google.protobuf.Timestamp updated_at_utc = 8;
  // manager approval
  bool manager_approval = 9;
  // final approver group
  google.protobuf.StringValue final_approver_group_uuid = 10;
}

// request to create an approval request
message CreateApprovalRequestRequest {
  // justification
  google.protobuf.StringValue justification = 1;
  // artifact id
  google.protobuf.StringValue artifact_id = 2;
  // platform
  Platform platform = 3;
  // policy uuid
  google.protobuf.StringValue policy_uuid = 4;
  // artifact type
  ArtifactType artifact_type = 5;
}

// CreateApprovalRequestResponse
message CreateApprovalRequestResponse {
  // request_uuid
  google.protobuf.StringValue request_uuid = 1;
}

// UpdateApprovalRequestRequest
message UpdateApprovalRequestRequest {
  // request uuid
  google.protobuf.StringValue request_uuid = 1;
  // justification
  google.protobuf.StringValue justification = 2;
  // artifact id
  google.protobuf.StringValue artifact_id = 3;
  // platform
  Platform platform = 4;
  // policy
  google.protobuf.StringValue policy_uuid = 5;
}

// UpdateApprovalRequestResponse
message UpdateApprovalRequestResponse {
  // approval request
  ApprovalRequest approval_request = 1;
}

// get approval request
message GetApprovalRequestRequest {
  // request uuid
  google.protobuf.StringValue request_uuid = 1;
}

// response to get approval request
message GetApprovalRequestResponse {
  // approval request
  ApprovalRequest approval_request = 1;
}

// GetApprovalRequestsForOwnerGroupRequest
message GetApprovalRequestsForOwnerGroupRequest {
  // group uuid
  google.protobuf.StringValue owner_group_uuid = 1;
}

// GetApprovalRequestsForOwnerGroupResponse
message GetApprovalRequestsForOwnerGroupResponse {
  // approval requests
  repeated ApprovalRequest approval_requests = 1;
}

// request to create an approval request
message GetPendingApprovalRequestForArtifactRequest {
  // artifact
  google.protobuf.StringValue artifact_id = 1;
  // platform
  Platform platform = 2;
}

// GetPendingApprovalRequestForArtifactResponse
message GetPendingApprovalRequestForArtifactResponse {
  // approval request
  ApprovalRequest approval_request = 1;
}

// get operator’s requests
message GetApprovalRequestsForOperatorRequest {
  // exclude pending ones
  bool exclude_pending = 1;
}

// get operator’s requests
message GetApprovalRequestsForOperatorResponse {
  // approval request
  repeated ApprovalRequest approval_requests = 1;
}

// get requests an operator needs to approve
message GetRequestsForApprovalRequest {}

// requests an operator needs to approve
message GetRequestsForApprovalResponse {
  // approval requests
  repeated ApprovalRequest approval_requests = 1;
}

// approve or reject an approval request
message SubmitDecisionRequest {
  // approval request uuid
  google.protobuf.StringValue request_uuid = 1;
  // decision
  Decision decision = 2;
  // comment
  google.protobuf.StringValue reviewer_comment = 4;
}

// SubmitDecisionResponse
message SubmitDecisionResponse {
  // request_uuid
  google.protobuf.StringValue request_uuid = 1;
  // decision
  ApprovalRequestStatus status = 2;
}

// create an approval policy
message CreateApprovalPolicyRequest {
  // display_name
  google.protobuf.StringValue display_name = 1;
  // description
  google.protobuf.StringValue description = 2;
  // platform
  Platform platform = 3;
  // manager approval
  bool manager_approval = 4;
  // final approver group
  google.protobuf.StringValue final_approver_group_uuid = 5;
}

// response to create policy
message CreateApprovalPolicyResponse {
  // approval policy uuid
  google.protobuf.StringValue policy_uuid = 1;
}

// get an approval policy
message GetApprovalPolicyRequest {
  // approval policy uuid
  google.protobuf.StringValue policy_uuid = 1;
}

// get policy response
message GetApprovalPolicyResponse {
  // approval policy
  ApprovalPolicy approval_policy = 1;
}

// GetAllApprovalPoliciesRequest
message GetAllApprovalPoliciesRequest {
  // platform or unspecified to get all policies across all platforms
  Platform platform = 1;
}

// GetAllApprovalPoliciesResponse
message GetAllApprovalPoliciesResponse {
  // approval policies
  repeated ApprovalPolicy approval_policies = 1;
}

// update an approval policy
message UpdateApprovalPolicyRequest {
  // approval policy uuid
  google.protobuf.StringValue policy_uuid = 1;
  // display_name
  google.protobuf.StringValue display_name = 2;
  // description
  google.protobuf.StringValue description = 3;
  // platform
  Platform platform = 4;
  // manager approval
  bool manager_approval = 5;
  // final approver group
  google.protobuf.StringValue final_approver_group_uuid = 6;
}

// response to update policy
message UpdateApprovalPolicyResponse {
  // approval policy
  ApprovalPolicy approval_policy = 1;
}

// approval request decision - kafka message definition
message ApprovalRequestDecision {
  // request id
  google.protobuf.StringValue request_uuid = 1;
  // platform
  google.protobuf.StringValue platform = 2;
  // justification
  google.protobuf.StringValue justification = 3;
  // policy uuid
  google.protobuf.StringValue policy_uuid = 5;
  // request by email
  google.protobuf.StringValue requested_by_email = 6;
  // requested at
  google.protobuf.Timestamp requested_at_utc = 7;
  // manager approver
  google.protobuf.StringValue manager_approver_email = 8;
  // manager decision
  ApprovalRequestStatus manager_approver_decision = 9;
  // decision at
  google.protobuf.Timestamp manager_approver_decision_at_utc = 10;
  // manager comment
  google.protobuf.StringValue manager_approver_comment = 11;
  // final approver
  google.protobuf.StringValue final_approver_email = 12;
  // final approver decision
  ApprovalRequestStatus final_approver_decision = 13;
  // decision at
  google.protobuf.Timestamp final_approver_decision_at_utc = 14;
  // final approver comment
  google.protobuf.StringValue final_approver_comment = 15;
}

// Operator
message Operator {
  // id
  google.protobuf.StringValue id = 1;
  // name
  google.protobuf.StringValue name = 2;
  // email
  google.protobuf.StringValue email = 3;
  // slack id
  google.protobuf.StringValue slack_id = 5;
}

// OwnerGroupMember
message OwnerGroupMember {
  // uuid
  google.protobuf.StringValue owner_group_uuid = 1;
  // uuid
  google.protobuf.StringValue owner_group_name = 2;
  // operator
  Operator operator = 3;
  // platform
  Platform platform = 4;
  // role
  Role role = 5;
}

// OwnerGroup
message OwnerGroup {
  // uuid
  google.protobuf.StringValue owner_group_uuid = 1;
  // name
  google.protobuf.StringValue name = 2;
  // description
  google.protobuf.StringValue description = 3;
  // members
  repeated OwnerGroupMember members = 4;
  // slack channel
  google.protobuf.StringValue slack_channel = 5;
}

// CreateOwnerGroupRequest
message CreateOwnerGroupRequest {
  // name
  google.protobuf.StringValue owner_group_name = 1;
  // description
  google.protobuf.StringValue description = 2;
  // initial members
  repeated OwnerGroupMember owner_group_members = 3;
  // slack channel id
  google.protobuf.StringValue slack_channel_id = 4;
}

// CreateOwnerGroupResponse
message CreateOwnerGroupResponse {
  // uuid
  google.protobuf.StringValue owner_group_uuid = 1;
}

// UpdateOwnerGroupRequest
message UpdateOwnerGroupRequest {
  // uuid
  google.protobuf.StringValue group_uuid = 1;
  // group description
  google.protobuf.StringValue description = 3;
  // group slack channel id
  google.protobuf.StringValue slack_channel_id = 4;
}

// UpdateOwnerGroupResponse
message UpdateOwnerGroupResponse {
  // owner group
  OwnerGroup owner_group = 1;
}

// BulkAddOwnerGroupMembersRequest
message BulkAddOwnerGroupMembersRequest {
  // group uuid
  google.protobuf.StringValue owner_group_uuid = 1;
  // members
  repeated OwnerGroupMember owner_group_members = 2;
}

// BulkAddOwnerGroupMembersResponse
message BulkAddOwnerGroupMembersResponse {
  // members
  repeated OwnerGroupMember owner_group_members = 1;
}

// BulkRemoveOwnerGroupMembersRequest
message BulkRemoveOwnerGroupMembersRequest {
  // group uuid
  google.protobuf.StringValue owner_group_uuid = 1;
  // members
  repeated OwnerGroupMember owner_group_members = 2;
}

// BulkRemoveOwnerGroupMembersResponse
message BulkRemoveOwnerGroupMembersResponse {
  // members
  repeated OwnerGroupMember owner_group_members = 1;
}

// get the roles of the current operator in the given group
message GetOwnerGroupRolesForOperatorRequest {
  // group
  google.protobuf.StringValue owner_group_uuid = 1;
  // platform (or unset to get all the operator roles across platforms in the group)
  Platform platform = 2;
}

// GetOwnerGroupRoleForOperatorResponse
message GetOwnerGroupRolesForOperatorResponse {
  // list of groups
  repeated OwnerGroupMember owner_group_member_list = 1;
}

// verify whether the current operator is a super user
message IsSuperUserRequest {
  // platform
  Platform platform = 1;
}

// IsSuperUserResponse
message IsSuperUserResponse {
  // is super user
  bool is_super_user = 1;
}

// get a list of owner groups which the given operator (or caller if operator_email not provided) is a member of
message GetOperatorOwnerGroupsRequest {
  // platform (or unset to get every operator groups)
  Platform platform = 1;
  // operator email
  google.protobuf.StringValue operator_email = 2;
  // exclude the superusers group
  bool exclude_superusers_group = 3;
}

// list of owner groups which the given operator is a member of
message GetOperatorOwnerGroupsResponse {
  // list of groups
  repeated OwnerGroupMember owner_group_member_list = 1;
}

// GetOwnerGroupOperatorsRequest
message GetOwnerGroupOperatorsRequest {
  // group uuid
  google.protobuf.StringValue owner_group_uuid = 1;
}

// GetOwnerGroupOperatorsResponse
message GetOwnerGroupOperatorsResponse {
  // list of group members
  repeated OwnerGroupMember owner_group_member_list = 1;
}

// GetAllOwnerGroupsRequest
message GetAllOwnerGroupsRequest {}

// GetAllOwnerGroupsResponse
message GetAllOwnerGroupsResponse {
  // groups
  repeated OwnerGroup owner_groups = 1;
}

// AssignOwnerGroupToArtifactRequest
message AssignOwnerGroupToArtifactRequest {
  // artifact id
  google.protobuf.StringValue artifact_id = 1;
  // group uuid
  google.protobuf.StringValue owner_group_uuid = 2;
  // platform
  Platform platform = 3;
  // artifact type
  ArtifactType artifact_type = 4;
}

// AssignOwnerGroupToArtifactResponse
message AssignOwnerGroupToArtifactResponse {
  // artifact id
  google.protobuf.StringValue artifact_id = 1;
  // group uuid
  google.protobuf.StringValue owner_group_uuid = 2;
  // group name
  google.protobuf.StringValue owner_group_name = 3;
}

// GetArtifactOwnerGroupRequest
message GetArtifactOwnerGroupRequest {
  // artifact id
  google.protobuf.StringValue artifact_id = 1;
  // platform
  Platform platform = 2;
}

// GetArtifactOwnerGroupResponse
message GetArtifactOwnerGroupResponse {
  // owner group
  OwnerGroup owner_group = 1;
}

// notify request
message NotifyOwnerGroupRequest {
  // group uuid
  google.protobuf.StringValue artifact_id = 1;
  // platform
  Platform platform = 2;
  // customized content of the notification
  google.protobuf.StringValue notification_content = 3;
  // indicates whether to tag the manager in the owner group
  // if this field is not set, then the manager will be tagged
  google.protobuf.BoolValue should_tag_manager = 4;
}

// notify owner group response
message NotifyOwnerGroupResponse {}

// GetOwnerGroupArtifactsRequest
message GetOwnerGroupArtifactsRequest {
  // group uuid
  google.protobuf.StringValue owner_group_uuid = 1;
  // platform (or all of the artifacts if not set)
  Platform platform = 2;
}

// OwnerGroupArtifact
message OwnerGroupArtifact {
  // artifact id
  google.protobuf.StringValue artifact_id = 1;
  // platform
  Platform platform = 2;
  // artifact type
  ArtifactType artifact_type = 3;
  // hashtags
  repeated google.protobuf.StringValue hashtags = 4;
}

// GetOwnerGroupArtifactsResponse
message GetOwnerGroupArtifactsResponse {
  // owner group
  repeated OwnerGroupArtifact owner_group_artifacts = 2;
}

// GetOwnerGroupRequest
message GetOwnerGroupRequest {
  // group uuid
  google.protobuf.StringValue owner_group_uuid = 1;
}

// GetOwnerGroupResponse
message GetOwnerGroupResponse {
  // owner group
  OwnerGroup owner_group = 1;
}

// OwnerGroupHistory
message OwnerGroupHistory {
  // id
  google.protobuf.StringValue owner_group_uuid = 1;
  // updated by email
  google.protobuf.StringValue updated_by_email = 2;
  // requested at
  google.protobuf.Timestamp updated_at_utc = 3;
  // update type
  google.protobuf.StringValue update_type = 4;
  // slack id
  google.protobuf.StringValue update_details = 5;
}

// GetOwnerGroupHistoryRequest
message GetOwnerGroupHistoryRequest {
  // group uuid
  google.protobuf.StringValue owner_group_uuid = 1;
}

// GetOwnerGroupHistoryResponse
message GetOwnerGroupHistoryResponse {
  // owner_group_history
  repeated OwnerGroupHistory owner_group_history = 1;
}

// GetApprovalRequestsForArtifactRequest
message GetApprovalRequestsForArtifactRequest {
  // artifact id
  google.protobuf.StringValue artifact_id = 1;
  // platform
  Platform platform = 2;
}

// GetApprovalRequestsForArtifactResponse
message GetApprovalRequestsForArtifactResponse {
  // approval requests
  repeated ApprovalRequest approval_requests = 1;
}

// Wrapper message for multiple SimpleValueChange
message SimpleValueChanges {
  // repeated simple value changes
  repeated SimpleValueChange simple_value_changes = 1;
}

// SimpleValueChange
message SimpleValueChange {
  // field name of the changed simple value
  google.protobuf.StringValue field_name = 1;
  // old value of the simple value field
  google.protobuf.StringValue old_value = 2;
  // new value of the simple value field
  google.protobuf.StringValue new_value = 3;
}

// JourneyWorkflowChange
message JourneyWorkflowChange {
  // the old graph for the journey platform
  growth_journey_service.v1.JourneyWorkflowGraph old_graph = 1;
  // the new graph for the journey platform
  growth_journey_service.v1.JourneyWorkflowGraph new_graph = 2;
  // a list of UUIDs for the updated nodes.
  repeated google.protobuf.StringValue updated_node_uuids = 3;
  // a list of UUIDs for the created nodes.
  repeated google.protobuf.StringValue created_node_uuids = 4;
  // a list of UUIDs for the deleted nodes.
  repeated google.protobuf.StringValue deleted_node_uuids = 5;
}

// NotificationTemplateContentChange
message NotificationTemplateContentChange {
  // Notification ChannelType: email/push/hub/sms
  common.notification.v1.NotificationChannelType channel_type = 1;
  // the new content for the notification template
  repeated templating_service.v1.Content new_template_content = 2;
  // the old content for the notification template
  repeated templating_service.v1.Content old_template_content = 3;
}

// CreateChangeEntryRequest
message CreateChangeEntryRequest {
  // id of the changed artifact
  google.protobuf.StringValue artifact_id = 1;
  // change type of the artifact
  ChangeType change_type = 2;
  // platform
  Platform platform = 3;
  // change type of the change content
  ChangeContentType change_content_type = 4;
  // change detail
  oneof change_detail {
    // simple changes
    SimpleValueChanges simple_changes = 5;
    // workflow change
    JourneyWorkflowChange journey_workflow_change = 6;
    // Notification Template Content change
    NotificationTemplateContentChange notification_template_content_change = 7;
  }
}

// CreateChangeEntryResponse
message CreateChangeEntryResponse {
  // uuid of the change entry
  google.protobuf.StringValue change_entry_uuid = 1;
}

// Request of GetChangeEntries
message GetChangeEntriesRequest {
  // id of the artifact
  google.protobuf.StringValue artifact_id = 1;
  // platform
  Platform platform = 2;
}

// Change Entries
message ChangeEntry {
  // the uuid of the change entry
  google.protobuf.StringValue change_entry_uuid = 1;
  // The email of the person who makes the change
  google.protobuf.StringValue changed_by_email = 2;
  // timestamp
  google.protobuf.Timestamp changed_at_utc = 3;
  // Change type of the artifact
  ChangeType change_type = 4;
  // Change type of the change detail
  ChangeContentType change_content_type = 5;
  // The Change detail of the change
  oneof change_detail {
    // Simple changes
    SimpleValueChanges simple_changes = 6;
    // Journey Workflow change
    JourneyWorkflowChange journey_workflow_change = 7;
    // Notification Template Content change
    NotificationTemplateContentChange notification_template_content_change = 8;
  }
}

// response of GetChangeEntriesRequest
message GetChangeEntriesResponse {
  // List of change entries for the artifact
  repeated ChangeEntry change_entries = 1;
}

// Request of GetChangeEntry
message GetChangeEntryRequest {
  // uuid of the change entry
  google.protobuf.StringValue change_entry_uuid = 1;
}

// Response of GetChangeEntry
message GetChangeEntryResponse {
  // change entry for the artifact
  ChangeEntry change_entry = 1;
}

// AssignOwnerGroupToArtifactRequest
message AssignOwnerGroupToArtifactByGroupNameRequest {
  // artifact id
  google.protobuf.StringValue artifact_id = 1;
  // group name
  google.protobuf.StringValue owner_group_name = 2;
  // platform
  Platform platform = 3;
  // artifact type
  ArtifactType artifact_type = 4;
}

// AssignOwnerGroupToArtifactByGroupNameResponse
message AssignOwnerGroupToArtifactByGroupNameResponse {
  // artifact id
  google.protobuf.StringValue artifact_id = 1;
  // group uuid
  google.protobuf.StringValue owner_group_uuid = 2;
}

// BulkGetOwnerGroupsRequest
message BulkGetOwnerGroupsRequest {
  // artifact ids
  repeated google.protobuf.StringValue artifact_ids = 1;
  // platform
  Platform platform = 2;
}

// ArtifactOwnerGroup
message ArtifactOwnerGroup {
  // artifact id
  google.protobuf.StringValue artifact_id = 1;
  // owner group
  OwnerGroup owner_group = 2;
}

// BulkGetOwnerGroupsResponse
message BulkGetOwnerGroupsResponse {
  // artifact_owner_group
  repeated ArtifactOwnerGroup artifact_owner_group = 1;
}

// GetOwnerGroupByNameRequest
message GetOwnerGroupByNameRequest {
  // group name
  google.protobuf.StringValue owner_group_name = 1;
}

// GetOwnerGroupByNameResponse
message GetOwnerGroupByNameResponse {
  // owner group
  OwnerGroup owner_group = 1;
}

// SlackChannel
message SlackChannel {
  // channel id
  google.protobuf.StringValue channel_id = 1;
  // channel name
  google.protobuf.StringValue channel_name = 2;
}

// GetSlackChannelsRequest
message GetSlackChannelsRequest {
  // result limits
  google.protobuf.Int32Value limit = 1;
  // cursor
  google.protobuf.StringValue cursor = 2;
}

// GetSlackChannelsResponse
message GetSlackChannelsResponse {
  // slack channels
  repeated SlackChannel slack_channels = 1;
  // cursor
  google.protobuf.StringValue cursor = 2;
}

// GetOperatorsListRequest
message GetOperatorsListRequest {
  // operator name
  google.protobuf.StringValue operator_name = 1;
}

// GetOperatorsListResponse
message GetOperatorsListResponse {
  // operators
  repeated Operator operators = 1;
}

// GetUrlMappingsRequest
message GetUrlMappingsRequest {}

// UrlMapping
message UrlMapping {
  // ArtifactType
  ArtifactType artifact_type = 1;
  // url
  google.protobuf.StringValue url = 2;
}

// GetUrlMappingsResponse
message GetUrlMappingsResponse {
  // url mappings
  repeated UrlMapping url_mappings = 1;
}

// GetHashtagsForArtifactRequest
message GetHashtagsForArtifactRequest {
  // artifact_id
  google.protobuf.StringValue artifact_id = 1;
  // platform
  Platform platform = 2;
}

// GetHashtagsForArtifactResponse
message GetHashtagsForArtifactResponse {
  // hashtags
  repeated google.protobuf.StringValue hashtags = 1;
}

// BulkRemoveHashtagsRequest
message BulkRemoveHashtagsRequest {
  // artifact_id
  google.protobuf.StringValue artifact_id = 1;
  // platform
  Platform platform = 2;
  // hashtags
  repeated google.protobuf.StringValue hashtags = 3;
}

// BulkRemoveHashtagsResponse
message BulkRemoveHashtagsResponse {}

// BulkAddHashtagsRequest
message BulkAddHashtagsRequest {
  // artifact_id
  google.protobuf.StringValue artifact_id = 1;
  // platform
  Platform platform = 2;
  // hashtags
  repeated google.protobuf.StringValue hashtags = 3;
}

// BulkAddHashtagsResponse
message BulkAddHashtagsResponse {}

// GetAllHashtagsRequest
message GetAllHashtagsRequest {}

// GetAllHashtagsResponse
message GetAllHashtagsResponse {
  // hashtags
  repeated google.protobuf.StringValue hashtags = 1;
}

// GetArtifactsForHashtagRequest
message GetArtifactsForHashtagRequest {
  // hashtag
  google.protobuf.StringValue hashtag = 1;
}

// ArtifactHashTag
message ArtifactHashTag {
  // artifact_id
  google.protobuf.StringValue artifact_id = 1;
  // platform
  Platform platform = 2;
  // hashtag
  google.protobuf.StringValue hashtag = 3;
}

// GetArtifactsForHashtagResponse
message GetArtifactsForHashtagResponse {
  // artifact_hashtags
  repeated ArtifactHashTag artifact_hashtags = 1;
}
