syntax = "proto3";

package lego_testing_service.v1;

import "common/common.proto";
import "common/service_client_config.proto";
import "doordash.api/annotations.proto";
import "doordash.api/field_injection.proto";
import "google/api/annotations.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/wrappers.proto";
import "lego.response/lego_response.proto";
import "lego/pagination.proto";

option go_package = "github.com/doordash/services-protobuf/generated/lego_testing_service";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.lego_testing";

// Lego Testing service
service LegoTestingService {
  option (doordash.api.service) = {
    name: "lego-testing-service"
    url: "lego-testing-service.service.prod.ddsd"
    port: 50051
    name_spaces: ["mosaic-test"]
    owner: {
      id: "mosaic"
      name: "mosaic"
      slack_channel: "#ask-mosaic"
      email_alias: "sdui-leads@doordash.com"
    }
    target_products: [
      CX,
      DX,
      MX
    ]
  };

  // returns a Json response for a lego proto
  rpc BuildJson(Input) returns (JsonResponse);

  // returns a LegoPageresponse from GetHomePageFacetFeed live data
  rpc GetHomepagePaginationWithCursor(PaginationCursorRequest) returns (PaginationCursorResponse) {
    option (google.api.http) = {
      post: "/mosaic-test/v1/pagination-feed-page"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T3
      lifecycle: DEV
      authorization: [NONE]
    };
  }

  // returns a paginated LegoPageresponse from mock data with unique id as cursor
  rpc GetFeedPaginationWithIdCursor(PaginationIdCursorRequest) returns (PaginationIdCursorResponse) {
    option (google.api.http) = {
      post: "/mosaic-test/v1/pagination-test"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T3
      lifecycle: DEV
      authorization: [NONE]
    };
  }

  // returns a paginated LegoPageresponse from mock data with offset as cursor
  rpc GetFeedPaginationWithOffsetCursor(PaginationOffsetCursorRequest) returns (PaginationOffsetCursorResponse);
}

// empty message for now. may need more fields in later iterations
message Input {
  // type of the lego proto
  enum LegoType {
    // a full legoPageResponse
    LEGO_TYPE_LEGO_PAGE_RESPONSE_UNSPECIFIED = 0;
    // a single lego component
    LEGO_TYPE_COMPONENT = 1;
  }
  // type of this proto
  LegoType type = 1;
}

// Json output for the proto
message JsonResponse {
  // content Json
  string content = 1;
}

// Request of service calling GetHomePageFacetFeed
message PaginationCursorRequest {
  // Homepage feed request
  GetHomepageFeedRequest homepage_request = 1;
  // Pagination request
  lego.v1.PaginationRequest pagination_request = 2;
}

// Response of service calling GetHomePageFacetFeed
message PaginationCursorResponse {
  // Paged LegoPageResponse
  lego.response.v1.LegoPageResponse lego_page_response = 1;
}

// Request for paginated mock data with unique id as cursor
message PaginationIdCursorRequest {
  // Homepage feed request
  GetHomepageFeedRequest homepage_request = 1;
  // Pagination request
  lego.v1.PaginationRequest pagination_request = 2;
}

// The paged LegoPageResponse for mock data with unique id as cursor
message PaginationIdCursorResponse {
  // Paged LegoPageResponse
  lego.response.v1.LegoPageResponse lego_page_response = 1;
}

// Request for paginated mock data with offset as cursor
message PaginationOffsetCursorRequest {
  // Homepage feed request
  GetHomepageFeedRequest homepage_request = 1;
  // Pagination request
  lego.v1.PaginationRequest pagination_request = 2;
}

// The paged LegoPageResponse for mock data with offset as cursor
message PaginationOffsetCursorResponse {
  // Paged LegoPageResponse
  lego.response.v1.LegoPageResponse lego_page_response = 1;
}

// This message is same as the one in feed_service/home_page.proto
message GetHomepageFeedRequest {
  // latitude of the location
  google.protobuf.DoubleValue lat = 1;
  // longitude of the location
  google.protobuf.DoubleValue lng = 2;
  // consumer id
  google.protobuf.Int64Value consumer_id = 3;
  // submarket id
  google.protobuf.Int64Value submarket_id = 4;
  // district id
  google.protobuf.Int64Value district_id = 5;
  // cursor for pagination, for lego testing, we use page_token instead
  google.protobuf.StringValue cursor = 6;
  // dedupe config id
  google.protobuf.Int64Value dedupe_config_id = 7;
  // time zone of the request
  google.protobuf.StringValue time_zone = 8;
  // scheduled time of delivery
  google.protobuf.StringValue scheduled_time = 9;
  // country shortname like "US"
  google.protobuf.StringValue country_shortname = 10;
}
