syntax = "proto3";

package doordash.audience.service.v1;

import "audience/attribute_metadata.proto";
import "audience/segment.proto";
import "audience/tag.proto";
import "common/common.proto";
import "common/service_client_config.proto";
import "consumer_service/subscription_plan.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "promotion/criterion.proto";
import "promotion/limitation.proto";
import "sibyl_prediction_service/prediction.proto";

option go_package = "audience";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.audience.v1";

service AudienceService {
  option (service_client.client_config).service_name = "audience-service";
  option (service_client.client_config).service_app = "grpc";

  rpc CreateTag(CreateTagRequest) returns (CreateTagResponse);
  rpc GetTagByName(GetTagByNameRequest) returns (GetTagByNameResponse);
  rpc UpdateTag(UpdateTagRequest) returns (UpdateTagResponse);

  rpc AddTagToTargets(AddTagToTargetsRequest) returns (AddTagToTargetsResponse);
  rpc AddTagsToTarget(AddTagsToTargetRequest) returns (AddTagsToTargetResponse);
  rpc AddTagToTargetsBatchJob(AddTagToTargetsBatchJobRequest) returns (AddTagToTargetsBatchJobResponse);
  rpc AddTagToTargetsBatchJobStatus(AddTagToTargetsBatchJobStatusRequest) returns (AddTagToTargetsBatchJobStatusResponse);
  rpc ExtendTagOnTargetsTTLBatchJob(ExtendTagOnTargetsTTLBatchJobRequest) returns (ExtendTagOnTargetsTTLBatchJobResponse);

  rpc RemoveTagFromTargets(RemoveTagFromTargetsRequest) returns (RemoveTagFromTargetsResponse);
  rpc GetTagsForTarget(GetTagsForTargetRequest) returns (GetTagsForTargetResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 500;
    option (service_client.client_method_config).retry_config.max_attempts = 1; // TODO: Enable Retries & Customize Config
    option (service_client.client_method_config).circuit_breaker_config.failure_rate_threshold = 0.2;
    option (service_client.client_method_config).circuit_breaker_config.minimum_request_threshold = 50;
    option (service_client.client_method_config).circuit_breaker_config.counter_sliding_window_millis = 60000;
    option (service_client.client_method_config).circuit_breaker_config.circuit_open_window_millis = 30000;
  }
  rpc DoesTargetHaveTagNames(DoesTargetHaveTagNamesRequest) returns (DoesTargetHaveTagNamesResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 500;
    option (service_client.client_method_config).retry_config.max_attempts = 1; // TODO: Enable Retries & Customize Config
    option (service_client.client_method_config).circuit_breaker_config.failure_rate_threshold = 0.2;
    option (service_client.client_method_config).circuit_breaker_config.minimum_request_threshold = 50;
    option (service_client.client_method_config).circuit_breaker_config.counter_sliding_window_millis = 60000;
    option (service_client.client_method_config).circuit_breaker_config.circuit_open_window_millis = 30000;
  }

  rpc RemoveAllTargetsForTag(RemoveAllTargetsForTagRequest) returns (RemoveAllTargetsForTagResponse);

  rpc RunAdhocCommand(AdhocRequest) returns (AdhocResponse);
  rpc AddTargetAndTagBatchJob(AddTargetAndTagBatchJobRequest) returns (AddTargetAndTagBatchJobResponse);

  rpc GetTagForTargets(GetTagForTargetsRequest) returns (GetTagForTargetsResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 500;
    option (service_client.client_method_config).retry_config.max_attempts = 1; // Disable retry by default
    option (service_client.client_method_config).circuit_breaker_config.failure_rate_threshold = 0.2;
    option (service_client.client_method_config).circuit_breaker_config.minimum_request_threshold = 50;
    option (service_client.client_method_config).circuit_breaker_config.counter_sliding_window_millis = 60000;
    option (service_client.client_method_config).circuit_breaker_config.circuit_open_window_millis = 30000;
  }

  rpc GetTargetData(GetTargetDataRequest) returns (GetTargetDataResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 500;
    option (service_client.client_method_config).retry_config.max_attempts = 1; // Disable retry by default
    option (service_client.client_method_config).circuit_breaker_config.failure_rate_threshold = 0.2;
    option (service_client.client_method_config).circuit_breaker_config.minimum_request_threshold = 50;
    option (service_client.client_method_config).circuit_breaker_config.counter_sliding_window_millis = 60000;
    option (service_client.client_method_config).circuit_breaker_config.circuit_open_window_millis = 30000;
  }

  rpc SetTargetData(SetTargetDataRequest) returns (SetTargetDataResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 500;
    option (service_client.client_method_config).retry_config.max_attempts = 1; // Disable retry by default
    option (service_client.client_method_config).circuit_breaker_config.failure_rate_threshold = 0.2;
    option (service_client.client_method_config).circuit_breaker_config.minimum_request_threshold = 50;
    option (service_client.client_method_config).circuit_breaker_config.counter_sliding_window_millis = 60000;
    option (service_client.client_method_config).circuit_breaker_config.circuit_open_window_millis = 30000;
  }

  rpc CreateSegment(CreateSegmentRequest) returns (CreateSegmentResponse);
  rpc UpdateSegment(UpdateSegmentRequest) returns (UpdateSegmentResponse);
  rpc DeleteSegment(DeleteSegmentRequest) returns (DeleteSegmentResponse);
  rpc GetSegment(GetSegmentRequest) returns (GetSegmentResponse);
  rpc GetByBaseSegment(GetByBaseSegmentRequest) returns (GetByBaseSegmentResponse);
  rpc SearchSegments(SearchSegmentsRequest) returns (SearchSegmentsResponse);
  rpc IsEntityInSegment(IsEntityInSegmentRequest) returns (IsEntityInSegmentResponse);
  rpc IsEntityInSegmentV2(IsEntityInSegmentV2Request) returns (IsEntityInSegmentV2Response);
  rpc FavoriteSegment(FavoriteSegmentRequest) returns (FavoriteSegmentResponse);
  rpc RemoveFavoriteSegment(RemoveFavoriteSegmentRequest) returns (RemoveFavoriteSegmentResponse);
  rpc GetFavoritedSegments(GetFavoritedSegmentsRequest) returns (GetFavoritedSegmentsResponse);
  rpc GetEntityInteractions(GetEntityInteractionsRequest) returns (GetEntityInteractionsResponse);

  rpc SetTargetDataBatchJob(SetTargetDataBatchJobRequest) returns (SetTargetDataBatchJobResponse);
  rpc EstimateAudienceSize(EstimateAudienceSizeRequest) returns (EstimateAudienceSizeResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 8000; // 8 seconds
  }
  rpc SetUserAttributesBatchJob(SetUserAttributesBatchJobRequest) returns (SetUserAttributesBatchJobResponse);
  rpc SetEntityInteractionsBatchJob(SetEntityInteractionsBatchJobRequest) returns (SetEntityInteractionsBatchJobResponse);

  // -- TargetingCriterion --
  // get the unique id for a given targeting criterion. Used by frontend to create/update campaign in merchant portal/campaign manager/ads manager
  rpc GetTargetingCriterionId(GetTargetingCriterionIdRequest) returns (GetTargetingCriterionIdResponse);

  // get the targeting criterions by given ids. Used by promotion-service/ad-exchange-service for evaluation
  rpc GetTargetingCriterionByIds(GetTargetingCriterionByIdsRequest) returns (GetTargetingCriterionByIdsResponse);

  // get all the targting criterions with a given type. Used by promotion-service/ad-exchange-service to warm up cache
  rpc GetAllTargetingCriterionByType(GetAllTargetingCriterionByTypeRequest) returns (GetAllTargetingCriterionByTypeResponse);

  rpc GetUserAttributesAndSegments(GetUserAttributesAndSegmentsRequest) returns (GetUserAttributesAndSegmentsResponse);
  rpc GetUsersAttributesAndSegments(GetUsersAttributesAndSegmentsRequest) returns (GetUsersAttributesAndSegmentsResponse);

  rpc GetAllTargetsUnderSegment(GetAllTargetsUnderSegmentRequest) returns (GetAllTargetsUnderSegmentResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 60000; // timeout 60s
  }

  rpc GetAllTargetsUnderSegmentQueryResult(GetAllTargetsUnderSegmentQueryResultRequest) returns (GetAllTargetsUnderSegmentQueryResultResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 60000; // timeout 60s
  }

  rpc GetAllTargetsCountForSegment(GetAllTargetsCountForSegmentRequest) returns (GetAllTargetsCountForSegmentResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 10000; // timeout 10s
  }

  // get Targeting Criterion definition and Segment result for entities
  rpc GetTargetingCriterionAndSegmentResultByIds(GetTargetingCriterionAndSegmentResultByIdsRequest) returns (GetTargetingCriterionAndSegmentResultByIdsResponse);
}

message CreateTagRequest {
  string name = 1;
  TagEntity entity = 2;
  string creator = 3;
  TagStatus status = 4;
  repeated TagOrigin origin = 5;
  repeated TagAttribute attributes = 6;
  Tag.Properties properties = 7;
}

message CreateTagResponse {
  Tag tag = 1;
}

message GetTagByNameRequest {
  string name = 1;
  TagEntity entity = 2;
}

message GetTagByNameResponse {
  Tag tag = 1;
}

message UpdateTagRequest {
  string name = 1;
  TagStatus status = 2;
  repeated TagOrigin origin = 3;
  repeated TagAttribute attributes = 4;
  TagEntity entity = 5;
  Tag.Properties properties = 6;
}

message UpdateTagResponse {
  Tag tag = 1;
}

message TagRelationAttributesList {
  repeated TagAttribute tag_attributes = 1;
}

message AddTagToTargetsRequest {
  repeated string target_ids = 2;
  oneof id_or_name {
    string tag_id = 1;
    string tag_name = 3;
  }
  TagEntity entity = 4;
  int32 target_ttl_seconds = 5;
  Table table = 6;
  Tag.Properties properties = 7;
  // Please follow the order of target_ids if you want to add relation attributes for some of targets,
  // and also add empty list/object for those you do not want.
  repeated TagRelationAttributesList tag_relation_attributes_list = 8;
}

message AddTagToTargetsResponse {
  string error = 1;
  string additional_details = 2;
  repeated string target_ids = 3;
}

message AddTagsToTargetRequest {
  string target_id = 1;
  // Currently we only allow max 10 tags at once.
  // If you want to add more in one call please reach out to the audience team
  repeated string tag_names = 2;
  TagEntity entity = 3;
  int32 target_ttl_seconds = 4;
  // Please follow the order of tag_names if you want to add relation attributes for some of tags,
  // and also add empty list/object for those you do not want.
  repeated TagRelationAttributesList tag_relation_attributes_list = 5;
}

message AddTagsToTargetResponse {}

message AddTagToTargetsBatchJobRequest {
  string input_url = 2;
  TagEntity entity = 3;
  oneof id_or_name {
    string tag_id = 1;
    string tag_name = 4;
  }
  google.protobuf.Timestamp endTimestamp = 5;
  Table table = 6;
  string directly_responsible_individual = 7;
  string s3_bucket = 8;
  string s3_key = 9;
  Tag.Properties properties = 10;
}

message AddTagToTargetsBatchJobResponse {
  string error = 1;
  string additional_details = 2;
  string run_id = 3;
  string workflow_id = 4;
}
message AddTagToTargetsBatchJobStatusRequest {
  string run_id = 1;
  string workflow_id = 2;
}
message AddTagToTargetsBatchJobStatusResponse {
  string error = 1;
  string additional_details = 2;
  string status = 3;
}

message ExtendTagOnTargetsTTLBatchJobRequest {
  string input_url = 2;
  TagEntity entity = 3;
  oneof id_or_name {
    string tag_id = 1;
    string tag_name = 4;
  }
  google.protobuf.Timestamp endTimestamp = 5;
  Table table = 6;
  string directly_responsible_individual = 7;
  string s3_bucket = 8;
  string s3_key = 9;
  Tag.Properties properties = 10;
}

message ExtendTagOnTargetsTTLBatchJobResponse {
  string error = 1;
  string additional_details = 2;
  string run_id = 3;
  string workflow_id = 4;
}

message RemoveTagFromTargetsRequest {
  string tag_name = 1;
  repeated string target_ids = 2;
  TagEntity entity = 3;
  Table table = 4;
}

message RemoveTagFromTargetsResponse {
  string error = 1;
  string additional_details = 2;
  repeated string target_ids = 3;
}

message GetTagsForTargetRequest {
  string target_id = 1;
  TagEntity entity = 2;
  bool include_all_tag_info = 3;
  // only certain use case will be allowed to use strong consistency
  CassandraReadConsistencyLevel cassandra_read_consistency_level = 4;
}

message GetTagsForTargetResponse {
  string target_id = 1;
  TagEntity entity = 2;
  repeated Tag tags = 3;
  CassandraReadConsistencyLevel cassandra_read_consistency_level = 4;
}

message DoesTargetHaveTagNamesRequest {
  string target_id = 1;
  repeated string tag_names = 2;
  TagEntity entity = 3;
  // only certain use case will be allowed to use strong consistency
  CassandraReadConsistencyLevel cassandra_read_consistency_level = 4;
}

message DoesTargetHaveTagNamesResponse {
  bool exists = 1;
  repeated string existing_tags = 2;
  repeated string absent_tags = 3;
  CassandraReadConsistencyLevel cassandra_read_consistency_level = 4;
}

message RemoveAllTargetsForTagRequest {
  string tag_name = 1;
  TagEntity entity = 2;
}

message RemoveAllTargetsForTagResponse {
  string error = 1;
  string additional_details = 2;
}

message AdhocRequest {
  string command = 1;
  map<string, string> params = 2;
}

message AdhocResponse {
  string error = 1;
  string additional_details = 2;
}

message KafkaRecord {
  ActionType action = 1;
  enum ActionType {
    ACTION_TYPE_UNSET = 0;
    ACTION_TYPE_ADD_TAG_TO_TARGETS = 1;
    ACTION_TYPE_REMOVE_TAG_FROM_TARGETS = 2;
  }
  string tag_name = 2;
  repeated string target_ids = 3;
  Table table = 4;
  google.protobuf.Timestamp endTimestamp = 5;
  TagEntity entity = 6;
  // metadata is metadata about the specific tag in the Tags table
  map<string, string> metadata = 7;
  // relation_metadata is metadata for the relation between the tag & target in TagsByTarget
  map<string, string> relation_metadata = 8 [deprecated = true];
  // directly_responsible_individual for the kafka record being added
  string directly_responsible_individual = 9;
  Tag.Properties properties = 10;
  repeated RelationMetadata relation_metadata_list = 11;

  message RelationMetadata {
    map<string, string> relation_metadata = 1;
  }
}

message AddTargetAndTagBatchJobRequest {
  string input_url = 1;
  TagEntity entity = 2;
  AppendInfo target_append_info = 3;
  AppendInfo tag_append_info = 4;
  google.protobuf.Timestamp end_timestamp = 5;
  Table table = 6;
  string directly_responsible_individual = 7;
  string s3_bucket = 8;
  string s3_key = 9;
  DynamicAudienceAction dynamic_audience_action = 10;
}

message AddTargetAndTagBatchJobResponse {
  string error = 1;
  string additional_details = 2;
  string run_id = 3;
  string workflow_id = 4;
}

message AppendInfo {
  string prefix = 1;
  string suffix = 2;
}

message GetTagForTargetsRequest {
  repeated string target_ids = 1;
  TagEntity entity = 2;
  string tag_name = 3;
  bool include_all_tag_info = 4;
}

message TagForTarget {
  string target_id = 1;
  Tag tag = 2;
}

enum FailedTargetReason {
  FAILED_TARGET_REASON_INVALID = 0;
  FAILED_TARGET_REASON_UNSET = 1;
  FAILED_TARGET_REASON_NOT_FOUND = 2;
  FAILED_TARGET_REASON_ERROR = 3;
  FAILED_TARGET_REASON_RACE_CONDITION = 4;
}

message FailedTarget {
  string target_id = 1;
  FailedTargetReason reason = 2;
  google.protobuf.StringValue description = 3;
}

message GetTagForTargetsResponse {
  repeated TagForTarget tag_for_targets = 1;
  repeated string failed_target_ids = 2;
  repeated FailedTarget failed_targets = 3;
}

message GetTargetDataRequest {
  string target_id = 1;
  TagEntity entity = 2;
}

message GetTargetDataResponse {
  repeated Tag tags = 1;
  oneof entity_struct {
    Consumer consumer = 2;
  }
}

message SetTargetDataRequest {
  string target_id = 1;
  TagEntity entity = 2;
  repeated EntityFieldChange changes = 3;
}

message TargetMetadataChangesKafka {
  string target_id = 1;
  TagEntity entity = 2;
  EntityFieldChange successful_change = 3;
}

message SetTargetDataResponse {
  string target_id = 1;
  TagEntity entity = 2;
  repeated FailedEntityFieldChange failed_changes = 3;
}

message CreateSegmentRequest {
  Segment segment = 1;
}

message CreateSegmentResponse {
  google.protobuf.StringValue segment_id = 1;
}

message UpdateSegmentRequest {
  Segment segment = 1;
}

message UpdateSegmentResponse {
  google.protobuf.StringValue segment_id = 1;
}

message DeleteSegmentRequest {
  google.protobuf.StringValue segment_id = 1;
}

message DeleteSegmentResponse {
  google.protobuf.StringValue segment_id = 1;
}

message GetSegmentRequest {
  google.protobuf.StringValue segment_id = 1;
}

message GetSegmentResponse {
  Segment segment = 1;
}

message GetByBaseSegmentRequest {
  google.protobuf.StringValue base_segment_id = 1;
}

message GetByBaseSegmentResponse {
  Segment base_segment = 1;
  repeated Segment child_segments = 2;
}

message SearchSegmentsRequest {
  google.protobuf.Int32Value page_size = 1;
  google.protobuf.Int32Value offset = 2;
  // fuzzy_search_criteria
  oneof search_criteria {
    google.protobuf.StringValue segment_id = 3;
    google.protobuf.StringValue directly_responsible_individual = 4;
    google.protobuf.StringValue segment_name = 5;
    google.protobuf.StringValue segment_description = 6;
    google.protobuf.StringValue free_text = 7;
    SegmentType segment_type = 8;
    // expression for searching by attributes names and values
    SegmentExpression segment_expression = 9;
    CampaignMetadata campaign_metadata = 10;
  }
  // when set to true, it will match the base segment of the provided segment_expression
  // otherwise, it will just get the segments based on the segment_expression provided
  google.protobuf.BoolValue match_base_segment = 11;
}

message SearchSegmentsResponse {
  repeated Segment segments = 1;
}

message IsEntityInSegmentRequest {
  google.protobuf.StringValue entity_id = 1;
  TagEntity entity = 2;
  repeated google.protobuf.StringValue segment_ids = 3;
}

message IsEntityInSegmentResponse {
  repeated SegmentExpressionResult segment_results = 1;
}

message SegmentExpressionResult {
  google.protobuf.StringValue segment_id = 1;
  google.protobuf.BoolValue result = 2;
  repeated google.protobuf.StringValue ineligibility_reasons = 3;
  // Only use for iguazu event logging
  google.protobuf.StringValue target_id = 4;
  // Only use for iguazu event logging
  TagEntity entity = 5;
  // Only use for iguazu event logging
  google.protobuf.StringValue request_id = 6;
  EntityCombination secondary_entities = 7 [deprecated = true];
  repeated Entity context = 8;
  google.protobuf.StringValue source = 9;
}

message IsEntityInSegmentV2Request {
  Entity primary_entity = 1;
  repeated Segment segments = 2;
  message Segment {
    google.protobuf.StringValue id = 1;
    repeated Entity context = 2;
  }
}

message IsEntityInSegmentV2Response {
  repeated SegmentExpressionV2Results segment_results = 1;
}

message SegmentExpressionV2Results {
  google.protobuf.StringValue segment_id = 1;
  repeated SegmentExpressionV2Result results = 2;
}

message SegmentExpressionV2Result {
  google.protobuf.BoolValue result = 1;
  repeated google.protobuf.StringValue ineligibility_reasons = 2;
  repeated Entity context = 3;
}

message EntityCombination {
  repeated Entity entity_combinations = 1;
}

message FavoriteSegmentRequest {
  // segment id being favorited
  google.protobuf.StringValue segment_id = 1;
  // user favoriting the segment
  common.Creator favorited_by = 2;
}

message FavoriteSegmentResponse {
  // segment id that has been favorited by the user
  google.protobuf.StringValue segment_id = 1;
}

message RemoveFavoriteSegmentRequest {
  // segment id being removed as favorite
  google.protobuf.StringValue segment_id = 1;
  // user removing the favorited segment
  common.Creator removed_by = 2;
}

message RemoveFavoriteSegmentResponse {
  // favorited segment id that has been removed by the user
  google.protobuf.StringValue segment_id = 1;
}

message GetFavoritedSegmentsRequest {
  // user who has favorited segments
  common.Creator favorited_by = 1;
}

message GetFavoritedSegmentsResponse {
  // user favorited segments
  repeated Segment segments = 1;
}

message SetTargetDataBatchJobRequest {
  // s3 bucket name
  string s3_bucket = 1;
  // s3 file name
  string s3_key = 2;
  // entity type
  TagEntity entity = 3;
  // people who trigger the cadence job.
  string directly_responsible_individual = 4;
}

message SetTargetDataBatchJobResponse {
  // error
  string error = 1;
  // info message
  string additional_details = 2;
  // cadence run id
  string run_id = 3;
  // cadence workflow id.
  string workflow_id = 4;
}

message SetUserAttributesBatchJobRequest {
  // s3 bucket name
  string s3_bucket = 1;
  // s3 file name
  string s3_key = 2;
  // entity type
  TagEntity entity = 3;
  // people who trigger the cadence job.
  string directly_responsible_individual = 4;
  // priority
  InjectPriority priority = 5;
  // upsert or remove
  AttributesBatchJobAction action = 6;
}

enum AttributesBatchJobAction {
  ATTRIBUTES_BATCH_JOB_ACTION_UPSERT = 0;
  ATTRIBUTES_BATCH_JOB_ACTION_REMOVE = 1;
}

enum InjectPriority {
  INJECT_PRIORITY_LOW = 0;
  INJECT_PRIORITY_HIGH = 1;
  INJECT_PRIORITY_BACKFILL = 2;
}

message SetUserAttributesBatchJobResponse {
  // error
  string error = 1;
  // info message
  string additional_details = 2;
  // cadence run id
  string run_id = 3;
  // cadence workflow id.
  string workflow_id = 4;
}

message SetEntityInteractionsBatchJobRequest {
  // s3 bucket name
  string s3_bucket = 1;
  // s3 file name
  string s3_key = 2;
  // primary entity
  TagEntity entity = 3;
  // secondary entity
  TagEntity secondary_entity = 4;
  // people who trigger the cadence job.
  string directly_responsible_individual = 5;
  // priority
  InjectPriority priority = 6;
  // upsert or remove
  AttributesBatchJobAction action = 7;
}

message SetEntityInteractionsBatchJobResponse {
  // error
  string error = 1;
  // info message
  string additional_details = 2;
  // cadence run id
  string run_id = 3;
  // cadence workflow id.
  string workflow_id = 4;
}

message EstimateAudienceSizeRequest {
  repeated google.protobuf.StringValue default_submarket_ids = 1; // default submarketIds
  google.protobuf.StringValue tags_search_expression = 2; // boolean expression for searching tags such as "TAG_A" AND "TAG_B" OR "TAG_C"
  promotion_service.DayParts day_parts = 3;
  repeated google.protobuf.StringValue store_ids = 4; // storeIds currently only used for dayparting ratio query
  SegmentExpression segment_expression = 5; // segment_expression such as tag combinations.
}

message EstimateAudienceSizeResponse {
  google.protobuf.Int32Value size = 1;
}

message KafkaEntityMetadataRecord {
  repeated EntityMetadataRecord entity_metadata_records = 1;
  message EntityMetadataRecord {
    string target_id = 1;
    TagEntity entity = 2;
    repeated EntityFieldChange changes = 3;
  }
  // DRI for those backfill job
  string directly_responsible_individual = 2;
  // S3 bucket
  string s3_bucket = 3;
  // S3 filename
  string s3_key = 4;
  // is the record the last message, used to send slack notification
  bool is_last_message = 5;
  int32 total_records = 6;
}

message KafkaUserAttributeRecord {
  repeated UserAttributeRecord user_attribute_records = 1;
  message UserAttributeRecord {
    string target_id = 1;
    TagEntity entity = 2;
    string attribute = 3;
    string value = 4;
    // Timestamp at when the attribute was updated
    google.protobuf.Timestamp updated_at = 8;
  }
  // DRI for those backfill job
  string directly_responsible_individual = 2;
  // S3 bucket
  string s3_bucket = 3;
  // S3 filename
  string s3_key = 4;
  // is the record the last message, used to send slack notification
  bool is_last_message = 5;
  int32 total_records = 6;
  ActionType action_type = 7;
  enum ActionType {
    ACTION_TYPE_UPSERT = 0 [deprecated = true];
    ACTION_TYPE_REMOVE = 1;
    ACTION_TYPE_ADD = 2;
  }
}

message KafkaMultiEntityAttributeRecord {
  repeated MultiEntityAttributeRecord multi_entity_attribute_records = 1;
  message MultiEntityAttributeRecord {
    Entity primary_entity = 1;
    Entity secondary_entity = 2;
    string attribute = 3;
    string value = 4;
    // Timestamp at when the attribute was updated
    google.protobuf.Timestamp updated_at = 8;
  }
  // DRI for those backfill job
  string directly_responsible_individual = 2;
  // S3 bucket
  string s3_bucket = 3;
  // S3 filename
  string s3_key = 4;
  // is the record the last message, used to send slack notification
  bool is_last_message = 5;
  int32 total_records = 6;
  ActionType action_type = 7;
  enum ActionType {
    ACTION_TYPE_UPSERT = 0 [deprecated = true];
    ACTION_TYPE_REMOVE = 1;
    ACTION_TYPE_ADD = 2;
  }
}

message FailedEntityFieldChange {
  EntityFieldChange failed_change = 1;
  FailedTargetReason reason = 2;
}

enum FailedEntityFieldReason {
  FAILED_ERROR = 0;
  FAILED_FIELD_DOESNT_EXIST = 1;
  FAILED_TARGET_NOT_FOUND = 2;
}

message EntityFieldChange {
  string changed_field = 1;
  ChangeType type = 2;
  string new_value = 3;

  // only used for Kafka message, not needed for grpc call
  string old_value = 4;
  google.protobuf.Timestamp updated_at = 5;
  ChangeSource source = 6;
}

enum ChangeType {
  CHANGE_TYPE_UNSET = 0;
  CHANGE_TYPE_INVALID = 1;
  CHANGE_TYPE_ADD = 2;
  CHANGE_TYPE_DELETE = 3;
  CHANGE_TYPE_UPDATE = 4;
}
enum ChangeSource {
  CHANGE_SOURCE_UNSET = 0;
  CHANGE_SOURCE_INVALID = 1;
  CHANGE_SOURCE_GRPC = 2;
  CHANGE_SOURCE_DOWNSTREAM = 3;
  CHANGE_SOURCE_EVENTS = 4;
  CHANGE_SOURCE_BACKFILL = 5;
}

message Consumer {
  google.protobuf.Timestamp first_order_date = 1;
  google.protobuf.Timestamp signup_date = 2;
  common.Experience experience = 3;
  google.protobuf.StringValue country_code = 4;
  // PII concern. email is deprecated
  google.protobuf.StringValue email = 5 [deprecated = true];
  google.protobuf.BoolValue is_guest = 6;
  google.protobuf.BoolValue is_employee = 7;
  doordash_consumer_service.subscription.SubscriptionPlan subscription_plan = 8;
  google.protobuf.Timestamp last_delivery_date = 9;
  google.protobuf.StringValue last_delivery_submarket_id = 10;
  google.protobuf.StringValue consumer_id = 11;
}

// This proto will be used to sync with snowflake table through iguazu, this is a copy of Consumer Object.
// please read through the below link for adding new data type
// https://github.com/doordash/iguazu-client/blob/master/iguazu-client-proxy/README.md#sending-all-other-analytical-events-from-microservices-to-iguazu-pipeline
// IMPORTANT: make sure you create a new ticket to ask iguazu team to update snowflake table when you adding new field, example: https://doordash.atlassian.net/browse/IG-990
// IMPORTANT: Do not register recursive nested Message in this proto, otherwise the iguazu pipeline will have stackoverflow error: https://github.com/confluentinc/ksql/issues/8156
message SnowflakeConsumerEntityMetadata {
  google.protobuf.Timestamp first_order_date = 1;
  google.protobuf.Timestamp signup_date = 2;
  google.protobuf.StringValue experience = 3;
  google.protobuf.StringValue country_code = 4;
  google.protobuf.BoolValue is_guest = 5;
  google.protobuf.BoolValue is_employee = 6;
  google.protobuf.StringValue dashpass_subscription_plan_id = 7;
  google.protobuf.BoolValue is_dashpass_partner_plan = 8;
  google.protobuf.BoolValue is_dashpass_corporate_plan = 9;
  google.protobuf.StringValue dashpass_subscription_plan_type = 10;
  google.protobuf.Timestamp last_delivery_date = 11;
  google.protobuf.StringValue last_delivery_submarket_id = 12;
  // adding consumer id here for identification for snowflake table.
  google.protobuf.StringValue consumer_id = 13;
}

message UsageEvent {
  reserved 1;
  reserved "attribute";
  reserved 2;
  reserved "segment_id";

  google.protobuf.StringValue source = 3;
  google.protobuf.StringValue tenant = 4;
  UsageEventType type = 5;
  // Update downstream consumers whenever adding new values to TagEntity enum
  // Read more: https://github.com/doordash/iguazu-client/blob/master/iguazu-client-proxy/README.md#data-types-supported-in-iguazu-pipeline
  TagEntity entity_type = 6;
  TagEntity secondary_entity_type = 7;
  google.protobuf.StringValue request_id = 8;

  repeated google.protobuf.StringValue attributes = 9;
  repeated google.protobuf.StringValue segment_ids = 10;
}

enum UsageEventType {
  USAGE_EVENT_TYPE_UNSET = 0;
  USAGE_EVENT_TYPE_SEGMENT = 1;
  USAGE_EVENT_TYPE_ATTRIBUTE = 2;
}

// For detailed explanation of each field -> https://docs.google.com/document/d/1jnYf4iyAOfu7SvKxS5ZTrPmkCvWWNZ5mv4CcKlB7Yw8/edit
enum TargetingCriterionType {
  TARGETING_CRITERION_TYPE_INVALID = 0;
  TARGETING_CRITERION_TYPE_UNSET = 1;
  TARGETING_CRITERION_TYPE_BEHAVIOR = 2;
  TARGETING_CRITERION_TYPE_SEGMENT = 3;
  // can only available on Targeting Criterion level
  TARGETING_CRITERION_TYPE_COMPOSITE = 4;
  // can only available on Targeting Criterion Entry level
  TARGETING_CRITERION_TYPE_OPERATION = 5;
  TARGET_CRITERION_TYPE_TAG = 6;
}

message TargetingCriterion {
  TargetingCriterionType type = 1;
  google.protobuf.StringValue version = 2;
  oneof property {
    BehaviorCriterion behavior_criterion = 3;
    google.protobuf.StringValue segment_id = 4;
    TagCriterion tag_criterion = 6;
  }
  // we will use Polish Notation to represent the relation within entries, as default, it should be AND operation
  repeated TargetingCriterionEntry entries = 5;
}

message TargetingCriterionEntry {
  TargetingCriterionType type = 1;
  oneof property {
    BehaviorCriterion behavior_criterion = 2;
    google.protobuf.StringValue segment_id = 3;
    Operation operation = 4;
    TagCriterion tag_criterion = 5;
  }

  enum Operation {
    OPERATION_INVALID = 0;
    OPERATION_UNSET = 1;
    OPERATION_DISJUNCTION = 2;
    OPERATION_CONJUNCTION = 3;
  }
}

message TagCriterion {
  google.protobuf.StringValue tag_name = 1;
  google.protobuf.BoolValue negate_tag_result = 2;
}

message BehaviorCriterion {
  BehaviorReceiver receiver = 1;
  enum BehaviorReceiver {
    BEHAVIOR_RECEIVER_INVALID = 0;
    BEHAVIOR_RECEIVER_UNSET = 1;
    BEHAVIOR_RECEIVER_DEFAULT = 2; // default will be convert to business level during evaluation
    BEHAVIOR_RECEIVER_STORE = 3;
    BEHAVIOR_RECEIVER_BUSINESS = 4;
    BEHAVIOR_RECEIVER_FRANCHISE = 5;
    BEHAVIOR_RECEIVER_FRANCHISE_GROUP = 6;
    // The following will not be support in 2023
    // BEHAVIOR_RECEIVER_FRANCHISE_COOP = 7;
    // BEHAVIOR_RECEIVER_HOLDING_GROUP = 8;
  }
  BehaviorAction action = 2;
  enum BehaviorAction {
    BEHAVIOR_ACTION_INVALID = 0;
    BEHAVIOR_ACTION_UNSET = 1;
    BEHAVIOR_ACTION_DEFAULT = 2; // default will convert to “order” during evaluation
    BEHAVIOR_ACTION_ORDER = 3;
    BEHAVIOR_ACTION_SAVE = 4;
    // The following will not be support in 2023
    // BEHAVIOR_ACTION_VIEW = 4;
    // BEHAVIOR_ACTION_CART = 5;
    // BEHAVIOR_ACTION_REVIEW = 6;
  }
  CohortType cohort = 3;
  enum CohortType {
    COHORT_TYPE_INVALID = 0;
    COHORT_TYPE_UNSET = 1;
    COHORT_TYPE_NEW = 2; // never had the behavior
    COHORT_TYPE_EXISTING = 3; // had the behavior within X days, existing is not negation of NEW
    COHORT_TYPE_LAPSED = 4; // had the behavior within X days but not within Y days, lapsed is not negation of EXISTING
    COHORT_TYPE_FREQUENT = 5;
    COHORT_TYPE_SMART_TARGETING = 6; // audience is automatically targeted based on PromoAI
  }
  google.protobuf.Int32Value behavior_start_days = 4; // X days
  google.protobuf.Int32Value behavior_end_days = 5; // Y days
  google.protobuf.Int32Value min_frequency = 6; // inclusive
  google.protobuf.Int32Value max_frequency = 7; // inclusive
}

message GetTargetingCriterionIdRequest {
  TargetingCriterion targeting_criterion = 1;
}

message GetTargetingCriterionIdResponse {
  string id = 1;
}

message GetTargetingCriterionByIdsRequest {
  repeated string ids = 1;
}

message GetTargetingCriterionByIdsResponse {
  map<string, TargetingCriterion> targeting_criterions = 1;
}

message GetAllTargetingCriterionByTypeRequest {
  TargetingCriterionType type = 1;
}

message GetAllTargetingCriterionByTypeResponse {
  map<string, TargetingCriterion> targeting_criterions = 1;
}

message GetAllTargetsCountForSegmentRequest {
  TagEntity entity = 1;
  /* created segment or being created segment */
  oneof segment {
    /* created segment */
    google.protobuf.StringValue segment_id = 2;
    /* being created segment */
    SegmentExpression segment_expression = 3;
  }
}

message GetAllTargetsCountForSegmentResponse {
  google.protobuf.Int64Value count = 1;
}

message GetAllTargetsUnderSegmentRequest {
  /* page size for trino sql queries */
  google.protobuf.Int32Value page_size = 1;

  /* offset for trino sql queries */
  google.protobuf.Int32Value offset = 2;

  TagEntity entity = 3;

  /* created segment or being created segment */
  oneof segment {
    /* created segment */
    google.protobuf.StringValue segment_id = 4;
    /* being created segment */
    SegmentExpression segment_expression = 5;
  }

  /* whether the query should run async or not */
  google.protobuf.BoolValue should_query_async = 7;
}

message GetAllTargetsUnderSegmentResponse {
  /* paginated list of all targets in the segment */
  repeated google.protobuf.StringValue target_ids = 1;
  /* the Trino query id for an async query */
  google.protobuf.StringValue query_id = 2;
}

// Proto request for GetAllTargetsUnderSegmentQueryResult API
message GetAllTargetsUnderSegmentQueryResultRequest {
  // query id for a previously triggered query
  google.protobuf.StringValue query_id = 1;
  // Enum for specifying how the data should be returned
  enum ResultFormat {
    // result format not specified
    RESULT_FORMAT_UNSPECIFIED = 0;
    // return the path to the table the data is in
    RESULT_FORMAT_PATH = 1;
  }
  // Format for getting the response back
  ResultFormat format = 2;
}

// Proto response for GetAllTargetsUnderSegmentQueryResult API
message GetAllTargetsUnderSegmentQueryResultResponse {
  oneof result {
    /* the Trino query id for an async query */
    google.protobuf.StringValue data_path = 1;
  }
}

message GetUserAttributesAndSegmentsRequest {
  string target_id = 1;
  TagEntity entity = 2;
  // a list of attributes to fetch, if empty, no attributes will be returned
  repeated AttributesOption attributes_options = 3;
  RequestContext request_context = 4;
  bool should_fetch_all_segments = 5;
}

message GetUsersAttributesAndSegmentsRequest {
  repeated string target_ids = 1;
  TagEntity entity = 2;
  // a list of attributes to fetch, if empty, no attributes will be returned
  repeated AttributesOption attributes_options = 3;
  RequestContext request_context = 4;
  bool should_fetch_all_segments = 5;
}

message AttributesOption {
  string name = 1;
  bool should_include_consumer_attribute = 2;
  /* DEPRECATED */
  bool should_include_feature_set = 3 [deprecated = true]; // Deprecated old fields;
  google.protobuf.Int64Value version = 4;
}

message RequestContext {
  // tag string to track use-cases behind a prediction
  string use_case = 1;
  // flag for enabling iguazu logging of features
  bool enable_iguazu_logging_for_feature_set = 2;
}

message GetUserAttributesAndSegmentsResponse {
  // consumer attributes flattened list
  repeated ConsumerAttribute consumer_attributes = 1;
  /* DEPRECATED */
  PredictionFeatureSet feature_set = 2 [deprecated = true]; // Deprecated old fields
  // list of continuously computed segments that a user is in
  repeated string segments = 3;
}

message GetUsersAttributesAndSegmentsResponse {
  message UserAttributesAndSegments {
    string target_id = 1;
    GetUserAttributesAndSegmentsResponse attributes_and_segments = 2;
  }

  repeated UserAttributesAndSegments users_attributes_and_segments = 1;
}

message GetTargetingCriterionAndSegmentResultByIdsRequest {
  google.protobuf.StringValue entity_id = 1;
  TagEntity entity = 2;
  repeated google.protobuf.StringValue targeting_criterion_ids = 3;
}

message GetTargetingCriterionAndSegmentResultByIdsResponse {
  repeated TargetingCriterionAndSegmentResult targeting_criterion_and_segment_results = 1;
}

message TargetingCriterionAndSegmentResult {
  google.protobuf.StringValue targeting_criterion_id = 1;
  SegmentExpressionResult segment_result = 2;
  TargetingCriterion targeting_criterion = 3;
}

message GetEntityInteractionsRequest {
  google.protobuf.StringValue entity_id = 1;
  TagEntity entity = 2;
  repeated InteractionOptions interaction_options = 3;
  RequestContext request_context = 4;
}

message InteractionOptions {
  google.protobuf.StringValue attribute_name = 1;
  repeated google.protobuf.StringValue secondary_entity_ids = 2;
  TagEntity secondary_entity = 3;
}

message GetEntityInteractionsResponse {
  repeated EntityInteractionResult entity_interaction_result = 1;
}

message EntityInteractionResult {
  google.protobuf.StringValue attribute_name = 1;
  oneof value {
    google.protobuf.StringValue string_value = 2;
    google.protobuf.BoolValue bool_value = 3;
    google.protobuf.FloatValue float_value = 4;
    google.protobuf.Int64Value int_value = 5;
    // Double attribute value
    google.protobuf.DoubleValue double_value = 6;

    // Order/visit/save history
    EngagementHistory engagement_history_value = 7;
    // Cx's affinity to cuisines, dietary or NV categories
    AffinityVector affinity_vector_value = 8;
    // Pretrained user embeddings
    Embedding embedding_value = 9;
    // Date attribute value
    google.protobuf.Timestamp date_value = 10;
    // Array of Strings attribute value
    StringArrayAttribute string_array_value = 11;
    // Array of Booleans attribute value
    BoolArrayAttribute bool_array_value = 12;
    // Array of Floats attribute value
    FloatArrayAttribute float_array_value = 13;
    // Array of Integers attribute value
    IntArrayAttribute int_array_value = 14;
    // Array of Doubles attribute value
    DoubleArrayAttribute double_array_value = 15;
  }
  google.protobuf.StringValue secondary_entity_id = 21;
  TagEntity secondary_entity_type = 22;
}

// Union of all consumer profile signals
message ConsumerAttribute {
  // attribute name
  string name = 1;
  // value of the attribute
  oneof value {
    // https://docs.google.com/document/d/1UrUbBPe36lb7hSoHxy8EAOL4IY_J-Jih0uBHw2jsRgM/edit
    string string_value = 3;
    bool bool_value = 4;
    float float_value = 5;
    int64 int_value = 6;
    // Order/visit/save history
    EngagementHistory engagement_history_value = 7;
    // Cx's affinity to cuisines, dietary or NV categories
    AffinityVector affinity_vector_value = 8;
    // Pretrained user embeddings
    Embedding embedding_value = 9;
    google.protobuf.Timestamp date_value = 10;
    StringArrayAttribute string_array_value = 11;
    BoolArrayAttribute bool_array_value = 12;
    FloatArrayAttribute float_array_value = 13;
    IntArrayAttribute int_array_value = 14;
    DoubleArrayAttribute double_array_value = 16;
  }
  // version of the attribute
  google.protobuf.Int64Value version = 15;
}

message StringArrayAttribute {
  repeated string string_values = 1;
}

message BoolArrayAttribute {
  repeated bool bool_values = 1;
}

message FloatArrayAttribute {
  repeated float float_values = 1;
}

message DoubleArrayAttribute {
  repeated double double_values = 1;
}

message IntArrayAttribute {
  repeated int64 int_values = 1;
}

message PredictionFeatureSet {}

//Definition for individual component
message AffinityVector {
  repeated Affinity affinities = 1;
}

/*
   Affinity data to an entity. e.g. NV product category, food dish & cuisine
   Ideally the entity should be from a Taxonomy.
*/
message Affinity {
  // entity id
  int64 id = 1;
  // entity name
  string name = 2;
  // entity display name
  string display_name = 3;
  // affinity to the entity. value will be [-1 , 1]
  double affinity_value = 4;
}

message Embedding {
  repeated float embedding = 1;
  // the model identifier to generate the embedding, e.g. "copurchase_v1" this will be used for
  // matching Embeddings from Item/Store/Category side for any similarity computation
  string encoder_model_id = 2;
}

message EngagementHistory {
  repeated Engagement engagements = 1;
}

message Engagement {
  EngagementEntity entity = 1;
  enum EngagementType {
    ENGAGEMENT_TYPE_UNSPECIFIED = 0;
    ENGAGEMENT_TYPE_ORDER = 1;
    ENGAGEMENT_TYPE_VISIT = 2;
    ENGAGEMENT_TYPE_SAVE = 3;
    ENGAGEMENT_TYPE_SELECTED_PREFERENCE = 4;
    ENGAGEMENT_TYPE_ADD_TO_CART = 5;
    ENGAGEMENT_TYPE_IMPRESSION = 6;
  }
  EngagementType engagement_type = 2;
  /* timestamp where the engagement happened */
  google.protobuf.Timestamp timestamp = 3;
  /* id of the event of engagement */
  google.protobuf.StringValue event_id = 4;
}
message EngagementEntity {
  string id = 1;
  /* Entity type */
  enum EntityType {
    /* Unspecified */
    ENTITY_TYPE_UNSPECIFIED = 0;
    /* category, example: "Salad", "Dessert" */
    ENTITY_TYPE_CATEGORY = 1;
    /* store */
    ENTITY_TYPE_STORE = 2;
    /* item */
    ENTITY_TYPE_ITEM = 3;
    /* dietary preference, example: "Vegetarian", "Pork" */
    ENTITY_TYPE_DIETARY = 4;
    /* business */
    ENTITY_TYPE_BUSINESS = 5;
    /* business vertical */
    ENTITY_TYPE_BUSINESS_VERTICAL = 6;
    /* announcement (media content post, example: video reel, image post) */
    ENTITY_TYPE_ANNOUNCEMENT = 7;
  }
  EntityType type = 2;
  /* DEPRECATED */
  google.protobuf.Timestamp timestamp = 3 [deprecated = true]; // Deprecated old fields
}

// proto for deserializing versioned attributes from CRDB text
message UserAttributeValuePayload {
  message VersionedAttribute {
    string attribute_value = 1;
    google.protobuf.Int64Value attribute_version = 2;
  }
  repeated VersionedAttribute versioned_attributes = 1;
}

message AudienceShadowTraffic {
  oneof request {
    IsEntityInSegmentRequest is_entity_in_segment_request = 1;
    GetEntityInteractionsRequest get_entity_interactions_request = 2;
    GetUserAttributesAndSegmentsRequest get_user_attributes_and_segments_request = 3;
    GetUsersAttributesAndSegmentsRequest get_users_attributes_and_segments_request = 4;
    SearchSegmentsRequest search_segment_request = 5;
    GetByBaseSegmentRequest get_by_base_segment_request = 6;
    GetSegmentRequest get_segment_request = 7;
    GetFavoritedSegmentsRequest get_favorited_segments_request = 8;
    IsEntityInSegmentV2Request is_entity_in_segment_v2_request = 9;
    GetAllAttributesMetadataRequest get_all_attributes_metadata_request = 10;
    GetAttributeMetadataByNameRequest get_attribute_metadata_by_name_request = 11;
  }
  oneof response {
    IsEntityInSegmentResponse is_entity_in_segment_response = 12;
    GetEntityInteractionsResponse get_entity_interactions_response = 13;
    GetUserAttributesAndSegmentsResponse get_user_attribute_and_segment_response = 14;
    GetUsersAttributesAndSegmentsResponse get_users_attributes_and_segments_response = 15;
    SearchSegmentsResponse search_segment_response = 16;
    GetByBaseSegmentResponse get_by_base_segment_response = 17;
    GetSegmentResponse get_segment_response = 18;
    GetFavoritedSegmentsResponse get_favorited_segments_response = 19;
    IsEntityInSegmentV2Response is_entity_in_segment_v2_response = 20;
    GetAllAttributesMetadataResponse get_all_attributes_metadata_response = 21;
    GetAttributeMetadataByNameResponse get_attribute_metadata_by_name_response = 22;
  }
}
