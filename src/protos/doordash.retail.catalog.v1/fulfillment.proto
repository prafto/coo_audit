syntax = "proto3";

// buf:lint:ignore DIRECTORY_SAME_PACKAGE
package doordash.retail.catalog.v1;

import "common/marketplace_purchase.proto";
import "doordash.retail.catalog.crdb.v1/urpc_curated_information.proto";
import "doordash.retail.catalog.crdb.v1/urpc_external_information.proto";
import "doordash.retail.catalog.crdb.v1/well_known_types.proto";
import "doordash.retail.catalog.v1/common.proto";
import "doordash.retail.catalog.v1/consumer_feed.proto";
import "doordash.retail.catalog.v1/legacy.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option go_package = "github.com/doordash/services-protobuf/generated/doordash/retail/catalog/v1";
option java_generic_services = true;

// API to fetch catalog data for fulfillment usecases
service CatalogFulfillmentService {
  // Fetch product items in batch
  rpc GetFulfillmentProductItems(GetFulfillmentProductItemsRequest) returns (GetFulfillmentProductItemsResponse);
  // Search product items using UPCs
  rpc GetFulfillmentProductItemsByUpcs(GetFulfillmentProductItemsByUpcsRequest) returns (GetFulfillmentProductItemsByUpcsResponse);
  // Product lookup by UPC with normalization
  rpc GetFulfillmentProductItemsByBarcodes(GetFulfillmentProductItemsByBarcodesRequest) returns (GetFulfillmentProductItemsByBarcodesResponse);
}

// GTIN formats of barcode
// buf:lint:ignore ENUM_VALUE_PREFIX
// buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
enum GtinFormat {
  // unspecified format
  UNSPECIFIED = 0;
  // UPCA
  UPCA = 1;
  // UPCE
  UPCE = 2;
  // EAN8
  EAN8 = 3;
  // EAN13
  EAN13 = 4;
  // GTIN14
  GTIN14 = 5;
  // ISBN10
  ISBN10 = 6;
  // ISBN13
  ISBN13 = 7;
  // PLU
  PLU = 8;
  // UNKNOWN
  UNKNOWN = 9;
  // GS1 128
  GS1_128 = 10;
  // GS1 databar expanded stacked
  GS1_DATABAR_EXPANDED_STACKED = 11;
}

// barcode normalizer type
// buf:lint:ignore ENUM_VALUE_PREFIX
// buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
enum BarcodeNormalizerType {
  // unspecified format
  UNSPECIFIED_NORMALIZER = 0;
  // UPCA
  UPCA_NORMALIZER = 1;
  // UPCE
  UPCE_NORMALIZER = 2;
  // EAN8
  EAN8_NORMALIZER = 3;
  // EAN13
  EAN13_NORMALIZER = 4;
  // GTIN14
  GTIN14_NORMALIZER = 5;
  // ISBN10
  ISBN10_NORMALIZER = 6;
  // ISBN13
  ISBN13_NORMALIZER = 7;
  // PLU
  PLU_NORMALIZER = 8;
  // Add check digit
  ADD_CHECK_DIGIT_NORMALIZER = 9;
  // GS1 128
  GS1_128_NORMALIZER = 10;
  // GS1 databar expanded stacked
  GS1_DATABAR_EXPANDED_STACKED_NORMALIZER = 11;
}

// representation of the barcode of an item
message Barcode {
  // string of code numbers - can have leading zeros
  string code = 1;
  // format of the barcode
  GtinFormat format = 2;
}

// request to get product items given a UPC
message GetFulfillmentProductItemsByBarcodesRequest {
  // business id is required
  string business_id = 1;
  // list of barcodes
  repeated Barcode barcodes = 2;
}

// catalog barcode normalizer status code
// buf:lint:ignore ENUM_VALUE_PREFIX
// buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
enum BarcodeNormalizerResponse {
  // unspecified status code
  NOTSPECIFIED = 0;
  // successfully normalize item barcode to gtin14
  SUCCESS = 1;
  // barcode is not in the format that is specified by caller
  CODE_AND_FORMAT_MISMATCH = 2;
  // barcode length is not supported by normalizer
  UNSUPPORTED_CODE_LENGTH = 3;
  // barcode has invalid characters
  INVALID_CODE = 4;
}

// response
message FulfillmentProductItemsResponse {
  // product items
  FulfillmentProductItem product_items = 1;
}

// request to get product items given business id
message GetFulfillmentProductItemsRequest {
  // business id is required
  string business_id = 1;
  // merchant supplied ids of the catalog data to fetch
  // NOTE: Number of items should be limited to 500.
  // API should throw error if the limit is exceeded
  repeated string item_merchant_supplied_ids = 2;
}

// request to get product items given a UPC
message GetFulfillmentProductItemsByUpcsRequest {
  // business id is required
  string business_id = 1;

  // UPCs used to search for the matching items
  repeated string upcs = 2;
}

// response of catalog product items for fulfillment usecase
message GetFulfillmentProductItemsResponse {
  // list of product items
  repeated FulfillmentProductItem product_items = 1;
}

// response of catalog product items for fulfillment usecase
message GetFulfillmentProductItemsByUpcsResponse {
  // list of product items
  repeated FulfillmentProductItem product_items = 1;
}

// response of new fulfillment api with barcode normalization
message GetFulfillmentProductItemsByBarcodesResponse {
  // list of product items
  repeated ProductItemsWithNormalizerInfo items = 1;
}

// product items with normalizer info
message ProductItemsWithNormalizerInfo {
  // item
  FulfillmentProductItem product_item = 1;
  // barcode normalizer type
  BarcodeNormalizerType barcode_normalizer_type = 2;
  // pass check digit flag
  google.protobuf.BoolValue pass_check_digit = 3;
  // Value extracted from barcode ( usually price)
  Decimal barcode_embedded_value = 4;
}

// Scan strategy enumeration
enum ScanStrategy {
  // Scan strategy unspecified (no value)
  SCAN_STRATEGY_UNSPECIFIED = 0;
  // Single scan
  SCAN_STRATEGY_SINGLE_SCAN = 1;
  // Multi scan
  SCAN_STRATEGY_MULTI_SCAN = 2;
  // Skip scan
  SCAN_STRATEGY_SKIP_SCAN = 3;
}

// catalog product sechma specific to fulfillment usecase
message FulfillmentProductItem {
  // business id is required
  string business_id = 1;
  // merchant supplied id is required
  string item_merchant_supplied_id = 2;
  // product item name
  google.protobuf.StringValue item_name = 3;
  // if product catalog is active or not
  bool is_active = 4;
  // [no Long Term Support committed] L1 category for navigation purposes
  Category l1_category = 5;
  // [no Long Term Support committed] L2 category for navigation purposes
  Category l2_category = 6;
  // primary image url of the product
  google.protobuf.StringValue primary_image_url = 7;
  // List of UPCs
  repeated google.protobuf.StringValue upcs = 8;
  // price look up code
  google.protobuf.StringValue price_lookup_code = 9;
  // Scan strategy
  ScanStrategy scan_strategy = 10;
  // List of Normalized UPCs
  repeated google.protobuf.StringValue gtin14_codes = 11;
  // optional, package information
  doordash.retail.catalog.crdb.v1.CatalogPackageInformation catalog_package_information = 12;
  // Internally curated attributes, same structure as URPC crdb internal information
  doordash.retail.catalog.crdb.v1.CuratedInformation curated_information = 13;
  // Externally sourced attributes, same structure as URPC crdb external information
  doordash.retail.catalog.crdb.v1.ExternalInformation external_information = 14;
  // (optional) product category information
  ProductCategoryInfo product_category_info = 15;
  // For weighted items only. Quantity in which a weighted item is sold in
  google.protobuf.DoubleValue approximate_sold_as_quantity = 16;
  // For weighted items only. Unit used in approximate_sold_as_quantity
  google.protobuf.StringValue approximate_sold_as_unit = 17;
  // DD SIC if linked to a URPC
  google.protobuf.StringValue dd_sic = 18;
  // Global Catalog ID
  google.protobuf.StringValue global_catalog_id = 19;
  // Enum indicating purchase type
  common.marketplace_purchase.v1.PurchaseType purchase_type = 20;
  // For weighted items only. Unit for measurement_price
  google.protobuf.StringValue measurement_unit = 21;
  // Map to store various item attributes
  map<string, string> item_attribute_map = 22;
  // Timestamp that product item was last updated
  google.protobuf.Timestamp updated_at = 23;
}
