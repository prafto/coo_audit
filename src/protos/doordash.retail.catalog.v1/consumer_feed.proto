syntax = "proto3";

// buf:lint:ignore DIRECTORY_SAME_PACKAGE
package doordash.retail.catalog.v1;

import "common/marketplace_purchase.proto";
import "doordash.retail.catalog.crdb.v1/urpc_curated_information.proto";
import "doordash.retail.catalog.crdb.v1/urpc_external_information.proto";
import "doordash.retail.catalog.v1/common.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option go_package = "github.com/doordash/services-protobuf/generated/doordash/retail/catalog/v1";
option java_generic_services = true;

// consumer serving APIs for catalog data
service CatalogConsumerFeedService {
  // fetch collection details
  rpc GetConsumerCollection(GetConsumerCollectionRequest) returns (GetConsumerCollectionResponse);
  // batch fetch collection details
  rpc GetConsumerCollections(GetConsumerCollectionsRequest) returns (GetConsumerCollectionsResponse);
  // fetch catalog product items in batch
  rpc GetConsumerProductItems(GetConsumerProductItemsRequest) returns (GetConsumerProductItemsResponse);
  // fetch items in a collection
  rpc GetConsumerCollectionProductItems(GetConsumerCollectionProductItemsRequest) returns (GetConsumerCollectionProductItemsResponse);
}

// [no Long Term Support committed] request to get collection metadata
message GetConsumerCollectionRequest {
  // collection id is required
  string collection_id = 1;
}

// [no Long Term Support committed] reponse of collection details
message GetConsumerCollectionResponse {
  // id
  string collection_id = 1;
  // name
  string collection_name = 2;
  // whether the collection is active or not
  bool is_active = 3;
  // collection metadata
  ConsumerCollectionMetadata collection_metadata = 4;
}

// request to batch get collections
message GetConsumerCollectionsRequest {
  // NOTE: Number of collections should be limited to 200.
  // API throws an error if the limit is exceeded
  repeated string collection_ids = 1;
}

// response of details for multiple collections
message GetConsumerCollectionsResponse {
  // collection details
  repeated ConsumerCollection collections = 1;
}

// request to get catalog products for consumer serving
message GetConsumerProductItemsRequest {
  // business id is required
  string business_id = 1;
  // merchant supplied ids of the catalog data to fetch
  // NOTE: Number of items should be limited to 200.
  // API should throw error if the limit is exceeded
  repeated string item_merchant_supplied_ids = 2;
}

// response of catalog products
message GetConsumerProductItemsResponse {
  // item_merchant_supplied_id to catalog proudct detail
  map<string, ConsumerProductItem> product_item_mapping = 1;
}

// request for items in a collection for a given business
message GetConsumerCollectionProductItemsRequest {
  // collection id is required
  string collection_id = 1;
  // business id is required
  string business_id = 2;
  // limit is optional, if not provided all items are returned
  int32 limit = 3;
}

// response of items details
message GetConsumerCollectionProductItemsResponse {
  // MSID of items in this collection ranked by sort_id in an ascending order
  repeated string item_merchant_supplied_ids = 1;
}

// [no Long Term Support committed] collection metadata for consumer serving
message ConsumerCollectionMetadata {
  // background image of the header
  google.protobuf.StringValue header_image_url = 1;
  // background color of the header (hex value)
  google.protobuf.StringValue header_bg_color = 2;
  // short description of the collection in the header
  google.protobuf.StringValue description = 3;
  // default to false; whether text color should be light or dark
  bool use_light_content = 4;
}

// catalog product sechma specific to consumer serving use case
message ConsumerProductItem {
  // business id is required (references a Doordash business)
  string business_id = 1;
  // merchant supplied id is required (set by external partners)
  string item_merchant_supplied_id = 2;
  // product item name
  google.protobuf.StringValue item_name = 3;
  // if product catalog is active or not
  bool is_active = 4;
  // variant metadata
  ProductVariant variant = 5;
  // primary image url of the product
  google.protobuf.StringValue primary_image_url = 6;
  // auxiliary image urls
  repeated google.protobuf.StringValue auxiliary_image_urls = 7;
  // [no LTS committed] sort id within category, default to max value
  int64 item_sort_id = 8;
  // string describing additional item details
  google.protobuf.StringValue item_details = 9;
  // json blob that stores other metadata such as nutritional facts treat as google.protobuf.Struct
  google.protobuf.StringValue product_metadata = 10;
  // [no Long Term Support committed] L1 category for navigation purposes
  Category l1_category = 11;
  // [no Long Term Support committed] L2 category for navigation purposes
  Category l2_category = 12;
  // List of UPCs
  repeated google.protobuf.StringValue upcs = 13;
  // List of Normalized UPCs
  repeated google.protobuf.StringValue gtin14_codes = 14;
  // (optional) nutrition program enum list
  repeated NutritionAssistanceProgram nutrition_programs = 15;
  // (optional) DD_SIC for linking to URPC item
  google.protobuf.StringValue dd_sic = 16;
  // Internally curated attributes, same structure as URPC crdb internal information
  doordash.retail.catalog.crdb.v1.CuratedInformation curated_information = 17;
  // Externally sourced attributes, same structure as URPC crdb external information
  doordash.retail.catalog.crdb.v1.ExternalInformation external_information = 18;
  // For weighted items only. Quantity in which a weighted item is sold in
  google.protobuf.DoubleValue approximate_sold_as_quantity = 19;
  // For weighted items only. Unit used in approximate_sold_as_quantity
  google.protobuf.StringValue approximate_sold_as_unit = 20;
  // Enum indicating purchase type
  common.marketplace_purchase.v1.PurchaseType purchase_type = 21;
  // For weighted items only. Unit for measurement_price
  google.protobuf.StringValue measurement_unit = 22;
  // brand id
  google.protobuf.Int64Value brand_id = 23;
  // Timestamp that product item was last updated
  google.protobuf.Timestamp updated_at = 24;
  // Backend taxonomy id
  google.protobuf.Int64Value product_category_id = 25;
}

// retail category info for navigation purposes
message Category {
  // [no Long Term Support committed] category id for navigation purposes
  string category_id = 1;
  // category name
  string category_name = 2;
}

// catalog product variant, indicating closely related products where small amount of attributes vary
message ProductVariant {
  // product group such as brand, tag
  google.protobuf.StringValue product_group = 1;
  // [no Long Term Support committed] product variant
  google.protobuf.StringValue variant = 2;
  // [no Long Term Support committed] product size
  google.protobuf.StringValue size = 3;
}

// collection details
message ConsumerCollection {
  // id
  string collection_id = 1;
  // name
  string collection_name = 2;
  // whether the collection is active or not
  bool is_active = 3;
  // collection metadata
  ConsumerCollectionMetadata collection_metadata = 4;
}
