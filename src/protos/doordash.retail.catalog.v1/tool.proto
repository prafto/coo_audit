syntax = "proto3";

// buf:lint:ignore DIRECTORY_SAME_PACKAGE
package doordash.retail.catalog.v1;

import "common/service_client_config.proto";
import "doordash.retail.catalog.crdb.v1/global_product_item.proto";
import "doordash.retail.catalog.crdb.v1/urpc_curated_information.proto";
import "doordash.retail.catalog.crdb.v1/urpc_external_information.proto";
import "doordash.retail.catalog.crdb.v1/well_known_types.proto";
import "doordash.retail.catalog.v1/common.proto";
import "doordash.retail.catalog.v1/fulfillment.proto";
import "doordash.retail.catalog.v1/legacy.proto";
import "doordash.retail.catalog.v1/urpc_search.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option go_package = "github.com/doordash/services-protobuf/generated/doordash/retail/catalog/v1";
// so CatalogToolService can be found
option java_generic_services = true;

/* Services Definitions */

// This grpc service is for catalog tooling APIs (e.g. BulkTool)
service CatalogToolService {
  // Ignore INVALID_ARGUMENT from circuit breaker error rate calculation.
  option (service_client.client_config).circuit_breaker_config.do_ignore_grpc_code = 3;

  // create a new grocery tag
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc CreateGroceryTag(CatalogToolServiceCreateGroceryTagRequest) returns (CreateGroceryTagResponse);

  // update one or more grocery category tag links
  // (fields are overwritten on existing rows)
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc UpdateGroceryCategoryTagLinks(CatalogToolServiceUpdateGroceryCategoryTagLinksRequest) returns (UpdateGroceryCategoryTagLinksResponse);

  // create one or more product items
  rpc CreateProductItem(CreateProductItemRequest) returns (CreateProductItemResponse);

  // update product item, including partial update
  rpc UpdateProductItem(UpdateProductItemRequest) returns (UpdateProductItemResponse);

  // update one or more grocery collection tag links
  // (fields are overwritten on existing rows)
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc UpdateGroceryCollectionTagLinks(CatalogToolServiceUpdateGroceryCollectionTagLinksRequest) returns (UpdateGroceryCollectionTagLinksResponse);

  // update one or more grocery collection metadata entries
  // (fields are overwritten on existing rows)
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc UpdateGroceryCollectionMetadata(CatalogToolServiceUpdateGroceryCollectionMetadataRequest) returns (UpdateGroceryCollectionMetadataResponse);

  // edit UPC of a catalog item
  rpc UpdateItemUpc(UpdateItemUpcRequest) returns (UpdateItemUpcResponse);

  // upload global product item
  rpc CreateGlobalProductItem(CreateGlobalProductItemRequest) returns (CreateGlobalProductItemResponse);

  // update global product item by DDSIC - gtin code is NOT unique thus onply provide updating by DDSIC
  rpc UpdateGlobalProductItemByDDSIC(UpdateGlobalProductItemByDDSICRequest) returns (UpdateGlobalProductItemByDDSICResponse);

  // update global product item, including partial update
  rpc UpdateGlobalProductItem(UpdateGlobalProductItemRequest) returns (UpdateGlobalProductItemResponse);

  // URPC match
  rpc MatchProductCodeToURPC(MatchProductCodeToURPCRequest) returns (MatchProductCodeToURPCResponse);

  // Linking tool
  rpc LinkMerchantProductToGlobalProduct(LinkMerchantProductToGlobalProductRequest) returns (LinkMerchantProductToGlobalProductResponse);

  // Linking tool bulk
  rpc LinkMerchantProductToGlobalProductBulk(LinkMerchantProductToGlobalProductBulkRequest) returns (LinkMerchantProductToGlobalProductBulkResponse);

  // Barcode Normalizer
  rpc NormalizeBarcode(NormalizeBarcodeRequest) returns (NormalizeBarcodeResponse);

  // Upsert Product Category info
  rpc UpsertProductCategory(UpsertProductCategoryRequest) returns (UpsertProductCategoryResponse);

  // upsert brand
  rpc UpsertBrandInfo(UpsertBrandInfoRequest) returns (UpsertBrandInfoResponse);

  // upsert manufacturer
  rpc UpsertManufacturerInfo(UpsertManufacturerInfoRequest) returns (UpsertManufacturerInfoResponse);

  // update MsId Valid Status
  rpc UpdateMsIdValidStatus(UpdateMsIdValidStatusRequest) returns (UpdateMsIdValidStatusResponse);

  // update URPC Linking by Business Id
  rpc UpdateLinkURPCConfigByBusinessId(UpdateLinkURPCConfigByBusinessIdRequest) returns (UpdateLinkURPCConfigByBusinessIdResponse);

  // update Disable URPC Attribute Override By Business Id
  rpc UpdateDisableURPCAttributeOverrideConfigByBusinessId(UpdateDisableURPCAttributeOverrideConfigByBusinessIdRequest) returns (UpdateDisableURPCAttributeOverrideConfigByBusinessIdResponse);

  // update Disable URPC Attribute Override By Business Vertical Id
  rpc UpdateDisableURPCAttributeOverrideConfigByBusinessVerticalId(UpdateDisableURPCAttributeOverrideConfigByBusinessVerticalIdRequest) returns (UpdateDisableURPCAttributeOverrideConfigByBusinessVerticalIdResponse);

  // update Should Enable Hsa Fsa Attribute by Business Id
  rpc UpdateEnableHsaFsaAttributeConfigByBusinessId(UpdateEnableHsaFsaAttributeConfigByBusinessIdRequest) returns (UpdateEnableHsaFsaAttributeConfigByBusinessIdResponse);

  // create a Salesforce case requesting new sku construction, attach sku details in a file submitted via AddSkuFileToItemAdditionSfdcCase
  rpc CreateMerchantItemAdditionSfdcCase(CreateMerchantItemAdditionSfdcCaseRequest) returns (CreateMerchantItemAdditionSfdcCaseResponse);

  // attach a file to a Case with the details necessary to construct new SKUs
  rpc AddSkuFileToItemAdditionSfdcCase(AddSkuFileToItemAdditionSfdcCaseRequest) returns (AddSkuFileToItemAdditionSfdcCaseResponse);
}

// API to fetch catalog data for tools
service CatalogSearchToolService {
  // fetch catalog product items in batch
  rpc SearchToolProductItems(SearchToolProductItemsRequest) returns (SearchToolProductItemsResponse);
  // fetch catalog global product items in batch
  rpc SearchToolGlobalProductItems(SearchToolGlobalProductItemsRequest) returns (SearchToolGlobalProductItemsResponse);
}

// Request source
enum UpdateRequestSource {
  // Unspecified
  UPDATE_REQUEST_SOURCE_UNSPECIFIED = 0;
  // Detect and fix job
  UPDATE_REQUEST_SOURCE_DETECT_AND_FIX = 1;
  // Urpc from third party
  UPDATE_REQUEST_SOURCE_URPC_FROM_THIRD_PARTY = 2;
}

/* Request and Response */

// the details of a sku to be constructed by an operator
message MerchantItemDetailSfdc {
  // the name of the item that is going to be requested to be constructed by an operator
  google.protobuf.StringValue item_name = 1;
  // the universal product code
  google.protobuf.StringValue upc = 2;
  // the sku of the tiem to be constructed
  google.protobuf.StringValue sku = 3;
  // a description of the amount of the product contained by by the proposed sku
  google.protobuf.StringValue size = 4;
  // the price of the sku to be constructed
  google.protobuf.StringValue price = 5;
  // whether or not the product should be considered to be subject to alcohol regulations / delivery restrictions / treatment
  google.protobuf.BoolValue is_alcohol = 6;
  // optional: the pack size
  google.protobuf.StringValue pack_size = 7;
  // a link to an image of the product for use in constructing sku
  google.protobuf.StringValue image_url = 8;
}

// the request to add a file with sku contents to be constructed to the SkuConstruction Salesforce Case
message AddSkuFileToItemAdditionSfdcCaseRequest {
  // required: the SFDC Case id against which to apply the supplied file
  google.protobuf.StringValue case_id = 1;
  // the name of the file as you wish it to appear in Salesforce, filetype suffix and all
  google.protobuf.StringValue filename = 2;
  // the raw contents of the file, encoded as a base64 string
  // Salesforce has a limit as low as 25mb depending on the version of Salesforce being used see
  // https://help.salesforce.com/s/articleView?id=sf.collab_files_size_limits.htm&type=5
  // if you need to send more than 25mb, split it and attach multiple files to the parent
  // case instead
  google.protobuf.StringValue base64_encoded_file = 3;
}

// the request to add a file with sku contents to be constructed to the SkuConstruction Salesforce Case
message AddSkuFileToItemAdditionSfdcCaseResponse {
  // the id of the attachemnt that was successfully added to the Case
  google.protobuf.StringValue attachment_id = 1;
}

// the request for the RPC call used to construct an SFDC (Salesforce) case to have an operator build a new sku
message CreateMerchantItemAdditionSfdcCaseRequest {
  reserved 1;
  reserved "item_list";
  // required: the store id against which the sku construction request was made
  google.protobuf.StringValue store_id = 2;
  // optional: the business against which the sku construction request is being made
  google.protobuf.StringValue business_id = 3;
  // optional: requester registered email may not not be the best contact for resolving ambiguity, allow an alternate
  google.protobuf.StringValue email = 4;
}

// the response for the RPC call used to construct an SFDC (Salesforce) case to have an operator build a new sku
message CreateMerchantItemAdditionSfdcCaseResponse {
  // the case id of the created Salesforce Case
  google.protobuf.StringValue message = 1;
}

// request used to link a merchant product to a global product
message LinkMerchantProductToGlobalProductRequest {
  // business id of the relevant merchant (dictated by merchant/store catalog team)
  int64 business_id = 1;
  // external id unique to this business (specified by external partners)
  string merchant_supplied_id = 2;
  // global catalog id for the relevant global product
  google.protobuf.StringValue global_catalog_id = 3;
  // global product identifier within the global catalog
  google.protobuf.StringValue dd_sic = 4;
  // bulk service job id
  string bulk_tool_job_id = 5;
}

// request used to link a merchant product to a global product - in bulk request
message LinkMerchantProductToGlobalProductBulkRequest {
  // list of bulk link requests (wrapper of the LinkMerchantProductToGlobalProductRequest)
  repeated LinkMerchantProductToGlobalProductRequest link_request_list = 1;
}

// response for linking a merchant product to a global product
message LinkMerchantProductToGlobalProductResponse {
  // whether UPC editing successful
  bool success = 1;
  // data packet containg details of error
  message UnsuccessfulLinkError {
    // optional: free form message
    string message = 1;
    // details of the attempted link returned back to the user.
    // business id of the relevant merchant (dictated by merchant/store catalog team)
    int64 business_id = 2;
    // external id unique to this business (specified by external partners)
    string merchant_supplied_id = 3;
    // global catalog id for the relevant global product
    string global_catalog_id = 4;
    // global product identifier within the global catalog
    string dd_sic = 5;
  }
  // optional: if success if false, data packet containg details
  UnsuccessfulLinkError error_details = 2;
}

// response for linking MPC to URPC in bulk request
message LinkMerchantProductToGlobalProductBulkResponse {
  // list of LinkMerchantProductToGlobalProductResponse
  repeated LinkMerchantProductToGlobalProductResponse link_response_list = 1;
}

// request for create grocery tag
message CatalogToolServiceCreateGroceryTagRequest {
  // tag group id, should match one of the following
  // 628 = grocery_collection, 629 = grocery_category1, 630 = grocery_category2, 631 = grocery_category3
  int64 group_id = 1;
  // tag group name
  string name = 2;
  // bulk service job id
  string bulk_tool_job_id = 3;
  // tag group short name
  google.protobuf.StringValue short_name = 4;
}

// update category tag link request
message CatalogToolServiceUpdateGroceryCategoryTagLinksRequest {
  // doordash business id
  int64 business_id = 1;
  // list of grocery category tag links to update
  repeated GroceryCategoryTagLink input = 2;
  // bulk service job id
  string bulk_tool_job_id = 3;
}

// create product item request
message CreateProductItemRequest {
  // Product Item to create
  GroceryCategoryTagLink product_item = 1;
  // optional, job id
  google.protobuf.StringValue job_id = 2;
}

// create product item response
message CreateProductItemResponse {
  // product item created
  GroceryCategoryTagLink product_item = 1;
}

// update product item request
message UpdateProductItemRequest {
  // product item to update
  GroceryCategoryTagLink product_item = 1;
  // optional, job id
  google.protobuf.StringValue job_id = 2;
  // Field Mask for specifying delta for partial updates
  google.protobuf.FieldMask update_mask = 3;
  // optional, request source field
  UpdateRequestSource source = 4;
}

// update product item response
message UpdateProductItemResponse {
  // success
  bool success = 1;
  // error message
  string error_message = 2;
}

// update collection tag link request
message CatalogToolServiceUpdateGroceryCollectionTagLinksRequest {
  // doordash business id
  int64 business_id = 1;
  // list of grocery collection tag links to update
  repeated GroceryCollectionTagLink input = 2;
  // bulk service job id
  string bulk_tool_job_id = 3;
}

// update collection metadata request
message CatalogToolServiceUpdateGroceryCollectionMetadataRequest {
  // list of grocery collection metadata entries to update
  repeated GroceryCollectionMetadata input = 1;
  // bulk service job id
  string bulk_tool_job_id = 2;
}

// update item UPC request
message UpdateItemUpcRequest {
  // business id
  int64 business_id = 1;
  // item merchant supplied id
  string item_merchant_supplied_id = 2;
  // UPCs to append
  string append = 3;
  // UPCs to remove
  string remove = 4;
  // UPCs to overwrite with
  string overwrite = 5;
  // bulk service job id
  string bulk_tool_job_id = 6;
}

// update item UPC response
message UpdateItemUpcResponse {
  // whether UPC editing successful
  bool success = 1;
  // error message
  string error_message = 2;
  // global product item
  GlobalProductItemBulkToolFields global_product_item = 3;
}

// the bulk tool fields requried for v0 to upload a new global product item
// those are partial of it
message GlobalProductItemBulkToolFields {
  // required, interla_handle
  UrpcInternalInformation internal_information = 1;
  // required, external_handle
  UrpcExternalInformation external_information = 2;
  // global catalog id
  google.protobuf.StringValue global_catalog_id = 3;
  // sic of global_product_item
  google.protobuf.StringValue dd_sic = 4;
  // Internally curated attributes, same structure as URPC crdb internal information
  doordash.retail.catalog.crdb.v1.CuratedInformation curated_information_v2 = 5;
  // Externally sourced attributes, same structure as URPC crdb external information
  doordash.retail.catalog.crdb.v1.ExternalInformation external_information_v2 = 6;
}

// external handle for urpc, this is only part of it.
// will move to protos/doordash.retail.catalog.crdb.v1/urpc_external_information.proto in the future
message UrpcExternalInformation {
  // required, category name for this product
  google.protobuf.StringValue product_category = 1;
  // required, gtin 14 code of global product item
  google.protobuf.StringValue gtin_14 = 2;
  // required, product title
  google.protobuf.StringValue product_title = 3;
  // optional, brand
  google.protobuf.StringValue brand = 4;
  // required, primary doordash photo id
  ExternalPhotoWrapper primary_photo = 5;
  // optional, other photos
  repeated ExternalPhotoWrapper secondary_photos = 6;
  // optional
  ExternalPhotoWrapper nutritional_photo = 7;
  // optional, ops requested
  google.protobuf.StringValue upc = 9;
  // optional, long-form item description
  google.protobuf.StringValue long_description = 10;
  // optional, required if long_description is present
  google.protobuf.StringValue long_description_locale = 11;
  // optional, manufacturer of the item
  google.protobuf.StringValue manufacturer = 12;
  // optional, number of individual packs in a multi-pack
  google.protobuf.Int32Value unit_count = 13;
  // optional, package type
  doordash.retail.catalog.crdb.v1.PackageType package_type = 14;
  // optional, if package_type is set, then required
  google.protobuf.BoolValue is_package_fee_eligible = 15;
  // optional
  doordash.retail.catalog.crdb.v1.PackageMaterial package_material = 16;
}

// wrapper for external image
message ExternalPhotoWrapper {
  // required,  photo id
  google.protobuf.StringValue photo_id = 1;
  // optional,  photo uuid
  google.protobuf.StringValue photo_uuid = 2;
  // optional,  photo url
  google.protobuf.StringValue photo_url = 3;
  // required, cpg url
  google.protobuf.StringValue cpg_url = 4;
  // required, type code representing type of photo
  google.protobuf.StringValue type_code = 5;
}

// internal handle for urpc, this is a flat structure,
// will move to protos/doordash.retail.catalog.crdb.v1/urpc_curated_information.proto in the future
message UrpcInternalInformation {
  // internal handle
  // required, link to l1 catagory id
  google.protobuf.StringValue aisle_id_l1 = 1;
  // optional, link to l1 catagory name
  google.protobuf.StringValue aisle_name_l1 = 2;
  // required, link to l2 catagory id
  google.protobuf.StringValue aisle_id_l2 = 3;
  // optional, link to l1 catagory name
  google.protobuf.StringValue aisle_name_l2 = 4;
  // optional, sort id optional
  google.protobuf.Int32Value sort_id = 5;
  // optional, product group
  google.protobuf.StringValue product_group = 6;
  // optional, l4 size
  google.protobuf.StringValue l4_size = 7;
  // optional, l4 variant optional
  google.protobuf.StringValue l4_variant = 8;
  // optional, commad delimited keywords
  google.protobuf.StringValue keywords = 9;
  // required, primary photo
  PhotoWrapper primary_photo = 10;
  // optional, secondary photos
  repeated PhotoWrapper secondary_photo = 11;
  // required, item name
  google.protobuf.StringValue item_name = 12;
  // optional, is global product item active
  google.protobuf.BoolValue is_active = 13;
  // optional, price lookup code
  google.protobuf.StringValue price_lookup_code = 14;
  // weighted item fields optional
  // optional, approximate sold as quantity
  google.protobuf.StringValue approximate_sold_as_quantity = 15;
  // optional, approximate sold as unit
  google.protobuf.StringValue approximate_sold_as_unit = 16;
  // optional, measurement unit
  google.protobuf.StringValue measurement_unit = 17;
  // optional, measurement factor
  google.protobuf.StringValue measurement_factor = 18;
  // ioptional, increment
  google.protobuf.FloatValue increment = 19;
  // required, unit required
  google.protobuf.StringValue unit = 20;
  // optional, additional price description
  google.protobuf.StringValue additional_price_description = 21;
  // optional, scan strategy
  google.protobuf.StringValue scan_strategy = 22;
  // optional, detail
  google.protobuf.StringValue detail = 23;
  // optional, nutritional information
  google.protobuf.StringValue product_metadata = 24;
  // required, purchase type
  google.protobuf.Int32Value purchase_type = 25;
  // optional, brand id for taxonomy
  google.protobuf.Int64Value brand_id = 26;
  // optional, product category id for L4 taxonomy
  google.protobuf.Int64Value product_category_id = 27;
}

// wrapper for internal image
message PhotoWrapper {
  // required,  photo id
  google.protobuf.StringValue photo_id = 1;
  // optional,  photo uuid
  google.protobuf.StringValue photo_uuid = 2;
  // optional,  photo url
  google.protobuf.StringValue photo_url = 3;
  // required, photo source
  google.protobuf.Int32Value photo_source = 4;
}

// request for creating global product item on bulk tool
message CreateGlobalProductItemRequest {
  // global product item
  GlobalProductItemBulkToolFields global_product_item = 1;
  // bulk service job id
  string bulk_tool_job_id = 2;
}

// response for created global product item
message CreateGlobalProductItemResponse {
  // generated dd_sic id
  string dd_sic = 1;
  // version of created global product item
  int64 version = 2;
  // global product item
  GlobalProductItemBulkToolFields global_product_item = 3;
}

// request for updating global product item by dd_sic id
message UpdateGlobalProductItemByDDSICRequest {
  // dd_sic for global product item
  string dd_sic = 1;
  // the content for updating global product item
  GlobalProductItemBulkToolFields global_product_item = 2;
  // bulk service job id
  string bulk_tool_job_id = 3;
}

// response for updated global product item
message UpdateGlobalProductItemByDDSICResponse {
  // dd_sic for updated global product item
  string dd_sic = 1;
  // new version for updated global product item
  int64 version = 2;
  // complete updated global product item
  doordash.retail.catalog.crdb.v1.GlobalProductItem global_product_item = 3;
}

// request for updates to global product item, including partial updates
message UpdateGlobalProductItemRequest {
  // the content for updating global product item
  GlobalProductItemBulkToolFields global_product_item = 1; //existing proto
  // optional, job id
  google.protobuf.StringValue job_id = 2;
  // Field Mask for specifying delta for partial updates
  google.protobuf.FieldMask update_mask = 3;
  // optional, request source
  UpdateRequestSource source = 4;
}

// response for updated global product item, including partial updates
message UpdateGlobalProductItemResponse {
  // dd_sic for updated global product item
  string dd_sic = 1;
  // new version for updated global product item
  int64 version = 2;
  // complete updated global product item
  doordash.retail.catalog.crdb.v1.GlobalProductItem global_product_item = 3;
}

// request to get catalog products for search in tools
message SearchToolProductItemsRequest {
  // query string to search
  google.protobuf.StringValue query_string = 1;

  // optional filter param based on business id
  string business_id = 2;

  // this field is deprecated. Use is_active_bool instead
  bool is_active = 3 [deprecated = true];

  // optional filter param based on category l1 name
  string category1_name = 4;

  // optional filter param based on category l2 name
  string category2_name = 5;

  // pagination info required for ES
  SearchToolPaginationInfo pagination_info = 6;

  // optional filter param based on is active
  google.protobuf.BoolValue filter_is_active = 7;
}

// response of catalog product items for search in tools
message SearchToolProductItemsResponse {
  // list of product item hits
  repeated ProductItem product_items = 1;

  // Count of search hits that can be used to calculate the page count
  int64 total = 2;

  // business id aggregate information. We cap it to 5
  repeated StringAggregateInfo business_id_aggregate_info = 3;

  // is active aggregate information.
  repeated BooleanAggregateInfo is_active_aggregate_info = 4;

  // l1 category name aggregate information.
  repeated StringAggregateInfo category1_name_aggregate_info = 5;

  // l2 category name aggregate information.
  repeated StringAggregateInfo category2_name_aggregate_info = 6;
}

// Aggregate information for keys based on String
message StringAggregateInfo {
  // key
  string key = 1;
  // no of hits for the key
  uint32 count = 2;
}

// Boolean aggregate info for catalog search tool
message BooleanAggregateInfo {
  // key
  bool key = 1;
  // no of hits for the key
  uint32 count = 2;
}

// product items hits
message ProductItem {
  // business id is required
  string business_id = 1;
  // merchant supplied id is required
  string item_merchant_supplied_id = 2;
  // root category id
  int64 category1_id = 3;
  // root category name
  string category1_name = 4;
  // sub category id
  int64 category2_id = 5;
  // sub category name
  string category2_name = 6;
  // product group info
  google.protobuf.StringValue product_group = 7;
  // traits info
  google.protobuf.StringValue traits = 8;
  // item name
  google.protobuf.StringValue item_name = 9;
  // upc
  google.protobuf.StringValue upc = 10;
  // if product catalog is active or not
  bool is_active = 11;
  // item location
  google.protobuf.StringValue item_location = 12;
  // price look up code
  google.protobuf.StringValue price_lookup_code = 13;
  // item unit
  google.protobuf.StringValue unit = 14;
  // increment
  Decimal increment = 15;
  // sold as info
  SoldAsInfo sold_as_info = 16;
  // estimation info
  EstimationInfo estimation_info = 17;
  // scan strategy
  google.protobuf.StringValue scan_strategy = 18;
  // purchase type
  google.protobuf.StringValue purchase_type = 19;
  // sort id, used to be popularity
  int64 item_sort_id = 20;
  // details to display on item detail page
  google.protobuf.StringValue details = 21;
  // details to display on item detail page
  google.protobuf.StringValue product_metadata = 22;
  // primary photo id
  google.protobuf.StringValue primary_photo_id = 23;
  // auxiliary photo ids
  repeated string auxiliary_photo_ids = 24;
  // Last updated timestamp
  google.protobuf.Timestamp updated_at = 25;
  // upcs in list format
  repeated string upc_list = 26;
  // dd_sic for linked urpc
  google.protobuf.StringValue dd_sic = 27;
  // global catalog id for linked urpc
  google.protobuf.StringValue global_catalog_id = 28;
  // (optional) nutrition program enum list
  repeated NutritionAssistanceProgram nutrition_programs = 29;
  // optional, package information
  doordash.retail.catalog.crdb.v1.CatalogPackageInformation catalog_package_information = 30;
  // (optional) product category information
  ProductCategoryInfo product_category_info = 31;
  // Internally curated attributes, same structure as URPC crdb internal information
  doordash.retail.catalog.crdb.v1.CuratedInformation curated_information = 32;
  // Externally sourced attributes, same structure as URPC crdb external information
  doordash.retail.catalog.crdb.v1.ExternalInformation external_information = 33;
}

// Search tool pagination info for catalog search tool
message SearchToolPaginationInfo {
  // Optional pagination argument that defines the number of search results to return. Defaults to 10 and is same as limit (SQL)
  int64 size = 6;

  // Optional pagination argument that defines the number of hits to skip. Defaults to 0 and is same as offset (SQL)
  int64 from = 7;
}

/**
 * URPC match type
 * see spec: https://docs.google.com/document/d/1Ug0dXMvfb_GODuHvMX-_OF-O7_UAA76xWkOeKG9kdxM/edit#heading=h.cr7bdf509o6
 */
enum URPCMatchType {
  // invalid or unknown match status
  URPC_MATCH_TYPE_UNSPECIFIED = 0;
  // match item with a single match in the URPC
  URPC_MATCH_TYPE_FULL_MATCH = 1;
  // partial match against an item in the URPC
  // missing some required attributes
  URPC_MATCH_TYPE_PARTIAL_MATCH = 2;
  // match item with no match
  URPC_MATCH_TYPE_NO_MATCH = 3;
  // match item with multiple matches in the URPC
  URPC_MATCH_TYPE_MULTI_MATCH = 4;
  // match item containing errors
  URPC_MATCH_TYPE_ERROR = 5;
}

/**
 * an individual product code match request
 */
message ProductCodeMatch {
  // optional: row number returned in the response
  google.protobuf.StringValue row_number = 1;
  // optional: merchant supplied id returned in the response
  google.protobuf.StringValue merchant_supplied_id = 2;
  // optional: business id returned in the response
  google.protobuf.StringValue business_id = 3;
  // required: product codes
  repeated string product_codes = 4;
}

/**
 * attempt to match product code(s) for a single item against the URPC
 */
message MatchProductCodeToURPCRequest {
  // bulk service job id
  string bulk_tool_job_id = 1;
  // required product code match request
  ProductCodeMatch match_item = 2;
}

/**
 * product code match response
 */
message MatchProductCodeToURPCResponse {
  /**
   * indicates whether the match item was successfully added
   * to a new or pending job (will error if the job is in a
   * terminal state)
   */
  bool success = 1;
  // status message or error message
  oneof message {
    // status message (may be blank)
    string status_message = 2;
    // error message (may be blank)
    string error_message = 3;
  }
  // optional: row number returned in the response
  google.protobuf.StringValue row_number = 4;
  // optional: merchant supplied id returned in the response
  google.protobuf.StringValue merchant_supplied_id = 5;
  // optional: business id returned in the response
  google.protobuf.StringValue business_id = 6;
  // match type
  URPCMatchType match_type = 7;
  // matched product item(s)
  repeated GlobalProductItemBulkToolFields matches = 8;
}

// request for barcode normalizer tool
message NormalizeBarcodeRequest {
  // input barcodes
  repeated Barcode barcodes = 1;
}

// normalized barcode
message NormalizedBarcode {
  // normalized barcode
  Barcode normalized_barcode = 1;
  // barcode normalizer type
  BarcodeNormalizerType barcode_normalizer_type = 2;
  // pass check digit flag
  google.protobuf.BoolValue pass_check_digit = 3;
}

// barcode normalizer result
message BarcodeNormalizerResult {
  // original input barcode
  Barcode original_barcode = 1;
  // array of normalized barcode results
  repeated NormalizedBarcode normalized_barcodes = 2;
}

// response for barcode normalizer tool
message NormalizeBarcodeResponse {
  // array of barcode normalizer results
  repeated BarcodeNormalizerResult results = 1;
}

// request for creating/updating taxonomy info on bulk tool
message UpsertProductCategoryRequest {
  // taxonomy info
  ProductCategory product_category = 1;
  // bulk service job id
  string bulk_tool_job_id = 2;
}

// product category info
message ProductCategory {
  // id of product category taxonomy
  int64 id = 1;
  // name of product category
  string name = 2;
  // display name of product category
  string display_name = 3;
  // status of product category
  bool is_active = 4;
  // parent product category id, nullable
  google.protobuf.Int64Value parent_id = 5;
  // flag for terminal node in path
  bool is_terminal_node = 6;
  // String used in the URL when navigating using the taxonomy
  string handle = 7;
}

// response for creating/updating taxonomy info on bulk tool
message UpsertProductCategoryResponse {
  // ProductCategory info
  ProductCategory product_category = 1;
}

// requeset to upsert brand
message UpsertBrandInfoRequest {
  // brand
  Brand brand = 1;
  // bulk job id
  string bulk_tool_job_id = 2;
}

// request to upsert manufacturer
message UpsertManufacturerInfoRequest {
  // manufacturer
  Manufacturer manufacturer = 1;
  // bulk tool job id
  string bulk_tool_job_id = 2;
}

// brand
message Brand {
  // id
  int64 id = 1;
  // name of brand
  string name = 2;
  // is active
  bool is_active = 3;
  // parent id of brand, nullable
  google.protobuf.Int64Value parent_id = 4;
  // manufacturer id for this brand, optional
  google.protobuf.Int64Value manufacturer_id = 5;
}

// manufacturer
message Manufacturer {
  // id
  int64 id = 1;
  // name
  string name = 2;
  // is current manufacturer active
  bool is_active = 3;
  // the parent id, nullable
  google.protobuf.Int64Value parent_id = 4;
}

// response for upserting the brand
message UpsertBrandInfoResponse {
  // upserted brand
  Brand brand = 1;
}

// response for upsert the manufacture
message UpsertManufacturerInfoResponse {
  // upserted manufacturer
  Manufacturer manufacturer = 1;
}

// MsId Valid Status for an item
message MsIdValidStatus {
  // Enum for item id invalid reason
  enum InvalidReason {
    // Default 0
    INVALID_REASON_UNSPECIFIED = 0;
    // Tobacco
    INVALID_REASON_TOBACCO = 1;
    // THC or CBD
    INVALID_REASON_THC_CBD = 2;
    // Gift card
    INVALID_REASON_GIFT_CARDS = 3;
    // Physical items
    INVALID_REASON_NON_PHYSICAL_ITEMS = 4;
    // Restricted medicine
    INVALID_REASON_RESTRICTED_MEDICINE = 5;
    // Live animals
    INVALID_REASON_LIVE_ANIMALS = 6;
    // Bottle deposits
    INVALID_REASON_BOTTLE_DEPOSITS = 7;
    // Rental skus
    INVALID_REASON_RENTAL_SKUS = 8;
    // Dvds
    INVALID_REASON_DVDS = 9;
    // Books or magazines
    INVALID_REASON_BOOKS_MAGAZINES = 10;
    // Greeting cards
    INVALID_REASON_GREETING_CARDS = 11;
    // Weapons
    INVALID_REASON_WEAPONS = 12;
    // Extremely large items
    INVALID_REASON_EXTREMELY_LARGE_ITEMS = 13;
    // Mx data error
    INVALID_REASON_MX_DATA_ERROR = 14;
    // Other reason
    INVALID_REASON_OTHERS = 15;
    // Alcohol
    INVALID_REASON_ALCOHOL = 16;
    // Discontinued item
    INVALID_REASON_DISCONTINUED_ITEMS = 17;
    // Fraud item
    INVALID_REASON_FRAUD_ITEMS = 18;
    // InStore Starbucks kiosk item
    INVALID_REASON_INSTORE_STARBUCKS_KIOSK_ITEMS = 19;
    // Clothing
    INVALID_REASON_CLOTHING = 20;
    // Temporarily marking invalid
    INVALID_REASON_TEMPORARILY_MARKING_INVALID = 21;
  }
  // Merchant supplied item id, usually SKU id
  google.protobuf.StringValue merchant_supplied_item_id = 1;
  // MsId valid status indicator
  google.protobuf.BoolValue is_valid = 2;
  // Invalid reason
  InvalidReason invalid_reason = 3;
  // Other description
  google.protobuf.StringValue description = 4;
}

// Request to update msid valid status per business
message UpdateMsIdValidStatusRequest {
  // Doordash business id
  google.protobuf.Int64Value business_id = 1;
  // Valid Status list of inventory items.
  repeated MsIdValidStatus msid_valid_status = 2;
  // UUID to associate and track the request. If not
  // provided, a new UUID will be generated and provided
  // in the response.
  google.protobuf.StringValue request_id = 3;
  // Operator id or email address
  google.protobuf.StringValue updated_by = 4;
}

// Response for UpdateMsIdValidStatusResponse
message UpdateMsIdValidStatusResponse {
  // UUID to associate and track the request. If request ID
  // was provided in the request, this will be the same value as that.
  // Otherwise, a new UUID will be generated by the service.
  google.protobuf.StringValue request_id = 1;
  // Doordash business id
  google.protobuf.Int64Value business_id = 2;
}

// request to update Link URPC Config by Business Id
message UpdateLinkURPCConfigByBusinessIdRequest {
  // message with id and value for Link URPC configs by business id
  LinkURPCConfigByBusinessId link_urpc_config_by_business_id = 1;
}

// request to update Disable URPC Attribute Override Config by Business Id
message UpdateDisableURPCAttributeOverrideConfigByBusinessIdRequest {
  // message with id and value for disable URPC attribute override configs by business id
  DisableURPCAttributeOverrideConfigsByBusinessId disable_urpc_attribute_override_configs_by_business_id = 1;
}

// request to update disable URPC attribute override config by business vertical id
message UpdateDisableURPCAttributeOverrideConfigByBusinessVerticalIdRequest {
  // message with id and value for disable URPC attribute override configs by business vertical id
  DisableURPCAttributeOverrideConfigsByBusinessVerticalId disable_urpc_attribute_override_configs_by_business_vertical_id = 1;
}

// request to update enable hsa fsa attribute config by business id
message UpdateEnableHsaFsaAttributeConfigByBusinessIdRequest {
  // message with id and value for enable Hsa Fsa attribute config by business id
  EnableHsaFsaAttributeConfigByBusinessId enable_hsa_fsa_attribute_config_by_business_id = 1;
}

// response to update Link URPC Config by Business Id
message UpdateLinkURPCConfigByBusinessIdResponse {
  // success
  google.protobuf.BoolValue success = 1;
  // error message (optional)
  google.protobuf.StringValue error_message = 2;
  // message with id and value for Link URPC configs by business id
  LinkURPCConfigByBusinessId link_urpc_config_by_business_id = 3;
}

// response to update Disable URPC Attribute Override Config by Business Id
message UpdateDisableURPCAttributeOverrideConfigByBusinessIdResponse {
  // success
  google.protobuf.BoolValue success = 1;
  // error message (optional)
  google.protobuf.StringValue error_message = 2;
  // message with id and value for disable URPC attribute override configs by business id
  DisableURPCAttributeOverrideConfigsByBusinessId disable_urpc_attribute_override_configs_by_business_id = 3;
}

// response to update disable URPC attribute override config by business vertical id
message UpdateDisableURPCAttributeOverrideConfigByBusinessVerticalIdResponse {
  // success
  google.protobuf.BoolValue success = 1;
  // error message (optional)
  google.protobuf.StringValue error_message = 2;
  // message with id and value for disable URPC attribute override configs by business vertical id
  DisableURPCAttributeOverrideConfigsByBusinessVerticalId disable_urpc_attribute_override_configs_by_business_vertical_id = 3;
}

// response to update enable hsa fsa attribute config by business id
message UpdateEnableHsaFsaAttributeConfigByBusinessIdResponse {
  // success
  google.protobuf.BoolValue success = 1;
  // error message (optional)
  google.protobuf.StringValue error_message = 2;
  // message with id and value for enable Hsa Fsa attribute config by business id
  EnableHsaFsaAttributeConfigByBusinessId enable_hsa_fsa_attribute_config_by_business_id = 3;
}

// id and value for link URPC config by business id
message LinkURPCConfigByBusinessId {
  // business id
  google.protobuf.Int64Value business_id = 1;
  // Current URPC config values
  google.protobuf.BoolValue link_urpc_config_by_business_id = 2;
}

// id and value for disable URPC attribute override configs by business id
message DisableURPCAttributeOverrideConfigsByBusinessId {
  // business id
  google.protobuf.Int64Value business_id = 1;
  // Current URPC config value
  google.protobuf.BoolValue disable_urpc_attribute_override_config_by_business_id = 2;
}

// id and value for disable URPC attribute override configs by business id
message DisableURPCAttributeOverrideConfigsByBusinessVerticalId {
  // business vertical id
  google.protobuf.Int64Value business_vertical_id = 1;
  // Current URPC config value
  google.protobuf.BoolValue disable_urpc_attribute_override_config_by_business_vertical_id = 2;
}

// id and value for enable Hsa Fsa attribute config by business id
message EnableHsaFsaAttributeConfigByBusinessId {
  // business id
  google.protobuf.Int64Value business_id = 1;
  // Current URPC config value
  google.protobuf.BoolValue enable_fsa_hsa_attribute_config_by_business_id = 2;
}

// service for catalog entity linking tool api
service CatalogEntityLinkingService {
  // link an existing catalog entity to UGP
  rpc LinkCatalogEntityToGlobalProduct(LinkCatalogEntityToGlobalProductRequest) returns (LinkCatalogEntityToGlobalProductResponse);
}

// catalog entity type (source type)
enum CatalogEntityType {
  // unspecified entity
  CATALOG_ENTITY_TYPE_UNSPECIFIED = 0;
  // third party data
  CATALOG_ENTITY_TYPE_TPD = 1;
  // unique merchant product
  CATALOG_ENTITY_TYPE_UMP = 2;
}

// linking tool operation type
enum CatalogOperationType {
  // unspecifiedd operation type
  CATALOG_OPERATION_TYPE_UNSPECIFIED = 0;
  // link a catalog entity to a global product
  CATALOG_OPERATION_TYPE_LINK = 1;
  // unlink a catalog entity from a global product
  CATALOG_OPERATION_TYPE_UNLINK = 2;
  // promote a catalog entity to UGP
  CATALOG_OPERATION_TYPE_UGP_PROMOTION = 3;
}

// source id for linking tool
message SourceId {
  // one of ump unique identifier ids
  int64 business_id = 1;
  // one of ump unique identifier ids
  string ump_id = 2;
  // third party data unique identifier id
  string tpd_id = 3;
}

// Linking operation which contains the information for linking e.g., entity to be linked, UGP be linked to
message LinkingOperation {
  // source id of the catalog entity (link from)
  SourceId source_id = 1;
  // type of the catalog entity
  CatalogEntityType source_type = 2;
  // type of the operation
  CatalogOperationType operation_type = 3;
  // UPG id for the relevant global product (link to)
  string global_catalog_id = 4;
}

// request for linking a catalog entity to UGP
message LinkCatalogEntityToGlobalProductRequest {
  // batch linking operations
  repeated LinkingOperation linking_operations = 1;
  // The id of submitter
  string assignee_id = 2;
}

// response for linking catalog entity to UGP
message LinkCatalogEntityToGlobalProductResponse {
  // response for each linking operation
  message Response {
    // returned id of the linked/delinked entity
    SourceId source_id = 1;
    // UGP being linked/delinked
    string ugp_id = 2 [deprecated = true];
    // error message, optional
    string err_message = 3;
    // UGP identifier being linked/delinked
    string global_catalog_id = 4;
  }
  // list of responses for each linking operation
  repeated Response responses = 1;
}
