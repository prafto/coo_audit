syntax = "proto3";
package identity_service;

import "common/service_client_config.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "identity/management.proto";

option go_package = "github.com/doordash/services-protobuf/generated/identity";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.identity";

// Common object modelling the verification state record
message VerificationObjectValueStateModel {
  // Identifying key for the Object, generally the user_id
  string object_id = 1;
  // Object whose state is being recorded Generally the email or phone
  string verification_value = 2;
  // Object State
  // Default is VerificationState.NONE
  VerificationState verification_state = 3;
  // Time when the update in state was recorded
  google.protobuf.Timestamp updated_at = 4;
}

/*
 * Request Payload for GetVerificationObjectValueState
 */
message GetVerificationObjectValueStateRequest {
  // Identifying key for the Object, generally the user_id
  string object_id = 1;
  //Object whose state is being recorded Generally the email or phone
  string verification_value = 2;
}

/*
 * Request Payload for SetVerificationObjectValueStateState
 */
message SetVerificationObjectValueStateRequest {
  // Identifying key for the Object, generally the user_id
  string object_id = 1;
  // Object whose state is being recorded Generally the email or phone
  string verification_value = 2;
  // VerificationState imported from user manangement service
  // The state of the object being verified.
  VerificationState verification_state = 3;
}

/*
 * Request Payload for GetVerificationObjectsByValueAndState
 */
message GetVerificationObjectsByValueAndStateRequest {
  // Object whose state is being queried. Generally the email or phone
  string verification_value = 1;
  //State being queried
  VerificationState verification_state = 2;
  // max number of verification records that need to be returned
  // default is 100
  google.protobuf.Int32Value max_row_count = 3;
}

/*
 * Response for GetVerificationObjectValueState
 */
message GetVerificationObjectValueStateResponse {
  // Object which had the queried verification state
  VerificationObjectValueStateModel verification_object_model = 1;
}

/*
 * Response for SetVerificationObjectValueState
 */
message SetVerificationObjectValueStateResponse {
  // Object which had the queried verification state
  VerificationObjectValueStateModel verification_object_model = 1;
}

/*
 * Response for GetVerificationObjectsByValueAndState
 */
message GetVerificationObjectsByValueAndStateResponse {
  // All objects which had the queried verification state
  repeated VerificationObjectValueStateModel verification_object_models = 1;
}

/*
 * Request Payload for SetVerificationValueState
 */
message SetVerificationValueStateRequest {
  // Object whose state is being recorded Generally the email or phone
  string verification_value = 1;
  // State that needs to be recorded.
  VerificationState verification_state = 2;
}

// Dummy SetVerificationValueStateResponse response for future extensions
message SetVerificationValueStateResponse {}

/*
 * Request Payload for Delete the verification state
 */
message DeleteVerificationValueStateRequest {
  // Identifying key for the Object, generally the user_id
  string object_id = 1;
  // Object whose state is being recorded Generally the email or phone
  google.protobuf.StringValue verification_value = 2;
}

// Dummy SetVerificationValueStateResponse response for future extensions
message DeleteVerificationValueStateResponse {}

/*
   VerficationService Allows users to check verification states for different objects like phone or email
   As of now those 2 are primary use cases for verification.
   The verification is recorded for an object_id (user_id), and the verification value (things whose state has to be checked, like the phone or email)
   We can get or set these states using the methods below.

   In case of errors the rpc calls can returns:
   400 bad request. eg: invalid user id format, or fields
   403 for token with insufficient privileges or too many attempts
   500 for any internal server errors
*/
service VerficationService {
  // Given a id-object combination, gets the verification state
  rpc GetVerificationObjectValueState(GetVerificationObjectValueStateRequest) returns (GetVerificationObjectValueStateResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 1200;
    option (service_client.client_method_config).retry_config.max_attempts = 3;
    option (service_client.client_method_config).retry_config.do_retry_grpc_code = 4;
    option (service_client.client_method_config).retry_config.initial_wait_millis = 50;
    option (service_client.client_method_config).retry_config.wait_multiplier = 2.0;
    option (service_client.client_method_config).circuit_breaker_config.failure_rate_threshold = 0.3;
    option (service_client.client_method_config).circuit_breaker_config.minimum_request_threshold = 10;
    option (service_client.client_method_config).circuit_breaker_config.counter_sliding_window_millis = 20000;
    option (service_client.client_method_config).circuit_breaker_config.circuit_open_window_millis = 10000;
    option (service_client.client_method_config).circuit_breaker_config.trial_request_interval_millis = 3000;
    option (service_client.client_method_config).circuit_breaker_config.do_ignore_grpc_code = 5;
  }

  // Sets the verification state for an id-object combination
  rpc SetVerificationObjectValueState(SetVerificationObjectValueStateRequest) returns (SetVerificationObjectValueStateResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 1200;
    option (service_client.client_method_config).retry_config.max_attempts = 3;
    option (service_client.client_method_config).retry_config.do_retry_grpc_code = 4;
    option (service_client.client_method_config).retry_config.initial_wait_millis = 50;
    option (service_client.client_method_config).retry_config.wait_multiplier = 2.0;
    option (service_client.client_method_config).circuit_breaker_config.failure_rate_threshold = 0.3;
    option (service_client.client_method_config).circuit_breaker_config.minimum_request_threshold = 10;
    option (service_client.client_method_config).circuit_breaker_config.counter_sliding_window_millis = 20000;
    option (service_client.client_method_config).circuit_breaker_config.circuit_open_window_millis = 10000;
    option (service_client.client_method_config).circuit_breaker_config.trial_request_interval_millis = 3000;
    option (service_client.client_method_config).circuit_breaker_config.do_ignore_grpc_code = 5;
  }

  // Gets all verification state records associated with an object
  rpc GetVerificationObjectsByValueAndState(GetVerificationObjectsByValueAndStateRequest) returns (GetVerificationObjectsByValueAndStateResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 1200;
    option (service_client.client_method_config).retry_config.max_attempts = 3;
    option (service_client.client_method_config).retry_config.do_retry_grpc_code = 4;
    option (service_client.client_method_config).retry_config.initial_wait_millis = 50;
    option (service_client.client_method_config).retry_config.wait_multiplier = 2.0;
    option (service_client.client_method_config).circuit_breaker_config.failure_rate_threshold = 0.3;
    option (service_client.client_method_config).circuit_breaker_config.minimum_request_threshold = 10;
    option (service_client.client_method_config).circuit_breaker_config.counter_sliding_window_millis = 20000;
    option (service_client.client_method_config).circuit_breaker_config.circuit_open_window_millis = 10000;
    option (service_client.client_method_config).circuit_breaker_config.trial_request_interval_millis = 3000;
    option (service_client.client_method_config).circuit_breaker_config.do_ignore_grpc_code = 5;
  }

  // Generally used to set verification states for objects to None
  rpc SetVerificationValueState(SetVerificationValueStateRequest) returns (SetVerificationValueStateResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 1200;
    option (service_client.client_method_config).retry_config.max_attempts = 3;
    option (service_client.client_method_config).retry_config.do_retry_grpc_code = 4;
    option (service_client.client_method_config).retry_config.initial_wait_millis = 50;
    option (service_client.client_method_config).retry_config.wait_multiplier = 2.0;
    option (service_client.client_method_config).circuit_breaker_config.failure_rate_threshold = 0.3;
    option (service_client.client_method_config).circuit_breaker_config.minimum_request_threshold = 10;
    option (service_client.client_method_config).circuit_breaker_config.counter_sliding_window_millis = 20000;
    option (service_client.client_method_config).circuit_breaker_config.circuit_open_window_millis = 10000;
    option (service_client.client_method_config).circuit_breaker_config.trial_request_interval_millis = 3000;
    option (service_client.client_method_config).circuit_breaker_config.do_ignore_grpc_code = 5;
  }

  // Generally used to delete verification states for objects
  rpc DeleteVerificationValueState(DeleteVerificationValueStateRequest) returns (DeleteVerificationValueStateResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 1200;
    option (service_client.client_method_config).retry_config.max_attempts = 3;
    option (service_client.client_method_config).retry_config.do_retry_grpc_code = 4;
    option (service_client.client_method_config).retry_config.initial_wait_millis = 50;
    option (service_client.client_method_config).retry_config.wait_multiplier = 2.0;
    option (service_client.client_method_config).circuit_breaker_config.failure_rate_threshold = 0.3;
    option (service_client.client_method_config).circuit_breaker_config.minimum_request_threshold = 10;
    option (service_client.client_method_config).circuit_breaker_config.counter_sliding_window_millis = 20000;
    option (service_client.client_method_config).circuit_breaker_config.circuit_open_window_millis = 10000;
    option (service_client.client_method_config).circuit_breaker_config.trial_request_interval_millis = 3000;
    option (service_client.client_method_config).circuit_breaker_config.do_ignore_grpc_code = 5;
  }
}
