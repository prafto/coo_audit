syntax = "proto3";
package identity_service;

import "google/api/annotations.proto";
import "identity/group.proto";

option go_package = "github.com/doordash/services-protobuf/generated/identity";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.identity";

/*
 * Request for creating a group
 */
message CreateGroupRequest {
  // Name for the group
  string name = 1;
}

/*
 * Response for creating a group
 */
message CreateGroupResponse {
  // Group object
  Group group = 1;
}

/*
 * Request for searching groups
 */
message QueryGroupRequest {
  // List of Group id
  repeated string ids = 1;

  // List of Group name
  repeated string names = 2;

  // Limit of Query
  string max_row_count = 3;

  // Offset of limit query
  string offset = 4;
}

/*
 * Response for searching groups
 */
message QueryGroupResponse {
  // List of group objects
  repeated Group groups = 1;
}

/*
 * Get all groups request
 */
message getAllGroupsRequest {
  // Limit of Query
  string max_row_count = 1;

  // Offset of limit query
  string offset = 2;
}

/*
 * Get all groups response
 */
message getAllGroupsResponse {
  // List of group objects
  repeated Group groups = 1;
}

/*
 * Request for deleting a group
 */
message DeleteGroupRequest {
  // ID of the Group that needs to be deleted
  GroupIdentifier group_identifier = 1;
}

message DeleteGroupResponse {}

/*
 * Request for adding user into groups
 */
message AddUserIntoGroupsRequest {
  string user_id = 1;
  repeated string group_ids = 2;
}

/*
 * Response for adding user into groups
 */
message AddUserIntoGroupsResponse {}

/*
 * Request for removing user from groups
 */
message RemoveUserFromGroupsRequest {
  string user_id = 1;
  repeated string group_ids = 2;
}

/*
 * Response for removing user
 */
message RemoveUserFromGroupsResponse {}

/*
 * Request for getting users in group
 */
message GetUsersByGroupRequest {
  // ID of the group
  string group_id = 1;

  // Limit of Query
  string max_row_count = 2;

  // Offset of limit query
  string offset = 3;
}

/*
 * Response for getting users in group
 */
message GetUsersByGroupResponse {
  // List of user ids
  repeated string user_ids = 1;
}

/*
 * Request for adding users into group
 */
message AddUsersIntoGroupRequest {
  // ID of the group
  string group_id = 1;

  // List of user ids
  repeated string user_ids = 2;
}

/*
 * Response for adding users into group
 */
message AddUsersIntoGroupResponse {}

/*
 * Request for removing users from group
 */
message RemoveUsersFromGroupRequest {
  // ID of the group
  string group_id = 1;

  // List of user ids
  repeated string user_ids = 2;
}

/*
 * Response for removing users from group
 */
message RemoveUsersFromGroupResponse {}

/*
 * Request for adding a user into group admin
 */
message AddUserGroupAdminRequest {
  // Id of the user need to be added into the group admin
  string user_id = 1;

  // Id of the group
  string group_id = 2;

  // Role assigned for the user of the group, either "admin" or "owner"
  string role = 3;
}

/*
 * Response for adding a user into group admin
 */
message AddUserGroupAdminResponse {}

/*
 * Request for checking user has admin/owner role in a group
 */
message IsUserGroupAdminRequest {
  // Id of the user need to query
  string user_id = 1;

  // Id of the group need to query
  string group_id = 2;
}

/*
 * Response for checking user has admin/owner role in a group
 */
message IsUserGroupAdminResponse {
  bool is_user_group_admin = 1;
}

/*
 * Request for find rows of a user or a group in user_group_admin
 */
message QueryUserGroupAdminRequest {
  // Id of the user need to query
  string user_id = 1;

  // Id of the group need to query
  string group_id = 2;
}

/*
 * response for find rows of a user or a group in user_group_admin
 */
message QueryUserGroupAdminResponse {
  // List of UserGroupAdmin object
  repeated UserGroupAdmin user_group_admin = 1;
}

/*
 * Request for removing a user admin from a group
 */
message RemoveUserGroupAdminRequest {
  // User id that needs to be removed from a group
  string user_id = 1;

  // Id of the group that the user removed from
  string group_id = 2;

  // specify role, either "admin" or "owner"
  string role = 3;
}

/*
 * Response for removing user group admin request
 */
message RemoveUserGroupAdminResponse {}

/*
 * GroupManagementService service contains group related requests
 */
service GroupManagementService {
  /*
   * Create group.
   *
   * You need API Key/token for internal-identity-service with of at-least "ADMIN" scope.
   */
  rpc CreateGroup(CreateGroupRequest) returns (CreateGroupResponse) {
    option (google.api.http) = {
      post: "/api/v1/groups"
      body: "*"
    };
  }

  /*
     * Query Groups

     * Query Group by list of group ids or group names. If ids and names are provided at the same time, return the
     * union result of ids and names.
     * maxRowCount and offSet are 2 numbers that limit the query as for pagination.
     * You need API Key/token for identity-service with of at-least "READ" scope.
  */
  rpc QueryGroup(QueryGroupRequest) returns (QueryGroupResponse) {
    option (google.api.http) = {
      post: "/api/v1/groupquery"
      body: "*"
    };
  }

  /*
   * Get all the groups
   *
   * maxRowCount and offSet are 2 numbers that limit the query as for pagination.
   * You need API Key/token for identity-service with of at-least "READ" scope.
   */
  rpc GetAllGroups(getAllGroupsRequest) returns (getAllGroupsResponse) {
    option (google.api.http) = {
      post: "/api/v1/all_groups"
      body: "*"
    };
  }

  /*
   * Delete group
   *
   * Delete a group by group id or group name
   * You need API Key/token for identity-service with of at-least "ADMIN" scope.
   */
  rpc DeleteGroup(DeleteGroupRequest) returns (DeleteGroupResponse) {
    option (google.api.http) = {
      delete: "/api/v1/groups/{group_identifier.id}"
      additional_bindings {delete: "/api/v1/groups/{group_identifier.name}"}
    };
  }

  /*
   * Add User into Groups
   *
   * Add a user into list of groups. This call requires user id and list of group ids
   * You need API Key/token for identity-service with of at-least "ADMIN" scope.
   */
  rpc AddUserIntoGroups(AddUserIntoGroupsRequest) returns (AddUserIntoGroupsResponse) {
    option (google.api.http) = {
      post: "/api/v1/add_user_into_groups"
      body: "*"
    };
  }

  /*
   * Remove user from groups
   *
   * Remove a user from list of groups. This call requires user id and list of group ids
   * You need API Key/token for identity-service with of at-least "ADMIN" scope.
   */
  rpc RemoveUserFromGroups(RemoveUserFromGroupsRequest) returns (RemoveUserFromGroupsResponse) {
    option (google.api.http) = {
      post: "/api/v1/remove_user_from_groups"
      body: "*"
    };
  }

  /*
   * Get users in group
   *
   * Get all users in a group
   * You need API Key/token for identity-service with of at-least "READ" scope.
   */
  rpc GetUsersByGroup(GetUsersByGroupRequest) returns (GetUsersByGroupResponse) {}

  /*
   * Add users into group
   *
   * Add a list of users into a group
   * You need API Key/token for identity-service with of at-least "ADMIN" scope.
   */
  rpc AddUsersIntoGroup(AddUsersIntoGroupRequest) returns (AddUsersIntoGroupResponse) {}

  /*
   * Remove users from group
   *
   * Remove a list of users from a group
   * You need API Key/token for identity-service with of at-least "ADMIN" scope.
   */
  rpc RemoveUsersFromGroup(RemoveUsersFromGroupRequest) returns (RemoveUsersFromGroupResponse) {}

  /*
   * Add User Group Admin
   *
   * Add a user as group admin for a group
   * You need API Key/token for identity-service with of at-least "ADMIN" scope.
   */
  rpc AddUserGroupAdmin(AddUserGroupAdminRequest) returns (AddUserGroupAdminResponse) {
    option (google.api.http) = {
      post: "/api/v1/add_user_group_admin"
      body: "*"
    };
  }

  /*
   * Is User Group Admin
   *
   * Check whether a user is an admin or owner for a group
   * You need API Key/token for identity-service with of at-least "READ" scope.
   */
  rpc IsUserGroupAdmin(IsUserGroupAdminRequest) returns (IsUserGroupAdminResponse) {
    option (google.api.http) = {
      post: "/api/v1/is_user_group_admin"
      body: "*"
    };
  }

  /*
   * Query User Group Admin
   *
   * Query user group admin info based of user_id or group_id or both.
   * If query by user_id only, it will return list of user group admin info based on that user
   * If query by group_id only, it will return list of user group admin info based on that group
   * If query by both, will return the user group admin info if the user is admin or owner of that group
   *
   * You need API Key/token for identity-service with of at-least "READ" scope.
   */
  rpc QueryUserGroupAdmin(QueryUserGroupAdminRequest) returns (QueryUserGroupAdminResponse) {
    option (google.api.http) = {
      post: "/api/v1/query_user_group_admin"
      body: "*"
    };
  }

  /*
   * Remove User Group Admin
   *
   * Remove a user from a group's admin list.
   * You need API Key/token for identity-service with of at-least "ADMIN" scope.
   */
  rpc RemoveUserGroupAdmin(RemoveUserGroupAdminRequest) returns (RemoveUserGroupAdminResponse) {
    option (google.api.http) = {
      post: "/api/v1/remove_user_group_admin"
      body: "*"
    };
  }
}
