syntax = "proto3";

package cash_recon_service.v1;

import "common/service_client_config.proto";
import "doordash.api/annotations.proto";
import "doordash.api/client.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option go_package = "github.com/doordash/services-protobuf/generated/cash_recon_service/api/v1";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.cash_recon_service.rpc.api";

// Cash Recon Service
service CashReconService {
  option (doordash.api.service) = {
    name: "cash-recon-service"
    url: "cash-recon-service-api.service.prod.ddsd"
    name_spaces: ["cash-recon-service"]
    port: 50051
    owner: {
      id: "revenue-platform-pagerduty-alerts"
      name: "revenue_platform"
      slack_channel: "#revenue_platform"
      email_alias: "revenue-platform-eng@doordash.com"
    },
    target_products: [INTERNAL]
  };

  // ===========================
  // 1. DxL definitions
  // ===========================

  // Balance View
  rpc GetRSLForDxLBalanceViewV1(GetRSLForDxLBalanceViewV1Request) returns (GetRSLForDxLBalanceViewV1Response) {
    option (google.api.http) = {get: "/cash-recon-service/v1/rsl-dxl/balance-view"};
    option (service_client.client_method_config).response_attempt_timeout_millis = 30000;

    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [
        API_KEY,
        DD_EMPLOYEE
      ]
      role_based_authorization: {
        mode: ALL
        roles: ["perm_cash_recon_je_trace_view"]
      }
      authentication_config: {enable_okta_verification: true}
      target_products: [INTERNAL]
    };
  }

  // Activity View
  rpc GetRSLForDxLActivityViewV1(GetRSLForDxLActivityViewV1Request) returns (GetRSLForDxLActivityViewV1Response) {
    option (google.api.http) = {get: "/cash-recon-service/v1/rsl-dxl/activity-view"};
    option (service_client.client_method_config).response_attempt_timeout_millis = 30000;

    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [
        API_KEY,
        DD_EMPLOYEE
      ]
      role_based_authorization: {
        mode: ALL
        roles: ["perm_cash_recon_je_trace_view"]
      }
      authentication_config: {enable_okta_verification: true}
      target_products: [INTERNAL]
    };
  }

  // Samples
  rpc GetRSLForDxLReconSampleV1(GetRSLForDxLReconSampleV1Request) returns (GetRSLForDxLReconSampleV1Response) {
    option (google.api.http) = {get: "/cash-recon-service/v1/rsl-dxl/sample"};
    option (service_client.client_method_config).response_attempt_timeout_millis = 30000;

    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [
        API_KEY,
        DD_EMPLOYEE
      ]
      role_based_authorization: {
        mode: ALL
        roles: ["perm_cash_recon_je_trace_view"]
      }
      authentication_config: {enable_okta_verification: true}
      target_products: [INTERNAL]
    };
  }

  // Single transaction
  rpc GetRSLForDxLReconciledTransactionV1(GetRSLForDxLReconciledTransactionV1Request) returns (GetRSLForDxLReconciledTransactionV1Response) {
    option (google.api.http) = {get: "/cash-recon-service/v1/rsl-dxl/reconciled-transaction/{id}"};

    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [
        API_KEY,
        DD_EMPLOYEE
      ]
      role_based_authorization: {
        mode: ALL
        roles: ["perm_cash_recon_je_trace_view"]
      }
      authentication_config: {enable_okta_verification: true}
      target_products: [INTERNAL]
    };
  }

  // Single transactions by reference id and reference id type
  rpc GetRSLForDxLReconciledTransactionsByReferenceIdAndReferenceIdTypeV1(GetRSLForDxLReconciledTransactionsByReferenceIdAndReferenceIdTypeV1Request) returns (GetRSLForDxLReconciledTransactionsByReferenceIdAndReferenceIdTypeV1Response) {
    option (google.api.http) = {
      post: "/cash-recon-service/v1/rsl-dxl/reconciled-transactions-by-reference-id",
      body: "*"
    };
    option (service_client.client_method_config).response_attempt_timeout_millis = 30000;

    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [
        API_KEY,
        DD_EMPLOYEE
      ]
      role_based_authorization: {
        mode: ALL
        roles: ["perm_cash_recon_je_trace_view"]
      }
      authentication_config: {enable_okta_verification: true}
      target_products: [INTERNAL]
    };
  }

  // ===========================
  // 2. MxL definitions
  // ===========================

  // Balance View
  rpc GetMxLReconBalanceViewV1(GetMxLReconBalanceViewV1Request) returns (GetMxLReconBalanceViewV1Response) {
    option (google.api.http) = {get: "/cash-recon-service/v1/rsl-mxl/balance-view"};
    option (service_client.client_method_config).response_attempt_timeout_millis = 30000;

    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [
        API_KEY,
        DD_EMPLOYEE
      ]
      role_based_authorization: {
        mode: ALL
        roles: ["perm_cash_recon_je_trace_view"]
      }
      authentication_config: {enable_okta_verification: true}
      target_products: [INTERNAL]
    };
  }

  // ActivityView
  rpc GetMxLReconActivityViewV1(GetMxLReconActivityViewV1Request) returns (GetMxLReconActivityViewV1Response) {
    option (google.api.http) = {get: "/cash-recon-service/v1/rsl-mxl/activity-view"};
    option (service_client.client_method_config).response_attempt_timeout_millis = 30000;

    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [
        API_KEY,
        DD_EMPLOYEE
      ]
      role_based_authorization: {
        mode: ALL
        roles: ["perm_cash_recon_je_trace_view"]
      }
      authentication_config: {enable_okta_verification: true}
      target_products: [INTERNAL]
    };
  }

  // Samples
  rpc GetMxLReconSampleV1(GetMxLReconSampleV1Request) returns (GetMxLReconSampleV1Response) {
    option (google.api.http) = {get: "/cash-recon-service/v1/rsl-mxl/sample"};
    option (service_client.client_method_config).response_attempt_timeout_millis = 30000;

    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [
        API_KEY,
        DD_EMPLOYEE
      ]
      role_based_authorization: {
        mode: ALL
        roles: ["perm_cash_recon_je_trace_view"]
      }
      authentication_config: {enable_okta_verification: true}
      target_products: [INTERNAL]
    };
  }

  // Single transaction
  rpc GetMxLReconReconciledTransactionV1(GetMxLReconReconciledTransactionV1Request) returns (GetMxLReconReconciledTransactionV1Response) {
    option (google.api.http) = {get: "/cash-recon-service/v1/rsl-mxl/reconciled-transaction/{id}"};

    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [
        API_KEY,
        DD_EMPLOYEE
      ]
      role_based_authorization: {
        mode: ALL
        roles: ["perm_cash_recon_je_trace_view"]
      }
      authentication_config: {enable_okta_verification: true}
      target_products: [INTERNAL]
    };
  }
}

// ===========================
// 3. General messages
// ===========================

// Represents a financial datasource, e.g. RSL, MxL, DxL, CxL
// And the amount it has booked, e.g. RSL booked 100
message FinancialDataSource {
  // Amount booked by the financial data source
  google.protobuf.Int64Value amount = 1;
  // Name of the financial data source
  google.protobuf.StringValue name = 2;
}

// Represents a group(aggregation) of transactions that are reconciled and have the same category_final
message ReconGroup {
  // FinancialDataSources in this recon group
  repeated FinancialDataSource financial_data_sources = 6;

  // Net difference between the financial data sources
  google.protobuf.Int64Value net_diff = 7;
}

// Represents journal details in a reconciled transaction when rollup was necessary to reconcile
message RSLJournalDetails {
  // ID of the journal
  google.protobuf.StringValue id = 1;

  // JE ID of the journal
  google.protobuf.StringValue je_id = 2;

  // COA ID of the journal
  google.protobuf.StringValue coa_id = 3;

  // Journal key of the journal
  google.protobuf.StringValue journal_key = 4;

  // Credit and debit difference of the journal
  google.protobuf.Int32Value cred_debit_diff = 5;
}

// ===========================
// 4. DxL messages
// ===========================

// Lowest level of reconciliation (DxL)
message ReconciledTransaction {
  // ID of the reconciled transaction
  google.protobuf.StringValue id = 1;

  // RSL JE ID of the reconciled transaction
  google.protobuf.StringValue rsl_je_id = 2;

  // RSL reference ID of the reconciled transaction
  google.protobuf.StringValue rsl_reference_id = 3;

  // RSL reference ID type of the reconciled transaction
  google.protobuf.StringValue rsl_reference_id_type = 4;

  // RSL currency of the reconciled transaction
  google.protobuf.StringValue rsl_currency = 5;

  // RSL dasher job ID of the reconciled transaction
  google.protobuf.StringValue rsl_dasher_job_id = 6;

  // RSL payment account ID of the reconciled transaction
  google.protobuf.StringValue rsl_payment_account_id = 7;

  // RSL amount of the reconciled transaction
  google.protobuf.Int32Value rsl_amount = 8;

  // RSL net amount of the reconciled transaction
  google.protobuf.Int32Value rsl_net_amount = 9;

  // RSL COA ID of the reconciled transaction
  google.protobuf.StringValue rsl_coa_id = 10;

  // Max booking time of the reconciled transaction
  google.protobuf.Timestamp max_booking_time = 11;

  // Journal details of the reconciled transaction when rollup was necessary to reconcile
  google.protobuf.StringValue journal_details = 12;

  // DxL ID of the reconciled transaction
  google.protobuf.StringValue dxl_id = 13;

  // DxL dasher ID of the reconciled transaction
  google.protobuf.StringValue dxl_dasher_id = 14;

  // DxL ledger of the reconciled transaction
  google.protobuf.StringValue dxl_ledger = 15;

  // DxL created at of the reconciled transaction
  google.protobuf.StringValue dxl_created_at = 16;

  // DxL transfer ID of the reconciled transaction
  google.protobuf.StringValue dxl_transfer_id = 17;

  // DxL transfer method of the reconciled transaction
  google.protobuf.StringValue dxl_transfer_method = 18;

  // DxL target ID of the reconciled transaction
  google.protobuf.StringValue dxl_target_id = 19;

  // DxL target type of the reconciled transaction
  google.protobuf.StringValue dxl_target_type = 20;

  // DxL amount of the reconciled transaction (can be from different types of amounts in DxL, check dxl_amount_type)
  google.protobuf.Int32Value dxl_amount = 21;

  // DxL amount field which was used to fill the dxl_amount_type
  google.protobuf.StringValue dxl_amount_type = 22;

  // DxL currency of the reconciled transaction
  google.protobuf.StringValue dxl_currency = 23;

  // DxL payout experience of the reconciled transaction
  google.protobuf.StringValue dxl_payout_experience = 24;

  // DxL payout provider of the reconciled transaction
  google.protobuf.StringValue dxl_payout_provider = 25;

  // DxL JE ID of the reconciled transaction
  google.protobuf.StringValue dxl_je_id = 26;

  // RSL DxL amount diff of the reconciled transaction
  google.protobuf.StringValue rsl_dxl_diff = 27;

  // RSL DxL date diff of the reconciled transaction
  google.protobuf.Int32Value rsl_dxl_date_diff = 28;

  // Category of the reconciled transaction
  google.protobuf.StringValue category = 29;

  // Sub category of the reconciled transaction
  google.protobuf.StringValue sub_category = 30;

  // Category final of the reconciled transaction (coalesce sub_category, category)
  google.protobuf.StringValue category_final = 31;

  // Updated at of the reconciled transaction
  google.protobuf.Timestamp updated_at = 32;

  // Booking time final of the reconciled transaction
  google.protobuf.Timestamp booking_time_final = 33;

  // Currency final of the reconciled transaction
  google.protobuf.StringValue currency_final = 34;

  // Booking day final of the reconciled transaction
  google.protobuf.Int32Value booking_day_final = 35;

  // Booking month final of the reconciled transaction
  google.protobuf.Int32Value booking_month_final = 36;

  // JE ID final of the reconciled transaction
  google.protobuf.StringValue je_id_final = 37;

  // DXL dasher job reason / dx job name
  google.protobuf.StringValue dxl_dasher_job_reason = 38;
}

// Request to get balance view of reconciliation between rsl and dxl
message GetRSLForDxLBalanceViewV1Request {
  // (Optional) The "as of" date for the Balance.  Default to yesterday's date (last recon date)
  google.protobuf.Timestamp date = 1 [(doordash.api.client.optional) = true];
}

// Response of balance view of reconciliation between rsl and dxl
message GetRSLForDxLBalanceViewV1Response {
  // Represents each row of balance view, with category_final, je_id and recon groups for each currency
  message Row {
    // Category final of all the transactions in the aggregation
    google.protobuf.StringValue category_final = 1;

    // je_id of the row
    google.protobuf.StringValue je_id = 2;

    // Map of currency to recon group.
    // For  view, we're pivoting the data where currency is shown as columns
    map<string, ReconGroup> currency_map = 3;
  }

  // Month object of the response in balance view
  message Month {
    // Row data for the specific month
    repeated Row rows = 1;
  }

  // asOfDate from the request
  google.protobuf.Timestamp as_of_date = 1;

  // Map of each month to its data
  map<string, Month> data = 2;
}

// Request to get activity view of the reconciliation
message GetRSLForDxLActivityViewV1Request {
  // (Optional) Filter transactions with booking times starting from...; Defaults to yesterday's date
  google.protobuf.Timestamp start_date = 1 [(doordash.api.client.optional) = true];

  // (Optional) Filter transactions with booking times ending on...; Defaults to yesterday's date less (-) default max date range (eg. 1 week)
  // Validate max date range in service and UI based on product req
  google.protobuf.Timestamp end_date = 2 [(doordash.api.client.optional) = true];
}

// Response of the activity view of the reconciliation
message GetRSLForDxLActivityViewV1Response {
  // Represents each row of activity view, with category_final, je_id, currency and recon groups for each date
  message ActivityRow {
    // Category final of all the transactions in the aggregation
    google.protobuf.StringValue category_final = 2;

    // Currency of all the transactions in the aggregation
    google.protobuf.StringValue currency = 3;

    // JE ID of all the transactions in the aggregation
    google.protobuf.StringValue je_id = 4;

    // Map of booking date string to recon group. (eg. 06/01/2024 -> ReconGroup, 06/02/2024 -> ReconGroup)
    map<string, ReconGroup> date_map = 5;
  }

  // data of transactions for the requested date range
  repeated ActivityRow data = 1;
}

// Request of message to get samples for reconciliation
message GetRSLForDxLReconSampleV1Request {
  // Optional
  google.protobuf.Timestamp date = 1 [(doordash.api.client.optional) = true];

  // Optional
  google.protobuf.StringValue category_final = 2;

  // Optional
  google.protobuf.StringValue currency = 3;

  // Optional
  google.protobuf.StringValue je_id = 4;
}

// Response of samples for reconciliation
message GetRSLForDxLReconSampleV1Response {
  // sample of reconciled transaction
  repeated ReconciledTransaction sample = 1;
}

// Request object for the GetRSLForDxLReconciledTransactionV1 endpoint
message GetRSLForDxLReconciledTransactionV1Request {
  // id of the requested transaction
  google.protobuf.StringValue id = 1;
}

// Response object for the GetRSLForDxLReconciledTransactionV1 endpoint
message GetRSLForDxLReconciledTransactionV1Response {
  // transaction fetched by the service by id
  ReconciledTransaction transaction = 1;
}

// Enum for reference ID type
enum ReferenceIdType {
  // Unspecified reference id type
  REFERENCE_ID_TYPE_UNSPECIFIED = 0;
  // Dasher ID
  REFERENCE_ID_TYPE_DASHER_ID = 1;
  // Delivery ID
  REFERENCE_ID_TYPE_DELIVERY_ID = 2;
  // Payout ID
  REFERENCE_ID_TYPE_PAYOUT_ID = 3;
}

// Request object for the GetRSLForDxLReconciledTransactionsByIdAndReferenceIdTypeV1 endpoint
message GetRSLForDxLReconciledTransactionsByReferenceIdAndReferenceIdTypeV1Request {
  // reference id of the requested transactions
  google.protobuf.StringValue reference_id = 1;

  // reference id type of the requested transactions
  ReferenceIdType reference_id_type = 2;
}

// Response object for the GetRSLForDxLReconciledTransactionsByIdAndReferenceIdTypeV1 endpoint
message GetRSLForDxLReconciledTransactionsByReferenceIdAndReferenceIdTypeV1Response {
  // transactions fetched by the service by reference id and reference id type
  repeated ReconciledTransaction transactions = 1;
}

// ===========================
// 5. MxL messages
// ===========================

// Lowest level of reconciliation (MxL)
message MxLReconciledTransaction {
  // ID of the reconciled transaction
  google.protobuf.StringValue id = 1;

  // RSL JE ID of the reconciled transaction
  google.protobuf.StringValue rsl_je_id = 2;

  // RSL reference ID of the reconciled transaction
  google.protobuf.StringValue rsl_reference_id = 3;

  // RSL reference ID type of the reconciled transaction
  google.protobuf.StringValue rsl_reference_id_type = 4;

  // RSL currency of the reconciled transaction
  google.protobuf.StringValue rsl_currency = 5;

  // RSL amount of the reconciled transaction
  google.protobuf.Int32Value rsl_amount = 6;

  // RSL net amount of the reconciled transaction
  google.protobuf.Int32Value rsl_net_amount = 7;

  // RSL COA ID of the reconciled transaction
  google.protobuf.StringValue rsl_coa_id = 8;

  // Max booking time of the reconciled transaction
  google.protobuf.Timestamp max_booking_time = 9;

  // Journal details of the reconciled transaction when rollup was necessary to reconcile
  google.protobuf.StringValue journal_details = 10;

  // MxL ID of the reconciled transaction
  google.protobuf.StringValue mxl_id = 11;

  // MxL store ID of the reconciled transaction
  google.protobuf.StringValue mxl_store_id = 12;

  // MxL ledger of the reconciled transaction
  google.protobuf.StringValue mxl_ledger = 13;

  // MxL created at of the reconciled transaction
  google.protobuf.StringValue mxl_created_at = 14;

  // MxL transfer ID of the reconciled transaction
  google.protobuf.StringValue mxl_transfer_id = 15;

  // MxL transfer method of the reconciled transaction
  google.protobuf.StringValue mxl_transfer_method = 16;

  // MxL status of transfer
  google.protobuf.StringValue mxl_transfer_status = 17;

  // MxL Stripe Account ID
  google.protobuf.StringValue mxl_stripe_account_id = 18;

  // MxL payment account ID of the reconciled transaction
  google.protobuf.StringValue mxl_payment_account_id = 19;

  // MxL target type of the transaction
  google.protobuf.StringValue mxl_transaction_target_type = 20;

  // MxL delivery ID of the transaction
  google.protobuf.StringValue mxl_transaction_delivery_id = 21;

  // MxL fulfillment type of the transaction
  google.protobuf.StringValue mxl_transaction_fulfillment_type = 22;

  // MxL amount of the reconciled transaction (can be from different types of amounts in MxL, check mxl_amount_type)
  google.protobuf.Int32Value mxl_amount = 23;

  // MxL amount field which was used to fill the mxl_amount_type
  google.protobuf.StringValue mxl_amount_type = 24;

  // MxL currency of the reconciled transaction
  google.protobuf.StringValue mxl_currency = 25;

  // MxL JE ID of the reconciled transaction
  google.protobuf.StringValue mxl_je_id = 26;

  // MxL Audience
  google.protobuf.StringValue mxl_audience = 27;

  // Denotes whether MxL entry is P&L (Profit & Loss)
  google.protobuf.StringValue mxl_is_pl_transaction = 28;

  // Denotes whether MxL entry has been cancelled
  google.protobuf.StringValue mxl_is_cancelled_transaction = 29;

  // RSL MxL amount diff of the reconciled transaction
  google.protobuf.StringValue rsl_mxl_amount_diff = 30;

  // RSL MxL date diff of the reconciled transaction
  google.protobuf.Int32Value rsl_mxl_date_diff = 31;

  // Category of the reconciled transaction
  google.protobuf.StringValue category = 32;

  // Sub category of the reconciled transaction
  google.protobuf.StringValue sub_category = 33;

  // Category final of the reconciled transaction (coalesce sub_category, category)
  google.protobuf.StringValue category_final = 34;

  // Updated at of the reconciled transaction
  google.protobuf.Timestamp updated_at = 35;

  // Booking time final of the reconciled transaction
  google.protobuf.Timestamp booking_time_final = 36;

  // Currency final of the reconciled transaction
  google.protobuf.StringValue currency_final = 37;

  // JE ID final of the reconciled transaction
  google.protobuf.StringValue je_id_final = 38;
}

// Request to get balance view data of reconciliation between rsl and mxl
message GetMxLReconBalanceViewV1Request {
  // (Optional) The "as of" date for the Balance.  Default to yesterday's date (last recon date)
  google.protobuf.Timestamp date = 1 [(doordash.api.client.optional) = true];
}

// Response of balance view data of reconciliation between rsl and mxl
message GetMxLReconBalanceViewV1Response {
  // Represents each row of balance view, with category_final, je_id and recon groups for each currency
  message Row {
    // Category final of all the transactions in the aggregation
    google.protobuf.StringValue category_final = 1;

    // je_id of the row
    google.protobuf.StringValue je_id = 2;

    // Map of currency to recon group.
    // For  view, we're pivoting the data where currency is shown as columns
    map<string, ReconGroup> currency_map = 3;
  }

  // Month object of the response in balance view
  message Month {
    // Row data for the specific month
    repeated Row rows = 1;
  }

  // asOfDate from the request
  google.protobuf.Timestamp as_of_date = 1;

  // Map of each month to its data
  map<string, Month> data = 2;
}

// Request to get activity view data of the reconciliation
message GetMxLReconActivityViewV1Request {
  // (Optional) Filter transactions with booking times starting from...; Defaults to yesterday's date
  google.protobuf.Timestamp start_date = 1 [(doordash.api.client.optional) = true];

  // (Optional) Filter transactions with booking times ending on...; Defaults to yesterday's date less (-) default max date range (eg. 1 week)
  // Validate max date range in service and UI based on product req
  google.protobuf.Timestamp end_date = 2 [(doordash.api.client.optional) = true];
}

// Response of the activity view data of the reconciliation
message GetMxLReconActivityViewV1Response {
  // Represents each row of activity view, with category_final, je_id, currency and recon groups for each date
  message ActivityRow {
    // Category final of all the transactions in the aggregation
    google.protobuf.StringValue category_final = 2;

    // Currency of all the transactions in the aggregation
    google.protobuf.StringValue currency = 3;

    // JE ID of all the transactions in the aggregation
    google.protobuf.StringValue je_id = 4;

    // Map of booking date string to recon group. (eg. 06/01/2024 -> ReconGroup, 06/02/2024 -> ReconGroup)
    map<string, ReconGroup> date_map = 5;
  }

  // data of transactions for the requested date range
  repeated ActivityRow data = 1;
}

// Request of message to get samples for reconciliation
message GetMxLReconSampleV1Request {
  // Optional
  google.protobuf.Timestamp date = 1 [(doordash.api.client.optional) = true];

  // Optional
  google.protobuf.StringValue category_final = 2;

  // Optional
  google.protobuf.StringValue currency = 3;

  // Optional
  google.protobuf.StringValue je_id = 4;
}

// Response of samples for reconciliation
message GetMxLReconSampleV1Response {
  // sample of reconciled transaction
  repeated MxLReconciledTransaction sample = 1;
}

// Request object for the GetRSLForMxLReconciledTransactionV1 endpoint
message GetMxLReconReconciledTransactionV1Request {
  // id of the requested transaction
  google.protobuf.StringValue id = 1;
}

// Response object for the GetRSLForMxLReconciledTransactionV1 endpoint
message GetMxLReconReconciledTransactionV1Response {
  // transaction fetched by the service by id
  MxLReconciledTransaction transaction = 1;
}
