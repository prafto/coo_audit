syntax = "proto3";
package experience_reliability_service.search.v1;

import "common/service_client_config.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/struct.proto";

option java_multiple_files = true;
option java_generic_services = true;

option java_package = "com.doordash.ers.search";

/** Contains RPC methods for searching for data.
 * Designed to be used by Dispatch.
 */
service SearchService {
    // Search for stores by store-specific fields such as store name.
    rpc SearchStores(SearchStoresRequest) returns (SearchStoresResponse);
    // Search for businesses by business-specific fields such as business name
    rpc SearchBusinesses(SearchBusinessesRequest) returns (SearchBusinessesResponse);
}

/** At least one of `query` and `page_token` is required.
 */
message SearchStoresRequest {
    // (optional) A string query to search for. Results are matched on store_name and store_id.
    google.protobuf.StringValue query = 1;
    // (optional) The number of results to return per page.
    google.protobuf.Int32Value page_size = 2;
    // (optional) The `next_page_token` field returned from a previous search request.
    // This is used to paginate when results have multiple pages.
    // If `query` is passed as well, the `query` must match the query used to generate the `page_token`.
    google.protobuf.StringValue page_token = 3;
}

/** Response for SearchStores
 */
message SearchStoresResponse {
    // The store_ids of the search results.
    repeated google.protobuf.Int64Value store_ids = 1;
    // (optional) This string can be passed in SearchStoresRequest to get the next page for this search.
    google.protobuf.StringValue next_page_token = 2;

    /* PageToken is used to store information for pagination.
     * The PageToken protobuf is never used directly by the API. Instead, PageToken is base64 encoded and
     * included in the response as a string. PageToken should be used as an opaque string - the client
     * does not need to know how to decode or encode it. We use a protobuf so that it's easier to maintain
     * backwards compatibility on the server if implementation details change.
     */
    message PageToken {
        // The query passed to the original search
        google.protobuf.StringValue query = 1;
        // The offset to pass to MDS
        google.protobuf.Int32Value offset = 2;
    }
}

/* Request for SearchBusinesses
 *
 * At least one of `query` and `page_token` is required.
 */
message SearchBusinessesRequest {
    // (optional) A string query to search for. Results are matched on store_name and business_id.
    google.protobuf.StringValue query = 1;
    // (optional) The maximum number of results to return.
    google.protobuf.Int32Value page_size = 2;
    // (optional) The `next_page_token` field returned by a previous search.
    // This is used to paginate when results have multiple pages.
    // If `query` is provided, the `query` must match the query used to generate the page token.
    google.protobuf.StringValue page_token = 3;
}

// Response for SearchBusinesses
message SearchBusinessesResponse {
    // The search results - a list of business ids
    repeated google.protobuf.Int64Value business_ids = 1;
    // (optional) An opaque base64 encoded string which can be passed to SearchBusinesses
    // to get the next page of results.
    google.protobuf.StringValue next_page_token = 2;
}