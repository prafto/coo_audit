syntax = "proto3";

package doordash.merchant_analytics.service.v1;

import "cart/cart_service.proto";
import "common/common.proto";
import "common/marketplace_purchase.proto";
import "common/money.proto";
import "common/order.proto";
import "drive_protobuf/delivery_verification.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "merchant_analytics_service/common.proto";
import "merchant_analytics_service/store_operations_quality.proto";
import "teammate_experience_service/mx_support.proto";

option go_package = "merchant_analytics";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.merchant_analytics.v1";

// service for orders history of a store;
service StoreOrderHistoryService {
  // orders summary for a store in given date range
  rpc GetOrdersSummary(GetOrdersSummaryRequest) returns (GetOrdersSummaryResponse);
  // orders history for a store in given date range
  rpc GetOrdersHistory(GetOrdersHistoryRequest) returns (GetOrdersHistoryResponse);
  // orders details for a delivery uuid
  rpc GetOrderDetails(GetOrderDetailsRequest) returns (GetOrderDetailsResponse);
  // lightweight order details that only includes frequently changing fields for live orders
  rpc GetLiveOrderDetails(GetLiveOrderDetailsRequest) returns (GetLiveOrderDetailsResponse);
  // order details list
  rpc GetOrders(GetOrdersRequest) returns (GetOrdersResponse);
}

// request for GetOrdersSummary
message GetOrdersSummaryRequest {
  // store_id
  google.protobuf.Int64Value store_id = 1;
  // date range filter
  DateRange date_range = 2;
  // segment filters to slice for different use cases
  repeated SegmentFilter filters = 3;
  // additional search criteria
  SearchCriteria search_criteria = 4;

  // content for additional search criteria
  message SearchCriteria {
    // below is used for filtering the orders with cart.paymentMethodId contained in this list
    repeated cart_service.v1.OrderCartPaymentMethodId payment_method_ids = 1;
  }
}

// response for GetOrdersSummary
message GetOrdersSummaryResponse {
  // total number of orders in the summary
  google.protobuf.Int32Value count = 1;
  // sum of subtotal for all orders
  money.MonetaryFields subtotal = 2;
  // sum of tax for all orders
  money.MonetaryFields tax = 3;
  // sum of commission for all orders
  money.MonetaryFields commission = 4;
  // sum of error charges for all orders
  money.MonetaryFields error_charge = 5;
  // sum of different types of fees for all orders
  money.MonetaryFields fees = 6;
  // estimated payout for all orders in the summary
  money.MonetaryFields estimated_payout = 7;
  // tax on commission for all orders in the summary
  money.MonetaryFields commission_tax = 8;
  // staff tips for all orders in the summary
  money.MonetaryFields staff_tips = 9;
  // ad and promo store payment type amount
  repeated AdsPromoStoreTotalPaymentByType ads_promo_store_payments = 10;
  // sum of store refunds for all orders
  money.MonetaryFields store_refunds = 11;
  // total fees tax
  money.MonetaryFields fees_tax = 12;
  // Diff amount between estimated payout and the sum of other payout components
  money.MonetaryFields other = 13;
}

// ads and promo will do store payment to MFS, this message contains the charge amount and payment type
message AdsPromoStoreTotalPaymentByType {
  // ads and promo store payment type
  AdsPromoStorePaymentType payment_type = 1;
  // sum of payment amount (can be debit or credit) for a single payment type
  money.MonetaryFields total_amount = 2;
}

// ads and promo store payment type
enum AdsPromoStorePaymentType {
  // Unspecified
  ADS_PROMO_STORE_PAYMENT_TYPE_UNSPECIFIED = 0;
  // promotion free trial payment type
  ADS_PROMO_STORE_PAYMENT_TYPE_FREE_TRIAL_PROMO = 1;
  // ads charge store payment type
  ADS_PROMO_STORE_PAYMENT_TYPE_ADS_CHARGE = 2;
  // ad free trial payment type
  ADS_PROMO_STORE_PAYMENT_TYPE_FREE_TRIAL_AD = 3;
}

// request for GetOrdersHistory
message GetOrdersHistoryRequest {
  // store_id
  google.protobuf.Int64Value store_id = 1;
  // date range filter
  DateRange date_range = 2;
  // segment filters to slice for different use cases
  repeated SegmentFilter filters = 3;
  // offset for fetching orders on the current page
  google.protobuf.Int32Value offset = 4;
  // limit - number of orders to be fetched per page
  google.protobuf.Int32Value limit = 5;
}

// response for GetOrdersHistory
message GetOrdersHistoryResponse {
  // list of order detail
  repeated OrderDetail order_details = 1;
  // total_num_of_orders
  google.protobuf.Int32Value total_num_of_orders = 2;
}

// request for GetOrdersService
message GetOrdersRequest {
  // Search term for the request
  google.protobuf.StringValue search_term = 1;
  // DEPRECATED. Please use QueryParameters.
  repeated google.protobuf.Int64Value store_ids = 3 [deprecated = true];
  // DEPRECATED. Please use QueryParameters.
  google.protobuf.Int64Value business_id = 4 [deprecated = true];
  // type of order
  GetOrdersType type = 5;
  // response limit
  google.protobuf.Int64Value limit = 6;
  // response offset
  google.protobuf.Int64Value offset = 7;
  // DEPRECATED. Please use QueryParameters
  DateRange date_range = 8 [deprecated = true];
  // order status filter
  repeated order.OrderStatus statuses = 9;
  // list of experiences
  repeated string experiences = 10;
  // Id filters. Business group ID is not supported.
  QueryParameters query_parameters = 11;
  // order sub status filter
  repeated OrderSubStatus sub_statuses = 12;

  reserved 2;
}

// response for GetOrdersService
message GetOrdersResponse {
  // list of orders
  repeated GetOrder orders = 1;
  // Total count of orders disregarding limit and offset.
  google.protobuf.Int64Value total_orders = 2;
}

// details for an order
message OrderDetail {
  // timestamps for dasher pickup
  message PickupDetails {
    // pickup window range
    PickupWindow pickup_window = 1;
  }

  // dasher pickup window
  message PickupWindow {
    // window start time
    google.protobuf.Timestamp start_time = 1;
    // window end time
    google.protobuf.Timestamp end_time = 2;
  }

  // delivery_uuid
  google.protobuf.StringValue delivery_uuid = 1;
  // subtotal
  money.MonetaryFields subtotal = 2;
  // tax on subtotal
  money.MonetaryFields subtotal_tax = 3;
  // commission
  money.MonetaryFields commission = 4;
  // summation of all error charges for this order
  money.MonetaryFields error_charge = 5;
  // total fees
  money.MonetaryFields total_fees = 6;
  // associated estimated payout
  money.MonetaryFields net_payout = 7;
  // status of the order
  OrderStatus order_status = 8;
  // customer details
  Customer customer = 9;
  // dasher details
  Dasher dasher = 10;
  // order date
  google.protobuf.Timestamp order_date = 11;
  // staff tips - this can be adjusted
  money.MonetaryFields staff_tips = 12;
  // tax on commission
  money.MonetaryFields commission_tax = 13;
  // was associated delivery rated by merchant
  bool is_delivery_rated_by_merchant = 14;
  // fee breakdown
  repeated FeesBreakdown fees_breakdowns = 15;
  // commission rate
  google.protobuf.DoubleValue commission_rate = 16;
  // fulfillment type
  google.protobuf.StringValue fulfillment_type = 17;
  // is subtotal tax is remitted by DD to state
  bool is_subtotal_tax_withheld = 18;
  // tax on commission
  money.MonetaryFields merchant_fleet_tip = 19;
  // commission type
  google.protobuf.StringValue commission_type = 20;
  // associated payout transactions
  repeated Transaction transactions = 21;
  // quoted_delivery_time
  google.protobuf.Timestamp quoted_delivery_time = 22;
  // actual_delivery_time
  google.protobuf.Timestamp actual_delivery_time = 23;
  // pick up location
  PickupLocation pickup_location = 24;
  // associated errors
  repeated Error errors = 25;
  // orders
  repeated Order orders = 27;
  // estimated_pickup_time
  google.protobuf.Timestamp estimated_pickup_time = 28;
  // merchant dasher rating
  MerchantDasherRating merchant_dasher_rating = 29;
  // store related fields
  StoreDetails store = 30;
  // pre order staff tips - immutable
  money.MonetaryFields pre_order_staff_tips = 31;
  // tax_rate is a decimal saved as a string. Range: [0, 1].
  google.protobuf.StringValue tax_rate = 32;
  // consumer order experience
  common.Experience order_experience = 33;
  // aggregated total fees charged for storefront orders
  money.MonetaryFields storefront_fees = 34;
  // promotion title
  google.protobuf.StringValue promotion_title = 35;
  // net subtotal after the subtotal discount
  money.MonetaryFields net_subtotal = 36;
  // subtotal amount for tax calculation
  money.MonetaryFields subtotal_for_tax = 37;
  // funding source
  money.Entity.EntityType subtotal_discount_funding_source = 38;
  // is_marketplace_facilitator = is_mpf_state && store_partner && direct_deposit
  google.protobuf.BoolValue is_marketplace_facilitator = 39;
  // total store refunds paid to the merchant associated with this delivery
  money.MonetaryFields store_refunds = 40;
  // is mpf state
  google.protobuf.BoolValue is_mpf_state = 41;
  // charges on alcohol items to mx, commission will be charges on non-alcohol items
  money.MonetaryFields alcohol_flat_fee = 42;
  // tax based on alcohol flat fee
  money.MonetaryFields alcohol_flat_fee_tax = 43;
  // aggregated tax amount, e.g. subtotal tax + alcohol flat fee tax
  money.MonetaryFields total_tax = 44;
  // details for live order tracking
  LiveOrderDetails live_order_details = 45;
  // when a delivery reached a terminal state (delivered, cancelled, abandoned, etc)
  google.protobuf.Timestamp completed_time = 46;
  // ID used for merchants to reference
  google.protobuf.StringValue order_id = 47;
  // post tip paid by customer to dasher
  money.MonetaryFields customer_post_tip_for_dasher = 48;
  // total orders in delivery
  google.protobuf.Int32Value total_order_count = 49;
  // when order was picked up
  google.protobuf.Timestamp actual_pickup_time = 50;
  // pickup address information
  AddressDetails pickup_address = 51;
  // dropoff address information
  DropoffDetails dropoff_details = 52;
  // ads and promo payment breakdown
  repeated AdsPromoStorePaymentBreakdown ads_promo_store_payment_breakdowns = 53;
  // delivery fee (for drive)
  money.MonetaryFields merchant_delivery_fee = 54;
  // tip for the dasher
  money.MonetaryFields customer_pre_tip_for_dasher = 55;
  // status of dasher
  DasherStatus dasher_status = 56;
  // alcohol subtotal, mainly used for item level
  money.MonetaryFields alcohol_subtotal = 58;
  // alcohol subtotal tax, mainly used for item level
  money.MonetaryFields alcohol_subtotal_tax = 59;

  reserved 57;
  // loyalty reward discount
  money.MonetaryFields loyalty_reward_discount = 60;
  // drive order's doordash id (populated for drive orders only)
  google.protobuf.StringValue doordash_drive_id = 61;
  // store order confirmation time
  google.protobuf.Timestamp store_order_confirmed_time = 62;
  // external gift card credit
  money.MonetaryFields external_gift_card_credit = 63;
  // drive details
  DriveOrderDetails drive_details = 64;
  // Ad campaigns that drove the order
  repeated MarketingCampaign ad_campaigns = 65;
  // Promotion campaigns that drove the order
  repeated MarketingCampaign promo_campaigns = 66;
  // Order-Level Refundable Error Charges associated with this order (ex. Wrong Order Delivered)
  repeated ErrorCharge error_charges = 67;
  // Tax Breakdown
  repeated TaxBreakdown tax_breakdown = 68;
  // order cart id
  google.protobuf.StringValue order_cart_id = 69;
  // total fees tax
  money.MonetaryFields fees_tax = 70;
  // snap ebt discount
  money.MonetaryFields snap_ebt_discount = 71;
  //summation of all item-level error charges for this order without including tax
  money.MonetaryFields error_charge_subtotal = 72;
  //tax on error_charge_subtotal
  money.MonetaryFields error_charge_subtotal_tax = 73;

  reserved 74;
  // Fees and taxes groups charged or paid to Mx
  FeeAndTaxGroups fee_and_tax_groups = 75;
  // financial details
  FinancialDetails financial_details = 76;
  // dasher travel records
  DasherTravelRecords dasher_travel_records = 77;
  // provides details around this delivery's error charge dispute eligibility and dispute status
  ErrorChargeDetails error_charge_details = 78;
  // dasher assignment history
  DasherAssignmentHistory dasher_assignment_history = 79;
  // dasher pickup details
  PickupDetails pickup_details = 80;
  // Details related to dropoff verification
  DropoffVerificationDetails dropoff_verification_details = 81;
  // Order creation time
  google.protobuf.Timestamp created_at = 82;
  // Details of promotion discount
  message DiscountDetails {
    // Entity of who offered the discount
    enum Entity {
      // unspecified entity
      ENTITY_UNSPECIFIED = 0;
      // doordash
      ENTITY_DOORDASH = 1;
      // merchant
      ENTITY_MERCHANT = 2;
      // third part i.e pepsi
      ENTITY_THIRD_PARTY = 3;
    }
    // Discount for the given order
    message Discount {
      // Entity of who offered the discount
      Entity entity = 1;
      // Discount amount for the given order
      money.MonetaryFields discount_amount = 2;
    }
    // Discount for the given order
    repeated Discount discount = 1;
  }
  // Discount details for the given order
  DiscountDetails discount_details = 83;
  // Subtotal exclude the promo redemption fee/ads fee.
  money.MonetaryFields order_net_total = 84;
  // Note to all those adding more fields to this proto message:
  // - Place any new fields above this comment and continue reading some new guidelines below
  // - Please group your new fields into existing or new objects where possible (they can be nested
  //   within the message if that makes more sense for your use-case)
  //   This response is getting extremely large and is on its way to 100+ new fields so in order to
  //   help us in refactoring this in the future, encourage smaller mapper methods and its unit tests,
  //   and overall readability of this endpoint response, please group them
  //   e.g. finance-related fields should all go under the FinancialDetails financial_details object
  //   drive-related fields will go under DriveDetails drive_details, etc.
  // - Please reach out to the owning team if you need help with this.
}

// Details related to dropoff verification
message DropoffVerificationDetails {
  // Details related to pincode verification at dropoff
  PinCodeVerificationDetails pin_code_verification_details = 1;
}

// Details related to pincode verification at dropoff
message PinCodeVerificationDetails {
  // 4 digit number that needs to be given by Cx to Dx to verify Cx identity
  string pin_code_value = 1;
}

// Object containing information around Mx Error Charges (MxA) Disputes
message ErrorChargeDetails {
  // Provides details around an delivery's error charge dispute eligibility and dispute status
  DisputeEligibilityStatus dispute_eligibility_status = 1;
  // Tracks the overall delivery's self-serve error charge refund status
  DisputeStatus dispute_status = 2;

  // Provides details around an delivery's error charge dispute eligibility
  message DisputeEligibilityStatus {
    // Surfaces whether or not this delivery is eligible for Mx error charge dispute based on our internal policies
    google.protobuf.BoolValue is_eligible_for_dispute = 1;
    // If this delivery is ineligible for error charge dispute, this would return the specific reason for ineligibility
    teammate_experience_service.api.v1.IneligibleForDisputeReason ineligible_for_dispute_reason = 2;
    // If this delivery is disputable, this indicates the final day the delivery can be disputed by the Mx
    google.protobuf.Timestamp last_day_to_dispute = 3;
  }

  // Provides details around an delivery's error charge dispute/refund status
  message DisputeStatus {
    // Tracks the overall delivery's self-serve error charge refund status (disputes can occur on order-level or item-level)
    ErrorChargeRefundStatus refund_status = 1;
  }
}

// Fees group
message FeeGroup {
  // Name of the group
  string name = 1;
  // Total amount of the fees in the group
  money.MonetaryFields total_amount = 2;
  // Breakdowns of the fees
  repeated FeesBreakdown fees_breakdowns = 3;
}

// Fee tax group
message TaxGroup {
  // Name of the group
  string name = 1;
  // Total amount of the fee taxes in the group
  money.MonetaryFields total_amount = 2;
  // Breakdowns of the fee taxes
  repeated TaxBreakdown tax_breakdowns = 3;
}

// Fee and Fee tax groups
message FeeAndTaxGroups {
  // Fee groups of an order
  repeated FeeGroup fee_groups = 1;
  // Fee tax groups of an order
  repeated TaxGroup tax_groups = 2;
}

// Financial details
message FinancialDetails {
  // voice order fee
  money.MonetaryFields voice_order_fee = 1;
  // payment processing fee
  money.MonetaryFields payment_processing_fee = 2;
  // commission_order_type is to differentiate DP, Classic, TasteOfDashPass orders based on commission rate
  // commission_type in OrderDetail is more of differentiate order delivery method, eg. contactless, pickup, etc
  money.CommissionOrderType commission_order_type = 3;
  // Cx payment method id used to pay for the order.
  // Uses OrderCartPaymentMethodId enum value converted to common.PaymentMethod on MAS side
  // Provided by GetOrderDetailByDeliveryUuid call in order-service
  common.PaymentMethod consumer_payment_method = 4;
  // Diff amount between estimated payout and the sum of other payout components
  money.MonetaryFields other = 5;
  // list of price modifications for this order
  repeated PriceModification price_modifications = 6;
}

// price modifications for an order
message PriceModification {
  // PriceModification type enum
  enum PriceModificationType {
    // No type
    PRICE_MODIFICATION_TYPE_UNSPECIFIED = 0;
    // Discount
    PRICE_MODIFICATION_TYPE_DISCOUNT = 1;
    // Surcharge
    PRICE_MODIFICATION_TYPE_SURCHARGE = 2;
  }
  // type of modification discount/surcharge
  PriceModificationType type = 1;
  // the discount/surcharge amount
  money.MonetaryFields amount = 2;
  // name of the modification (eg:- 5$ off on all orders)
  google.protobuf.StringValue display_name = 3;
}

// Order details specific to drive
message DriveOrderDetails {
  // payment method for drive orders.
  common.PaymentMethod payment_method = 1;
  // small_order_fulfillment, core (LOF), batch, or on_call.
  google.protobuf.StringValue order_type = 2;
  // all refund transactions for drive.
  repeated DriveRefund refunds = 3;
  // Drive order items
  repeated DriveOrderItem items = 4;
}

// Drive order item info
message DriveOrderItem {
  // item internal id
  google.protobuf.Int64Value id = 1;
  // name of item
  google.protobuf.StringValue name = 2;
  // description of item
  google.protobuf.StringValue description = 3;
  // Item qty
  google.protobuf.Int32Value quantity = 4;
}

// Refund details for drive orders.
message DriveRefund {
  // Primary reason.
  string reason_code = 1;
  // Secondary reason if there are any.
  google.protobuf.StringValue reason_comments_code = 2;
  // When the refund was created.
  google.protobuf.Timestamp refunded_at = 3;
  // How much of tip refunded.
  money.MonetaryFields tip_refund = 4;
  // How much of order value refunded.
  money.MonetaryFields order_value_refund = 5;
  // How much of delivery fee refunded.
  money.MonetaryFields delivery_fee_refund = 6;
  // delivery fee tax refund
  money.MonetaryFields delivery_fee_tax_refund = 7;
}

// Status of a dasher for an order
enum DasherStatus {
  // No status
  DASHER_STATUS_UNSPECIFIED = 0;
  // Dasher is blocked (takes precedence over preferred)
  DASHER_STATUS_BLOCKED = 1;
  // Dasher is preferred
  DASHER_STATUS_PREFERRED = 2;
  // Dasher is upvoted
  DASHER_STATUS_UPVOTE = 3;
  // Dasher is downvoted
  DASHER_STATUS_DOWNVOTE = 4;
}

// ads and promos related store payment breakdown
message AdsPromoStorePaymentBreakdown {
  // Store Payment id associated with the Store Payment
  google.protobuf.StringValue store_payment_id = 1;
  // payment amount
  money.MonetaryFields amount = 2;
  // ads and promo store payment type
  AdsPromoStorePaymentType payment_type = 3;
  // why the store payment was issued
  google.protobuf.StringValue reason_name = 4;
  // additional description for the store payment
  google.protobuf.StringValue description = 5;
  // payment creation time
  google.protobuf.Timestamp created_at = 6;
}

// Campaign information related to ads/promos applied to an order
message MarketingCampaign {
  // Id of camapign that drove the order
  google.protobuf.StringValue campaign_id = 1;
  // Name of the campaign set up by merchant
  google.protobuf.StringValue campaign_name = 2;
  // This is the template_id of the campaign and specifies the type of campaign such as sponsored listing/product (sl/sp)
  google.protobuf.StringValue campaign_type = 3;
}

// Grouping of details specific to a dropoff
message DropoffDetails {
  // address information
  AddressDetails address = 1;
  // instructions for dropoff
  google.protobuf.StringValue dasher_instructions = 2;
  // description of dropoff
  google.protobuf.StringValue description_display = 3;
  // image url attached with dropoff details (eg. delivery verification picture)
  google.protobuf.StringValue image_url = 4;
  // list of verification details for drive signature/dropoff details
  repeated com.doordash.drive.api.delivery_verfication.v1.VerificationDetail verification_details = 5;
}

// customer obj
message Customer {
  // first name
  google.protobuf.StringValue first_name = 1;
  // last name
  google.protobuf.StringValue last_name = 2;
  // is the consumer a dash pass subscriber
  bool is_dash_pass_subscriber = 3;
  // id
  google.protobuf.StringValue id = 4;
  // consumer id
  google.protobuf.StringValue consumer_id = 5;
  // real consumer email address for storefront and drive consumers
  google.protobuf.StringValue catering_contact_email = 6;
  // customer business name for drive orders
  google.protobuf.StringValue business_name = 8;
  // phone number for drive consumers
  common.PhoneNumberComponents phone_number_components = 9;

  reserved 7;
}

// dasher obj
message Dasher {
  // first name
  google.protobuf.StringValue first_name = 1;
  // last name
  google.protobuf.StringValue last_name = 2;
  // id
  google.protobuf.StringValue id = 3;
  // feedback
  DasherFeedback feedback = 4;
  // travel records
  DasherTravelRecords dasher_travel_records = 5;
}

// status of the order
enum OrderStatus {
  // unknown
  ORDER_STATUS_UNSPECIFIED = 0;
  // delivered
  ORDER_STATUS_DELIVERED = 1;
  // cancelled
  ORDER_STATUS_CANCELLED = 2;
  // picked up
  ORDER_STATUS_PICKED_UP = 3;
  // in progress
  ORDER_STATUS_IN_PROGRESS = 4;
  // served in store
  ORDER_STATUS_SERVED_IN_STORE = 5;
}

// breakdown of fees
message FeesBreakdown {
  // type of fee
  google.protobuf.StringValue type = 1;
  // monetary value of fee
  money.MonetaryFields value = 2;
}

// GetOrderDetailsRequest
message GetOrderDetailsRequest {
  // delivery uuid
  string delivery_uuid = 1;
  // store_id
  google.protobuf.Int64Value store_id = 2;
  // address id for the associated store
  google.protobuf.Int64Value address_id = 3;
}

// GetOrderDetailsResponse
message GetOrderDetailsResponse {
  // order detail
  OrderDetail order_detail = 1;
}

// Transaction
message Transaction {
  // id
  google.protobuf.Int64Value id = 1;
  // target id
  google.protobuf.Int64Value target_id = 2;
  // target type e.g. merchant_delivery
  google.protobuf.StringValue target_type = 3;
  // amount
  money.MonetaryFields amount = 4;
  // transfer id aka payout id
  google.protobuf.Int64Value transfer_id = 5;
}

// PickupLocation
message PickupLocation {
  // address
  google.protobuf.StringValue address = 1;
}

// Dispatch Error
message Error {
  // id
  google.protobuf.Int64Value id = 1;
  // store charge
  money.MonetaryFields store_charge = 2;
  // category
  google.protobuf.StringValue category = 3;
  // store refund
  money.MonetaryFields store_refund = 4;
  // store explanation
  google.protobuf.StringValue store_explanation = 5;
  // consumer loyalty reward refund
  money.MonetaryFields consumer_loyalty_reward_refund = 6;
  // consumer external gift card refund
  money.MonetaryFields consumer_external_gift_card_refund = 7;
  // consumer refund (does not include loyalty reward refund + gift card refund)
  money.MonetaryFields consumer_refund = 8;
}

// Order
message Order {
  // id
  google.protobuf.Int64Value id = 1;
  // order items
  repeated OrderItem order_items = 2;
  // customer associated with each order cart
  Customer customer = 3;
  // Order UUID associated with each order cart
  google.protobuf.StringValue order_uuid = 4;
}

// Order Item
message OrderItem {
  // id
  google.protobuf.Int64Value id = 1;
  // name
  google.protobuf.StringValue name = 2;
  // quantity
  google.protobuf.Int32Value quantity = 3;
  // unit price
  money.MonetaryFields unit_price = 4;
  // item_extras
  repeated ItemExtra item_extras = 5;
  // special_instructions
  google.protobuf.StringValue special_instructions = 6;
  // category
  google.protobuf.StringValue category = 7;
  // error charge associated with this orderItem
  ErrorCharge error_charge = 8;
  // merchant supplied id
  google.protobuf.StringValue merchant_supplied_id = 9;
  // menu item id
  string menu_item_id = 10;
  // purchase type, e.g. unit, measurement, unit-to-measurement
  common.marketplace_purchase.v1.PurchaseType purchase_type = 11;
  // fulfill quantities
  repeated common.QuantityInfo fulfill_quantity = 12;
  // purchase quantity
  common.QuantityInfo purchase_quantity = 13;
  // item purchase info, such as purchase type, unit purchase info
  common.marketplace_purchase.v1.ItemPurchaseInfo purchase_info = 14;
}

// Item Extra e.g. "Select Sauce"
message ItemExtra {
  // id
  google.protobuf.Int64Value id = 1;
  // name
  google.protobuf.StringValue name = 2;
  // title
  google.protobuf.StringValue title = 3;
  // options for item extra e.g. "Buffalo sauce", "Ranch Sauce" etc
  repeated ItemExtraOption options = 6;
}

// ItemExtraOption e.g. "Buffalo sauce", "Ranch Sauce" etc
message ItemExtraOption {
  // id
  google.protobuf.Int64Value id = 1;
  // name
  google.protobuf.StringValue name = 2;
  // price
  money.MonetaryFields price = 3;
  // quantity
  google.protobuf.Int32Value quantity = 4;
}

// merchant dasher rating
message MerchantDasherRating {
  // id
  string id = 1;
  // delivery id
  google.protobuf.Int64Value delivery_id = 2;
  // rating values: -1, 0, 1
  google.protobuf.Int64Value rating = 3;
  // reasons
  repeated MerchantDasherRatingReason reasons = 4;
  // comments
  google.protobuf.StringValue comments = 5;
  // dasher id
  google.protobuf.StringValue dasher_id = 6;

  // merchant dasher rating reason
  message MerchantDasherRatingReason {
    // id
    string id = 1;
    // reason name
    google.protobuf.StringValue name = 2;
    // description e.g. Dasher unprofessional
    google.protobuf.StringValue description = 3;
    // reason_type [POSITIVE, NEGATIVE]
    google.protobuf.StringValue reason_type = 4;
  }
}

// Store which fulfilled the order
message StoreDetails {
  // store id
  string id = 1;
  // store name
  google.protobuf.StringValue name = 2;
  // has fees tax for store country
  CountryDetails country = 3;
  // address
  AddressDetails address = 4;
  // market
  MarketDetails market = 5;
  // business id
  google.protobuf.StringValue business_id = 6;
}

// Address
message AddressDetails {
  // address id
  string id = 1;
  // formatted string for address
  google.protobuf.StringValue printable_address = 2;
  // location coordinates of the address
  common.Location location_point = 3;
  // address's subpremise e.g. apartment number or suite number
  google.protobuf.StringValue subpremise = 4;
}

// country details
message CountryDetails {
  // country id
  string id = 1;
  // has fees tax for country
  bool has_fees_tax = 2;
}

// Market
message MarketDetails {
  // address id
  string id = 1;
  // market name
  google.protobuf.StringValue name = 2;
  // country id
  string country_id = 3;
  // timezone
  google.protobuf.StringValue timezone = 4;
}

// Aggregated Error Charge information for this item (ex. “Missing” or “Incorrect”) or entire delivery (ex. “Wrong Order Delivered”) and contains info around specific order problems, store charges, and refund status if error charge is disputed by the Mx
message ErrorCharge {
  reserved 11, 12;
  reserved "consumer_explanations";
  // Summation of all error charges associated with this item
  money.MonetaryFields error_charge = 8;
  // Error charge refund status of this item (if error charge is disputed)
  ErrorChargeRefundStatus error_charge_refund_status = 9;
  // Aggregated C&R parent category of all problems impacting this item or order
  Category category = 10;
  // Captures any difference in the amount disputed vs. the total charged
  DisputeDifference dispute_difference = 13;
  // Summation of all error charge subtotal (typically the cost of the items/orders w/o tax or commission)
  money.MonetaryFields error_charge_subtotal = 14;
  // Summation of all error charges taxes on error charge subtotal (empty if tax is remitted)
  money.MonetaryFields error_charge_subtotal_tax = 15;
  // Breakdown of all delivery issues that resulted in error charges (ex. “Whole Item is Missing”); this maps to C&R’s Order Resolution “Problems”
  repeated Problem problems = 16;

  // An error charge “problem” refers to the specific reported issue/problem the item or order incurred as a result of a delivery or Mx error; this maps to C&R’s Order Resolution “Problems”
  message Problem {
    // C&R Policy category this error charge falls under (ex. "Missing", "Incorrect")
    Category category = 1;
    // Issue descriptions using Mx-friendly names (ex. "Whole Item is Missing", "Incorrect Quantity")
    doordash.merchant_analytics.service.v1.OrderErrorCategories issue_description = 2;
    // Consumer-provided photo evidence of the issue
    repeated ConsumerPhotoEvidence photo_evidence = 3;
    // Consumer-provided issue description of the issue
    ConsumerExplanation consumer_explanations = 4;
    // Error charge subtotal amount for this problem (typically the cost of the item/order w/o tax or commission)
    money.MonetaryFields error_charge_subtotal = 5;
    // Error charge subtotal tax amount for this problem (empty if tax is remitted)
    money.MonetaryFields error_charge_subtotal_tax = 6;
  }

  // Consumer-provided photo evidence; images deemed inappropriate are redacted
  message ConsumerPhotoEvidence {
    // Type of Photo (ex. photo of order vs. receipt)
    PhotoType photo_type = 1;
    // URL of the consumer-provided photo evidence
    string photo_url = 2;

    // Indicates the type of photo collected from the consumer in relation to the problem
    enum PhotoType {
      // Photo type was not specified or not applicable
      PHOTO_TYPE_UNSPECIFIED = 0;
      // Order-related photo as evidence of a problem (ex. Photos of food with quality issues)
      PHOTO_TYPE_ORDER = 1;
      // Receipt-related photo as evidence of a problem with the entire order (Ex. “Wrong Order Delivered” requires receipt evidence)
      PHOTO_TYPE_RECEIPT = 2;
    }
  }

  // Captures any difference in the amount disputed vs. the total charged
  message DisputeDifference {
    // Error Charge amount that was disputed by Mx
    money.MonetaryFields disputed_amount = 1;
    // Error Charge amount remaining that was undisputed by Mx
    money.MonetaryFields undisputed_amount = 2;
  }

  // C&R Policy category of an error charge; we use this to represent that category that can result in MxA error charge
  enum Category {
    // Unspecified error charge category
    CATEGORY_UNSPECIFIED = 0;
    // Missing (ex. missing_main_item or missing_side_item)
    CATEGORY_MISSING = 1;
    // Incorrect (ex. item_wrong_size, incorrect_ingredients, incorrect_item_received, etc.)
    CATEGORY_INCORRECT = 2;
    // Food Quality (ex. food_prepared_unsafely)
    CATEGORY_FOOD_QUALITY = 3;
    // Multiple (this error charge has multiple categories against it; ex. missing & food quality problems)
    CATEGORY_MULTIPLE = 4;
    // Wrong Order Delivered
    CATEGORY_WRONG_ORDER_DELIVERED = 5;
    // Never Delivered
    CATEGORY_NEVER_DELIVERED = 6;
  }

  // Contains information about the consumer explanation (reason for this error charge)
  message ConsumerExplanation {
    // Time this explanation was created
    google.protobuf.Timestamp created_at = 1;
    // Consumer-provided explanation for the error charge
    google.protobuf.StringValue explanation = 2;
  }
}

// Error Charge Refund Status of an order item that is being disputed
enum ErrorChargeRefundStatus {
  // Default refund status: used to signify that this order is not being disputed
  ERROR_CHARGE_REFUND_STATUS_UNSPECIFIED = 0;
  // 'Pending' status means the error charge was disputed, but not yet "paid-out" to the merchant
  ERROR_CHARGE_REFUND_STATUS_PENDING = 1;
  // 'Refunded' status means the error charge was disputed and was paid-out to the merchant (i.e. transaction completed)
  ERROR_CHARGE_REFUND_STATUS_REFUNDED = 2;
  // 'Partially Refunded' status means the error charge was refunded and additional error charges came in that are undisputed
  ERROR_CHARGE_REFUND_STATUS_PARTIALLY_REFUNDED = 3;
  // 'Partial Refund Pending' status means the error charge was disputed, but not yet "paid-out" to the merchant, and additional error charges come in that are undisputed
  ERROR_CHARGE_REFUND_STATUS_PARTIAL_REFUND_PENDING = 4;
}

// Order
message GetOrder {
  // Customer details
  message Consumer {
    // customer first name
    google.protobuf.StringValue first_name = 1;
    // customer first name
    google.protobuf.StringValue last_name = 2;
  }

  // Contains Cancellation Related Info
  message CancellationDetails {
    // cancellation notes if there's any
    google.protobuf.StringValue cancellation_notes = 1;
  }

  // Fulfillment details
  message FulfillmentDetails {
    // fulfillment type
    google.protobuf.StringValue fulfillment_type = 1;
    // schedule type - scheduled/asap
    google.protobuf.StringValue schedule_type = 2;
  }

  // Grouping of details specific to the order sub status
  message OrderSubStatusDetails {
    // order sub status enum
    OrderSubStatus value = 1;
    // localized and human readable order status e.g. "In the kitchen"
    google.protobuf.StringValue display = 2;
  }

  // timestamps for dasher pickup
  message PickupDetails {
    // pickup window range
    PickupWindow pickup_window = 1;
  }

  // dasher pickup window
  message PickupWindow {
    // window start time
    google.protobuf.Timestamp start_time = 1;
    // window end time
    google.protobuf.Timestamp end_time = 2;
  }

  // id
  string order_id = 1;
  // dd delivery uuid
  string delivery_uuid = 2;
  // pickup time
  google.protobuf.Timestamp pickup_time = 3;
  // delivery time
  google.protobuf.Timestamp delivery_time = 4;
  // customer details
  GetOrder.Consumer consumer = 5;
  // dasher details
  Dasher dasher = 6;
  // order value
  money.MonetaryFields order_value = 8;
  // localized and human readable order status
  google.protobuf.StringValue order_status_display = 9;
  // post tip
  money.MonetaryFields post_tip = 10;
  // drive order's doordash ID.
  google.protobuf.StringValue doordash_drive_id = 11;
  // user experience
  google.protobuf.StringValue experience = 12;
  // when order was completed.
  google.protobuf.Timestamp completed_time = 13;
  // order status enum
  google.protobuf.StringValue order_status_value = 14;
  // local timezone of order.
  google.protobuf.StringValue timezone = 15;
  // store id of order.
  google.protobuf.Int64Value store_id = 16;
  // store order confirmation time
  google.protobuf.Timestamp store_order_confirmed_time = 17;
  // cancellation details
  GetOrder.CancellationDetails cancellation_details = 18;
  // supply chain order info
  SupplyChainOrderInfo supply_chain_order_info = 19;
  // quoted_delivery_time
  google.protobuf.Timestamp quoted_delivery_time = 20;
  // error charge total adjustments
  ErrorChargeTotalAdjustments error_charge_total_adjustments = 21;
  // store name of order.
  google.protobuf.StringValue store_name = 22;
  // order sub status
  OrderSubStatusDetails order_sub_status = 23;
  // dasher pickup details
  PickupDetails pickup_details = 24;
  // order details
  FulfillmentDetails fulfillment_details = 25;
  reserved 7;
}

// Order substatuses that can better describe more about the order
enum OrderSubStatus {
  // Unknown type
  ORDER_SUB_STATUS_UNSPECIFIED = 0;
  // in the kitchen status
  ORDER_SUB_STATUS_IN_THE_KITCHEN = 1;
  // ready for pickup status
  ORDER_SUB_STATUS_READY_FOR_PICKUP = 2;
  // order is unconfirmed by mx
  ORDER_SUB_STATUS_UNCONFIRMED = 3;
  // order is out for delivery
  ORDER_SUB_STATUS_OUT_FOR_DELIVERY = 4;
}

// Type of order
enum GetOrdersType {
  // Unknown type
  GET_ORDERS_TYPE_UNSPECIFIED = 0;
  // Active order
  GET_ORDERS_TYPE_ACTIVE = 1;
  // Historical order
  GET_ORDERS_TYPE_HISTORY = 2;
  // Cancelled order
  GET_ORDERS_TYPE_SCHEDULED = 3;
}

// Request for getLiveOrderDetails
message GetLiveOrderDetailsRequest {
  // delivery uuid
  google.protobuf.StringValue delivery_uuid = 1;
}

// Response for getLiveOrderDetails
message GetLiveOrderDetailsResponse {
  // live order details
  LiveOrderDetails live_order_details = 1;
}

// Order information that changes frequently in an active order
message LiveOrderDetails {
  // Grouping of details specific to the order status
  message OrderStatusDetails {
    // order status enum
    google.protobuf.StringValue value = 1;
    // localized and human readable order status
    google.protobuf.StringValue display = 2;
    // localized and human readable description of the current status
    google.protobuf.StringValue description_display = 3;
  }

  // Timestamps that are more dynamically calculated (more real-time) for the order
  message DynamicETATimestamps {
    // dynamic ETA on when the order would be picked up
    google.protobuf.Timestamp dynamic_pickup_time = 1;
    // dynamic ETA on when the order would be dropped off
    google.protobuf.Timestamp dynamic_delivery_time = 2;
    // dynamic ETA on when the order would be picked up which takes into account mx prep time
    google.protobuf.Timestamp onsite_estimated_ready_time = 3;
  }
  // Grouping of details specific to the order sub status
  message OrderSubStatusDetails {
    // order sub status enum
    google.protobuf.StringValue value = 1;
    // localized and human readable order status e.g. "In the kitchen"
    google.protobuf.StringValue display = 2;
  }

  // location of dasher
  common.Location dasher_location_point = 1;
  // details about thr order status
  OrderStatusDetails order_status_details = 2;
  // dynamically changing timestamps for the order
  DynamicETATimestamps dynamic_eta_timestamps = 3;
  // to show tags on the UI and for fields like kitchen-status etc
  repeated OrderSubStatusDetails order_sub_statuses = 4;
}

// Tax Breakdown Imposition Type
enum Imposition {
  // unspecified
  IMPOSITION_UNSPECIFIED = 0;
  // gst, hst
  IMPOSITION_GST_HST = 1;
  // pst, rst, qst
  IMPOSITION_PST_RST_QST = 2;
}

// Tax Breakdown Tax Payer Type
enum TaxPayer {
  // unspecified
  TAX_PAYER_UNSPECIFIED = 0;
  // doordash pays tax
  TAX_PAYER_DD = 1;
  // merchant pays tax
  TAX_PAYER_MX = 2;
}

// Tax breakdown
message TaxBreakdown {
  // tax amount
  money.MonetaryFields amount = 1;
  // tax payer
  TaxPayer tax_payer = 2;
  // imposition type
  Imposition imposition = 3;
}

// Supply chain store order info
message SupplyChainOrderInfo {
  // whether this is a delayed payment supply chain order
  google.protobuf.BoolValue is_delayed_payment = 1;
  // payment due date for delayed payment order
  google.protobuf.Timestamp payment_due_date = 2;
  // payment timestamp for delayed payment order
  google.protobuf.Timestamp paid_at = 3;
  // scheduled payment error
  SupplyChainScheduledPaymentError scheduled_payment_error = 4;

  // supply chain order scheduled payment error
  message SupplyChainScheduledPaymentError {
    // payment error code
    google.protobuf.StringValue error_code = 1;
    // payment error message
    google.protobuf.StringValue error_message = 2;
  }
}

// Dasher travel time records, used to calculate whether dasher is late
message DasherTravelRecords {
  // dasher_at_store_time
  google.protobuf.Timestamp dasher_at_store_time = 1;
  // dasher_confirmed_at_store_time
  google.protobuf.Timestamp dasher_confirmed_at_store_time = 2;
  // unassigned time
  google.protobuf.Timestamp unassigned_time = 3;
}

// Contains Error Charge Total Adjustments
message ErrorChargeTotalAdjustments {
  // Sum of all store charges on this delivery
  money.MonetaryFields total_store_charge = 1;
  // Sum of all store refunds on this delivery
  money.MonetaryFields total_store_refund = 2;
}

// Dasher assignment history
message DasherAssignmentHistory {
  // list of assigned dashers
  repeated Dasher dasher = 1;
}

// dasher feedback from merchant
message DasherFeedback {
  // unassigned reason
  google.protobuf.StringValue unassigned_reason = 1;
  // feedback reasons
  repeated FeedbackReasonType feedback_reason = 2;
  // comments
  google.protobuf.StringValue comments = 3;
  // submit time
  google.protobuf.Timestamp submit_time = 4;
  // dasher status
  DasherStatus dasher_status = 5;
}

// dasher feedback reason types
enum FeedbackReasonType {
  // unspecified
  FEEDBACK_REASON_TYPE_UNSPECIFIED = 0;

  // <positive reasons>
  // equipped
  FEEDBACK_REASON_TYPE_EQUIPPED = 1;
  // on time
  FEEDBACK_REASON_TYPE_ON_TIME = 2;
  // patient respectful
  FEEDBACK_REASON_TYPE_PATIENT_RESPECTFUL = 3;
  // instructions followed
  FEEDBACK_REASON_TYPE_INSTRUCTIONS_FOLLOWED = 4;
  // great communication
  FEEDBACK_REASON_TYPE_GREAT_COMMUNICATION = 5;
  // checked items
  FEEDBACK_REASON_TYPE_CHECKED_ITEMS = 6;

  // <negative reasons> and block reasons
  // dasher unprofessional
  FEEDBACK_REASON_TYPE_DASHER_UNPROFESSIONAL = 7;
  // instructions not followed
  FEEDBACK_REASON_TYPE_INSTRUCTIONS_NOT_FOLLOWED = 8;
  // not equipped
  FEEDBACK_REASON_TYPE_NOT_EQUIPPED = 9;
  // stole order
  FEEDBACK_REASON_TYPE_STOLE_ORDER = 10;
  // dasher someone else
  FEEDBACK_REASON_TYPE_DASHER_SOMEONE_ELSE = 11;
  // mishandled order
  FEEDBACK_REASON_TYPE_MISHANDLED_ORDER = 12;
  // early or late for pickup
  FEEDBACK_REASON_TYPE_EARLY_LATE_FOR_PICKUP = 13;
  // dasher never arrived
  FEEDBACK_REASON_TYPE_DASHER_NEVER_ARRIVED = 14;
  // other
  FEEDBACK_REASON_TYPE_OTHER = 15;
  // harassed staff or customers
  FEEDBACK_REASON_TYPE_HARASSED_STAFF_OR_CUSTOMERS = 16;
  // inappropriate behavior
  FEEDBACK_REASON_TYPE_INAPPROPRIATE_BEHAVIOR = 17;
  // under the influence
  FEEDBACK_REASON_TYPE_UNDER_THE_INFLUENCE = 18;
}
