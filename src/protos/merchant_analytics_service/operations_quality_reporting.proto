syntax = "proto3";

package doordash.merchant_analytics.service.v1;

option java_multiple_files = true;
option java_generic_services = true;
option java_package = "com.doordash.rpc.merchant_analytics.v1";
option go_package = "merchant_analytics";

import "merchant_analytics_service/common.proto";
import "merchant_analytics_service/cancellation_reasons.proto";
import "merchant_analytics_service/store_operations_quality.proto";
import "merchant_analytics_service/customer_feedback_analytics.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "common/money.proto";

// Operations Quality Reporting Service
service OperationsQualityReportingService {
  // Get Cancellations Aggregate (basic stats + breakdown by category)
  rpc GetCancellationsAggregate (GetDataRequest) returns (GetCancellationsAggregateResponse);
  // Get Wait Time Aggregate (basic stats like total avoidable wait)
  rpc GetWaitTimeAggregate (GetDataRequest) returns (GetWaitTimeAggregateResponse);
  // Get Wait Time Store Ranking (returns stores in a ranking by amount of avoidable wait)
  rpc GetWaitTimeStoreRanking (GetDataRequest) returns (GetWaitTimeStoreRankingResponse);
  // Get Wait Time By Unit Of Time (returns avoidable wait over a period of time - e.g. give the average avoidable wait
  // time breakdown hourly from 10am-10pm in May)
  rpc GetWaitTimeByUnitOfTime (GetDataRequest) returns (GetWaitTimeByUnitOfTimeResponse);
  // Get Order Accuracy Aggregate (basic stats like number of errors with M&I)
  rpc GetOrderAccuracyAggregate (GetDataRequest) returns (GetOrderAccuracyAggregateResponse);
  // Get Order Accuracy Store Ranking (returns stores in a ranking by percent of orders with M&I)
  rpc GetOrderAccuracyStoreRanking (GetDataRequest) returns (GetOrderAccuracyStoreRankingResponse);
  // Get Items Missing And Incorrect Ranking (returns items with highest missing and incorrect stats)
  rpc GetItemsMissingAndIncorrectRanking (GetDataRequest) returns (GetItemsMissingAndIncorrectRankingResponse);
  // Get Downtime Aggregate (basic stats like number of minutes having downtime over X period)
  rpc GetDowntimeAggregate (GetDataRequest) returns (GetDowntimeAggregateResponse);
  // Get Downtime By Store Ranking (returns stores in a ranking by amount of downtime)
  rpc GetDowntimeStoreRanking (GetDataRequest) returns (GetDowntimeStoreRankingResponse);
  // Get Customer Ratings Aggregate(Summary of the rating metric stats for operations quality)
  rpc GetRatingMetricAggregate (GetDataRequest) returns (GetRatingMetricAggregateResponse);
  // Get Stores by average customer rating
  rpc GetCustomerRatingsStoreRanking (GetDataRequest) returns (GetCustomerRatingsStoreRankingResponse);
}

// Get Cancellations Aggregate Response
message GetCancellationsAggregateResponse {
  // number of avoidable cancellation orders
  google.protobuf.Int64Value avoidable_cancellations = 1;
  // number of total cancellation orders
  google.protobuf.Int64Value total_cancellations = 2;
  // number of total orders
  google.protobuf.Int64Value total_orders = 3;
  // avoidable cancellations goal in percent format
  google.protobuf.DoubleValue avoidable_cancellations_goal_percent = 4;
  // number of avoidable cancellations in previous time period
  google.protobuf.Int64Value avoidable_cancellations_previous = 5;
  // number of total cancellations in previous time period
  google.protobuf.Int64Value total_cancellations_previous = 6;
  // percentile ranking (e.g. better than 76% of stores)
  google.protobuf.DoubleValue percentile_ranking = 7;
  // sales lost due to avoidable cancellations
  google.protobuf.Int64Value sales_lost = 8;
  // sales lost due to avoidable cancellations in previous time period
  google.protobuf.Int64Value sales_lost_previous = 9;
  // avoidable cancellations by category
  AvoidableCancellationsByCategory avoidable_cancellations_by_category = 10;
  // sales lost due to avoidable cancellations with currency information
  money.MonetaryFields sales_lost_monetary = 11;
  // sales lost due to avoidable cancellations with currency information, for previous requesting period
  money.MonetaryFields sales_lost_previous_monetary = 12;
  // number of total orders in previous period
  google.protobuf.Int64Value total_orders_previous = 13;
}

// Avoidable Cancellations By Category
message AvoidableCancellationsByCategory {
  // Avoidable
  repeated CancellationsCategoryResult avoidable = 1;
  // Point Of Sale
  repeated CancellationsCategoryResult point_of_sale = 2;
  // Customer
  repeated CancellationsCategoryResult customer = 3;
}

// Cancellations Category Result
message CancellationsCategoryResult {
  // Category
  CancellationCategoryDesc category = 1;
  // Count
  google.protobuf.Int64Value count = 2;
}

// Get Wait Time Aggregate Response
message GetWaitTimeAggregateResponse {
  // Amount of Avoidable Wait, in seconds
  google.protobuf.Int64Value avoidable_wait = 1;
  // Avoidable Wait Goal, in seconds
  google.protobuf.Int64Value avoidable_wait_goal = 2;
  // Amount of Avoidable Wait in previous time period, in seconds
  google.protobuf.Int64Value avoidable_wait_previous = 3;
  // Amount of Total Dasher Wait, in seconds
  google.protobuf.Int64Value total_dasher_wait = 4;
  // Amount of Total Dasher Wait in previous time period, in seconds
  google.protobuf.Int64Value total_dasher_wait_previous = 5;
  // Percentile ranking
  google.protobuf.DoubleValue percentile_ranking = 6;
}

// Get Wait Time By Unit Of Time Response
message GetWaitTimeByUnitOfTimeResponse {
  // Avoidable Wait By Unit
  repeated AvoidableWaitByTimeUnit avoidable_wait_by_unit = 1;
  // Previous Date Avoidable Wait By Unit
  repeated AvoidableWaitByTimeUnit previous_avoidable_wait_by_unit = 2;
}

// Avoidable Wait By Time Unit
message AvoidableWaitByTimeUnit {
  // start time
  google.protobuf.Int64Value start = 1;
  // end time
  google.protobuf.Int64Value end = 2;
  // amount of avoidable wait, in seconds
  google.protobuf.Int64Value avoidable_wait = 3;
  // time unit
  TimeFilterGranularity unit = 4;
}

// Get Wait Time Store Ranking Response
message GetWaitTimeStoreRankingResponse {
  // Avoidable Wait By Store
  repeated WaitTimeStoreRankingStatistic wait_time_store_statistic = 1;
  // Total count - used for pagination
  google.protobuf.Int32Value count = 2;
}

// Avoidable Wait Store Statistic
message WaitTimeStoreRankingStatistic {
  // Name of store
  google.protobuf.StringValue name = 1;
  // Store id
  google.protobuf.Int64Value store_id = 2;
  // Amount of avoidable wait, in seconds
  google.protobuf.Int64Value avoidable_wait = 3;
  // Amount of total dasher wait, in seconds
  google.protobuf.Int64Value total_dasher_wait = 4;
  // Amount of total delivery time, in seconds
  google.protobuf.Int64Value total_delivery_time = 5;
}

// Get Order Accuracy Aggregate Response
message GetOrderAccuracyAggregateResponse {
  // Number of orders that are missing or incorrect
  google.protobuf.Int64Value missing_and_incorrect = 1;
  // Total number of orders
  google.protobuf.Int64Value total_orders = 2;
  // M&I goal in percent
  google.protobuf.DoubleValue missing_and_incorrect_goal_percent = 3;
  // Number of orders that are missing or incorrect in previous time period
  google.protobuf.Int64Value missing_and_incorrect_previous = 4;
  // Percentile ranking
  google.protobuf.DoubleValue percentile_ranking = 5;
  // Error charges from M&I
  google.protobuf.Int64Value error_charges = 6;
  // Error charges from M&I in previous time period
  google.protobuf.Int64Value error_charges_previous = 7;
  // Error Categories
  repeated ErrorByCategory errors_by_category = 8;
  // Error charges from M&I with currency information
  money.MonetaryFields error_charges_monetary = 9;
  // Error charges from M&I in previous time period with currency information
  money.MonetaryFields error_charges_previous_monetary = 10;
  // Total number of orders in previous time period
  google.protobuf.Int64Value total_orders_previous = 11;
}

// Number of errors in a given error category
message ErrorByCategory {
  // category that the error falls in
  ErrorCategoryFriendly category = 1;
  // number of errors
  google.protobuf.Int64Value count = 2;
}

// Get Order Accuracy Store Ranking Response
message GetOrderAccuracyStoreRankingResponse {
  // M&I store ranking
  repeated OrderAccuracyStoreRankingStatistic missing_and_incorrect_store_ranking = 1;
  // Total count - used for pagination
  google.protobuf.Int32Value count = 2;
}

// Order Accuracy Store Ranking Statistic
message OrderAccuracyStoreRankingStatistic {
  // Name of store
  google.protobuf.StringValue name = 1;
  // Store id
  google.protobuf.Int64Value store_id = 2;
  // M&I percentage
  google.protobuf.DoubleValue missing_and_incorrect_percent = 3;
  // Amount missing
  google.protobuf.Int64Value missing = 4;
  // Amount incorrect
  google.protobuf.Int64Value incorrect = 5;
  // Error charges from M&I
  google.protobuf.Int64Value error_charges = 6;
  // Total order volume across entire query selection
  google.protobuf.Int64Value total_orders = 7;
  // Error charges from M&I with currency info
  money.MonetaryFields error_charges_monetary = 8;
  // Amount missing and incorrect (not just missing + incorrect - there is overlap there!)
  google.protobuf.Int64Value missing_and_incorrect = 9;
}

// Get Items Missing And Incorrect Ranking Response
message GetItemsMissingAndIncorrectRankingResponse {
  // Missing And Incorrect
  repeated ItemMissingAndIncorrectStatistic missing_and_incorrect = 1;
  // Total count - used for pagination
  google.protobuf.Int64Value count = 2;
  // Total Number of Items That Are Missing Or Incorrect
  google.protobuf.Int64Value total_missing_or_incorrect = 3;
}

// Item Missing And Incorrect Statistic
message ItemMissingAndIncorrectStatistic {
  // item image url
  google.protobuf.StringValue image_url = 1;
  // item name
  google.protobuf.StringValue name = 2;
  // amount missing
  google.protobuf.Int64Value missing = 3;
  // amount incorrect
  google.protobuf.Int64Value incorrect = 4;
  // amount ordered
  google.protobuf.Int64Value ordered = 5;
}

// Get Downtime Aggregate Response
message GetDowntimeAggregateResponse {
  // amount of downtime (minutes)
  google.protobuf.Int64Value downtime = 1;
  // amount of downtime goal (percentage)
  google.protobuf.DoubleValue downtime_goal = 2;
  // amount of downtime in previous time period (minutes)
  google.protobuf.Int64Value downtime_previous = 3;
  // amount of uptime (minutes)
  google.protobuf.Int64Value uptime = 4;
  // percentile ranking
  google.protobuf.DoubleValue percentile_ranking = 5;
  // downtime by category
  DowntimeByCategory downtime_by_category = 6;
  // amount of uptime (minutes)
  google.protobuf.Int64Value uptime_previous = 7;
}

// Downtime By Category
message DowntimeByCategory {
  // amount of downtime when other (minutes)
  google.protobuf.Int64Value other = 1;
  // amount of downtime when PoS outage (minutes)
  google.protobuf.Int64Value pos_outage = 2;
  // amount of downtime when store closure (minutes)
  google.protobuf.Int64Value store_closure = 3;
  // amount of downtime when store issue (minutes)
  google.protobuf.Int64Value store_issue = 4;
  // amount of downtime when store too busy (minutes)
  google.protobuf.Int64Value store_too_busy = 5;
}

// Get Downtime Store Ranking Response
message GetDowntimeStoreRankingResponse {
  // Downtime by store
  repeated DowntimeStoreStatistic downtime_by_store = 1;
  // Total count - used for pagination
  google.protobuf.Int32Value count = 2;
}

// Downtime Store Statistic
message DowntimeStoreStatistic {
  // Name of store
  google.protobuf.StringValue name = 1;
  // Store id
  google.protobuf.Int64Value store_id = 2;
  // Amount of downtime
  google.protobuf.Int32Value downtime = 3;
  // Amount of uptime
  google.protobuf.Int32Value uptime = 4;
  // Top reason for downtime
  TempDeactivationReasons top_downtime_category = 5;
}
// Summary stats for the Ratings metric in operations quality
message GetRatingMetricAggregateResponse {
  // Average customer rating
  google.protobuf.DoubleValue avg_rating = 1;
  // Total number of ratings received
  google.protobuf.Int64Value total_ratings = 2;
  // Average customer rating for the previous period
  google.protobuf.DoubleValue prev_avg_ratings = 3;
  // Total number of ratings received for the previous period
  google.protobuf.Int64Value prev_total_ratings = 4;
  // Top 5 improvement categories with reviews count. Should be populated only for StoreFilterGranularity.Store
  repeated RatingImprovementCategory improvement_categories = 5;
}
// Amount of customer reviews in specific improvement category for Rating metric
message RatingImprovementCategory {
  // Id of the improvement category
  CxReviewCategoryId category_id = 1;
  // Number of customer reviews for this improvement category
  google.protobuf.Int32Value reviews_count = 2;
}
// Rankings of stores by the average customer rating
message GetCustomerRatingsStoreRankingResponse {
  // List of stores nd their average ratings
  repeated StoreAverageRating stores_by_rating = 1;
}
// Store name and its average store rating
message StoreAverageRating {
  // Name of store
  google.protobuf.StringValue name = 1;
  // Average customer rating
  google.protobuf.DoubleValue avg_rating = 2;
}
