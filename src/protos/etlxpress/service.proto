syntax = "proto3";

package etlxpress.v1;

import "common/code.proto";
import "common/service_client_config.proto";
import "doordash.api/annotations.proto";
import "google/api/annotations.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option go_package = "etlxpress";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.etlxpress.grpc";

// This is a placeholder
// The greeting service definition
service GreeterService {
  // Sends a greeting
  rpc SayHello(SayHelloRequest) returns (SayHelloResponse) {}
}

// The request message containing the user's name
message SayHelloRequest {
  // name
  string name = 1;
}

// The response message containing the greetings
message SayHelloResponse {
  // name
  string message = 1;
}

// defines the schema for a table's column
message TableColumnSchema {
  // name of column
  google.protobuf.StringValue name = 1;
  // type of column
  google.protobuf.StringValue type = 2;
  // comment about column
  google.protobuf.StringValue comment = 3;
  // if column is supposed to be primary key
  google.protobuf.BoolValue is_primary_key = 4;
}

// Enum for defining task types for dag operators
enum TaskType {
  // Unspecified
  TASK_TYPE_UNSPECIFIED = 0;
  // dummy task
  TASK_TYPE_DUMMY_OPERATOR = 1;
  // upstream await task
  TASK_TYPE_UPSTREAM_AWAIT = 2;
  // snowflake table load task
  TASK_TYPE_SNOWFLAKE_TABLE_LOAD = 3;
  // snowflake sql validator task
  TASK_TYPE_SNOWFLAKE_SQL_VALIDATOR = 4;
  // gsheet to snowflake task
  TASK_TYPE_GSHEET_TO_SNOWFLAKE = 5;
  // snowflake to datalake task
  TASK_TYPE_SNOWFLAKE_TO_DATALAKE = 6;
  // datalake table load task
  TASK_TYPE_DATALAKE_TABLE_LOAD = 7;
}

// Options related to the upstream await task type
message UpstreamAwaitOptions {
  // Options related to the upstream await table
  message UpstreamAwaitTable {
    // upstream_await table name
    google.protobuf.StringValue table_name = 1;
    // lower offset limit in s/m/h/d/w form
    google.protobuf.StringValue lower_offset_limit = 2;
    // upper offset limit in s/m/h/d/w form
    google.protobuf.StringValue upper_offset_limit = 3;
  }
  // upstream_await's upstream tables
  repeated UpstreamAwaitTable upstream_tables = 1;
}

// Options related to the snowflake table load task type
message SnowflakeTableLoadOptions {
  // Deprecated: Use Global TableColumnSchema instead.
  message TableColumnSchema {
    // name of column
    google.protobuf.StringValue name = 1;
    // type of column
    google.protobuf.StringValue type = 2;
    // comment about column
    google.protobuf.StringValue comment = 3;
    // if column is supposed to be primary key
    google.protobuf.BoolValue is_primary_key = 4;
  }

  //load type enum for snowflake load
  enum LoadType {
    // unspecified
    LOAD_TYPE_UNSPECIFIED = 0;
    // append
    LOAD_TYPE_APPEND = 1;
    // rebuild
    LOAD_TYPE_REBUILD = 2;
    // upsert
    LOAD_TYPE_UPSERT = 3;
  }
  // snowflake_table_load's table name
  google.protobuf.StringValue table_name = 1;
  // snowflake_table_load's load type
  LoadType load_type = 2;
  // snowflake_table_load's schema
  repeated TableColumnSchema table_column_schema = 3;
  // snowflake_table_load's sql
  google.protobuf.StringValue table_sql = 4;
}

// Options related to the gsheet to snowflake operator
message GsheetToSnowflakeOptions {
  // snowflake table name
  google.protobuf.StringValue snowflake_table_name = 1;
  // workbook name
  google.protobuf.StringValue workbook_name = 2;
  // sheet name
  google.protobuf.StringValue sheet_name = 3;
}

// Options related to the snowflake to datalake operator
message SnowflakeToDatalakeOptions {
  // Options that map to the operator's CopyContext
  message CopyContext {
    // extra yaml options
    google.protobuf.StringValue extra_yaml = 1;
  }
  // Options that map to the operator's IngestionContext
  message IngestionContext {
    // extra yaml options
    google.protobuf.StringValue extra_yaml = 1;
  }
  // snowflake table name
  google.protobuf.StringValue snowflake_table_name = 1;
  // datalake table name
  google.protobuf.StringValue datalake_table_name = 2;
  // yaml content for advanced users
  CopyContext copy_context = 3;
  // yaml content for advanced users
  IngestionContext ingestion_context = 4;
  // snowflake to datalake copy sql statement
  google.protobuf.StringValue sql_statement = 5;
}

// SQL variables for datalake operator
message SQLVariable {
  // SQL Variable Name
  google.protobuf.StringValue variable_name = 1;
  // SQL statement
  google.protobuf.StringValue sql_statement = 2;
}

// Datalake Table Load Options
message DatalakeTableLoadOptions {
  // Advance config
  //message UserControl {
  // map for user control fields
  //map<string, string> user_control = 1;
  //}

  // Load type enum
  enum LoadType {
    // unspecified
    LOAD_TYPE_UNSPECIFIED = 0;
    // insert
    LOAD_TYPE_INSERT = 1;
    // overwrite
    LOAD_TYPE_OVERWRITE = 2;
    // update insert
    LOAD_TYPE_UPDATE_INSERT = 3;
  }

  // datalake table name (fully qualified)
  google.protobuf.StringValue table_name = 1;
  // load operation type
  LoadType load_type = 2;
  // table column schema
  repeated TableColumnSchema table_column_schema = 3;
  // sql query
  google.protobuf.StringValue sql_query = 4;
  // datalake partition columns
  repeated google.protobuf.StringValue partition_columns = 5;
  // sql variables
  repeated SQLVariable sql_variables = 6;
  // user controls
  map<string, string> user_control = 7;
  // Datalake Table Properties
  map<string, string> table_properties = 8;
}

// Task of a dag
message Task {
  // type of task
  TaskType type = 2;
  // new id
  google.protobuf.StringValue name = 5;
  // upstream task names
  repeated google.protobuf.StringValue upstream_task_names = 6;
  // upstream_await options
  UpstreamAwaitOptions upstream_await_options = 7;
  // snowflake_table_load options
  SnowflakeTableLoadOptions snowflake_table_load_options = 8;
  // gsheet_to_snowflake options
  GsheetToSnowflakeOptions gsheet_to_snowflake_options = 9;
  // snowflake_to_datalake options
  SnowflakeToDatalakeOptions snowflake_to_datalake_options = 10;
  // datalake_table_load options
  DatalakeTableLoadOptions datalake_table_load_options = 11;
  reserved 1, 3, 4;
  reserved "id", "child_ids", "options";
}

// PR status
enum PrStatus {
  // Unspecified
  PR_STATUS_UNSPECIFIED = 0;
  // awaiting review
  PR_STATUS_AWAITING_REVIEW = 1;
  // merged
  PR_STATUS_MERGED = 2;
  // closed
  PR_STATUS_CLOSED = 3;
}

// Workflow state
enum WorkflowState {
  // Unspecified
  WORKFLOW_STATE_UNSPECIFIED = 0;
  // active
  WORKFLOW_STATE_ACTIVE = 1;
  // paused
  WORKFLOW_STATE_PAUSED = 2;
  // deleted
  WORKFLOW_STATE_DELETED = 3;
  // expired
  WORKFLOW_STATE_EXPIRED = 4;
}

// Details relating to an execution of a workflow
message WorkflowExecution {
  // execution date
  google.protobuf.Timestamp execution_date = 1;
  // state of the execution
  google.protobuf.StringValue state = 2;
}

// Define what a workflow is
message Workflow {
  // unique id of workflow
  google.protobuf.Int32Value workflow_id = 1;
  // name of workflow request
  google.protobuf.StringValue name = 2;
  // List of tags
  repeated google.protobuf.StringValue tags = 3;
  // Description of workflow
  google.protobuf.StringValue description = 4;
  // Cron schedule
  google.protobuf.StringValue schedule = 5;
  // Start date of dag
  google.protobuf.Timestamp start_date = 6;
  // End date of dag
  google.protobuf.Timestamp end_date = 7;
  // Owner of workflow
  google.protobuf.StringValue owner = 8;
  // Created by
  google.protobuf.StringValue created_by = 9;
  // Created at
  google.protobuf.Timestamp created_at = 10;
  // Updated at
  google.protobuf.Timestamp updated_at = 11;
  // Updated by
  google.protobuf.StringValue updated_by = 12;
  // PR link
  google.protobuf.StringValue pr_link = 13;
  // PR status
  PrStatus pr_status = 14;
  // List of past workflow executions
  repeated WorkflowExecution executions = 15;
  // Workflow State
  WorkflowState workflow_state = 16;
}

// Request message to create a new workflow
message CreateWorkflowRequest {
  // name of workflow request
  google.protobuf.StringValue name = 1;
  // List of tags
  repeated google.protobuf.StringValue tags = 2;
  // Description of workflow
  google.protobuf.StringValue description = 3;
  // Cron schedule
  google.protobuf.StringValue schedule = 4;
  // Start date of dag
  google.protobuf.Timestamp start_date = 5;
  // End date of dag
  google.protobuf.Timestamp end_date = 6;
  // Owner of workflow
  google.protobuf.StringValue owner = 7;
  // Created by
  google.protobuf.StringValue created_by = 8;
  // Created on
  google.protobuf.Timestamp created_at = 9 [deprecated = true];
  // List of tasks
  repeated Task tasks = 10;
  // Workflow State
  WorkflowState workflow_state = 11;
}

// Response message containing the workflow creation response
message CreateWorkflowResponse {
  // id of workflow
  google.protobuf.Int32Value workflow_id = 1 [deprecated = true];
  // Status code
  code.Code code = 2;
  // Error message when error
  google.protobuf.StringValue error = 3;
  // workflow returned
  Workflow workflow = 4;
}

// Request to get workflow
message GetWorkflowRequest {
  // id of workflow
  google.protobuf.Int32Value workflow_id = 1;
}

// Response message from getting workflow
message GetWorkflowResponse {
  // workflow
  Workflow workflow = 1;
  // List of tasks associated with workflow
  repeated Task tasks = 2;
  // Status code
  code.Code code = 3;
  // Error message when error
  google.protobuf.StringValue error = 4;
}

// Request to list workflows
message ListWorkflowRequest {
  // limit
  google.protobuf.Int32Value limit = 1;
  // offset
  google.protobuf.Int32Value offset = 2;
  // query for name
  google.protobuf.StringValue name = 3;
  // query for owning team
  google.protobuf.StringValue owner = 4;
  // query for creator
  google.protobuf.StringValue creator = 5;
}

// Response message from listing workflows
message ListWorkflowResponse {
  // List of workflows matching request
  repeated Workflow workflows = 1;
  // Status code
  code.Code code = 2;
  // Error message when error
  google.protobuf.StringValue error = 3;
}

// Fields that can be updated in a workflow
message WorkflowUpdate {
  // List of tags
  repeated google.protobuf.StringValue tags = 1;
  // Description of workflow
  google.protobuf.StringValue description = 2;
  // Cron schedule
  google.protobuf.StringValue schedule = 3;
  // Start date of dag
  google.protobuf.Timestamp start_date = 4;
  // End date of dag
  google.protobuf.Timestamp end_date = 5;
  // List of tasks
  repeated Task tasks = 6;
}

// Request to update a workflow
message UpdateWorkflowRequest {
  // workflow id
  google.protobuf.Int32Value workflow_id = 1;
  // Person making the update
  google.protobuf.StringValue updated_by = 2;
  // updated fields
  WorkflowUpdate workflow_update = 3;
}

// Response from updating a workflow
message UpdateWorkflowResponse {
  // workflow
  Workflow workflow = 1;
  // List of tasks associated with workflow
  repeated Task tasks = 2;
  // Status code
  code.Code code = 3;
  // Error message when error
  google.protobuf.StringValue error = 4;
}

// Request to Update Workflow State
message UpdateWorkflowStateRequest {
  // workflow id
  google.protobuf.Int32Value workflow_id = 1;
  // workflow state
  WorkflowState workflow_state = 2;
  // User calling update
  google.protobuf.StringValue updated_by = 3;
}

// Response to Update Workflow State
message UpdateWorkflowStateResponse {
  // workflow id
  google.protobuf.Int32Value workflow_id = 1;
  // workflow state
  WorkflowState workflow_state = 2;
  // Status code
  code.Code code = 3;
  // Error message when error
  google.protobuf.StringValue error = 4;
}

// Workflow management service
service WorkflowManagementService {
  option (doordash.api.service) = {
    name: "etlxpress-web"
    url: "etlxpress-web.service.prod.ddsd"
    port: 50051
    name_spaces: ["etlxpress"]
    owner: {
      name: "etlxpress"
      id: "etlxpress-workflow"
      slack_channel: "#etlxpress-testing"
      email_alias: "etlxpress-team@doordash.com"
    }
    target_products: [INTERNAL]
  };
  option (service_client.client_config).response_attempt_timeout_millis = 10000;
  // create a new workflow
  rpc CreateWorkflow(CreateWorkflowRequest) returns (CreateWorkflowResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 60000;
    option (google.api.http) = {
      post: "/etlxpress/v1/workflows"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      role_based_authorization: {
        mode: ANY,
        roles: ["perm_access_etl_express_hub"]
      }
      target_products: [INTERNAL]
      authentication_config: {enable_okta_verification: true}
    };
  }
  // get an existing workflow
  rpc GetWorkflow(GetWorkflowRequest) returns (GetWorkflowResponse) {
    option (google.api.http) = {get: "/etlxpress/v1/workflows/{workflow_id}"};
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      role_based_authorization: {
        mode: ANY,
        roles: ["perm_access_etl_express_hub"]
      }
      target_products: [INTERNAL]
      authentication_config: {enable_okta_verification: true}
    };
  }
  // list workflows
  rpc ListWorkflow(ListWorkflowRequest) returns (ListWorkflowResponse) {
    option (google.api.http) = {get: "/etlxpress/v1/workflows"};
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      role_based_authorization: {
        mode: ANY,
        roles: ["perm_access_etl_express_hub"]
      }
      target_products: [INTERNAL]
      authentication_config: {enable_okta_verification: true}
    };
  }
  // update workflow
  rpc UpdateWorkflow(UpdateWorkflowRequest) returns (UpdateWorkflowResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 60000;
    option (google.api.http) = {
      put: "/etlxpress/v1/workflows/{workflow_id}"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      role_based_authorization: {
        mode: ANY,
        roles: ["perm_access_etl_express_hub"]
      }
      target_products: [INTERNAL]
      authentication_config: {enable_okta_verification: true}
    };
  }
  // update workflow state
  rpc UpdateWorkflowState(UpdateWorkflowStateRequest) returns (UpdateWorkflowStateResponse) {
    option (google.api.http) = {
      put: "/etlxpress/v1/workflows/{workflow_id}/state"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      role_based_authorization: {
        mode: ANY,
        roles: ["perm_access_etl_express_hub"]
      }
      target_products: [INTERNAL]
      authentication_config: {enable_okta_verification: true}
    };
  }
}
