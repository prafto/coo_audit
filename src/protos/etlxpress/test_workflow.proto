syntax = "proto3";

package etlxpress.v1;

import "common/code.proto";
import "common/service_client_config.proto";
import "doordash.api/annotations.proto";
import "google/api/annotations.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option go_package = "etlxpress";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.etlxpress.grpc";

// Task of a test
message TestWorkflowTask {
  // ID of the task
  google.protobuf.StringValue id = 1;
  // name of the task
  google.protobuf.StringValue name = 2;
  // Task properties
  google.protobuf.StringValue properties = 3;
  // Task type
  google.protobuf.StringValue type = 4;
  // upstream task names
  repeated google.protobuf.StringValue upstream_task_names = 5;
}

// Test workflow run object
message TestWorkflowRun {
  // ID of the workflow run
  google.protobuf.StringValue id = 1;
  // ID of the test workflow
  google.protobuf.StringValue test_workflow_id = 2;
  // for partial test workflow runs
  google.protobuf.StringValue from_task_id = 3;
  // email id to which notifications for the test run are to be sent
  google.protobuf.StringValue notification_email = 4;
  // List of tasks
  repeated TestWorkflowTask tasks = 5;
  // compute specifications for a run
  google.protobuf.StringValue compute_spec = 6;
  // time when the test workflow began execution
  google.protobuf.Timestamp started_at = 7;
  // time when the test workflow ended execution
  google.protobuf.Timestamp ended_at = 8;
  // run execution status
  google.protobuf.StringValue status = 9;
  // number of times the run was retried
  google.protobuf.Int32Value retry_num = 10;
  // Timestamp when the workflow was last created
  google.protobuf.Timestamp created_at = 11;
  // User who created the run
  google.protobuf.StringValue created_by = 12;
  // Timestamp when the workflow was last updated
  google.protobuf.Timestamp updated_at = 13;
  // User who last updated the run
  google.protobuf.StringValue updated_by = 14;
  // description for the test workflow run
  google.protobuf.StringValue description = 15;
  // owner team for the test workflow run
  google.protobuf.StringValue owner_team = 16;
  // airflow logs for the test workflow run
  google.protobuf.StringValue airflow_logs = 17;
}

// Test workflow object
message TestWorkflow {
  // ID of the workflow
  google.protobuf.StringValue id = 1;
  // name of the workflow
  string name = 2;
  // workflow for which test is created
  google.protobuf.StringValue parent_workflow_id = 3;
  // List of tags associated with the workflow
  repeated google.protobuf.StringValue tags = 4;
  // Description of the workflow
  google.protobuf.StringValue description = 5;
  // Owner of the workflow
  google.protobuf.StringValue owner = 6;
  // User who created the workflow
  google.protobuf.StringValue created_by = 7;
  // Timestamp when the workflow was created
  google.protobuf.Timestamp created_at = 8;
  // Timestamp when the workflow was last updated
  google.protobuf.Timestamp updated_at = 9;
  // User who last updated the workflow
  google.protobuf.StringValue updated_by = 10;
  // parent workflow info - json field containing workflow specific info
  google.protobuf.StringValue parent_workflow_info = 11;
}

// The request message containing test workflow information
message CreateTestWorkflowRequest {
  // test workflow details
  TestWorkflow test_workflow = 1;
}

// The response message containing test workflow information
message CreateTestWorkflowResponse {
  // test workflow details
  TestWorkflow test_workflow = 1;
  // Status code
  code.Code code = 2;
  // Error message when error
  google.protobuf.StringValue error = 3;
}

// The request message containing test workflow run information
message CreateTestWorkflowRunRequest {
  // test workflow run details
  TestWorkflowRun test_workflow_run = 1;
}

// The response message containing test workflow run information
message CreateTestWorkflowRunResponse {
  // test workflow run details
  TestWorkflowRun test_workflow_run = 1;
  // Status code
  code.Code code = 2;
  // Error message when error
  google.protobuf.StringValue error = 3;
}

// The request message containing test workflow information for updating
message UpdateTestWorkflowRequest {
  // test workflow details
  TestWorkflow test_workflow = 1;
}

// The response message containing test workflow information after updating
message UpdateTestWorkflowResponse {
  // test workflow details
  TestWorkflow test_workflow = 1;
  // Status code
  code.Code code = 2;
  // Error message when error
  google.protobuf.StringValue error = 3;
}

// The request message containing id/name of the test workflow
message GetTestWorkflowsRequest {
  // ID of the workflow
  google.protobuf.StringValue id = 1;
  // name of the workflow
  google.protobuf.StringValue name = 2;
  // workflow for which test is created
  google.protobuf.StringValue parent_workflow_id = 3;
}

// The response message containing test workflow along with runs
message GetTestWorkflowsResponse {
  // test workflow details
  repeated TestWorkflow test_workflow = 1;
  // Status code
  code.Code code = 3;
  // Error message when error
  google.protobuf.StringValue error = 4;
}

// The request message containing id of the test workflow run or the test workflow id
message GetTestWorkflowRunsRequest {
  // ID of the workflow run
  google.protobuf.StringValue id = 1;
  // ID of the workflow
  google.protobuf.StringValue test_workflow_id = 2;
}

// The response message containing test workflow runs
message GetTestWorkflowRunsResponse {
  // list of test workflow runs
  repeated TestWorkflowRun test_workflow_run = 1;
  // Status code
  code.Code code = 2;
  // Error message when error
  google.protobuf.StringValue error = 3;
}

// Request message for processing test workflow runs by status
message GetTestWorkflowRunForExecutionRequest {
  // status of the test workflow run
  google.protobuf.StringValue test_workflow_run_id = 1;
}

// Test workflow execution object
message TestWorkflowExecution {
  // status of the test workflow run
  google.protobuf.StringValue status = 1;
  // ID of the workflow run
  google.protobuf.StringValue test_workflow_run_id = 2;
  // workflow name
  google.protobuf.StringValue test_workflow_name = 3;
  // test workflow run created by
  google.protobuf.StringValue test_workflow_run_created_by = 4;
  // test workflow run definition
  google.protobuf.StringValue test_workflow_run_definition = 5;
  // parent workflow info - json field containing workflow specific info
  google.protobuf.StringValue parent_workflow_info = 6;
  // compute spec for the test workflow run
  google.protobuf.StringValue compute_spec = 7;
}

// Response message for processing test workflow runs
message GetTestWorkflowRunForExecutionResponse {
  // status of the test workflow run
  repeated TestWorkflowExecution test_workflow_execution = 1;
  // Status code
  code.Code code = 2;
  // Error message when error
  google.protobuf.StringValue error = 3;
}

// Request message for getting list of test workflow runs by status
message GetTestWorkflowRunByStatusRequest {
  // status of the test workflow run
  google.protobuf.StringValue status = 1;
}

// Response message for getting list of test workflow runs by status
message GetTestWorkflowRunByStatusResponse {
  // list of test workflow runs
  repeated google.protobuf.StringValue test_workflow_run_id_list = 1;
  // Status code
  code.Code code = 2;
  // Error message when error
  google.protobuf.StringValue error = 3;
}

// Request message for updating test workflow run status
message UpdateTestWorkflowRunStatusRequest {
  // ID of the workflow run
  google.protobuf.StringValue test_workflow_run_id = 1;
  // time of the status change
  google.protobuf.Timestamp status_updated_at = 9;
  // status of the workflow run
  google.protobuf.StringValue status = 2;
}

// Response message for updating test workflow run status
message UpdateTestWorkflowRunStatusResponse {
  // ID of the workflow run
  google.protobuf.StringValue test_workflow_run_id = 1;
  // status of the test workflow run
  google.protobuf.StringValue status = 2;
  // Status code
  code.Code code = 3;
  // Error message when error
  google.protobuf.StringValue error = 4;
}

// Request message for getting list of snowflake warehouses per user
message GetSnowflakeWarehousesRequest {
  // User email id to get list of warehouses
  google.protobuf.StringValue snowflake_user_email_id = 1;
  // check to update warehouse list in service database - if set to true, will pull latest info from snowflake
  google.protobuf.BoolValue fetch_latest_warehouse_list = 2;
}

// Response message containing list of snowflake warehouses per user
message GetSnowflakeWarehousesResponse {
  // list of snowflake warehouses
  repeated google.protobuf.StringValue snowflake_warehouses = 1;
  // Status code
  code.Code code = 2;
  // Error message when error
  google.protobuf.StringValue error = 3;
}

// service to onboard test workflows
service TestWorkflowService {
  option (doordash.api.service) = {
    name: "etlxpress-web"
    url: "etlxpress-web.service.prod.ddsd"
    port: 50051
    name_spaces: ["etlxpress"]
    owner: {
      name: "etlxpress"
      id: "etlxpress-workflow"
      slack_channel: "#etlxpress-testing"
      email_alias: "etlxpress-team@doordash.com"
    }
    target_products: [INTERNAL]
  };
  option (service_client.client_config).response_attempt_timeout_millis = 10000;

  // rpc to create a test workflow
  rpc CreateTestWorkflow(CreateTestWorkflowRequest) returns (CreateTestWorkflowResponse) {
    option (google.api.http) = {
      post: "/etlxpress/v1/test-workflows"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      role_based_authorization: {
        mode: ANY,
        roles: ["perm_access_etl_express_hub"]
      }
      target_products: [INTERNAL]
      authentication_config: {enable_okta_verification: true}
    };
  }

  // rpc to update a test workflow
  rpc UpdateTestWorkflow(UpdateTestWorkflowRequest) returns (UpdateTestWorkflowResponse) {
    option (google.api.http) = {
      put: "/etlxpress/v1/test-workflows"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      role_based_authorization: {
        mode: ANY,
        roles: ["perm_access_etl_express_hub"]
      }
      target_products: [INTERNAL]
      authentication_config: {enable_okta_verification: true}
    };
  }

  // rpc to create a run for a test workflow
  rpc CreateTestWorkflowRun(CreateTestWorkflowRunRequest) returns (CreateTestWorkflowRunResponse) {
    option (google.api.http) = {
      post: "/etlxpress/v1/test-workflow-runs"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      role_based_authorization: {
        mode: ANY,
        roles: ["perm_access_etl_express_hub"]
      }
      target_products: [INTERNAL]
      authentication_config: {enable_okta_verification: true}
    };
  }

  // rpc to get a test workflow
  rpc GetTestWorkflows(GetTestWorkflowsRequest) returns (GetTestWorkflowsResponse) {
    option (google.api.http) = {get: "/etlxpress/v1/test-workflows"};
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      role_based_authorization: {
        mode: ANY,
        roles: ["perm_access_etl_express_hub"]
      }
      target_products: [INTERNAL]
      authentication_config: {enable_okta_verification: true}
    };
  }

  // rpc to get a test workflow run
  rpc GetTestWorkflowRuns(GetTestWorkflowRunsRequest) returns (GetTestWorkflowRunsResponse) {
    option (google.api.http) = {get: "/etlxpress/v1/test-workflow-runs"};
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      role_based_authorization: {
        mode: ANY,
        roles: ["perm_access_etl_express_hub"]
      }
      target_products: [INTERNAL]
      authentication_config: {enable_okta_verification: true}
    };
  }

  // rpc to get a test workflow run for execution
  rpc GetTestWorkflowRunForExecution(GetTestWorkflowRunForExecutionRequest) returns (GetTestWorkflowRunForExecutionResponse) {}

  // rpc to get a test workflow run by status
  rpc GetTestWorkflowRunByStatus(GetTestWorkflowRunByStatusRequest) returns (GetTestWorkflowRunByStatusResponse) {}

  // rpc to update a test workflow run status
  rpc UpdateTestWorkflowRunStatus(UpdateTestWorkflowRunStatusRequest) returns (UpdateTestWorkflowRunStatusResponse) {}
}

// snowflake service
service SnowflakeService {
  option (doordash.api.service) = {
    name: "etlxpress-web"
    url: "etlxpress-web.service.prod.ddsd"
    port: 50051
    name_spaces: ["etlxpress"]
    owner: {
      name: "etlxpress"
      id: "etlxpress-workflow"
      slack_channel: "#etlxpress-testing"
      email_alias: "etlxpress-team@doordash.com"
    }
    target_products: [INTERNAL]
  };
  option (service_client.client_config).response_attempt_timeout_millis = 10000;

  // rpc to get list of snowflake warehouses per user
  rpc GetSnowflakeWarehouses(GetSnowflakeWarehousesRequest) returns (GetSnowflakeWarehousesResponse) {
    option (google.api.http) = {get: "/etlxpress/v1/snowflake-warehouses"};
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      role_based_authorization: {
        mode: ANY,
        roles: ["perm_access_etl_express_hub"]
      }
      target_products: [INTERNAL]
    };
  }
}
