syntax = "proto3";
package consumer_habituation.v1;

import "common/common.proto";
import "common/service_client_config.proto";
import "google/protobuf/wrappers.proto";

option java_generic_services = true;
option java_package = "com.doordash.rpc.consumer_habituation";

// Service used to perform online bucketing
service BucketingService {
  // Used to start a job to calculate salt values
  rpc RunOnlineSaltShaker(RunOnlineSaltShakerRequest) returns (RunOnlineSaltShakerResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 300;
  }

  // Used to query status of salt shaker request
  rpc GetOnlineSaltShakerStatus(GetOnlineSaltShakerStatusRequest) returns (GetOnlineSaltShakerStatusResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 300;
  }

  // Used to start an online bucketing request
  rpc RunOnlineBucketingJob(RunOnlineBucketingJobRequest) returns (RunOnlineBucketingJobResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 300;
  }

  // Used to query status of bucketing request
  rpc GetOnlineBucketingJobStatus(GetOnlineBucketingJobStatusRequest) returns (GetOnlineBucketingJobStatusResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 300;
  }

  // Used to start an online bucketing request. Version 2 uses a table to get Cx Ids instead of submarkets
  rpc RunOnlineBucketingJobV2(RunOnlineBucketingJobV2Request) returns (RunOnlineBucketingJobV2Response) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 300;
  }

  // Updates the salt on a DV
  rpc UpdateSalt(UpdateSaltRequest) returns (UpdateSaltResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 300;
  }
}

// Request for runOnlineSaltShaker
message RunOnlineSaltShakerRequest {
  // Experiment name to get the salt for
  google.protobuf.StringValue experiment_name = 5;
  // Submarkets to pull consumers from
  repeated google.protobuf.StringValue submarket_ids = 1;
  // Distribution name
  google.protobuf.StringValue distribution_name = 2;
  // Number of iterations to search for best salt
  google.protobuf.UInt64Value iterations = 3;
  // How long to search for best salts
  google.protobuf.UInt64Value optimize_duration_seconds = 4;
  // Table name to query for stratas
  google.protobuf.StringValue strata_table_name = 6;
}

// Response for runOnlineSaltShaker
message RunOnlineSaltShakerResponse {
  reserved 1, 2;
  reserved "rollout_salt", "variant_salt";
  // Status code. Either "OK" or a description of the failure
  google.protobuf.StringValue status = 3;
  // Workflow ID of cadence workflow
  google.protobuf.StringValue workflow_id = 4;
}

// Request for getOnlineSaltShaker
message GetOnlineSaltShakerStatusRequest {
  // Workflow ID of cadence workflow
  google.protobuf.StringValue workflow_id = 1;
}

// Response for getOnlineSaltShaker
message GetOnlineSaltShakerStatusResponse {
  // Status of the workflow
  google.protobuf.StringValue status = 1;
  // Salt value to use for rollout salt
  google.protobuf.StringValue rollout_salt = 2;
  // Salt value to use for variant salt
  google.protobuf.StringValue variant_salt = 3;
}

// Request for runOnlineBucketingJob
message RunOnlineBucketingJobRequest {
  reserved 3;
  reserved "salt";
  // Name of the Dynamic Value
  google.protobuf.StringValue experiment_name = 1;
  // Submarket
  repeated google.protobuf.StringValue submarket_ids = 2;
  // [DEPRECATED] Targeted segment
  google.protobuf.StringValue segment = 4;
  // If enabled, will write to CSV and S3
  google.protobuf.BoolValue should_write_to_csv = 5;
  // If enabled, will skip check for salts. Otherwise, an empty salt will throw an exception
  google.protobuf.BoolValue should_skip_salt_check = 6;
  // Targeted distribution
  google.protobuf.StringValue distribution = 7;
}

// Response for runOnlineBucketingJob
message RunOnlineBucketingJobResponse {
  // Status code. Either "OK" or a description of the failure
  google.protobuf.StringValue status = 1;
  // Workflow ID of cadence workflow
  google.protobuf.StringValue workflow_id = 2;
}

// Request for runOnlineBucketingJobV2
message RunOnlineBucketingJobV2Request {
  // Name of the Dynamic Value
  google.protobuf.StringValue experiment_name = 1;
  // Table name that has the consumer ids that bucketing will be performed on
  google.protobuf.StringValue consumer_id_table_name = 2;
  // [DEPRECATED] Targeted segment
  google.protobuf.StringValue segment = 3;
  // If enabled, will skip check for salts. Otherwise, an empty salt will throw an exception
  google.protobuf.BoolValue should_skip_salt_check = 4;
  // Targeted distribution
  google.protobuf.StringValue distribution = 5;
}

// Response for runOnlineBucketingJobV2
message RunOnlineBucketingJobV2Response {
  // Status code. Either "OK" or a description of the failure
  google.protobuf.StringValue status = 1;
  // Workflow ID of cadence workflow
  google.protobuf.StringValue workflow_id = 2;
  // Table name that the bucketing results can be found in
  google.protobuf.StringValue bucketing_results_table_name = 3;
}

// Request for GetOnlineBucketingJobStatus
message GetOnlineBucketingJobStatusRequest {
  // Workflow ID of cadence workflow
  google.protobuf.StringValue workflow_id = 1;
}

// Response for GetOnlineBucketingJobStatus
message GetOnlineBucketingJobStatusResponse {
  // Status code. Either "OK" or a description of the failure
  google.protobuf.StringValue status = 1;
  // Workflow ID of cadence workflow
  google.protobuf.StringValue workflow_id = 2;
}

// Request for UpdateSalt
message UpdateSaltRequest {
  // Experiment name
  google.protobuf.StringValue experiment_name = 1;
  // Rollout salt
  google.protobuf.StringValue rollout_salt = 2;
  // Variant salt
  google.protobuf.StringValue variant_salt = 3;
}

// Response for UpdateSalt
message UpdateSaltResponse {
  // Status. Either OK or error message
  google.protobuf.StringValue status = 1;
}
