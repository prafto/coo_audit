syntax = "proto3";
// buf:lint:ignore DIRECTORY_SAME_PACKAGE
// buf:lint:ignore PACKAGE_VERSION_SUFFIX
package doordash_comms_service;

// buf:lint:ignore PACKAGE_SAME_GO_PACKAGE
option go_package = "commsservice";
option java_generic_services = true;
option java_multiple_files = true;
// buf:lint:ignore PACKAGE_SAME_JAVA_PACKAGE
option java_package = "com.doordash.rpc.comms.service";

// Email vendor to sync contacts with
enum EmailVendor {
  // Required as per proto3 rules
  EMAIL_VENDOR_UNSPECIFIED = 0;
  // Iterable
  EMAIL_VENDOR_ITERABLE = 1;
  // Hubspot
  EMAIL_VENDOR_HUBSPOT = 2;
  // Braze
  EMAIL_VENDOR_BRAZE = 3;
}

// Persona
enum Persona {
  // Required as per proto3 rules
  PERSONA_UNSPECIFIED = 0;
  // Cx
  PERSONA_CX = 1;
  // Dx
  PERSONA_DX = 2;
  // Mx
  PERSONA_MX = 3;
  // DDFW
  PERSONA_DDFW = 4;
}

// The request message for GetUnregisteredUsers
message GetUnregisteredUsersRequest {
  // Email vendor
  EmailVendor email_vendor = 1;
  // Persona
  Persona persona = 2;
}

// User
message User {
  // Email address
  string email = 1;
  // Optional user ID
  string user_id = 2;
}

// The response message for GetUnregisteredUsers
message GetUnregisteredUsersResponse {
  // List of users that have not been registered with Cassie
  repeated User users = 1;
}

// The request message containing the user to sync with Cassie
message SyncUserWithCassieRequest {
  // Email vendor
  EmailVendor email_vendor = 1;
  // Persona
  Persona persona = 2;
  // User
  User user = 3;
}

// The response message for SyncUser
message SyncUserWithCassieResponse {}

// update cassie preference request
message UpdatePreferenceRequest {
  // Persona
  Persona persona = 1;
  // User
  User user = 2;
  // preferences
  repeated PreferenceChannel preferences = 3;
}

// update cassie preference response
message UpdatePreferenceResponse {}

// cassie preference
message PreferenceChannel {
  // cassie channel id
  int32 channel_id = 1;

  // preference value
  int32 preference_value = 2;
}

// The CassieService service definition.
service CassieService {
  // Get list of users for the given vendor/persona that haven't been registered with Cassie yet
  rpc GetUnregisteredUsers(GetUnregisteredUsersRequest) returns (GetUnregisteredUsersResponse) {}
  // Sync an existing Iterable or Hubspot user with Cassie
  rpc SyncUserWithCassie(SyncUserWithCassieRequest) returns (SyncUserWithCassieResponse) {}
  // update cassie preferences for specific user
  rpc UpdatePreference(UpdatePreferenceRequest) returns (UpdatePreferenceResponse) {}
}
