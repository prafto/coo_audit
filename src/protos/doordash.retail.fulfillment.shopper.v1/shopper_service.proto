syntax = "proto3";

package doordash.retail.fulfillment.shopper.v1;

import "common/common.proto";
import "common/money.proto";
import "common/order_config.proto";
import "doordash.retail.common.v1/common.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.retail.fulfillment.shopper";

// Service for Shopper APIs
service ShopperService {
  /*
   * Assign Order To Shopper
   */
  rpc AssignOrderToShopper(AssignOrderToShopperRequest) returns (AssignOrderToShopperResponse);
  /*
   * Start Pick Order
   */
  rpc StartPickOrder(StartPickOrderRequest) returns (StartPickOrderResponse);
  /*
   * Finish Pick Order
   */
  rpc FinishPickOrder(FinishPickOrderRequest) returns (FinishPickOrderResponse);
  /*
   * Checkout Order
   */
  rpc CheckoutOrder(CheckoutOrderRequest) returns (CheckoutOrderResponse);
  /*
   * Get Order
   */
  rpc GetOrder(GetOrderRequest) returns (GetOrderResponse);
  /*
   * Get Unassigned Orders By Store
   */
  rpc GetUnassignedOrdersByStore(GetUnassignedOrdersByStoreRequest) returns (GetUnassignedOrdersByStoreResponse) {
    option deprecated = true;
  }
  /*
   * Get Unassigned Orders By list of stores
   */
  rpc GetUnassignedOrdersByStores(GetUnassignedOrdersByStoresRequest) returns (GetUnassignedOrdersByStoresResponse);
  /*
   * Get Assigned Orders For User By Store
   */
  rpc GetAssignedOrdersForUserByStore(GetAssignedOrdersForUserByStoreRequest) returns (GetAssignedOrdersForUserByStoreResponse) {
    option deprecated = true;
  }
  /*
   * Get Assigned Orders For User By list of stores
   */
  rpc GetAssignedOrdersForUserByStores(GetAssignedOrdersForUserByStoresRequest) returns (GetAssignedOrdersForUserByStoresResponse);
  /*
   * Get Order Items By Category Id
   */
  rpc GetOrderItemsByCategoryId(GetOrderItemsByCategoryIdRequest) returns (GetOrderItemsByCategoryIdResponse);
  /*
   * Confirm Order Item Scanned
   */
  rpc ConfirmOrderItemScanned(ConfirmOrderItemScannedRequest) returns (ConfirmOrderItemScannedResponse);
  /*
   * Confirm Order Item Picked
   */
  rpc ConfirmOrderItemPicked(ConfirmOrderItemPickedRequest) returns (ConfirmOrderItemPickedResponse);
  /*
   * Confirm Order Item Not Found
   */
  rpc ConfirmOrderItemNotFound(ConfirmOrderItemNotFoundRequest) returns (ConfirmOrderItemNotFoundResponse);
  /*
   * Confirm Order Item Substitution
   */
  rpc ConfirmOrderItemSubstitution(ConfirmOrderItemSubstitutionRequest) returns (ConfirmOrderItemSubstitutionResponse);
  /*
   * Confirm Order Item Reset
   */
  rpc ConfirmOrderItemReset(ConfirmOrderItemResetRequest) returns (ConfirmOrderItemResetResponse);
  /*
   * Get Order Item By UPC
   */
  rpc GetOrderItemByUPC(GetOrderItemByUPCRequest) returns (GetOrderItemByUPCResponse);
  /*
   * Backfill tax for order
   */
  rpc BackfillTax(BackfillTaxRequest) returns (BackfillTaxResponse);
  /*
   * Get Customer Masked Phone Number By OrderId
   */
  rpc GetCustomerMaskedPhoneNumberByOrderId(GetCustomerMaskedPhoneNumberByOrderIdRequest) returns (GetCustomerMaskedPhoneNumberByOrderIdResponse);
  /*
   * Get Store Items By list of UPCs scanned
   */
  rpc GetStoreItemsByUPCs(GetStoreItemsByUPCsRequest) returns (GetStoreItemsByUPCsResponse);
  /*
   * Get Store Items By list of MSIDs
   */
  rpc GetStoreItemsByMerchantSuppliedIds(GetStoreItemsByMerchantSuppliedIdsRequest) returns (GetStoreItemsByMerchantSuppliedIdsResponse);
  /*
   * Reset Order from existing employee
   */
  rpc ResetOrder(ResetOrderRequest) returns (ResetOrderResponse);
  /*
   * Hide Order by a Dashmart employee (i.e., user). Mark an order as blocked so it does not show up anymore
   */
  rpc HideOrder(HideOrderRequest) returns (HideOrderResponse);
  /*
   * temporary for migration - retrieve store item identifiers (store_id + MSID) by store_item_uuid or the reverse
   */
  rpc GetStoreItemsIdentifiers(GetStoreItemsIdentifiersRequest) returns (GetStoreItemsIdentifiersResponse);
  /*
   * temporary for migration - retrieve order identifiers (order_uuid, delivery_id, etc.) by delivery_uuid
   */
  rpc GetOrderIdentifiers(GetOrderIdentifiersRequest) returns (GetOrderIdentifiersResponse);
  /*
   * marks order as ready for pickup in Order Service
   */
  rpc ConfirmOrderReady(ConfirmOrderReadyRequest) returns (ConfirmOrderReadyResponse);
}

// Request to AssignOrderToShopper
message AssignOrderToShopperRequest {
  // delivery uuid of order
  string delivery_uuid = 1;
  // user id of the requester
  string requester_user_id = 2;
  // user id of the shopper, in most cases, it's the same as requester_user_id
  string shopper_user_id = 3;
}

// Response to AssignOrderToShopper
message AssignOrderToShopperResponse {}

// Request to FinishPickOrder
message FinishPickOrderRequest {
  // delivery uuid of the order
  string delivery_uuid = 1;
  // user id of the shopper
  string shopper_user_id = 2;
}

// Response to FinishPickOrder
message FinishPickOrderResponse {}

// Request to StartPickOrder
message StartPickOrderRequest {
  // delivery uuid of the order
  string delivery_uuid = 1;
  // user id of the shopper
  string shopper_user_id = 2;
}

// Response to StartPickOrder
message StartPickOrderResponse {}

// Request to CheckoutOrder
message CheckoutOrderRequest {
  // delivery uuid of the order
  string delivery_uuid = 1;
  // user id of the shopper
  string shopper_user_id = 2;
}

// Response to CheckoutOrder
message CheckoutOrderResponse {
  // status of the order
  string order_status = 1;
}

// Request to GetOrder
message GetOrderRequest {
  // delivery uuid of the order
  string delivery_uuid = 1;
  // user id of the shopper
  string shopper_user_id = 2;
}

// Response to GetOrder
message GetOrderResponse {
  // delivery_uuid of the order
  string delivery_uuid = 1;
  // external id of the order
  string external_id = 2;
  // name of the customer
  string customer_name = 3;
  // completed sku counts
  google.protobuf.Int32Value completed_sku_count = 4;
  // total sku counts
  google.protobuf.Int32Value total_sku_count = 5;
  // estimated pick time in minutes
  int32 estimated_pick_duration_mins = 6;
  // start time of the picking
  google.protobuf.Timestamp pick_started_time = 7;
  // finish time of the picking
  google.protobuf.Timestamp quoted_finish_time = 8;
  // status of the order
  string status = 9;
  // sku categories of the order
  repeated SkuCategory sku_categories = 10;
  // can finish picking the order
  bool can_finish_picking = 11;
  // fulfillment type of the order
  .common.order_config.v1.OrderConfig.FulfillmentType fulfillment_type = 12;
  // order items
  repeated ItemResponse order_items = 13;
  // delivery id
  string delivery_id = 14;
  // store id
  string store_id = 15;
}

// Sku category of the order item
message SkuCategory {
  // id of the sku category
  string id = 1;
  // name of the sku category
  string name = 2;
  // total sku count
  int32 total_sku_count = 3;
  // completed sku count
  int32 completed_sku_count = 4;
}

// Request to GetUnassignedOrdersByStore
message GetUnassignedOrdersByStoreRequest {
  // store id
  string store_id = 1;
}

// Response to GetUnassignedOrdersByStore
message GetUnassignedOrdersByStoreResponse {
  // a list of order response
  repeated ShopperOrderResponse order_responses = 1;
}

// Request to GetUnassignedOrdersByStores
message GetUnassignedOrdersByStoresRequest {
  // store ids
  repeated string store_id = 1;
}

// Response to GetUnassignedOrdersByStore
message GetUnassignedOrdersByStoresResponse {
  // a list of order response for all stores
  repeated ShopperOrderResponse orders = 1;
  // a list of failed store
  repeated FailedStore failed_stores = 2;
}

// Order Response
message ShopperOrderResponse {
  // id of order response
  string id = 1;
  // external id of order response
  string external_id = 2;
  // customer name of order response
  string customer_name = 3;
  // completedSkuCount of order response
  int32 completed_sku_count = 4;
  // total sku count
  int32 total_sku_count = 5;
  // estimated pick duration in minutes
  uint32 estimated_pick_duration_mins = 6;
  // pick started time
  google.protobuf.Timestamp pick_started_time = 7;
  // quoted finish time
  google.protobuf.Timestamp quoted_finish_time = 8;
  // status of the order
  string status = 9;
  // sku categories of the order
  repeated SkuCategory sku_categories = 10;
  // delivery id
  string delivery_id = 11;
  // delivery uuid
  string delivery_uuid = 12;
  // store id
  string store_id = 13;
  // fulfillment type
  .common.order_config.v1.OrderConfig.FulfillmentType fulfillment_type = 14;
}

// Failed Store Response
message FailedStore {
  // store id
  string store_id = 1;
  // error message
  google.protobuf.StringValue error_message = 2;
}

// Request to GetAssignedOrdersForUserByStore
message GetAssignedOrdersForUserByStoreRequest {
  // store id
  string store_id = 1;
  // represent an employee, but named as "user" in case it may not be employee in the future
  string shopper_user_id = 2;
}

// Response to GetAssignedOrdersForUserByStore
message GetAssignedOrdersForUserByStoreResponse {
  // a list of order response
  repeated ShopperOrderResponse orders = 1;
}

// Request to GetAssignedOrdersForUserByStores
message GetAssignedOrdersForUserByStoresRequest {
  // store ids
  repeated string store_id = 1;
  // represent an employee, but named as "user" in case it may not be employee in the future
  string shopper_user_id = 2;
}

// Response to GetAssignedOrdersForUserByStores
message GetAssignedOrdersForUserByStoresResponse {
  // a list of order response from all stores
  repeated ShopperOrderResponse orders = 1;
  // a list of failed store
  repeated FailedStore failed_stores = 2;
}

// Request to GetOrderItemsByCategoryId
message GetOrderItemsByCategoryIdRequest {
  // item category uuid
  string item_category_uuid = 1;
  // delivery uuid
  string delivery_uuid = 2;
  // user id of the shopper
  string shopper_user_id = 3;
}

// Response to  GetOrderItemsByCategoryId
message GetOrderItemsByCategoryIdResponse {
  // item response
  repeated ItemResponse items = 1;
}

// Item Response
message ItemResponse {
  // external id of item
  string external_id = 1;
  // the unique uuid of an item, need to be unique per order and per item
  string uuid = 2;
  // product name
  string name = 3;
  // measurement information, used for weighted information
  MeasurementInfoResponse measurement_info = 4;
  // image url
  google.protobuf.StringValue image_url = 5;
  // Barcodes / externalId of item as we scan externalId
  repeated string codes = 6;
  // price of item response, used for substitution
  money.MonetaryFields price = 7;
  // scan status, tracks if the item is validated
  OrderItemScanStatus scan_status = 8;
  // pick status, tracks if the item is scanned
  OrderItemPickStatus pick_status = 9;
  // substitute method
  google.protobuf.StringValue substitute_method = 10;
  // substituted original order item uuid
  google.protobuf.StringValue substituted_original_order_item_uuid = 11;
  // category uuid
  google.protobuf.StringValue category_uuid = 12;
  // dd menu item id
  google.protobuf.StringValue dd_menu_item_id = 13;
}

// Measurement Information Response
message MeasurementInfoResponse {
  // quantity requested
  google.protobuf.DoubleValue quantity_requested = 1;
  // quantity picked
  google.protobuf.DoubleValue quantity_picked = 2;
  // unit of measurement
  string unit_of_measurement = 3;
  // unit classification
  string unit_classification = 4;
  // measured quantity
  google.protobuf.DoubleValue measured_quantity = 5;
  // scan strategy
  google.protobuf.StringValue scan_strategy = 6;
}

// pick status
enum OrderItemPickStatus {
  // UNSPECIFIED (Should never be returned, error state)
  ORDER_ITEM_PICK_STATUS_UNSPECIFIED = 0;
  // All picked
  ORDER_ITEM_PICK_STATUS_PICKED = 1;
  // Picked less than requested
  ORDER_ITEM_PICK_STATUS_PICKED_LESS = 2;
  // Out of stock
  ORDER_ITEM_PICK_STATUS_OUT_OF_STOCK = 3;
}

// scan status
enum OrderItemScanStatus {
  // UNSPECIFIED (Should never be returned, error state)
  ORDER_ITEM_SCAN_STATUS_UNSPECIFIED = 0;
  // scanned
  ORDER_ITEM_SCAN_STATUS_SCANNED = 1;
  // scan pending
  ORDER_ITEM_SCAN_STATUS_SCAN_PENDING = 2;
  // weight pending
  ORDER_ITEM_SCAN_STATUS_WEIGHT_PENDING = 3;
  // both scan and weight pending
  ORDER_ITEM_SCAN_STATUS_SCAN_AND_WEIGHT_PENDING = 4;
}

// A generic order item status response shared by order item related POST endpoints
message GenericOrderItemStatus {
  // pick status
  OrderItemPickStatus pick_status = 1;
  // scan status
  OrderItemScanStatus scan_status = 2;
  // picked quantity
  google.protobuf.DoubleValue quantity_picked = 3;
}

// Confirm Order Item Scanned Request
message ConfirmOrderItemScannedRequest {
  // delivery uuid
  string delivery_uuid = 1;
  // order item uuid
  string order_item_uuid = 2;
  // user id of the shopper
  string shopper_user_id = 3;
}

// Confirm Order Item Scanned Response
message ConfirmOrderItemScannedResponse {
  // order item status
  GenericOrderItemStatus order_item_status = 1;
}

// Confirm Order Item Picked Request
message ConfirmOrderItemPickedRequest {
  // delivery uuid
  string delivery_uuid = 1;
  // order item uuid
  string order_item_uuid = 2;
  // order item quantity
  google.protobuf.Int32Value quantity = 3;
  // measurement quantity
  google.protobuf.DoubleValue measurement_quantity = 4;
  // user id of the shopper
  string shopper_user_id = 5;
}

// Confirm Order Item Picked Response
message ConfirmOrderItemPickedResponse {
  // order item status
  GenericOrderItemStatus order_item_status = 1;
}

// Confirm Order Item Not Found Request
message ConfirmOrderItemNotFoundRequest {
  // delivery uuid
  string delivery_uuid = 1;
  // order item uuid
  string order_item_uuid = 2;
  // user id of the shopper
  string shopper_user_id = 3;
}

// Confirm Order Item Not Found Response
message ConfirmOrderItemNotFoundResponse {
  // order item status
  GenericOrderItemStatus order_item_status = 1;
}

// Confirm Order Item Substitution Request
message ConfirmOrderItemSubstitutionRequest {
  // delivery uuid
  string delivery_uuid = 1;
  // original order item uuid
  string order_item_uuid = 2;
  // MSID (external ID) of the substitution item
  string substitution_merchant_supplied_id = 3;
  // substitution quantity
  int32 substitution_quantity = 4;
  // user id of the shopper
  string shopper_user_id = 5;
  // if this field is present, we will upsert substitution order item with
  // this uuid instead of a randomly generated uuid
  // this is a temporary field to support data consistency during migration
  // we will deprecate & remove this field once the migration is complete
  google.protobuf.StringValue substitution_order_item_uuid_override = 6;
}

// Confirm Order Item Substitution Response
message ConfirmOrderItemSubstitutionResponse {
  // order item status
  GenericOrderItemStatus order_item_status = 1;
}

// Confirm Order Item Reset Request
message ConfirmOrderItemResetRequest {
  // delivery uuid
  string delivery_uuid = 1;
  // order item uuid
  string order_item_uuid = 2;
  // user id of the shopper
  string shopper_user_id = 3;
}

// Confirm Order Item Reset Response
message ConfirmOrderItemResetResponse {
  // order item status
  GenericOrderItemStatus order_item_status = 1;
}

// Get Order Item By UPC Request
message GetOrderItemByUPCRequest {
  // delivery uuid
  string delivery_uuid = 1;
  // optional order item uuid. If present, checks if scanned item is correct
  google.protobuf.StringValue order_item_uuid = 2;
  // barcode data including code and format
  StoreItemBarcodeData barcode = 3;
  // user id of the shopper
  string shopper_user_id = 4;
}

// Get Order Item By UPC Response
message GetOrderItemByUPCResponse {
  // order item uuid
  string order_item_uuid = 1;
  // normalized barcode
  string normalized_barcode = 2;
  // is wrong barcode boolean flag
  bool is_wrong_barcode = 3;
  // is correct order item boolean flag
  bool is_correct_order_item = 4;
  // store item response
  StoreItemResponse store_item = 5;
}

// Item Simple Response
message ItemSimpleResponse {
  // item simple response
  string store_item_uuid = 1;
  // name
  google.protobuf.StringValue name = 2;
  // image url
  google.protobuf.StringValue image_url = 3;
}

// Backfill tax request
message BackfillTaxRequest {
  // delivery uuid of the order
  string delivery_uuid = 1;
  // user id of the shopper
  string shopper_user_id = 2;
  // tax value
  double tax = 3;
  // total value
  double total = 4;
  // barcode of receipt
  google.protobuf.StringValue receipt_barcode = 5;
}

// Backfill tax response
message BackfillTaxResponse {}

// Get Customer Masked Phone Number By OrderId Request
message GetCustomerMaskedPhoneNumberByOrderIdRequest {
  // delivery uuid
  string delivery_uuid = 1;
  // user id of the shopper
  string shopper_user_id = 2;
}

// Get Customer Masked Phone Number By OrderId Response
message GetCustomerMaskedPhoneNumberByOrderIdResponse {
  // customer phone number
  string phone_number = 1;
}

// UPC data
message StoreItemBarcodeData {
  // code/content
  string code = 1;
  // barcode format
  google.protobuf.StringValue barcode_format = 2;
}

// Get Store Items By UPCs Request
message GetStoreItemsByUPCsRequest {
  // store id
  string store_id = 1;
  // list of upcs
  repeated StoreItemBarcodeData upcs = 2;
  // shopper user id
  string shopper_user_id = 3;
}

// Get Store Items By UPCs Response
message GetStoreItemsByUPCsResponse {
  // list of store items with codes
  repeated StoreItemWithCodes store_items_with_codes = 1;
  // list of failed store items
  repeated FailedStoreItem failed_store_items = 2;
}

// Get Store Items By MSIDs Request
message GetStoreItemsByMerchantSuppliedIdsRequest {
  // store id
  string store_id = 1;
  // list of MSIDs
  repeated string merchant_supplied_ids = 2;
  // shopper user id
  string shopper_user_id = 3;
}

// Get Store Items By MSIDs Response
message GetStoreItemsByMerchantSuppliedIdsResponse {
  // list of store items with codes
  repeated StoreItemWithCodes store_items_with_codes = 1;
  // list of failed store items
  repeated FailedStoreItem failed_store_items = 2;
}

// failed store item
message FailedStoreItem {
  // request identifier of the failed store item, e.g. UPC code, or MSID
  string identifier = 1;
  // error message
  string error_message = 2;
}

// store item with their associated codes
message StoreItemWithCodes {
  // store items associated with this UPC
  StoreItemResponse store_item = 1;
  // list of UPC/DDID/MSID associated with this store item
  repeated string codes = 2;
}

// a single store item response
message StoreItemResponse {
  // store item category information
  message CategoryInfo {
    // reserve fields for backwards compatibility
    reserved 2;
    reserved "category_uuid";
    // L1 category name
    string category_name_l1 = 1;
    // category id
    string category_id = 3;
    // will have L2/L3/L4 category names in the future
  }
  // store item measurement information
  message MeasurementInfo {
    // unit of measurement
    string unit_of_measurement = 1;
    // unit classification
    string unit_classification = 2;
    // scan strategy
    string scan_strategy = 3;
  }
  // store id
  string store_id = 1;
  // merchant supplied id (external id)
  string merchant_supplied_id = 2;
  // name of the item
  string name = 3;
  // item category name
  CategoryInfo category_info = 4;
  // measurement information, used for weighted information
  MeasurementInfo measurement_info = 5;
  // image url
  google.protobuf.StringValue image_url = 6;
}

// Reset Order Request
message ResetOrderRequest {
  // delivery uuid
  string delivery_uuid = 1;
  // user id of the shopper
  string shopper_user_id = 2;
}

// Reset Order Response
message ResetOrderResponse {}

// Hide Order By User (Dashmart employee) Request
message HideOrderRequest {
  // delivery uuid
  string delivery_uuid = 1;
  // user id of the shopper
  string shopper_user_id = 2;
}

// Hide Order By User (Dashmart employee) Response
message HideOrderResponse {}

// get list of store item identifiers (store_id, msid) by store item uuid
message GetStoreItemsIdentifiersRequest {
  // store item identifiers by store_id + msid
  message MsidStoreIdList {
    // list of msid
    repeated string merchant_supplied_ids = 1;
    // store id
    string store_id = 2;
  }
  // store item (legacy) identifiers by store_item_uuid
  message StoreItemUuidList {
    // store item uuids
    repeated string store_item_uuids = 1;
  }
  // query by either the new store_id + msid or the legacy store_item_uuid
  oneof query {
    // list of (new) store_id + msid
    MsidStoreIdList store_id_msid_list = 1;
    // list of (legacy) store item uuids
    StoreItemUuidList store_item_uuid_list = 2;
  }
}

// response for GetStoreItemsIdentifiersRequest
message GetStoreItemsIdentifiersResponse {
  // store item identifiers
  message StoreItemIdentifier {
    // store item uuid
    string store_item_uuid = 1;
    // store id
    string store_id = 2;
    // merchant supplied id
    string merchant_supplied_id = 3;
  }
  // list of store item identifiers
  repeated StoreItemIdentifier store_item_identifiers = 1;
}

// temporary for migration -  Get Order Identifier Request
message GetOrderIdentifiersRequest {
  // reserve fields for backwards compatibility
  reserved 1, 2;
  reserved "delivery_uuid";
  reserved "delivery_uuid_or_order_uuid";
  // a list of delivery uuid or order uuid (from Postgres)
  repeated string delivery_uuid_or_order_uuids = 3;
}

// temporary for migration - Get Order Identifier Response
message GetOrderIdentifiersResponse {
  // reserve fields for backwards compatibility
  reserved 1, 2, 3;
  reserved "delivery_uuid";
  reserved "order_uuid";
  reserved "delivery_id";
  // a map of uuid -> order identifier, uuid is either order_uuid or delivery_uuid, depending on the request
  map<string, OrderIdentifier> uuid_to_order_identifier = 4;
}

// order identifier
message OrderIdentifier {
  // delivery uuid
  string delivery_uuid = 1;
  // order uuid
  string order_uuid = 2;
  // delivery id
  string delivery_id = 3;
}

// ConfirmOrderReady api request
message ConfirmOrderReadyRequest {
  // delivery uuid
  string delivery_uuid = 1;
  // shopper user id
  string shopper_user_id = 2;
}

// ConfirmOrderReady api response
message ConfirmOrderReadyResponse {}
