syntax = "proto3";

package ads.worker.v1;

import "ads/service_rpc.proto";
import "ads/worker/experiment.proto";
import "ads/worker/store_candidate.proto";
import "ads/worker/targeting_metadata.proto";
import "google/protobuf/wrappers.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.ads.worker";

// WorkerService Interface
service WorkerService {
  // Decide to use different worker request for different ads surfaces
  // i.e., we will add a new rpc method here for SP when we need to split the SP requests
  // The alternative is to use a single rpc method and add a field in the request to distinguish the ads surfaces
  // and dispatch based on request type, however, using different rpc methods can allow us to set timeout, retry
  // and circuit breaker settings differently.
  rpc GetSLResultFromWorker(GetSLResultFromWorkerRequest) returns (GetSLResultFromWorkerResponse);
}

// The request payload
message GetSLResultFromWorkerRequest {
  // The original ads request, pass along this to worker to build request context there
  // instead of passing all the fields in the RequestContext
  ads.GetAdsRequest ads_request = 1;
  // All the required candidate data for the worker
  repeated StoreCandidateData store_candidate_data = 2;
  // The canonicalizedQuery from search response
  google.protobuf.StringValue canonicalized_query = 3;
  // Targeting metadata to broadcast to the worker
  TargetingMetadata targeting_metadata = 4;
}

// The response payload
message GetSLResultFromWorkerResponse {
  // candidates ready for auction
  repeated AuctionableStoreCandidate auctionable_candidates = 1;
}
