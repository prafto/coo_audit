syntax = "proto3";

package ads;

import "ads/common.proto";
import "ads/wrapper.proto";
import "common/ads_promos.proto";
import "common/money.proto";
import "common/service_client_config.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "promotion/campaign.proto";
import "promotion/campaign_serving_service.proto";
import "promotion/placement.proto";
import "promotion/service.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.ads";

/*
   Ad service
*/
service AdService {
  // get ads based on current product surface
  rpc GetAds(GetAdsRequest) returns (GetAdsResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 600;
    option (service_client.client_method_config).retry_config.max_attempts = 1;
    option (service_client.client_method_config).circuit_breaker_config.failure_rate_threshold = 0.2;
    option (service_client.client_method_config).circuit_breaker_config.minimum_request_threshold = 50;
    option (service_client.client_method_config).circuit_breaker_config.counter_sliding_window_millis = 60000;
    option (service_client.client_method_config).circuit_breaker_config.circuit_open_window_millis = 30000;
  }

  /*
     Proxy endpoint from ads to promo item campaign endpoint:
     https://docs.google.com/document/d/1cmzw8Ll4IMesd5gwGv_2g_H2Cqb7oxpWbPbd-OYfUQU/edit?usp=sharing
     this endpoint proxies to promo GetItemCampaignsForStores endpoint to unblock short term item ads use case
  */
  rpc GetItemAds(GetItemAdsRequest) returns (GetItemAdsResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 500;
    option (service_client.client_method_config).retry_config.max_attempts = 1;
    option (service_client.client_method_config).circuit_breaker_config.failure_rate_threshold = 0.2;
    option (service_client.client_method_config).circuit_breaker_config.minimum_request_threshold = 50;
    option (service_client.client_method_config).circuit_breaker_config.counter_sliding_window_millis = 60000;
    option (service_client.client_method_config).circuit_breaker_config.circuit_open_window_millis = 30000;
  }

  /*
     endpoint to fetch brand/collection ads on store and category pages
     https://docs.google.com/document/d/1L53ZPgShAnxm6AkFvgcaP7ZTmcg3UmoOrdST2ROWtBs/edit#
  */
  rpc GetBrandAds(GetBrandAdsRequest) returns (GetBrandAdsResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 500;
    option (service_client.client_method_config).retry_config.max_attempts = 1;
    option (service_client.client_method_config).circuit_breaker_config.failure_rate_threshold = 0.2;
    option (service_client.client_method_config).circuit_breaker_config.minimum_request_threshold = 50;
    option (service_client.client_method_config).circuit_breaker_config.counter_sliding_window_millis = 60000;
    option (service_client.client_method_config).circuit_breaker_config.circuit_open_window_millis = 30000;
  }

  /*
     endpoint for getting auctioned homepage banners
     https://docs.google.com/document/d/1chMxK5f5Copu53WGWpm4ONRgUA9TF4rfLpOwJFga_gM/edit
  */
  rpc GetBanners(GetBannersRequest) returns (GetBannersResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 600;
    option (service_client.client_method_config).retry_config.max_attempts = 1;
    option (service_client.client_method_config).circuit_breaker_config.failure_rate_threshold = 0.2;
    option (service_client.client_method_config).circuit_breaker_config.minimum_request_threshold = 50;
    option (service_client.client_method_config).circuit_breaker_config.counter_sliding_window_millis = 60000;
    option (service_client.client_method_config).circuit_breaker_config.circuit_open_window_millis = 30000;
  }

  /*
     endpoint for fetching non-auction rx item ads
     https://docs.google.com/document/d/1B6hCByo2Hlxsu49Vs1nN8uJoLbh1b9r1qd42rDCztiw/edit
  */
  rpc GetRxItemAds(GetRxItemAdsRequest) returns (GetRxItemAdsResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 600;
    option (service_client.client_method_config).retry_config.max_attempts = 1;
    option (service_client.client_method_config).circuit_breaker_config.failure_rate_threshold = 0.2;
    option (service_client.client_method_config).circuit_breaker_config.minimum_request_threshold = 50;
    option (service_client.client_method_config).circuit_breaker_config.counter_sliding_window_millis = 60000;
    option (service_client.client_method_config).circuit_breaker_config.circuit_open_window_millis = 30000;
  }

  // One single endpoint in adex to get all promos
  rpc GetPromos(GetPromosRequest) returns (GetPromosResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 600;
    option (service_client.client_method_config).retry_config.max_attempts = 1;
    option (service_client.client_method_config).circuit_breaker_config.failure_rate_threshold = 0.2;
    option (service_client.client_method_config).circuit_breaker_config.minimum_request_threshold = 50;
    option (service_client.client_method_config).circuit_breaker_config.counter_sliding_window_millis = 60000;
    option (service_client.client_method_config).circuit_breaker_config.circuit_open_window_millis = 30000;
  }

  // rpc getIncentivesForStores
  rpc GetIncentivesForStores(GetIncentivesForStoresRequest) returns (GetIncentivesForStoresResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 500;
    option (service_client.client_method_config).circuit_breaker_config.failure_rate_threshold = 0.3;
    option (service_client.client_method_config).circuit_breaker_config.counter_sliding_window_millis = 60000;
    option (service_client.client_method_config).circuit_breaker_config.circuit_open_window_millis = 20000;
  }

  // rpc getDeliveryFeeIncentivesForStores
  rpc GetDeliveryFeeIncentivesForStores(GetDeliveryFeeIncentivesForStoresRequest) returns (GetDeliveryFeeIncentivesForStoresResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 500;
    option (service_client.client_method_config).circuit_breaker_config.failure_rate_threshold = 0.3;
    option (service_client.client_method_config).circuit_breaker_config.counter_sliding_window_millis = 60000;
    option (service_client.client_method_config).circuit_breaker_config.circuit_open_window_millis = 20000;
  }

  // rpc getCampaignsForOrderCartPricing
  rpc GetCampaignsForOrderCartPricing(GetCampaignsForOrderCartPricingRequest) returns (GetCampaignsForOrderCartPricingResponse) {
    option (service_client.client_method_config).retry_config.max_attempts = 2;
    option (service_client.client_method_config).retry_config.do_retry_grpc_code = 13;

    option (service_client.client_method_config).response_attempt_timeout_millis = 500;
    option (service_client.client_method_config).circuit_breaker_config.failure_rate_threshold = 0.3;
    option (service_client.client_method_config).circuit_breaker_config.counter_sliding_window_millis = 60000;
    option (service_client.client_method_config).circuit_breaker_config.circuit_open_window_millis = 20000;
  }

  // RPC for product/item based campaigns
  // initially used to support cpg/cng complex deals
  // RPC used to decorate collections, categories, filter/search results
  // Given a list of item ids, return any eligible promo for each item
  rpc GetProductPromotions(GetProductPromotionsRequest) returns (GetProductPromotionsResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 500;
    option (service_client.client_method_config).circuit_breaker_config.failure_rate_threshold = 0.3;
    option (service_client.client_method_config).circuit_breaker_config.counter_sliding_window_millis = 60000;
    option (service_client.client_method_config).circuit_breaker_config.circuit_open_window_millis = 20000;
  }

  // API endpoint for global search sponsored product ads: search for all eligible sponsored product ads around the user
  rpc GetGlobalSearchSponsoredProductAds(GetGlobalSearchSponsoredProductAdsRequest) returns (GetGlobalSearchSponsoredProductAdsResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 500;
    option (service_client.client_method_config).retry_config.max_attempts = 1;
    option (service_client.client_method_config).circuit_breaker_config.failure_rate_threshold = 0.2;
    option (service_client.client_method_config).circuit_breaker_config.minimum_request_threshold = 50;
    option (service_client.client_method_config).circuit_breaker_config.counter_sliding_window_millis = 60000;
    option (service_client.client_method_config).circuit_breaker_config.circuit_open_window_millis = 30000;
  }

  // benchmarking endpoint
  rpc BenchmarkESQuery(BenchmarkESQueryRequest) returns (BenchmarkESQueryResponse);

  // rpc validatePromotion
  rpc ValidatePromotion(ValidatePromotionRequest) returns (ValidatePromotionResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 500;
    option (service_client.client_method_config).circuit_breaker_config.failure_rate_threshold = 0.3;
    option (service_client.client_method_config).circuit_breaker_config.counter_sliding_window_millis = 60000;
    option (service_client.client_method_config).circuit_breaker_config.circuit_open_window_millis = 20000;
  }
}

// request for getAds
message GetAdsRequest {
  // ad request id
  string id = 1;
  /* one single ad bid request can include a list of Imp/Inventories
     A Imp describe an ad placement or impression being auctioned / offered
     refer OpenRTBv2.6/3.2.4
  */
  repeated Imp imp = 2;

  // user
  User user = 3;

  // indicator of test mode if auctions are not billable
  // 0 = live mode, 1 = test mode
  int32 test = 4;

  // bidding currency
  string cur = 5;

  /* doordash extension */

  // reserved for organic grow based sponsored listing
  // organic grow based: sponsored stores come from search result
  repeated StoreData stores = 6;
  // pagination control, inherit from existing feature
  // response offset
  google.protobuf.Int64Value offset = 7;
  // response limit
  google.protobuf.Int64Value limit = 8;

  // test mode for testing different phases in "GetAds"
  TestMode test_mode = 9;

  // feed request id
  string feed_id = 10;

  // Historically we filtered out lift campaign experiment ads for control users in ad-exchange.
  // As part of ghost ads we are moving toward returning experiment metadata (e.g. experiment name,
  // treatment bucket names) and doing this filtering in the feed service.
  bool defer_lift_experiment_filtering = 11;

  // scheduled order time
  google.protobuf.Timestamp scheduled_time = 12;
}

// response for GetAds
message GetAdsResponse {
  // request id
  string id = 1;

  /*
     - one or more bidder seat(merchant)
     - each bidder seat containing one or more bid for different
        inventory (imp)
  */
  repeated SeatBid seatbid = 2;

  /* currency */
  string cur = 3;

  // query intent
  string query_intent = 4;
}

// GetItemAdsRequest represents query to ad exchange proxy endpoint
// to retrieval item ads in promo item campaign endpoint
message GetItemAdsRequest {
  // request id
  string id = 1;

  // user
  User user = 2;

  // store item query
  repeated ads_promos.v1.StoreItemQuery store_item_queries = 3;

  // feed request id
  string feed_id = 4;

  // placements for retrieval
  repeated promotion_service.Placement.PlacementType placement_types = 5;

  // ad group ids for wolt campaign retrievals
  repeated string ad_group_ids = 6;

  // Historically we filtered out lift campaign experiment ads for control users in ad-exchange.
  // As part of ghost ads we are moving toward returning experiment metadata (e.g. experiment name,
  // treatment bucket names) and doing this filtering in the feed service.
  bool defer_lift_experiment_filtering = 7;
}

// GetItemAdsResponse returns list of seat bid for item ads
message GetItemAdsResponse {
  // request id
  string id = 1;

  /*
     - one or more bidder seat(merchant)
     - each bidder seat containing one or more bid for different
         inventory (imp)
  */
  repeated SeatBid seat_bids = 2;
}

// specify a raw elasticsearch query for benchmarking
message BenchmarkESQueryRequest {
  // index to run query against
  string index_name = 1;

  // encode a raw query in a JSON string
  string query = 2;
}

// es benchmarking response
message BenchmarkESQueryResponse {
  // a response string for debugging
  string response = 1;
}

// GetBrandAdsRequest represents query to ad exchange proxy endpoint
// to retrieval collection/brand ads in promo item campaign endpoint
message GetBrandAdsRequest {
  // request id
  string id = 1;

  // user
  User user = 2;

  // store item query
  repeated ads_promos.v1.StoreItemQuery store_item_queries = 3;

  // feed request id
  string feed_id = 4;

  // ad group ids for wolt campaign retrievals
  repeated string ad_group_ids = 5;

  // placements for retrieval
  promotion_service.Placement.PlacementType placement_type = 6;
}

// GetBrandAdsResponse returns list of seat bid for brand/collection ads
message GetBrandAdsResponse {
  // request id
  string id = 1;

  /*
     - one or more bidder seat(merchant)
     - each bidder seat containing one or more bid for different
         inventory (imp)
  */
  repeated SeatBid seat_bids = 2;
}

// GetBannersRequest represents query to ad exchange proxy endpoint to retrieval homepage banners
message GetBannersRequest {
  // request id
  string id = 1;

  // user
  User user = 2;

  // campaigns info used for ranking
  repeated CampaignInfo campaign_infos = 3;

  // indicates whether this request should go through ranking / auction
  google.protobuf.BoolValue is_auctioned = 4;
}

// should return top 4 homepage banner campaigns
message GetBannersResponse {
  // request id
  string id = 1;
  /*
     - one or more bidder seat(merchant)
     - each bidder seat containing one or more bid for different
        inventory (imp)
  */
  repeated SeatBid seat_bids = 2;
}

// GetRxItemAdsRequest represents query to ad exchange proxy endpoint to retrieve rx item ads
message GetRxItemAdsRequest {
  // request id
  string id = 1;

  // user consumer_id
  google.protobuf.StringValue consumer_id = 2;

  // store_id
  string store_id = 3;

  // feed request id
  string feed_id = 4;
}

// should return all available products for that store that are running ad campaigns
message GetRxItemAdsResponse {
  // request id
  string id = 1;
  // list of all available products that are running ad campaigns for the given store
  repeated RxItemAd rx_item_ads = 2;
}

// GetPromosRequest takes the common request from GetCampaignPlacementsRequest
message GetPromosRequest {
  // common request
  promotion_service.CommonRequest request = 1;
}

// GetPromosResponse takes the placements from the GetCampaignPlacementsResponse
message GetPromosResponse {
  // a list of placement objects
  repeated promotion_service.Placements placements = 1;
}

// GetGlobalSearchSponsoredProductAdsRequest represents query to ad exchange proxy endpoint to retrieve sponsored product ads on global search surface
message GetGlobalSearchSponsoredProductAdsRequest {
  // request id
  string id = 1;
  // user
  User user = 2;
  // ads query
  AdsQuery ads_query = 3;
  // feed request id
  string feed_id = 4;
}

// should return all active, available sponsored product ads from user's nearby stores
message GetGlobalSearchSponsoredProductAdsResponse {
  // request id - this can be deprecated as well
  string id = 1;
  // DEPRECATED - will remove once syncing with adex
  AdCandidatesByIntent primary_intent_candidates = 2 [deprecated = true];
  // ad candidates
  repeated AdCandidate ad_candidates = 3;
}

// represents a single ad candidate with associated data to the auction winner
message AdCandidate {
  // auction winner
  Bid bid = 1;
  // store ids associated with the auction winner - this overrides the store_id in the bid
  repeated string store_ids = 2;
  // taxonomy L1 id of the ad product
  string taxonomy_l1_id = 3;
  // taxonomy L2 id of the ad product
  string taxonomy_l2_id = 4;
}

// represents a collection of sponsored product ad candidates paired with a query intent used to rank & run auction
message AdCandidatesByIntent {
  // query intent used to rank & auction the ad candidates
  string query_intent = 1;
  // auction winners
  repeated Bid bids = 2;
}

// Query used to retrieve ads
message AdsQuery {
  // keyword query used to retrieve ads
  string keyword_query = 1;
  // category name used to retrieve ads
  string category_name = 2;
}

// GetIncentivesForStores request
// Given consumer id, a list of stores, return the incentives for the given store lists and consumer id
message GetIncentivesForStoresRequest {
  // getIncentivesForStores request
  promotion_service.GetIncentivesForStoresRequest request = 1;
}

// GetIncentivesForStores response
message GetIncentivesForStoresResponse {
  // a list of incentivesForStores
  // each IncentivesForStore will contain a list of incentives
  repeated promotion_service.IncentivesForStore incentives_for_stores = 1;
}

// GetDeliveryFeeIncentivesForStores request
// Given consumer id, a list of stores, return the incentives for the given store lists and consumer id
message GetDeliveryFeeIncentivesForStoresRequest {
  // getIncentivesForStores request
  promotion_service.GetDeliveryFeeIncentivesForStoresRequest request = 1;
}

// GetDeliveryFeeIncentivesForStores response
message GetDeliveryFeeIncentivesForStoresResponse {
  // a list of incentivesForStores
  // each IncentivesForStore will contain a list of incentives
  repeated promotion_service.IncentivesForStore incentives_for_stores = 1;
}

// GetCampaignsForOrderCartPricingRequest
message GetCampaignsForOrderCartPricingRequest {
  // GetCampaignsForOrderCartPricingRequest
  promotion_service.GetCampaignsForOrderCartPricingRequest request = 1;
}

// GetCampaignsForOrderCartPricingResponse wrapped around the response from promotion service
message GetCampaignsForOrderCartPricingResponse {
  // GetCampaignsForOrderCartPricingResponse
  promotion_service.GetCampaignsForOrderCartPricingResponse response = 1;
}

// GetProductPromotionsRequest
message GetProductPromotionsRequest {
  // GetProductPromotionsRequest
  promotion_service.GetProductPromotionsRequest request = 1;
}

// GetProductPromotionsResponse takes a list of ItemPromotion
message GetProductPromotionsResponse {
  // for each eligible (store, campaign) combination for consumer, we return back subset of items from request
  repeated promotion_service.ItemPromotion item_promotions = 1;
}

// ValidatePromotion request
message ValidatePromotionRequest {
  // validatePromotion request
  promotion_service.ValidatePromotionRequest request = 1;
}

// ValidatePromotion response
message ValidatePromotionResponse {
  //validatePromotion response
  promotion_service.ValidatePromotionResponse response = 1;
}
