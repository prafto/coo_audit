syntax = "proto3";

// buf:lint:ignore DIRECTORY_SAME_PACKAGE
// buf:lint:ignore PACKAGE_VERSION_SUFFIX
package ads.events;

option java_multiple_files = true;
option java_generic_services = true;
// buf:lint:ignore PACKAGE_SAME_JAVA_PACKAGE
option java_package = "com.doordash.rpc.ads.events";

import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

/**
 * Each TrackingEvent contains a custom-defined piece of data,
 * often recording a decision made by an application logic.
 *
 * A trace is a sequence of logically related tracking events.
 * Traces are organized in logical groups called trace_namespaces.
 * Each trace is uniquely identified by its namespace and a trace ID.
 *
 * Every client is responsible for creating their own consistent data
 * conventions for context and data fields.
 *
 * As a concrete example, in the trace_namespace 'ads_serving', each trace consists
 * of multiple events ("filter_quality_floor", "filter_budget_cap", etc) that
 * correspond to different steps in serving a single user request across multiple systems.
 *
 * - All these events have the same trace_id
 * - Each event may have different data and context, that captures the variety of decisions
 *   made in different steps
 *
 * {
 *   'trace_namespace': 'ads_serving',
 *   'trace_id': '5ee187df-c555-4f2e-b224-74ed510a3b40',
 *   'context': {
 *     'dd_context': { 'dd_device_id': 'dx_0000', 'consumer_id': '1234', ... },
 *      ...
 *   },
 *   'data': {
 *     'event_type': 'filter_quality_floor', 'candidates_removed': {...}, 'quality_floor': '0.0005'
 *   },
 *   'occurred_at': '1664820000'
 * }
 * 
 * {
 *   'trace_namespace': 'ads_serving',
 *   'trace_id': '5ee187df-c555-4f2e-b224-74ed510a3b40',
 *   'context': {
 *     'dd_context': { 'dd_device_id': 'dx_0000', 'consumer_id': '1234', ... },
 *      ...
 *   },
 *   'data': { 'event_type': 'filter_budget_cap', 'candidates_removed': {...} },
 *   'occurred_at': '1664820055'
 * }
 *
 */
message TrackingEvent {
    // Logical group in which trace_id is unique
    // Example: ad_serving
    google.protobuf.StringValue trace_namespace = 1;

    // All events in a trace contain the same trace ID
    // We recommend using the OpenTelemetry tracer for trace_id if available,
    // but clients can create their own trace_id (usually an uuid string)
    google.protobuf.StringValue trace_id = 2;

    // Contextual information about the process from which the event is emitted,
    // defined by client
    google.protobuf.StringValue context = 3;

    // Tracking event information, defined by client
    google.protobuf.StringValue data = 4;

    // Timestamp of when event occurred
    google.protobuf.Timestamp occurred_at = 5;
}
