syntax = "proto3";

package risk_platform.services.v1;

import "doordash.api/annotations.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_outer_classname = "FraudFrictionServiceProtos";
option java_package = "com.doordash.rpc.risk_platform.services";

// Service for updating mx/cx/dx frictions
service FraudFrictionService {
  option (doordash.api.service) = {
    name: "risk-gateway-web"
    url: "risk-gateway-web.service.prod.ddsd"
    port: 50051
    name_spaces: ["risk-data-platform"]
    owner: {
      name: "risk-c-r-fraud"
      id: "risk-c-r-fraud"
      slack_channel: "#ask-cx-fraud"
      email_alias: "fraud-cx-eng@doordash.com"
    }
    target_products: [INTERNAL]
  };
  // Submits a request to perform the friction update
  rpc SubmitFraudFriction(SubmitFraudFrictionRequest) returns (SubmitFraudFrictionResponse) {
    option (google.api.http) = {
      post: "/risk-data-platform/v1/fraud-friction-service"
      body: "*"
    };

    option (doordash.api.endpoint) = {
      tier: T0
      lifecycle: DEV
      authorization: [DD_USER]
      target_products: [INTERNAL]
    };
  }
}

// Request message for SubmitFraudFrictionRequest
message SubmitFraudFrictionRequest {
  // Entity type
  EntityType entity_type = 1;
  // Entity id
  string entity_id = 2;
  // User id
  string user_id = 3;
  // choose one of the decisions - Mx, Cx, or Dx
  reserved 4;
  reserved "mx_decision";
  reserved 5;
  reserved "cx_decision";
  reserved 6;
  reserved "dx_decision";
  reserved 7;
  reserved "mx_reason";
  reserved 8;
  reserved "cx_reason";
  reserved 9;
  reserved "dx_reason";
  // notes
  string notes = 10;
  // choose one of the decisions - Mx, Cx, or Dx
  oneof fraud_friction_decision {
    // Mx decision
    MxDecision mx_fraud_friction_decision = 11;
    // Cx decision
    CxDecision cx_fraud_friction_decision = 12;
    // Dx decision
    DxDecision dx_fraud_friction_decision = 13;
  }
  // choose one of the reasons - Mx, Cx, or Dx
  oneof fraud_friction_reason {
    // Mx reason
    MxReason mx_fraud_friction_reason = 14;
    // Cx reason
    CxReason cx_fraud_friction_reason = 15;
    // Dx reason
    DxReason dx_fraud_friction_reason = 16;
  }
}

// Response message for frictioning
message SubmitFraudFrictionResponse {
  // success
  bool is_success = 1;
}

// EntityType
enum EntityType {
  // Default unspecified
  ENTITY_TYPE_UNSPECIFIED = 0;
  // Merchant
  ENTITY_TYPE_MERCHANT = 1;
  // Dasher
  ENTITY_TYPE_DASHER = 2;
  // Consumer
  ENTITY_TYPE_CONSUMER = 3;
}

// message that holds mx decision
message MxDecision {
  // decision
  MxFraudFrictionDecision decision = 1;
}

// message that holds cx decision
message CxDecision {
  // decision
  CxFraudFrictionDecision decision = 1;
}

// message that holds dx decision
message DxDecision {
  // decision
  DxFraudFrictionDecision decision = 1;
}

// MxFraudFrictionDecision
enum MxFraudFrictionDecision {
  // Default unspecified
  MX_FRAUD_FRICTION_DECISION_UNSPECIFIED = 0;
  // Confirmed Fraud
  MX_FRAUD_FRICTION_DECISION_CONFIRMED_FRAUD = 1;
  // Not Fraud
  MX_FRAUD_FRICTION_DECISION_NOT_FRAUD = 2;
}

// CxFraudFrictionDecision
enum CxFraudFrictionDecision {
  // Default unspecified
  CX_FRAUD_FRICTION_DECISION_UNSPECIFIED = 0;
}

// DxFraudFrictionDecision
enum DxFraudFrictionDecision {
  // Default unspecified
  DX_FRAUD_FRICTION_DECISION_UNSPECIFIED = 0;
}

// message that holds mx reason
message MxReason {
  // reason
  MxFraudFrictionReason reason = 1;
}

// message that holds cx reason
message CxReason {
  // reason
  CxFraudFrictionReason reason = 1;
}

// message that holds dx reason
message DxReason {
  // reason
  DxFraudFrictionReason reason = 1;
}

// MxFraudFrictionReason
enum MxFraudFrictionReason {
  // Default unspecified
  MX_FRAUD_FRICTION_REASON_UNSPECIFIED = 0;
  // Fake Mx
  MX_FRAUD_FRICTION_REASON_FAKE_MX = 1;
  // Impersonator
  MX_FRAUD_FRICTION_REASON_IMPERSONATOR = 2;
  // Other
  MX_FRAUD_FRICTION_REASON_OTHER = 3;
  // Not fraud
  MX_FRAUD_FRICTION_REASON_NOT_FRAUD = 4;
  // Terminated partnership
  MX_FRAUD_FRICTION_REASON_TERMINATED_PARTNERSHIP = 5;
  // Abusive Mx
  MX_FRAUD_FRICTION_REASON_ABUSIVE_MX = 6;
  // TOS (terms of service) Breach
  MX_FRAUD_FRICTION_REASON_TOS_BREACH = 7;
}

// CxFraudFrictionReason
enum CxFraudFrictionReason {
  // Default unspecified
  CX_FRAUD_FRICTION_REASON_UNSPECIFIED = 0;
}

// DxFraudFrictionReason
enum DxFraudFrictionReason {
  // Default unspecified
  DX_FRAUD_FRICTION_REASON_UNSPECIFIED = 0;
}
