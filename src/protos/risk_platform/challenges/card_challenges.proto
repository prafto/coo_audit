syntax = "proto3";

package risk_platform.challenges.v1;

import "doordash.api/annotations.proto";
import "doordash.api/field_validate.proto";
import "google/api/annotations.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_outer_classname = "CardChallengesProtos";
option java_package = "com.doordash.rpc.risk_platform.challenges";

// Service card related challenges
service CardChallengesService {
  option (doordash.api.service) = {
    name: "risk-gateway-web"
    url: "risk-gateway-web.service.prod.ddsd"
    port: 50051
    name_spaces: [
      "risk",
      "challenges",
      "card"
    ]
    api_key_name: "CARD_CHALLENGES_UG_API_KEY"
    owner: {
      name: "risk-payment-fraud"
      id: "risk-payment-fraud"
      slack_channel: "#payment-fraud-alerts"
      email_alias: "payment_fraud_engineering@doordash.com"
    }
    target_products: [CX]
  };
  // Set the acceptance status of tap-to-verify terms on consumer
  rpc SetTapTermsAcceptanceStatus(SetTapTermsAcceptanceStatusRequest) returns (SetTapTermsAcceptanceStatusResponse) {
    option (google.api.http) = {
      post: "/risk/v1/challenges/card/set_tap_terms_acceptance_status"
      body: "*"
    };

    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [CX_USER]
      target_products: [CX]
    };
  }

  // Get the acceptance status of tap-to-verify terms on consumer
  rpc GetTapTermsAcceptanceStatus(GetTapTermsAcceptanceStatusRequest) returns (GetTapTermsAcceptanceStatusResponse) {
    option (google.api.http) = {get: "/risk/v1/challenges/card/get_tap_terms_acceptance_status"};

    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [CX_USER]
      target_products: [CX]
    };
  }

  // Generates a connection token for initializing Stripe terminal on client for tap-to-verify
  rpc GenerateTerminalConnectionToken(GenerateTerminalConnectionTokenRequest) returns (GenerateTerminalConnectionTokenResponse) {
    option (google.api.http) = {get: "/risk/v1/challenges/card/get_connection_token"};

    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [CX_USER]
      target_products: [CX]
    };
  }

  // Creates a SetupIntent to attach tap-to-verify card details
  rpc CreateSetupIntent(CreateSetupIntentRequest) returns (CreateSetupIntentResponse) {
    option (google.api.http) = {get: "/risk/v1/challenges/card/create_setup_intent"};

    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [CX_USER]
      target_products: [CX]
    };
  }

  // Verifies a tap-to-verify challenge attempt
  rpc VerifyTapToVerify(VerifyTapToVerifyRequest) returns (VerifyTapToVerifyResponse) {
    option (google.api.http) = {
      post: "/risk/v1/challenges/card/tap_verify"
      body: "*"
    };

    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [CX_USER]
      target_products: [CX]
    };
  }

  // Verifies a Dyneti card scan challenge attempt
  rpc VerifyDynetiCardScan(VerifyDynetiCardScanRequest) returns (VerifyDynetiCardScanResponse) {
    option (google.api.http) = {
      post: "/risk/v1/challenges/card/dyneti_verify"
      body: "*"
    };

    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [CX_USER]
      target_products: [CX]
    };
  }
}

// Response to verify Dyneti Card Scan challenge
message VerifyDynetiCardScanResponse {
  // Successful verification, an unsuccessful verification will return error propagated by Asgard Rich Error
  CardChallengeSuccess success = 1;
}

// Request to verify Dyneti Card Scan challenge
message VerifyDynetiCardScanRequest {
  // PaymentCard id
  string payment_card_id = 1 [(doordash.api.validate.rules).missing_value = {action: FAIL}];
  // Verify token from Stripe
  string verify_token = 2;
  // Consumer id
  string consumer_id = 3 [(doordash.api.inject_id) = CX_ID];
  // Cart id
  string cart_id = 5;
  // Dyneti scan id
  string scan_id = 6 [(doordash.api.validate.rules).missing_value = {action: FAIL}];
  // Dyneti payload id
  string payload_id = 7 [(doordash.api.validate.rules).missing_value = {action: FAIL}];
}

// Request to verify tap-to-verify challenge
message VerifyTapToVerifyRequest {
  // Consumer id
  string consumer_id = 1 [(doordash.api.inject_id) = CX_ID];
  // SetupIntent id
  string setup_intent_id = 2 [(doordash.api.validate.rules).missing_value = {action: FAIL}];
  // PaymentCard id
  string payment_card_id = 3 [(doordash.api.validate.rules).missing_value = {action: FAIL}];
  // Cart id
  string cart_id = 4;
}

// Response for successful challenge attempt
message CardChallengeSuccess {}

// Response to verify tap-to-verify challenge
message VerifyTapToVerifyResponse {
  // Successful verification, an unsuccessful verification will return error propagated by Asgard Rich Error
  CardChallengeSuccess success = 1;
}

// Request to create setup intent
message CreateSetupIntentRequest {
  // Consumer id
  string consumer_id = 1 [(doordash.api.inject_id) = CX_ID];
}

// Response to create setup intent
message CreateSetupIntentResponse {
  // SetupIntent id
  string setup_intent_id = 1;
  // Client secret attached to setup intent
  string client_secret = 2;
}

// Request to generate a connection token for initializing Stripe terminal on client for tap-to-verify
message GenerateTerminalConnectionTokenRequest {
  // Consumer id
  string consumer_id = 1 [(doordash.api.inject_id) = CX_ID];
}

// Response with connection token to intiialize Stripe terminal on client for tap-to-verify
message GenerateTerminalConnectionTokenResponse {
  // Connection token to initialize Stripe terminal on client
  string connection_token = 1;
}

// Request to set the acceptance status of tap-to-verify terms on consumer
message SetTapTermsAcceptanceStatusRequest {
  // Consumer id
  string consumer_id = 1 [(doordash.api.inject_id) = CX_ID];
}

// Response with the acceptance status of tap-to-verify terms on consumer
message SetTapTermsAcceptanceStatusResponse {}

// Request to get the acceptance status of tap-to-verify terms on consumer
message GetTapTermsAcceptanceStatusRequest {
  // Consumer id
  string consumer_id = 1 [(doordash.api.inject_id) = CX_ID];
}

// Response with the acceptance status of tap-to-verify terms on consumer
message GetTapTermsAcceptanceStatusResponse {
  // Whether the consumer has accepted the tap-to-verify terms
  bool has_accepted = 1;
}
