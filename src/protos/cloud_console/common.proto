syntax = "proto3";

package cloud_console.api.v1;

import "google/protobuf/descriptor.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option go_package = "github.com/doordash/services-protobuf/generated/cloud_console";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.cloud_console.rpc.api";

// Describes requester details
message Requester {
  // Slack id of the requester
  google.protobuf.StringValue slack_id = 1;
  // Email address of the requester
  google.protobuf.StringValue email = 2;
}

// Describes service owner details
message ServiceOwner {
  // Team that owns this service
  google.protobuf.StringValue team_name = 1;

  // Email address of the team that supports this service
  google.protobuf.StringValue team_email = 2;

  // Team slack channel to receive notifications
  google.protobuf.StringValue team_slack = 3;

  // Team Pagerduty alias for service
  google.protobuf.StringValue team_pd_alias = 4;

  // Project lead of this service
  google.protobuf.StringValue team_lead = 5;

  // Scalyr log group assigned for the team
  google.protobuf.StringValue team_logging_group = 6;

  // Parent domain of the team
  google.protobuf.StringValue domain = 7;

  // Default Github team name for this team.
  google.protobuf.StringValue github_team_name = 8;

  // Okta group for the team
  google.protobuf.StringValue okta_group = 9;
}

// Supported service states
enum ServiceState {
  // Unspecified state
  SERVICE_STATE_UNSPECIFIED = 0;

  // New service request, pending approval
  SERVICE_STATE_PENDING_APPROVAL = 1;

  // Approved
  SERVICE_STATE_APPROVED = 2;

  // Provisioning in progress
  SERVICE_STATE_PROVISIONING = 3;

  // Service is provisioned, ready for use
  SERVICE_STATE_READY = 4;

  // Provisioning failed
  SERVICE_STATE_FAILED = 5;

  // New service creation request is declined
  SERVICE_STATE_DECLINED = 6;
}

// Service tiers
enum ServiceTier {
  // Unspecified tier
  SERVICE_TIER_UNSPECIFIED = 0;

  // Tier 0
  SERVICE_TIER_0 = 1;

  // Tier 1
  SERVICE_TIER_1 = 2;

  // Tier 2
  SERVICE_TIER_2 = 3;

  // Tier 3
  SERVICE_TIER_3 = 4;
}

// Service type
enum ServiceType {
  // Service type unspecified
  SERVICE_TYPE_UNSPECIFIED = 0;

  // Kotlin server application
  SERVICE_TYPE_KOTLIN_SERVER = 1;

  // Go server application
  SERVICE_TYPE_GO_SERVER = 2;

  // NodeJS server application
  SERVICE_TYPE_NODEJS_SERVER = 3;
}

// Supported service resource states
enum ServiceResourceState {
  // Unspecified state
  SERVICE_RESOURCE_STATE_UNSPECIFIED = 0;

  // New service resource request, to be provisioned
  SERVICE_RESOURCE_STATE_PENDING = 1;

  // Provisioning in progress
  SERVICE_RESOURCE_STATE_PROVISIONING = 2;

  // Service resource is provisioned successfully
  SERVICE_RESOURCE_STATE_COMPLETED = 3;

  // Service resource provisioning has failed
  SERVICE_RESOURCE_STATE_FAILED = 4;

  // Service resource provisioning has skipped
  SERVICE_RESOURCE_STATE_SKIPPED = 5;
}

// Service resource type
enum ServiceResourceType {
  // Service type unspecified
  SERVICE_RESOURCE_TYPE_UNSPECIFIED = 0;

  // Service catalog registration
  SERVICE_RESOURCE_TYPE_SERVICE_CATALOG = 1;

  // Default proto generation
  SERVICE_RESOURCE_TYPE_DEFAULT_PROTO = 2;

  // Service scaffolding with a template
  SERVICE_RESOURCE_TYPE_SERVICE_SCAFFOLDING = 3;

  // Setup default AWS ECR repository
  SERVICE_RESOURCE_TYPE_SETUP_ECR = 4;

  // Setup default AWS IAM role
  SERVICE_RESOURCE_TYPE_SETUP_IAM = 5;

  // Setup service mesh staging
  SERVICE_RESOURCE_TYPE_SETUP_SERVICE_MESH_STAGING = 6;

  // Setup service mesh production
  SERVICE_RESOURCE_TYPE_SETUP_SERVICE_MESH_PRODUCTION = 7;

  // Setup k8s namespace
  SERVICE_RESOURCE_TYPE_SETUP_K8S = 8;

  // Setup OKTA group
  SERVICE_RESOURCE_TYPE_SETUP_OKTA_GROUP = 9;

  // Setup staging vault namespace
  SERVICE_RESOURCE_TYPE_SETUP_VAULT_STAGING = 10;

  // Setup production vault namespace
  SERVICE_RESOURCE_TYPE_SETUP_VAULT_PRODUCTION = 11;

  // Setup staging default staging infrastructure
  SERVICE_RESOURCE_TYPE_SETUP_DEFAULT_INFRA_STAGING = 12;

  // Setup staging default production infrastructure
  SERVICE_RESOURCE_TYPE_SETUP_DEFAULT_INFRA_PRODUCTION = 13;

  // Setup inter-cell traffic configuration
  SERVICE_RESOURCE_TYPE_SETUP_INTER_CELL_TRAFFIC_STAGING = 14;

  // Reserved resource type for tags verification
  SERVICE_RESOURCE_TYPE_TAGS = 15;

  // Setup inter-cell traffic configuration
  SERVICE_RESOURCE_TYPE_SETUP_INTER_CELL_TRAFFIC_PRODUCTION = 16;

  // Setup traffic router configuration
  SERVICE_RESOURCE_TYPE_SETUP_TRAFFIC_ROUTERS_STAGING = 17;

  // Setup traffic router configuration
  SERVICE_RESOURCE_TYPE_SETUP_TRAFFIC_ROUTERS_PRODUCTION = 18;

  // Setup Spinnaker
  SERVICE_RESOURCE_TYPE_SETUP_SPINNAKER = 19;

  // Trigger/verify initial production deployment
  SERVICE_RESOURCE_TYPE_DEPLOYMENT_PRODUCTION = 20;

  // Verify end to end configuration and connectivity
  SERVICE_RESOURCE_TYPE_HEALTH_CHECK_PRODUCTION = 21;

  // Trigger/verify initial staging deployment
  SERVICE_RESOURCE_TYPE_DEPLOYMENT_STAGING = 22;

  // Verify end to end configuration and connectivity
  SERVICE_RESOURCE_TYPE_HEALTH_CHECK_STAGING = 23;

  reserved 24;
  reserved 25;
  reserved "SERVICE_RESOURCE_TYPE_RESERVED_09";
  reserved "SERVICE_RESOURCE_TYPE_RESERVED_10";

  // Setup to generate/update service/application config (_infra/service-configs)
  SERVICE_RESOURCE_TYPE_SETUP_CONFIG = 26;

  // Setup Kafka credentials
  SERVICE_RESOURCE_TYPE_SETUP_KAFKA_CREDENTIALS = 27;

  // Setup sandbox namespace
  SERVICE_RESOURCE_TYPE_SETUP_K8S_SANDBOX = 28;

  // Resource type tracks new configuration change
  SERVICE_RESOURCE_TYPE_CONFIG_CHANGE = 29;

  // Resource type tracks version details
  SERVICE_RESOURCE_TYPE_FIND_VERSION = 30;

  // Resource type tracks presentation gateway endpoint scaffolding
  SERVICE_RESOURCE_TYPE_ENDPOINT_SCAFFOLDING = 31;

  // Setup traffic router configuration
  SERVICE_RESOURCE_TYPE_SETUP_TRAFFIC_ROUTERS = 32;

  // Setup service mesh configuration
  SERVICE_RESOURCE_TYPE_SETUP_SERVICE_MESH = 33;
}

// Supported environments
enum Environment {
  // No environment specified
  ENVIRONMENT_UNSPECIFIED = 0;

  // Production environment
  ENVIRONMENT_PRODUCTION = 1;

  // Staging environment
  ENVIRONMENT_STAGING = 2;
}

// Supported metadata keys
enum MetadataKey {
  // Metadata key unspecified
  METADATA_KEY_UNSPECIFIED = 0;

  // Service description
  METADATA_KEY_DESCRIPTION = 1;

  // Software type (must be one of: service, ios, android, web, infra, devops, library)
  METADATA_KEY_SOFTWARE_TYPE = 2;

  // Component (must be a component listed under a domain here https://github.com/doordash/assets-service/tree/master/domains)
  METADATA_KEY_COMPONENT = 3;

  // Current development and release status of the project (must be one of: in-development, in-prod, deprecated, deleted, not-for-production)
  METADATA_KEY_LIFECYCLE_STATUS = 4;

  // The repository that holds the source code.
  METADATA_KEY_CODE_REPOSITORY = 5;

  // The path to the root of the project.
  METADATA_KEY_CODE_ROOT = 6;

  // DoorDash Resource Name. A stable identifier for entities we can refer to internally that is resilient to metadata changes. Will be used in v3 Catalog.
  // NOTE: this will generated internally when v3 catalog API is implemented.
  METADATA_KEY_DDRN = 7;

  // A human readable display name.
  METADATA_KEY_DISPLAY_NAME = 8;

  // The kubernetes namespace this software asset is deployed to.
  METADATA_KEY_K8S_NAMESPACE = 9;

  // The kubernetes service name.
  METADATA_KEY_K8S_SERVICE_NAME = 10;

  // Comma separated list of targeted GRPC clients of the API (options: kotlin, go, gateway (requires go), java, python3, javascript, tsproto)
  METADATA_KEY_CLIENT_SDKS = 11;

  // Indicates whether the OKTA group for this service should have AWS application assigned.
  METADATA_KEY_ENABLE_AWS_APPLICATION = 12;

  // Okta group name
  METADATA_KEY_OKTA_GROUP_NAME = 13;

  // List of applications created under the k8s namespace
  METADATA_KEY_K8S_APPS = 14;

  // URL of the slack notifications thread for the service.
  METADATA_KEY_SLACK_URL = 15;

  reserved 16;
  reserved 17;
  reserved 18;
  reserved 19;
  reserved 20;
  reserved "METADATA_KEY_RESERVED_05";
  reserved "METADATA_KEY_RESERVED_06";
  reserved "METADATA_KEY_RESERVED_07";
  reserved "METADATA_KEY_RESERVED_08";
  reserved "METADATA_KEY_RESERVED_09";

  // Kafka topic name
  METADATA_KEY_KAFKA_TOPIC = 21;
  // Kafka user name
  METADATA_KEY_KAFKA_USERNAME = 22;
  // Kafka cluster topic belongs to
  METADATA_KEY_KAFKA_CLUSTER = 23;
  // Endpoint address of the target Kafka cluster
  METADATA_KEY_KAFKA_ENDPOINT = 24;
  // Kafka topic name (staging)
  METADATA_KEY_KAFKA_TOPIC_STAGING = 25;
  // Kafka user name (staging)
  METADATA_KEY_KAFKA_USERNAME_STAGING = 26;
  // Kafka cluster topic belongs to (staging)
  METADATA_KEY_KAFKA_CLUSTER_STAGING = 27;
  // Endpoint address of the target Kafka cluster (staging)
  METADATA_KEY_KAFKA_ENDPOINT_STAGING = 28;
  // Target Guardian environments
  METADATA_KEY_GUARDIAN_ENVIRONMENT = 29;
  // Guardian runner mode
  METADATA_KEY_GUARDIAN_MODE = 30 [deprecated = true];
  // Guardian runner mode
  METADATA_KEY_GUARDIAN_RUNNER_MODE = 31;
  // Service name
  METADATA_KEY_SERVICE_NAME = 32;
  // Application name
  METADATA_KEY_APPLICATION_NAME = 33;
  // Fully qualified endpoint name eg: pg-endpoint: package-service-rpc
  METADATA_KEY_ENDPOINT_NAME = 34;
  // Location of the source proto path
  METADATA_KEY_PROTO_PATH = 35;
  // RPC method name (used with PG endpoints)
  METADATA_KEY_RPC_METHOD_NAME = 36;
  // Artifact URI
  METADATA_KEY_ARTIFACT_URI = 37;
  // Updated configs (serialized ApplicationFlatConfig list)
  METADATA_KEY_UPDATED_CONFIGS = 38;
  // Deleted configs (serialized ApplicationFlatConfig list)
  METADATA_KEY_DELETED_CONFIGS = 39;
  // Default value overrides for configs (serialized ConfigElement list)
  METADATA_KEY_DEFAULT_CONFIG_OVERRIDES = 40;
}

// Application type
enum ApplicationType {
  // Service type unspecified
  APPLICATION_TYPE_UNSPECIFIED = 0;

  // Kotlin API application
  APPLICATION_TYPE_KOTLIN_API = 1;

  // Cron worker
  APPLICATION_TYPE_KOTLIN_CRON_WORKER = 2;

  // Async worker
  APPLICATION_TYPE_KOTLIN_ASYNC_WORKER = 3;

  // Kafka consumer
  APPLICATION_TYPE_KAFKA_CONSUMER = 4;

  // Guardian
  APPLICATION_TYPE_GUARDIAN = 5;
}

// Supported application states
enum ApplicationState {
  // Unspecified state
  APPLICATION_STATE_UNSPECIFIED = 0;

  // New application request, pending approval
  APPLICATION_STATE_PENDING_APPROVAL = 1;

  // Approved
  APPLICATION_STATE_APPROVED = 2;

  // Provisioning in progress
  APPLICATION_STATE_PROVISIONING = 3;

  // Application is provisioned, ready for use
  APPLICATION_STATE_READY = 4;

  // Provisioning failed
  APPLICATION_STATE_FAILED = 5;

  // Application was not provisioned by cloud-console
  APPLICATION_STATE_NOT_MANAGED = 6;

  // New application creation request is declined
  APPLICATION_STATE_DECLINED = 7;
}

// Supported application config states
enum ApplicationConfigState {
  // Unspecified state
  APPLICATION_CONFIG_STATE_UNSPECIFIED = 0;

  // New application config request, pending approval
  APPLICATION_CONFIG_STATE_PENDING_APPROVAL = 1;

  // Application config Approved
  APPLICATION_CONFIG_STATE_APPROVED = 2;

  // Application config Provisioning in progress
  APPLICATION_CONFIG_STATE_PROVISIONING = 3;

  // Application config is merged, ready for use
  APPLICATION_CONFIG_STATE_READY = 4;

  // Application config Provisioning failed
  APPLICATION_CONFIG_STATE_FAILED = 5;

  // Application config was not provisioned via service-configs monorepo
  APPLICATION_CONFIG_STATE_NOT_MANAGED = 6;

  // New application config request is declined
  APPLICATION_CONFIG_STATE_DECLINED = 7;
}

// Supported states of any provisioning request
enum RequestState {
  // Unspecified state
  REQUEST_STATE_UNSPECIFIED = 0;

  // New provisioning request, pending approval
  REQUEST_STATE_PENDING_APPROVAL = 1;

  // Approved
  REQUEST_STATE_APPROVED = 2;

  // Provisioning in progress
  REQUEST_STATE_PROVISIONING = 3;

  // Provisioning request is completed, ready for use
  REQUEST_STATE_READY = 4;

  // Provisioning request failed
  REQUEST_STATE_FAILED = 5;

  // Target request is not provisioned by cloud-console
  REQUEST_STATE_NOT_MANAGED = 6;

  // Provisioning request is declined
  REQUEST_STATE_DECLINED = 7;
}

// Supported resource states
enum ResourceState {
  // Unspecified state
  RESOURCE_STATE_UNSPECIFIED = 0;

  // New resource request, to be provisioned
  RESOURCE_STATE_PENDING = 1;

  // Provisioning in progress
  RESOURCE_STATE_PROVISIONING = 2;

  // Resource is provisioned successfully
  RESOURCE_STATE_COMPLETED = 3;

  // Resource provisioning has failed
  RESOURCE_STATE_FAILED = 4;

  // Resource provisioning has skipped
  RESOURCE_STATE_SKIPPED = 5;
}

// Generic error structure capturing error group and message
message Error {
  // generic error message type
  enum ErrorCode {
    // no specific error category, implies a runtime error
    ERROR_CODE_UNSPECIFIED = 0;

    // error code when validations fail
    ERROR_CODE_VALIDATION = 1;

    // error code returned for all internal errors
    ERROR_CODE_INTERNAL_ERROR = 2;
  }

  // error code for the evaluation process
  ErrorCode error_code = 1;

  // error message
  google.protobuf.StringValue message = 2;
}

// Key/value pair to represent arbitrary parameters
message OptionalParameters {
  // Parameter name
  google.protobuf.StringValue name = 1;

  // Parameter value
  google.protobuf.StringValue value = 2;
}

// Key/value pair to represent metadata
message Metadata {
  // Metadata key
  MetadataKey key = 1;

  // Metadata value
  google.protobuf.StringValue value = 2;
}

// WorkflowFields captures context information when executed as part of service creation.
message WorkflowFields {
  // Origin service name this step belongs to
  google.protobuf.StringValue service_name = 1;

  // Resource type of the targeted step
  ServiceResourceType resource_type_id = 2;

  // When set to true, specified step id will be updated with the final workflow execution status.
  // eg: pending, in_progress, failed/successful
  google.protobuf.BoolValue update_status = 3;

  // For asynchronous endpoints, this field will be populated with the delegated workflow id.
  // Eg: ArgoCD workflow id, Cadence workflow id, etc.
  google.protobuf.StringValue workflow_id = 4;
}

// Generic output message used with status updates.
message Output {
  // Timestamp for this output
  google.protobuf.Timestamp created_at = 1;

  // If an artifact uri specified, type of the artifact eg: PullRequest, Change Request, Resource ID
  google.protobuf.StringValue artifact_type = 2;

  // Resource identifier, to be used with artifact type. eg: URL, URI, Unique ID
  google.protobuf.StringValue artifact_uri = 3;

  // Success or error message related to this output
  google.protobuf.StringValue message_text = 4;
}

// ApplicationEnvironment defines the environment of an application
enum ApplicationEnvironment {
  // Application environment unspecified
  APPLICATION_ENVIRONMENT_UNSPECIFIED = 0;

  // Application environment base
  APPLICATION_ENVIRONMENT_BASE = 1 [deprecated = true];

  // Application environment cell-001-00
  APPLICATION_ENVIRONMENT_CELL_001_00 = 2;

  // Application environment cell-001 sandbox
  APPLICATION_ENVIRONMENT_CELL_001_SANDBOX = 3;

  // Application environment cell-002-00
  APPLICATION_ENVIRONMENT_CELL_002_00 = 4;

  // Application environment cell-002 sandbox
  APPLICATION_ENVIRONMENT_CELL_002_SANDBOX = 5;

  // Application environment cell-003-00
  APPLICATION_ENVIRONMENT_CELL_003_00 = 6;

  // Application environment cell-003 sandbox
  APPLICATION_ENVIRONMENT_CELL_003_SANDBOX = 7;

  // Application environment cell-004-00
  APPLICATION_ENVIRONMENT_CELL_004_00 = 8;

  // Application environment cell-004 sandbox
  APPLICATION_ENVIRONMENT_CELL_004_SANDBOX = 9;

  // Application environment euw1-001
  APPLICATION_ENVIRONMENT_EUW1_001 = 10;

  // Application environment euw1-002
  APPLICATION_ENVIRONMENT_EUW1_002 = 11;

  // Application environment dev
  APPLICATION_ENVIRONMENT_DEV = 12;

  // Application environment staging
  APPLICATION_ENVIRONMENT_STAGING = 13;

  // Application environment infra-staging
  APPLICATION_ENVIRONMENT_INFRA_STAGING = 14;

  // Application environment infra-prod
  APPLICATION_ENVIRONMENT_INFRA_PROD = 15;

  // Application environment data-staging
  APPLICATION_ENVIRONMENT_DATA_STAGING = 16;

  // Application environment data-prod
  APPLICATION_ENVIRONMENT_DATA_PROD = 17;

  // Application environment data-01-prod
  APPLICATION_ENVIRONMENT_DATA_01_PROD = 18;

  // Application environment data-01-staging
  APPLICATION_ENVIRONMENT_DATA_01_STAGING = 19;

  // Application environment main-00
  APPLICATION_ENVIRONMENT_MAIN_00 = 20;

  // Application environment main-03
  APPLICATION_ENVIRONMENT_MAIN_03 = 21;

  // Application environment build-dev
  APPLICATION_ENVIRONMENT_BUILD_DEV = 22;

  // Application environment build-staging
  APPLICATION_ENVIRONMENT_BUILD_STAGING = 23;

  // Application environment build-prod
  APPLICATION_ENVIRONMENT_BUILD_PROD = 24;

  // Application environment flink-00
  APPLICATION_ENVIRONMENT_FLINK_00 = 25;

  // Application environment common
  APPLICATION_ENVIRONMENT_COMMON = 26;
}

// DataType defines data types corresponding to structpb value types
enum DataType {
  // Unspecified
  DATA_TYPE_UNSPECIFIED = 0;
  // String type
  DATA_TYPE_STRING = 1;
  // Number type
  DATA_TYPE_NUMBER = 2;
  // Bool type
  DATA_TYPE_BOOL = 3;
  // List type
  DATA_TYPE_LIST = 4;
}
