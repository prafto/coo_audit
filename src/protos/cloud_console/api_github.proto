syntax = "proto3";

package cloud_console.api.v1;

import "google/protobuf/wrappers.proto";

option go_package = "github.com/doordash/services-protobuf/generated/cloud_console";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.cloud_console.rpc.api";

// Repository admin type
enum AdminType {
  // Admin type unspecified
  ADMIN_TYPE_UNSPECIFIED = 0;

  // GitHub user
  ADMIN_TYPE_USER = 1;

  // GitHub team
  ADMIN_TYPE_TEAM = 2;
}

// Request for repository creation
message CreateRepositoryRequest {
  // Repository name
  google.protobuf.StringValue name = 1;

  // Repository description
  google.protobuf.StringValue description = 2;

  // Type of repository admin
  AdminType admin_type = 3;

  // GitHub handle of repository admin
  google.protobuf.StringValue admin_github_handle = 4;

  // Optional - template repository name, defaults to null
  google.protobuf.StringValue template_repo_name = 5;

  // Optional - whether repository should be private, defaults to true
  google.protobuf.BoolValue private = 6;

  // Optional - whether to autoinit the repo, i.e. create an initial commit with empty README, defaults to true
  google.protobuf.BoolValue autoinit = 7;
}

// Response for repository creation
message CreateRepositoryResponse {
  // URL of repository
  google.protobuf.StringValue url = 1;

  // Indicates whether repository already existed
  google.protobuf.BoolValue existing_repo = 2;
}

// Request for granting a GitHub team write access for the asgard repository
message GrantAsgardWriteAccessRequest {
  // Team name
  google.protobuf.StringValue team_name = 1;
}

// Response for granting a GitHub team write access for the asgard repository
message GrantAsgardWriteAccessResponse {}
