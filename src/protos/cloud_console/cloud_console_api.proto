syntax = "proto3";

package cloud_console.api.v1;

import "cloud_console/api_application.proto";
import "cloud_console/api_application_config.proto";
import "cloud_console/api_asset.proto";
import "cloud_console/api_create_service_scaffolding.proto";
import "cloud_console/api_feedback.proto";
import "cloud_console/api_get_tags.proto";
import "cloud_console/api_github.proto";
import "cloud_console/api_health.proto";
import "cloud_console/api_kafka.proto";
import "cloud_console/api_memberships.proto";
import "cloud_console/api_metrics.proto";
import "cloud_console/api_resource_setup.proto";
import "cloud_console/api_service.proto";
import "cloud_console/api_service_config.proto";
import "cloud_console/api_traffic.proto";
import "cloud_console/api_vault.proto";
import "google/protobuf/empty.proto";

option go_package = "github.com/doordash/services-protobuf/generated/cloud_console";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.cloud_console.rpc.api";

// CloudConsole is an infrastructure service to manage service lifecycle
service CloudConsoleService {
  // CreateRepository creates a new GitHub repository
  rpc CreateRepository(CreateRepositoryRequest) returns (CreateRepositoryResponse);

  // CreateService accepts a new service creation request
  rpc CreateService(CreateServiceRequest) returns (CreateServiceResponse);

  // CreateServiceMeshConfigs creates PRs for the envoy sidecar configuration for a service
  rpc CreateServiceMeshConfigs(CreateServiceMeshConfigsRequest) returns (CreateServiceMeshConfigsResponse);

  // CreateServiceScaffolding creates a new service scaffolding request
  rpc CreateServiceScaffolding(CreateServiceScaffoldingRequest) returns (CreateServiceScaffoldingResponse);

  // CreateTrafficRouterConfigs creates PRs for the specified traffic-routers configurations for a service
  rpc CreateTrafficRouterConfigs(CreateTrafficRouterConfigsRequest) returns (CreateTrafficRouterConfigsResponse);

  // CreateVaultNamespace creates a new Vault namespace for a specified service
  rpc CreateVaultNamespace(CreateVaultNamespaceRequest) returns (CreateVaultNamespaceResponse);

  // EnrollServiceSupercell enrolls the service in supercell in cells and global
  rpc EnableInterCellTraffic(EnableInterCellTrafficRequest) returns (EnableInterCellTrafficResponse);

  // GetMemberships returns group membership details for a specified list of membership providers
  rpc GetMemberships(GetMembershipsRequest) returns (GetMembershipsResponse);

  // GetService returns details of a specified service
  rpc GetService(GetServiceRequest) returns (GetServiceResponse);

  // GetServiceResource returns the details of a specified service resource
  rpc GetServiceResource(GetServiceResourceRequest) returns (GetServiceResourceResponse);

  // GetServiceTags gets the tags for a service
  rpc GetServiceTags(GetServiceTagsRequest) returns (GetServiceTagsResponse);

  // GetTeam returns details of a specified team defined in the asset service
  rpc GetTeam(GetTeamRequest) returns (GetTeamResponse);

  // Returns health response for this service
  rpc Health(HealthRequest) returns (HealthResponse);

  // ListServices returns a list of services optionally filtered on the specified service state
  rpc ListServices(ListServicesRequest) returns (ListServicesResponse);

  // GetServiceRegistration returns service information recorded in assets-service for the specified service
  rpc GetServiceRegistration(GetServiceRegistrationRequest) returns (GetServiceRegistrationResponse);

  // RegisterService registers a specified service in assets-service
  rpc RegisterService(RegisterServiceRequest) returns (RegisterServiceResponse);

  // UpdateServiceRegistration allows updating specified metadata in assets-service
  rpc UpdateServiceRegistration(UpdateServiceRegistrationRequest) returns (UpdateServiceRegistrationResponse);

  // UnregisterService unregisters a specified service with lifecycle status provisioning in assets-service
  rpc UnregisterService(UnregisterServiceRequest) returns (UnregisterServiceResponse);

  // SetupExternalDomain creates PRs to setup an external domain for a service
  rpc SetupExternalDomain(SetupExternalDomainRequest) returns (SetupExternalDomainResponse);

  // UpdateServiceStatus allows updating certain service properties before approval of the request.
  rpc UpdateService(UpdateServiceRequest) returns (UpdateServiceResponse);

  // UpdateServiceResourceStatus assigns a new target status to a specified service resource
  rpc UpdateServiceResourceStatus(UpdateServiceResourceStatusRequest) returns (UpdateServiceResourceStatusResponse);

  // UpdateServiceStatus assigns a new target status to a specified service
  rpc UpdateServiceStatus(UpdateServiceStatusRequest) returns (UpdateServiceStatusResponse);

  // TriggerDeployment starts a deployment of a specified service
  rpc TriggerDeployment(TriggerDeploymentRequest) returns (TriggerDeploymentResponse);

  // VerifyDeployment verifies last known deployment status
  rpc VerifyDeployment(VerifyDeploymentRequest) returns (VerifyDeploymentResponse);

  // VerifyService executes a series of to checks to ensure specified service is functional
  rpc VerifyService(VerifyServiceRequest) returns (VerifyServiceResponse);

  // IsValidOktaGroup checks if an Okta group exists
  rpc IsValidOktaGroup(IsValidOktaGroupRequest) returns (IsValidOktaGroupResponse);

  // StartProvisioning allows invoking provisioning steps on demand.
  rpc StartProvisioning(StartProvisioningRequest) returns (StartProvisioningResponse);

  // GenerateMetrics returns service lifecycle related calculated event statistics for aggregated reporting
  rpc GenerateMetrics(GenerateMetricsRequest) returns (GenerateMetricsResponse);

  // GrantTeamWriteAccess grants the specified GitHub team write (push) access for the asgard repository
  rpc GrantAsgardWriteAccess(GrantAsgardWriteAccessRequest) returns (GrantAsgardWriteAccessResponse);

  // EmitMetrics emits service lifecycle provisioning metrics to Chronosphere
  rpc EmitMetrics(EmitMetricsRequest) returns (EmitMetricsResponse);

  //
  // Applications related endpoints
  //
  // CreateApplication accepts a new application creation request
  rpc CreateApplication(CreateApplicationRequest) returns (CreateApplicationResponse);
  // ListServices returns a list of services optionally filtered on the specified service state
  rpc ListApplications(ListApplicationsRequest) returns (ListApplicationsResponse);
  // GetApplication returns details of a specified application
  rpc GetApplication(GetApplicationRequest) returns (GetApplicationResponse);
  // UpdateApplicationStatus assigns a new target status to a specified application
  rpc UpdateApplicationStatus(UpdateApplicationStatusRequest) returns (UpdateApplicationStatusResponse);
  // GetApplicationResource returns details of a specified application resource
  rpc GetApplicationResource(GetApplicationResourceRequest) returns (GetApplicationResourceResponse);
  // UpdateApplicationResourceStatus assigns a new target status to a specified application resource
  rpc UpdateApplicationResourceStatus(UpdateApplicationResourceStatusRequest) returns (UpdateApplicationResourceStatusResponse);
  // ScaffoldApplication adds a new application to a specified service
  rpc ScaffoldApplication(ScaffoldApplicationRequest) returns (ScaffoldApplicationResponse);

  //
  // Edit Application related endpoints
  //
  // GetApplicationConfig returns application configuration for a specified application
  rpc GetApplicationConfig(GetApplicationConfigRequest) returns (GetApplicationConfigResponse);
  // GetApplicationCurrentConfig returns the current application configuration for a specified application
  rpc GetApplicationCurrentConfig(GetApplicationCurrentConfigRequest) returns (GetApplicationCurrentConfigResponse);
  // GetApplicationConfigPreview returns a preview of application configuration for a specified application
  rpc GetApplicationConfigPreview(GetApplicationConfigPreviewRequest) returns (GetApplicationConfigPreviewResponse);
  // ListChanges returns a list of changes for a specified application
  rpc ListChanges(ListChangesRequest) returns (ListChangesResponse);
  // UpdateApplicationConfig updates application configuration for a specified application
  rpc UpdateApplicationConfig(UpdateApplicationConfigRequest) returns (UpdateApplicationConfigResponse) {
    option deprecated = true;
  }
  // Deprecated: UpdateApplicationConfigStatus assigns a new target status to a specified application configuration
  rpc UpdateApplicationConfigStatus(UpdateApplicationConfigStatusRequest) returns (UpdateApplicationConfigStatusResponse) {
    option deprecated = true;
  }
  // UpdateApplicationChangeStatus assigns a new target status to a specified change configuration
  rpc UpdateApplicationChangeStatus(UpdateApplicationChangeStatusRequest) returns (UpdateApplicationChangeStatusResponse) {
    option deprecated = true;
  }

  // GenerateServiceConfig generates application configuration for a specified service or an application
  rpc GenerateServiceConfig(GenerateServiceConfigRequest) returns (GenerateServiceConfigResponse);

  // ListKafkaClusters returns all Kafka clusters
  rpc ListKafkaClusters(ListKafkaClustersRequest) returns (ListKafkaClustersResponse);
  // ListKafkaTopics returns Kafka topics for a given cluster
  rpc ListKafkaTopics(ListKafkaTopicsRequest) returns (ListKafkaTopicsResponse);
  // ListKafkaUsers returns a list of Kafka users assigned to a specified service and a Kafka topic.
  rpc ListKafkaUsers(ListKafkaUsersRequest) returns (ListKafkaUsersResponse);

  //
  // Shared endpoints
  //
  // StartResourceSetup is a generic endpoint that implements various infrastructure setup steps related to service-lifecycle automation.
  rpc StartResourceSetup(StartResourceSetupRequest) returns (StartResourceSetupResponse);
  // EndResourceSetup allows halting a specified step.
  rpc EndResourceSetup(EndResourceSetupRequest) returns (EndResourceSetupResponse);
  // QueryResourceSetupStatus returns the last known status of a specified step.
  rpc QueryResourceSetupStatus(QueryResourceSetupStatusRequest) returns (QueryResourceSetupStatusResponse);
  // GetResource returns state of a specified resource
  rpc GetResource(GetResourceRequest) returns (GetResourceResponse);
  // UpdateResourceStatus updates state of a specified resource
  rpc UpdateResourceStatus(UpdateResourceStatusRequest) returns (UpdateResourceStatusResponse);
  // Provision initiates a new resource provisioning process for a specified resource or a group
  rpc Provision(ProvisionRequest) returns (ProvisionResponse);
  // UpdateProvisionStatus updates a specified request with a specified target status
  rpc UpdateProvisionStatus(UpdateProvisionStatusRequest) returns (UpdateProvisionStatusResponse);
  // GetProvisionRequests returns matching provision requests entries for a specified filter
  rpc GetProvisionRequests(GetProvisionRequestsRequest) returns (GetProvisionRequestsResponse);

  //
  // Feedback endpoints
  //
  // PostFeedback accepts a feedback request from the user
  rpc PostFeedback(PostFeedbackRequest) returns (PostFeedbackResponse);
  // GetFeedback returns a list of feedback entries after applying specified filters
  rpc GetFeedback(GetFeedbackRequest) returns (GetFeedbackResponse);
  // DeleteFeedback deletes a specified feedback entry
  rpc DeleteFeedback(DeleteFeedbackRequest) returns (DeleteFeedbackResponse);
  // UpdateFeedback allows modifying an existing feedback entry
  rpc UpdateFeedback(UpdateFeedbackRequest) returns (UpdateFeedbackResponse);
}
