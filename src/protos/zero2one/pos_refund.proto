syntax = "proto3";

package zero2one.v1;

import "common/common.proto";
import "common/money.proto";
import "google/protobuf/wrappers.proto";
import "zero2one/payment_method.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.zero2one";

// Refunds
message CreateRefundRequest {
  // The unique identifier for the delivery
  string delivery_uuid = 1;

  // List of problems related to the refund
  repeated TabletRefundProblem problems = 2;

  // The unique identifier for the store
  string store_id = 3;

  // The unique identifier for the business
  string business_id = 4;

  // Full line items of the order needed for calculating the tax
  repeated LineItem line_items = 5;

  // The type of fulfillment for the order
  string fulfillment_type = 6;

  // Field used to infer discount amount
  money.MonetaryFields subtotal = 7;

  // Optional field for net subtotal
  money.MonetaryFields net_subtotal = 8;

  // Optional field for merchant tip refund details
  MerchantTipRefund merchant_tip_refund = 9;

  // Source of the subtotal discount funding
  OrderGrpcResponseCommon.SubtotalDiscountFundingSource subtotal_discount_funding_source = 10;

  // The ID representing the payment method used
  google.protobuf.StringValue payment_method_id = 11;
}

// Tips
message MerchantTipRefund {
  // Merchant tip amount
  money.MonetaryFields merchant_tip = 1;

  // Amount of merchant tip to refund
  money.MonetaryFields merchant_tip_to_refund = 2;
}

// Problems
message TabletRefundProblem {
  // Absolute amount in currency minimum unit for merchant initiated refund
  money.MonetaryFields merchant_initiated_refund_amount = 1;

  // Identifier for the order item
  string order_item_id = 2;

  // Name of the problem in English
  string problem_name = 3;

  // Quantity of the items affected
  int32 quantity = 4;
}

// Common order-related messages
message OrderGrpcResponseCommon {
  // Source of the subtotal discount funding
  enum SubtotalDiscountFundingSource {
    // Invalid or unspecified funding source
    SUBTOTAL_DISCOUNT_FUNDING_SOURCE_INVALID_UNSPECIFIED = 0;
    // Unset funding source
    SUBTOTAL_DISCOUNT_FUNDING_SOURCE_UNSET = 1;
    // DoorDash funded discount
    SUBTOTAL_DISCOUNT_FUNDING_SOURCE_DOORDASH = 2;
    // Merchant funded discount
    SUBTOTAL_DISCOUNT_FUNDING_SOURCE_MERCHANT = 3;
    // Corporate funded discount
    SUBTOTAL_DISCOUNT_FUNDING_SOURCE_CORPORATE = 4;
  }
}

// Line items
message LineItem {
  // Item Id
  string id = 1;

  // For backward compatibility, line item id is also accepted
  string line_item_id = 2;

  // Type of the item (e.g., MENU_ITEM = 0)
  int32 item_type = 3;

  // The amount associated with the line item
  money.MonetaryFields amount = 4;

  // Quantity of the line item
  int32 quantity = 5;

  // Name of the line item
  string name = 6;

  // Audience for the line item (e.g., DEFAULT_AUDIENCE = 0, CONSUMER = 1, MERCHANT = 2, AUDIENCE_OTHER = 3)
  int32 audience = 7;

  // Quantity type of the line item (e.g., DISCRETE = 0, CONTINUOUS = 1)
  int32 quantity_type = 8;

  // Description of the line item
  string description = 9;
}

// Response for creating a refund
message CreateRefundResponse {
  // Refunded line items
  repeated LineItem line_items = 1;

  // Refunded subtotal
  money.MonetaryFields subtotal = 2;

  // Refunded tips
  MerchantTipRefund merchant_tip_refund = 3;

  // Refunded credits
  money.MonetaryFields consumer_credits = 4;

  // Refunded money
  money.MonetaryFields consumer_refund = 5;

  // Refunded subtotal
  money.MonetaryFields tax = 6;

  // Refunded total
  money.MonetaryFields total = 7;

  // Payment method
  CardPaymentMethod card_payment_method = 8;
}
