syntax = "proto3";

package zero2one.v1;

import "google/protobuf/wrappers.proto";
import "zero2one/pos_stripe.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.zero2one";

//
// ============================
// Cart Payment Service - Pathfinder POS
// ============================
//

/**
 * Request to create a new cart payment for a store.
 * Used by Pathfinder POS to initiate payments via Z2O.
 */
message CreateCartPaymentRequest {
  // Store ID for authentication. Required.
  string store_id = 1;

  // Client description of this payment. Required.
  string client_description = 2;

  // Correlation IDs for tracing this payment. Required.
  CorrelationIds correlation_ids = 3;

  // Payment amount in minor units (e.g., cents). Required.
  int64 amount = 4;

  // Country where the payment is processed (e.g., "US"). Required.
  string payment_country = 5;

  // Currency code (e.g., "USD"). Required.
  string currency = 6;

  // Mostly true for Pathfinder to allow tipping. Required.
  bool delay_capture = 7;

  // Payer statement description (likely fixed value for Pathfinder). Required.
  string payer_statement_description = 8;

  // terminal id used for payment. Required
  string terminal_id = 9;

  // Additional metadata for the payment request
  PathfinderMetadata metadata = 10;

  // (optional) ID of the payment method to be used
  string payment_method_id = 11;

  // (optional) idempotency key for the payment
  string idempotency_key = 12;
}

/**
 * Response containing the created cart payment details.
 */
message CreateCartPaymentResponse {
  // The resulting CartPayment object.
  CartPayment cart_payment = 1;
}

/**
 * Representation of a cart payment object.
 */
message CartPayment {
  // Unique ID of this cart payment.
  string id = 1;

  // Current amount value at the time of API call or event occurrence.
  int64 amount = 2;

  // Status of charge.
  string status = 3;

  // ID of the payment method used for this CartPayment.
  string payment_method_id = 4;

  // Indicates if capture is delayed (used to differentiate auth-only flows).
  bool delay_capture = 5;

  // payment error
  PaymentError payment_error = 9;
}

/**
 * Identifiers used to correlate the cart payment with external references.
 */
message CorrelationIds {
  // Reference ID.
  string reference_id = 1;

  // Type of reference.
  string reference_type = 2;
}

// Stripe payment error
message PaymentError {
  // Error code
  string code = 1;

  // Error message
  string message = 2;

  // Type
  string type = 3;

  // decline_code
  string decline_code = 4;
}

/**
 * Request to fetch details of an existing cart payment.
 */
message GetCartPaymentRequest {
  // Store ID for authentication.
  string store_id = 1;

  // Cart payment ID to retrieve.
  string cart_payment_id = 2;
}

/**
 * Response containing the cart payment ID for the requested payment.
 */
message GetCartPaymentResponse {
  // Unique Cart payment ID.
  string id = 1;

  // The resulting CartPayment object.
  CartPayment cart_payment = 2;
}

/**
 * Request to capture a cart payment.
 */
message CaptureCartPaymentRequest {
  // Store ID for authentication.
  string store_id = 1;

  // Unique cart payment ID. Required.
  string cart_payment_id = 2;

  // Idempotency key for safe retries. Optional.
  string idempotency_key = 3;
}

/**
 * Response containing the captured cart payment details.
 */
message CaptureCartPaymentResponse {
  // The resulting CartPayment object.
  CartPayment cart_payment = 1;
}

/**
 * Request to cancel a cart payment.
 */
message CancelCartPaymentRequest {
  // Store ID for authentication. Required.
  string store_id = 1;

  // Unique cart payment ID. Required.
  string cart_payment_id = 2;
}

/**
 * Response confirming cart payment cancellation.
 */
message CancelCartPaymentResponse {
  // The resulting CartPayment object after cancellation.
  CartPayment cart_payment = 1;
}
