syntax = "proto3";

package zero2one.v1;

import "common/common.proto";
import "google/protobuf/wrappers.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.zero2one";

// Request message for creating a payment intent
// see: https://docs.stripe.com/terminal/payments/collect-card-payment
message CreateAndProcessPaymentIntentRequest {
  // The amount to be charged, in the smallest currency unit (e.g., cents)
  int32 amount = 1;

  // Currency code (e.g., "USD")
  string currency = 2;

  // (optional) List of accepted payment method types (eg "card_present")
  repeated google.protobuf.StringValue payment_method_types = 3;

  // (optional) Data related to the transfer of funds
  TransferData transfer_data = 4;

  // (optional) ID of the payment method to be used
  google.protobuf.StringValue payment_method = 5;

  // (optional) Whether to confirm the payment immediately
  google.protobuf.BoolValue confirm = 6;

  // (optional) Description shown on the customer's bank statement
  google.protobuf.StringValue statement_descriptor = 7;

  // (optional) Optional suffix for the statement descriptor
  google.protobuf.StringValue statement_descriptor_suffix = 8;

  // (optional) Method of capturing the payment (e.g., "automatic", "manual")
  google.protobuf.StringValue capture_method = 9;

  // (optional) Options for the specified payment method
  StripePaymentMethodOptions payment_method_options = 10;

  // (optional) Additional metadata for the payment request
  PathfinderMetadata metadata = 11;

  // (optional) idempotency key for the payment
  google.protobuf.StringValue idempotency_key = 12;

  // (optional) terminal id for the payment
  google.protobuf.StringValue terminal_id = 13;

  // (optional) terminal tipping
  google.protobuf.BoolValue terminal_tipping = 14;

  // Store ID
  google.protobuf.StringValue store_id = 15;

  // (optional) Send requests to the Stripe test environment
  google.protobuf.BoolValue stripe_test_environment = 16;
}

// Message for transfer data
message TransferData {
  // Destination account for the funds (e.g., connected Stripe account ID)
  string destination = 1;
}

// Message for payment method options
message StripePaymentMethodOptions {
  // Options specific to card present transactions
  CardPresentOptions card_present = 1;
}

// Message for card present options
message CardPresentOptions {
  // Flag indicating support for incremental authorizations
  bool request_incremental_authorization_support = 1;
}

// Metadata message for additional information
message PathfinderMetadata {
  // Experience type for pathfinder service, defined in common.proto
  common.Experience pathfinder_experience = 1;

  // (optional) Order session ID
  google.protobuf.StringValue order_session_id = 2;

  // (optional) Cart ID
  google.protobuf.StringValue cart_id = 3;

  // (optional) Ticket number
  google.protobuf.StringValue ticket_number = 5;

  // (optional) Customer name
  google.protobuf.StringValue customer_name = 4;

  // (optional) App version
  google.protobuf.StringValue app_version = 6;

  // (optional) tip protocol
  PathfinderTipProtocol tip_protocol = 7;
}

// Response message for creating a payment intent
message CreateAndProcessPaymentIntentResponse {
  // Payment intent response
  PaymentIntentResponse payment_intent_response = 1;
  // CC terminal response
  StripeTerminalResponse stripe_terminal_response = 2;
}

// Response message for creating a payment intent
message PaymentIntentResponse {
  // Payment intent ID
  string payment_intent_id = 1;

  // Amount
  int32 amount = 2;

  // Amount Subtotal
  int32 amount_subtotal = 3;

  // Charges
  StripeChargesData charges = 4;

  // Amount details
  StripeAmountDetails amount_details = 5;

  // Payment status
  string status = 7;

  // last payment error
  StripePaymentError last_payment_error = 9;

  // Latest charge
  string latest_charge = 10;

  // Add payment id (for backwards compatibility)
  string id = 11;

  reserved 6;
  reserved "latest_charge_id";
  reserved 8;
  reserved "payment_error";
}

// Stripe details
message StripeAmountDetails {
  // Amount
  StripeTip tip = 2;

  reserved 1;
  reserved "amount";
}

// Stripe payment error
message StripePaymentError {
  // Error code
  string code = 1;

  // Error message
  string message = 2;

  // Type
  string type = 3;

  // decline_code
  string decline_code = 4;
}

// Stripe tip
message StripeTip {
  // Amount
  int32 amount = 1;
}

// Request message for creating a payment intent
message StripeTerminalResponse {
  // Terminal ID
  string terminal_id = 1;

  // Terminal name
  string object = 2;

  // Device name
  string device_name = 3;

  // Device label
  string label = 4;

  // Device location
  string location = 5;

  // Device serial number
  string serial_number = 6;

  // Device status
  string status = 7;
}

// Request message for fetching charges
message StripeChargesData {
  // Charges data
  repeated StripeCharges data = 1;
}

// Stripe charges
message StripeCharges {
  // id
  string id = 1;

  // amount
  int32 amount = 2;

  // paid
  bool paid = 3;

  // status
  string status = 4;

  // payment method
  string payment_method = 5;

  // payment method details
  StripePaymentMethodDetails payment_method_details = 6;

  // failure code
  string failure_code = 7;

  // amount captured
  int32 amount_captured = 8;
}

// Message for Stripe payment details
message StripePaymentMethodDetails {
  // card present
  StripePresentCard card_present = 1;

  // card
  StripeCard card = 2;

  // type
  string type = 3;
}

// Message for Stripe card
message StripeCard {
  // brand
  string brand = 1;

  // fingerprint
  string fingerprint = 2;

  // last 4 digits on card
  string last4 = 3;

  // network
  string network = 4;

  // expiration month
  int32 exp_month = 5;

  // expiration year
  int32 exp_year = 6;

  // funding
  string funding = 7;
}

// Message for Stripe card present
message StripePresentCard {
  // brand
  string brand = 1;

  // description
  string description = 2;

  // fingerprint
  string fingerprint = 3;

  // generated_card
  string generated_card = 4;

  // read_method
  string read_method = 5;

  // last 4 digits on card
  string last4 = 6;

  // expiration month
  int32 exp_month = 7;

  // expiration year
  int32 exp_year = 8;

  // incremental authorization supported
  bool incremental_authorization_supported = 9;

  // overcapture supported
  bool overcapture_supported = 10;

  // funding
  string funding = 11;
}

// Get stripe payment intent request
message GetPaymentIntentRequest {
  // stripe payment intent id
  string payment_intent_id = 1;
  // store id
  string store_id = 2;
  // (optional) Send requests to the Stripe test environment
  google.protobuf.BoolValue stripe_test_environment = 3;
}

// Get stripe payment intent response
message GetPaymentIntentResponse {
  // payment intent response
  PaymentIntentResponse response = 1;
}

// Create stripe payment intent request
message CreatePaymentIntentRequest {
  // The amount to be charged, in the smallest currency unit (e.g., cents)
  int32 amount = 1;

  // Currency code (e.g., "USD")
  string currency = 2;

  // (optional) List of accepted payment method types (eg "card_present")
  repeated google.protobuf.StringValue payment_method_types = 3;

  // (optional) Data related to the transfer of funds
  TransferData transfer_data = 4;

  // (optional) ID of the payment method to be used
  google.protobuf.StringValue payment_method = 5;

  // (optional) Whether to confirm the payment immediately
  google.protobuf.BoolValue confirm = 6;

  // (optional) Description shown on the customer's bank statement
  google.protobuf.StringValue statement_descriptor = 7;

  // (optional) Optional suffix for the statement descriptor
  google.protobuf.StringValue statement_descriptor_suffix = 8;

  // (optional) Method of capturing the payment (e.g., "automatic", "manual")
  google.protobuf.StringValue capture_method = 9;

  // (optional) Options for the specified payment method
  StripePaymentMethodOptions payment_method_options = 10;

  // (optional) Additional metadata for the payment request
  PathfinderMetadata metadata = 11;

  // (optional) idempotency key for the payment
  google.protobuf.StringValue idempotency_key = 12;

  // Store ID
  google.protobuf.StringValue store_id = 13;

  // (optional) Send requests to the Stripe test environment
  google.protobuf.BoolValue stripe_test_environment = 14;
}

// Create stripe payment intent response
message CreatePaymentIntentResponse {
  // payment intent response
  PaymentIntentResponse response = 1;
}

// Capture stripe payment request
message CapturePaymentRequest {
  // stripe payment intent id
  google.protobuf.StringValue payment_intent_id = 1;
  // amount to capture in cents
  google.protobuf.Int32Value amount_to_capture = 2;
  // store id
  google.protobuf.StringValue store_id = 3;
  // (optional) Send requests to the Stripe test environment
  google.protobuf.BoolValue stripe_test_environment = 4;
}

// Capture stripe payment response
message CapturePaymentResponse {
  // payment intent response
  PaymentIntentResponse response = 1;
}

// Stripe Increment Authorization Request
message IncrementAuthorizationRequest {
  // stripe payment intent id
  string payment_intent_id = 1;
  // store id
  string store_id = 2;
  // (optional) Send requests to the Stripe test environment
  google.protobuf.BoolValue stripe_test_environment = 3;
  // amount in cents
  int32 amount = 4;
}

// Stripe Increment Authorization Response
message IncrementAuthorizationResponse {
  // payment intent response
  PaymentIntentResponse response = 1;
}

// Pathfinder defined payment intent cancellation codes
enum PathfinderCancellationCode {
  // unspecified
  PATHFINDER_CANCELLATION_CODE_UNSPECIFIED = 0;
  // z2o cancellation on expired authorized payment intents
  PATHFINDER_CANCELLATION_CODE_Z2O_EXPIRY_CANCELLED = 1;
  // android cancellation on unexpected failure
  PATHFINDER_CANCELLATION_CODE_ANDROID_UNEXPECTED_FAILURE_CANCELLED = 2;
  // android cancellation driven by user interaction
  PATHFINDER_CANCELLATION_CODE_ANDROID_USER_CANCELLED = 3;
  // android cancellation driven by timeout (delayed capture, hanging screen, etc.)
  PATHFINDER_CANCELLATION_CODE_ANDROID_TIMEOUT = 4;
  // android cancellation invalid funding type
  PATHFINDER_CANCELLATION_CODE_ANDROID_DECLINED_FUNDING_TYPE = 5;
  // android cancellation card declined (general)
  PATHFINDER_CANCELLATION_CODE_ANDROID_DECLINED = 6;
}

// Pathfinder tip protocol
enum PathfinderTipProtocol {
  // unspecified
  PATHFINDER_TIP_PROTOCOL_UNSPECIFIED = 0;
  // tip then tap
  PATHFINDER_TIP_PROTOCOL_TIP_THEN_TAP = 1;
  // tap then tip
  PATHFINDER_TIP_PROTOCOL_TAP_THEN_TIP = 2;
}

// Stripe Cancel Payment Intent Request
message CancelPaymentIntentRequest {
  // stripe payment intent id
  string payment_intent_id = 1;
  // store id
  string store_id = 2;
  // (optional) Send requests to the Stripe test environment
  google.protobuf.BoolValue stripe_test_environment = 3;
  // cancel reason
  string cancellation_reason = 4;
  // cancellation code
  PathfinderCancellationCode cancellation_code = 5;
  // client cancellation flow source action - for debugging
  google.protobuf.StringValue client_cancellation_flow_source_action = 6;
}

// Stripe Cancel Payment Intent Response
message CancelPaymentIntentResponse {
  // payment intent response
  PaymentIntentResponse response = 1;
}

// Stripe Cancel Reader Action Request
message CancelReaderActionRequest {
  // stripe terminal id
  string terminal_id = 1;
  // store id
  string store_id = 2;
  // (optional) Send requests to the Stripe test environment
  google.protobuf.BoolValue stripe_test_environment = 3;
}

// Stripe Cancel Reader Action Response
message CancelReaderActionResponse {
  // stripe terminal response
  StripeTerminalResponse response = 1;
}

// Stripe POS Get Stripe Reader Diagnostics Request
message GetStripeReaderDiagnosticsRequest {
  // Used for authentication and verification
  string store_id = 1;
  // Passed to Stripe API to fetch reader diagnostics
  string reader_id = 2;
  // (optional) Send requests to the Stripe test environment
  google.protobuf.BoolValue stripe_test_environment = 3;
}

// Stripe POS Get Stripe Reader Diagnostics Response
message GetStripeReaderDiagnosticsResponse {
  // True if "online", false if "offline"
  bool is_online = 1;
}
