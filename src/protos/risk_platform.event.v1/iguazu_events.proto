syntax = "proto3";

package risk_platform.event.v1;

import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option java_package = "com.doordash.risk.proto.event.v1";

// Emitted on every mfa send and verify.
//
// Event name: risk_challenge_mfa (Iguazu and Segment)
message MfaChallengeEvent {
  // mfa event send or verify
  string event_type = 1;

  // common fields
  // user_id is from riskContext
  string user_id = 2;
  string override_id = 3;
  string override_id_type = 4;
  string session_id = 5;
  string action = 6;

  // send request
  repeated string allowed_channels = 7;
  string preferred_channel = 8;
  string user_email = 9;
  string user_phone = 10;

  // common fields
  string locale = 11;
  string platform_type = 12;

  // requested_device is different from the device in risk_context for forgot_password verify mfa event
  string requested_device = 13;

  // send response
  string contact_address = 20;

  // verify request
  string code = 30;

  // common response for both sent and verify
  string error_code = 40;
  string error_message = 41;
  string channel = 42;
  // attempt on success
  int32 attempt_on_success = 43;

  string request = 100;
  string response = 101;
}

// Emitted when a card-scan or proof-of-payment challenge is triggered.
//
// Event name: risk_challenge_pop (Iguazu and Segment)
message CardChallengeEvent {
  // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
  string paymentCardId = 1;
  // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
  string consumerId = 2;
  string user_id = 3;
  string locale = 4;
  string user_agent = 5;
  string app_name = 6;
  string app_version = 7;
  string ip = 8;
  string platform_type = 9;
  string experience = 10;

  string card_challenge_type = 20;
  message RawCardData {
    string number = 1;
    // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
    int32 expMonth = 2;
    // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
    int32 expYear = 3;
  }
  message RawSecondCardData {
    string number = 1;
    // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
    int32 expMonth = 2;
    // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
    int32 expYear = 3;
    // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
    string addressLine1 = 4;
    // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
    string addressLine2 = 5;
    string cvv = 6;
    string zip = 7;
    string city = 8;
    string state = 9;
  }
  oneof card_identifier {
    RawCardData card_data = 21;
    RawSecondCardData second_card_data = 22;
  }
  string v_payment_method_id = 23;
  string v_dd_stripe_card_id = 24;
  string v_fingerprint = 25;
  string v_zip_code = 26;
  string v_zip_check = 27;
  string v_address_check = 28;
  bool v_is_ineligible_prepaid_card_bin = 29;
  bool v_second_card_is_blocklisted = 30;
  bool v_second_card_is_throttled = 31;
  // only civ_id (stripe) OR scan_id (Dyneti) will be set
  string civ_id = 32;
  bool success = 40;
  string error = 41;
  string error_code = 42;

  // Differentiating between outside vendor used for card scan
  enum CardScanVendor {
    // Unspecified Vendor
    CARD_SCAN_VENDOR_UNSPECIFIED = 0;
    // Stripe card scan
    CARD_SCAN_VENDOR_STRIPE = 1;
    // Dyneti card scan
    CARD_SCAN_VENDOR_DYNETI = 2;
  }

  CardScanVendor card_scan_vendor = 43;
  // only civ_id (stripe) OR scan_id (Dyneti) will be set
  string scan_id = 44;
  // order cart id
  string cart_id = 45;
}

// Emitted after a successful request to Bouncer for server-side card scan.
//
// Event name: risk_server_side_card_scan_encrypted_payload (Iguazu)
//             server_side_card_scan_encrypted_payload (Segment)
message ServerSideCardScanEvent {
  string consumer_id = 1;
  string user_id = 2;
  string app_version = 3;
  string experiment_bucket = 4;

  bool encrypted_payload_required = 5;
  bool encrypted_payload_received = 6;

  message BouncerCardVerifyResponse {
    bool card_verified = 1;
    string card_verify_attempted_at = 2;
    repeated string failure_reason = 3;
  }

  BouncerCardVerifyResponse bouncer_card_verify_response = 7;
}

// Emitted after a successful request to Stripe after a card scan for verification.
//
// Event name: risk_stripe_card_verify_response (Iguazu)
//             risk_stripe_card_verify_response (Segment)
message StripeCardVerifyEvent {
  string consumer_id = 1;
  string user_id = 2;
  string app_version = 3;

  message StripeCardVerifyResponse {
    string status = 1;
    repeated string failure_reason = 2;
  }

  StripeCardVerifyResponse stripe_card_verify_response = 4;
}

// Emitted after a successful request to Dyneti after a card scan for verification.
//
// Event name: risk_dyneti_card_verify_response (Iguazu)
//             risk_dyneti_card_verify_response (Segment)
message DynetiCardVerifyEvent {
  string consumer_id = 1;
  string user_id = 2;
  string app_version = 3;

  message DynetiScanVerifyResponse {
    string integrity_check_status = 1;
    string integrity_check_message = 2;
    bool is_fraud = 3;
    repeated string decline_reasons = 4;
  }

  DynetiScanVerifyResponse dyneti_scan_verify_response = 4;
  string cart_id = 5;
  string scan_id = 6;
}

// Emitted after a successful request to Stripe after a card tap for verification.
//
// Event name: risk_tap_card_verify_response (Iguazu)
//             risk_tap_card_verify_response (Segment)
message TapCardVerifyEvent {
  string consumer_id = 1;
  string user_id = 2;
  string app_version = 3;
  string fingerprint = 4;

  message TapCardVerifyResponse {
    string status = 1;
    string setup_intent_id = 2;
  }

  TapCardVerifyResponse tap_card_verify_response = 5;
  string cart_id = 6;

  // fields to build EMV enabled card database -- brand
  string brand = 7;
  // fields to build EMV enabled card database -- bin
  string bin = 8;
  // fields to build EMV enabled card database -- last4
  string last4 = 9;
  // fields to build EMV enabled card database -- funding_type
  string funding_type = 10;
  // fields to build EMV enabled card database -- issuer
  string issuer = 11;
  // fields to build EMV enabled card database -- country
  string country = 12;
  // fields to build EMV enabled card database -- exp_month
  int32 exp_month = 13;
  // fields to build EMV enabled card database -- exp_year
  int32 exp_year = 14;
}

// Emitted after a consumer was successfully warned about first party fraud.
//
// Event name: risk_first_party_fraud_warn_response (Iguazu)
message FirstPartyFraudWarnEvent {
  // consumer id
  string consumer_id = 1;
  // user id
  string user_id = 2;
  // app version from last login
  string app_version = 3;
  // store name
  string store_name = 4;
  // disputed amount
  int32 disputed_amount = 5;
  // currency
  string currency = 6;
  // date of order
  google.protobuf.Timestamp order_date = 7;
  // card brand
  string brand = 8;
  // last 4
  string last4 = 9;
  // date warned
  google.protobuf.Timestamp date_warned = 10;
  // true if hub notification was sent successfully
  bool hub_succeeded = 11;
  // true if push notification was sent successfully
  bool push_succeeded = 12;
  // true if email was sent successfully
  bool email_succeeded = 13;
  // platform used for warning: web, ios or android
  string platform = 14;
}

// Emitted whenever we send an event to Sift.
//
// Event name: risk_sift_event (Iguazu) | sift_event (Segment)
message SiftEvent {
  string acct = 1;
  string event_type = 2;

  string dd_user_id = 3;
  string consumer_id = 4;
  string experience = 5;
  string platform_type = 6;
  string risk_context_id = 7;

  string cart_id = 9;

  string request = 10; // json of the sift FieldSet

  // Model of the Sift event response with score and workflow results.
  // See https://sift.com/developers/docs/curl/workflows-api/running-workflows/synchronous
  message SiftEventResponseProto {
    // Sift's special api status code. 0 means success.
    // See https://sift.com/developers/docs/curl/events-api/error-codes
    int32 status = 1;

    // The relevant error message when status is not 0 (i.e., success).
    string error_message = 2;

    message Score {
      double score = 1;

      message ScoreReason {
        string name = 1;
        string value = 2;
        string details = 3; // json object from google.protobuf.Struct
      }
      repeated ScoreReason reasons = 2;
    }

    // Map from abuse-type (e.g., "payment_abuse", "promotion_abuse") to its score.
    map<string, Score> scores = 3;

    message WorkflowDecision {
      // E.g., "order_looks_ok_payment_abuse"
      repeated string decision_ids = 1;

      // Route name in Workflow decision
      message Route {
        string name = 1;
      }
      Route route = 2;
    }

    // Map from abuse-type (e.g., "payment_abuse") to its workflow decisions
    map<string, WorkflowDecision> workflow_decisions = 4;
  }
  SiftEventResponseProto response = 11;

  google.protobuf.Int32Value resp_status = 12;
  google.protobuf.DoubleValue resp_score = 13;
  repeated string resp_decisions = 14;
}

// Emitted when RDP verifies a 3DS request.
//
// Event name: risk_fraud_3ds (Iguazu) | fraud_3ds (Segment)
message ThreeDSecureEvent {
  google.protobuf.StringValue event_type = 1;
  google.protobuf.StringValue user_id = 2;
  google.protobuf.StringValue consumer_id = 3;
  google.protobuf.StringValue experience = 4;
  google.protobuf.StringValue platform_type = 5;
  google.protobuf.StringValue risk_context_id = 6;
  google.protobuf.StringValue cart_id = 7;
  google.protobuf.StringValue order_uuid = 16;

  google.protobuf.Timestamp payment_created_at = 8;
  google.protobuf.Timestamp client_complete_challenge_at = 9;
  google.protobuf.Timestamp three_d_secure_verified_at = 10;

  google.protobuf.StringValue client_status = 11;
  google.protobuf.StringValue verified_status = 12;

  google.protobuf.StringValue three_d_secure_version = 13;
  google.protobuf.StringValue three_d_secure_stripe_result = 14;
  google.protobuf.StringValue three_d_secure_stripe_result_reason = 15;

  google.protobuf.StringValue payment_gateway_provider = 17;
  google.protobuf.StringValue payment_gateway_resource_id = 18;
  google.protobuf.StringValue dd_payment_intent_id = 19;

  google.protobuf.StringValue three_d_secure_status_id = 20;
}

// Emitted at the end of almost every checkpoint evaluation (some high QPS checkpoints
// have this turned off).
//
// Event name: risk_checkpoint_evaluation, risk_checkpoint_shadow_evaluation (Iguazu and Segment)
message CheckpointEvaluationEvent {
  string evaluation_id = 1;
  string checkpoint = 2;
  string mode = 3;

  string segment_user_type = 4;
  string segment_user_id = 5;
  string entity_type = 6;
  string entity_id = 7;
  string extra_tracking_props = 8; // json object from google.protobuf.Struct

  string final_action = 11;
  string final_action_details = 12; // json object from google.protobuf.Struct

  // Encapsulates all the information of a specific [RuleOutput] that an engine evaluation produced.
  message OutputDetails {
    // Serialization of RuleOutput.details
    google.protobuf.Struct details = 1;

    // RuleIds of the rules that produced this RuleOutput
    repeated string rules = 2;

    // Only applies to Actions.
    // The labels that originated the Action in LabelsToActionsFact
    repeated string labels = 3;
  }
  string actions = 21; // json serialization of map<string, OutputDetails>
  string labels = 22; // json serialization of map<string, OutputDetails>
  string exemptions = 23; // json serialiation of map<string, OutputDetails>

  message FactResult {
    google.protobuf.Value output = 1;
    google.protobuf.Struct details = 2;

    google.protobuf.Struct provenance = 4;

    string error = 6;

    repeated string dependencies = 7;
    string mode = 10;

    google.protobuf.Int64Value execution_ms = 11;

    // How many ms since the start of the checkpoint evaluation did this fact start to run
    google.protobuf.Int64Value start_at_ms = 12;
  }
  string builtin_results = 31; // json serialization of map<string, FactResult>
  string fact_results = 32; // json serialization of map<string, FactResult>
  string rule_results = 33; // json serialization of map<string, FactResult>

  string delivery_id = 40;
  // link_id is a random uuid field being used to link & find
  // topics published by RDP and risk-core
  string link_id = 41;

  // evaluated_at is the timestamp when the checkpoint evaluation completes
  google.protobuf.Timestamp evaluated_at = 42;

  // experiment_overrides is a field that is used to track overrides in experiments
  // json serialization of map<string, risk_core.v1.risk_evaluation_service.v1.ExperimentGroupConfig>
  string experiment_overrides = 43;
}

// Emitted on every dasher user profile account update
//
// Event name: risk_dasher_update_user_profile (Iguazu)
message RiskDasherUpdateUserProfileEvent {
  string risk_context = 1;
  google.protobuf.Timestamp timestamp = 2;

  google.protobuf.StringValue user_id = 3;
  google.protobuf.StringValue first_name = 4;
  google.protobuf.StringValue last_name = 5;
  google.protobuf.StringValue email = 6;
  google.protobuf.StringValue phone_number = 7;
  google.protobuf.StringValue phone_number_components = 8;
  google.protobuf.StringValue source = 9;
}

// Fraud global holdout event
message FraudGlobalHoldoutEvent {
  // Consumer probability
  float consumer_probability = 1;
  // Decay Rate
  float decay_rate = 2;
  // Integer consumer identifier, to be deprecated in favor of `consumer_id_v2`.
  int32 consumer_id = 3;
  // Consumer identifier
  string consumer_id_v2 = 10;
  // Total number of orders global holdout
  int32 holdout_order_cart_num = 4;
  // Inclusion Probability
  float inclusion_prob = 5;
  // Global holdout bucket id
  string global_holdout_bucket_id = 6;
  // Global holdout bucket type
  string global_holdout_bucket_id_type = 7;
  // Global holdout status
  bool in_global_holdout = 8;
  // Global holdout bucket hash
  float bucket_hash = 9;
}

// Delivery Level Event
message DeliveryLevelEvent {
  // delivery id
  string delivery_id = 1;
  // delivery event type
  string event_type = 2;
  // dasher id
  string dasher_id = 3;
  // delivery event time
  google.protobuf.Timestamp event_time = 4;
}

// Emitted whenever we call Riskified
//
// Event name: riskified_event (Iguazu)
message RiskifiedEvent {
  string acct = 1;
  string env = 2;
  string endpoint = 3;

  string user_id = 4;
  string consumer_id = 5;
  string cart_uuid = 9;
  string riskified_order_id = 10; // the cart_uuid with attempt_num suffix
  string experiment_type = 11;
  string prev_status = 12;
  string status = 13;
  string platform = 14;
  string details = 15; // in JSON format, for other event specific ids

  string req_body = 16; // request body in JSON format
  string resp_body = 17; // Riskified response body in JSON format
  google.protobuf.Int32Value resp_status = 18;
}

// Emitted whenever we call Signifyd
//
// Event name: signifyd_event (Iguazu)
message SignifydEvent {
  string env = 1;
  string endpoint = 2;
  string user_id = 3;
  string consumer_id = 4;
  string cart_uuid = 5; // signify's orderId
  string order_uuid = 6; // signify's checkoutId
  string delivery_id = 7;
  string experiment_type = 8;
  string status = 9;
  string platform = 10;
  string details = 11; // other key-values in JSON format

  string req_body = 12; // in JSON format
  string resp_body = 13; // in JSON format
  google.protobuf.Int32Value resp_status = 14;
}

// Delivery Dasher Location Event
message DeliveryDasherLocationEvent {
  // delivery id
  string delivery_id = 1;
  // dasher id
  string dasher_id = 2;
  // start time
  google.protobuf.Timestamp start_time = 3;
  // end time
  google.protobuf.Timestamp end_time = 4;
  // dasher locations in JSON format
  string dasher_locations = 5;
}

message SocureEvaluationEvent {
  string reference_id = 1;
  string applicant_unique_link = 2;
  string use_case = 3;
  string decision = 4;
  string fact_data = 5; // json object from google.protobuf.Struct
  string results = 6; // json object from google.protobuf.Struct
  google.protobuf.Timestamp created_time = 7;
  string error_message = 8;
}

// Photo proof Iguazu events - Emitted when photo proof details & links are saved
message CnrPhotoProofDetailsEvent {
  google.protobuf.StringValue delivery_id = 1;
  google.protobuf.StringValue user_id = 2;
  google.protobuf.StringValue consumer_id = 3;
  google.protobuf.StringValue problem_type = 4;
  google.protobuf.StringValue sub_problem_type = 5;
  google.protobuf.Int64Value item_id = 6;
  google.protobuf.StringValue photo_purpose = 7;
  google.protobuf.StringValue description = 8;
  google.protobuf.StringValue photo_proof_source = 9;
  google.protobuf.Int64Value id = 10;
  google.protobuf.StringValue os = 11;
}

message CnrPhotoLinkEvent {
  google.protobuf.StringValue photo_url = 1;
  google.protobuf.StringValue photo_uuid = 2;
  google.protobuf.StringValue file_name_with_extension = 3;
  google.protobuf.Int64Value photo_proof_details_id = 4;
  google.protobuf.Int64Value id = 5;
  google.protobuf.StringValue additional_metadata = 6;
  google.protobuf.StringValue photo_origin = 7;
  google.protobuf.StringValue model_results = 8;
}

// Event emitted when a cart payment is created with a digital wallet and checked for a fresh cryptogram.
//
// Event name: FreshCryptogramCheckEvent (Iguazu)
message FreshCryptogramCheckEvent {
  // unique id of the cart payment
  string cart_payment_id = 1;
  // consumer id
  string consumer_id = 2;
  // user id
  string user_id = 3;
  // id of payment method which this cart payment was charged on
  string payment_method_id = 4;
  // payment provider
  string payment_provider = 5;
  // true if the cryptogram was fresh when cart payment was created
  bool has_fresh_cryptogram = 6;
  // status of the cart payment transaction
  string status = 7;
}
