syntax = "proto3";

package risk_platform.event.v1.risk_stream.v1;

option java_package = "com.doordash.rpc.risk_stream.realtime";

import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
// represents event received from a KAFKA topic
message RiskStreamInputEvent{
  // Kafka metadata
  // Kafka topic for event
  string topic = 1;
  // Time it was enqueued
  google.protobuf.Timestamp enqueue_time = 2;
  // Time a message was dequeued
  google.protobuf.Timestamp dequeue_time = 3;

  //Message metadata
  // Event time
  google.protobuf.Timestamp event_time = 30;
  // Event type can be class or a specific case
  google.protobuf.StringValue event_type = 31;
  // context if any attached to event.
  google.protobuf.StringValue risk_context = 32;
  // Row identifier for each event
  google.protobuf.StringValue row_identifier = 33;

  //Payload identifiers
  // User id
  google.protobuf.StringValue user_id = 50;
  // Consumer id
  google.protobuf.StringValue consumer_id = 51;
  // Dasher id
  google.protobuf.StringValue dasher_id = 52;
  // order id
  google.protobuf.StringValue order_id = 53;
  // Delivery id
  google.protobuf.StringValue delivery_id = 54;
  // Shift id
  google.protobuf.StringValue shift_id = 55;
  // card fingerprint
  google.protobuf.StringValue card_fingerprint = 56;

  //Payload
  google.protobuf.StringValue message = 100;

}

// Parsed feature from any event
message RiskFeature {
  // location of the job where feature is being used
  JobLocation location = 1;
  // feature name
  google.protobuf.StringValue feature_name = 2;
  // The entity type
  google.protobuf.StringValue entity_type = 3;
  // Entity id
  google.protobuf.StringValue entity_id = 4;
  // Entity timestamp
  google.protobuf.Timestamp event_time = 5;
  // feature value
  google.protobuf.Int64Value feature_value = 6;
  // Feature row identifier
  google.protobuf.StringValue row_identifier = 7;
  // feature metadata
  RiskFeatureMetadata metadata = 8;
  // distinct entities
  DistinctEntityMap distinct_entities = 9;
}

// distinct entity map
message DistinctEntityMap {
  // key: distinct entity identifier name, value: distinct entity id set
  map<string, DistinctEntityIdSet> distinct_entity_ids = 1;
}

// distinct entity id set
message DistinctEntityIdSet {
  // distinct entity ids
  repeated string ids = 1;
}

// metadata info for risk features
message RiskFeatureMetadata {
  // key: MetadataEntityType, value: MetadataEntityValue
  map<string, string> metadata_values = 1;
}

// Enum for location in job
enum JobLocation {
  //UNKNOWN
  JOB_LOCATION_UNSPECIFIED = 0;
  // Constant representing location sink
  JOB_LOCATION_SINK = 1;
  // Constant representing location feature
  JOB_LOCATION_FEATURE_GEN = 2;
  // Constant representing event at source
  JOB_LOCATION_KAFKA = 3;
}
