syntax = "proto3";
package chow_service_internal.v1;
option java_package = "com.doordash.rpc.chow_service_internal";
option java_outer_classname = "MachineActivityService";
option java_multiple_files = true;

import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

// Severity of activity
enum Severity {
  // don't use
  SEVERITY_UNSPECIFIED = 0;
  // Info activity like App started, Firmware upload
  SEVERITY_INFO = 1;
  // Activity where an error will occur if action is not taken
  SEVERITY_WARNING = 2;
  // Activity that's fatal to robot's operation (previously DISTRESS)
  SEVERITY_ERROR = 3;
}

// What kind of activity is it?
enum Activity {
  // don't use
  ACTIVITY_UNSPECIFIED = 0;
  // App Started
  ACTIVITY_APP_STARTED = 1;
  // Going to Patron View
  ACTIVITY_APP_GOING_TO_PATRON_VIEW = 2;
  // Downloading firmware
  ACTIVITY_FIRMWARE_DOWNLOADING = 3;
  // Firmware upload success
  ACTIVITY_FIRMWARE_UPLOAD_SUCCESS = 4;
  // Firmware upload failed
  ACTIVITY_FIRMWARE_UPLOAD_FAILURE = 5;
  // Downloading metadata
  ACTIVITY_CLOUD_SYNCING = 6;
  // Sync to cloud succeeded
  ACTIVITY_CLOUD_SYNC_SUCCESS = 7;
  // Sync to cloud failed
  ACTIVITY_CLOUD_SYNC_FAILURE = 8;
  // Sign in attempt failed
  ACTIVITY_OPERATOR_LOGIN_FAILURE = 9;
  // Received invalid temperature
  ACTIVITY_FIRMWARE_INVALID_TEMPERATURE = 10;
  // Ucontroller was reopened after a timeout = 11;
  ACTIVITY_UNCONTROLLER_REOPENED_AFTER_TIMEOUT = 11;
  // Ucontroller was reopened after a malformed response was received from it
  ACTIVITY_UNCONTROLLER_REOPENED_AFTER_MALFORMED_RESPONSE = 12;
  // Payment server was not found make sure it is connected and has the correct IP address
  ACTIVITY_PAYMENT_SERVER_MISSING = 13;
  // Capture payment failed... [Error: ${error}]
  ACTIVITY_PAYMENT_FAILURE = 14;
  // Could not print label. Please inspect the printer. [Error: ${error}]
  ACTIVITY_PRINT_LABEL_FAILURE = 15;
  // Disabled with fill time
  ACTIVITY_DISABLED_WITH_FILLED_TIME = 16;
  // App went to background
  ACTIVITY_APP_IN_BACKGROUND = 17;
  // App came to foreground
  ACTIVITY_APP_IN_FOREGROUND = 18;
  // list of expected and connected payments don't match
  ACTIVITY_PAYMENT_MISMATCH = 19;
  // dispense session was marked for review
  ACTIVITY_DISPENSE_SESSION_MARKED_FOR_REVIEW = 20;

  // Following NOTIFY_ enums will be removed from here when
  // Cloud can detect when the robots goes to those states (already possible) AND when an operator sessions is ongoing
  // ENABLED - Sally has been re-enabled by operator
  ACTIVITY_NOTIFY_SUBSCRIBERS_ENABLED = 100;
  //Machine has been disabled due to temperature being above acceptable levels.
  ACTIVITY_NOTIFY_SUBSCRIBERS_DISABLED_TEMPERATURE_FAULT = 101;
  //Machine has been disabled due to a collision.
  ACTIVITY_NOTIFY_SUBSCRIBERS_DISABLED_COLLISION = 102;
  //Machine was manually disabled
  ACTIVITY_NOTIFY_SUBSCRIBERS_DISABLED_MANUAL = 103;
  //Machine has been disabled due to main door being open
  ACTIVITY_NOTIFY_SUBSCRIBERS_DISABLED_MAIN_DOOR_OPEN = 104;
  //Machine has been disabled due to bowl door being open
  ACTIVITY_NOTIFY_SUBSCRIBERS_DISABLED_BOWL_DOOR_OPEN = 105;
  //Machine has been disabled due to POS panel being open
  ACTIVITY_NOTIFY_SUBSCRIBERS_DISABLED_POS_DOOR_OPEN = 106;
  //Machine has been disabled due to bowl arm collision
  ACTIVITY_NOTIFY_SUBSCRIBERS_DISABLED_BOWL_ARM_COLLISION = 107;
  // ENABLED - Sally has been re-enabled by auto recovery
  ACTIVITY_NOTIFY_SUBSCRIBERS_ENABLED_AUTO_RECOVERY = 108;
  //Machine has been disabled due to firmware being disconnected
  ACTIVITY_NOTIFY_SUBSCRIBERS_DISABLED_FIRMWARE_DISCONNECTED = 109;
}

// message for sending machine activity
message MachineActivityMessage {
  // how severe is the activity?
  Severity severity = 1;
  // what is the activity
  Activity activity = 2;
  // free text description
  string description = 3;
}

// Request for sending the messages
message RecordMachineActivityRequest {
  // list of messages to be sent
  repeated MachineActivityMessage messages = 1;
  // Client UTC timestamp when message was sent
  google.protobuf.Timestamp sent_at = 20;
  // order completed timestamp in the local timezone
  google.protobuf.Timestamp local_time_sent_at = 21;
}

// response to the send status message
message RecordMachineActivityResponse {
  // Whether or not server successfully registered the message
  google.protobuf.BoolValue success = 1;
}
