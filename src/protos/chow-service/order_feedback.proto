syntax = "proto3";
package chow_service_internal.v1;
option java_package = "com.doordash.rpc.chow_service_internal";
option java_outer_classname = "OrderFeedbackService";
option java_multiple_files = true;

import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

// Canister states
enum FeedbackSentiment {
  // don't use
  FEEDBACK_SENTIMENT_UNSPECIFIED = 0;
  // negative (previously -1)
  FEEDBACK_SENTIMENT_NEGATIVE = 1;
  // neutral (previously 0)
  FEEDBACK_SENTIMENT_NEUTRAL = 3;
  // positive (previously 1)
  FEEDBACK_SENTIMENT_POSITIVE = 5;
}

// Issues reported during feedback
enum Issue {
  // don't use
  ISSUE_UNSPECIFIED = 0;
  // Ordering experience issues
  ISSUE_ORDER_EXPERIENCE = 1;
  // Ingredient out of stock
  ISSUE_ORDER_EXPERIENCE_INGREDIENT_OUT_OF_STOCK = 2;
  // Confusing ordering process
  ISSUE_ORDER_EXPERIENCE_CONFUSING_ORDERING_PROCESS = 3;
  // Ingredient dispensing issues
  ISSUE_DISPENSE = 4;
  // Wrong ingredient dispensed
  ISSUE_DISPENSE_WRONG_INGREDIENT_DISPENSED = 5;
  // Portion is off
  ISSUE_DISPENSE_INGREDIENT_PORTION_OFF = 6;
  // Ingredient spilled
  ISSUE_DISPENSE_INGREDIENT_SPILLED = 7;
  // Ingredient ran out
  ISSUE_DISPENSE_INGREDIENT_RAN_OUT = 8;
  // Meal issues
  ISSUE_MEAL = 9;
  // Portion too small
  ISSUE_MEAL_TOO_SMALL = 10;
  // Food not fresh
  ISSUE_MEAL_NOT_FRESH = 11;
  // Pricing
  ISSUE_PRICING = 12;
}

// Order feedback message
message OrderFeedbackMessage {
  // order id
  string order_id = 1;
  // recipe id
  string recipe_id = 2;
  // recipe name
  string recipe_name= 3;
  // overall feedback sentiment
  FeedbackSentiment feedback_sentiment = 4;
  // feedback issues
  repeated Issue feedback_issues = 5;
  // additional feedback
  string additional_feedback = 6;
  // Client UTC timestamp when message was collected by the client
  google.protobuf.Timestamp collected_at = 50;
}

// Request for sending the messages
message RecordOrderFeedbackRequest {
  // list of messages to be sent
  repeated OrderFeedbackMessage messages = 1;
  // Client UTC timestamp when message was sent
  google.protobuf.Timestamp sent_at = 20;
  // order completed timestamp in the local timezone
  google.protobuf.Timestamp local_time_sent_at = 21;
}

// response to the send status message
message RecordOrderFeedbackResponse {
  // Whether or not server successfully registered the message
  google.protobuf.BoolValue success = 1;
}
