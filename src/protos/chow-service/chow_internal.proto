syntax = "proto3";
package chow_service_internal.v1;
option java_package = "com.doordash.rpc.chow_service_internal";
option java_outer_classname = "Service";
option java_multiple_files = true;
option java_generic_services = true;

import "chow-service/machine.proto";
import "chow-service/promotion.proto";
import "chow-service/ingredient.proto";
import "chow-service/recipe.proto";
import "chow-service/menu.proto";
import "chow-service/canister_map.proto";
import "chow-service/alert_subscription.proto";
import "chow-service/canister_handshake.proto";
import "chow-service/theme.proto";
import "chow-service/data_migration.proto";
import "chow-service/authentication.proto";

// Service
// NOTE: Method names should follow VerbNoun convention
// Naming Guide: https://cloud.google.com/apis/design/naming_convention#method_name
service ChowService {
  // Create new machines
  rpc CreateMachines(CreateMachinesRequest) returns (CreateMachinesResponse);

  // Get machines by machine ids
  rpc GetMachinesByIds(GetMachinesByIdsRequest) returns (GetMachinesByIdsResponse);

  // Create machines
  rpc UpdateMachines(UpdateMachinesRequest) returns (UpdateMachinesResponse);

  // clear machine attributes
  rpc ClearMachineAttributes(ClearMachineAttributesRequest) returns (ClearMachineAttributesResponse);

  // List machines (DO NOT CONSUME outside of legacy internal analysis portal)
  rpc ListMachines(ListMachinesRequest) returns (ListMachinesResponse);

  // Search machines
  rpc SearchMachines(SearchMachinesRequest) returns (SearchMachinesResponse);

  // Get promotions
  rpc GetPromotions(GetPromotionsRequest) returns (GetPromotionsResponse);

  // Get promotion by promotion id
  rpc GetPromotionById(GetPromotionByIdRequest) returns (GetPromotionByIdResponse);

  // Get promotions count
  rpc GetPromotionsCount(GetPromotionsCountRequest) returns (GetPromotionsCountResponse);

  // Create promotion
  rpc CreatePromotions(CreatePromotionsRequest) returns (CreatePromotionsResponse);

  // Redeem promotion
  rpc RedeemPromotion(RedeemPromotionRequest) returns (RedeemPromotionResponse);

  // Update promotion
  rpc UpdatePromotion(UpdatePromotionRequest) returns (UpdatePromotionResponse);

  // Get Ingredient
  rpc GetIngredients(GetIngredientsRequest) returns (GetIngredientsResponse);

  // Create GLOBAL Ingredient (For machine level recipe overrides, use UpdateIngredient with MachineIdsAndIngredient)
  rpc CreateIngredient(CreateIngredientRequest) returns (CreateIngredientResponse);

  // Update Ingredient
  rpc UpdateIngredient(UpdateIngredientRequest) returns (UpdateIngredientResponse);

  // Add Portion to ingredients
  rpc AddPortionToIngredient(AddPortionToIngredientRequest) returns (AddPortionToIngredientResponse);

  // Remove Portion from ingredients
  rpc RemovePortionFromIngredient(RemovePortionFromIngredientRequest) returns (RemovePortionFromIngredientResponse);

  // Get machine ids where this ingredient is used
  rpc GetIngredientUsage(GetIngredientUsageRequest) returns (GetIngredientUsageResponse);

  // Search ingredients
  rpc SearchIngredients(SearchIngredientsRequest) returns (SearchIngredientsResponse);

  // Search ingredients count
  rpc SearchIngredientsCount(SearchIngredientsCountRequest) returns (SearchIngredientsCountResponse);

  // Get Recipe
  rpc GetRecipes(GetRecipesRequest) returns (GetRecipesResponse);

  // Create GLOBAL Recipe (For machine level recipe overrides, use UpdateRecipe with MachineIdsAndRecipe)
  rpc CreateRecipe(CreateRecipeRequest) returns (CreateRecipeResponse);

  // Update Recipe
  rpc UpdateRecipe(UpdateRecipeRequest) returns (UpdateRecipeResponse);
  
  // add an alternate ingredient to all eligible recipes in a menu
  rpc AddAlternateIngredientToMenuRecipes(AddAlternateIngredientToMenuRecipesRequest) returns (AddAlternateIngredientToMenuRecipesResponse);

  // remove an alternate ingredient from recipes in a menu
  rpc RemoveAlternateIngredientFromMenuRecipes(RemoveAlternateIngredientFromMenuRecipesRequest) returns (RemoveAlternateIngredientFromMenuRecipesResponse);

  // Search recipes
  rpc SearchRecipes(SearchRecipesRequest) returns (SearchRecipesResponse);

  // Search recipes count
  rpc SearchRecipesCount(SearchRecipesCountRequest) returns (SearchRecipesCountResponse);

  // Get Recipe Usage
  rpc GetRecipeUsage(GetRecipeUsageRequest) returns (GetRecipeUsageResponse);

  // Get Menu
  rpc GetMenus(GetMenusRequest) returns (GetMenusResponse);

  // Get Menu Usage
  rpc GetMenuUsage(GetMenuUsageRequest) returns (GetMenuUsageResponse);

  // Create GLOBAL Menu (For machine level menu overrides, use UpdateMenu with MachineIdsAndMenu)
  rpc CreateMenu(CreateMenuRequest) returns (CreateMenuResponse);

  // Update Menu
  rpc UpdateMenu(UpdateMenuRequest) returns (UpdateMenuResponse);

  // RemoveAllMenusFromMachine
  rpc RemoveAllMenusFromMachine(RemoveAllMenusFromMachineRequest) returns (RemoveAllMenusFromMachineResponse);

  // search menus
  rpc SearchMenus(SearchMenusRequest) returns (SearchMenusResponse);

  // search menus count
  rpc SearchMenusCount(SearchMenusCountRequest) returns (SearchMenusCountResponse);

  // Get Canister Map
  rpc GetCanisterMaps(GetCanisterMapsRequest) returns (GetCanisterMapsResponse);

  // Create Canister Map
  rpc CreateCanisterMap(CreateCanisterMapRequest) returns (CreateCanisterMapResponse);

  // update Canister Map
  rpc UpdateCanisterMap(UpdateCanisterMapRequest) returns (UpdateCanisterMapResponse);

  // Get Alert Subscription
  rpc GetAlertSubscription(GetAlertSubscriptionRequest) returns (GetAlertSubscriptionResponse);

  // Create Alert Subscription
  rpc CreateAlertSubscription(CreateAlertSubscriptionRequest) returns (CreateAlertSubscriptionResponse);

  // update Alert Subscription
  rpc UpdateAlertSubscription(UpdateAlertSubscriptionRequest) returns (UpdateAlertSubscriptionResponse);

  // delete Alert Subscription
  rpc DeleteAlertSubscription(DeleteAlertSubscriptionRequest) returns (DeleteAlertSubscriptionResponse);

  // Get latest canister info -- for ChowApp
  rpc GetLatestCanisterInfo(GetLatestCanisterInfoRequest) returns (GetLatestCanisterInfoResponse);

  // add an ingredient to all eligible custom recipes in a menu
  rpc AddIngredientToCustomBowls(AddIngredientToCustomBowlsRequest) returns (AddIngredientToCustomBowlsResponse);

  // remove an ingredient from all custom recipes in a menu
  rpc RemoveIngredientFromCustomBowls(RemoveIngredientFromCustomBowlsRequest) returns (RemoveIngredientFromCustomBowlsResponse);

  // update canister map slot
  rpc ClearCanisterMapSlot(ClearCanisterMapSlotRequest) returns (ClearCanisterMapSlotResponse);

  // send realtime events to kafka
  rpc SendLatestKafkaEvents(SendLatestKafkaEventsRequest) returns (SendLatestKafkaEventsResponse);

  // get signed upload url for themes
  rpc GetSignedUploadUrl(GetSignedUploadUrlRequest) returns (GetSignedUploadUrlResponse);

  // Create theme
  rpc CreateTheme(CreateThemeRequest) returns (CreateThemeResponse);

  // Update theme
  rpc UpdateTheme(UpdateThemeRequest) returns (UpdateThemeResponse);

  // list base themes
  rpc ListBaseThemes(ListBaseThemesRequest) returns (ListBaseThemesResponse);

  // get theme details
  rpc GetThemeDetails(GetThemeDetailsRequest) returns (GetThemeDetailsResponse);

  // delete themes
  rpc DeleteThemes(DeleteThemesRequest) returns (DeleteThemesResponse);

  // delete media
  rpc DeleteMedia(DeleteMediaRequest) returns (DeleteMediaResponse);

  // get signed image upload url for ingredient, recipe or menu
  rpc GetSignedImageUploadUrl(GetSignedImageUploadUrlRequest) returns (GetSignedImageUploadUrlResponse);

  // data migration
  rpc MigrateData(MigrateDataRequest) returns (MigrateDataResponse);

  // get all business and store ids
  rpc GetBusinessAndStoreIds(GetBusinessAndStoreIdsRequest) returns (GetBusinessAndStoreIdsResponse);

  // create a master password
  rpc CreateMasterPassword(CreateMasterPasswordRequest) returns (CreateMasterPasswordResponse);
}
