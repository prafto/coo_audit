syntax = "proto3";
package chow_service_internal.v1;
option java_package = "com.doordash.rpc.chow_service_internal";
option java_outer_classname = "OrderService";
option java_multiple_files = true;

import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "chow-service/common.proto";
import "chow-service/order_ingredient.proto";

// charges break down for the order
message OrderCharge {
  // price before tax
  google.protobuf.UInt64Value before_tax_price = 1;
  // price after tax
  google.protobuf.UInt64Value after_tax_price = 2;
  // base price
  google.protobuf.UInt64Value base_price = 3;
  // additional charge for extras
  repeated IngredientCharge extra_portions = 4;
  // additional charge for premium
  repeated IngredientCharge premium_portions = 5;
  // tax amount
  google.protobuf.UInt64Value tax_amount = 6;
  // tax percentage
  google.protobuf.DoubleValue tax_percentage = 7;
  // discount amount
  google.protobuf.UInt64Value discount_amount = 8;
  // discount %
  google.protobuf.DoubleValue discount_percentage = 9;
  // discount amount from payment vendor
  google.protobuf.UInt64Value payment_vendor_discount_amount = 10;
  // discount % from payment vendor
  google.protobuf.DoubleValue payment_vendor_discount_percentage = 11;
}

// payment info for the order
message PaymentInfo {
  // is payment captured
  google.protobuf.BoolValue is_captured = 1;
  // is payment voided
  google.protobuf.BoolValue is_voided = 2;
  // is tax exempt
  google.protobuf.BoolValue is_tax_exempt = 3;
  // is payment disabled i.e pay at register instead of the robot
  google.protobuf.BoolValue is_payment_disabled = 4;
  // promo code used
  string promotion_code = 5;
  // currency for receipt
  PricingCurrency currency = 6;
  // total display with or without tax
  PricingTotalTax total_tax_display = 7;
  // pricing scheme
  PricingScheme pricing_scheme = 8;
  // initial charge before dispensing
  OrderCharge pre_auth_charge = 9;
  // actual charge
  OrderCharge charge = 10;
  // transaction details
  Transaction transaction = 11;
  // Financial Card Reader type (if used)
  FinancialCardReader card_reader = 12;
  // Meal Plan type (if used)
  MealPlan meal_plan = 13;
  // Payment Printer type (if used)
  PaymentPrinter payment_printer = 14;
}

// Vendor transaction details
// Many fields are intentionally free text because they are vendor dependent
message Transaction {
  // vendor transaction status
  google.protobuf.StringValue status = 1;
  // transaction type - REFUND, BALANCE etc
  google.protobuf.StringValue type = 2;
  // transaction ref number
  google.protobuf.StringValue reference_number = 3;
  // card entry mode
  google.protobuf.StringValue issuer_approval_number = 5;
  // amount requested
  google.protobuf.UInt64Value requested_amount = 6;
  // amount authorized
  google.protobuf.UInt64Value authorized_amount = 7;
  // retrieval reference number
  google.protobuf.StringValue retrieval_reference_number = 8;
  // auth code
  google.protobuf.StringValue auth_code = 9;
  // masked card number
  google.protobuf.StringValue masked_card_number = 10;
  // card token A
  google.protobuf.StringValue card_token_a = 11;
  // card token B
  google.protobuf.StringValue card_token_b = 12;
  // card expiry
  google.protobuf.StringValue card_expiry_date = 13;
  // card name
  google.protobuf.StringValue card_name = 14;
  // account type
  google.protobuf.StringValue account_type = 15;
  // SPDH response
  google.protobuf.StringValue spdh_response_code = 16;
  // ISO response
  google.protobuf.StringValue iso_response_code = 17;
  // response
  google.protobuf.StringValue response_code = 18;
  // Application Identifier
  google.protobuf.StringValue aid = 19;
  // Chip Application Label
  google.protobuf.StringValue label = 20;
  // Terminal Verification Results
  google.protobuf.StringValue tvr = 21;
  // Terminal Status Indicator
  google.protobuf.StringValue tsi = 22;
  // error description
  google.protobuf.StringValue error_description = 23;
  //TransactionDateAndTime
  google.protobuf.Timestamp transaction_at = 24;
}

// patron info
message Patron {
  // user_id is only set from the mobile app currently
  string user_id = 1;
  // email is only set from the sally tablet
  string email = 2;
}

// Record order message
message RecordOrderMessage {
  // order id
  string order_id = 1;
  // recipe id
  string recipe_id = 2;
  // user session id
  string session_id = 3;
  // order status
  OrderStatus order_status = 4;
  // locale selected
  Locale locale = 5;
  // expected nutrition info
  NutritionFacts expected_nutrition_facts = 6;
  // actual nutrition info based in what's dispensed
  NutritionFacts actual_nutrition_facts = 7;
  // ingredients dispensed
  repeated OrderIngredient ingredients = 8;
  // previously bowl type
  RecipeCategory recipe_category = 9;
  // recipe name (must use en_US)
  string recipe_name = 10;
  // dispense algorithm used
  DispenseCriteriaAlgorithm dispense_criteria = 11;
  // payment info
  PaymentInfo payment_info = 12;
  // patron info
  Patron patron = 13;
  // whether user created the cart on app or tablet
  OrderCartDeviceType order_cart_device_type = 14;
  // order recipe
  OrderRecipe order_recipe = 44;
  // the overall time that was spent dispensing (this is different than order_completed_at - order_started_at).
  // This is a KPI internally and excludes times that ingredient runs out and we are waiting on patron to make a selection. It is purely dispense time.
  google.protobuf.UInt32Value dispense_duration = 15;
  // when the session was started (helps to know how long the order took to place and complete)
  google.protobuf.Timestamp session_started_at = 40;
  // when order was submitted by the user (happens once the users goes beyond the review page and have intention of paying)
  google.protobuf.Timestamp order_submitted_at = 41;
  // when the dispense started
  google.protobuf.Timestamp dispense_started_at = 42;
  // order completed timestamp
  google.protobuf.Timestamp order_completed_at = 43;
}

// Record order request
message RecordOrderRequest {
  // list of messages to be sent
  repeated RecordOrderMessage messages = 1;
  // Client UTC timestamp when message was sent
  google.protobuf.Timestamp sent_at = 20;
  // order completed timestamp in the local timezone
  google.protobuf.Timestamp local_time_sent_at = 21;
}

// Record orde response
message RecordOrderResponse {
  // Whether or not server successfully registered the message
  google.protobuf.BoolValue success = 1;
}
