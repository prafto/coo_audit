syntax = "proto3";
package chow_service_internal.v1;

option java_multiple_files = true;
option java_generic_services = true;
option java_package = "com.doordash.rpc.chow_service_internal";

import "google/protobuf/wrappers.proto";

// Recipe categories
enum RecipeCategory {
  // don't set this value
  RECIPE_CATEGORY_UNSPECIFIED = 0;
  // salad bowl
  RECIPE_CATEGORY_SALAD_BOWL = 1;
  // grain bowl
  RECIPE_CATEGORY_GRAIN_BOWL = 2;
  // snack bowl
  RECIPE_CATEGORY_SNACK_BOWL = 3;
  // yogurt bowl
  RECIPE_CATEGORY_YOGURT_BOWL = 4;
  // cereal bowl
  RECIPE_CATEGORY_CEREAL_BOWL = 5;
}

// Ingredient portion type (aka category)
enum PortionType {
  // don't set this value
  PORTION_TYPE_UNSPECIFIED = 0;
  // ingredient is base
  PORTION_TYPE_BASE = 1;
  // ingredient is dressing
  PORTION_TYPE_DRESSING = 2;
  // ingredient is topping
  PORTION_TYPE_TOPPING = 3;
}

// Portion size
enum PortionSize {
  // unspecified
  PORTION_SIZE_UNSPECIFIED = 0;
  // small
  PORTION_SIZE_SMALL = 1;
  // medium
  PORTION_SIZE_MEDIUM = 2;
  // large
  PORTION_SIZE_LARGE = 3;
  // extra large
  PORTION_SIZE_EXTRA_LARGE = 4;
}

// Door status
enum DoorStatus {
  // Unspecified (Don't set this val)
  DOOR_STATUS_UNSPECIFIED = 0;
  // Door open
  DOOR_STATUS_OPEN = 1;
  // Door closed
  DOOR_STATUS_CLOSED = 2;
}

//Feature status
enum FeatureStatus {
  // Unspecified (Don't set this val)
  FEATURE_STATUS_UNSPECIFIED = 0;
  // Feature On
  FEATURE_STATUS_ON = 1;
  // Feature Off
  FEATURE_STATUS_OFF = 2;
}

//Bowl status
enum BowlStatus {
  // Unspecified (Don't set this val)
  BOWL_STATUS_UNSPECIFIED = 0;
  // Bowl found
  BOWL_STATUS_FOUND = 1;
  // Bowl not found
  BOWL_STATUS_NOT_FOUND = 2;
  // Bowl weight is excessive
  BOWL_STATUS_EXCESSIVE_WEIGHT = 3;
}

// Various statuses a machine can report
enum MachineStatus {
  // machine status not set (Don't set this val)
  MACHINE_STATUS_UNSPECIFIED = 0;
  // machine is enabled
  MACHINE_STATUS_ENABLED = 1;
  // disabled due to a temperature fault
  MACHINE_STATUS_DISABLED_TEMPERATURE_FAULT = 2;
  // disabled due to a collision
  MACHINE_STATUS_DISABLED_COLLISION = 3;
  // disabled manually using M0 gcode
  MACHINE_STATUS_DISABLED_MANUAL = 4;
  // disabled due to main door being open
  MACHINE_STATUS_DISABLED_MAIN_DOOR_OPEN = 5;
  // disabled due to bowl actuator fault
  MACHINE_STATUS_DISABLED_BOWL_ARM = 6;
  // disabled due to bowl door being open
  MACHINE_STATUS_DISABLED_BOWL_DOOR_OPEN = 7;
  // disabled due to POS panel being open
  MACHINE_STATUS_DISABLED_POS_PANEL_OPEN = 8;
  // disabled due to firmware being disconnected
  MACHINE_STATUS_DISABLED_FIRMWARE_DISCONNECTED = 9;
}

// Connection quality at machine sourced from
// https://github.com/facebookarchive/network-connection-class/blob/7282817fcf890c9ace568d0cc260e51c83954d7a/connectionclass/src/main/java/com/facebook/network/connectionclass/ConnectionQuality.java
enum ConnectionQuality {
  // machine connection quality not set (Don't set this val)
  CONNECTION_QUALITY_UNSPECIFIED = 0;
  /**
   * Bandwidth under 150 kbps.
   */
  CONNECTION_QUALITY_POOR = 1;
  /**
   * Bandwidth between 150 and 550 kbps.
   */
  CONNECTION_QUALITY_MODERATE = 2;
  /**
   * Bandwidth between 550 and 2000 kbps.
   */
  CONNECTION_QUALITY_GOOD = 3;
  /**
   * EXCELLENT - Bandwidth over 2000 kbps.
   */
  CONNECTION_QUALITY_EXCELLENT = 4;
  /**
   * Placeholder for unknown bandwidth. This is the initial value and will stay at this value
   * if a bandwidth cannot be accurately found.
   */
  CONNECTION_QUALITY_UNKNOWN = 5;
}

// Machine firmware version
enum FirmwareVersion {
  // Unspecified (don't set)
  FIRMWARE_VERSION_UNSPECIFIED = 0;
  // 1.0
  FIRMWARE_VERSION_SALLY_1_0 = 1;
  // 1.5
  FIRMWARE_VERSION_SALLY_1_5 = 2;
  // 1.5+
  FIRMWARE_VERSION_SALLY_1_5_PLUS = 3;
  // 2.0
  FIRMWARE_VERSION_SALLY_2_0 = 4;
  // Dash2Go 1.0
  FIRMWARE_VERSION_DASH2GO_1_0 = 5;
}

// Order status
enum OrderStatus {
  // don't use
  ORDER_STATUS_UNSPECIFIED = 0;
  // order was completed
  ORDER_STATUS_COMPLETED = 1;
  // order was incomplete
  ORDER_STATUS_INCOMPLETE = 2;
  // cancelled
  ORDER_STATUS_CANCELED = 3;
  // failed
  ORDER_STATUS_FAILED = 4;
}

// Ingredient portion (aka category) weights
message IngredientPortionWeights {
  // small portion
  double small = 1;
  // medium portion
  double medium = 2;
  // large portion
  double large = 3;
  // extra large portion
  google.protobuf.DoubleValue extra = 4;
}

// wrapper for list of machine ids because repeated keyword isn't allowed in oneof
message MachineIds {
  // list of machine ids
  repeated string machine_id = 1;
}

// wrapper for list of store ids because repeated keyword isn't allowed in oneof
message StoreIds {
  // list of store ids
  repeated string store_ids = 1;
}

// machine ids and menu wrapper
message MachineIdsAndMenu {
  // machine ids to update/get
  MachineIds machine_ids = 1;
  // menu to update/get
  string menu_id = 2;
}

// machine id and menu wrapper
message MachineMenu {
  // machine id
  string machine_id = 1;
  // menu to update/get
  string menu_id = 2;
}

// Nutrition fact for ingredient & recipe
message NutritionFacts {
  // calories
  google.protobuf.DoubleValue calories = 1;
  // fat
  google.protobuf.DoubleValue fat = 2;
  // carbs
  google.protobuf.DoubleValue carbohydrates = 3;
  // protein
  google.protobuf.DoubleValue protein = 4;
}

// Locale
enum Locale {
  // don't use
  LOCALE_UNSPECIFIED = 0;
  // English
  LOCALE_EN = 1;
  // French
  LOCALE_FR = 2;
  // German
  LOCALE_DE = 3;
  // Belgian (Deprecated - use LOCALE_NL_BE instead)
  LOCALE_BE_NL = 4 [deprecated = true];
  // Polish
  LOCALE_PL = 5;
  // Spanish
  LOCALE_ES = 6;
  // Italian
  LOCALE_IT = 7;
  // Danish
  LOCALE_DA = 8;
  // Swedish
  LOCALE_SV = 9;
  // Norwegian Bokm√•l
  LOCALE_NB = 10;
  // Belgium
  LOCALE_NL_BE = 11;
}

// Dispense criteria
enum DispenseCriteriaAlgorithm {
  // don't use
  DISPENSE_CRITERIA_ALGORITHM_UNSPECIFIED = 0;
  // expiry
  DISPENSE_CRITERIA_ALGORITHM_EXPIRY = 1;
  // priority
  DISPENSE_CRITERIA_ALGORITHM_PRIORITY = 2;
  // travel
  DISPENSE_CRITERIA_ALGORITHM_TRAVEL = 3;
  // topping
  DISPENSE_CRITERIA_ALGORITHM_TOPPING = 4;
}

// order recipe
enum OrderRecipe {
  // don't use
  ORDER_RECIPE_UNSPECIFIED = 0;
  // Customized
  ORDER_RECIPE_CUSTOMIZED = 1;
  // Original recipe
  ORDER_RECIPE_ORIGINAL_RECIPE = 2;
  // Modified recipe
  ORDER_RECIPE_MODIFIED_RECIPE = 3;
  // Original recipe but missing an ingredient
  ORDER_RECIPE_ORIGINAL_RECIPE_ING_MISSING = 4;
}

// Currency
enum PricingCurrency {
  // don't use
  PRICING_CURRENCY_UNSPECIFIED = 0;
  // US Dollar
  PRICING_CURRENCY_USD = 1;
  // Euro
  PRICING_CURRENCY_EUR = 2;
  // Canadian Dollar
  PRICING_CURRENCY_CAD = 3;
  // British Pound
  PRICING_CURRENCY_GBP = 4;
  // Poland zloty
  PRICING_CURRENCY_PLN = 5;
  // Swedish Krona
  PRICING_CURRENCY_SEK = 6;
  // Danish Krone
  PRICING_CURRENCY_DKK = 7;
  // Norwegian Krone
  PRICING_CURRENCY_NOK = 8;
  // Swiss franc
  PRICING_CURRENCY_CHF = 9;
  // United Arab Emirates Dirham
  PRICING_CURRENCY_AED = 10;
  // Saudi Riyal
  PRICING_CURRENCY_SAR = 11;
}

// Pricing scheme
enum PricingScheme {
  // don't use
  PRICING_SCHEME_UNSPECIFIED = 0;
  // free
  PRICING_SCHEME_FREE = 1;
  // fixed
  PRICING_SCHEME_FIXED = 2 [deprecated = true];
  // ingredient fixed
  PRICING_SCHEME_INGREDIENT_FIXED = 3 [deprecated = true];
  // paid
  PRICING_SCHEME_PAID = 4;
}

// Pricing total tax
enum PricingTotalTax {
  // don't use
  PRICING_TOTAL_TAX_UNSPECIFIED = 0;
  // after tax
  PRICING_TOTAL_TAX_AFTER_TAX = 1;
  // before tax
  PRICING_TOTAL_TAX_BEFORE_TAX = 2;
}

// Temperature unit for Machine
enum TemperatureUnit {
  // unspecified temperature unit
  TEMPERATURE_UNIT_UNSPECIFIED = 0;
  // celsius
  TEMPERATURE_UNIT_CELSIUS = 1;
  // fahrenheit
  TEMPERATURE_UNIT_FAHRENHEIT = 2;
}

// Container for saving translated fields
message TranslatedFields {
  // translated name
  google.protobuf.StringValue name = 1;
  // translated description
  google.protobuf.StringValue description = 2;
  // locale
  Locale locale = 3;
}

// Dispense status
enum IngredientDispenseStatus {
  // don't use
  INGREDIENT_DISPENSE_STATUS_UNSPECIFIED = 0;
  // dispensing finished successfully
  INGREDIENT_DISPENSE_STATUS_FINISHED = 1;
  // ing had run out and user chose to skip it
  INGREDIENT_DISPENSE_STATUS_SKIPPED = 2;
  // tampering was detected, dispensing stopped
  INGREDIENT_DISPENSE_STATUS_TAMPERED = 3;
  // skipped dispensing due to tampering
  INGREDIENT_DISPENSE_STATUS_SKIPPED_DUE_TO_TAMPERING = 4;
  // ing ran out and user chose to replace it, the replacement may or may not have been dispensed yet, check for the dispenseStatus of the replacement
  INGREDIENT_DISPENSE_STATUS_REPLACED = 5;
  // ingredient ran out, dispensing stopped
  INGREDIENT_DISPENSE_STATUS_INCOMPLETE = 6;
  // ingredient dispense in progress
  INGREDIENT_DISPENSE_STATUS_ONGOING = 7;
  // ingredient dispense pending
  INGREDIENT_DISPENSE_STATUS_PENDING = 8;
}

// financial card reader used
enum FinancialCardReader {
  // don't use
  FINANCIAL_CARD_READER_UNSPECIFIED = 0;
  // OTI
  FINANCIAL_CARD_READER_OTI = 1;
  // verifone
  FINANCIAL_CARD_READER_VERIFONE = 2;
  // novo
  FINANCIAL_CARD_READER_NOVO = 3;
  // usatech
  FINANCIAL_CARD_READER_USATECH = 4;
  // mdb
  FINANCIAL_CARD_READER_MDB = 5;
  // acceo
  FINANCIAL_CARD_READER_ACCEO = 6;
  // saudi geidea
  FINANCIAL_CARD_READER_SAUDI_GEIDEA =7;
  // None
  FINANCIAL_CARD_READER_NONE = 20;
}

// meal plan used
enum MealPlan {
  // don't use
  MEAL_PLAN_UNSPECIFIED = 0;
  // MMHAYES
  MEAL_PLAN_MMHAYES = 1;
  // ONETOUCH
  MEAL_PLAN_ONETOUCH = 2;
  // APRIVABARCODESCANNER
  MEAL_PLAN_APRIVABARCODESCANNER = 3;
  // MDB
  MEAL_PLAN_MDB = 4;
  // ITC
  MEAL_PLAN_ITC = 5;
  // CBORD
  MEAL_PLAN_CBORD = 6;
  // VOLANTE
  MEAL_PLAN_VOLANTE = 7;
  // GEMPAY
  MEAL_PLAN_GEMPAY = 8;
  //CBORD ODYSSEY
  MEAL_PLAN_CBORD_ODYSSEY = 9;
  // None
  MEAL_PLAN_NONE = 20;
}

// payment printer used
enum PaymentPrinter {
  //don't use
  PAYMENT_PRINTER_UNSPECIFIED = 0;
  // Implies pay at checkout
  PAYMENT_PRINTER_RECEIPT = 1;
  // Also implies pay at checkout
  PAYMENT_PRINTER_MINIMAL_LABEL = 2;
  // Implies pay at robot
  PAYMENT_PRINTER_NONE = 3;
}

// device used for order cart creation
// For orders from DD app, this wold be null
enum OrderCartDeviceType {
  // don't use
  ORDER_CART_DEVICE_TYPE_UNSPECIFIED = 0;
  // robot tablet
  ORDER_CART_DEVICE_TYPE_TABLET = 1;
  // patron app
  ORDER_CART_DEVICE_TYPE_MOBILE = 2;
}

// paid by type
enum PaidByType {
  // unspecified
  PAID_BY_TYPE_UNSPECIFIED = 0;
  // meal plan
  PAID_BY_TYPE_MEAL_PLAN = 1;
  // payment printer
  PAID_BY_TYPE_PAYMENT_PRINTER = 2;
  // financial card reader
  PAID_BY_TYPE_FINANCIAL_CARD_READER = 3;
  // none
  PAID_BY_TYPE_NONE = 4;
}

//  Machine error message
enum MachineError {
  // do not use
  MACHINE_ERROR_UNSPECIFIED = 0;
  // Main door left open for 30 minutes
  MACHINE_ERROR_MAIN_DOOR_LEFT_OPEN = 1;
  // Temperature sensor out of range
  MACHINE_ERROR_TEMPERATURE_SENSOR_OUT_OF_RANGE = 2;
  // Deprecated. Temperature above 5¬∞C for over 30 minutes
  MACHINE_ERROR_TEMPERATURE_ABOVE_5C = 3 [deprecated=true]; 
  // More than 2 defrost in a row
  MACHINE_ERROR_MORE_THAN_TWO_CONSECUTIVE_DEFROST = 4;
  // Carousel homing sensor not found
  MACHINE_ERROR_CAROUSEL_HOMING_SENSOR_NOT_FOUND = 5;
  // Homing offset not set
  MACHINE_ERROR_HOMING_OFFSET_NOT_SET = 6;
  // Drive unit over torque either direction
  MACHINE_ERROR_OVER_TORQUE = 7;
  // Motor not wired
  MACHINE_ERROR_MOTOR_NOT_WIRED = 8;
  // Dispense switch not latched
  MACHINE_ERROR_DISPENSE_SWITCH_NOT_LATCHED = 9;
  // Failed to home inner dispenser motor
  MACHINE_ERROR_FAILED_TO_HOME_INNER_DISPENSER_MOTOR = 10;
  // Failed to home outer dispenser motor
  MACHINE_ERROR_FAILED_TO_HOME_OUTER_DISPENSER_MOTOR = 11;
  // Inner dispenser motor not wired
  MACHINE_ERROR_INNER_DISPENSER_MOTOR_NOT_WIRED = 12;
  // Outer dispenser motor not wired
  MACHINE_ERROR_OUTER_DISPENSER_MOTOR_NOT_WIRED = 13;
  // Bowl motor over torque while extending
  MACHINE_ERROR_BOWL_MOTOR_OVER_TORQUE_WHILE_EXTENDING = 14;
  // Bowl motor over torque while retracting
  MACHINE_ERROR_BOWL_MOTOR_OVER_TORQUE_WHILE_RETRACTING = 15;
  // Bowl left in robot
  MACHINE_ERROR_BOWL_LEFT_IN_ROBOT = 16;
  // Bowl door did not close
  MACHINE_ERROR_BOWL_DOOR_DID_NOT_CLOSE = 17;
  // Load Cell issue
  MACHINE_ERROR_HIGH_LOAD_CELL_NOISE_AND_VARIANCE = 18;
  // Bowl door left open for 5 minutes
  MACHINE_ERROR_BOWL_DOOR_LEFT_0PEN = 19;
  // Bowl door opened while locked
  MACHINE_ERROR_BOWL_DOOR_OPENED_WHILE_LOCKED = 20;
  // Inner dispenser motor max torque reached
  MACHINE_ERROR_INNER_DISPENSER_MOTOR_MAX_TORQUE_REACHED = 21;
  // Outer dispenser motor max torque reached
  MACHINE_ERROR_OUTER_DISPENSER_MOTOR_MAX_TORQUE_REACHED = 22;
  // Failed to dispense
  MACHINE_ERROR_FAILED_TO_DISPENSE = 23;
  // Bowl ran out
  MACHINE_ERROR_BOWL_RAN_OUT = 24;
  // Low bowl
  MACHINE_ERROR_LOW_BOWL = 25;
  // Bowl storage left open for over 5 minutes
  MACHINE_ERROR_BOWL_STORAGE_LEFT_OPEN = 26;
  // Bowl storage opened while locked
  MACHINE_ERROR_BOWL_STORAGE_OPENED_WHILE_LOCKED = 27;
  //  POS panel opened while locked
  MACHINE_ERROR_POS_PANEL_OPENED_WHILE_LOCKED = 28;
  // Aux board not responding
  MACHINE_ERROR_AUX_BOARD_NOT_RESPONDING = 29;
  // Deprecated. Load cell not responding
  MACHINE_ERROR_LOAD_CELL_NOT_RESPONDING = 30 [deprecated=true];
  // Humidity sensor not responding
  MACHINE_ERROR_HUMIDITY_SENSOR_NOT_RESPONDING = 31;
  // Temperature above 5¬∞C for over 30 minutes during service interval
  MACHINE_ERROR_TEMPERATURE_ABOVE_5C_DURING_SERVICE_INTERVAL = 32;
  // Temperature above 5¬∞C for over 30 minutes outside of service interval
  MACHINE_ERROR_TEMPERATURE_ABOVE_5C_OUTSIDE_OF_SERVICE_INTERVAL = 33;
  // Temperature above 7¬∞C for over 30 seconds after reset
  MACHINE_ERROR_TEMPERATURE_ABOVE_7C_AFTER_RESET = 34;
  // Carousel Needs to be homed
  MACHINE_ERROR_CAROUSEL_NEEDS_TO_BE_HOMED = 35;
  // Invalid canister selected
  MACHINE_ERROR_INVALID_CANISTER_SELECTED = 36;
  // Drive unit over torque while stationary
  MACHINE_ERROR_OVER_TORQUE_WHILE_STATIONARY = 37;
  // Dispensers not homed
  MACHINE_ERROR_DISPENSERS_NOT_HOMED = 38;
  // Bowl motor over Torque while stationary
  MACHINE_ERROR_BOWL_MOTOR_OVER_TORQUE_WHILE_STATIONARY = 39;
  // Bowl motor not homed
  MACHINE_ERROR_BOWL_MOTOR_NOT_HOMED = 40;
  // Load cell SPI bus isn‚Äôt working properly
  MACHINE_ERROR_LOAD_CELL_SPI_COMMUNICATION_ISSUE = 41;
  // Load cell power dropped while reading
  MACHINE_ERROR_LOAD_CELL_POWER_DROPPED = 42;
  // Load cell out of range (3 consecutive bad reads)
  MACHINE_ERROR_LOAD_CELL_OUT_OF_RANGE = 43;
  // Attempted a motion when the main door was open
  MACHINE_ERROR_ATTEMPTED_MOTION_WHEN_MAIN_DOOR_WAS_OPEN = 44;
}

// CSV for download
message CSVForDownload {
  // csv response
  oneof csv_response {
    // csv string
    google.protobuf.StringValue csv_string = 1;
    // file path
    google.protobuf.StringValue file_path = 2;
  }
  // If the CSV data is incomplete or not.
  // Data would be incomplete if the number of csv rows is greater than a max limit. Max limit is 40,000 rows for promotions and 55000 rows for orders
  google.protobuf.BoolValue is_data_incomplete = 3;
}

// filter by attribute
enum FilterByAttribute {
  // unspecified
  FILTER_BY_ATTRIBUTE_UNSPECIFIED = 0;
  // filter by UTC time
  FILTER_BY_ATTRIBUTE_UTC = 1;
  // filter by machine local time
  FILTER_BY_ATTRIBUTE_MACHINE_LOCAL_TIME = 2;
}

// Machine Mode
enum MachineMode {
  // Unspecified (Don't set this val)
  MACHINE_MODE_UNSPECIFIED = 0;
  // Patron mode
  MACHINE_MODE_PATRON = 1;
  // Operator mode
  MACHINE_MODE_OPERATOR = 2;
}

// ImageFileExtension
enum ImageFileExtension {
  // unspecified
  IMAGE_FILE_EXTENSION_UNSPECIFIED = 0;
  // jpg
  IMAGE_FILE_EXTENSION_JPG = 1;
  // jpeg
  IMAGE_FILE_EXTENSION_JPEG = 2;
  // png
  IMAGE_FILE_EXTENSION_PNG = 3;
}

// ImageCategory
enum ImageCategory {
  // unspecified
  IMAGE_CATEGORY_UNSPECIFIED = 0;
  // ingredient
  IMAGE_CATEGORY_INGREDIENT = 1;
  // recipe
  IMAGE_CATEGORY_RECIPE = 2;
  // menu
  IMAGE_CATEGORY_MENU = 3;
}
