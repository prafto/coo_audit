syntax = "proto3";
package chow_service_internal.v1;
option java_package = "com.doordash.rpc.chow_service_internal";
option java_outer_classname = "AppSessionService";
option java_multiple_files = true;

import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

// App session event sent by the robot
message AppSessionMessage {
  // client timestamp when this event was recorded
  google.protobuf.Timestamp recorded_at = 1;
  // which page is this?
  Page page = 2;
  // user activity/action
  oneof activity {
    // what action did the user take?
    UserAction user_action = 3;
    // user event
    UserEvent user_event = 4;
  }
  // free text notes
  string description = 5;
  // session id
  string session_id = 6;
  // session type
  SessionType session_type = 7;
}

// Page enums
enum Page {
  // unspecified (don't use)
  PAGE_UNSPECIFIED = 0;
  // chef landing page
  PAGE_CHEF_LANDING = 1;
  // batch restock page
  PAGE_BATCH_RESTOCK = 2;
  // restock page
  PAGE_RESTOCK = 3;
  // main page that everyone lands on
  PAGE_LANDING_PAGE = 4;
  // footer page
  PAGE_FOOTER_PAGE = 5;
  // select bowl type
  PAGE_SELECT_BOWL_TYPE = 6;
  // customize bowl
  PAGE_CUSTOMIZE_BOWL = 7;
  // review bowl
  PAGE_REVIEW_BOWL = 8;
  // order payment
  PAGE_ORDER_PAYMENT = 9;
  // insert bowl (Sally)
  PAGE_INSERT_BOWL = 10;
  // dispense bowl
  PAGE_DISPENSE_BOWL = 11;
  // order complete
  PAGE_ORDER_COMPLETE = 12;
  // plan menu
  PAGE_PLAN_MENU = 13;
  // manufacturing test
  PAGE_MANUFACTURING_TEST = 14;
  // configure canister
  PAGE_CONFIGURE_CANISTERS = 15;
  // technician
  PAGE_TECHNICIAN_LANDING = 16;
  // menu overview
  PAGE_MENU_OVERVIEW = 17;
  // ingredient qualification (ingQual)
  PAGE_INGREDIENT_QUALIFICATION = 18;
  // auto recovery page
  PAGE_AUTO_RECOVERY = 19;
  // Bowl is left detected to be left inside the robot (D2G)
  PAGE_BOWL_ABANDONED = 20;
  // accept bowl page (insert bowl alternative for D2G)
  PAGE_BOWL_ACCEPT = 21;
  // Present bowl page after dispense is complete (D2G)
  PAGE_BOWL_PRESENT = 22;
  // Cancel order and return bowl page (D2G)
  PAGE_BOWL_CANCEL = 23;
  // Recipe details page
  PAGE_RECIPE_DETAILS = 24;
  // Gcode qualification page
  PAGE_GCODE_QUALIFICATION = 25;
}

// User action
enum UserAction {
  // unspecified (don't use)
  USER_ACTION_UNSPECIFIED = 0;
  // keystroke
  USER_ACTION_KEYSTROKE = 1;
  // button pressed
  USER_ACTION_BUTTON_PRESSED = 2;
  // area pressed
  USER_ACTION_AREA_PRESSED = 3;
  // item pressed
  USER_ACTION_ITEM_PRESSED = 4;
  // unpressable pressed
  USER_ACTION_UNPRESSABLE_PRESSED = 5;
  // menu item pressed
  USER_ACTION_MENU_ITEM_PRESSED = 6;
  // menu button pressed
  USER_ACTION_MENU_BUTTON_PRESSED = 7;
  // swipe right
  USER_ACTION_SWIPE_RIGHT = 8;
  // swipe left
  USER_ACTION_SWIPE_LEFT = 9;
  // swipe up
  USER_ACTION_SWIPE_UP = 10;
  // swipe down
  USER_ACTION_SWIPE_DOWN = 11;
  // scroll
  USER_ACTION_SCROLL = 12;
}

// User events
enum UserEvent {
  // unspecified (don't use)
  USER_EVENT_UNSPECIFIED = 0;
  // session started
  USER_EVENT_SESSION_STARTED = 1;
  // session ended
  USER_EVENT_SESSION_ENDED = 2;
  // corousel action initiated (restocking)
  USER_EVENT_CAROUSEL_ACTION_INITIATED = 3;
  // ingredient ran out
  USER_EVENT_INGREDIENT_RAN_OUT = 4;
  // screen timeout
  USER_EVENT_SCREEN_TIMEOUT = 5;
  // payment timeout
  USER_EVENT_PAYMENT_TIMEOUT = 6;
  // payment issue
  USER_EVENT_PAYMENT_ISSUE = 7;
  // payment error
  USER_EVENT_PAYMENT_ERROR = 8;
  // payment approved
  USER_EVENT_PAYMENT_APPROVED = 9;
  // machine error (something that results in dispense not completing)
  USER_EVENT_MACHINE_ERROR = 10;
  // batch restock complete
  USER_EVENT_BATCH_RESTOCK_COMPLETE = 11;
  // homing complete
  USER_EVENT_HOMING_COMPLETE = 12;
  // missing base, dressing or topping
  USER_EVENT_MISSING_PORTION_TYPE = 13;
  // dispense in progress
  USER_EVENT_DISPENSE_IN_PROGRESS = 14;
  // dispense error
  USER_EVENT_DISPENSE_ERROR = 15;
  // tampering warning (they touched the bowl and they got the warning)
  USER_EVENT_BOWL_TAMPERING_WARNING = 16;
  // no activity
  USER_EVENT_INACTIVITY = 17;
  // bowl not detected
  USER_EVENT_BOWL_NOT_DETECTED = 18;
  // navigated to new page
  USER_EVENT_NAVIGATED_TO_NEW_PAGE = 19;
  // promotion code accepted
  USER_EVENT_PROMOTION_CODE_ACCEPTED = 20;
  // promotion code error
  USER_EVENT_PROMOTION_CODE_ERROR = 21;
  // bowl storage closed
  USER_EVENT_BOWL_STORAGE_CLOSED = 22;
  // bowl arm collision
  USER_EVENT_BOWL_ARM_COLLISION = 23;
  // bowl presentation door not closed
  USER_EVENT_BOWL_PRESENTATION_DOOR_NOT_CLOSED = 24;
  // bowl presentation door was closed after it was left open
  USER_EVENT_BOWL_PRESENTATION_DOOR_CLOSED = 25;
  // unrecoverable error on d2g bowl occured
  USER_EVENT_MALFUNCTION_ERROR_BOWL = 26;
  // d2g bowl was canceled
  USER_EVENT_CANCELLED_BOWL = 27;
  // secondary bowl check passed
  USER_EVENT_BOWL_VERIFICATION_PASSED = 28;
  // was not successful in the secondary bowl check
  USER_EVENT_BOWL_VERIFICATION_FAILED = 29;
  // detected excessive force
  USER_EVENT_EXCESSIVE_FORCE_DETECTED = 30;
  // Moving bowl arm out
  USER_EVENT_BOWL_ARM_OUT = 31;
  // Moving bowl arm in
  USER_EVENT_BOWL_ARM_IN = 32;
  // Abandoned bowl was successfully removed
  USER_EVENT_ABANDONED_BOWL_SUCCESS = 33;
  // Abandoned bowl was not successfully removed
  USER_EVENT_ABANDONED_BOWL_FAILURE = 34;
  // Auto recovery succeeded
  USER_EVENT_AUTO_RECOVERY_SUCCESS = 35;
  // Auto recovery failed to recover
  USER_EVENT_AUTO_RECOVERY_FAILURE = 36;
  // Auto recovery started
  USER_EVENT_AUTO_RECOVERY_STARTED = 37;
  // Auto recovery detected that door was open
  USER_EVENT_AUTO_RECOVERY_CLOSE_DOOR_DETECTED = 38;
  // Door was opened during restock while carousel was rotating
  USER_EVENT_RESTOCK_DOOR_OPEN_DETECTED = 39;
  // Door was closed during restock after detecting it was open
  USER_EVENT_RESTOCK_DOOR_CLOSED = 40;
  // Marked for review in ingredient/gcode qualification app
  USER_EVENT_DISPENSE_SESSION_MARKED_FOR_REVIEW = 41;

  // generic modal appeared
  USER_EVENT_SHOWING_MODAL = 100;
  // Showing robot is disabled modal
  USER_EVENT_SHOWING_ROBOT_DISABLED_MODAL = 101;
  // Showing bowl abandoned modal (d2g)
  USER_EVENT_SHOWING_ABANDONED_BOWL_MODAL = 102;
  // Showing base ingredient missing modal
  USER_EVENT_SHOWING_BASE_MISSING_MODAL = 103;
  // Showing dressing ingredient missing modal
  USER_EVENT_SHOWING_DRESSING_MISSING_MODAL = 104;
  // Showing base and dressing ingredient missing modal
  USER_EVENT_SHOWING_BASE_AND_DRESSING_MISSING_MODAL = 105;
  // Showing tampering modal during dispense
  USER_EVENT_SHOWING_DISPENSE_TAMPERING_MODAL = 106;
  // Showing malfunction modal during dispense
  USER_EVENT_SHOWING_DISPENSE_MALFUNCTION_MODAL = 107;
  // Showing canceled order during dispense
  USER_EVENT_SHOWING_DISPENSE_CANCEL_MODAL = 108;
  // Showing ingredient ran out modal during dispense
  USER_EVENT_SHOWING_DISPENSE_INGREDIENT_RAN_OUT_MODAL = 109;
  // Showing replace ingredient modal during dispense
  USER_EVENT_SHOWING_DISPENSE_REPLACE_INGREDIENT_MODAL = 110;
  // Showing allergen modal
  USER_EVENT_SHOWING_ALLERGEN_MODAL = 111;
  // Carousel still spinning on insert bowl page 
  USER_EVENT_CAROUSEL_SPIN_IN_PROGRESS = 112;

  // Dispense error - requests with a wrong order id for a substitution order
  USER_EVENT_DISPENSE_ERROR_INVALID_ORDER_ID = 180;
  // Dispense error - requests with an ingredient that does not exist in the sallyware database
  USER_EVENT_DISPENSE_ERROR_INVALID_INGREDIENT_ID = 181;
  // Dispense error - requests with an ingredient that is not valid
  USER_EVENT_DISPENSE_ERROR_INVALID_INGREDIENT = 182;
  // Dispense error - no eligible (non-empty and non-expired) canisters were found for one or more ingredient(s)
  USER_EVENT_DISPENSE_ERROR_NO_CANISTER = 183;
  // Dispense error - error related to micro controller connection
  USER_EVENT_DISPENSE_ERROR_UCONTROLLER = 184;
  // Dispense error - no gcode info is present to dispense for one or more ingredient(s)
  USER_EVENT_DISPENSE_ERROR_GCODE_NOT_FOUND = 185;
  // Dispense error - dispense took more time than the prescribed limit
  USER_EVENT_DISPENSE_ERROR_TIME_LIMIT_EXCEEDED = 186;
  // Dispense error - canister ran out of ingredient during dispense
  USER_EVENT_DISPENSE_ERROR_INGREDIENT_RAN_OUT = 187;
  // Dispense error - there was a collision detected
  USER_EVENT_DISPENSE_ERROR_COLLISION = 188;
  // Dispense error - machine temperature above prescribed limit during dispense
  USER_EVENT_DISPENSE_ERROR_TEMPERATURE_FAULT = 189;
  // Dispense error - highly unlikely but someone disabled the machine during dispense
  USER_EVENT_DISPENSE_ERROR_MANUALLY_DISABLED = 190;
  // Dispense error - tampering was detected and user was notified
  USER_EVENT_DISPENSE_ERROR_TAMPERING_WARNING = 191;
  // Dispense error - bowl arm is stuck
  USER_EVENT_DISPENSE_ERROR_BOWL_ARM_FAULT = 192;
  // Dispense error - main door is open
  USER_EVENT_DISPENSE_ERROR_MAIN_DOOR_OPEN_FAULT = 193;
  // Dispense error - when an exception occurs due to a bug in the code
  USER_EVENT_DISPENSE_ERROR_UNKNOWN = 194;
  // Dispense error - all non empty canisters found are expired for the ingredient
  USER_EVENT_DISPENSE_ERROR_CANISTER_EXPIRED = 195;
  // Dispense error - all canisters found are empty for the ingredient
  USER_EVENT_DISPENSE_ERROR_CANISTER_EMPTY = 196;

  // A/B testing experiment that was used during this session
  // Experiement A (details would be described in descriptions of the session event)
  USER_EVENT_EXPERIMENT_A = 201;
  // Experiement B (details would be described in descriptions of the session event)
  USER_EVENT_EXPERIMENT_B = 202;
}

// whose session is it?
enum SessionType {
  // unspecified (don't use)
  SESSION_TYPE_UNSPECIFIED = 0;
  // patron on tablet
  SESSION_TYPE_PATRON = 1;
  // patron on mobile
  SESSION_TYPE_PATRON_MOBILE = 2;
  // operator
  SESSION_TYPE_OPERATOR = 3;
  // technician
  SESSION_TYPE_TECHNICIAN = 4;
}

// Request for sending the messages
message RecordAppSessionRequest {
  // list of messages to be sent
  repeated AppSessionMessage messages = 1;
  // Client UTC timestamp when message was sent
  google.protobuf.Timestamp sent_at = 20;
  // order completed timestamp in the local timezone
  google.protobuf.Timestamp local_time_sent_at = 21;
}

// response to the send status message
message RecordAppSessionResponse {
  // Whether or not server successfully registered the message
  google.protobuf.BoolValue success = 1;
}
