syntax = "proto3";

// buf:lint:ignore DIRECTORY_SAME_PACKAGE
package routing_engine.web.v1;

import "common/service_client_config.proto";
import "google/api/annotations.proto";
import "google/protobuf/wrappers.proto";

option go_package = "github.com/doordash/services-protobuf/generated/routing_engine";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.routingenginegrpc";

// Mx Iso Data Service
service MxIsoDataService {
  option (service_client.client_config).retry_config.max_attempts = 3;

  // grpc code 8 (RESOURCE_EXHAUSTED) is among the codes that are not retriable by default.
  option (service_client.client_config).retry_config.do_retry_grpc_code = 8;

  // As an example, let's override this default of 10. Now, the circuit breaker will
  // only start detecting failures after at least 20 requests have been made.
  option (service_client.client_config).circuit_breaker_config.minimum_request_threshold = 20;

  // GenerateMerchantIsoData
  rpc GenerateMerchantIsoData(GenerateMerchantIsoDataRequest) returns (GenerateMerchantIsoDataResponse);

  // GenerateMerchantIsoData
  rpc GenerateNewMerchantIsoData(GenerateNewMerchantIsoDataRequest) returns (GenerateNewMerchantIsoDataResponse);
}

// CoverageData
message CoverageData {
  // store id
  string store_id = 1;
  // isochrone h3 list variant 1
  IsoWrapper isochrone = 2;
  // isodistance h3 list variant 1
  IsoWrapper isodistance = 3;
}

// wrapper for iso data
message IsoWrapper {
  // iso h3 list
  repeated IsoObject iso_data = 1;
}

// Isochrone object
message IsoObject {
  // h3 index string
  string h3_index = 1;
  // duration
  double duration = 2;
  // distance
  double distance = 3;
}

// Request to generate merchant iso data
message GenerateMerchantIsoDataRequest {
  // store request
  repeated StoreRequest stores = 1;
}

// StoreRequest
message StoreRequest {
  // store_id
  string store_id = 1;
  // radius
  double radius_km = 2;
  // isochroneCoefficient
  // IsochroneMaxInSeconds = math.Floor(math.Min(radiusInMiles*isochrone_coefficient*60, MaxIsochroneInSeconds))
  google.protobuf.DoubleValue isochrone_coefficient = 3;
  // isodistanceCoefficient
  // IsodistanceMaxInMeters = math.Floor(math.Min(radiusInMiles * isodistance_coefficient * MilesToMCoefficient, MaxIsodistanceInMeters))
  google.protobuf.DoubleValue isodistance_coefficient = 4;
}

// Response for mx iso data
message GenerateMerchantIsoDataResponse {
  // CoverageData
  repeated CoverageData data = 1;
  // h3_resolution
  int32 h3_resolution = 2;
}

// Request to generate new merchant iso data
message GenerateNewMerchantIsoDataRequest {
  // merchant request
  repeated MerchantRequest merchants = 1;
}

// MerchantRequest
message MerchantRequest {
  // merchant_id
  string merchant_id = 1;
  // merchant_latitude
  double merchant_latitude = 2;
  // merchant_longitude
  double merchant_longitude = 3;
  // max isochrone time in seconds
  int64 isochrone_max_in_seconds = 4;
  // max isodistance distance in meters
  int64 isodistance_max_in_meters = 5;
}

// Response for new merchant iso data
message GenerateNewMerchantIsoDataResponse {
  // CoverageData
  repeated CoverageData data = 1;
  // h3_resolution
  int32 h3_resolution = 2;
}
