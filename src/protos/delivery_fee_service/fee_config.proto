syntax = "proto3";
package delivery_fee_service;

import "common/common.proto";
import "common/money.proto";
import "common/order_config.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option go_package = "delivery_fee_service";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.delivery_fee";

message FeeConfig {
  google.protobuf.StringValue config_id = 1;
  money.FeeCategoryType fee_category_type = 2;
  google.protobuf.StringValue fee_name = 3;
  // to get localized name of the fee, displayed on receipt
  google.protobuf.StringValue label_key = 4;
  // builder name for complex label creation
  google.protobuf.StringValue label_builder = 5;
  // to get localized tooltip
  google.protobuf.StringValue tooltip_message_key = 6;
  // builder name for complex tooltip creation
  google.protobuf.StringValue tooltip_message_builder = 7;
  money.MonetaryFields fee_amount = 8;
  google.protobuf.Int32Value fee_percentage = 9 [deprecated = true];
  // tax calculation info
  google.protobuf.StringValue tax_line_item_type = 10;

  // store fanout by store level fee injection
  google.protobuf.BoolValue scope_by_store_level_fee_injection = 11;
  // store fanout by scope
  repeated FeeScope fee_scopes = 12;

  // fee experiment
  google.protobuf.StringValue experiment = 13;

  // calculator
  FeeCalculator fee_calculator = 14;

  // validation
  repeated FeeValidator fee_validators = 15;

  google.protobuf.StringValue currency = 16;

  // specify tags to exclude certain type of orders for the fee calculation.
  // for example
  // Drive order:
  //    fulfillment_types = []
  //    consumer_experiences = []
  //    platform_types = [PT_DRIVE_API, PT_DRIVE_DESKTOP]
  repeated OrderExclusionConfig order_exclusion_configs = 17;
  // Flag to indicate if the fee should be part of taxes and fees or should be a line item on itself
  google.protobuf.BoolValue should_bundle_with_tax_and_fees = 18;

  // fee percentage that supports decimal values
  google.protobuf.DoubleValue fee_percentage_decimal = 19;
}

message FeeScope {
  FeeScopeName scope_name = 1;
  repeated google.protobuf.StringValue scope_values = 2;
  repeated google.protobuf.StringValue scope_exclude_values = 3;
}

enum FeeScopeName {
  UNSPECIFIED_SCOPE = 0;
  SUBMARKET_ID = 1;
  BUSINESS_ID = 2;
  STORE_ID = 3;
  ZIP_CODE = 4;
}

message FeeCalculator {
  FeeCalculatorId id = 1;
  map<string, string> parameters = 2;
}

enum FeeCalculatorId {
  UNSPECIFIED_CALCULATOR = 0;
  FLAT_FEE_CALCULATOR = 1;
  PCT_FEE_CALCULATOR = 2;
  CUP_FEE_CALCULATOR = 3;
  BOTTLE_DEPOSIT_FEE_CALCULATOR = 4;
  DBP_EXPAND_RANGE_FEE_CALCULATOR = 5;
  NV_BAG_FEE_CALCULATOR = 6;
  DASHER_EQUITY_FEE_CALCULATOR = 7;
  MEMBERSHIP_FEE_CALCULATOR = 8;
  PERCENTAGE_SUBTOTAL_CALCULATOR = 9;
  VERTICAL_WISE_FLAT_FEE_CALCULATOR = 10;
}

message FeeValidator {
  FeeValidatorId id = 1;
  map<string, string> parameters = 2;
}

enum FeeValidatorId {
  UNSPECIFIED_VALIDATOR = 0;
  FEE_AMOUNT_RANGE_VALIDATOR = 1;
}

message OrderExclusionConfig {
  repeated common.order_config.v1.OrderConfig.FulfillmentType fulfillment_types = 1 [deprecated = true];
  repeated common.order_config.v1.OrderConfig.ConsumerExperience consumer_experiences = 2 [deprecated = true];
  repeated common.PlatformType platform_types = 3;
  repeated common.FulfillmentType fulfillments = 4;
  repeated common.Experience experiences = 5;
  google.protobuf.BoolValue store_fulfill_own_delivery = 6;
  google.protobuf.BoolValue is_new_vertical = 7;
}
