syntax = "proto3";
package doordash.retail.iguazu.v1;

import "common/common.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option java_multiple_files = true;
option java_package = "com.doordash.retail.iguazu.v1";

// This file is meant to be a centralized place for all retail Iguazu events. Please see
// https://doordash.atlassian.net/wiki/spaces/Eng/pages/2772730665/Retail-fulfillment-service+Development+Guide#Iguazu-tracking-schema-design
// for code conduct before contributing to it. Also, all the tracking data in this file should have a prefix of `CnGTracking`.

// Weighted-item (WI) barcode scanning data. Created for WI Scanning project.
// RFC: https://docs.google.com/document/d/1PQ_bTOUroLQFfEftWk2oiVYXkRuk_uahd-r2GOOaKQw/edit?pli=1#
message CnGTrackingWeightedItemScanningData {
  // Merchant supplied id (aka external id) of the scanned weighted-item
  string merchant_supplied_id = 1;
  // Dd menu item id of the scanned weighted-item
  string dd_menu_item_id = 2;
  // GtinFormat
  string barcode_format = 3;
  // Attempted barcode
  string raw_code = 4;
  // Delivery uuid
  string delivery_uuid = 5;
  // Price subtotal of the scanned weighted-item which is extracted from barcode
  // see https://docs.google.com/document/d/1ifceE621rqIByNToIp3R8QiQ-evgo7P-G4MxDk8f39Y/edit
  string embedded_price = 6;
  // Inferred weight = embedded_price / pre_inflated_measurement_price
  string inferred_weight = 7;
  // Store id
  string store_id = 8;
  // Scanning use cases, including manual substitution workflow,
  // core item scanning workflow, Cx pre-approved substitution workflow, and unspecified.
  // Please see doordash.retail.dasher.v3.GetItemByBarcodeRequest.UseCase for SoT
  string use_case = 9;
  // Pre-inflated measurement price of the scanned wi item
  string pre_inflated_measurement_price = 10;
  // Post-inflated measurement price of the scanned wi item
  string post_inflated_measurement_price = 11;
  // For original item and manual subs scanning, check whether the scanned item is
  // the same as the original item or not; for pre-approved subs scanning,
  // check whether the scanned item is the same as pre-approved subs item
  bool is_same_item = 12;
}

// Send CnG order item lifecycle events
// (deprecated for CngRetailLifecycleEvent)
message CnGTrackingOrderItemLifecycleData {
  // event type - picked, refunded, substituted, reset
  string event_type = 1;
  // event status - init, fail, success
  string event_status = 2;
  // Delivery uuid
  string delivery_uuid = 3;
  // Delivery id
  string delivery_id = 4;
  // order_items table - orderItemuuid
  string order_item_uuid = 5;
  // order_items table - substitute orderItemuuid
  string sub_order_item_uuid = 7;
  // mutable fields sent as part of addCustomAttributes:
  // pick_result
  // scanned_barcode
}

// For entire delivery, list of all item found statuses at finish pick
// https://docs.google.com/document/d/1-w50CMxpU6x0yWajfk7c-782vL0sUpT-I73VmIb_sw0/edit?usp=sharing
message CnGFinishPickItemsFoundStatus {
  // Individual item found status
  message CnGFinishPickItemFoundStatus {
    // store id for the item
    string store_id = 1;
    // merchant supplied id for the item
    string merchant_supplied_id = 2;
    // Item found status
    string item_found_status = 3;
    // business id
    string business_id = 4;
  }
  // delivery uuid used as idempotency key
  string delivery_uuid = 1;
  // Event generated timestamp
  google.protobuf.Timestamp finish_pick_at = 2;
  // Dasher ID
  string dasher_id = 3;
  // Individual order item found status
  repeated CnGFinishPickItemFoundStatus item_statuses = 4;
}

// Individual item found status at finish pick, used for infp sybyl calls
// Deprecated
message CnGFinishPickItemsFoundStatusOnlineFS {
  // store id for the item
  string store_id = 1;
  // merchant supplied id for the item
  string merchant_supplied_item_id = 2;
  // Item found status
  string item_found_status = 3;
  // business id
  string business_id = 4;
  // Event generated timestamp
  google.protobuf.Timestamp finish_pick_at = 5;
  // Dasher ID
  string dasher_id = 6;
}

// Individual item found status at finish pick, used for infp sybyl calls
message CnGFinishPickItemsFoundStatusOnlineFSV2 {
  // store id for the item
  string store_id = 1;
  // merchant supplied id for the item
  string merchant_supplied_item_id = 2;
  // Item found status
  int64 iaf_st_msid_p10d_dx_pick_status_tn = 3;
  // Event generated timestamp for if
  int64 iaf_st_msid_p10d_dx_pick_if_time_tn = 4;
  // Event generated timestamp for inf
  int64 iaf_st_msid_p10d_dx_pick_inf_time_tn = 5;
  // business id
  string business_id = 6;
}

// Send CnG lifecycle events
// https://docs.google.com/document/d/1CQib9Gooj4DD0ZfzaFKOObPdEmXVLIhc5AbieVCpwfQ
message CngTrackingRetailLifecycleEvent {
  // event group - related events should fall under the same event group
  string event_group = 1;
  // event name
  string event_name = 2;
  // event status - init, fail, success
  string event_status = 3;
  // cart uuid, because pre-checkout subs only has cart uuid
  string cart_uuid = 4;
  // delivery uuid
  string delivery_uuid = 5;
  // delivery id
  string delivery_id = 6;
  // dd store id
  string store_id = 7;
  // original item merchant supplied id
  string merchant_supplied_id = 8;
  // sub item merchant supplied id
  string sub_merchant_supplied_id = 9;
  // original item order_item_uuid - order_items table
  string order_item_uuid = 10;
  // sub item order_item_uuid - order_items table
  string sub_order_item_uuid = 11;
  // cart item uuid
  string cart_item_uuid = 12;
  // dd_session_id
  string dd_session_id = 13;
  // user id
  string user_id = 14;
  // dasher id
  string dasher_id = 15;
  // consumer id
  string consumer_id = 16;
  // cart id
  string cart_id = 17;
  // mutable fields sent as part of addCustomAttributes:
}

// Send Frontend CnG events - used by Cx app
// NOTE: IF YOU ARE ADDING FIELDS/COLUMNS WITH USER PERSONALLY IDENTIFIABLE INFORMATION, PLEASE FOLLOW THIS
// DOCUMENTATION IN ORDER TO ENSURE CCPA COMPLIANCE:
// https://doordash.atlassian.net/wiki/spaces/Eng/pages/3160834089/Making+Datalake+Table+CCPA+Compliant
message CngTrackingClientEvent {
  option (common.dataframe_transformations) = "pii_obfuscation";
  // event group - related events should fall under the same event group
  string event_group = 1;
  // event name
  string event_name = 2;
  // event status - init, fail, success
  string event_status = 3;
  // cart uuid, because pre-checkout subs only has cart uuid
  string cart_uuid = 4;
  // delivery uuid
  string delivery_uuid = 5;
  // dd store id
  string store_id = 6;
  // cng event name used to filter the event name/source. Cannot use event_name on Android because telemetry library already uses the same field
  string cng_event_name = 7;
  // event payload will be populated in other_attributes column in snowflake
}

// Send Frontend CnG events - used by Dx app
message CngTrackingClientEventDasher {
  // event group - related events should fall under the same event group
  string event_group = 1;
  // event name
  string event_name = 2;
  // event status - init, fail, success
  string event_status = 3;
  // cart uuid, because pre-checkout subs only has cart uuid
  string cart_uuid = 4;
  // delivery uuid
  string delivery_uuid = 5;
  // dd store id
  string store_id = 6;
  // cng event name used to filter the event name/source. Cannot use event_name on Android because telemetry library already uses the same field
  string cng_event_name = 7;
  // event payload will be populated in other_attributes column in snowflake
}

// Send Delivery Option Request Events
message CngTrackingDeliveryOptionGetEvent {
  // consumer id
  string consumer_id = 1;
  // optional cart ID
  string cart_id = 2;
  // store ID
  string store_id = 3;
  // domain type
  string domain = 4;
  // delivery options request identifier
  string delivery_options_request_identifier = 5;
  // business vertical id
  string business_vertical_id = 6;
}

// Send Delivery Option Monetary Data Request Events
message CngTrackingDeliveryOptionMonetaryDataGetEvent {
  // consumer id
  string consumer_id = 1;
  // optional cart ID
  string cart_id = 2;
  // store ID
  string store_id = 3;
  // business ID
  string business_id = 4;
  // timezone
  string timezone = 5;
  // monetary type
  string monetary_type = 6;
  // delivery option type
  string delivery_option_type = 7;
  // window start time
  string window_start_time = 8;
  // window end time
  string window_end_time = 9;
  // business vertical id
  string business_vertical_id = 10;
}

// Send Pre-Checkout Delivery Option Request Events
message TrackingPreCheckoutDeliveryOptionGetEvent {
  // consumer id
  string consumer_id = 1;
  // timezone
  string timezone = 2;
  // store ID
  string store_id = 3;
  // domain type
  string domain = 4;
  // business vertical id
  string business_vertical_id = 5;
  // Eta Info express_minutes
  string express_minutes = 6;
}

// send the token usage info for all items in a delivery
message CnGTokenRateLimitRecordsEvent {
  // individual token rate limit record
  message CnGTokenRateLimitRecord {
    // category
    string category = 1;
    // optional dd_sic
    string dd_sic = 2;
    // merchant supplied id
    string merchant_supplied_id = 3;
    // token count
    int32 token_count = 4;
    // token type
    string token_type = 5;
  }
  // delivery uuid
  string delivery_uuid = 1;
  // last used at timestamp
  google.protobuf.Timestamp last_used_at = 2;
  // dasher ID
  string dasher_id = 3;
  // store id
  string store_id = 4;
  // business id
  string business_id = 5;
  // list of token rate limit record
  repeated CnGTokenRateLimitRecord token_rate_limit_records = 6;
}
