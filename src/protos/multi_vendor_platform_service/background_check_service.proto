syntax = "proto3";

package multi_vendor_platform_service.v1;

import "common/common.proto";
import "common/service_client_config.proto";
import "google/protobuf/wrappers.proto";
import "multi_vendor_platform_service/common.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.multi_vendor_platform_service";

// background check service
service BackgroundCheckService {
  // Create a new motor vehicle screening
  rpc RunMotorVehicleScreen(RunMotorVehicleScreenRequest) returns (RunMotorVehicleScreenResponse);
  // Create a new criminal screening
  rpc RunCriminalScreen(RunCriminalScreenRequest) returns (RunCriminalScreenResponse);
  // Create a new full screening
  rpc RunMotorVehicleAndCriminalScreen(RunMotorVehicleAndCriminalScreenRequest) returns (RunMotorVehicleAndCriminalScreenResponse);
  // Create a new candidate on the BGC external vendor system
  rpc CreateCandidate(CreateCandidateRequest) returns (CreateCandidateResponse);
  // Enroll candidate to do CC monitor
  rpc EnrollCandidateForMonitoring(EnrollCandidateForMonitoringRequest) returns (EnrollCandidateForMonitoringResponse);
  // Un-enroll candidate to do CC monitor
  rpc UnEnrollCandidateForMonitoring(UnEnrollCandidateForMonitoringRequest) returns (UnEnrollCandidateForMonitoringResponse);
  // Get BGC reports
  rpc GetBgcReports(GetBgcReportsRequest) returns (GetBgcReportsResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 30000;
    option (service_client.client_method_config).retry_config.max_attempts = 1;
    option (service_client.client_method_config).circuit_breaker_config.failure_rate_threshold = 0.3;
    option (service_client.client_method_config).circuit_breaker_config.minimum_request_threshold = 50;
    option (service_client.client_method_config).circuit_breaker_config.counter_sliding_window_millis = 60000;
  }
  // Create BGC report
  rpc CreateBgcReport(CreateBgcReportRequest) returns (CreateBgcReportResponse);
}

// CreateBgcReportRequest
message CreateBgcReportRequest {
  // vendor type (optional)
  BgcVendorType vendor_type = 1;
  // Unique link (Required)
  string applicant_unique_link = 2;
  // whether the candidate has requested a copy of their background check (Optional)
  google.protobuf.BoolValue copy_requested = 3;
  // Idempotency key associated with BGC, if not exist, default to unique_link
  google.protobuf.StringValue idempotency_key = 4;
  // BGC package (Optional)
  google.protobuf.StringValue report_package = 5;
  // report id: if the report id is provided, the request will do the package upgrade for the existing report
  google.protobuf.StringValue report_id = 6;
  // Tags (Optional)
  repeated google.protobuf.StringValue tags = 7;
}

// CreateBgcReportResponse
message CreateBgcReportResponse {
  // vendor type (Required)
  BgcVendorType vendor_type = 1;
  // bgc info
  oneof info {
    // bgc report
    BgcReport bgc_report = 2;
    // error message
    google.protobuf.StringValue error_message = 3;
  }
}

// GetBgcReportsRequest
message GetBgcReportsRequest {
  // vendor type (Required)
  BgcVendorType vendor_type = 1;
  // Unique link (Required)
  string applicant_unique_link = 2;
}

// GetBgcReportsResponse
message GetBgcReportsResponse {
  // bgc reports
  repeated BgcReport bgc_reports = 2;
}

// RunMotorVehicleScreenRequest
message RunMotorVehicleScreenRequest {
  // First name (Required)
  string first_name = 1;
  // Last name (Required)
  string last_name = 2;
  // Unique link (Required)
  string applicant_unique_link = 3;
  // Date of birth (Required)
  string dob = 4;
  // driver license number (Required)
  DriversLicense driver_license = 5;
  // middle name (Optional)
  google.protobuf.StringValue middle_name = 6;
  // whether the candidate has requested a copy of their background check (Optional)
  google.protobuf.BoolValue copy_requested = 7;
  // vendor type (Optional)
  BgcVendorType vendor_type = 8;
  // Idempotency key associated with MVR, if not exist, default to unique_link
  google.protobuf.StringValue idempotency_key = 9;
}

// RunMotorVehicleScreenResponse
message RunMotorVehicleScreenResponse {
  // vendor type (Required)
  BgcVendorType vendor_type = 1;
  // successful create a screen or not (Required)
  bool is_success = 2;
  // bgc info
  oneof info {
    // bgc report
    BgcReport bgc_report = 3;
    // error message
    google.protobuf.StringValue error_message = 4;
  }
}

// RunCriminalScreenRequest
message RunCriminalScreenRequest {
  // First name (Required)
  string first_name = 1;
  // Last name (Required)
  string last_name = 2;
  // Email address (Required)
  string email = 3;
  // Phone number (Required)
  string phone = 4;
  // Unique link (Required)
  string applicant_unique_link = 5;
  // Date of birth (Required)
  string dob = 6;
  // zip code (Required)
  string zip_code = 7;
  // middle name (Optional)
  google.protobuf.StringValue middle_name = 8;
  // SSN (Optional)
  google.protobuf.StringValue ssn_token = 10;
  // driver license number (Optional)
  DriversLicense driver_license = 11;
  // address (Optional)
  common.CommonAddress address = 12;
  // whether the candidate has requested a copy of their background check (Optional)
  google.protobuf.BoolValue copy_requested = 13;
  // vendor type (Optional)
  BgcVendorType vendor_type = 14;
  // Idempotency key associated with screen, if not exist, default to unique_link
  google.protobuf.StringValue idempotency_key = 15;
}

// RunCriminalScreenResponse
message RunCriminalScreenResponse {
  // vendor type (Required)
  BgcVendorType vendor_type = 1;
  // successful create a screen or not (Required)
  bool is_success = 2;
  // bgc info
  oneof info {
    // bgc report
    BgcReport bgc_report = 3;
    // error message
    google.protobuf.StringValue error_message = 4;
  }
}

// RunMotorVehicleAndCriminalScreenRequest
message RunMotorVehicleAndCriminalScreenRequest {
  // First name (Required)
  string first_name = 1;
  // Last name (Required)
  string last_name = 2;
  // Email address (Required)
  string email = 3;
  // Phone number (Required)
  string phone = 4;
  // Unique link (Required)
  string applicant_unique_link = 5;
  // Date of birth (Required)
  string dob = 6;
  // zip code (Required)
  string zip_code = 7;
  // driver license number (Required)
  DriversLicense driver_license = 8;
  // middle name (Optional)
  google.protobuf.StringValue middle_name = 9;
  // SSN (Optional)
  google.protobuf.StringValue ssn_token = 10;
  // address (Optional)
  common.CommonAddress address = 12;
  // whether the candidate has requested a copy of their background check (Optional)
  google.protobuf.BoolValue copy_requested = 13;
  // vendor type (Optional)
  BgcVendorType vendor_type = 14;
  // Idempotency key associated with bgc, if not exist, default to unique_link
  google.protobuf.StringValue idempotency_key = 15;
}

// RunMotorVehicleAndCriminalScreenResponse
message RunMotorVehicleAndCriminalScreenResponse {
  // vendor type (Required)
  BgcVendorType vendor_type = 1;
  // successful create a screen or not (Required)
  bool is_success = 2;
  // bgc info
  oneof info {
    // bgc report
    BgcReport bgc_report = 3;
    // error message
    google.protobuf.StringValue error_message = 4;
  }
}

// Create a candidate in the external BGC vendor(s)
message CreateCandidateRequest {
  // vendor type (Required)
  BgcVendorType vendor_type = 1;
  // First name (Required)
  string first_name = 2;
  // Last name (Required)
  string last_name = 3;
  // Email address (Required)
  string email = 4;
  // Phone number (Required)
  string phone = 5;
  // Unique link (Required)
  string applicant_unique_link = 6;
  // Date of birth (Required)
  string dob = 7;
  // middle name (Optional)
  google.protobuf.StringValue middle_name = 8;
  // SSN (Optional)
  google.protobuf.StringValue ssn_token = 9;
  // driver license number (Optional)
  DriversLicense driver_license = 10;
  // Address (Optional)
  common.CommonAddress address = 11;
}

// Response of CreateCandidate API
message CreateCandidateResponse {
  // contains a list of candidate, each candidate contains vendor type and other information (e.g., candidate id)
  repeated Candidate candidates = 1;
}

// Candidate object
message Candidate {
  // vendor type (Required)
  BgcVendorType vendor_type = 1;
  // successful create an candidate or not
  bool is_success = 2;
  // candidate info
  oneof info {
    // id for the candidate
    google.protobuf.StringValue candidate_id = 3;
    // error message if fail to create the account in the vendor
    google.protobuf.StringValue error_message = 4;
  }
}

// EnrollCandidateForMonitoring request
message EnrollCandidateForMonitoringRequest {
  // vendor type (Required)
  BgcVendorType vendor_type = 1;
  // Unique link (Required)
  string application_unique_link = 2;
  // allow to enroll CC to multiple vendors (Optional)
  google.protobuf.BoolValue bypass_dedupe_check = 3;
}

// EnrollCandidateForMonitoring response
message EnrollCandidateForMonitoringResponse {
  // The enrollment action status.
  google.protobuf.StringValue status = 1;
  // message getting from external system
  google.protobuf.StringValue message = 2;
}

// UnEnrollCandidateForMonitoring request
message UnEnrollCandidateForMonitoringRequest {
  // vendor type (Required)
  BgcVendorType vendor_type = 1;
  // Unique link (Required)
  string application_unique_link = 2;
}

// UnEnrollCandidateForMonitoring response
message UnEnrollCandidateForMonitoringResponse {}
