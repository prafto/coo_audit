syntax = "proto3";
package smart_scale.v1;

import "doordash.api/annotations.proto";
import "google/api/annotations.proto";
import "smart_scale/common.proto";
import "smart_scale/smart_scale.proto";

option java_generic_services = true;
option java_outer_classname = "Audit";
option java_package = "com.doordash.rpc.smart_scale";

// Aduit related smart scale RPCs
service SmartScaleAuditService {
  option (doordash.api.service) = {
    name: "SmartScaleAuditService"
    url: "smart-scale-service-web-internal.service.prod.ddsd"
    port: 50051
    name_spaces: ["smart-scale-service-web-internal"]
    api_key_name: "SMART_SCALE_SERVICE_API_KEY"
    owner: {
      name: "smart-scale"
      id: "smart-scale-team"
      slack_channel: "#ask-smart-scale"
      email_alias: "smart-scale-sw-eng@doordash.com"
    }
    target_products: [INTERNAL]
  };
  // Get orders for audit
  rpc GetStoreOrdersForAudit(GetStoreOrdersForAuditRequest) returns (GetStoreOrdersForAuditResponse) {
    option (google.api.http) = {get: "/smart-scale-service-web-internal/v1/store/{store_id}/orders-for-audit"};
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: PROD
      authorization: [DD_EMPLOYEE]
      role_based_authorization: {
        mode: ANY,
        roles: ["security-raven-managed-authorization"]
      }
      authentication_config: {enable_okta_verification: true}
    };
  }
  // Get ground truth audit data for an order
  rpc GetGroundTruthAuditDataByDeliveryId(GetGroundTruthAuditDataByDeliveryIdRequest) returns (GetGroundTruthAuditDataByDeliveryIdResponse) {
    option (google.api.http) = {get: "/smart-scale-service-web-internal/v1/delivery/{delivery_id}/ground-truth-audit-data"};
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: PROD
      authorization: [DD_EMPLOYEE]
      role_based_authorization: {
        mode: ANY,
        roles: ["security-raven-managed-authorization"]
      }
      authentication_config: {enable_okta_verification: true}
    };
  }
  // Create/Update ground truth audit data for an order
  rpc UpsertGroundTruthAuditData(UpsertGroundTruthAuditDataRequest) returns (UpsertGroundTruthAuditDataResponse) {
    option (google.api.http) = {
      put: "/smart-scale-service-web-internal/v1/delivery/{delivery_id}/ground-truth-audit-data"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: PROD
      authorization: [DD_EMPLOYEE]
      role_based_authorization: {
        mode: ANY,
        roles: ["security-raven-managed-authorization"]
      }
      authentication_config: {enable_okta_verification: true}
    };
  }
}

// Get store orders for audit request
message GetStoreOrdersForAuditRequest {
  // Unique ID (int64) of the store for which orders are being requested
  int64 store_id = 1;
}

// Get store orders for audit response
message GetStoreOrdersForAuditResponse {
  // List of orders
  repeated OrderWithAuditData orders = 1;
}

// Order for audit
message OrderWithAuditData {
  // Unique ID (int64) of the delivery
  int64 delivery_id = 1;
  // UUID of the delivery
  string delivery_uuid = 2;
  // Customer name
  string customer_name = 3;
  // Last shown order screen on the app when the order is weighed (eg, ACCEPTABLE, UNDERWEIGHT, etc)
  SuggestedOrderScreen last_suggested_order_screen = 4;
  // Ground truth audit data
  GroundTruthAuditData ground_truth_audit_data = 5;
}

// Get ground truth audit data by delivery request
message GetGroundTruthAuditDataByDeliveryIdRequest {
  // Unique ID (int64) of the delivery
  int64 delivery_id = 1;
}

// Get ground truth audit data by delivery response
message GetGroundTruthAuditDataByDeliveryIdResponse {
  // Ground truth audit data
  GroundTruthAuditData ground_truth_audit_data = 1;
}

// Upsert ground truth audit data request
message UpsertGroundTruthAuditDataRequest {
  // Unique ID (int64) of the delivery
  int64 delivery_id = 1;
  // Ground truth audit data
  GroundTruthAuditData ground_truth_audit_data = 2;
}

// Upsert ground truth audit data response
message UpsertGroundTruthAuditDataResponse {}
