syntax = "proto3";
package smart_scale.v1;

import "common/money.proto";
import "common/service_client_config.proto";
import "doordash.api/annotations.proto";
import "doordash.api/client.proto";
import "doordash.api/field_validate.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "smart_scale/common.proto";

option java_generic_services = true;
option java_outer_classname = "Service";
option java_package = "com.doordash.rpc.smart_scale";

// Service dealing with smart scale
service SmartScaleService {
  option (doordash.api.service) = {
    name: "smart-scale-service-grpc"
    url: "smart-scale-service-web.service.prod.ddsd"
    port: 50051
    name_spaces: ["smart-scale-service"]
    api_key_name: "SMART_SCALE_SERVICE_API_KEY"
    owner: {
      name: "smart-scale"
      id: "smart-scale-team"
      slack_channel: "#ask-smart-scale"
      email_alias: "smart-scale-sw-eng@doordash.com"
    }
    target_products: [
      MX,
      INTERNAL
    ]
  };
  // Record the weight of a delivery measured by the smart scale
  rpc RecordDeliveryWeight(RecordDeliveryWeightRequest) returns (RecordDeliveryWeightResponse) {
    option (google.api.http) = {
      // {HttpMethod}: "{pathPattern}"
      post: "/smart-scale-service/v1/record_delivery_weight"
      body: "*"
    };

    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: PROD
      authorization: [MX_USER]
      target_products: [MX]
    };
  }
  // Backtest weight predictions
  rpc BacktestWeightPredictions(BacktestWeightPredictionsRequest) returns (BacktestWeightPredictionsResponse);
  // Invalidate weights data
  rpc InvalidateMeasurementWeightsData(InvalidateMeasurementWeightsDataRequest) returns (InvalidateMeasurementWeightsDataResponse) {
    option (google.api.http) = {
      // {HttpMethod}: "{pathPattern}"
      post: "/smart-scale-service/v1/invalidate_measurement_data"
      body: "*"
    };

    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: PROD
      authorization: [MX_USER]
      target_products: [MX]
    };
  }
  // External - get fraud data
  rpc GetFraudData(GetFraudDataRequest) returns (GetFraudDataResponse);
  // Get all smart scale related information about an order
  rpc FetchSmartScaleOrderData(FetchSmartScaleOrderDataRequest) returns (FetchSmartScaleOrderDataResponse) {
    option (google.api.http) = {get: "/smart-scale-service/v1/order"};
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: PROD
      authorization: [DD_EMPLOYEE]
      role_based_authorization: {
        mode: ANY,
        roles: ["security-raven-managed-authorization"]
      }
      authentication_config: {enable_okta_verification: true}
    };
  }
  // Record merchant product weights
  rpc RecordMerchantProductWeight(RecordMerchantProductWeightRequest) returns (RecordMerchantProductWeightResponse) {
    option (google.api.http) = {
      post: "/smart-scale-service/v1/merchant-product-weight"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: PROD
      authorization: [DD_EMPLOYEE]
      role_based_authorization: {
        mode: ANY,
        roles: ["security-raven-managed-authorization"]
      }
      authentication_config: {enable_okta_verification: true}
    };
  }
  // Get merchant product weights for given entity at item/option/msi level
  rpc GetMerchantProductsWeights(GetMerchantProductsWeightsRequest) returns (GetMerchantProductsWeightsResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 60000;
    option (google.api.http) = {
      // {HttpMethod}: "{pathPattern}"
      get: "/smart-scale-service/v1/get_merchant_product_weights"
    };

    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [MX_USER]
      target_products: [MX]
    };
  }
  // Get orders for a store id, within a given time period
  rpc GetStoreOrders(GetStoreOrdersRequest) returns (GetStoreOrdersResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 20000;
    option (google.api.http) = {get: "/smart-scale-service/v1/store/{store_id}/orders"};
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: PROD
      authorization: [DD_EMPLOYEE]
      role_based_authorization: {
        mode: ANY,
        roles: ["security-raven-managed-authorization"]
      }
      authentication_config: {enable_okta_verification: true}
    };
  }
  // Get the orders' statistics
  rpc GetStoreOrdersStats(GetStoreOrdersStatsRequest) returns (GetStoreOrdersStatsResponse) {
    option (google.api.http) = {get: "/smart-scale-service/v1/store/{store_id}/orders-stats"};
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: PROD
      authorization: [DD_EMPLOYEE]
      role_based_authorization: {
        mode: ANY,
        roles: ["security-raven-managed-authorization"]
      }
      authentication_config: {enable_okta_verification: true}
    };
  }
  // Get menu weight coverage for a store id
  rpc GetStoreMenuWeightCoverage(GetStoreMenuWeightCoverageRequest) returns (GetStoreMenuWeightCoverageResponse);
  // Get smart scale utilization
  rpc GetSmartScaleUtilization(GetSmartScaleUtilizationRequest) returns (GetSmartScaleUtilizationResponse) {
    option (google.api.http) = {
      // {HttpMethod}: "{pathPattern}"
      get: "/smart-scale-service/v1/get_smart_scale_utilization"
    };

    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: PROD
      authorization: [MX_USER]
      target_products: [MX]
    };
  }
  // Record the weight of a non-doordash delivery measured by the smart scale
  rpc RecordNonDoorDashDeliveryWeight(RecordNonDoorDashDeliveryWeightRequest) returns (RecordNonDoorDashDeliveryWeightResponse) {
    option (google.api.http) = {
      // {HttpMethod}: "{pathPattern}"
      post: "/smart-scale-service/v1/record_non_doordash_delivery_weight"
      body: "*"
    };

    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: PROD
      authorization: [MX_USER]
      target_products: [MX]
    };
  }
  // Record the smartscale photos
  rpc UploadSmartScalePhoto(UploadSmartScalePhotoRequest) returns (UploadSmartScalePhotoResponse);
  // Get object and non-object tags of merchant products
  rpc GetMerchantProductTags(GetMerchantProductTagsRequest) returns (GetMerchantProductTagsResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 20000;
    option (google.api.http) = {get: "/smart-scale-service/v1/store/{store_id}/merchant-product-tags"};
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: PROD
      authorization: [DD_EMPLOYEE]
      role_based_authorization: {
        mode: ANY,
        roles: ["security-raven-managed-authorization"]
      }
      authentication_config: {enable_okta_verification: true}
    };
  }
  // Update the object or non-object tag for the merchant products
  rpc UpdateMerchantProductTags(UpdateMerchantProductTagsRequest) returns (UpdateMerchantProductTagsResponse) {
    option (google.api.http) = {
      post: "/smart-scale-service/v1/merchant-product-tags"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: PROD
      authorization: [DD_EMPLOYEE]
      role_based_authorization: {
        mode: ANY,
        roles: ["security-raven-managed-authorization"]
      }
      authentication_config: {enable_okta_verification: true}
    };
  }
  // Get smart scale settings
  rpc GetSmartScaleSettings(GetSmartScaleSettingsRequest) returns (GetSmartScaleSettingsResponse) {
    option (google.api.http) = {get: "/smart-scale-service/v1/settings"};
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: PROD
      authorization: [DD_EMPLOYEE]
      role_based_authorization: {
        mode: ANY,
        roles: ["security-raven-managed-authorization"]
      }
      authentication_config: {enable_okta_verification: true}
    };
  }
  // Update smart scale settings
  rpc UpdateSmartScaleSettings(UpdateSmartScaleSettingsRequest) returns (UpdateSmartScaleSettingsResponse) {
    option (google.api.http) = {
      put: "/smart-scale-service/v1/settings"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: PROD
      authorization: [DD_EMPLOYEE]
      role_based_authorization: {
        mode: ANY,
        roles: ["security-raven-managed-authorization"]
      }
      authentication_config: {enable_okta_verification: true}
    };
  }
  // Get smart scale UI settings
  rpc GetSmartScaleUiSettings(GetSmartScaleUiSettingsRequest) returns (GetSmartScaleUiSettingsResponse) {
    option (google.api.http) = {
      // {HttpMethod}: "{pathPattern}"
      get: "/smart-scale-service/v1/get_smart_scale_ui_settings"
    };

    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: PROD
      authorization: [MX_USER]
      target_products: [MX]
    };
  }
  // Get the object detail of an order
  rpc GetOrderObjectDetail(GetOrderObjectDetailRequest) returns (GetOrderObjectDetailResponse);
  // Get the object detail of a cart
  rpc GetCartObjectDetail(GetCartObjectDetailRequest) returns (GetCartObjectDetailResponse);
  // Get the object counts of orders
  rpc GetOrdersObjectCounts(GetOrdersObjectCountsRequest) returns (GetOrdersObjectCountsResponse);
  // Get Contextual Weights defined at entity level
  rpc GetContextualWeights(GetContextualWeightsRequest) returns (GetContextualWeightsResponse) {
    option (google.api.http) = {get: "/smart-scale-service/v1/contextual-weights"};
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: PROD
      authorization: [DD_EMPLOYEE]
      role_based_authorization: {
        mode: ANY,
        roles: ["security-raven-managed-authorization"]
      }
      authentication_config: {enable_okta_verification: true}
    };
  }
  // Record contextual weights for primary and secondary id pair
  rpc RecordContextualWeight(RecordContextualWeightRequest) returns (RecordContextualWeightResponse) {
    option (google.api.http) = {
      post: "/smart-scale-service/v1/contextual-weight"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: PROD
      authorization: [DD_EMPLOYEE]
      role_based_authorization: {
        mode: ANY,
        roles: ["security-raven-managed-authorization"]
      }
      authentication_config: {enable_okta_verification: true}
    };
  }
  // Get the current mode of the store
  rpc GetStoreMode(GetStoreModeRequest) returns (GetStoreModeResponse) {
    option (google.api.http) = {
      // {HttpMethod}: "{pathPattern}"
      get: "/smart-scale-service/v1/get_store_mode"
    };

    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: PROD
      authorization: [MX_USER]
      target_products: [MX]
    };
  }
  // TODO: deprecate this endpoint when python script is deprecated. Process and upload verified menu weight csv
  rpc ProcessMenuWeightCsv(ProcessMenuWeightCsvRequest) returns (ProcessMenuWeightCsvResponse);
  // Get a presigned put url for S3 that the client can use to upload files to S3
  rpc GetPresignedS3PutUrl(GetPresignedS3PutUrlRequest) returns (GetPresignedS3PutUrlResponse) {
    option (google.api.http) = {
      post: "/smart-scale-service/v1/get_presigned_s3_put_url"
      body: "*"
    };

    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [MX_USER]
      target_products: [MX]
    };
  }
  // Get a presigned get url for S3 that the client can use to read files to S3
  rpc GetPresignedS3GetUrl(GetPresignedS3GetUrlRequest) returns (GetPresignedS3GetUrlResponse) {
    option (google.api.http) = {get: "/smart-scale-service/v1/presigned-s3-get-url/{bucket}/{key}"};
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: PROD
      authorization: [DD_EMPLOYEE]
      role_based_authorization: {
        mode: ANY,
        roles: ["security-raven-managed-authorization"]
      }
      authentication_config: {enable_okta_verification: true}
    };
  }
  // Get submitted bulk upload jobs and their metadata
  rpc GetBulkUploadJobs(GetBulkUploadJobsRequest) returns (GetBulkUploadJobsResponse) {
    // Use SearchBulkUploadJobs instead
    option deprecated = true;
  }
  // Search for bulk upload jobs
  rpc SearchBulkUploadJobs(SearchBulkUploadJobsRequest) returns (SearchBulkUploadJobsResponse) {
    option (google.api.http) = {get: "/smart-scale-service/v1/bulk-upload-jobs"};
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: PROD
      authorization: [DD_EMPLOYEE]
      role_based_authorization: {
        mode: ANY,
        roles: ["security-raven-managed-authorization"]
      }
      authentication_config: {enable_okta_verification: true}
    };
  }
  // Given s3 file name, kick off async job to process s3 file
  rpc SubmitBulkUploadJobForProcessing(SubmitBulkUploadJobForProcessingRequest) returns (SubmitBulkUploadJobForProcessingResponse) {
    option (google.api.http) = {
      post: "/smart-scale-service/v1/bulk-upload-job-for-processing"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: PROD
      authorization: [DD_EMPLOYEE]
      role_based_authorization: {
        mode: ANY,
        roles: ["security-raven-managed-authorization"]
      }
      authentication_config: {enable_okta_verification: true}
    };
  }
  // Get stores list along with problem stores
  rpc GetStoresList(GetStoresListRequest) returns (GetStoresListResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 60000;
    option (google.api.http) = {get: "/smart-scale-service/v1/stores-list"};
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: PROD
      authorization: [DD_EMPLOYEE]
      role_based_authorization: {
        mode: ANY,
        roles: ["security-raven-managed-authorization"]
      }
      authentication_config: {enable_okta_verification: true}
    };
  }
  // Generate the menu for the store
  rpc GenerateMenu(GenerateMenuRequest) returns (GenerateMenuResponse) {
    option (google.api.http) = {
      put: "/smart-scale-service/v1/store/{store_id}/menu"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: PROD
      authorization: [DD_EMPLOYEE]
      role_based_authorization: {
        mode: ANY,
        roles: ["security-raven-managed-authorization"]
      }
      authentication_config: {enable_okta_verification: true}
    };
  }
  // Get lightweight response for all smart scale enabled stores
  rpc GetStoresLight(GetStoresLightRequest) returns (GetStoresLightResponse) {
    option (google.api.http) = {get: "/smart-scale-service/v1/stores-light"};
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: PROD
      authorization: [DD_EMPLOYEE]
      role_based_authorization: {
        mode: ANY,
        roles: ["security-raven-managed-authorization"]
      }
      authentication_config: {enable_okta_verification: true}
    };
  }
  // Get last snapshot of weighed orders
  rpc GetWeighedOrdersLastSnapshot(GetWeighedOrdersLastSnapshotRequest) returns (GetWeighedOrdersLastSnapshotResponse);
  // Record weight of an object measured by the smart scale
  rpc RecordObjectWeight(RecordObjectWeightRequest) returns (RecordObjectWeightResponse) {
    option (google.api.http) = {
      // {HttpMethod}: "{pathPattern}"
      post: "/smart-scale-service/v1/record_object_weight"
      body: "*"
    };

    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: PROD
      authorization: [MX_USER]
      target_products: [MX]
    };
  }
  // Initiate coping weights from from one store to multiple stores
  rpc CopyMenuWeights(CopyMenuWeightsRequest) returns (CopyMenuWeightsResponse) {
    option (google.api.http) = {
      post: "/smart-scale-service/v1/copy-menu-weights"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: PROD
      authorization: [DD_EMPLOYEE]
      role_based_authorization: {
        mode: ANY,
        roles: ["security-raven-managed-authorization"]
      }
      authentication_config: {enable_okta_verification: true}
    };
  }
  // Audit flow action
  rpc AuditFlowAction(AuditFlowActionRequest) returns (AuditFlowActionResponse) {
    option (google.api.http) = {
      // {HttpMethod}: "{pathPattern}"
      post: "/smart-scale-service/v1/audit_flow_action"
      body: "*"
    };

    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: PROD
      authorization: [MX_USER]
      target_products: [MX]
    };
  }
  // Get the pending object weights for auditing
  rpc GetObjectWeightsForAudit(GetObjectWeightsForAuditRequest) returns (GetObjectWeightsForAuditResponse);
  // Update the object weight
  rpc UpdateObjectWeight(UpdateObjectWeightRequest) returns (UpdateObjectWeightResponse);
  // Get smartscale setting by setting key
  rpc GetSmartScaleSettingByKey(GetSmartScaleSettingByKeyRequest) returns (GetSmartScaleSettingByKeyResponse) {
    option (google.api.http) = {get: "/smart-scale-service/v1/settings-by-key"};
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: PROD
      authorization: [DD_EMPLOYEE]
      role_based_authorization: {
        mode: ANY,
        roles: ["security-raven-managed-authorization"]
      }
      authentication_config: {enable_okta_verification: true}
    };
  }
  // Generate menu tsv file
  rpc GenerateMenuTsv(GenerateMenuTsvRequest) returns (GenerateMenuTsvResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 20000;
    option (google.api.http) = {
      put: "/smart-scale-service/v1/menu-tsv/{store_id}"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: PROD
      authorization: [DD_EMPLOYEE]
      role_based_authorization: {
        mode: ANY,
        roles: ["security-raven-managed-authorization"]
      }
      authentication_config: {enable_okta_verification: true}
    };
  }
  // Get performance summary of a store
  rpc GetPerformanceSummary(GetPerformanceSummaryRequest) returns (GetPerformanceSummaryResponse) {
    option (google.api.http) = {
      // {HttpMethod}: "{pathPattern}"
      get: "/smart-scale-service/v1/get_performance_summary"
    };

    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: PROD
      authorization: [MX_USER]
      target_products: [MX]
    };
  }
  // Get performance summary of a store (Version 2)
  rpc GetPerformanceSummaryV2(GetPerformanceSummaryV2Request) returns (GetPerformanceSummaryV2Response) {
    option (google.api.http) = {
      // {HttpMethod}: "{pathPattern}"
      get: "/smart-scale-service/v2/get_performance_summary"
    };

    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [MX_USER]
      target_products: [MX]
    };
  }
  // Confirm order ready for pickup
  rpc ConfirmOrderReadyForPickup(ConfirmOrderReadyForPickupRequest) returns (ConfirmOrderReadyForPickupResponse) {
    option (google.api.http) = {
      // {HttpMethod}: "{pathPattern}"
      post: "/smart-scale-service/v1/confirm_order_ready_for_pickup"
      body: "*"
    };

    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: PROD
      authorization: [MX_USER]
      target_products: [MX]
    };
  }
  // Active marketplace and drive orders
  rpc GetActiveOrders(GetActiveOrdersRequest) returns (GetActiveOrdersResponse) {
    option (google.api.http) = {
      // {HttpMethod}: "{pathPattern}"
      get: "/smart-scale-service/v1/active_orders"
    };

    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: PROD
      authorization: [MX_USER]
      target_products: [MX]
    };
  }
  // Get store details for current merchant user
  rpc GetStoreDetails(GetStoreDetailsRequest) returns (GetStoreDetailsResponse) {
    option (google.api.http) = {
      // {HttpMethod}: "{pathPattern}"
      get: "/smart-scale-service/v1/get_store_details"
    };

    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: PROD
      authorization: [MX_USER]
      target_products: [MX]
    };
  }
  // Get achievements for a store
  rpc GetAchievements(GetAchievementsRequest) returns (GetAchievementsResponse) {
    option (google.api.http) = {
      // {HttpMethod}: "{pathPattern}"
      post: "/smart-scale-service/v1/get_achievements"
      body: "*"
    };

    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [MX_USER]
      target_products: [MX]
    };
  }
  // Create or updated challenges
  rpc CreateOrUpdateChallenges(CreateOrUpdateChallengesRequest) returns (CreateOrUpdateChallengesResponse);
  // Delete challenges
  rpc DeleteChallenges(DeleteChallengesRequest) returns (DeleteChallengesResponse);
  // Update store challenge progress
  rpc UpdateStoreChallengeProgress(UpdateStoreChallengeProgressRequest) returns (UpdateStoreChallengeProgressResponse);
  // Has CNR weight verified warning
  rpc HasWeightVerifiedWarning(HasWeightVerifiedWarningRequest) returns (HasWeightVerifiedWarningResponse);
}

// Get smart scale utilization request
message GetSmartScaleUtilizationRequest {
  // Unique ID (int64) of the store
  int64 store_id = 1;
  // (Optional) start time of utilization (cropped to start of a full daypart). Default is 2 full daypart
  google.protobuf.Timestamp start_time = 2 [(doordash.api.client.optional) = true];
  // (Optional) end time of utilization window (cropped to end of a full daypart). Default is 2 full daypart
  google.protobuf.Timestamp end_time = 3 [(doordash.api.client.optional) = true];
}

// Get smart scale utilization response
message GetSmartScaleUtilizationResponse {
  // Timezone of store "US/Central", default is "US/Pacific"
  string timezone = 1;
  // the utilization flag threshold, representing percentage
  float utilization_flagged_percentage_threshold = 2;
  // list of daypart info
  repeated DayPartDetails day_part_details = 3;
  // last order that is picked up but not weighed
  NotWeighedOrderPickedUp not_weighed_order_picked_up = 4;
  // list of last snapshot of all weighed ready for pick up and out for delivery orders (READY_FOR_PICKUP, PICKED_UP)
  repeated WeighedActiveOrderLastSnapshot weighed_active_order_last_snapshot = 5;
  // list of orders that are ready for pickup or picked up but not weighed (limited to 1 for now)
  repeated NotWeighedActiveOrder not_weighed_active_order = 6;
  // reserved the index of weighing_streak
  reserved 7;
  // reserved the field name of weighing_streak
  reserved "weighing_streak";
  // The number of orders weighed after the last delivered order without weighing
  google.protobuf.Int32Value weighing_streaks = 8;
}

// Day Part Details
message DayPartDetails {
  // Local date that day part belongs to ("2022-07-15")
  string date = 1;
  // Local start time of the day part
  string local_start_time = 2;
  // Local end time of the day part
  string local_end_time = 3;
  // count of number of orders that are ready for pickup, picked up, or delivered (if canceled but has a weight then it should be included)
  int32 num_orders = 4;
  // ccount of orders that reached ready_for_pickup state and are weighed (if canceled but has a weight then it should be included)
  int32 num_orders_weighed = 5;
}

// Order that is not weighed and in PICKED_UP state
message NotWeighedOrderPickedUp {
  // Unique ID (string) of the delivery
  string delivery_uuid = 1;
  // Timestamp of when order was picked up (UTC)
  google.protobuf.Timestamp pickup_time = 2;
  // Provider type of the order
  ProviderType provider_type = 3;
}

// [DEPECATE]
// Orders that are not weighed and in READY_FOR_PICKUP or PICKED_UP state
message NotWeighedActiveOrder {
  // Unique ID (string) of the delivery
  string delivery_uuid = 1;
  // Timestamp of when order was marked as ready for pick up or picked up (UTC)
  google.protobuf.Timestamp marked_time = 2;
}

// Last snapshot of weighed orders
message LastWeighedRecord {
  // last stored measured weight in grams
  float last_measured_weight_grams = 1;
  // last stored expected weight in grams
  google.protobuf.FloatValue last_expected_weight_grams = 2;
  // last stored lower expected weight in grams
  google.protobuf.FloatValue last_lower_expected_weight_threshold = 3;
  // last stored upper expected weight in grams
  google.protobuf.FloatValue last_upper_expected_weight_threshold = 4;
  // Timestamp of last recorded order (UTC)
  google.protobuf.Timestamp recorded_time = 5;
  // Last result of delivery weight check
  WeightCheckResult last_weight_check_result = 6;
  // Last store mode when order was recorded
  StoreMode last_store_mode = 7;
  // Last store mode option when order was recorded
  StoreModeOption last_store_mode_option = 8;
  // Last suggested screen for the app to display
  SuggestedOrderScreen last_suggested_order_screen = 9;
}

// [DEPRECATE]
// Last snapshot of weighed orders that are in READY_FOR_PICKUP or PICKED_UP state
message WeighedActiveOrderLastSnapshot {
  // Unique ID (string) of the delivery
  string delivery_uuid = 1;
  // last stored measured weight in grams
  float last_measured_weight_grams = 2;
  // last stored expected weight in grams
  google.protobuf.FloatValue last_expected_weight_grams = 3;
  // last stored lower expected weight in grams
  google.protobuf.FloatValue last_lower_expected_weight_threshold = 4;
  // last stored upper expected weight in grams
  google.protobuf.FloatValue last_upper_expected_weight_threshold = 5;
  // Timestamp of last recorded order (UTC)
  google.protobuf.Timestamp recorded_time = 6;
  // Last result of delivery weight check
  WeightCheckResult last_weight_check_result = 7;
  // Last store mode when order was recorded
  StoreMode last_store_mode = 8;
  // Last store mode option when order was recorded
  StoreModeOption last_store_mode_option = 9;
  // Last suggested screen for the app to display
  SuggestedOrderScreen last_suggested_order_screen = 10;
}

// Smart scale device data
message SmartScaleDeviceData {
  // Unique id of the smart scale
  string device_id = 1;
  // Firmware version of the smart scale
  string firmware_version = 2;
  // Software version of the smart scale
  string software_version = 3;
  // App screen where the call is made from
  AppScreen app_screen_recorded_from = 4;
}

// App screen where the call is made from
enum AppScreen {
  // Unspecified (default)
  APP_SCREEN_UNSPECIFIED = 0;
  // Weighing order screen
  APP_SCREEN_WEIGHING = 1;
  // Extremely underweight order screen
  APP_SCREEN_EXTREMELY_UNDERWEIGHT = 2;
  // Multi bag order screen
  APP_SCREEN_MULTI_BAG = 3;
  // Result order screen
  APP_SCREEN_RESULTS = 4;
  // Audit flow screen
  APP_SCREEN_AUDIT_FLOW = 5;
}

// Request to recording delivery weight
message RecordDeliveryWeightRequest {
  // Smart scale device data
  SmartScaleDeviceData device_data = 1;
  // int64 delivery_id. DEPRECATED: Use order_identifier instead
  reserved 2;
  reserved "delivery_id";
  // Weight on scale in grams
  float measured_weight = 3;
  // Unique ID (int64) of the authenticated store employee who is calling the endpoint
  int64 store_id = 4;
  // (optional) uuid of an existing order weight record. If present and record found,
  // update this record in the db. if not, new record is inserted
  google.protobuf.StringValue record_id = 5;
  // Weight of the current bag in grams
  google.protobuf.FloatValue bag_weight = 6;
  // reserved index for use_merchant_weights
  reserved 7;
  // reserved name for use_merchant_weights
  reserved "use_merchant_weights";
  // Reserved index for provider_type
  reserved 8;
  // Reserved index for provider_type
  reserved "provider_type";
  // Reserved index for order_id
  reserved 9;
  // Reserved index for order_id
  reserved "order_id";
  // Order identifier
  OrderIdentifier order_identifier = 10;
}

// Result of a weight check
enum WeightCheckResult {
  // Unspecified (default)
  WEIGHT_CHECK_RESULT_UNSPECIFIED = 0;
  // Not enough data to predict weight
  WEIGHT_CHECK_RESULT_NOT_ENOUGH_DATA = 1;
  // Weight is in the acceptable range
  WEIGHT_CHECK_RESULT_ACCEPTABLE = 2;
  // Weight is below the acceptable range
  WEIGHT_CHECK_RESULT_UNDER = 3;
  // Weight is above the acceptable range
  WEIGHT_CHECK_RESULT_OVER = 4;
  // Weight is much below the acceptable range
  WEIGHT_CHECK_RESULT_EXTREMELY_UNDER = 5;
  // Weight is below the acceptable range and the order contains only one object.
  WEIGHT_CHECK_RESULT_SINGLE_ITEM_UNDER = 6;
  // Weight is above the acceptable range and the order contains only one object.
  WEIGHT_CHECK_RESULT_SINGLE_ITEM_OVER = 7;
}

// Response to recording delivery weight, including a prediction on missing items
message RecordDeliveryWeightResponse {
  // reserved index for detected_missing_items
  reserved 1;
  // reserved name for detected_missing_items
  reserved "detected_missing_items";
  // reserved index for message
  reserved 2;
  // reserved name for message
  reserved "message";
  // Result of delivery weight check
  WeightCheckResult weight_check_result = 3;
  // ID of weight measurement
  string id = 4;
  // reserved index for expected_weight_range_grams
  reserved 5;
  // reserved name for expected_weight_range_grams
  reserved "expected_weight_range_grams";
  // Item weights for the delivery
  repeated ItemWeight item_weights = 6;
  // Expected weight (in grams)
  float expected_weight_grams = 7;
  // Store's current operation mode
  StoreMode store_mode = 8;
  // Selected option of current operation mode. It is UNSPECIFIED when NORMAL mode
  StoreModeOption store_mode_option = 9;
  // Suggested screen for the app to display
  ClientScreen suggested_client_screen = 10;
  // Id of audit object
  ObjectIdToAudit object_id_to_audit = 11;
}

// Id of audit object
message ObjectIdToAudit {
  // Unique order item id
  int64 order_item_id = 1;
  // Option id if the object is present as an option
  google.protobuf.Int64Value option_id = 2;
}

// Client screen metadata. Can be added to incase we wanted to drive other fields such as title, color, from backend
message ClientScreen {
  // Name of the screen to show
  SuggestedOrderScreen screen_name = 1;
}

// Result of a weight check
enum SuggestedOrderScreen {
  // Unspecified (default)
  SUGGESTED_ORDER_SCREEN_UNSPECIFIED = 0;
  // No prediction screen - Gray
  SUGGESTED_ORDER_SCREEN_NO_PREDICTION = 1;
  // Weight is in the acceptable range - Green screen
  SUGGESTED_ORDER_SCREEN_ACCEPTABLE = 2;
  // Weight is below the acceptable range - Yellow screen
  SUGGESTED_ORDER_SCREEN_UNDERWEIGHT = 3;
  // Weight is above the acceptable range - Oragne screen
  SUGGESTED_ORDER_SCREEN_OVERWEIGHT = 4;
  // Weight is much below the acceptable range
  SUGGESTED_ORDER_SCREEN_EXTREMELY_UNDERWEIGHT = 5;
  // Weigh is below and suspected multi-bag order
  SUGGESTED_ORDER_SCREEN_MULTI_BAG = 6;
}

// Item weights for the delivery, as well as data about missing
message ItemWeight {
  // Name of item
  string name = 1;
  // Total weight of item and options
  google.protobuf.FloatValue weight = 2;
  // Name of options
  repeated string option_names = 3;
  // Is item frequently missing
  bool frequently_missing = 4;
}

// Request to backtest weight predictions
message BacktestWeightPredictionsRequest {
  // entity to backtest deliveries for
  oneof target_entity {
    // Unique ID (int64) of the business
    int64 business_id = 1;
    // Unique ID (int64) of the store
    int64 store_id = 2;
    // Unique ID (int64) of the delivery
    int64 delivery_id = 3;
    // Scans all businesses. Only a True value is considered valid
    bool scan_all_businesses = 12;
  }
  // start time of deliveries
  google.protobuf.Timestamp start_time = 4;
  // end time of deliveries
  google.protobuf.Timestamp end_time = 5;
  // Start index for pagination of predictions (default 0)
  google.protobuf.Int32Value start_index = 6;
  // Use new merchant weights for prediction computation
  bool use_merchant_weights = 7;
  // Override the bag weight grams of the store
  google.protobuf.Int32Value bag_weight_grams = 8;
  // Override the acceptable weight difference grams of the store
  google.protobuf.Int32Value acceptable_weight_difference_grams = 9;
  // Requires all item/option weights to exists or it will return no prediction
  google.protobuf.BoolValue require_all_weights_to_exist = 10;
  // Include orders that are not weighed on the scale as well
  google.protobuf.BoolValue include_not_measured_orders = 11;
  // Include pending object weights in object weight prediction
  google.protobuf.BoolValue include_pending_object_weights = 13;
  // Restricted sources of object weights used for object weight prediction
  repeated ObjectWeightSource restricted_object_weight_sources = 14;
  // List of weight measurement source types used for prediction
  repeated WeightMeasurementSourceType weight_measurement_source_types = 15;
}

// Response from backtesting weight predictions
message BacktestWeightPredictionsResponse {
  // Backtested weight predictions for a set of deliveries
  repeated DeliveryBacktestResults delivery_backtested_weight_predictions = 1;
  // Next index or pagination of orders (null if no more deliveries)
  google.protobuf.Int32Value next_index = 2;
  // total num orders requested
  int64 total_record_found = 3;
}

// Backtested weight prediction for a given delivery
message DeliveryBacktestResults {
  // Unique ID (int64) of the delivery
  int64 delivery_id = 1;
  // Measured weights of the delivery in grams (can be multiple if there were reweighs)
  repeated MeasuredWeight measured_weights = 2;
  // Prediction algorithm version number
  string prediction_algorithm_version = 3;
  // Predictions
  repeated Prediction prediction_results = 4;
  // Unique ID (int64) of the delivery
  int64 store_id = 5;
  // weight of the lightest item in the order
  google.protobuf.Int32Value lightest_order_item_grams = 6;
  // Unique ID (int64) of the business
  int64 business_id = 7;
  // order variance in grams squared
  google.protobuf.FloatValue order_weight_variance = 8;
  // count of items in the order reported by doordash
  int32 order_item_count = 9;
  // count of objects in the order reported by transform layer (null if transform layer did not exists)
  google.protobuf.Int32Value order_object_count = 10;
  // Object detail of items
  repeated ItemObjectDetail item_object_details = 11;
}

// Measured weight
message MeasuredWeight {
  // reserved index for timestamp
  reserved 1;
  // reserved name for timestamp
  reserved "timestamp";
  // Expected weight in grams
  float measured_weight_grams = 2;
  // Measured at time
  google.protobuf.Timestamp measured_at = 3;
  // Weight check result after this measurement
  WeightCheckResult weight_check_result = 4;
  // suggested order screen to be shown on the app
  SuggestedOrderScreen suggested_order_screen = 5;
  // was record invalidated
  google.protobuf.BoolValue is_invalid = 6;
}

// Weight prediction
message Prediction {
  // Methodology used to make prediction
  string prediction_methodology = 1;
  // Expected weight in grams
  float expected_weight_grams = 2;
  // Acceptable weight delta in grams
  float acceptable_weight_difference = 3;
  // Acceptable overweight delta in grams
  google.protobuf.FloatValue acceptable_overweight_difference = 4;
}

// Record merchant product weight request
message RecordMerchantProductWeightRequest {
  // ID of the merchant product for the given weights
  oneof product_id {
    // ID of item
    string item_id = 1 [deprecated = true];
    // ID of option
    string option_id = 2 [deprecated = true];
    // ID of merchant supplied id (aka external id)
    string merchant_supplied_id = 3 [deprecated = true];
  }
  // Measured weight in grams
  repeated float measured_weights_grams = 4;
  // Entity level at which we record the merchant product weights
  Entity entity = 5;
  // User id of user recording merchant product weights
  int64 updated_by_user_id = 6;
  // Source type of weight measurements
  WeightMeasurementSourceType source_type = 7;
  // ID of item
  google.protobuf.StringValue item_id_field = 8;
  // ID of option
  google.protobuf.StringValue option_id_field = 9;
  // ID of merchant supplied id (aka external id)
  google.protobuf.StringValue merchant_supplied_id_field = 10;
}

// Response for recording merchant product weight
message RecordMerchantProductWeightResponse {}

// Request for getting merchant products weights at item/option/msi level
message GetMerchantProductsWeightsRequest {
  // Entity level at which we fetch weights.
  Entity entity = 1;
  // If true, include menu info such as item name, option name, menu id, etc
  bool include_menu_information = 2;
  // If true, include menu items and options that don't have a recorded weight in our db
  bool include_products_without_weights = 3;
  // If true and entity is set to STORE, combine both business and store level weights where store level weights will
  // override business level. If entity is set to BUSINESS, this field will be ignored.
  bool combine_entity_level_weights = 4;
  // If suggested weights should be included in the response
  bool include_suggested_weights = 5;
}

// Response for getting merchant products weights at item/option/msi level
message GetMerchantProductsWeightsResponse {
  // Item weight data
  repeated MerchantItemWeightData item_weight_data = 1;
  // Option weight data
  repeated MerchantOptionWeightData option_weight_data = 2;
  // Merchant product weight data
  repeated MerchantProductWeightData merchant_product_weight_data = 3;
}

// Record merchant product weight response
message MerchantProductWeightData {
  reserved 4;
  reserved "source_entity";
  // ID of merchant supplied id (aka external id)
  string merchant_supplied_id = 1;
  // Weight measurements
  repeated float weight_measurements = 2;
  // Name, null if include_menu_information = false
  google.protobuf.StringValue name = 3;
  // Source entity where the weights were fetched from
  Entity weight_entity_source = 5;
  // User id of user who recorded this item weight
  int64 updated_by = 6;
  // Timestamp when weight was last recorded at
  google.protobuf.Timestamp updated_at = 7;
  // Suggested weight measurements, when there is no weight_measurements
  repeated SuggestedWeightMeasurement suggested_weight_measurements = 8;
  // Weight measurements from various sources
  repeated Weight weights = 9;
}

// Item level weight data
message MerchantItemWeightData {
  reserved 8;
  reserved "source_entity";
  // ID of item
  string item_id = 1;
  // Weight measurements
  repeated float weight_measurements = 2;
  // Is item frequently missing
  bool frequently_missing = 3;
  // Item name, null if include_menu_information = false
  google.protobuf.StringValue item_name = 4;
  // Menu ID
  google.protobuf.StringValue menu_id = 5;
  // Menu name
  google.protobuf.StringValue menu_name = 6;
  // (optional) merchant supplied id
  google.protobuf.StringValue merchant_supplied_id = 7;
  // Source entity where the weights were fetched from
  Entity weight_entity_source = 9;
  // User id of user who recorded this item weight
  int64 updated_by = 10;
  // Timestamp when weight was last recorded at
  google.protobuf.Timestamp updated_at = 11;
  // Suggested weight measurements, when there is no weight_measurements
  repeated SuggestedWeightMeasurement suggested_weight_measurements = 12;
  // Weights with source of weights
  repeated Weight weights = 13;
}

// Option level weight data
message MerchantOptionWeightData {
  reserved 7;
  reserved "source_entity";
  // ID of option
  string option_id = 1;
  // Weight measurements
  repeated float weight_measurements = 2;
  // Option name, null if include_menu_information = false
  google.protobuf.StringValue option_name = 3;
  // Menu ID
  google.protobuf.StringValue menu_id = 4;
  // Menu name
  google.protobuf.StringValue menu_name = 5;
  // Merchant supplied id
  google.protobuf.StringValue merchant_supplied_id = 6;
  // Source entity where the weights were fetched from
  Entity weight_entity_source = 8;
  // User id of user who recorded this option weight
  int64 updated_by = 9;
  // Timestamp when weight was last recorded at
  google.protobuf.Timestamp updated_at = 10;
  // Suggested weight measurements, when there is no weight_measurements
  repeated SuggestedWeightMeasurement suggested_weight_measurements = 11;
  // Weights with source of weights
  repeated Weight weights = 12;
}

// Weights with source of weights
message Weight {
  // Weights
  repeated float weight_measurements = 1;
  // Source type of weights
  WeightMeasurementSourceType source_type = 2;
}

// Suggested weight measurements, when there is no weight_measurements
message SuggestedWeightMeasurement {
  // Weight measurements
  repeated float weight_measurements = 1;
  // Count of products with the same set of weight measurements
  int64 products_count = 2;
  // Type of match for the suggested weight measurements
  SuggestedWeightMeasurementMatchType match_type = 3;
}

// Type of match for the suggested weight measurements
enum SuggestedWeightMeasurementMatchType {
  // Unknown type
  SUGGESTED_WEIGHT_MEASUREMENT_MATCH_TYPE_UNSPECIFIED = 0;
  // Start from menu name when matching paths
  SUGGESTED_WEIGHT_MEASUREMENT_MATCH_TYPE_MENU_NAME = 1;
  // Start from item name when matching paths (do not consider menu name)
  SUGGESTED_WEIGHT_MEASUREMENT_MATCH_TYPE_ITEM_NAME = 2;
  // Start from path when matching paths (do not consider menu or item name)
  SUGGESTED_WEIGHT_MEASUREMENT_MATCH_TYPE_PATH = 3;
}

// Invalidate measurement weight data request
message InvalidateMeasurementWeightsDataRequest {
  // Measurement type
  MeasurementType measurement_type = 1;
  // List of IDs of item measurement to invalidate
  repeated string measurement_ids = 2;
  // Entity level at which we invalidate weights
  Entity entity = 3;
  // Source type of weight measurements
  WeightMeasurementSourceType source_type = 4;
}

// Invalidate measurement weight data response
message InvalidateMeasurementWeightsDataResponse {}

// List of different measurement types
enum MeasurementType {
  // Unknown type
  MEASUREMENT_TYPE_UNSPECIFIED = 0;
  // Item measurement type
  MEASUREMENT_TYPE_ITEM = 1;
  // Item option measurement type
  MEASUREMENT_TYPE_OPTION = 2;
  // Delivery measurement type
  MEASUREMENT_TYPE_DELIVERY = 3;
  // Merchant product measurement type
  MEASUREMENT_TYPE_MERCHANT_PRODUCT = 4;
}

// Validate fraud data request
message GetFraudDataRequest {
  // Delivery id of the order in question
  int64 delivery_id = 1;
  // (Optional) Unique ID (int64) of store where the order was placed and the delivery is tied to
  google.protobuf.Int64Value store_id = 2;
  // If true, include option weights in the expected item weight
  bool include_option_weights_for_item = 3;
  // Use new merchant weights
  bool use_merchant_weights = 4;
}

// Validate fraud data response
message GetFraudDataResponse {
  // Whether the order is with in the expected range or not
  WeightCheckResult status = 1;
  // what was the measured weight of the order by scale
  float measured_weight_grams = 2;
  // what was the mean (average) expected weight of the order
  float expected_weight_grams = 3;
  // acceptable weight difference from the mean expected weight (expected_weight_grams)
  float expected_weight_delta_grams = 4;
  // Statistical summary of item/option weights
  repeated SummarizedItemWeightData item_weights = 5;
}

// Statistical summary of item weights
message SummarizedItemWeightData {
  // ID of item
  string id = 1;
  // Average weight in grams
  float weight_grams = 2;
  // Variance in grams
  float variance_grams = 3;
  // weight of the options if they exists
  repeated SummarizedOptionWeightData option_weights = 4;
  // quantity of item
  int64 quantity = 5;
}

// Statistical summary of option weights
message SummarizedOptionWeightData {
  // ID of item
  string id = 1;
  // Average weight in grams
  float weight_grams = 2;
  // Variance in grams
  float variance_grams = 3;
  // quantity of option
  int64 quantity = 4;
}

// Fetch smart scale order data request
message FetchSmartScaleOrderDataRequest {
  // Order entity for fetching order information
  oneof order_entity {
    // Unique id (int64) of the delivery
    int64 delivery_id = 1 [deprecated = true];
    // Unique id (string) of the delivery
    string delivery_uuid = 2 [deprecated = true];
  }
  // Use new merchant weights
  bool use_merchant_weights = 3 [deprecated = true];
  // Unique id (int64) of the delivery
  google.protobuf.Int64Value delivery_id_field = 4;
  // Unique id (string) of the delivery
  google.protobuf.StringValue delivery_uuid_field = 5;
}

// Problem sub-category
enum ProblemSubCategory {
  // Unknown type
  PROBLEM_SUB_CATEGORY_UNSPECIFIED = 0;
  // Missing
  PROBLEM_SUB_CATEGORY_MISSING = 1;
  // Incorrect
  PROBLEM_SUB_CATEGORY_INCORRECT = 2;
  // Wrong Order
  PROBLEM_SUB_CATEGORY_WRONG_ORDER = 3;
  // Never Delivered
  PROBLEM_SUB_CATEGORY_NEVER_DELIVERED = 4;
  // Food Quality
  PROBLEM_SUB_CATEGORY_FOOD_QUALITY = 5;
  // Lateness
  PROBLEM_SUB_CATEGORY_LATENESS = 6;
  // Cancellations - Step 1
  PROBLEM_SUB_CATEGORY_CANCELLATIONS = 7;
  // Other
  PROBLEM_SUB_CATEGORY_OTHER = 8;
}

// Problem Category
enum ProblemCategory {
  // Unknown type
  PROBLEM_CATEGORY_UNSPECIFIED = 0;
  // Missing or Incorrect
  PROBLEM_CATEGORY_MISSING_OR_INCORRECT = 1;
  // Never Delivered
  PROBLEM_CATEGORY_NEVER_DELIVERED = 2;
  // Poor Food Quality
  PROBLEM_CATEGORY_POOR_FOOD_QUALITY = 3;
  // Lateness
  PROBLEM_CATEGORY_LATENESS = 4;
  // Cancellations
  PROBLEM_CATEGORY_CANCELLATIONS = 5;
  // Other
  PROBLEM_CATEGORY_OTHER = 6;
}

// Reported problem definition
message ReportedProblem {
  // Problem name
  google.protobuf.StringValue problem_name = 1;
  // Problem category
  ProblemCategory problem_category = 2;
  // Problem sub-category
  ProblemSubCategory problem_sub_category = 3;
  // Problem description
  google.protobuf.StringValue problem_description = 4;
  // Item name
  google.protobuf.StringValue item_name = 5;
  // Order item id
  google.protobuf.Int64Value order_item_id = 6;
  // Quantity
  google.protobuf.Int32Value quantity = 7;
  // Amount refunded (refunded to original payment method) or credited (DD credits) to the cx
  money.MonetaryFields credits_and_refunds = 8;
  // Amount charged to mx
  money.MonetaryFields store_charge = 10;
}

// Fetch smart scala order data response
message FetchSmartScaleOrderDataResponse {
  // Unique ID (int64) of the delivery
  int64 delivery_id = 1;
  // Unique ID (string) of the delivery
  string delivery_uuid = 2;
  // Unique ID (int64) of the store
  int64 store_id = 3;
  // Name of the store
  string store_name = 4;
  // Unique ID (int64) of the business
  int64 business_id = 5;
  // Name of the business
  string business_name = 6;
  // Result of the delivery weight check
  WeightCheckResult weight_check_result = 7;
  // Measured weights of the delivery in grams (can be multiple if there were reweighs)
  repeated MeasuredWeight measured_weights = 8;
  // Expected weight of the order
  google.protobuf.FloatValue expected_weight_grams = 9;
  // The prediction methodology used to predict the order
  google.protobuf.StringValue used_prediction_methodology = 10;
  // Predictions sorted by priority from high to low
  repeated Prediction predictions = 11;
  // Order detail
  repeated OrderItemDetails order_item_details = 12;
  // Order placement time
  google.protobuf.Timestamp order_created_at = 13;
  // Is the delivery ASAP
  google.protobuf.BoolValue is_asap = 14;
  // Fulfillment type
  google.protobuf.StringValue fulfillment_type = 15;
  // Is the order flagged as underweight or overweight
  bool flagged = 16;
  // Is the order weight fixed after it is flagged as underweight or overweight
  bool flagged_and_fixed = 17;
  // Unique ID (string) of the order
  string order_uuid = 18;
  // Order feedbacks from merchant device
  repeated Feedback feedbacks = 19;
  // Is the order flagged as underweight
  bool flagged_as_underweight = 20;
  // Is the order flagged as overweight
  bool flagged_as_overweight = 21;
  // Store's mode at the time of order
  StoreMode store_mode = 22;
  // Selected option of mode at the time of order. It is UNSPECIFIED when NORMAL mode
  StoreModeOption store_mode_option = 23;
  // Problems reported
  repeated ReportedProblem reported_problems = 24;
  // Total amount refunded (refunded to original payment method) or credited (DD credits) to the cx
  money.MonetaryFields total_credits_and_refunds = 25;
  // Total amount charged to mx
  money.MonetaryFields total_store_charge = 26;
  // Total amount paid out by DD
  money.MonetaryFields total_amount_paid_by_dd = 27;
  // Ground truth audit data
  GroundTruthAuditData ground_truth_audit_data = 28;
  // Customer name (first name and last initial)
  string customer_name = 29;
}

// Weight information of an item
message OrderItemDetails {
  // Global unique id of the order item
  int64 order_item_id = 1;
  // Id of the item
  int64 item_id = 2;
  // Name of the item
  string item_name = 3;
  // Merchant supplied id of the item
  google.protobuf.StringValue merchant_supplied_id = 4;
  // Quantity of the item
  int32 quantity = 5;
  // Average weight of the item
  google.protobuf.FloatValue average_weight_grams = 6;
  // Average weight of options
  google.protobuf.FloatValue children_weight_grams = 7;
  // Sum of item and children average weight
  google.protobuf.FloatValue total_weight_grams = 8;
  // Array of options details if they exist
  repeated OrderOptionDetails order_option_details = 9;
  // Standard deviation of item weight based on the saved weights
  google.protobuf.FloatValue std_weight_grams = 10;
  // Array of saved item weights
  repeated float saved_weights = 11;
  // Object level metadata if this item is an object
  ObjectInfo object_info = 12;
  // Is the item an object
  google.protobuf.BoolValue is_object = 13;
  // Array of model predicted weights
  repeated ModelPredictedWeight model_predicted_weights = 14;
}

// Weight information of an option
message OrderOptionDetails {
  // Id of the option
  int64 option_id = 1;
  // Name of the option
  string option_name = 2;
  // Supplied merchant id
  google.protobuf.StringValue merchant_supplied_id = 3;
  // Quantity of the option
  int64 quantity = 4;
  // Average weight of the option
  google.protobuf.FloatValue average_weight_grams = 5;
  // Average weight of the nested options
  google.protobuf.FloatValue children_weight_grams = 6;
  // Sum of option and nested options average weights
  google.protobuf.FloatValue total_weight_grams = 7;
  // Array of nested options details if they exist
  repeated OrderOptionDetails order_option_details = 8;
  // Standard deviation of option weight based on the save weights;
  google.protobuf.FloatValue std_weight_grams = 9;
  // Array of saved option weights
  repeated float saved_weights = 10;
  // Object level metadata if this option is an object
  ObjectInfo object_info = 11;
  // Is the item an object
  google.protobuf.BoolValue is_object = 12;
  // Array of model predicted weights
  repeated ModelPredictedWeight model_predicted_weights = 14;
}

// Entity representing establishment levels.
message Entity {
  // Type of establishment entities
  enum EntityType {
    // Unknown type
    ENTITY_TYPE_UNSPECIFIED = 0;
    // Business entity
    ENTITY_TYPE_BUSINESS = 1;
    // Store entity
    ENTITY_TYPE_STORE = 2;
  }
  // Type of the entity
  EntityType type = 1;
  // ID of the entity
  int64 entity_id = 2;
}

// Get store orders request
message GetStoreOrdersRequest {
  // Unique ID (int64) of the store for which orders are being requested
  int64 store_id = 1;
  // Start time of orders time period
  google.protobuf.Timestamp start_time = 2;
  // End time of orders time period
  google.protobuf.Timestamp end_time = 3;
  // The number of orders to be returned
  google.protobuf.Int32Value count = 4;
  // The offset of the first order to be returned
  google.protobuf.Int32Value offset = 5;
  // Boolean to specify if only single item orders should be returned
  google.protobuf.BoolValue include_single_item_orders_only = 6;
}

// Get store orders response
message GetStoreOrdersResponse {
  reserved 1;
  reserved 2;
  reserved 3;
  reserved 4;
  reserved 5;
  reserved 6;
  reserved 7;
  // The details of orders.
  repeated OrderDetail orders = 8;
  // reserved index for store_current_mode
  reserved 9;
  // reserved name for store_current_mode
  reserved "store_current_mode";
  // reserved index for store_current_mode_option
  reserved 10;
  // reserved name for store_current_mode_option
  reserved "store_current_mode_option";
}

// The details of an order
message OrderDetail {
  // Unique ID (int64) of the delivery
  int64 delivery_id = 1;
  // UUID of the delivery
  string delivery_uuid = 2;
  // Order placement time
  google.protobuf.Timestamp order_created_at = 3;
  // Result of delivery weight check
  WeightCheckResult weight_check_result = 4;
  // Measured weights of the delivery in grams (can be multiple if there were reweighs)
  repeated MeasuredWeight measured_weights = 5;
  // Prediction used
  Prediction used_prediction = 6;
  // Is the order flagged as underweight before
  bool flagged_under = 7;
  // Is the order flagged as overweight before
  bool flagged_over = 8;
  // Is the order fixed after it is flagged
  bool flagged_and_fixed = 9;
  // Is the delivery ASAP
  google.protobuf.BoolValue is_asap = 10;
  // Fulfillment type
  google.protobuf.StringValue fulfillment_type = 11;
  // Store's mode at the time of order
  StoreMode store_mode = 12;
  // Selected option of mode at the time of order. It is UNSPECIFIED when NORMAL mode
  StoreModeOption store_mode_option = 13;
  // Does the order have a prediction generated
  bool has_prediction = 14;
  // Was M&I reported
  bool has_mni_claim = 15;
  // Was M&I reported and blocked by fraud check
  bool has_mni_claim_blocked_by_fraud_check = 16;
  // Customer name (first name and last initial)
  string customer_name = 17;
  // Has in-store ground truth audit data
  bool has_ground_truth_audit_data = 18;
  // The provider type of the order. eg: DOORDASH, DRIVE
  ProviderType provider_type = 19;
}

// Smart scale order feedback
message Feedback {
  // UUID of the feedback generated on client side
  string id = 1;
  // Feedback key
  string feedback_key = 2;
  // Feedback in human readable format
  string feedback = 3;
  // Feedback type
  string feedback_type = 4;
  // Type of element that feedback was
  string feedback_element_type = 5;
  // Timestamp when feedback was recorded at
  google.protobuf.Timestamp recorded_at = 6;
}

// Get store orders statistics request
message GetStoreOrdersStatsRequest {
  // Unique ID (int64) of the store for which orders are being requested
  int64 store_id = 1;
  // Start time of orders time period
  google.protobuf.Timestamp start_time = 2;
  // End time of orders time period
  google.protobuf.Timestamp end_time = 3;
  // Boolean to specify if only single item orders should be returned
  google.protobuf.BoolValue include_single_item_orders_only = 6;
}

// Get store orders statistics response
message GetStoreOrdersStatsResponse {
  // Unique ID (int64) of the store
  int64 store_id = 1;
  // Store name
  string store_name = 2;
  // Unique ID (int64) of the business
  int64 business_id = 3;
  // Business name
  string business_name = 4;
  // Total number of orders
  int32 total_orders = 5;
  // Total number of weighed orders
  int32 orders_weighed = 6;
  // Total number of orders with prediction
  int32 orders_with_prediction = 7;
  // Total number of orders flagged as underweight
  int32 orders_flagged_under = 8;
  // Total number of orders got weight fixed after they are flagged as underweight
  int32 orders_flagged_under_and_fixed = 9;
  // Total number of orders flagged as overweight
  int32 orders_flagged_over = 10;
  // Total number of orders got weight fixed after they are flagged as overweight
  int32 orders_flagged_over_and_fixed = 11;
  // Total number of orders flagged as underweight or overweight
  int32 orders_flagged = 12;
  // Total number of orders got weight fixed after they are flagged as underweight or overweight
  int32 orders_flagged_and_fixed = 13;
  // Store's current mode
  StoreMode current_store_mode = 14;
  // Selected option of current mode. It is UNSPECIFIED when NORMAL mode
  StoreModeOption current_store_mode_option = 15;
  // Total number of orders with M&I claims (includes orders with claims
  // that were blocked by fraud check)
  int32 orders_with_mni_claims = 16;
  // Frequently missing items with order count
  repeated FrequentlyMissingItem frequently_missing_items = 17;
  // Utilization details per hour of the day
  repeated HourlyUtilizationDetails hourly_utilization_details = 18;
  // Total number of marketplace orders
  int32 total_marketplace_orders = 19;
}

// Hourly utilization details
message HourlyUtilizationDetails {
  // Hour of the day in local store time (eg, for utilization between 1-2pm, this will be "13:00:00")
  string hour_of_day = 1;
  // Local start time of the day part
  string local_start_time_of_daypart = 2;
  // Local end time of the day part
  string local_end_time_of_daypart = 3;
  // Number of orders
  int32 num_orders = 4;
  // Number of orders weighed
  int32 num_orders_weighed = 5;
}

// Frequently missing item based on order resolution table
message FrequentlyMissingItem {
  // Name of the item
  string item_name = 1;
  // Number of orders the item was missing
  int32 num_orders_with_item_missing = 2;
}

// Get store menu weight coverage request
message GetStoreMenuWeightCoverageRequest {
  // Unique ID (int64) of the store
  int64 store_id = 1;
}

// Get store menu weight coverage response
message GetStoreMenuWeightCoverageResponse {
  // Weight coverage detail of an menu
  repeated MenuWeightCoverageDetail menu_weight_coverage = 1;
}

// Item/option weight coverage detail of a menu
message MenuWeightCoverageDetail {
  // Unique ID (int64) of the menu
  int64 menu_id = 1;
  // Menu name
  string menu_name = 2;
  // Number of items with weights
  int32 num_items_with_weights = 3;
  // Total number of items
  int32 num_items = 4;
  // Number of options with weights
  int32 num_options_with_weights = 5;
  // Total number of options
  int32 num_options = 6;
  // Items with high std deviation > x% average weight, default is 20% and controlled by run time
  // data/hub-service/smart_scale_default.high_standard_deviation_threshold_for_item
  repeated EntityWeightInfo high_std_dev_items = 7;
  // Options with high std deviation > x% average weight, default is 20% and controlled by run time
  // data/hub-service/smart_scale_default.high_standard_deviation_threshold_for_option
  repeated EntityWeightInfo high_std_dev_options = 8;
  // Items with less than x number of weight records, default is 1 and controlled by run time
  // data/hub-service/smart_scale_default.less_weight_records_threshold_for_item
  repeated EntityWeightInfo items_with_less_weight_records = 9;
  // Options with less than x number of weight records, default is 1 and controlled by run time
  // data/hub-service/smart_scale_default.less_weight_records_threshold_for_option
  repeated EntityWeightInfo options_with_less_weight_records = 10;
}

// The weight information of an item/option
message EntityWeightInfo {
  // Type of object
  enum EntityType {
    // Unknown type
    ENTITY_TYPE_UNSPECIFIED = 0;
    // Item type
    ENTITY_TYPE_ITEM = 1;
    // Option type
    ENTITY_TYPE_OPTION = 2;
  }
  // Entity type
  EntityType entity_type = 1;
  // Id of item or option
  string entity_id = 2;
  // Name of item or option
  string entity_name = 3;
  // Merchant supplied id of item or option
  google.protobuf.StringValue entity_merchant_supplied_id = 4;
  // Standard deviation of weights
  google.protobuf.FloatValue std_deviation_grams = 5;
  // Average weight of the entity
  google.protobuf.FloatValue average_weight_grams = 6;
  // The recorded weights of the entity
  repeated float weights = 7;
}

// Request to recording non-doordash delivery weight
message RecordNonDoorDashDeliveryWeightRequest {
  // Smart scale device data
  SmartScaleDeviceData device_data = 1;
  // ID of the non-doordash delivery
  string non_doordash_delivery_uuid = 2;
  // Weight on scale in grams
  float measured_weight = 3;
  // Unique ID (int64) of the authenticated store who is calling the endpoint
  int64 store_id = 4;
  // order type
  string order_type = 5;
  // url of the receipt image
  google.protobuf.StringValue receipt_image_url = 6;
}

// Response to recording delivery weight
message RecordNonDoorDashDeliveryWeightResponse {}

// Request to upload smart scale photo.
message UploadSmartScalePhotoRequest {
  // Doordash or non-doordash delivery uuid
  string delivery_uuid = 1;
  // Type of photo takes
  // - NON_DOORDASH_RECEIPT
  string photo_type = 2;
  // The payload for the photo
  bytes photo = 3;
}

// Response to uploading smart scale photo.
message UploadSmartScalePhotoResponse {
  // URL on S3
  string photo_url = 1;
}

// Request to get the object/non-object tags of merchant products
message GetMerchantProductTagsRequest {
  // Unique ID (int64) of the store
  int64 store_id = 1;
}

// Response of get merchant product tags
message GetMerchantProductTagsResponse {
  // S3 url of the hierarchical menu
  google.protobuf.StringValue menu_s3_url = 1;
  // Merchant products with object tags
  repeated MerchantProductTag object_products = 2;
  // Merchant products with non-object tags
  repeated MerchantProductTag non_object_products = 3;
  // Inferred merchant products with object tags
  repeated MerchantProductTag inferred_object_products = 4;
  // Inferred merchant products with non-object tags
  repeated MerchantProductTag inferred_non_object_products = 5;
}

// Merchant product id
message MerchantProductId {
  // Merchant Product type
  enum ProductIdType {
    // Unknown type
    PRODUCT_ID_TYPE_UNSPECIFIED = 0;
    // Item
    PRODUCT_ID_TYPE_ITEM = 1;
    // Option
    PRODUCT_ID_TYPE_OPTION = 2;
    // Merchant supplied id
    PRODUCT_ID_TYPE_MERCHANT_SUPPLIED_ID = 3;
  }
  // Type of the merchant product id
  ProductIdType type = 1;
  // Merchant product id
  string id = 2;
}

// Object/non-object tag of a merchant product
message MerchantProductTag {
  // Merchant product id
  MerchantProductId merchant_product_id = 1;
  // Display name of the item or option, it is not null when it is with object tag
  google.protobuf.StringValue display_name = 2;
  // Is the merchant product an object
  bool is_object = 3;
}

// Update merchant product tags request
message UpdateMerchantProductTagsRequest {
  // Unique ID (int64) of the store
  int64 store_id = 1;
  // List of merchant product tags
  repeated MerchantProductTag merchant_product_tags = 2;
  // If set to true, skip overwriting existing tags, only add new tags
  bool skip_tag_overwrite = 3;
}

// Update merchant product tags response
message UpdateMerchantProductTagsResponse {}

// Request for getting smart scale settings for a given store or business
message GetSmartScaleSettingsRequest {
  // Entity level for which settings is requested
  Entity entity = 1;
}

// Response for smart scale settings for a given store or business
message GetSmartScaleSettingsResponse {
  // Unique ID (int64) of the store (if queried at store level)
  google.protobuf.Int64Value store_id = 1;
  // Name of the store (if queried at store level)
  google.protobuf.StringValue store_name = 2;
  // Unique ID (int64) of the business
  int64 business_id = 3;
  // Name of the business
  string business_name = 4;
  // Settings for this store
  repeated SmartScaleSetting store_settings = 5;
  // Settings for this business
  repeated SmartScaleSetting business_settings = 6;
  // Default settings
  repeated SmartScaleSetting default_settings = 7;
  // Setting hierarchy for displaying on screen
  repeated SettingHierarchy setting_hierarchies = 8;
}

// A single smart scale setting
message SmartScaleSetting {
  // Setting key that uniquely identifies this setting
  string setting_key = 1;
  // Setting value
  oneof setting_value {
    // Integer value of the setting
    google.protobuf.Int64Value int_value = 2;
    // String value of the setting
    google.protobuf.StringValue string_value = 3;
    // Boolean value of the setting
    google.protobuf.BoolValue boolean_value = 4;
    // Float value of the setting
    google.protobuf.FloatValue float_value = 5;
    // Setting value when it is dayparts
    MerchantDayparts daypart_value = 6;
    // Setting value when it is bag types
    MerchantBagTypes bag_type_value = 13;
    // Setting value when it is additional item
    MerchantAdditionalItems additional_item_value = 14;
  }
  // Settings title to be displayed in internal dashboard
  string title = 7;
  // Settings descrption to be displayed in internal dashboard
  string description = 8;
  // Optional prefix
  google.protobuf.StringValue prefix = 9;
  // Optional suffix, such as '%' or 'g'
  google.protobuf.StringValue suffix = 10;
  // List of elect options for multiselect settings
  repeated SettingSelectOption select_options = 11;
  // Optional validation regex for strings
  google.protobuf.StringValue string_validation_regex = 12;
}

// Select option for multiselect settings
message SettingSelectOption {
  // Name to be displayed on the client for this option
  string display_name = 1;
  // Value to be used for this option if selected
  string value = 2;
}

// Daypart definitions for a merchant
message MerchantDayparts {
  // List of dayparts
  repeated Daypart dayparts = 1;

  // Day part definition for a single daypart
  message Daypart {
    // Start time of daypart (in a 24 hour format, eg, 14:30:00)
    string start_time = 1;
    // End time of daypart (in a 24 hour format, eg, 17:30:00)
    string end_time = 2;
    // Optional label to use for daypart (Daypart 3: 2:30 pm - 5:30 pm)
    google.protobuf.StringValue label = 3;
  }
}

// Bag types of a merchant
message MerchantBagTypes {
  // List of bag types
  repeated BagType bag_types = 1;
  // Definition of a single bag type
  message BagType {
    // Name of bag type
    string name = 1;
    // Weight of each bag
    int32 weight_per_bag = 2;
  }
}

// Additional items of a merchant
message MerchantAdditionalItems {
  // List of additional items
  repeated AdditionalItem additional_items = 1;
  // Definition of a single additional item
  message AdditionalItem {
    // Name of the item
    string name = 1;
    // Weight of each item
    int32 weight_per_item = 2;
  }
}

// Setting hierarchy to display on screen
message SettingHierarchy {
  // Optional title for this group of settings
  google.protobuf.StringValue title = 1;
  // Setting key that enables/disables children settings
  google.protobuf.StringValue setting_key = 2;
  // Setting value which would enable children settings
  oneof setting_enable_value {
    // Integer value of the setting
    google.protobuf.Int64Value int_value = 3;
    // String value of the setting
    google.protobuf.StringValue string_value = 4;
    // Boolean value of the setting
    google.protobuf.BoolValue boolean_value = 5;
    // Float value of the setting
    google.protobuf.FloatValue float_value = 6;
  }
  // Children settings under this setting hierarchy
  repeated SettingHierarchy children_setting_hierarchies = 7;
}

// Request for updating smart scale settings for a given store or business
message UpdateSmartScaleSettingsRequest {
  // Entity level for which settings is being updated
  Entity entity = 1;
  // User id of user who's updating settings
  int64 updated_by_user_id = 2;
  // Settings to be updated for this entity
  repeated SmartScaleSetting settings = 5;
}

// Response for updating smart scale settings for a given store or business
message UpdateSmartScaleSettingsResponse {}

// Request for fetching smart scale UI settings for a given store
message GetSmartScaleUiSettingsRequest {
  // Store id for which UI settings are being fetched
  int64 store_id = 1;
}

// Response for fetching smart scale UI settings for a given store
message GetSmartScaleUiSettingsResponse {
  // stringified JSON object for smartscale ui settings
  string ui_settings_json = 1;
  // stringified tokens
  repeated ThirdPartyToken third_party_token = 2;
}

// Object detail of an item
message ThirdPartyToken {
  // Third party provider
  ThirdParty third_party = 1;
  // Token
  string token = 2;
  // Unique ID of the device where token was scraped by
  string scraped_by_device_id = 3;
  // ID of the third party store id
  string third_party_store_id = 4;
}

// Request to get the object detail of an order
message GetOrderObjectDetailRequest {
  // Unique ID (int64) of a delivery
  int64 delivery_id = 1;
  // Order id. DEPRECATED: Use order_identifier instead
  OrderId order_id = 2 [deprecated = true];
  // Order identifier
  OrderIdentifier order_identifier = 3;
  // If bag objects should be excluded
  google.protobuf.BoolValue exclude_bags = 4;
}

// Response for getting object detail of an order
message GetOrderObjectDetailResponse {
  // Unique ID (int64) of the delivery
  int64 delivery_id = 1;
  // Unique ID of the delivery
  string delivery_uuid = 2;
  // Unique ID (int64) of the store
  int64 store_id = 3;
  // Unique ID (int64) of the business
  int64 business_id = 4;
  // Object detail of items
  repeated ItemObjectDetail item_object_details = 5;
  // count of items in the order
  int32 item_count = 6;
  // weight of the lightest item in the order
  google.protobuf.FloatValue lightest_item_grams = 7;
}

// Request to get the object detail of a cart
message GetCartObjectDetailRequest {
  // Unique ID (int64) of the store
  int64 store_id = 1;
  // Unique ID (int64) of the business
  int64 business_id = 2;
  // Cassandra cart uuid of the cart. It's same as carnival cart id.
  string cart_uuid = 3;
  // Items in the cart
  repeated CartItem cart_items = 4;
  // If bag objects should be excluded
  google.protobuf.BoolValue exclude_bags = 5;
}

// Response for getting object detail of a cart
message GetCartObjectDetailResponse {
  // Unique ID (int64) of the store
  int64 store_id = 1;
  // Unique ID (int64) of the business
  int64 business_id = 2;
  // Object detail of items
  repeated ItemObjectDetail item_object_details = 3;
  // count of items in the order
  int32 item_count = 4;
  // weight of the lightest item in the order
  google.protobuf.FloatValue lightest_item_grams = 5;
}

// Object detail of an item
message ItemObjectDetail {
  // Merchant product id of the item
  MerchantProductId merchant_product_id = 1;
  // Title of the item. It is not null when the item is non-object
  google.protobuf.StringValue title = 2;
  // The total weight of a single item, it is not null when the item is non-object and item's weight exist
  google.protobuf.FloatValue total_weight = 3;
  // Quantity of item, it is not null when the item is non-object
  google.protobuf.Int32Value quantity = 4;
  // Real objects contained in this item
  repeated ObjectDetail objects = 5;
  // Global unique item_id within an order
  int64 order_item_id = 6;
  // ID of merchant supplied id (aka external id)
  google.protobuf.StringValue merchant_supplied_id = 7;
}

// Option info
message ObjectOption {
  // Id of the option
  MerchantProductId id = 1;
  // Quantity of this option
  int32 quantity = 2;
  // Name of the option
  string name = 3;
  // Nested options details, if exists
  repeated ObjectOption nested_options = 4;
  // ID of merchant supplied id (aka external id)
  google.protobuf.StringValue merchant_supplied_id = 5;
}

// Object detail
message ObjectDetail {
  // Merchant product id of the object
  MerchantProductId merchant_product_id = 1;
  // Object name
  string name = 2;
  // Quantity of this object
  int32 quantity = 3;
  // The total weight of object times object quantity in the single item, it is not null when the object's weight exists
  google.protobuf.FloatValue total_weight = 4;
  // First level options' names under this object
  repeated string options = 5;
  // Nested options
  repeated ObjectOption nested_options = 6;
  // ID of merchant supplied id (aka external id)
  google.protobuf.StringValue merchant_supplied_id = 7;
  // hash of object name and options
  google.protobuf.StringValue object_detail_hash = 8;
  // The total weight of objects in the single item
  google.protobuf.FloatValue total_object_weight = 9;
  // The total weight of item with options in the single item
  google.protobuf.FloatValue total_item_option_weight = 10;
  // Object should not be weighed on the scale
  bool object_should_be_weighed = 11;
}

// Request to get the total object counts of orders
message GetOrdersObjectCountsRequest {
  // Unique ID (int64) of store
  int64 store_id = 1;
  // Unique IDs (int64) of deliveries
  repeated int64 delivery_ids = 2;
  // Order ids. DEPRECATED: Use order_identifier instead
  repeated OrderId order_ids = 3 [deprecated = true];
  // Order identifiers
  repeated OrderIdentifier order_identifiers = 4;
}

// Response of the total object counts of orders
message GetOrdersObjectCountsResponse {
  // Unique ID (int64) of store
  int64 store_id = 1;
  // Unique ID (int64) of business
  int64 business_id = 2;
  // Total object counts of orders
  repeated OrderObjectCounts orders_object_counts = 3;
  // Object counts of an order
  message OrderObjectCounts {
    // Unique ID (int64) of a delivery
    int64 delivery_id = 1;
    // Unique ID of a delivery
    string delivery_uuid = 2;
    // Total number of objects in the order, it is not null when all the items/options of the order have object/non-object tags.
    google.protobuf.Int32Value object_counts = 3;
  }
}

// Request to fetch contextual weights at entity level
message GetContextualWeightsRequest {
  // Entity to query contextual weights for.
  Entity entity = 1;
}

// Response for contextual weights for a given entity.
message GetContextualWeightsResponse {
  // Contextual weights stored at given entity.
  repeated ContextualWeight contextual_weights = 1;
}

// Request to record contextual weights
message RecordContextualWeightRequest {
  // Entity level for which weights are being recorded at
  Entity entity = 1;
  // User id of user recording the weight
  int64 updated_by_user_id = 2;
  // Contextual weight to be recorded
  ContextualWeight contextual_weight = 3;
}

// Reponse for successful recording of contextual weight
message RecordContextualWeightResponse {}

// Contextual weight information
message ContextualWeight {
  // ID of the primary merchant product for the weight
  string primary_id = 1;
  // Contextual merchant product id in the order
  string secondary_id = 2;
  // Hierarchical distance between primary and secondary id
  int32 distance = 3;
  // List of weights for the primary id with secondary id in context
  repeated float weights = 4;
  // Merchant Product type of primary id.
  MerchantProductId.ProductIdType primary_id_type = 5;
  // Merchant Product type of secondary id.
  MerchantProductId.ProductIdType secondary_id_type = 6;
}

// Get store state request
message GetStoreModeRequest {
  // Unique ID (int64) of the store
  int64 store_id = 1;
}

// Store's operation mode
enum StoreMode {
  // Unspecified (default)
  STORE_MODE_UNSPECIFIED = 0;
  // Normal mode
  STORE_MODE_NORMAL = 1;
  // Manual override mode
  STORE_MODE_MANUAL_OVERRIDE = 2;
  // Onboarding mode
  STORE_MODE_ONBOARDING = 3;
  // Self healing mode
  STORE_MODE_SELF_HEALING = 4;
  // Normal Override mode - Once in this mode, the store can only be manually changed
  STORE_MODE_NORMAL_OVERRIDE = 5;
}

// Selected option of the mode
enum StoreModeOption {
  // Unspecified (default)
  STORE_MODE_OPTION_UNSPECIFIED = 0;
  // High-threshold option
  STORE_MODE_OPTION_HIGH_THRESHOLD = 1;
  // Silent option
  STORE_MODE_OPTION_SILENT = 2;
}

// Metric unit
enum MetricUnit {
  // Unspecified (default)
  METRIC_UNIT_UNSPECIFIED = 0;
  // Percent
  METRIC_UNIT_PERCENT = 1;
  // Millisecond
  METRIC_UNIT_MILLISECOND = 2;
  // Count
  METRIC_UNIT_COUNT = 3;
}

// Get store state response
message GetStoreModeResponse {
  // Unique ID (int64) of the store
  int64 store_id = 1;
  // Store's current mode
  StoreMode mode = 2;
  // Selected option of current mode. It is UNSPECIFIED when NORMAL mode
  StoreModeOption option = 3;
  // Current states of exit criteria. It is empty when NORMAL or MANUAL_OVERRIDE mode.
  repeated ExitCriterionState exit_criteria_states = 4;
  // Current state of an exit criterion
  message ExitCriterionState {
    // Criterion id used for i18n in tablet
    string criterion_id = 1;
    // Criterion name
    string criterion_name = 2;
    // The goal to pass the exit criterion. Use double for both double and int
    double goal = 3;
    // The current value of the criterion. Use double for both double and int
    double current_value = 4;
    // If the criterion is passed
    bool criterion_passed = 5;
    // The unit of the criterion
    MetricUnit criterion_unit = 6;
  }
}

// Request to process menu weight csv.
message ProcessMenuWeightCsvRequest {
  // S3 path of menu weight CSV file
  string s3_menu_weight_csv_path = 1;
  // User id of user recording merchant product weights
  int64 updated_by = 2;
}

// Response to process menu weight csv.
message ProcessMenuWeightCsvResponse {
  // S3 file url to invalid rows that skipped processing. Null if no invalid rows.
  google.protobuf.StringValue s3_invalid_rows_url = 1;
}

// Request to generate presigned S3 put url
message GetPresignedS3PutUrlRequest {
  // S3 bucket to put the object (file)
  string bucket = 1;
  // Object key - filepath relative to the bucket
  string key = 2;
  // Optionally specify HTTP Content-Type header indicating the type of content stored in the associated S3 object
  google.protobuf.StringValue content_type = 3;
}

// Response with generated presigned S3 put url
message GetPresignedS3PutUrlResponse {
  // Presigned S3 put url
  string url = 1;
}

// Request to generate presigned S3 get url
message GetPresignedS3GetUrlRequest {
  // S3 bucket to put the object (file)
  string bucket = 1;
  // Object key - filepath relative to the bucket
  string key = 2;
}

// Response with generated presigned S3 get url
message GetPresignedS3GetUrlResponse {
  // Presigned S3 get url
  string url = 1;
}

// Request to submit s3 file for async processing job
message SubmitBulkUploadJobForProcessingRequest {
  // S3 path of menu weight TSV file, located at s3://doordash-smart-scale/bulk_menu_upload/<s3_menu_weight_tsv_path>
  string s3_menu_weight_tsv_path = 1;
  // User id of user recording merchant product weights
  int64 updated_by = 2;
  // Status of the job
  oneof job_status {
    // Approved status
    bool is_approved = 3 [deprecated = true];
    // Draft status
    bool is_draft = 4 [deprecated = true];
    // Rejected status
    bool is_rejected = 5 [deprecated = true];
  }
  // Notes provided by end user for additional context on the TSV upload file
  google.protobuf.StringValue note = 6;
  // Status of the job: Approved status
  google.protobuf.BoolValue job_status_is_approved = 7;
  // Status of the job: Draft status
  google.protobuf.BoolValue job_status_is_draft = 8;
  // Status of the job: Rejected status
  google.protobuf.BoolValue job_status_is_rejected = 9;
}

// Response for successful s3 file async processing job
message SubmitBulkUploadJobForProcessingResponse {}

// Request for fetching bulk upload jobs
message GetBulkUploadJobsRequest {}

// Response for getting bulk upload jobs
message GetBulkUploadJobsResponse {
  // Bulk Upload Jobs that meet request's requirements.
  repeated BulkUploadJob bulk_upload_jobs = 1;
}

// Updated request for fetching bulk upload jobs with pagination/search support
message SearchBulkUploadJobsRequest {
  // Maximum number of bulk jobs to return
  int32 count = 1;
  // Offset (in page number) for getting next page of results
  int32 offset = 2;
  // String for searching across columns
  google.protobuf.StringValue search_term = 3;
  // Filter criteria
  message Filters {
    // List of store IDs to retrieve bulk jobs for
    repeated int64 store_ids = 1;
    // User IDs to filter results by
    repeated int64 submitted_by_user_ids = 2;
    // Timestamp to filter jobs created after
    google.protobuf.Timestamp created_after = 3;
    // Timestamp to filter jobs created before
    google.protobuf.Timestamp created_before = 4;
    // Filter by job status
    repeated BulkUploadJob.Status status = 5;
  }
  // Optional information to filter results by
  Filters filters = 4;
  // Available options to sort results by
  message SortOptions {
    // Column to sort results by
    enum SortField {
      // Unspecified sort value, defaults to created at
      SORT_FIELD_UNSPECIFIED = 0;
      // Sort by store ID column
      SORT_FIELD_STORE_ID = 1;
      // Sort by store name column
      SORT_FIELD_STORE_NAME = 2;
      // Sort by notes column
      SORT_FIELD_NOTES = 3;
      // Sort by submitted by column
      SORT_FIELD_SUBMITTED_BY = 4;
      // Sort by created at column
      SORT_FIELD_CREATED_AT = 5;
      // Sort by status column
      SORT_FIELD_STATUS = 6;
    }
    // Direction of the sort
    enum SortDirection {
      // Unspecified sort direction, defaults to descending
      SORT_DIRECTION_UNSPECIFIED = 0;
      // Sort results in ascending order
      SORT_DIRECTION_ASC = 1;
      // Sort results in descending order
      SORT_DIRECTION_DESC = 2;
    }
    // Field to sort by
    SortField field = 1;
    // Direction to sort
    SortDirection direction = 2;
  }
  // Optional sorting information
  SortOptions sort = 5;
}

// Updated response for getting bulk upload jobs with pagination/search support
message SearchBulkUploadJobsResponse {
  // Bulk Upload Jobs that meet request's requirements.
  repeated BulkUploadJob bulk_upload_jobs = 1;
  // Total number of records that match the search criteria
  int64 total_bulk_upload_jobs = 2;
  // List of users with name and ID that have submitted jobs
  repeated User submitted_by_users = 3;
}

// Contains information about TSV bulk upload job
message BulkUploadJob {
  // Enum indicating status of the Job
  enum Status {
    // Unspecified status. Unused
    STATUS_UNSPECIFIED = 0;
    // Processing status
    STATUS_PROCESSING = 1;
    // Draft processed status
    STATUS_DRAFT_PROCESSED = 2;
    // Approved status
    STATUS_APPROVED = 3;
    // Uploaded status
    STATUS_UPLOADED = 4;
    // Failed status
    STATUS_FAILED = 5;
    // Rejected status
    STATUS_REJECTED = 6;
  }
  // Original uploaded S3 file name located at s3://doordash-smart-scale/bulk_menu_upload/<uploaded_s3_file>
  string uploaded_s3_file = 1;
  // Status of the upload job
  Status status = 2;
  // User id of user who uploaded the TSV file
  int64 uploaded_by = 3;
  // User id of user who approved the job, if approved.
  google.protobuf.Int64Value approved_by = 4;
  // Name of the S3 file containing invalid rows that failed validation if any,
  // located at s3://doordash-smart-scale/bulk_menu_upload/<invalid_rows_s3_file_path>
  google.protobuf.StringValue invalid_rows_s3_file_path = 5;
  // Timestamp of bulk upload job submission request creation
  google.protobuf.Timestamp submission_created_at = 6;
  // If status = STATUS_FAILED, this field will be populated with failure reason
  google.protobuf.StringValue failure_reason = 7;
  // Optional notes about the upload provided at initial upload time
  google.protobuf.StringValue notes = 8;
  // Type of bulk upload job
  BulkUploadJobType bulk_upload_job_type = 9;
  // Store ID of the bulk upload job (for menu copy it is the target store)
  google.protobuf.Int64Value store_id = 10;
  // Store name of the bulk upload job
  google.protobuf.StringValue store_name = 11;
}

// Type of bulk upload job
enum BulkUploadJobType {
  // Unspecified type
  BULK_UPLOAD_JOB_TYPE_UNSPECIFIED = 0;
  // Uploaded by a user
  BULK_UPLOAD_JOB_TYPE_USER_UPLOAD = 1;
  // Uploaded by copy menu weights tool
  BULK_UPLOAD_JOB_TYPE_COPY_MENU_WEIGHTS = 2;
}

// Get stores list along with problem stores request
message GetStoresListRequest {
  // Start of time period to fetch stores list with problem stores (UTC)
  google.protobuf.Timestamp start_time = 1;
  // End of time period to fetch stores list with problem stores (UTC)
  google.protobuf.Timestamp end_time = 2;
}

// Get stores list along with problem stores response
message GetStoresListResponse {
  // All stores list
  repeated SmartScaleStore stores = 1;
  // Problem stores list
  repeated SmartScaleStore problem_stores = 2;
}

// Store status of a smart scale store in a given time period
message SmartScaleStore {
  // Unique ID (int64) of the store
  int64 store_id = 1;
  // Store name
  string store_name = 2;
  // Unique ID (int64) of the business
  int64 business_id = 3;
  // Business name
  string business_name = 4;
  // Business logo
  google.protobuf.StringValue business_img_url = 5;
  // Store contact phone number
  google.protobuf.StringValue store_phone_number = 6;
  // Is the store having a problem
  bool is_problem_store = 7;
  // Is high priority store/business
  bool is_high_priority_merchant = 8;
  // Store's current mode
  StoreMode store_mode = 9;
  // Store's current store mode option
  StoreModeOption store_mode_option = 10;
  // Utilization in %
  float utilization = 11;
  // Total view flag rate in %
  float view_flag_rate_total = 12;
  // Underweight view flag rate in %
  float view_flag_rate_under = 13;
  // Overweight view flag rate in %
  float view_flag_rate_over = 14;
  // Prediction flag rate in %
  float prediction_flag_rate = 15;
  // Number of orders flagged
  int64 num_orders_flagged = 16;
  // Number of orders fixed
  int64 num_orders_fixed = 17;
  // Number of orders weighed
  int64 num_orders_weighed = 18;
  // Total number of orders
  int64 num_total_orders = 19;
  // Prediction rate in %
  float prediction_rate = 20;
  // Store is problem if utilization is less than this threshold
  float utilization_threshold = 21;
  // Store is problem if view_flag_rate_total is larger than this threshold
  float view_flag_rate_total_threshold = 22;
  // Store is problem if flagged_and_fixed rate is less than this threshold
  float flagged_and_fixed_rate_threshold = 23;
  // Store is problem if prediction_rate is less than this threshold
  float prediction_rate_threshold = 24;
}

// Generate menu for a store
message GenerateMenuRequest {
  // Unique ID (int64) of the store
  int64 store_id = 1;
}

// Generate menu response
message GenerateMenuResponse {}

// Get lightweight response for all smart scale enabled stores request
message GetStoresLightRequest {
  // Unique ID (int64) of the business
  google.protobuf.Int64Value business_id = 1;
}

// Get lightweight response for all smart scale enabled stores response
message GetStoresLightResponse {
  // All stores list
  repeated SmartScaleStoreLight stores = 1;
}

// Lightweight store details
message SmartScaleStoreLight {
  // Unique ID (int64) of the store
  int64 store_id = 1;
  // Store name
  string store_name = 2;
  // Unique ID (int64) of the business
  int64 business_id = 3;
  // Business name
  string business_name = 4;
  // Business logo
  google.protobuf.StringValue business_img_url = 5;
  // Is high priority store/business
  bool is_high_priority_merchant = 6;
  // Store's current mode
  StoreMode store_mode = 7;
}

// Request to get the last snapshot of weighed orders
message GetWeighedOrdersLastSnapshotRequest {
  // Unique IDs (int64) of the deliveries
  repeated int64 delivery_ids = 1;
}

// Last snapshot of weighed orders
message GetWeighedOrdersLastSnapshotResponse {
  // Last snapshot of weighed orders
  repeated WeighedOrderLastSnapshot weighed_orders_last_snapshot = 1;
}

// Last snapshot of a weighed order
message WeighedOrderLastSnapshot {
  // Unique ID (int64) of the delivery
  int64 delivery_id = 1;
  // Order measured weight
  double measured_weight_grams = 2;
  // Weight check result
  WeightCheckResult weight_check_result = 3;
  // Expected weight of the order
  google.protobuf.DoubleValue expected_weight_grams = 4;
  // Suggested order screen of order measurement
  SuggestedOrderScreen suggested_order_screen = 5;
  // The store mode when order weighing
  StoreMode store_mode = 6;
  // The store mode option when order weighing
  StoreModeOption store_mode_option = 7;
  // The time when order weighed
  google.protobuf.Timestamp recorded_time = 8;
}

// Provider type of orders
enum ProviderType {
  // Unspecified type
  PROVIDER_TYPE_UNSPECIFIED = 0;
  // DOORDASH order type
  PROVIDER_TYPE_DOORDASH = 1;
  // DRIVE order type
  PROVIDER_TYPE_DRIVE = 2;
}

// Request message for recording object weight
message RecordObjectWeightRequest {
  // Details of object that was weighed
  Object object = 1;
  // Unique ID (int64) of the delivery, if object was derived from a delivery
  google.protobuf.Int64Value delivery_id = 2;
  // Weight on scale in grams
  float measured_weight_grams = 3;
  // Store ID
  int64 store_id = 4;
  // source
  ObjectWeightSource source = 5;
  // User id of user who recorded the weight, if weight was manually entered
  google.protobuf.Int64Value user_id = 6;
  // Uuid of the delivery, if object was derived from a delivery
  google.protobuf.StringValue delivery_uuid = 7;
}

// Type of record request source
enum ObjectWeightSource {
  // Unknown type
  OBJECT_WEIGHT_SOURCE_UNSPECIFIED = 0;
  // Audti flow
  OBJECT_WEIGHT_SOURCE_SMART_SCALE_AUDIT_FLOW = 1;
  // Weigh an object during order
  OBJECT_WEIGHT_SOURCE_SMART_SCALE_WEIGH_DURING_ORDER = 2;
  // Internal Dashboard
  OBJECT_WEIGHT_SOURCE_INTERNAL_DASHBOARD = 3;
  // Automatically from single object orders
  OBJECT_WEIGHT_SOURCE_AUTOMATED_SINGLE_OBJECT_ORDER = 4;
  // Automatically from multi object regression
  OBJECT_WEIGHT_SOURCE_AUTOMATED_MULTI_OBJECT_ORDER = 5;
}

// Information about object in smartscale order
message ObjectInfo {
  // Ops overwritten display name if specified
  google.protobuf.StringValue display_name = 1;
  // Recorded weight of this object
  repeated RecordedObjectWeight recorded_weights = 2;
  // Weight inferred by LR model
  google.protobuf.FloatValue model_predicted_weight_grams = 3;
  // Should object not be weighed on the scale
  bool object_should_be_weighed = 4;
}

// Info about recorded object weight
message RecordedObjectWeight {
  // Status of object weight review
  enum WeightReviewStatus {
    // Unknown
    WEIGHT_REVIEW_STATUS_UNSPECIFIED = 0;
    // Approved
    WEIGHT_REVIEW_STATUS_APPROVED = 1;
    // Pending
    WEIGHT_REVIEW_STATUS_PENDING = 2;
    // Rejected
    WEIGHT_REVIEW_STATUS_REJECTED = 3;
  }
  // Weight of the object
  float weight_grams = 1;
  // Source of the weight
  ObjectWeightSource source = 2;
  // If weight was manually entered, user ID of user who recorded the weight
  google.protobuf.Int64Value updated_by = 3;
  // Timestamp that object weight was recorded
  google.protobuf.Timestamp created_at = 4;
  // Status of the weight review
  WeightReviewStatus review_status = 5;
}

// Object info
message Object {
  // Option info
  message Option {
    // Id of the option
    MerchantProductId id = 1;
    // Quantity of this option
    int32 quantity = 2;
    // Name of the option
    string name = 3;
    // Nested options details, if exists
    repeated Option options = 4;
  }
  // Id of the object
  MerchantProductId id = 1;
  // Name of the object
  string name = 2;
  // Options attached to the object if exists
  repeated Option options = 3;
}

// Response for recording object weight
message RecordObjectWeightResponse {}

// Request for copy menu weights
message CopyMenuWeightsRequest {
  // Store id to copy weights from
  int64 source_store_id = 1;
  // Store ids to copy weights to
  repeated int64 target_store_ids = 2;
  // User id of user who requested menu copy
  int64 requested_by = 3;
}

// Response for copy menu weights
message CopyMenuWeightsResponse {}

// Audit type
enum AuditAction {
  // Unspecified (default)
  AUDIT_ACTION_UNSPECIFIED = 0;
  // Object weight audit completed
  AUDIT_ACTION_OBJECT_WEIGHT_COMPLETED = 1;
  // Object weight audit skipped
  AUDIT_ACTION_OBJECT_WEIGHT_SKIPPED = 2;
}

// Request to skip the audit
message AuditFlowActionRequest {
  // int64 delivery_id. DEPRECATED: Use delivery_uuid instead
  reserved 1;
  reserved "delivery_id";
  // Audit type
  AuditAction audit_action = 2;
  // Uuid of the delivery.
  string delivery_uuid = 3;
}

// Response to skip the audit
message AuditFlowActionResponse {}

// Request to get object weights for audit
message GetObjectWeightsForAuditRequest {
  // Weight review status filter of the target weight records.
  repeated RecordedObjectWeight.WeightReviewStatus review_statuses = 1;
  // Business id filter of the target weight records.
  repeated int64 business_ids = 2;
  // Store id filter of the target weight records.
  repeated int64 store_ids = 3;
  // Page offset
  int32 offset = 4;
  // Number of weight records to return
  int32 count = 5;
  // Object weight source filter of the target weight records
  repeated ObjectWeightSource sources = 6;
}

// Response for getting object weights for audit
message GetObjectWeightsForAuditResponse {
  // A list of object weights
  repeated ObjectWeightForAudit object_weights_for_audit = 1;
  // Total number of object weights
  int32 total_object_weights = 2;
}

// Approved weight message
message ApprovedWeight {
  // User id who reviews the weight
  int64 reviewed_by = 1;
  // Time when the weight is approved
  google.protobuf.Timestamp reviewed_at = 2;
  // The approved weight
  double measured_weight = 3;
  // Source of the approved object weight
  ObjectWeightSource source = 4;
}

// An object weight for audit
message ObjectWeightForAudit {
  // Id of object weight record
  string record_id = 1;
  // Source of the object weight
  ObjectWeightSource source = 2;
  // Time when the object weight is created
  google.protobuf.Timestamp created_at = 3;
  // Time when the object weight is updated
  google.protobuf.Timestamp updated_at = 4;
  // User id who updates this object weight record
  google.protobuf.Int64Value updated_by = 5;
  // Time when the object weight is reviewed
  google.protobuf.Timestamp reviewed_at = 6;
  // User id who reviewed this object weight record last time
  google.protobuf.Int64Value reviewed_by = 7;
  // Review status of the object weight
  RecordedObjectWeight.WeightReviewStatus review_status = 8;
  // Object information
  Object object = 9;
  // Unique ID (int64) of the store
  int64 store_id = 10;
  // Store name
  string store_name = 11;
  // Unique ID (int64) of ths business
  int64 business_id = 12;
  // Delivery id of the order contributing this object weight, it can be null
  google.protobuf.Int64Value delivery_id = 13;
  // The measured weight of the object
  double measured_weight = 14;
  // The list of approved object weights associated with the object
  repeated ApprovedWeight approved_weights = 15;
  // The object weight based on the cumulative weight of item and nested options.
  google.protobuf.DoubleValue item_option_cumulative_weight = 16;
}

// Request to update the object weight
message UpdateObjectWeightRequest {
  // Id of object weight record
  string record_id = 1;
  // Target review status
  RecordedObjectWeight.WeightReviewStatus new_review_status = 2;
  // New measured weight
  google.protobuf.DoubleValue new_measured_weight = 3;
  // The user id who updates
  int64 updated_by = 4;
}

// Response of updating object weight
message UpdateObjectWeightResponse {}

// Get smartscale setting by setting key request
message GetSmartScaleSettingByKeyRequest {
  // Entity level for which setting is requested
  Entity entity = 1;
  // Setting key
  string setting_key = 2;
}

// Get smartscale setting by setting key response
message GetSmartScaleSettingByKeyResponse {
  // Setting value
  SmartScaleSetting setting = 1;
}

// Generate menu tsv file request
message GenerateMenuTsvRequest {
  // Unique ID (int64) of the store
  int64 store_id = 1;
}

// Generate menu tsv file response
message GenerateMenuTsvResponse {
  // Presigned S3 url to the generated file
  string url = 1;
}

// Get performance summary request
message GetPerformanceSummaryRequest {
  // Unique ID (int64) of the store
  int64 store_id = 1;
}

// Get performance summary response
message GetPerformanceSummaryResponse {
  // Name of the business
  string business_name = 1;
  // The window performance summary list
  repeated WindowPerformanceSummary window_performance_summaries = 2;
}

// Get performance summary request v2
message GetPerformanceSummaryV2Request {
  // Unique ID (int64) of the store
  int64 store_id = 1;
}

// Get performance summary response v2
message GetPerformanceSummaryV2Response {
  // List of store performance
  repeated WindowPerformanceSummaryV2 store_performance = 1;
  // Utilization goal of the store (0 to 1)
  float utilization_goal = 2;
  // List of the day part details
  repeated DayPartDetails day_part_details = 3;
}

// Result of a weight check
enum WindowType {
  // Unspecified (default)
  WINDOW_TYPE_UNSPECIFIED = 0;
  // Last week (start 3 days back for M&I informance to be available)
  WINDOW_TYPE_LAST_WEEK = 1;
  // Last month (start 3 days back for M&I informance to be available)
  WINDOW_TYPE_LAST_MONTH = 2;
  // Last year (start 3 days back for M&I informance to be available)
  WINDOW_TYPE_LAST_YEAR = 3;
  // All data (start 3 days back for M&I informance to be available)
  WINDOW_TYPE_TOTAL = 4;
}

// Window summary
message WindowPerformanceSummary {
  // type of window
  WindowType window_type = 1;
  // utilization detail
  UtilizationSummary utilization_summary = 2;
  // savings detail
  SavingsSummary savings_summary = 3;
  // Missed savings detail
  MissedSavingsSummary missed_savings_summary = 4;
}

// Window summary v2
message WindowPerformanceSummaryV2 {
  // type of window
  WindowType window_type = 1;
  // utilization rate (0 to 1)
  float utilization_rate = 2;
  // savings in dollar (null if the WindowType is LAST_WEEK)
  google.protobuf.FloatValue savings = 3;
  // missed savings in dollar (null if the WindowType is LAST_WEEK)
  google.protobuf.FloatValue missed_savings = 4;
}

// Utilization summary inside the window
message UtilizationSummary {
  // utilization 0 to 100
  int32 utilization_percentage = 1;
  // total number of orders
  int32 total_orders = 2;
  // total number of orders weighed
  int32 orders_weighed = 3;
  // day part with the lowest utilization. Index starts at 0
  int32 lowest_utilization_day_part = 4;
  // day part with the highest utilization. Index starts at 0
  int32 highest_utilization_day_part = 5;
  // ranking of the store utilization in the business
  int32 store_ranking = 6;
  // total stores in the business
  int32 total_stores = 7;
}

// Savings summary inside the window
message SavingsSummary {
  // total number of confirmed missing prevented
  int32 confirmed_missing_prevented = 1;
  // total number of estimated missing prevented
  int32 estimated_missing_prevented = 2;
  // estimated dollar value of each estimated missing prevented
  float cost_per_estimated_missing_prevented = 3;
  // saving in dollar
  float saving = 4;
}

// Missed savings summary inside the window
message MissedSavingsSummary {
  // total dollar value of unweighed orders with missing claim value
  float unweighed_orders_with_missing_claims = 1;
  // total dollar value of flagged orders that are not addressed with missing claim
  float unaddressed_orders_with_missing_claims = 2;
  // algo efficiency 0 to 100
  int32 algo_efficiency_percentage = 3;
  // estimated claims with fraud, 0 to 100
  int32 fraud_percentage = 4;
  // missed_saving in dollar value
  float missed_saving = 5;
}

// Confirm order is ready for pickup request
message ConfirmOrderReadyForPickupRequest {
  // Order id. DEPRECATED: Use order_identifier instead
  reserved 1;
  reserved "order_id";
  // Unique ID (int64) of the store
  int64 store_id = 2;
  // Channel type of the order
  Channel channel = 3 [(doordash.api.validate.rules).missing_value = {action: USE_DEFAULT_VALUE}];
  // Order identifier
  OrderIdentifier order_identifier = 4 [(doordash.api.validate.rules).missing_value = {action: FAIL}];
}

// Confirm order is ready for pickup response
message ConfirmOrderReadyForPickupResponse {
  // Order id. DEPRECATED: Use order_identifier instead
  reserved 1;
  reserved "order_id";
  // Order identifier
  OrderIdentifier order_identifier = 2;
}

// get active orders list request
message GetActiveOrdersRequest {
  // Unique ID (int64) of the store
  int64 store_id = 1;
}

// get active orders list response
message GetActiveOrdersResponse {
  // Orders that are in kitchen
  repeated Order in_kitchen = 1;
  // Orders that are ready for pickup
  repeated Order ready_for_pickup = 2;
  // Orders that are out for delivery
  repeated Order out_for_delivery = 3;
}

// Order message with only the necessary fields needed by GetActiveOrders endpoint
message Order {
  // delivery_uuid of the order
  string delivery_uuid = 1;
  // display id text
  string display_id_text = 2;
  // channel e.g. Marketplace, Drive, 3P etc
  Channel channel = 3;
  // fulfillment type e.g. Merchant, Dasher, Consumer, Dine-in, Drone
  OrderFulfillmentType fulfillment_type = 4;
  // item count
  int32 item_count = 5;
  // localized customer name
  string customer_name_localized = 6;
  // adp provider order details - to be deprecated once client migrates
  OrderProviderDetails order_provider_details = 7 [(doordash.api.client.optional) = true];
  // last weighed snapshot record
  LastWeighedRecord last_weighed_record = 8 [(doordash.api.client.optional) = true];
  // adp robot provider order details
  RobotProviderDetails robot_provider_details = 9 [(doordash.api.client.optional) = true];
  // gift info, containing recipient and sender details; this will be null if this isn't a gift order
  GiftInfo gift_info = 10;
}

// fulfillment type e.g. Merchant, Dasher, Consumer, Dine-in, Drone
enum OrderFulfillmentType {
  // Unspecified (default)
  ORDER_FULFILLMENT_TYPE_UNSPECIFIED = 0;
  // Merchant
  ORDER_FULFILLMENT_TYPE_MERCHANT = 1;
  // Dasher
  ORDER_FULFILLMENT_TYPE_DASHER = 2;
  // Consumer
  ORDER_FULFILLMENT_TYPE_CONSUMER = 3;
  // Dine-in
  ORDER_FULFILLMENT_TYPE_DINE_IN = 4;
  // Drone
  ORDER_FULFILLMENT_TYPE_DRONE = 5;
}

// Get store details for current merchant user request
message GetStoreDetailsRequest {}

// Get store details for current merchant user response
message GetStoreDetailsResponse {
  // Unique ID (int64) of the store
  int64 store_id = 1;
  // Store name
  string store_name = 2;
  // Unique ID (int64) of the business
  int64 business_id = 3;
}

// Request to get the store's achievement details
message GetAchievementsRequest {
  // Type of achievement
  enum AchievementType {
    // Unspecified (default)
    ACHIEVEMENT_TYPE_UNSPECIFIED = 0;
    // Achievement type for basic, including streak and today's utilization
    ACHIEVEMENT_TYPE_BASIC = 1;
    // Achievement type for leaderboard
    ACHIEVEMENT_TYPE_LEADERBOARD = 2;
    // Achievement type for challenge
    ACHIEVEMENT_TYPE_CHALLENGE = 3;
  }
  // Unique ID of the store
  int64 store_id = 1;
  // List of requested achievement types
  repeated AchievementType achievement_types = 2;
}

// Response of the store's achievement details
message GetAchievementsResponse {
  // Basic achievement details
  BasicAchievement basic_achievement = 1;
  // Leaderboard achievement details
  Leaderboard leaderboard = 2;
  // Challenge achievement details
  repeated StoreChallenge store_challenges = 3;
}

// Basic achievement details
message BasicAchievement {
  // Current streak count
  google.protobuf.Int32Value current_streak = 1;
  // Previous best streak count
  google.protobuf.Int32Value previous_best_streak = 2;
  // Today's utilization achievement details
  google.protobuf.FloatValue todays_utilization = 3;
  // Utilization goal
  google.protobuf.FloatValue utilization_goal = 4;
}

// Leaderboard achievement details
message Leaderboard {
  // Leaderboard entry details
  message LeaderboardEntry {
    // Id of the store
    int64 store_id = 1;
    // Name of the store
    string store_name = 2;
    // Store's rank in the leaderboard
    int32 rank = 3;
    // Store's utilization in the leaderboard
    float utilization_rate = 4;
  }
  // Total number of stores in this leaderboard
  int32 total_stores = 1;
  // List of leaderboard entries
  repeated LeaderboardEntry leaderboard_entries = 2;
}

// Store challenge achievement details
message StoreChallenge {
  // Localized challenge title
  string title = 1;
  // Localized challenge description
  string description = 2;
  // Challenge category
  Challenge.Category category = 3;
  // Challenge icon url
  string icon_url = 4;
  // Challenge progress
  int32 current_progress = 5;
  // Challenge target
  int32 total_target = 6;
  // Challenge completion status
  bool is_completed = 7;
  // Date of completion. Null if not completed.
  google.protobuf.StringValue completion_date = 8;
}

// Challenge details
message Challenge {
  // Challenge category
  enum Category {
    // Unspecified (default)
    CATEGORY_UNSPECIFIED = 0;
    // Onboarding challenge
    CATEGORY_ONBOARDING = 1;
    // Lifetime milestone challenge
    CATEGORY_LIFETIME_MILESTONE = 2;
    // Leaderboard challenge
    CATEGORY_LEADERBOARD = 3;
    // Shift completion challenge
    CATEGORY_SHIFT_COMPLETION = 4;
  }

  // Recurrence type
  enum RecurrenceType {
    // Unspecified (default)
    RECURRENCE_TYPE_UNSPECIFIED = 0;
    // One time challenge
    RECURRENCE_TYPE_ONE_TIME = 1;
    // Daily challenge
    RECURRENCE_TYPE_DAILY = 2;
    // Weekly challenge
    RECURRENCE_TYPE_WEEKLY = 3;
  }

  // Name of the challenge
  string name = 1;
  // Category of the challenge
  Category category = 2;
  // Url of the challenge icon image
  string icon_url = 3;
  // Total target is the number of times the action needs to be completed to achieve the challenge. It is 0 if no need to track the progress.
  int32 total_target = 4;
  // Recurrence type. Challenge can be one_time, daily or weekly.
  RecurrenceType recurrence_type = 5;
}

// Request to create or update challenges
message CreateOrUpdateChallengesRequest {
  // List of challenges
  repeated Challenge challenges = 1;
}

// Response of create or update challenges
message CreateOrUpdateChallengesResponse {}

// Request to delete challenges
message DeleteChallengesRequest {
  // List of challenge names
  repeated string challenge_names = 1;
}

// Response of delete challenges
message DeleteChallengesResponse {}

// Request of updating store challenge progress
message UpdateStoreChallengeProgressRequest {
  // Unique ID of the store
  int64 store_id = 1;
  // Name of the challenge
  string challenge_name = 2;
  // Progress to increment. If not set, increment by 1
  google.protobuf.Int32Value increment = 3;
}

// Response of updating store challenge progress
message UpdateStoreChallengeProgressResponse {}

// Contains meta information about items in a cart.
message CartItem {
  // Integer ID of the item
  string item_id = 1;
  // Number of items in the cart
  int32 quantity = 2;
  // Name of the item (nullable)
  google.protobuf.StringValue name = 3;
  // Merchant supplied item id (nullable)
  google.protobuf.StringValue merchant_supplied_item_id = 4;
  // nested item options detail
  repeated NestedOption nested_options = 5;
}

// Contains meta information about option selected for an item
message NestedOption {
  // Unique ID of the option
  string option_id = 1;
  // Quantity of the option
  int32 quantity = 2;
  // Name of the option item (nullable)
  google.protobuf.StringValue name = 3;
  // Merchant supplied item id for the option item (nullable)
  google.protobuf.StringValue merchant_supplied_item_id = 4;
  // nested options detail
  repeated NestedOption nested_options = 5;
}

// Contains weight predicted by ML model
message ModelPredictedWeight {
  // Weight in grams
  float predicted_weight_grams = 1;
  // Name of the model
  string model_name = 2;
}

// Request to check if WeightVerifiedWarning should be shown
message HasWeightVerifiedWarningRequest {
  // delivery uuid
  string delivery_uuid = 1;
}

// Response to check if WeightVerifiedWarning should be shown
message HasWeightVerifiedWarningResponse {
  // Whether the warning should be shown
  bool has_warning = 1;
  // The treatment for any experiment running on this warning
  google.protobuf.StringValue treatment = 2;
}
