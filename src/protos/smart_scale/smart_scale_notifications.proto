syntax = "proto3";
package smart_scale.v1;

import "doordash.api/annotations.proto";
import "google/api/annotations.proto";
import "google/protobuf/wrappers.proto";

option java_generic_services = true;
option java_outer_classname = "Notifications";
option java_package = "com.doordash.rpc.smart_scale";

// Service for SmartScale notifications
service SmartScaleNotificationService {
  option (doordash.api.service) = {
    name: "smart-scale-service-notifications-grpc"
    url: "smart-scale-service-web.service.prod.ddsd"
    port: 50051
    name_spaces: ["smart-scale-service"]
    api_key_name: "SMART_SCALE_SERVICE_API_KEY"
    owner: {
      name: "smart-scale"
      id: "smart-scale-team"
      slack_channel: "#ask-smart-scale"
      email_alias: "smart-scale-sw-eng@doordash.com"
    }
    target_products: [MX]
  };
  // Get notifications for a store
  rpc GetSmartScaleStoreNotifications(GetSmartScaleStoreNotificationsRequest) returns (GetSmartScaleStoreNotificationsResponse) {
    option (google.api.http) = {
      // {HttpMethod}: "{pathPattern}"
      get: "/smart-scale-service/v1/get_store_notifications"
    };

    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [MX_USER]
      target_products: [MX]
    };
  }
}

// Request to fetch all valid notifications for a store
message GetSmartScaleStoreNotificationsRequest {
  // Unique ID (int64) of the store
  int64 store_id = 1;
}

// Response containing all valid notifications for a store
message GetSmartScaleStoreNotificationsResponse {
  // List of notifications for the store
  repeated SmartScaleStoreNotification smart_scale_store_notifications = 1;
}

// Store notification
message SmartScaleStoreNotification {
  // Unique ID of the notification for deduplication
  string notification_id = 1;
  // Message to be displayed in the notification
  string message = 2;
  // Ui settings for the notification
  NotificationUiSettings notification_ui_settings = 3;
}

// Ui settings for notification
message NotificationUiSettings {
  // Background color of the notification
  google.protobuf.StringValue background_color = 1;
  // Text color of the notification
  google.protobuf.StringValue text_color = 2;
  // Icon URL to be displayed in the notification
  google.protobuf.StringValue icon_url = 3;
  // Dismiss timer in seconds. If no timer is set, the notification requires user input to dismiss
  google.protobuf.Int32Value dismiss_timer = 4;
  // Screen to navigate to on click
  NotificationScreen notification_screen = 5;
}

// Screen to navigate to on click
enum NotificationScreen {
  // Unspecified screen
  NOTIFICATION_SCREEN_UNSPECIFIED = 0;
  // Order out for delivery screen
  NOTIFICATION_SCREEN_ORDER_OUT_FOR_DELIVERY = 1;
  // Challenges screen
  NOTIFICATION_SCREEN_CHALLENGE = 2;
  // Weighing streak screen
  NOTIFICATION_SCREEN_WEIGHING_STREAK = 3;
}
