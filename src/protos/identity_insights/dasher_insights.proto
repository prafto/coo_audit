syntax = "proto3";

package identityinsights.v1;

option java_multiple_files = true;
option java_generic_services = true;
option java_package = "com.doordash.rpc.identityinsights";

import "common/service_client_config.proto";

// Service to get Dasher Insights
service DasherInsightsService {
    // Timeout after 700 milliseconds.
    option (service_client.client_config).response_attempt_timeout_millis = 700;
    // Make a total 4 attempts (initial + three retries).
    option (service_client.client_config).retry_config.max_attempts = 4;
    // Add RESOURCE_EXHAUSTED to the set of retriable codes.
    option (service_client.client_config).retry_config.do_retry_grpc_code = 8;
    // Break the circuit if the error rate exceeds 80%.
    option (service_client.client_config).circuit_breaker_config.failure_rate_threshold = 0.8;
    // Ignore NOT_FOUND from circuit breaker error rate calculation.
    option (service_client.client_config).circuit_breaker_config.do_ignore_grpc_code = 5;

    // (Old) Returns list of Dashers who match request. TODO: remove after other services stop using this
    rpc DasherSignUpFraudCheck(DasherSignUpFraudCheckRequest) returns (DasherSignUpFraudCheckResponse);

    // Returns list of Dashers related to given user id
    rpc DasherSignUpFraudInvestigate(DasherSignUpFraudInvestigateRequest) returns (DasherSignUpFraudInvestigateResponse);
}

// DasherDetails information about a dasher. TODO: REMOVE
message DasherDetails {
    // Id of dasher
    int32 dasher_id = 1;
    // Is dasher active
    bool is_active = 2;
    // Reason id for which the dasher was deactivated
    int32 reason_for_deactivation_id = 3;
    // Reason for which the dasher was deactivated
    string reason = 4;
    // Id of user
    int32 user_id = 5;
}

// information about a dasher
message DasherInfo {
    // Id of dasher
    int32 dasher_id = 1;
    // Is dasher active
    bool is_active = 2;
    // tags a user/dasher falls under
    repeated string tags = 3;
    // Reason for which the dasher was deactivated
    string reason = 4;
    // Id of user
    int32 user_id = 5;
}

// Search database for dashers based on all the following fields (ssn_hash OR dr_licence_hash or .... )
message SearchFields {
    // Social Security Number Hash
    string ssn_hash = 1;
    // Driver Licence Hash
    string dr_licence_hash = 2;
}

// Request for Signup, TODO: REMOVE
message DasherSignUpFraudCheckRequest {
    // List of search criteria like ssn & dr lic.
    SearchFields search_criteria = 1;
    // Id of user
    int32 user_id = 2;
}

// Request for Signup
message DasherSignUpFraudInvestigateRequest {
    // List of search criteria like ssn & dr lic.
    SearchFields search_criteria = 1;
    // Id of user
    int32 user_id = 2;
}

// Response for Signup. TODO: REMOVE
message DasherSignUpFraudCheckResponse {
    // List of Dashers
    repeated DasherDetails dashers = 1;
}

// Updated Response for Signup
message DasherSignUpFraudInvestigateResponse{
    // List of Dashers
    repeated DasherInfo dashers = 1;
}
