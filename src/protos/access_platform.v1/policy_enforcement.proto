syntax = "proto3";

package access_platform.v1;

import "access_platform.v1/common.proto";

option go_package = "github.com/doordash/services-protobuf/generated/access_platform.v1";

// PolicyEnforcementService enforce the access permission request against the existing policies and enforce the access permission update if policies allow.
service PolicyEnforcementService {
  // RPC method of `GrantAccessPermission`
  rpc GrantAccess(GrantAccessRequest) returns (GrantAccessResponse);
}

// GrantAccessRequest represents the input for creating a policy.
message GrantAccessRequest {
  // subject represents the single entity that will receive the granted access permission
  AccessPermissionReceiverIndividualEntity subject = 1;
  // resource represents the infra resource that subject is requesting
  Resource resource = 2;
  // actions represents the resource specific actions that the subject is requesting to perform against the resource
  repeated ResourceAction actions = 3;
}

//GrantAccessResponse represents the response after attempting to request for resource access for an single entity
message GrantAccessResponse {
  // decision represents the result of decision made for an access request
  PolicyDecision decision = 1;
}

// PolicyDecision represents the result of a policy decision by policy engine.
message PolicyDecision {
  // allowed indicates if the action is allowed (true) or denied (false).
  bool allowed = 1;
  // reason explains the reasoning behind the decision and provides the references to the policy that allows or denies the access request.
  string reason = 2;
}

// AccessPermissionReceiverIndividualEntity represents the info of the individual entity that receives the requested access permission
message AccessPermissionReceiverIndividualEntity {
  //type indicates the type of the individual entity
  AccessPermissionReceiverIndividualType type = 1;
  //name indicates the name of the individual entity
  string name = 2;
  // attributes means the attributes of the individual entity
  repeated Attribute attributes = 3;
}

// AccessPermissionReceiverIndividualType represents the individual entity type of the access permission receiver
enum AccessPermissionReceiverIndividualType {
  // ACCESS_PERMISSION_RECEIVER_INDIVIDUAL_TYPE_UNSPECIFIED means the individual entity type of the access permission receiver is not specified
  ACCESS_PERMISSION_RECEIVER_INDIVIDUAL_TYPE_UNSPECIFIED = 0;
  // ACCESS_PERMISSION_RECEIVER_INDIVIDUAL_TYPE_K8S_APP means the individual entity type of the access permission receiver is k8s application
  ACCESS_PERMISSION_RECEIVER_INDIVIDUAL_TYPE_K8S_APP = 1;
  // ACCESS_PERMISSION_RECEIVER_INDIVIDUAL_TYPE_SSO_ROLE means the individual entity type of the access permission receiver is sso role, which need to support now but will eventually deprecate
  ACCESS_PERMISSION_RECEIVER_INDIVIDUAL_TYPE_SSO_ROLE = 2;
  // ACCESS_PERMISSION_RECEIVER_INDIVIDUAL_TYPE_OKTA_USER means the individual entity type of the access permission receiver is okta user
  ACCESS_PERMISSION_RECEIVER_INDIVIDUAL_TYPE_OKTA_USER = 3;
}
