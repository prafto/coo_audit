syntax = "proto3";

package iguazu.events.v1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option go_package = "github.com/doordash/services-protobuf/generated/iguazu/events";
option java_multiple_files = true;
option java_package = "com.doordash.iguazu.events.v1";

// Track Merchant Error Charge Disputes that ineligible for refunds and its respective metadata
message MerchantErrorChargeDisputeIneligible {
  // Delivery with error charge that was evaluated for dispute eligibility
  google.protobuf.StringValue delivery_uuid = 1;

  // Store ID associated with this delivery
  google.protobuf.Int64Value store_id = 2;

  // Business ID associated with this delivery
  google.protobuf.Int64Value business_id = 3;

  // True if this was a failed dispute attempt, false if this was for validation/view only
  google.protobuf.BoolValue was_dispute_attempt = 4;

  // Amount being requested in the Error Charge Dispute
  google.protobuf.Int32Value store_refund_amount = 5;

  // Currency of the refund amount (ex. USD) (empty if not applicable)
  google.protobuf.StringValue currency = 6;

  // The time when the the delivery was evaluated for dispute eligibility
  google.protobuf.Timestamp evaluated_at = 7;

  // User/Creator ID of the disputing/validating user (empty if not applicable)
  google.protobuf.Int64Value user_id = 8;

  // The reason this order was not eligible for dispute
  google.protobuf.StringValue ineligibility_reason = 9;

  // Dispute/fraud policy was enforced for this dispute
  google.protobuf.StringValue fraud_policy_enforced = 10;

  // Fraud threshold that was enforced for this dispute (ex. 1.9% of orders)
  google.protobuf.FloatValue fraud_threshold_value_enforced = 11;

  // Rolling window size was used for fraud criteria calculation
  google.protobuf.Int32Value rolling_window_size_enforced = 12;

  // Total orders with M&I that were disputed in the rolling window
  google.protobuf.Int32Value total_orders_with_error_charges_disputed = 13;

  // Total orders with M&I in the rolling window (-1 if not used)
  google.protobuf.Int32Value total_orders_with_error_charges = 14;

  // Total Mx orders at the time of dispute in the rolling window (-1 if not used)
  google.protobuf.Int32Value total_mx_order_count = 15;

  // Misc. metadata
  google.protobuf.StringValue metadata = 16;

  // Track if fraud policy was bypassed: true if delivery contains CRE categories eligible for bypass, false otherwise
  google.protobuf.BoolValue was_fraud_validation_overridden = 17;

  // Track which version of the fraud bypass was enforced (ex. V1.0.0 would be PFQ, but future V1.0.X could contain other additional PFQ categories
  google.protobuf.StringValue fraud_validation_bypass_version = 18;

  // Print the CRE categories we are bypassing
  google.protobuf.StringValue fraud_validation_bypass_enforced = 19;

  // Returns the response from fraud checkpoint evaluation (ex. {"checkpoint_response": {"actions": []...}})
  google.protobuf.StringValue fraud_checkpoint_response = 20;

  // Returns the final decision we took based on the response from the fraud checkpoint evaluation (ex. Block/Allow)
  google.protobuf.StringValue final_fraud_action = 21;

  // Returns the Final rule labels we took based on the response from the fraud checkpoint evaluation (ex. HighTrustCxLowTrustMx)
  google.protobuf.StringValue final_fraud_rule_labels = 22;
}
