syntax = "proto3";
package iguazu.events.v1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option go_package = "github.com/doordash/services-protobuf/generated/iguazu/events";
option java_multiple_files = true;
option java_package = "com.doordash.iguazu.events.v1";

// Iguazu event published for Notification Platform Analytics purposes
message NotificationPlatformAnalyticsEvent {
  // notification_request_uuid (foreign key to join client table which send notification request)
  string notification_request_uuid = 1;
  // notification_uuid
  string notification_uuid = 2;
  // Timestamp of the event
  google.protobuf.Timestamp created_at = 3;
  // userEntityId
  google.protobuf.StringValue user_entity_id = 4;
  // userEntityType(ie., Consumer, Dasher)
  google.protobuf.StringValue user_entity_type = 5;
  // Email of the user
  string email = 6;
  // Submarket of the user
  int64 submarket_id = 7;
  // Country of the user
  string country_code = 8;
  // unique programId (could be EP programID or Iterable campaignID)
  string program_id = 9;
  // programName(could be EP ProgramName or Iterable campaignName)
  string program_name = 10;
  // notification channel(ie., Hub, Push, Email)
  string channel = 11;
  // message type
  string message_type = 12;
  // notification stage in the funnel(ie., Ingested, Prioritized, FrequencyCap, Schedule, PreferenceCheck,
  string stage = 13;
  // status each stage (ie., true/false(success/fail) for notification prioritized/frequencyCap/schedule/preferenceCheck
  string status = 14;
  // device type, ios or android
  string device_type = 15;
  // device_token
  string device_token = 16;
  // experience (ie., DoorDash, Caviar)
  string experience = 17;
  // locale
  string locale = 18;
  // caller (ie., FPN, Iterable)
  string source = 19;
  // title
  string title = 20;
  // message body
  string body = 21;
  // deeplink url
  string deeplink = 22;
  // image url
  string image_url = 23;
  // push event id
  string push_event_id = 24;
  // json context to add other additional metadata info
  string context = 25;
  // Timestamp of the task scheduled_at
  string scheduled_at = 26;
  // push or hub configuration id
  string configuration_id = 27;
  // priority score of the campaign
  int32 priority_score = 28;
  // indicate whether it is test event
  bool is_test_event = 29;
  // event metadata
  Metadata meta_data = 30;
}

// Metadata field value, JSON key-value pairs
message Metadata {
  reserved 2;
  reserved "last_mile_check";
  // indicate which service emit this event
  string service = 1;

  // Track which eligibility check dropped the event
  EligibilityCheck eligibility_check = 3;

  // Track which ranker model is used and the corresponding score for the candidate's campaign
  RankerInfo ranker_info = 4;
}

// Meta data field to track which eligibility check dropped the event
message EligibilityCheck {
  reserved 1;
  reserved "last_mile_check_type";

  // Eligibility type such as order check where the notification failed
  string eligibility_check_type = 3;

  // Failure reason for dropping the notification
  string failure_reason = 2;
}

// Meta data field to track which ranker model is used and the corresponding score for the candidate's campaign
message RankerInfo {
  // Ranker model name
  string ranker_model_name = 1;

  // Ranker model score
  float ranker_model_score = 2;

  // ATC ranker requested by client
  bool client_requested_atc_ranker = 3;

  // Campaign name for the candidate
  string campaign_name = 4;
}
