syntax = "proto3";

package pricing_service.v1;

import "common/money.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "pricing_service/common.proto";

option go_package = "github.com/doordash/services-protobuf/generated/pricing_service/api/v1";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.pricing_service.rpc.api";

// Kafka event that stores wolt async api operation id
message WoltAsyncApiEvent {
  // [Required] API operation Id returned from Wolt Async API
  string operation_id = 1;
  // [Required] wolt api name
  string api_name = 2;
}

// Kafka event that sends Wolt approved prices to downstream services.
message ApprovedPriceEvent {
  // [Required] Unique identifier of the sku
  SkuIdentifier sku_identifier = 1;
  // [Required] Price value for the sku
  money.MonetaryFields price = 2;
  // [Required] The type of price we are applying ex base_price
  string price_type = 3;
  // [Required] Represents the method in which the price was approved
  ApprovalMethod approved_method = 4;
  // [Required] The time the price was approved
  google.protobuf.Timestamp updated_at = 5;
  // [Optional] Experimental prices
  repeated ExperimentOverride experiment_overrides = 6;
}

// Valid Wolt approval methods
enum ApprovalMethod {
  // unspecified is not correlated with a valid approval method
  APPROVAL_METHOD_UNSPECIFIED = 0;
  // price was auto approved by wolt service
  APPROVAL_METHOD_AUTO_APPROVE = 1;
  // price was manually approved via Wolt tooling
  APPROVAL_METHOD_MANUAL_APPROVE = 2;
}

// Determines which sku received the price approval from Wolt
message SkuIdentifier {
  // [Required] Id of the store
  string store_id = 1;
  // [Required] Id of the sku with the approved price
  string merchant_supplied_id = 2;
}
