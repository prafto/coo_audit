syntax = "proto3";

package lego.dasher.new_verticals.v1;

option java_package = "com.doordash.rpc.lego_dasher_new_verticals";
option java_multiple_files = true;

import "google/protobuf/wrappers.proto";
import "google/protobuf/any.proto";
import "lego/action.proto";
import "lego/log.proto";

// a container containing a sequence of pages. This container
// also holds the logic to handle page transitions (triggered
// via StepAction defined below)
message SequencedPageContainer {
    // a list of pages in this sequence
    // this should really be a lego.v1.Lego type, however protobuf does not allow cyclic imports
    // (we would have to import "lego/lego.proto" which creates a cyclic import), it can only be "Any" type here
    repeated google.protobuf.Any children = 1;
}

// the top navigation bar on every Checkout Step
message CheckoutStepNavigationBar {
    // navigation bar title
    string title = 1;
    // buttons on the left side of nav bar
    repeated CheckoutStepNavigationBarButton left_bar_buttons = 2;
    // buttons on the right side of nav bar
    repeated CheckoutStepNavigationBarButton right_bar_buttons = 3;
}

// each button in the nav bar
message CheckoutStepNavigationBarButton {
    // an asset ID that will be mapped to the actual image asset in frontend
    enum AssetID {
        // default
        ASSET_ID_UNSPECIFIED = 0;
        // back button
        ASSET_ID_BACK = 1;
        // help button
        ASSET_ID_HELP = 2;
        // chat button
        ASSET_ID_CHAT = 3;
        // self-help button
        ASSET_ID_SELF_HELP = 4;
        // menu button
        ASSET_ID_MENU = 5;
        // close button
        ASSET_ID_CLOSE = 6;
    }
    // button type
    AssetID asset_id = 1;
    // button actions on tap
    repeated lego.v1.Action actions = 2;
}

// A section of components fixed at a location on screen
// (e.g. nav bar and bottom action button)
message VerticalContainer {
    // relative vertical position of this container
    enum Position {
        // default/unset: relative
        POSITION_UNSPECIFIED = 0;
        // top-aligned
        POSITION_TOP = 1;
        // bottom-aligned
        POSITION_BOTTOM = 2;
    }
    // position of this section
    Position position = 1;
    // whether this section should be scrollable
    google.protobuf.BoolValue scrollable = 2;
    // list of (vertically aligned) Lego components that are in the section
    // this should really be a lego.v1.Lego type, however protobuf does not allow cyclic imports
    // (we would have to import "lego/lego.proto" which creates a cyclic import), it can only be "Any" type here
    repeated google.protobuf.Any children = 3;
}

// Container for a bottom modal - vertical stack left aligned with specific padding
message BottomModalContainer {
    // list of (vertically aligned) Lego components that are in the bottom modal
    // this should really be a lego.v1.Lego type, however protobuf does not allow cyclic imports
    // (we would have to import "lego/lego.proto" which creates a cyclic import), it can only be "Any" type here
    repeated google.protobuf.Any children = 1;
}

// a progress bar
message StepperProgressBar {
    // total number of steps, 1 <= total_steps
    uint32 total_steps = 1;
    // current progress, 1 <= current_step <= total_steps
    uint32 current_step = 2;
}

// a local image asset
message LocalImage {
    // an asset type that will be mapped to the actual image asset in frontend
    enum ImageType {
        // default
        IMAGE_TYPE_UNSPECIFIED = 0;
        // pay with red card (credit)
        IMAGE_TYPE_RED_CARD_CREDIT = 1;
        // pay with red card (debit)
        IMAGE_TYPE_RED_CARD_DEBIT = 2;
        // proceed to delivery
        IMAGE_TYPE_PROCEED_TO_DELIVERY = 3;
        // self-checkout or cashier
        IMAGE_TYPE_SELF_CHECKOUT_OR_CASHIER = 4;
        // cashier checkout only
        IMAGE_TYPE_CASHIER_CHECKOUT = 5;
        // do not use red card to checkout
        IMAGE_TYPE_NO_RED_CARD = 6;
        // put ambient/cold/frozen items in different bags
        IMAGE_TYPE_AMBIENT_COLD_FROZEN = 7;
        // put a label on bag
        IMAGE_TYPE_ATTACH_LABEL_TO_BAG = 8;
        // put bags in the staging area
        IMAGE_TYPE_ORDER_STAGING_AREA = 9;
        // do not put receipt in the bag
        IMAGE_TYPE_NO_RECEIPT_IN_BAG = 10;
        // put an alcohol label on the bag
        IMAGE_TYPE_ALCOHOL_BAG = 11;
        // ask cashier to remove taxes
        IMAGE_TYPE_MANUAL_TAX_REMOVAL = 12;
        // ask dasher to go to curbside pickup
        IMAGE_TYPE_ORDER_CURBSIDE_PICKUP = 13;
        // ask cashier to provide bags
        IMAGE_TYPE_ASK_FOR_BAGS = 14;
    }
    // asset type
    ImageType image_type = 1;
}

// a styled text
message StyledText {
    // text style
    enum TextStyle {
        // default
        TEXT_STYLE_UNSPECIFIED = 0;
        // large, dark, primary text
        TEXT_STYLE_PRIMARY = 1;
        // smaller, gray, secondary text
        TEXT_STYLE_SECONDARY = 2;
        // primary text used in bottom modal
        TEXT_STYLE_PAGE_TITLE_2 = 3;
        // secondary text used in bottom modal
        TEXT_STYLE_ALERT_TEXT = 4;
        // smaller text used in bottom modal
        TEXT_STYLE_MOBILE_BODY_2 = 5;
        // emphasis text style
        TEXT_STYLE_BODY_EMPHASIS_1 = 6;
    }
    // text alignment
    enum TextAlignment {
        // default (center)
        TEXT_ALIGNMENT_UNSPECIFIED = 0;
        // left
        TEXT_ALIGNMENT_LEFT = 1;
        // right
        TEXT_ALIGNMENT_RIGHT = 2;
    }
    // text string
    string text = 1;
    // text style
    TextStyle style = 2;
    // optional text alignment, by default center
    TextAlignment alignment = 3;
}

// a button with styled text
message StyledTextButton {
    // button style
    enum ButtonStyle {
        // default
        BUTTON_STYLE_UNSPECIFIED = 0;
        // a red background primary action button
        BUTTON_STYLE_PRIMARY = 1;
        // a transparent background secondary action button
        BUTTON_STYLE_SECONDARY = 2;
        // a gray background tertiary action button
        BUTTON_STYLE_TERTIARY = 3;
    }
    // button label text
    string label = 1;
    // button actions on press
    repeated lego.v1.Action actions = 2;
    // button style
    ButtonStyle style = 3;
}

// an alert area with text
message ReactiveContent {
    // button style
    enum Type {
        // default unspecified
        TYPE_UNSPECIFIED = 0;
        // grey banner with an information mark
        TYPE_INFORMATION = 1;
        // yellow banner with a warning mark
        TYPE_WARNING = 2;
        // red banner with an error mark
        TYPE_ERROR = 3;
        // highlight the text
        TYPE_HIGHLIGHT = 4;
        // blank background
        TYPE_HINT = 5;
    }
    //Leading Icon types
    enum LeadingIcon {
        // Default
        LEADING_ICON_UNSPECIFIED = 0;
        // [DEPRECATED] Notes line icon
        LEADING_ICON_ICON_NOTES_LINE = 1;
        // Hint line icon
        LEADING_ICON_INSIGHT_LINE = 2;
        // Noted line icon
        LEADING_ICON_NOTES_LINE = 3;
    }
    // optional primary text
    google.protobuf.StringValue title = 1;
    // secondary text
    string subtitle = 2;
    // type
    Type type = 3;
    // optional actions
    repeated lego.v1.Action actions = 4;
    // optional leading icon before text
    LeadingIcon leading_icon = 5;
}

// a remote image with reloading options and UI
message ReloadableImage {
    // config for when image needs to be reloaded
    message ReloadConfig {
        // text to display when loading
        google.protobuf.StringValue loading_text = 1;
        // text to display when loading failed
        google.protobuf.StringValue failure_text = 2;
        // text to display on reload button
        google.protobuf.StringValue reload_label = 3;
        // text to display on skip button
        google.protobuf.StringValue skip_label = 4;
        // what happens when “skip” button is tapped
        repeated lego.v1.Action skip_actions = 5;
        // max number of retries
        uint32 max_retry_count = 6;
    }
    // URL to fetch image
    string url = 1;
    // alt text
    google.protobuf.StringValue alt_text = 2;
    // text to be displayed over image
    google.protobuf.StringValue text_overlay = 3;
    // content to display when reloading
    ReloadConfig reload_config = 4;
    // logging on image load success
    lego.v1.Logging success_logging = 5;
    // logging on image load failure
    lego.v1.Logging failure_logging = 6;
}

// display of PST number or barcode number when barcode scan fails
message CheckoutNumberCard {
    // title explaining what this number is
    google.protobuf.StringValue title = 1;
    // the actual number value, in string format
    string value = 2;
}

// barcode
message CheckoutBarcode {
    // barcode type
    enum BarcodeType {
        // Unspecified
        BARCODE_TYPE_UNSPECIFIED = 0;
        // UPC-A is a 12-digit barcode with the first digit being the numbering system (usually 0 or 7)
        // and the last digit being a checksum.
        BARCODE_TYPE_UPC_A = 1;
        // Condensed form of a UPC-A barcode.
        // The manufacturer and item codes are compressed to 6 digits with the check digit
        // and numbering system encoded in the parity.
        // Therefore, including these, a UPC-E code will be 8 digits.
        BARCODE_TYPE_UPC_E = 2;
        // EAN-8 barcode. This cannot be converted to an EAN-13 code.
        BARCODE_TYPE_EAN_8 = 3;
        // EAN-13 barcode. If the leading digit is 0, then this is simply a UPC-A barcode.
        // Cannot be converted to an EAN-8 code.
        BARCODE_TYPE_EAN_13 = 4;
        // Code 39 barcode
        BARCODE_TYPE_CODE_39 = 5;
        // Code 128 barcode
        BARCODE_TYPE_CODE_128 = 6;
        // PDF 417 barcode
        BARCODE_TYPE_PDF_417 = 7;
        // QR code barcode
        BARCODE_TYPE_QR_CODE = 8;
    }

    // box label
    message BoxLabel {
        // prism color
        enum PrismColor {
            // UNSPECIFIED
            PRISM_COLOR_UNSPECIFIED = 0;
            // red background color
            PRISM_COLOR_RED_50 = 1;
            // white text color
            PRISM_COLOR_PRIMARY_ON_DARK = 2;
            // inverted
            PRISM_COLOR_PRIMARY_INVERTED = 3;
        }
        // text
        string text = 1;
        // text color
        PrismColor text_color = 2;
        // background color
        PrismColor background_color = 3;
    }

    // data for generating the barcode
    string barcode_data = 1;
    // barcode type
    BarcodeType barcode_type = 2;
    // box label
    BoxLabel box_label = 3;
}
