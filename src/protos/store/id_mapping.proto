syntax = "proto3";
package store_service;

import "google/api/annotations.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/timestamp.proto";

option java_multiple_files = true;
option java_package = "com.doordash.rpc.store";
option java_generic_services = true;
// currently unused
option go_package = "store_service";

/*
 * InternalIdentificationInfo object
 *
 * Consumer ids are currently an autoincrementing id field. This means that if we give those out to people
 * we are giving them a signal that opens us up to certain side channel attacks that might disclose
 * data that restaurants want to keep private or that we might demand restaurants pay for if they
 * want access. We therefore create random IDs that uniquely map to a tuple of (business id, consumer id)
 * and include store id in this table to allow convenient lookups of more macro scale data.
 */
message InternalIdentificationInfo {

    // Unique id for a user
    google.protobuf.StringValue consumer_id = 1;

    // Unique id for a Store
    google.protobuf.StringValue store_id = 2;

    // Unique id for the business to which the store belongs
    google.protobuf.StringValue business_id = 3;
}

message StoreFacingIdentifier {
    google.protobuf.StringValue id = 1;
}


service IdMappingService {

    /*
     * Idempotent method to create and/or retrieve the store facing id for a given
     * (store id, user id) tuple
     */
    rpc GetStoreFacingId(InternalIdentificationInfo) returns (StoreFacingIdentifier) {
        option (google.api.http) = {
            put: "/api/v1/id-mapping/map-id"
            body: "*"
        };
    }
}
