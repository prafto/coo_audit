syntax = "proto3";

package delivery_service.preference.v1;

import "google/protobuf/descriptor.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.delivery.preference";

// service that is called to add/remove/get preferences between dashers/entities
service PreferenceService {
  // adds the preference for the dasher/entity
  rpc AddDasherPreferenceForEntity(UpdateDasherPreferenceForEntityRequest) returns (google.protobuf.Empty);

  // removes the preference for the dasher/entity
  rpc RemoveDasherPreferenceForEntity(UpdateDasherPreferenceForEntityRequest) returns (google.protobuf.Empty);

  // expires the preference for the dasher/entity
  rpc ExpireDasherPreferenceForEntity(UpdateDasherPreferenceForEntityRequest) returns (google.protobuf.Empty);

  // returns the union of all dasher/entity preferences that match all BatchGetDasherPreferenceQuery's in the BatchGetDasherPreferenceForEntityRequest
  rpc BatchGetDasherPreferenceForEntity(BatchGetDasherPreferenceForEntityRequest) returns (BatchGetDasherPreferenceForEntityResponse);

  // adds the preference for the dasher/entity in batch
  rpc BatchAddDasherPreferenceForEntity(BatchUpdateDasherPreferenceForEntityRequest) returns (BatchUpdateDasherPreferenceForEntityResponse);

  // removes the preference for the dasher/entity in batch
  rpc BatchRemoveDasherPreferenceForEntity(BatchUpdateDasherPreferenceForEntityRequest) returns (BatchUpdateDasherPreferenceForEntityResponse);

  // updates the expiry of preference for the dasher/entity in batch
  rpc BatchExpireDasherPreferenceForEntity(BatchUpdateDasherPreferenceForEntityRequest) returns (google.protobuf.Empty);

  // returns the blocklist categories
  rpc GetBlocklistCategories(google.protobuf.Empty) returns (GetBlocklistCategoriesResponse);
}

enum EntityType {
  UNKNOWN_ENTITY_TYPE = 0;
  BUSINESS = 1;
  CONSUMER = 2;
  STORE = 3;
}

enum PreferenceType {
  UNKNOWN_PREFERENCE_TYPE = 0;
  BLOCKLIST = 1;
  ALLOWLIST = 2;
  // new blocklist type to avoid cache issue (example: when Dx reports DRSC)
  DELIVERY_EXCELLENCE_BLOCKLIST = 3;
  // new blocklist type for Dx reward (Dx blcoks Mx)
  DASHER_REWARD_BLOCKLIST = 4;
}

// request for updating a dasher preference for an entity in batch
message BatchUpdateDasherPreferenceForEntityRequest {
  // list of queries/requests for the preferences
  repeated BatchUpdateDasherPreferenceQuery queries = 1;
  // entity type that the dashers are interacting with
  EntityType entity_type = 2;
  // preference type between the dashers/entities
  PreferenceType preference_type = 3;
}

// response for updating a dasher preference for an entity in batch
message BatchUpdateDasherPreferenceForEntityResponse {
  repeated Error errors = 1;
  repeated DasherEntityPreferenceChange dasherEntities = 2;
}

// query within a batch for updating the dasher/entity preference
message BatchUpdateDasherPreferenceQuery {
  // id of the dasher
  google.protobuf.Int64Value dasher_id = 1;
  // id of the entity
  google.protobuf.Int64Value entity_id = 2;
  // expiry for the preference
  google.protobuf.Timestamp expires_at = 3;
  // metadata about the preference
  google.protobuf.StringValue metadata = 4;
  // optional description of the preference
  google.protobuf.StringValue description = 5;
  // category of the blocklist preference
  BlocklistCategory blocklist_category = 6;
  // user id of the creator of the preference
  reserved 7;
  reserved 'created_by_user_id';
  // service id of the service that created the preference
  reserved 8;
  reserved 'created_by_service_id';
  // source of the preference
  Source source = 9;
  // id of the entity that created this preference (i.e. user, merchant)
  google.protobuf.StringValue source_created_by_id = 10;
}

// request for updating a dasher preference for an entity
message UpdateDasherPreferenceForEntityRequest {
  // id of the dasher
  google.protobuf.Int64Value dasher_id = 1;
  // id of the entity
  google.protobuf.Int64Value entity_id = 2;
  // entity type that the dasher is interacting with
  EntityType entity_type = 3;
  // preference type between the dasher/entity
  PreferenceType preference_type = 4;
  // expiry time for the preference
  google.protobuf.Timestamp expires_at = 5;
  // metadata about the preference
  google.protobuf.StringValue metadata = 6;
  // optional description of the preference
  google.protobuf.StringValue description = 7;
  // category of the blocklist preference
  BlocklistCategory blocklist_category = 8;
  // user id of the creator of the preference (when applicable)
  reserved 9;
  reserved 'created_by_user_id';
  // service id of the service that created the preference
  reserved 10;
  reserved 'created_by_service_id';
  // source of the preference
  Source source = 11;
  // id of the entity that created this preference (i.e. user, merchant)
  google.protobuf.StringValue source_created_by_id = 12;
}

// query within a batch for getting the dasher/entity preference
message BatchGetDasherPreferenceQuery {
  // id of the dasher
  google.protobuf.Int64Value dasher_id = 1;
  // id of the entity
  google.protobuf.Int64Value entity_id = 2;
}

// request for getting preferences between dashers/entities in a batch
message BatchGetDasherPreferenceForEntityRequest {
  // list of queries/requests for the preferences
  repeated BatchGetDasherPreferenceQuery queries = 1;
  // entity type that the dashers are interacting with
  EntityType entity_type = 2;
  // preference type between the dashers/entities
  PreferenceType preference_type = 3;
  // look up by dasher/entity
  QueryBy query_type = 4;
}

// response for getting one preference between a dasher/entity
message GetDasherPreferenceForEntityResponse {
  // id of the dasher
  google.protobuf.Int64Value dasher_id = 1;
  // id of the entity
  google.protobuf.Int64Value entity_id = 2;
  // entity type that the dasher is interacting with
  EntityType entity_type = 3;
  // preference type between the dasher/entity
  PreferenceType preference_type = 4;
  // the time the relation was created at
  google.protobuf.Timestamp created_at = 5;
  // metadata about the preference
  google.protobuf.StringValue metadata = 6;
  // expiry time for the preference
  google.protobuf.Timestamp expires_at = 7;
  // optional description of the preference
  google.protobuf.StringValue description = 8;
  // category of the blocklist preference
  BlocklistCategory blocklist_category = 9;
  // user id of the creator of the preference
  reserved 10;
  reserved 'created_by_user_id';
  // service id of the service that created the preference
  reserved 11;
  reserved 'created_by_service_id';
  // severity of the preference category (if blocklist)
  Severity severity = 12;
  // source of the preference
  Source source = 13;
  // id of the entity that created this preference (i.e. user, merchant)
  google.protobuf.StringValue source_created_by_id = 14;
}

// response for getting the preferences between dashers/entities
message BatchGetDasherPreferenceForEntityResponse {
  // list of preferences that are in the response
  repeated GetDasherPreferenceForEntityResponse preferences = 1;
}

///////////////////////////////////////////
//    Common Dasher/Entity Preference Definitions    //
///////////////////////////////////////////

message DasherEntityPreferencePair {
  google.protobuf.Int64Value entityId = 1;
  google.protobuf.Int64Value dasherId = 2;
}

message DasherEntityPreferenceChange {
  DasherEntityPreferencePair data = 1;
  DasherEntityPreferenceStateChange status = 2;
}

enum DasherEntityPreferenceStateChange {
  UNKNOWN_STATUS = 0;
  ADD_SUCCEEDED = 1;
  ADD_FAILED = 3;
  REMOVE_SUCCEEDED = 2;
  REMOVE_FAILED = 4;
}

enum QueryBy {
  ALL = 0;
  DASHER = 1;
  ENTITY = 2;
}

message Error {
  int32 code = 1;
  string reason = 2;
}

// severity of the category of the preference
enum Severity {
  UNKNOWN_SEVERITY = 0;
  SEVERITY_LOW = 1;
  SEVERITY_MEDIUM = 2;
  SEVERITY_HIGH = 3;
}

// category of the preference
enum BlocklistCategory {
  UNKNOWN_CATEGORY = 0;
  SEXUAL_HARASSMENT = 1;
  INTOXICATED = 2;
  PHYSICAL_VIOLENCE_AND_DAMAGE = 3;
  FRAUD_AND_THEFT = 4;
  INAPPROPRIATE_BEHAVIOR = 5;
  FOOD_SAFETY = 6;
  HARASSMENT = 7;
  MISHANDLED_ORDER = 8;
  CHAT_MISCONDUCT = 9;
  OTHER_SAFETY_INCIDENT = 10;
  OTHER = 11;
}

enum Source {
  SOURCE_UNSPECIFIED = 0;
  DASHER_BLOCKLISTS_CONSOLE = 1;
  MERCHANT_PORTAL_BFF_RATING = 2;
  THQ_SUPPORT_REQUEST = 3;
}

enum SourceEntityType {
  SOURCE_ENTITY_TYPE_UNSPECIFIED = 0;
  SOURCE_ENTITY_TYPE_TYPE_USER_ID = 1;
  SOURCE_ENTITY_TYPE_MERCHANT_ID = 2;
}

message BlocklistCategoryDescription {
  // category of the blocklist preference
  BlocklistCategory category = 1;
  // description of the category
  string description = 2;
  // severity of the category
  Severity severity = 3;
}

// response for getting the blocklist categories
message GetBlocklistCategoriesResponse {
  // list of blocklist categories
  repeated BlocklistCategoryDescription categories = 1;
}
