syntax = "proto3";

// buf:lint:ignore DIRECTORY_SAME_PACKAGE
package task_service_rpc_async_pipeline.v1;

import "common/service_client_config.proto";
import "delivery_service/dasher_blacklist.proto";
import "delivery_service/dasher_preference.proto";
import "delivery_service/delivery_adjustments.proto";
import "delivery_service/delivery_core.proto";
import "delivery_service/delivery_fulfillment.proto";
import "delivery_service/delivery_set_mapping.proto";
import "delivery_service/delivery_state_change.proto";
import "delivery_service/eta_prediction.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.task_service_rpc_async_pipeline";

// assign rpc event
message AssignDeliveryEvent {
  // assign request
  delivery_service.core.AssignDeliveryRequest request = 1;
  // assign response
  delivery_service.core.AssignDeliveryResponse response = 2;
}

// getOrCreateDelivery rpc event
message GetOrCreateDeliveryEvent {
  // request
  delivery_service.core.CreateDeliveryRequest request = 1;
  // response
  delivery_service.core.CreateDeliveryResponse response = 2;
}

// getDeliveryById rpc event
message GetDeliveryByIdEvent {
  // request
  delivery_service.core.DeliveryRequest request = 1;
  //response
  delivery_service.core.DeliveryResponse response = 2;
}

// getDeliveryByUuid rpc event
message GetDeliveryByUuidEvent {
  // request
  delivery_service.core.GetDeliveryByUuidRequest request = 1;
  // response
  delivery_service.core.DeliveryResponse response = 2;
}

// PersistDropoffMetadata rpc event
message PersistDropoffMetadataEvent {
  // request
  delivery_service.delivery_fulfillment.v1.PersistDropoffMetadataRequest request = 1;
  // response
  delivery_service.delivery_fulfillment.v1.PersistDropoffMetadataResponse response = 2;
}

// PersistIdvMetadata rpc event
message PersistIdvMetadataEvent {
  // request
  delivery_service.delivery_fulfillment.v1.PersistIDVDropoffMetadataRequest request = 1;
  // response
  delivery_service.delivery_fulfillment.v1.PersistIDVDropoffMetadataResponse response = 2;
}

// PersistPickupVerifiedInfo rpc event
message PersistPickupVerifiedInfoEvent {
  // request
  delivery_service.delivery_fulfillment.v1.PersistPickupVerifiedInfoRequest request = 1;
  // response
  delivery_service.delivery_fulfillment.v1.PersistPickupVerifiedInfoResponse response = 2;
}

// UpdateOutOfStockStatus rpc Event
message UpdateOutOfStockStatusEvent {
  // request
  delivery_service.core.UpdateOutOfStockStatusRequest request = 1;
  // response
  delivery_service.core.UpdateOutOfStockStatusResponse response = 2;
}

// dasherConfirmDeliveries rpc event
message DasherConfirmDeliveriesEvent {
  // request
  delivery_service.core.DasherConfirmDeliveriesRequest request = 1;
  // response
  delivery_service.core.DasherConfirmDeliveriesResponse response = 2;
}

// dasherConfirmDelivery rpc event
message DasherConfirmDeliveryEvent {
  // request
  delivery_service.core.DasherConfirmDeliveryRequest request = 1;
  // response
  delivery_service.core.DasherConfirmDeliveryResponse response = 2;
}

// dasherConfirmAtStore rpc event
message DasherConfirmAtStoreEvent {
  // request
  delivery_service.core.DasherConfirmAtStoreRequest request = 1;
  // response
  delivery_service.core.DasherConfirmAtStoreResponse response = 2;
}

// dasherConfirmAtConsumer rpc event
message DasherConfirmAtConsumerEvent {
  // request
  delivery_service.core.DasherConfirmAtConsumerRequest request = 1;
  // response
  delivery_service.core.DasherConfirmAtConsumerResponse response = 2;
}

// pickUpDelivery rpc event
message PickUpDeliveryEvent {
  // request
  delivery_service.core.DeliveryPickUpRequest request = 1;
  // response
  delivery_service.core.DeliveryPickUpResponse response = 2;
}

// dropOffDelivery rpc event
message DropOffDeliveryEvent {
  // request
  delivery_service.core.DeliveryDropOffRequest request = 1;
  // response
  delivery_service.core.DeliveryDropOffResponse response = 2;
}

// cancelDeliveryV2 rpc event
message CancelDeliveryV2Event {
  // request
  delivery_service.core.CancelDeliveryRequestV2 request = 1;
  // response
  delivery_service.core.ActionResponse response = 2;
}

// updateOrderConfirmedTime rpc event
message UpdateOrderConfirmedTimeEvent {
  // request
  delivery_service.core.UpdateOrderConfirmedTimeRequest request = 1;
  // response
  delivery_service.core.UpdateOrderConfirmedTimeResponse response = 2;
}

// updateOrderReadyTime rpc event
message UpdateOrderReadyTimeEvent {
  // request
  delivery_service.core.UpdateOrderReadyTimeRequest request = 1;
  // response
  delivery_service.core.UpdateOrderReadyTimeResponse response = 2;
}

// updateOrderReadyTimeInBulk rpc event
message UpdateOrderReadyTimeInBulkEvent {
  // request
  delivery_service.core.UpdateOrderReadyTimeInBulkRequest request = 1;
  // response
  delivery_service.core.UpdateOrderReadyTimeInBulkResponse response = 2;
}

// consumerPickedUp rpc event
message ConsumerPickedUpEvent {
  // request
  delivery_service.core.ConsumerPickedUpRequest request = 1;
  // response
  delivery_service.core.ConsumerPickedUpResponse response = 2;
}

// getDeliveryAudienceInfo rpc event
message GetDeliveryAudienceInfoEvent {
  // request
  delivery_service.core.DeliveryRequest request = 1;
  // response
  delivery_service.core.DeliveryAudienceInfoResponse response = 2;
}

// updateDeliveryAudienceInfo rpc event
message UpdateDeliveryAudienceInfoEvent {
  // request
  delivery_service.core.UpdateDeliveryAudienceInfoRequest request = 1;
  // response
  delivery_service.core.UpdateDeliveryAudienceInfoResponse response = 2;
}

// unassignDelivery rpc event
message UnassignDeliveryEvent {
  // request
  delivery_service.core.UnassignDeliveryRequest request = 1;
  // response
  delivery_service.core.UnassignDeliveryResponse response = 2;
}

// getDeliveryUuidsToIdsMap rpc event
message GetDeliveryUuidsToIdsMapEvent {
  // request
  delivery_service.core.GetDeliveryUuidsToIdsMapRequest request = 1;
  // response
  delivery_service.core.GetDeliveryUuidsToIdsMapResponse response = 2;
}

// getDeliveryAssignmentConstraint rpc event
message GetDeliveryAssignmentConstraintEvent {
  // request
  delivery_service.core.GetDeliveryAssignmentConstraintRequest request = 1;
  // response
  delivery_service.core.GetDeliveryAssignmentConstraintResponse response = 2;
}

// updateDeliveryAssignmentConstraint rpc event
message UpdateDeliveryAssignmentConstraintEvent {
  // request
  delivery_service.core.UpdateDeliveryAssignmentConstraintRequest request = 1;
  // response
  google.protobuf.Empty response = 2;
}

// updateOrderConfirmedTimeAndPrepTime rpc event
message UpdateOrderConfirmedTimeAndPrepTimeEvent {
  // request
  delivery_service.core.UpdateOrderConfirmedTimeAndPrepTimeRequest request = 1;
  // response
  delivery_service.core.UpdateOrderConfirmedTimeAndPrepTimeResponse response = 2;
}

// getDeliveryOrderInfo rpc event
message GetDeliveryOrderInfoEvent {
  // request
  delivery_service.core.DeliveryRequest request = 1;
  // response
  delivery_service.core.DeliveryOrderInfoResponse response = 2;
}

// dasherArrivingAtStore rpc event
message DasherArrivingAtStoreEvent {
  // request
  delivery_service.core.DasherArrivingAtStoreRequest request = 1;
  // response
  delivery_service.core.DasherArrivingAtStoreResponse response = 2;
}

// dasherArrivingAtConsumer rpc event
message DasherArrivingAtConsumerEvent {
  // request
  delivery_service.core.DasherArrivingAtConsumerRequest request = 1;
  // response
  delivery_service.core.DasherArrivingAtConsumerResponse response = 2;
}

// getDeliveryIdsToUuidsMap rpc event
message GetDeliveryIdsToUuidsMapEvent {
  // request
  delivery_service.core.GetDeliveryIdsToUuidsMapRequest request = 1;
  // response
  delivery_service.core.GetDeliveryIdsToUuidsMapResponse response = 2;
}

// assignment service http events
message AssignmentHttpEvent {
  // request
  google.protobuf.StringValue request = 1;
  // response
  google.protobuf.StringValue response = 2;
  // event name
  AssignmentEventName assignment_event_name = 3;
  // error status code
  google.protobuf.StringValue error_status_code = 4;
}

// getDeliveriesByUuids rpc event
message GetDeliveriesByUuidsEvent {
  // request
  delivery_service.core.GetDeliveriesByUuidsRequest request = 1;
  // response
  delivery_service.core.GetDeliveriesByUuidsResponse response = 2;
}

// getDeliveriesByIds rpc event
message GetDeliveriesByIdsEvent {
  // request
  delivery_service.core.GetDeliveriesByIdsRequest request = 1;
  // response
  delivery_service.core.GetDeliveriesByIdsResponse response = 2;
}

// getDeliveryFulfillment rpc event
message GetDeliveryFulfillmentEvent {
  // request
  delivery_service.delivery_fulfillment.v1.GetDeliveryFulfillmentRequest request = 1;
  //response
  delivery_service.delivery_fulfillment.v1.GetDeliveryFulfillmentResponse response = 2;
}

// updateBatchId rpc event
message UpdateBatchIdEvent {
  // request
  delivery_service.core.UpdateBatchIdRequest request = 1;
  // response
  delivery_service.core.UpdateBatchIdResponse response = 2;
}

// IsReturnDeliveryEvent rpc event
message IsReturnDeliveryEvent {
  // request
  delivery_service.core.IsReturnDeliveryRequest request = 1;
  // response
  delivery_service.core.IsReturnDeliveryResponse response = 2;
}

// UpdateDeliveryMonetaryFields rpc event
message UpdateDeliveryMonetaryFieldsEvent {
  // request
  delivery_service.core.UpdateDeliveryMonetaryFieldsRequest request = 1;
  // response
  delivery_service.core.UpdateDeliveryMonetaryFieldsResponse response = 2;
}

// updateParkingSpotInfo rpc event
message UpdateParkingSpotInfoEvent {
  // request
  delivery_service.core.UpdateParkingSpotInfoRequest request = 1;
  // response
  google.protobuf.Empty response = 2;
}

//  getDeliveryByIdempotencyKey rpc event
message GetDeliveryByIdempotencyKeyEvent {
  // request
  delivery_service.core.GetDeliveryByIdempotencyKeyRequest request = 1;
  // response
  delivery_service.core.DeliveryResponse response = 2;
}

// updateMinAgeRequired rpc event
message UpdateMinAgeRequiredEvent {
  // request
  delivery_service.core.UpdateMinAgeRequiredRequest request = 1;
  // response
  delivery_service.core.UpdateMinAgeRequiredResponse response = 2;
}

// updateDropoffFlags rpc event
message UpdateDropoffFlagsEvent {
  // request
  delivery_service.core.UpdateDropoffFlagsRequest request = 1;
  // response
  delivery_service.core.UpdateDropoffFlagsResponse response = 2;
}

// verifyDelivery rpc event
message VerifyDeliveryEvent {
  // request
  delivery_service.core.DeliveryVerificationRequest request = 1;
  // response
  delivery_service.core.DeliveryVerificationResponse response = 2;
}

// consumerDeliveryReschedule rpc event
message ConsumerDeliveryRescheduleEvent {
  // request
  delivery_service.adjustments.v1.ConsumerDeliveryRescheduleRequest request = 1;
  // response
  delivery_service.adjustments.v1.ConsumerDeliveryRescheduleResponse response = 2;
}

// changeDeliveryAddressV3 rpc event
message ChangeDeliveryAddressV3Event {
  // request
  delivery_service.adjustments.v1.ChangeDeliveryAddressV3Request request = 1;
  // response
  delivery_service.adjustments.v1.ChangeDeliveryAddressV3Response response = 2;
}

// getDeliveryStateChangeByDeliveryId rpc event
message GetDeliveryStateChangeByDeliveryIdEvent {
  // request
  delivery_state_change.GetDeliveryStateChangeByDeliveryIdRequest request = 1;
  // response
  delivery_state_change.GetDeliveryStateChangeByDeliveryIdResponse response = 2;
}

// getDeliveryByIdForMerchantFinancialService rpc event
message GetDeliveryByIdForMerchantFinancialServiceEvent {
  // request
  delivery_service.core.DeliveryRequest request = 1;
  // response
  delivery_service.core.DeliveryForMerchantFinancialServiceResponse response = 2;
}

// hasContactlessDasherInstructions rpc event
message HasContactlessDasherInstructionsEvent {
  // request
  delivery_service.core.HasContactlessDasherInstructionsRequest request = 1;
  // response
  delivery_service.core.HasContactlessDasherInstructionsResponse response = 2;
}

// updateShouldBeManuallyAssigned rpc event
message UpdateShouldBeManuallyAssignedEvent {
  // request
  delivery_service.core.UpdateShouldBeManuallyAssignedRequest request = 1;
  // response
  delivery_service.core.UpdateShouldBeManuallyAssignedResponse response = 2;
}

// updateDeliveryIsDepot rpc event
message UpdateDeliveryIsDepotEvent {
  // request
  delivery_service.core.UpdateDeliveryIsDepotRequest request = 1;
  // response
  delivery_service.core.UpdateDeliveryIsDepotResponse response = 2;
}

// closeDelivery rpc event
message CloseDeliveryEvent {
  // request
  delivery_service.core.CloseDeliveryRequest request = 1;
  // response
  delivery_service.core.CloseDeliveryResponse response = 2;
}

// closeMerchantFulfilledDelivery rpc event
message CloseMerchantFulfilledDeliveryEvent {
  // request
  delivery_service.core.CloseMerchantFulfilledDeliveryRequest request = 1;
  // response
  delivery_service.core.CloseMerchantFulfilledDeliveryResponse response = 2;
}

// updateShiftId rpc event
message UpdateShiftIdEvent {
  // request
  delivery_service.core.UpdateShiftIdRequest request = 1;
  // response
  delivery_service.core.UpdateShiftIdResponse response = 2;
}

// updateDeliveryOrderProtocolType rpc event
message UpdateDeliveryOrderProtocolTypeEvent {
  // request
  delivery_service.core.UpdateDeliveryOrderProtocolTypeRequest request = 1;
  // response
  delivery_service.core.UpdateDeliveryOrderProtocolTypeResponse response = 2;
}

// updateDasherWaitUntil rpc event
message UpdateDasherWaitUntilEvent {
  // request
  delivery_service.core.UpdateDasherWaitUntilRequest request = 1;
  // response
  delivery_service.core.UpdateDasherWaitUntilResponse response = 2;
}

// updateCustomerUnavailableEscalatedAt rpc event
message UpdateCustomerUnavailableEscalatedAtEvent {
  // request
  delivery_service.core.UpdateCustomerUnavailableEscalatedAtRequest request = 1;
  // response
  google.protobuf.Empty response = 2;
}

// abandonDelivery rpc event
message AbandonDeliveryEvent {
  // request
  delivery_service.core.DeliveryAbandonRequest request = 1;
  // response
  delivery_service.core.DeliveryAbandonResponse response = 2;
}

// getDeliveryAbandonedInfo rpc event
message GetDeliveryAbandonedInfoEvent {
  // request
  delivery_service.core.GetDeliveryAbandonRequest request = 1;
  // response
  delivery_service.core.GetDeliveryAbandonResponse response = 2;
}

// revertDropOffDelivery rpc event
message RevertDropOffDeliveryEvent {
  // request
  delivery_service.core.RevertDeliveryDropOffRequest request = 1;
  // response
  delivery_service.core.RevertDeliveryDropOffResponse response = 2;
}

// revertDeliveryPickup rpc event
message RevertDeliveryPickupEvent {
  // request
  delivery_service.core.RevertDeliveryPickupRequest request = 1;
  // response
  delivery_service.core.RevertDeliveryPickupResponse response = 2;
}

// createAndSaveDefaultEtaPredictionV2 rpc event
message CreateAndSaveDefaultEtaPredictionV2Event {
  // request
  eta_prediction.CreateAndSaveDefaultEtaPredictionRequest request = 1;
  // response
  eta_prediction.ETAPredictionResponseV2 response = 2;
}

// getETAPredictionsByDeliveryIds rpc event
message GetETAPredictionsByDeliveryIdsEvent {
  // request
  eta_prediction.GetETAPredictionsByDeliveryIdsRequest request = 1;
  // response
  eta_prediction.GetETAPredictionsByDeliveryIdsResponse response = 2;
}

// updateETAPrediction rpc event
message UpdateETAPredictionV2Event {
  // request
  eta_prediction.UpdateETAPredictionRequest request = 1;
  // response
  eta_prediction.ETAPredictionResponseV2 response = 2;
}

// removeDasherPreferenceForEntity rpc event
message RemoveDasherPreferenceForEntityEvent {
  // request
  delivery_service.preference.v1.UpdateDasherPreferenceForEntityRequest request = 1;
  // response
  google.protobuf.Empty response = 2;
}

// addDasherPreferenceForEntity rpc event
message AddDasherPreferenceForEntityEvent {
  // request
  delivery_service.preference.v1.UpdateDasherPreferenceForEntityRequest request = 1;
  // response
  google.protobuf.Empty response = 2;
}

// batchGetDasherPreferenceForEntity rpc event
message BatchGetDasherPreferenceForEntityEvent {
  // request
  delivery_service.preference.v1.BatchGetDasherPreferenceForEntityRequest request = 1;
  // response
  delivery_service.preference.v1.BatchGetDasherPreferenceForEntityResponse response = 2;
}

// batchRemoveDasherPreferenceForEntity rpc event
message BatchRemoveDasherPreferenceForEntityEvent {
  // request
  delivery_service.preference.v1.BatchUpdateDasherPreferenceForEntityRequest request = 1;
  // response
  delivery_service.preference.v1.BatchUpdateDasherPreferenceForEntityResponse response = 2;
}

// batchAddDasherPreferenceForEntity rpc event
message BatchAddDasherPreferenceForEntityEvent {
  // request
  delivery_service.preference.v1.BatchUpdateDasherPreferenceForEntityRequest request = 1;
  // response
  delivery_service.preference.v1.BatchUpdateDasherPreferenceForEntityResponse response = 2;
}

// blacklistDashersForBusiness rpc event
message BlacklistDashersForBusinessEvent {
  // request
  delivery_service.blacklist.BlacklistDashersForBusinessRequest request = 1;
  // response
  google.protobuf.Empty response = 2;
}

// unblacklistDashersForBusiness rpc event
message UnblacklistDashersForBusinessEvent {
  // request
  delivery_service.blacklist.BlacklistDashersForBusinessRequest request = 1;
  // response
  google.protobuf.Empty response = 2;
}

// batchGetBusinessBlacklistedDasher rpc event
message BatchGetBusinessBlacklistedDasherEvent {
  // request
  delivery_service.blacklist.BatchGetBusinessBlacklistedDasherRequest request = 1;
  // response
  delivery_service.blacklist.GetBusinessBlacklistedDasherResponse response = 2;
}

// getDasherProximityInfo rpc event
message GetDasherProximityInfoEvent {
  // request
  delivery_service.core.GetDasherProximityInfoRequest request = 1;
  // response
  delivery_service.core.GetDasherProximityInfoResponse response = 2;
}

// hasReturnDelivery rpc event
message HasReturnDeliveryEvent {
  // request
  delivery_service.core.HasReturnDeliveryRequest request = 1;
  // response
  delivery_service.core.HasReturnDeliveryResponse response = 2;
}

// updateMerchantTransactionId rpc event
message UpdateMerchantTransactionIdEvent {
  // request
  delivery_service.core.UpdateMerchantTransactionIdRequest request = 1;
  // response
  delivery_service.core.UpdateMerchantTransactionIdResponse response = 2;
}

// getDeliveriesByBatchId rpc event
message GetDeliveriesByBatchIdEvent {
  // request
  delivery_service.core.GetDeliveriesByBatchIdRequest request = 1;
  // response
  delivery_service.core.GetDeliveriesByBatchIdResponse response = 2;
}

// getDeliveriesByQuotedDeliveryTime rpc event
message GetDeliveriesByQuotedDeliveryTimeEvent {
  // request
  delivery_service.core.GetDeliveriesByQuotedDeliveryTimeRequest request = 1;
  // response
  delivery_service.core.GetDeliveriesByQuotedDeliveryTimeResponse response = 2;
}

// getAudienceInfo rpc event
message GetAudienceInfoEvent {
  // request
  delivery_service.core.GetAudienceInfoRequest request = 1;
  // response
  delivery_service.core.DeliveryAudienceInfoResponse response = 2;
}

// getDeliveryIdsByRecipientUserIdFromAudienceInfo rpc event
message GetDeliveryIdsByRecipientUserIdFromAudienceInfoEvent {
  // request
  delivery_service.core.GetDeliveryIdsByRecipientUserIdFromAudienceInfoRequest request = 1;
  // response
  delivery_service.core.GetDeliveryIdsByRecipientUserIdFromAudienceInfoResponse response = 2;
}

// getETAPredictionById rpc event
message GetETAPredictionByIdEvent {
  // request
  eta_prediction.ETAPredictionRequest request = 1;
  // response
  eta_prediction.ETAPredictionResponse response = 2;
}

// getDeliverySetMappingByDeliveryId rpc event
message GetDeliverySetMappingByDeliveryId {
  // request
  delivery_set_mapping.GetDeliverySetMappingByDeliveryIdRequest request = 1;
  // response
  delivery_set_mapping.GetDeliverySetMappingByDeliveryIdResponse response = 2;
}

// storeConfirmOrderSuccess kafka event
message StoreConfirmOrderSuccess {
  // delivery id
  google.protobuf.Int64Value delivery_id = 1;
  // mxPickupInstructionsForDasher
  google.protobuf.StringValue mx_pickup_instructions_for_dasher = 2;
}

// orderTransmissionSuccess kafka event
message OrderTransmissionSuccess {
  // delivery id
  google.protobuf.Int64Value delivery_id = 1;
}

// orderTransmissionFailure kafka event
message OrderTransmissionFailure {
  // delivery id
  google.protobuf.Int64Value delivery_id = 1;
}

// orderPersistSuccess kafka event
message OrderPersistSuccess {
  // orderOperationCode
  google.protobuf.StringValue order_operation_code = 1;
  // consumer_id
  google.protobuf.Int64Value consumer_id = 2;
  // order items
  repeated delivery_service.core.DeliveryOrderItem items = 3;
  // contains alcohol
  google.protobuf.BoolValue contains_alcohol = 4;
}

// merchant orderReadyEvent kafka
message OrderReadyEvent {
  // merchant order lifecycle event
  reserved 1;
  reserved "merchant_order_event";
}

// merchant order picked up event
message OrderPickedUpEvent {
  // merchant order lifecycle event
  reserved 1;
  reserved "merchant_order_event";
}

// merchant order picked up by consumer
message OrderPickedUpByConsumerEvent {
  // merchant order lifecycle event
  reserved 1;
  reserved "merchant_order_event";
}

// merchant order not picked up
message OrderNotPickedUpEvent {
  // merchant order lifecycle event
  reserved 1;
  reserved "merchant_order_event";
}

// merchant order estimated store prep time update
message OrderEstimatedStorePrepTimeUpdateEvent {
  // merchant order lifecycle event
  reserved 1;
  reserved "merchant_order_event";
}

// merchant order onsite estimated prep time update
message OrderOnsiteEstimatedPrepTimeUpdateEvent {
  // merchant order lifecycle event
  reserved 1;
  reserved "merchant_order_event";
}

// merchant order delivery event
message MerchantOrderDeliveryEvent {
  // merchant order lifecycle event
  reserved 1;
  reserved "merchant_order_event";
}

// assignment event names
enum AssignmentEventName {
  reserved 19;
  reserved "ASSIGNMENT_EVENT_NAME_LIST_VERSIONED_LITE_PACKAGE_MAPPING_IDS";
  // make packaged assignment write
  ASSIGNMENT_EVENT_NAME_UNSPECIFIED = 0;
  // confirm receive write
  ASSIGNMENT_EVENT_NAME_CONFIRM_RECEIVE_V2 = 1;
  // confirm delivery write
  ASSIGNMENT_EVENT_NAME_CONFIRM_DELIVERY = 2;
  // dasher decline write
  ASSIGNMENT_EVENT_NAME_DASHER_DECLINE = 3;
  // dasher confirm at store write
  ASSIGNMENT_EVENT_NAME_DASHER_CONFIRM_AT_STORE = 4;
  // pick up write
  ASSIGNMENT_EVENT_NAME_PICK_UP_V2 = 5;
  // dasher confirm at consumer write
  ASSIGNMENT_EVENT_NAME_DASHER_CONFIRM_AT_CONSUMER = 6;
  // drop off write
  ASSIGNMENT_EVENT_NAME_DROP_OFF_V2 = 7;
  // get current shift route read
  ASSIGNMENT_EVENT_NAME_GET_CURRENT_SHIFT_ROUTE = 8;
  // active deliveries read
  ASSIGNMENT_EVENT_NAME_GET_ACTIVE_DELIVERIES_GIVEN_SHIFT_ID = 9;
  // active delivery packages read
  ASSIGNMENT_EVENT_NAME_GET_ACTIVE_DELIVERY_PACKAGES_GIVEN_SHIFT_ID = 10;
  // list dpm read
  ASSIGNMENT_EVENT_NAME_LIST_DELIVERY_PACKAGE_MAPPINGS = 11;
  // make packaged assignment write
  ASSIGNMENT_EVENT_NAME_MAKE_PACKAGE_ASSIGNMENT = 12;
  // get assignment read
  ASSIGNMENT_EVENT_NAME_GET_ASSIGNMENT = 13;
  // list packages read
  ASSIGNMENT_EVENT_NAME_LIST_PACKAGES = 14;
  // accept package write
  ASSIGNMENT_EVENT_NAME_ACCEPT_PACKAGE_V2 = 15;
  // unassign write
  ASSIGNMENT_EVENT_NAME_UNASSIGN = 16;
  // delivery package read
  ASSIGNMENT_EVENT_NAME_LIST_DELIVERY_PACKAGES = 17;
  // versioned dpm read
  ASSIGNMENT_EVENT_NAME_LIST_VERSIONED_PACKAGE_MAPPING_IDS = 18;
  // versioned lite dpm read
  ASSIGNMENT_EVENT_NAME_LIST_VERSIONED_LITE_PACKAGE_MAPPING = 20;
  // get assignment batch read
  ASSIGNMENT_EVENT_NAME_GET_ASSIGNMENT_BATCH = 21;
  // check pickup geo fence read
  ASSIGNMENT_EVENT_NAME_CHECK_PICKUP_GEO_FENCE = 22;
  // drop off check read
  ASSIGNMENT_EVENT_NAME_DROP_OFF_CHECK = 23;
  // escalate write
  ASSIGNMENT_EVENT_NAME_ESCALATE = 24;
  // revert pick up write
  ASSIGNMENT_EVENT_NAME_REVERT_PICK_UP = 25;
  // revert drop off write
  ASSIGNMENT_EVENT_NAME_REVERT_DROP_OFF = 26;
  // cancel deliveries write
  ASSIGNMENT_EVENT_NAME_CANCEL_DELIVERIES = 27;
  // list assignments from dpm read
  ASSIGNMENT_EVENT_NAME_LIST_ASSIGNMENTS_FROM_DPM = 28;
  // force assign to shift write
  ASSIGNMENT_EVENT_NAME_FORCE_ASSIGN_TO_SHIFT = 29;
  // abandon write
  ASSIGNMENT_EVENT_NAME_ABANDON = 30;
  // claim order place write
  ASSIGNMENT_EVENT_NAME_CLAIM_ORDER_PLACE = 31;
  // place order write
  ASSIGNMENT_EVENT_NAME_PLACE_ORDER = 32;
  // force assign multiple deliveries to shift write
  ASSIGNMENT_EVENT_NAME_FORCE_ASSIGN_DELIVERIES_TO_SHIFT = 33;
  // unassign deliveries write
  ASSIGNMENT_EVENT_NAME_UNASSIGN_DELIVERIES = 34;
  // create and acquire redis shift route lock write
  ASSIGNMENT_EVENT_NAME_CREATE_AND_ACQUIRE_REDIS_SHIFT_ROUTE_LOCK = 35;
  // release redis shift route lock write
  ASSIGNMENT_EVENT_NAME_RELEASE_REDIS_SHIFT_ROUTE_LOCK = 36;
  // fix corrupt route write
  ASSIGNMENT_EVENT_NAME_FIX_CORRUPT_SHIFT_ROUTE = 37;
  // batch get current route read
  ASSIGNMENT_EVENT_NAME_BATCH_GET_CURRENT_ROUTE = 38;
  // get dynamic times given shift id read
  ASSIGNMENT_EVENT_NAME_GET_DYNAMIC_TIMES_GIVEN_SHIFT_ID = 39;
  // post dasher events write
  ASSIGNMENT_EVENT_NAME_DASHER_EVENTS = 40;
  // post dasher support requests write
  ASSIGNMENT_EVENT_NAME_DASHER_SUPPORT_REQUESTS = 41;
  // pick up write
  ASSIGNMENT_EVENT_NAME_PICK_UP_V3 = 42;
}

// grpc event proto definition
message GrpcEvent {
  // delivery_id
  google.protobuf.Int64Value delivery_id = 1;
  // assignment_id
  google.protobuf.Int64Value assignment_id = 92;
  // shift_id
  google.protobuf.Int64Value shift_id = 93;
  // assignment_processed_at
  google.protobuf.Timestamp assignment_processed_at = 95;
  // kafka events
  oneof event {
    // assign rpc event
    AssignDeliveryEvent assign_delivery_event = 2;
    // getOrCreateDelivery rpc event
    GetOrCreateDeliveryEvent get_or_create_delivery_event = 3;
    // getDeliveryById rpc event
    GetDeliveryByIdEvent get_delivery_by_id = 4;
    // getDeliveryByUuid rpc event
    GetDeliveryByUuidEvent get_delivery_by_uuid = 5;
    // deprecated field
    DasherConfirmDeliveryEvent dasher_confirm_delivery = 6 [deprecated = true];
    // dasherConfirmAtStore rpc event
    DasherConfirmAtStoreEvent dasher_confirm_at_store = 7;
    // dasherConfirmAtConsumer rpc event
    DasherConfirmAtConsumerEvent dasher_confirm_at_consumer = 8;
    // pickUpDelivery rpc event
    PickUpDeliveryEvent pick_up_delivery = 9;
    // dropOffDelivery rpc event
    DropOffDeliveryEvent drop_off_delivery = 10;
    // cancelDeliveryV2 rpc event
    CancelDeliveryV2Event cancel_delivery_v2 = 11;
    // updateOrderConfirmedTime rpc event
    UpdateOrderConfirmedTimeEvent update_order_confirmed_time = 12;
    // updateOrderReadyTime rpc event
    UpdateOrderReadyTimeEvent update_order_ready_time = 13;
    // consumerPickedUp rpc event
    ConsumerPickedUpEvent consumer_picked_up = 14;
    // getDeliveryAudienceInfo rpc event
    GetDeliveryAudienceInfoEvent get_delivery_audience_info = 15;
    // updateDeliveryAudienceInfo rpc event
    UpdateDeliveryAudienceInfoEvent update_delivery_audience_info = 16;
    // getDeliveryOrderInfo rpc event
    GetDeliveryOrderInfoEvent get_order_info = 17;
    // unassignDelivery rpc event
    UnassignDeliveryEvent unassign_delivery = 18;
    // getDeliveryUuidsToIdsMap rpc event
    GetDeliveryUuidsToIdsMapEvent get_delivery_uuids_to_ids_map = 19;
    // getDeliveryAssignmentConstraint rpc event
    GetDeliveryAssignmentConstraintEvent get_delivery_assignment_constraint = 20;
    // updateDeliveryAssignmentConstraint rpc event
    UpdateDeliveryAssignmentConstraintEvent update_delivery_constraint = 21;
    // updateOrderConfirmedTimeAndPrepTime rpc event
    UpdateOrderConfirmedTimeAndPrepTimeEvent update_order_confirmed_time_and_prep_time = 22;
    // dasherArrivingAtStore rpc event
    DasherArrivingAtStoreEvent dasher_arriving_at_store = 23;
    // dasherArrivingAtConsumer rpc event
    DasherArrivingAtConsumerEvent dasher_arriving_at_consumer = 24;
    // getDeliveryIdsToUuidsMap rpc event
    GetDeliveryIdsToUuidsMapEvent get_delivery_ids_to_uuids_map = 25;
    // dasherConfirmDeliveries rpc event
    DasherConfirmDeliveriesEvent dasher_confirm_deliveries = 26;
    // assignment service
    AssignmentHttpEvent assignment_http_event = 27;
    // getDeliveriesByUuids rpc event
    GetDeliveriesByUuidsEvent get_deliveries_by_uuids = 28;
    // getDeliveriesByIds rpc event
    GetDeliveriesByIdsEvent get_deliveries_by_ids = 29;
    // getDeliveryFulfillment rpc event
    GetDeliveryFulfillmentEvent get_delivery_fulfillment = 30;
    // updateBatchId rpc event
    UpdateBatchIdEvent update_batch_id = 31;
    // isReturnDelivery rpc event
    IsReturnDeliveryEvent is_return_delivery = 32;
    // updateDeliveryMonetaryFields rpc event
    UpdateDeliveryMonetaryFieldsEvent update_delivery_monetary_fields = 33;
    // updateParkingSpotInfo rpc event
    UpdateParkingSpotInfoEvent update_parking_spot_info = 34;
    // getDeliveryByIdempotencyKey rpc event
    GetDeliveryByIdempotencyKeyEvent get_delivery_by_idempotency_key = 35;
    // hasContactlessDasherInstructions rpc event
    HasContactlessDasherInstructionsEvent has_contactless_dasher_instructions = 36;
    // updateMinAgeRequired rpc event
    UpdateMinAgeRequiredEvent update_min_age_required = 37;
    // updateDropoffFlags rpc event
    UpdateDropoffFlagsEvent update_dropoff_flags = 38;
    // verifyDelivery rpc event
    VerifyDeliveryEvent verify_delivery = 39;
    // consumerDeliveryReschedule rpc event
    ConsumerDeliveryRescheduleEvent consumer_delivery_reschedule = 40;
    // changeDeliveryAddressV3 rpc event
    ChangeDeliveryAddressV3Event change_delivery_address_v3 = 41;
    // getDeliveryStateChangeByDeliveryId rpc event
    GetDeliveryStateChangeByDeliveryIdEvent delivery_state_change_by_delivery_id = 42;
    // getDeliveryByIdForMerchantFinancialService rpc event
    GetDeliveryByIdForMerchantFinancialServiceEvent get_delivery_by_id_for_mfs = 43;
    // updateShouldBeManuallyAssigned rpc event
    UpdateShouldBeManuallyAssignedEvent update_should_manually_assigned = 44;
    // updateDeliveryIsDepot rpc event
    UpdateDeliveryIsDepotEvent update_delivery_is_depot = 45;
    // closeDelivery rpc event
    CloseDeliveryEvent close_delivery = 46;
    // closeMerchantFulfilledDelivery rpc event
    CloseMerchantFulfilledDeliveryEvent close_merchant_fulfilled_delivery = 47;
    // updateShiftId rpc event
    UpdateShiftIdEvent update_shift_id = 48;
    // updateDeliveryOrderProtocolType rpc event
    UpdateDeliveryOrderProtocolTypeEvent update_delivery_order_protocol_type = 49;
    // updateDasherWaitUntil rpc event
    UpdateDasherWaitUntilEvent update_dasher_wait_until = 50;
    // updateCustomerUnavailableEscalatedAt rpc event
    UpdateCustomerUnavailableEscalatedAtEvent update_customer_unavailable_escalated_at = 51;
    // abandonDelivery rpc event
    AbandonDeliveryEvent abandon_delivery = 52;
    // getDeliveryAbandonedInfo rpc event
    GetDeliveryAbandonedInfoEvent get_delivery_abandon_info = 53;
    // revertDropOffDelivery rpc event
    RevertDropOffDeliveryEvent revert_dropoff_delivery = 54;
    // revertDeliveryPickup rpc event
    RevertDeliveryPickupEvent revert_delivery_pickup = 55;
    // createAndSaveDefaultEtaPredictionV2 rpc event
    CreateAndSaveDefaultEtaPredictionV2Event create_and_save_default_eta_prediction_v2 = 56;
    // getETAPredictionsByDeliveryIds rpc event
    GetETAPredictionsByDeliveryIdsEvent get_eta_predictions_by_delivery_ids = 57;
    // updateETAPredictionV2 rpc event
    UpdateETAPredictionV2Event update_eta_prediction_v2 = 58;
    // removeDasherPreferenceForEntity rpc event
    RemoveDasherPreferenceForEntityEvent remove_dasher_preference_for_entity = 59;
    // addDasherPreferenceForEntity rpc event
    AddDasherPreferenceForEntityEvent add_dasher_preference_for_entity = 60;
    // batchGetDasherPreferenceForEntity rpc event
    BatchGetDasherPreferenceForEntityEvent batch_get_dasher_preference_for_entity = 61;
    // batchRemoveDasherPreferenceForEntity rpc event
    BatchRemoveDasherPreferenceForEntityEvent batch_remove_dasher_preference_for_entity = 62;
    // batchAddDasherPreferenceForEntity rpc event
    BatchAddDasherPreferenceForEntityEvent batch_add_dasher_preference_for_entity = 63;
    // blacklistDashersForBusiness rpc event
    BlacklistDashersForBusinessEvent blacklist_dashers_for_business = 64;
    // unblacklistDashersForBusiness rpc event
    UnblacklistDashersForBusinessEvent un_blacklist_dashers_for_business = 65;
    // batchGetBusinessBlacklistedDasher rpc event
    BatchGetBusinessBlacklistedDasherEvent batch_get_business_black_listed_dasher = 66;
    // getDasherProximityInfo rpc event
    GetDasherProximityInfoEvent get_dasher_proximity_info = 67;
    // hasReturnDelivery rpc event
    HasReturnDeliveryEvent has_return_event = 68;
    // updateMerchantTransactionId rpc event
    UpdateMerchantTransactionIdEvent update_merchant_transaction_id = 69;
    // getDeliveriesByBatchId rpc event
    GetDeliveriesByBatchIdEvent get_deliveries_by_batch_id = 70;
    // getDeliveriesByQuotedDeliveryTime rpc event
    GetDeliveriesByQuotedDeliveryTimeEvent get_deliveries_by_quoted_time = 71;
    // getAudienceInfo rpc event
    GetAudienceInfoEvent get_audience_info = 72;
    // getDeliveryIdsByRecipientUserIdFromAudienceInfo rpc event
    GetDeliveryIdsByRecipientUserIdFromAudienceInfoEvent get_deliveries_by_recipient_user_id_from_audience_info = 73;
    // getETAPredictionById rpc event
    GetETAPredictionByIdEvent get_prediction_by_id = 74;
    // getDeliverySetMappingByDeliveryId rpc event
    GetDeliverySetMappingByDeliveryId get_delivery_set_mapping_by_delivery_id = 75;
    // StoreConfirmOrderSuccess kafka event
    StoreConfirmOrderSuccess store_confirm_order_success = 77;
    // orderTransmissionSuccess kafka event
    OrderTransmissionSuccess order_transmission_success = 78;
    // orderTransmissionFailure kafka event
    OrderTransmissionFailure order_transmission_failure = 79;
    // orderPersistSuccess kafka event
    OrderPersistSuccess order_persist_success = 80;
    // merchant orderReadyEvent kafka
    OrderReadyEvent order_ready_event = 81 [deprecated = true];
    // merchant order picked up event
    OrderPickedUpEvent order_picked_up_event = 82 [deprecated = true];
    // merchant order picked up by consumer
    OrderPickedUpByConsumerEvent order_picked_up_by_consumer_event = 83 [deprecated = true];
    // merchant order not picked up
    OrderNotPickedUpEvent order_not_picked_up_event = 84 [deprecated = true];
    // merchant order estimated store prep time update
    OrderEstimatedStorePrepTimeUpdateEvent order_estimated_store_prep_time_update = 85 [deprecated = true];
    // merchant order onsite estimated prep time update
    OrderOnsiteEstimatedPrepTimeUpdateEvent order_onsite_estimated_prep_time_update = 86 [deprecated = true];
    // merchant order delivery event
    MerchantOrderDeliveryEvent merchant_order_delivery_event = 87;
    // updateOrderReadyTimeInBulk rpc event
    UpdateOrderReadyTimeInBulkEvent update_order_ready_time_in_bulk = 88;
    // persistIdvMetadata rpc event
    PersistDropoffMetadataEvent persist_dropoff_metadata_event = 89;
    // persistIdvMetadata rpc event
    PersistIdvMetadataEvent persist_idv_metadata_event = 90;
    // updateOutOfStock rpc event
    UpdateOutOfStockStatusEvent update_out_of_stock_status_event = 91;
    // PersistPickupVerifiedInfoEvent rpc event
    PersistPickupVerifiedInfoEvent persist_pickup_verified_info_event = 94;
  }
  // error status code
  google.protobuf.StringValue error_status_code = 76;
}
