syntax = "proto3";

package travel_service.v1;

import "common/common.proto";
import "common/service_client_config.proto";
import "common/trip.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_outer_classname = "TRAVEL_SERVICE";
option java_package = "com.doordash.rpc.travel.service";

// Note: The APIs from Travel Service v1 will be deprecated by H1 2024.
// Travel Service v2 is defined in https://github.com/doordash/services-protobuf/blob/master/protos/travel_service.v2/travel_v2.proto
// TravelService is responsible for eta and routing platform apis inside Doordash.
service TravelService {
  option (service_client.client_config).service_name = "geo-intelligence";
  option (service_client.client_config).service_app = "web-travel";

  // rpc gets distance duration and polylines for given start and end lat/long coordinates for batched requests
  // DEPRECATED - please consider upgrading to use Travel Client Library: https://tinyurl.com/53p68mwt
  rpc Directions(DirectionsRequest) returns (DirectionsResponse) {
    option deprecated = true;
    //Adopting Hermes. https://doordash.atlassian.net/wiki/spaces/KP/pages/1869515134/Adopting+Hermes+Service+Reliability+Options
    option (service_client.client_method_config).response_attempt_timeout_millis = 500;
    option (service_client.client_method_config).retry_config.max_attempts = 1;
    option (service_client.client_method_config).circuit_breaker_config.failure_rate_threshold = 0.2;
    option (service_client.client_method_config).circuit_breaker_config.minimum_request_threshold = 50;
    option (service_client.client_method_config).circuit_breaker_config.counter_sliding_window_millis = 60000;
    option (service_client.client_method_config).circuit_breaker_config.circuit_open_window_millis = 30000;
  }

  // rpc gets travel distance and duration for given start and end lat/long coordinates for batched requests.
  // This API is strongly preferred over the Directions API whenever possible.
  // DEPRECATED - please consider upgrading to use Travel Client Library: https://tinyurl.com/53p68mwt
  rpc EstimateTravelInfo(EstimateTravelInfoRequest) returns (EstimateTravelInfoResponse) {
    option deprecated = true;
    option (service_client.client_method_config).response_attempt_timeout_millis = 500;
    option (service_client.client_method_config).retry_config.max_attempts = 1;
    option (service_client.client_method_config).circuit_breaker_config.failure_rate_threshold = 0.2;
    option (service_client.client_method_config).circuit_breaker_config.minimum_request_threshold = 50;
    option (service_client.client_method_config).circuit_breaker_config.counter_sliding_window_millis = 60000;
    option (service_client.client_method_config).circuit_breaker_config.circuit_open_window_millis = 30000;
  }

  // rpc gets handoff time for a delivery
  // DEPRECATED - please consider upgrading to use Travel Client Library: https://tinyurl.com/53p68mwt
  rpc HandoffTime(HandoffTimeRequest) returns (HandoffTimeResponse) {
    option deprecated = true;
    option (service_client.client_method_config).response_attempt_timeout_millis = 300;
    option (service_client.client_method_config).retry_config.max_attempts = 1;
    option (service_client.client_method_config).circuit_breaker_config.failure_rate_threshold = 0.2;
    option (service_client.client_method_config).circuit_breaker_config.minimum_request_threshold = 50;
    option (service_client.client_method_config).circuit_breaker_config.counter_sliding_window_millis = 60000;
    option (service_client.client_method_config).circuit_breaker_config.circuit_open_window_millis = 30000;
  }

  // rpc gets straight line travel estimate between two points
  // DEPRECATED - please consider upgrading to use Travel Client Library: https://tinyurl.com/53p68mwt
  rpc StraightLineTravelEstimate(StraightLineTravelEstimateRequest) returns (StraightLineTravelEstimateResponse) {
    option deprecated = true;
    option (service_client.client_method_config).response_attempt_timeout_millis = 300;
    option (service_client.client_method_config).retry_config.max_attempts = 1;
    option (service_client.client_method_config).circuit_breaker_config.failure_rate_threshold = 0.2;
    option (service_client.client_method_config).circuit_breaker_config.minimum_request_threshold = 50;
    option (service_client.client_method_config).circuit_breaker_config.counter_sliding_window_millis = 60000;
    option (service_client.client_method_config).circuit_breaker_config.circuit_open_window_millis = 30000;
  }

  // rpc gets distance and duration for batched requests
  // DEPRECATED - please consider upgrading to use Travel Client Library: https://tinyurl.com/53p68mwt
  rpc TravelEstimate(TravelEstimateRequest) returns (TravelEstimateResponse) {
    option deprecated = true;
    option (service_client.client_method_config).response_attempt_timeout_millis = 300;
    option (service_client.client_method_config).retry_config.max_attempts = 1;
    option (service_client.client_method_config).circuit_breaker_config.failure_rate_threshold = 0.2;
    option (service_client.client_method_config).circuit_breaker_config.minimum_request_threshold = 50;
    option (service_client.client_method_config).circuit_breaker_config.counter_sliding_window_millis = 60000;
    option (service_client.client_method_config).circuit_breaker_config.circuit_open_window_millis = 30000;
  }

  // rpc get isochrone area
  rpc IsochroneArea(IsochroneAreaRequest) returns (IsochroneAreaResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 3000; //can be adjusted lower
    option (service_client.client_method_config).retry_config.max_attempts = 2;
    option (service_client.client_method_config).circuit_breaker_config.failure_rate_threshold = 0.2;
    option (service_client.client_method_config).circuit_breaker_config.minimum_request_threshold = 50;
    option (service_client.client_method_config).circuit_breaker_config.counter_sliding_window_millis = 60000;
    option (service_client.client_method_config).circuit_breaker_config.circuit_open_window_millis = 30000;
  }

  // rpc get isodistance area
  rpc IsodistanceArea(IsodistanceAreaRequest) returns (IsodistanceAreaResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 3000; //can be adjusted lower
    option (service_client.client_method_config).retry_config.max_attempts = 2;
    option (service_client.client_method_config).circuit_breaker_config.failure_rate_threshold = 0.2;
    option (service_client.client_method_config).circuit_breaker_config.minimum_request_threshold = 50;
    option (service_client.client_method_config).circuit_breaker_config.counter_sliding_window_millis = 60000;
    option (service_client.client_method_config).circuit_breaker_config.circuit_open_window_millis = 30000;
  }
}

// message that denotes coordinate with lat and long info
message Coordinate {
  // latitude
  google.protobuf.DoubleValue lat = 1;
  // longitude
  google.protobuf.DoubleValue lng = 2;
}

// Batched Requests proto for Directions
message DirectionsRequest {
  // Precision Tier for requests
  enum PrecisionTier {
    // If left unspecified, service will assume high precision
    PRECISION_TIER_UNSPECIFIED = 0; // default value if not provided is high precision
    // High Precision vendors, e.g google, mapbox
    PRECISION_TIER_HIGH_PRECISION = 1;
    // Low Precision vendors, e.g Alphadash, polylines and routes will not be returned for this tier
    PRECISION_TIER_LOW_PRECISION = 2;
  }

  // Individual message for TravelInfo
  message TravelRequest {
    // origin point of travel
    Coordinate origin = 1;
    // destination point of travel
    Coordinate destination = 2;
    // waypoints that need to be traversed from origin to dest
    repeated Coordinate waypoints = 3;
    // Vehicle mode
    TravelMode travel_mode = 4;
    // timestamp (UTC) when travel begins.  If left empty, current UTC time will be used
    google.protobuf.Timestamp departure_time = 5;
    // trip ID
    trip.v1.TripIdentifier trip_id = 6;
  }

  // request context to know client and use case within the client. This mssg is primarily used for observatibility
  message RequestContext {
    // tag string to track use-cases behind a prediction. Each client can have multiple use cases
    string use_case = 1;
    // tag string to help identify the calling service
    string caller_service_name = 2;
  }

  // requested precision_tier
  PrecisionTier precision_tier = 1;

  // batched requests
  repeated TravelRequest requests = 2;

  // Parameter to understand client
  RequestContext request_context = 3;

  // requested travel_vendor
  TravelVendor travel_vendor = 4;
}

// Batched Response proto for Directions
message DirectionsResponse {
  // Individual Travel Response
  message TravelResponse {
    // In Seconds
    google.protobuf.Int64Value duration_seconds = 1;
    // In Meters
    google.protobuf.Int64Value distance_meters = 2;
    // Encoded Polyline. Polyline are only available for successful high precision tier requests
    google.protobuf.StringValue encoded_polyline = 3;
    // Response Status
    Status status = 4;
    // Which travel vendor was used
    TravelVendor travel_vendor = 5;
    // Origin and destination of each route leg
    repeated RouteLeg route_legs = 6;
    // Is there a toll on the route
    google.protobuf.BoolValue has_toll = 7;
    // viewport bounding box of polyline
    Bounds bounds = 8;
  }

  // Batched Responses
  repeated TravelResponse travel_responses = 1;
}

// Travel Vendor info
enum TravelVendor {
  // If left unspecified, google maps directions api was used
  TRAVEL_VENDOR_UNSPECIFIED = 0;
  //Google
  TRAVEL_VENDOR_GOOGLE_MAPS = 1;
  // Alphadash
  TRAVEL_VENDOR_ALPHA_DASH = 2;
  // Next Billion
  TRAVEL_VENDOR_NEXT_BILLION = 3;
  // Haversine
  TRAVEL_VENDOR_HAVERSINE = 4;
  // Vincenty
  TRAVEL_VENDOR_VINCENTY = 5;
  // OSRM
  TRAVEL_VENDOR_OSRM = 6;
}

// Mode of Travel
enum TravelMode {
  // service will assume car if left unspecified
  TRAVEL_MODE_UNSPECIFIED = 0;
  // Car
  TRAVEL_MODE_CAR = 1;
  // Bicycle
  TRAVEL_MODE_BICYCLE = 2;
  // Walking
  TRAVEL_MODE_WALKING = 3;
  // Scooter
  TRAVEL_MODE_SCOOTER = 4;
  // Motorcycle
  TRAVEL_MODE_MOTORCYCLE = 5;
  // Robot
  TRAVEL_MODE_ROBOT = 6;
  // EBike
  TRAVEL_MODE_EBIKE = 7;
}

// Response Status Type
enum Status {
  // default status
  STATUS_UNSPECIFIED = 0;
  // Successful request
  STATUS_OK = 1;
  // Successful request but fallback was used
  STATUS_OK_WITH_FALLBACK = 2;
  // Request yielded zero results
  STATUS_ZERO_RESULTS = 3;
  // Request returned Not Found Response
  STATUS_NOT_FOUND = 4;
  // Request exceeds daily limit for client
  STATUS_OVER_DAILY_LIMIT = 5;
  // Request exceeds daily limit for client
  STATUS_OVER_QUERY_LIMIT = 6;
  // Request was denied because of wrong credentials
  STATUS_REQUEST_DENIED = 7;
  // Invalid Request
  STATUS_INVALID_REQUEST = 8;
  // The maximum allowed number of waypoints is 25, plus the origin and destination or else the status below
  STATUS_MAX_WAYPOINTS_EXCEEDED = 9;
  // Indicates the requested route is too long and cannot be processed. This error occurs when more complex directions are returned
  STATUS_MAX_ROUTE_LENGTH_EXCEEDED = 10;
  // default status chosen if error is not identified
  STATUS_UNKNOWN_ERROR = 11;
}

// Route Leg
message RouteLeg {
  // origin of the leg
  Coordinate start_location = 1;
  // destination of the leg
  Coordinate end_location = 2;
  // steps within the route leg
  repeated Step steps = 3;
}

// Steps
message Step {
  // step polyline - only available for successful high precision requests
  google.protobuf.StringValue step_polyline = 1;
}

// Bounds
message Bounds {
  // northeast boundary
  Coordinate northeast = 1;
  // southwest boundary
  Coordinate southwest = 2;
}

// Batched Requests proto for EstimateTravelInfo
message EstimateTravelInfoRequest {
  // Individual message for estimation requests
  message EstimationRequest {
    // origin point of travel
    Coordinate origin = 1;
    // destination point of travel
    Coordinate destination = 2;
    // Vehicle mode
    TravelMode travel_mode = 3;
    // timestamp (UTC) when travel begins.  If left empty, current UTC time will be used
    google.protobuf.Timestamp departure_time = 4;
    // trip ID
    trip.v1.TripIdentifier trip_id = 5;
  }

  // request context to know client and use case within the client. This mssg is primarily used for observatibility
  message RequestContext {
    // tag string to track use-cases behind a prediction. Each client can have multiple use cases
    string use_case = 1;
    // tag string to help identify the calling service
    string caller_service_name = 2;
  }

  // batched requests
  repeated EstimationRequest requests = 1;

  // Parameter to understand client
  RequestContext request_context = 2;
}

// Batched Response proto for EstimateTravelInfo
message EstimateTravelInfoResponse {
  // Individual Estimation Response
  message EstimationResponse {
    // Response Status
    Status status = 1;
    // In Seconds
    google.protobuf.Int64Value duration_seconds = 2;
    // In Meters
    google.protobuf.Int64Value distance_meters = 3;
    // Is there a toll on the route
    google.protobuf.BoolValue has_toll = 4;
  }

  // Batched Responses
  repeated EstimationResponse estimation_responses = 1;
}

// Request object for handoff time estimation
message HandoffTimeRequest {
  // Individual Handoff Estimate Request
  message HandoffEstimateRequest {
    // delivery ID
    google.protobuf.StringValue delivery_id = 1;
    // total items in order
    google.protobuf.Int64Value total_items = 2;
    // consumer ID
    google.protobuf.StringValue consumer_id = 3;
  }
  // version of the handoff time estimation
  google.protobuf.StringValue version = 1;
  // handoff estimate requests
  repeated HandoffEstimateRequest handoff_estimate_requests = 2;
}

// Response object for handoff time estimation
message HandoffTimeResponse {
  // Handoff estimate
  message HandoffEstimate {
    // delivery ID
    google.protobuf.StringValue delivery_id = 1;
    // seconds it takes for a dasher to hand off an order
    google.protobuf.Int64Value handoff_time_seconds = 2;
  }
  // version of the handoff time estimation
  google.protobuf.StringValue version = 1;
  // handoff estimates for all deliveries in the request
  repeated HandoffEstimate handoff_estimates = 2;
}

// Request object for each straight line duration estimation
message StraightLineTravelEstimateInfo {
  // From coordinate
  Coordinate from_coordinate = 1;
  // To coordinate
  Coordinate to_coordinate = 2;
  // Starting point ID
  google.protobuf.StringValue starting_point_id = 3;
  // Travel mode
  TravelMode travel_mode = 4;
}

// Request object for batch of straight line duration estimation
message StraightLineTravelEstimateRequest {
  // Version of the travel estimate
  google.protobuf.StringValue version = 1;
  // Repeated travel estimation requests
  repeated StraightLineTravelEstimateInfo travel_estimate_info = 2;
}

// Response object for straight line duration estimation
message StraightLineTravelEstimateResponse {
  // Each travel estimate response
  message StraightLineTravelEstimate {
    // Request attributes used for identification
    StraightLineTravelEstimateInfo travel_estimate_info = 1;
    // Travel estimate duration
    google.protobuf.Duration travel_estimate_duration = 2;
    // Travel estimate distance
    google.protobuf.FloatValue travel_estimate_distance_meters = 3;
  }
  // Version of the travel estimate
  google.protobuf.StringValue version = 1;
  // Repeated travel estimates
  repeated StraightLineTravelEstimate travel_estimates = 2;
}

// Batched request object for travel estimates
message TravelEstimateRequest {
  // Version of the travel estimate
  common.SemanticVersion version = 1;
  // Batched travel estimate requests
  repeated TravelEstimateInfo travel_estimate_info = 2;
  // Use case for the response data
  google.protobuf.StringValue use_case = 3;
}

// Information required in each travel estimate request
message TravelEstimateInfo {
  // From coordinate
  Coordinate from_coordinate = 1;
  // To coordinate
  Coordinate to_coordinate = 2;
  // Starting point ID
  google.protobuf.StringValue starting_point_id = 3;
  // Travel mode
  TravelMode travel_mode = 4;
}

// Travel estimate response
message TravelEstimateResponse {
  // Each travel estimate response element
  message TravelEstimate {
    // Request attributes used for identification
    TravelEstimateInfo travel_estimate_info = 1;
    // Travel estimate duration
    google.protobuf.Duration travel_estimate_duration = 2;
    // Travel estimate distance
    google.protobuf.FloatValue travel_estimate_distance_meters = 3;
  }
  // Version of the travel estimate
  common.SemanticVersion version = 1;
  // Batched response
  repeated TravelEstimate travel_estimates = 2;
}

// Isodistance polygon for a given distance
message IsodistanceArea {
  // Distance in meters
  google.protobuf.DoubleValue distance_in_meters = 1;
  // Isodistance polygon for the given distance
  google.protobuf.StringValue geometry = 2; // GeoJson geometry
}

// Request to get an isodistance polygon at a given location
message IsodistanceAreaRequest {
  // Coordinate of location - lat, long
  Coordinate location = 1;
  // List of distance in meters
  repeated google.protobuf.DoubleValue distance_in_meters = 2;
}

// Response with isodistance polygon at a location
message IsodistanceAreaResponse {
  // Coordinate of location - lat, long
  Coordinate location = 1;
  // List of isodistance polygons for various distances
  repeated IsodistanceArea isodistance_area = 2;
  // Created at timestamp
  google.protobuf.Timestamp created_at = 3;
  // Updated at timestamp
  google.protobuf.Timestamp updated_at = 4;
}

// Isochrone polygon for a given duration
message IsochroneArea {
  // Duration in seconds
  google.protobuf.DoubleValue duration_in_seconds = 1;
  // Isochrone polygon for the given duration
  google.protobuf.StringValue geometry = 2; // GeoJson geometry
}

// Request to get an isochrone polygon at a given location
message IsochroneAreaRequest {
  // Coordinate of location - lat, long
  Coordinate location = 1;
  // List of duration in seconds
  repeated google.protobuf.DoubleValue duration_in_seconds = 2;
}

// Response with isochrone polygon at a location
message IsochroneAreaResponse {
  // Coordinate of location - lat, long
  Coordinate location = 1;
  // List of isochrone polygons for various durations
  repeated IsochroneArea isochrone_area = 2;
  // Created at timestamp
  google.protobuf.Timestamp created_at = 3;
  // Updated at timestamp
  google.protobuf.Timestamp updated_at = 4;
}
