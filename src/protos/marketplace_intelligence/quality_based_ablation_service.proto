syntax = "proto3";
package marketplace_intelligence.v1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "marketplace_intelligence/action.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.marketplace_intelligence";

//QualityBasedAblationService (QBAS) Event
message QualityBasedAblationEvent {
  //timestamp at which QBAS determines that action should be taken
  google.protobuf.Timestamp created_at = 1;
  //store id
  int64 store_id = 2;
  //action type: Ablation, Permanent Deactivation, Unablated
  string action_type = 3;
  //use case: Mqos, temporary_ablation
  string use_case = 4;
  //custom attributes: String of a json for additional attributes
  google.protobuf.StringValue custom_attributes = 5;
}

//action to be taken for Minimal Quality Operational Standards (MQOS)
enum MqosActionType {
  //unspecified
  MQOS_ACTION_TYPE_UNSPECIFIED = 0;
  //ablate store
  MQOS_ACTION_TYPE_ABLATION = 1;
  //permanently deactivate store
  MQOS_ACTION_TYPE_PERMANENT_DEACTIVATION = 2;
}

//Object representing an mqos store
message MqosStoreDetails {
  //store id
  int64 store_id = 1;
  //action type: Ablation, Permanent Deactivation
  MqosActionType action_type = 2;
  //store name
  string store_name = 3;
  //store defect rate
  double store_defect_rate = 4;
  //store cancellation percentage
  double cxl_pct = 5;
  //store mni percentage
  double mni_pct = 6;
}

//Request for mqos actions
message ProcessMqosActionRequest {
  //list of stores and the mqos action necessary
  repeated MqosStoreDetails mqos_stores = 1;
  //timestamp for when mqos analysis happened for list of stores
  google.protobuf.Timestamp created_at = 2;
}

//Request for temporary ablations
message ProcessTemporaryAblationRequest {
  //store id
  int64 store_id = 1;
  //end time
  google.protobuf.Timestamp end_time = 2;
}

//use case
enum UseCase {
  //unspecified
  USE_CASE_UNSPECIFIED = 0;
  //mqos
  USE_CASE_MQOS = 1;
  //temporary ablation
  USE_CASE_TEMPORARY_ABLATION = 2;
}

//Request for unablations
message ProcessUnablationRequest {
  //store id
  repeated int64 store_id = 1;
  //use case
  UseCase use_case = 2;
}

//QBAS
service QualityBasedAblationService {
  //process mqos actions for stores
  rpc ProcessMqosAction(ProcessMqosActionRequest) returns (ActionResponse);
  //temporarily ablate stores
  rpc ProcessTemporaryAblation(ProcessTemporaryAblationRequest) returns (ActionResponse);
  //unablate stores
  rpc ProcessUnablation(ProcessUnablationRequest) returns (ActionResponse);
}
