syntax = "proto3";
package marketplace_intelligence.v1;

import "google/protobuf/wrappers.proto";
import "menu/menu.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.marketplace_intelligence";

// Order Accuracy service
service OrderAccuracyService {
  // get order accuracy score for a particular entity type
  rpc GetOrderAccuracyScore(GetOrderAccuracyScoreRequest) returns (GetOrderAccuracyScoreResponse) {
    option deprecated = true;
  }
  // Update Item Availability in menu and order, when it is reported as missing or substituted
  rpc UpdateItemAvailability(UpdateItemAvailabilityRequest) returns (UpdateItemAvailabilityResponse);
  // service to temporary suspend entities of store
  rpc SuspendEntity(SuspendEntityRequest) returns (SuspendEntityResponse);
}

// Deprecated. request for GetOrderAccuracyScore endpoint
message GetOrderAccuracyScoreRequest {
  // deprecating the message
  option deprecated = true;
  // request object to get the desired order accuracy score
  repeated ScoreRequest score_requests = 1;
}

// score request properties
message ScoreRequest {
  // deprecating the message
  option deprecated = true;
  // the entity type for which we need the score, for now it will be STORE but in future can be extended to Dasher, Item
  EntityType entity_type = 1;
  // unique id for the particular entity_type, for e.g storeId when entity_type is STORE
  int64 entity_id = 2;
  // for which score type we need the score, for now it will be MISSING and INCORRECT, but in future can be extended to WOD, PFQ
  ScoreType score_type = 3;
}

//Deprecated response of GetOrderAccuracyScore endpoint
message GetOrderAccuracyScoreResponse {
  // deprecating the message
  option deprecated = true;
  // response of ScoreRequest with the calculated scores
  repeated OrderAccuracyScore order_accuracy_scores = 1;
}

// Deprecated properties of OrderAccuracyScore
message OrderAccuracyScore {
  // deprecating the message
  option deprecated = true;
  // the entity type for which score was requested, for now it will be STORE but in future can be extended to Dasher, Item
  EntityType entity_type = 1;
  // unique id for the particular entity_type, for e.g storeId when entity_type is STORE
  int64 entity_id = 2;
  // the score type for which the score was requested, for now it will be MISSING and INCORRECT, but in future can be extended to WOD, PFQ
  ScoreType score_type = 3;
  // the %age of score type deliveries for the entity
  google.protobuf.FloatValue score = 4;
  // total number of deliveries in the past (x days), x controlled by a FF
  google.protobuf.Int32Value total_deliveries = 5;
}

// Deprecated the type of score
enum ScoreType {
  // deprecating the enum
  option deprecated = true;
  // score type is unspecified
  SCORE_TYPE_UNSPECIFIED = 0;
  // score type is Missing and Incorrect
  SCORE_TYPE_MISSING_INCORRECT = 1;
}

// deperecated the type of entity
enum EntityType {
  // deprecating the message
  option deprecated = true;
  // entity type is unspecified
  ENTITY_TYPE_UNSPECIFIED = 0;
  // entity type is store
  ENTITY_TYPE_STORE = 1;
}

// request of UpdateItemAvailability
message UpdateItemAvailabilityRequest {
  // delivery UUID
  string delivery_uuid = 1;
  // details per item needed to make item updates,
  repeated ItemUpdateDetails item_update_details = 2;
}

// item update details proto
message ItemUpdateDetails {
  // the type of update to item
  ItemUpdateType item_update_type = 1;
  // if set, we create order resolution in cnr platform to issue credit and refund
  google.protobuf.StringValue order_resolution_problem_name = 2;
  // menu_item_id of the item
  string menu_item_id = 3;
  // order_item_id of the item
  int64 order_item_id = 4;
  // number of items of id ~ item_id, which needs to be updated, default is 1
  google.protobuf.Int32Value quantity = 5;
  // default is false, boolean to indicate if item_suspension should be skipped, Note: by default, item is suspended and an email is sent to mx as long as skip_mx_email_notification is not set to true
  google.protobuf.BoolValue skip_item_suspension = 6;
  // default is false, boolean to indicate if we should skip sending email to Mx about item suspension, NOTE: emails are also skipped if item suspension does not happen
  google.protobuf.BoolValue skip_mx_email_notification = 7;
  // default is false, boolean to indicate if we should skip sending push notification to Cx about order item update
  google.protobuf.BoolValue skip_cx_push_notification = 8;
}

//empty response for UpdateItemAvailability
message UpdateItemAvailabilityResponse {}

// the type of update to item
enum ItemUpdateType {
  // item update type is unspecified
  ITEM_UPDATE_TYPE_UNSPECIFIED = 0;
  // item is missing
  ITEM_UPDATE_TYPE_MISSING = 1;
  // item is substituted, and OCA should be performed
  ITEM_UPDATE_TYPE_SUBSTITUTED_WITH_OCA = 2;
  // item is substituted, and if order_resolution_problem_name is set, credits should be issued
  ITEM_UPDATE_TYPE_SUBSTITUTED_WITH_CREDITS = 3;
}

// suspend entity request
message SuspendEntityRequest {
  // entity type - currently we're only suspending items so this is not getting honored and we're treating all entities as items
  menu.EntityType entity_type = 1;
  // store id
  string store_id = 2;
  // entity id is the id corresponding to entity_type
  string entity_id = 3;
  // suspension duration
  EntitySuspensionDuration entity_suspension_duration = 4;
  // suspension reason
  EntitySuspensionReason entity_suspension_reason = 5;
  // used if entity_suspension_duration = ITEM_SUSPENSION_DURATION_CLIENT_PROVIDED, we suspend until the time passed in suspend_util_milliseconds
  google.protobuf.Int64Value suspend_util_milliseconds = 6;
  // used if we need to send emails to Merchants about suspension
  MerchantEmailInfo merchant_email_info = 7;
}

// merchant email info
message MerchantEmailInfo {
  // contact emails
  repeated string contact_emails = 1;
  // email configuration id, this is needed if we want to send emails to Mx, if null we don't send emails
  google.protobuf.StringValue email_configuration_id = 2;
  // data fields for email template
  map<string, string> email_data_fields = 3;
}

// entity suspension response
message SuspendEntityResponse {
  //  valid or invalid request
  bool is_valid_request = 1;
}

// entity suspension reason
enum EntitySuspensionReason {
  // reason unspecified
  ENTITY_SUSPENSION_REASON_UNSPECIFIED = 0;
  // dasher_triggered - used by Item Out of Stock feature
  ENTITY_SUSPENSION_REASON_DASHER_TRIGGERED = 1;
  // mni item level ATD
  ENTITY_SUSPENSION_REASON_MNI_ITEM_ATD = 2;
}

// entity suspension duration
enum EntitySuspensionDuration { // NOTE: all hours will be in store's timeZone
  // suspend entity until midnight in store's local timezone
  ENTITY_SUSPENSION_DURATION_UNSPECIFIED = 0;
  // suspend entity until midnight in store's local timezone
  ENTITY_SUSPENSION_DURATION_UNTIL_MID_NIGHT = 1;
  // suspend entity for next 2 hours in store's local timezone
  ENTITY_SUSPENSION_DURATION_NEXT_2_HOURS = 2;
  // suspend entity for next 3 hours in store's local timezone
  ENTITY_SUSPENSION_DURATION_NEXT_3_HOURS = 3;
  // suspend entity for next 6 hours in store's local timezone
  ENTITY_SUSPENSION_DURATION_NEXT_6_HOURS = 4;
  // suspend entity for next 12 hours in store's local timezone
  ENTITY_SUSPENSION_DURATION_NEXT_12_HOURS = 5;
  // suspend entity until client's provided timezone
  ENTITY_SUSPENSION_DURATION_CLIENT_PROVIDED = 6; // NOTE: if client passes this, then they should also set the time they want to suspend until, via clientProvidedSuspendUntil(time in epoch millis), if this is not set, suspension will behave like MIDNIGHT
}
