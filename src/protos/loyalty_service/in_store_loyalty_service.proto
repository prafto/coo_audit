syntax = "proto3";

// buf:lint:ignore DIRECTORY_SAME_PACKAGE
// buf:lint:ignore PACKAGE_VERSION_SUFFIX
package loyalty_serivce;

import "common/common.proto";
import "common/money.proto";
import "common/store_loyalty.proto";
import "doordash.api/annotations.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "loyalty_service/common.proto";
import "loyalty_service/third_party_order.proto";

option java_generic_services = true;
option java_multiple_files = true;
// buf:lint:ignore PACKAGE_SAME_JAVA_PACKAGE
option java_package = "com.doordash.rpc.loyalty.in_store_loyalty";

// service for in store loyalty
service InStoreLoyaltyService {
  option (doordash.api.service) = {
    url: "loyalty-service-third-party-integration.service.prod.ddsd"
    port: 50051
    name_spaces: ["loyalty"]
    owner: {
      id: "teams-working-with-loyalty-service-"
      name: "loyalty-service"
      slack_channel: "#ask-mx-loyalty-eng"
      email_alias: "ocl-engineering@doordash.com"
    }
    vertical_domains: [MX]
    target_products: [MX]
  };

  // Get in store customer rewards
  rpc GetInStoreCustomerRewardsJWT(GetInStoreCustomerRewardsJWTRequest) returns (GetInStoreCustomerRewardsJWTResponse) {
    option (google.api.http) = {get: "/loyalty/v1/get-in-store-customer-rewards-jwt/{web_token}"};
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: TEST
      authorization: [NONE]
      slo_config: {
        critical_alerts_enabled: true
        critical_5m_burn_threshold: 3000
        critical_5m_burn_sustain_seconds: 300
        p99_latency: 3
      }
    };
  }

  // Redeem in store customer reward
  rpc RedeemInStoreCustomerRewardJWT(RedeemInStoreCustomerRewardJWTRequest) returns (RedeemInStoreCustomerRewardJWTResponse) {
    option (google.api.http) = {
      post: "/loyalty/v1/redeem-in-store-customer-reward-jwt"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: TEST
      authorization: [NONE]
      slo_config: {
        critical_alerts_enabled: true
        critical_5m_burn_threshold: 3000
        critical_5m_burn_sustain_seconds: 300
        p99_latency: 3
      }
    };
  }

  // Complete in store check in
  rpc CompleteInStoreCheckIn(CompleteInStoreCheckInRequest) returns (CompleteInStoreCheckInResponse) {
    option (google.api.http) = {
      post: "/loyalty/v1/complete-in-store-check-in"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: TEST
      authorization: [NONE]
      slo_config: {
        critical_alerts_enabled: true
        critical_5m_burn_threshold: 3000
        critical_5m_burn_sustain_seconds: 300
        p99_latency: 3
      }
    };
  }

  // Get in store customer rewards
  rpc GetInStoreCustomerRewards(GetInStoreCustomerRewardsRequest) returns (GetInStoreCustomerRewardsResponse) {
    option (google.api.http) = {get: "/loyalty/v1/get-in-store-customer-rewards/store/{store_id}"};
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: TEST
      authorization: [DD_USER]
      slo_config: {
        critical_alerts_enabled: true
        critical_5m_burn_threshold: 3000
        critical_5m_burn_sustain_seconds: 300
        p99_latency: 3
      }
    };
  }

  // Redeem in store customer reward
  rpc RedeemInStoreCustomerReward(RedeemInStoreCustomerRewardRequest) returns (RedeemInStoreCustomerRewardResponse) {
    option (google.api.http) = {
      post: "/loyalty/v1/redeem-in-store-customer-reward"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: TEST
      authorization: [DD_USER]
      slo_config: {
        critical_alerts_enabled: true
        critical_5m_burn_threshold: 3000
        critical_5m_burn_sustain_seconds: 300
        p99_latency: 3
      }
    };
  }

  // Complete dineout in store check in
  rpc CompleteDineoutInStoreCheckIn(CompleteDineoutInStoreCheckInRequest) returns (CompleteDineoutInStoreCheckInResponse);

  // Get in store rewards by program id
  rpc GetInStoreRewardsByProgramId(GetInStoreRewardsByProgramIdRequest) returns (GetInStoreRewardsByProgramIdResponse);

  // Link payment methods
  rpc LinkPaymentMethods(LinkPaymentMethodsRequest) returns (LinkPaymentMethodsResponse);

  // Unlink payment methods
  rpc UnlinkPaymentMethods(UnlinkPaymentMethodsRequest) returns (UnlinkPaymentMethodsResponse);

  // Get payment methods eligible for card linking for a Cx
  rpc GetCardLinkingPaymentMethods(GetCardLinkingPaymentMethodsRequest) returns (GetCardLinkingPaymentMethodsResponse);
}

// Get in store customer rewards request
message GetInStoreCustomerRewardsJWTRequest {
  // web token containing request parameters and used for authentication
  google.protobuf.StringValue web_token = 1;
}

// Get in store customer rewards response
message GetInStoreCustomerRewardsJWTResponse {
  // available rewards for the customer
  repeated Reward available_rewards = 1;
  // program reward name
  google.protobuf.StringValue program_reward_name = 2;
  // program points balance
  google.protobuf.Int32Value program_points_balance = 3;
  // program incentive criteria points
  google.protobuf.Int32Value program_incentive_criteria_points = 4;
  // program opt in status
  common.loyalty.v1.LoyaltyOptInStatus opt_in_status = 5;
  // past redemptions
  repeated Redemption past_redemptions = 6;
  // rewards the customer has not yet unlocked
  repeated Reward unavailable_rewards = 7;
}

// Redeem in store customer reward request
message RedeemInStoreCustomerRewardJWTRequest {
  // web token containing request parameters and used for authentication
  google.protobuf.StringValue web_token = 1;
  // promotion id
  google.protobuf.StringValue promotion_id = 2;
}

// Redeem in store customer reward response
message RedeemInStoreCustomerRewardJWTResponse {
  // accepted redemptions
  repeated Redemption applied_redemption = 1;
  // rejected redemptions
  repeated Redemption rejected_redemption = 2;
}

// Complete in store check in request
message CompleteInStoreCheckInRequest {
  // store id
  google.protobuf.StringValue store_id = 1;
  // loyalty code
  google.protobuf.StringValue loyalty_code = 2;
  // loyalty code type
  LoyaltyCodeType loyalty_code_type = 3;
  // latitude
  google.protobuf.FloatValue latitude = 4;
  // longitude
  google.protobuf.FloatValue longitude = 5;
  // transaction id
  google.protobuf.StringValue transaction_id = 6;
  // transaction is a points transfer
  google.protobuf.BoolValue is_points_transfer = 7;
}

// Complete in store check in response
message CompleteInStoreCheckInResponse {}

// Get in store customer rewards request
message GetInStoreCustomerRewardsRequest {
  // store id
  google.protobuf.StringValue store_id = 1;
  // consumer id
  google.protobuf.StringValue consumer_id = 2 [(doordash.api.inject_id) = CX_ID];
  // business id to bypass looking up via store id
  google.protobuf.StringValue business_id = 3;
  // consumer experience
  common.Experience experience = 4;
  // redemption experience
  common.Experience redemption_experience = 5;
}

// Get in store customer rewards response
message GetInStoreCustomerRewardsResponse {
  // available rewards for the customer
  repeated Reward available_rewards = 1;
  // program reward name
  google.protobuf.StringValue program_reward_name = 2;
  // program points balance
  google.protobuf.Int32Value program_points_balance = 3;
  // program incentive criteria points
  google.protobuf.Int32Value program_incentive_criteria_points = 4;
  // program opt in status
  common.loyalty.v1.LoyaltyOptInStatus opt_in_status = 5;
  // past redemptions
  repeated Redemption past_redemptions = 6;
  // rewards the customer has not yet unlocked
  repeated Reward unavailable_rewards = 7;
}

// Redeem in store customer reward request
message RedeemInStoreCustomerRewardRequest {
  // store id
  google.protobuf.StringValue store_id = 1;
  // loyalty code
  google.protobuf.StringValue loyalty_code = 2;
  // loyalty code type
  LoyaltyCodeType loyalty_code_type = 3;
  // promotion id
  google.protobuf.StringValue promotion_id = 4;
  // transaction id
  google.protobuf.StringValue transaction_id = 5;
  // consumer id
  google.protobuf.StringValue consumer_id = 6 [(doordash.api.inject_id) = CX_ID];
  // business id
  google.protobuf.StringValue business_id = 7;
  // consumer experience
  common.Experience experience = 8;
  // redemption experience
  common.Experience redemption_experience = 9;
}

// Redeem in store customer reward response
message RedeemInStoreCustomerRewardResponse {
  // accepted redemptions
  repeated Redemption applied_redemptions = 1;
  // rejected redemptions
  repeated Redemption rejected_redemptions = 2;
}

// Complete in store check in request
message CompleteDineoutInStoreCheckInRequest {
  // store id
  google.protobuf.StringValue store_id = 1;
  // loyalty code
  google.protobuf.StringValue consumer_id = 2;
  // latitude
  google.protobuf.FloatValue latitude = 4;
  // longitude
  google.protobuf.FloatValue longitude = 5;
  // transaction id
  google.protobuf.StringValue transaction_id = 6;
  // transaction is a points transfer
  google.protobuf.BoolValue is_points_transfer = 7;
}

// Complete in store check in response
message CompleteDineoutInStoreCheckInResponse {
  // points earned
  google.protobuf.Int32Value points_earned = 1;
}

// Get in store rewards by program id request
message GetInStoreRewardsByProgramIdRequest {
  // consumer id
  google.protobuf.StringValue consumer_id = 1;
  // consumer experience
  common.Experience consumer_experience = 2;
  // promotion experience
  common.Experience promotion_experience = 3;
  // program ids
  repeated google.protobuf.StringValue program_ids = 4;
}

// Get in store rewards by program id response
message GetInStoreRewardsByProgramIdResponse {
  // available promotions
  map<string, AvailableRewards> available_rewards_by_program_id = 1;
  // program details
  map<string, ProgramDetails> program_details_by_program_id = 2;
  // past redemptions
  map<string, PastRedemptions> past_redemptions_by_program_id = 3;
}

// program details
message ProgramDetails {
  // program points balance
  google.protobuf.Int32Value program_points_balance = 3;
  // program incentive criteria points
  google.protobuf.Int32Value program_incentive_criteria_points = 4;
  // dineout minimum spend amount
  money.MonetaryFields dineout_minimum_spend_amount = 5;
  // dineout cofunding amount
  money.MonetaryFields dineout_cofunding_amount = 6;
}

// available rewards
message AvailableRewards {
  // rewards
  repeated Reward rewards = 1;
}

// Link payment methods request
message LinkPaymentMethodsRequest {
  // business id
  google.protobuf.StringValue business_id = 1;
  // consumer id
  google.protobuf.StringValue consumer_id = 2;
  // consumer experience
  common.Experience consumer_experience = 3;
  // payment method references
  repeated LinkPaymentMethodReference payment_method_references = 4;

  // link payment method reference
  message LinkPaymentMethodReference {
    // reference
    google.protobuf.StringValue reference = 1;
    // reference type
    PaymentMethodReferenceType reference_type = 2;
    // expiration month
    google.protobuf.Int32Value exp_month = 3;
    // expiration year
    google.protobuf.Int32Value exp_year = 4;
    // country code
    google.protobuf.StringValue country_code = 5;
  }
}

// Link payment methods response
message LinkPaymentMethodsResponse {
  // payment methods
  repeated CardLinkingPaymentMethod payment_methods = 1;
}

// Unlink payment methods request
message UnlinkPaymentMethodsRequest {
  // business id
  google.protobuf.StringValue business_id = 1;
  // consumer id
  google.protobuf.StringValue consumer_id = 2;
  // consumer experience
  common.Experience consumer_experience = 3;
  // payment method references
  repeated UnlinkPaymentMethodReference payment_method_references = 4;

  // unlink payment method reference
  message UnlinkPaymentMethodReference {
    // external id
    google.protobuf.StringValue external_id = 1;
  }
}

// Unlink payment methods response
message UnlinkPaymentMethodsResponse {
  // payment methods
  repeated CardLinkingPaymentMethod payment_methods = 1;
}

// payment method reference type
enum PaymentMethodReferenceType {
  // Unspecified
  PAYMENT_METHOD_REFERENCE_TYPE_UNSPECIFIED = 0;
  // Payment method id
  PAYMENT_METHOD_REFERENCE_TYPE_PAYMENT_METHOD_ID = 1;
  // Pan token from the add payment method form
  PAYMENT_METHOD_REFERENCE_TYPE_PAN_TOKEN = 2;
}

// past redemptions
message PastRedemptions {
  // past redemptions
  repeated Redemption past_redemptions = 1;
}

// Get payment methods eligible for card linking for a Cx request
message GetCardLinkingPaymentMethodsRequest {
  // business id
  google.protobuf.StringValue business_id = 1;
  // consumer id
  google.protobuf.StringValue consumer_id = 2;
  // consumer experience
  common.Experience consumer_experience = 4;
}

// Get payment methods eligible for card linking for a Cx response
message GetCardLinkingPaymentMethodsResponse {
  // unlinked payment methods
  repeated CardLinkingPaymentMethod unlinked_payment_methods = 1;
  // linked payment methods
  repeated CardLinkingPaymentMethod linked_payment_methods = 2;
}

// Card linking payment method
message CardLinkingPaymentMethod {
  // reference to external provider card object
  google.protobuf.StringValue external_id = 1;
  // dd payment method id
  google.protobuf.StringValue payment_method_id = 2;
  // last4
  google.protobuf.StringValue last4 = 3;
  // exp year
  google.protobuf.StringValue exp_year = 4;
  // exp month
  google.protobuf.StringValue exp_month = 5;
  // brand
  google.protobuf.StringValue brand = 6;
  // link status
  LinkState link_state = 7;

  // link state
  message LinkState {
    // linked
    google.protobuf.BoolValue linked = 1;
    // code
    LinkStatusCode status_code = 2;
  }

  // Link status code
  enum LinkStatusCode {
    // Unspecified
    LINK_STATUS_CODE_UNSPECIFIED = 0;
    // Success
    LINK_STATUS_CODE_SUCCESS = 1;
    // Card already exists
    LINK_STATUS_CODE_CARD_ALREADY_EXISTS = 2;
    // Card brand not supported
    LINK_STATUS_CODE_CARD_NOT_SUPPORTED = 3;
    // Program does not exist
    LINK_STATUS_CODE_PROGRAM_DOES_NOT_EXIST = 4;
    // Card network error
    LINK_STATUS_CODE_CARD_NETWORK_ERROR = 5;
    // Invalid card error
    LINK_STATUS_CODE_INVALID_CARD_ERROR = 6;
    // Unknown card error
    LINK_STATUS_CODE_UNKNOWN_CARD_ERROR = 7;
  }
}
