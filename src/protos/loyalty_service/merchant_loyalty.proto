syntax = "proto3";

// buf:lint:ignore DIRECTORY_SAME_PACKAGE
// buf:lint:ignore PACKAGE_VERSION_SUFFIX
package loyalty_serivce;

import "common/common.proto";
import "common/loyalty.proto";
import "common/money.proto";
import "common/service_client_config.proto";
import "common/store_loyalty.proto";
import "consumer_pricing/pricing.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "loyalty_service/common.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_outer_classname = "MerchantLoyaltyProto";
// buf:lint:ignore PACKAGE_SAME_JAVA_PACKAGE
option java_package = "com.doordash.rpc.loyalty.merchant";

// merchant loyalty service
service MerchantLoyaltyService {
  option (service_client.client_config).service_name = "loyalty-service";
  option (service_client.client_config).service_app = "web";

  // create/update loyalty program
  rpc UpsertProgram(UpsertProgramRequest) returns (UpsertProgramResponse);

  // link/update consumer to given program with a loyalty code
  rpc UpsertProgramMembership(UpsertProgramMembershipRequest) returns (UpsertProgramMembershipResponse) {
    option (service_client.client_method_config).retry_config.max_attempts = 2;

    option (service_client.client_method_config).response_attempt_timeout_millis = 5000;
    option (service_client.client_method_config).circuit_breaker_config.failure_rate_threshold = 0.3;
    option (service_client.client_method_config).circuit_breaker_config.counter_sliding_window_millis = 60000;
    option (service_client.client_method_config).circuit_breaker_config.circuit_open_window_millis = 20000;
  }
  // delete consumer's membership to given program
  rpc DeleteProgramMembership(DeleteProgramMembershipRequest) returns (DeleteProgramMembershipResponse) {
    option (service_client.client_method_config).retry_config.max_attempts = 2;

    option (service_client.client_method_config).response_attempt_timeout_millis = 3000;
    option (service_client.client_method_config).circuit_breaker_config.failure_rate_threshold = 0.3;
    option (service_client.client_method_config).circuit_breaker_config.counter_sliding_window_millis = 60000;
    option (service_client.client_method_config).circuit_breaker_config.circuit_open_window_millis = 20000;
  }

  // Get program for a reference id
  rpc GetProgram(GetProgramRequest) returns (GetProgramResponse);

  // Get program by id
  rpc GetProgramById(GetProgramByIdRequest) returns (GetProgramByIdResponse);

  // gets all the programs for an experience and any corresponding memberships for said programs
  rpc GetProgramsAndMemberships(GetProgramsAndMembershipsRequest) returns (GetProgramsAndMembershipsResponse);

  // return program and consumer membership (if cx is already linked) for given business to power store page
  rpc GetProgramAndMembership(GetProgramAndMembershipRequest) returns (GetProgramAndMembershipResponse) {
    option (service_client.client_method_config).retry_config.max_attempts = 2;

    option (service_client.client_method_config).response_attempt_timeout_millis = 50;
    option (service_client.client_method_config).circuit_breaker_config.failure_rate_threshold = 0.3;
    option (service_client.client_method_config).circuit_breaker_config.counter_sliding_window_millis = 60000;
    option (service_client.client_method_config).circuit_breaker_config.circuit_open_window_millis = 20000;
  }

  // return program and consumer membership (if cx is already linked).
  rpc GetMembershipByConsumerAndProgramId(GetMembershipByConsumerAndProgramIdRequest) returns (GetMembershipByConsumerAndProgramIdResponse);

  // link/update program to audience campaign promotion
  rpc UpsertProgramPromotion(UpsertProgramPromotionRequest) returns (UpsertProgramPromotionResponse);

  // get external loyalty consumer information
  rpc GetExternalLoyaltyConsumerInfo(GetExternalLoyaltyConsumerInfoRequest) returns (GetExternalLoyaltyConsumerInfoResponse);

  // get loyalty account information
  rpc GetExternalLoyaltyAccountInfo(GetExternalLoyaltyAccountInfoRequest) returns (GetExternalLoyaltyAccountInfoResponse);

  // copy the membership info from guest user to existing storefront user if it already exists.
  rpc CopyMembership(CopyMembershipRequest) returns (CopyMembershipResponse);

  // get possible loyalty rewards for an order from loyalty provider
  rpc GetLoyaltyRewardsForOrder(GetLoyaltyRewardsForOrderRequest) returns (GetLoyaltyRewardsForOrderResponse);

  // redeem loyalty rewards for an order for loyalty provider
  rpc RedeemLoyaltyRewardsForOrder(RedeemLoyaltyRewardsForOrderRequest) returns (RedeemLoyaltyRewardsForOrderResponse);

  // adjust loyalty transaction for loyalty provider
  rpc AdjustLoyaltyRewardsForOrder(AdjustLoyaltyRewardsForOrderRequest) returns (AdjustLoyaltyRewardsForOrderResponse);

  // gets the loyalty points preview (for DoorDash homegrown loyalty program) for an order
  rpc GetDoorDashLoyaltyPointsPreview(GetDoorDashLoyaltyPointsPreviewRequest) returns (GetDoorDashLoyaltyPointsPreviewResponse) {
    option (service_client.client_method_config).retry_config.max_attempts = 2;

    option (service_client.client_method_config).response_attempt_timeout_millis = 150;
    option (service_client.client_method_config).circuit_breaker_config.failure_rate_threshold = 0.3;
    option (service_client.client_method_config).circuit_breaker_config.counter_sliding_window_millis = 60000;
    option (service_client.client_method_config).circuit_breaker_config.circuit_open_window_millis = 20000;
  }

  // Get loyalty info by delivery UUID
  rpc GetLoyaltyInfoByDeliveryUUID(GetLoyaltyInfoByDeliveryUUIDRequest) returns (GetLoyaltyInfoByDeliveryUUIDResponse);

  // upsert merchant loyalty accelerator
  rpc UpsertProgramAccelerator(UpsertProgramAcceleratorRequest) returns (UpsertProgramAcceleratorResponse);

  // Gets the loyalty info that is displayed and customized on the Merchant site.
  rpc GetMerchantLoyaltyConstants(GetMerchantLoyaltyConstantsRequest) returns (GetMerchantLoyaltyConstantsResponse);

  // Updates the loyalty info
  rpc UpsertMerchantLoyaltyConstants(UpsertMerchantLoyaltyConstantsRequest) returns (UpsertMerchantLoyaltyConstantsResponse);

  // Creates loyalty info
  rpc DeleteMerchantLoyaltyConstants(DeleteMerchantLoyaltyConstantsRequest) returns (DeleteMerchantLoyaltyConstantsResponse);

  // get all possible loyalty rewards for a user from loyalty provider
  rpc GetAllLoyaltyRewardsForUser(GetAllLoyaltyRewardsForUserRequest) returns (GetAllLoyaltyRewardsForUserResponse);

  // for olopunchh integration â€“ apply a reward to olo basket and fetch discount amount from 3p provider
  rpc FetchAndApplyLoyaltyReward(FetchAndApplyLoyaltyRewardRequest) returns (FetchAndApplyLoyaltyRewardResponse);
}

// point system for loyalty program
enum MerchantLoyaltyPointSystemType {
  // default case
  MERCHANT_LOYALTY_POINT_SYSTEM_TYPE_UNSPECIFIED = 0;
  // visits based
  MERCHANT_LOYALTY_POINT_SYSTEM_TYPE_VISITS = 1;
  // subtotal based
  MERCHANT_LOYALTY_POINT_SYSTEM_TYPE_SUBTOTAL = 2;
  // rule based
  MERCHANT_LOYALTY_POINT_SYSTEM_TYPE_RULE = 3;
}

// reward/promotion stacking configuration for loyalty program
enum MerchantLoyaltyRewardPromotionStackingType {
  // default case
  MERCHANT_LOYALTY_REWARD_PROMOTION_STACKING_TYPE_UNSPECIFIED = 0;
  // no stacking allowed
  MERCHANT_LOYALTY_REWARD_PROMOTION_STACKING_TYPE_NONE = 1;
  // allow stacking one loyalty reward with one DD promotion
  MERCHANT_LOYALTY_REWARD_PROMOTION_STACKING_TYPE_ONE_REWARD_ONE_PROMO = 2;
  // allow stacking all loyalty rewards with one DD promotion
  MERCHANT_LOYALTY_REWARD_PROMOTION_STACKING_TYPE_ANY_REWARD_ONE_PROMO = 3;
}

// Merchant Loyalty Program, typically one per business
message MerchantLoyaltyProgram {
  // identifier for the program
  string id = 1;
  // name of the program
  string name = 2;
  // reference id for the program, can be business_id or store_id
  string reference_id = 3;
  // reference id type
  MerchantLoyaltyProgramReferenceIdType reference_id_type = 4;
  // Tenancy i.e. employee only for future use
  google.protobuf.StringValue tenancy = 5;
  // Program active from, to keep history
  google.protobuf.Timestamp active_from = 6;
  // Program deactivated at, to keep history
  google.protobuf.Timestamp deactivated_at = 7;
  // Program created at, housekeeping
  google.protobuf.Timestamp created_at = 12;
  // Program updated at, housekeeping
  google.protobuf.Timestamp updated_at = 13;
  // CMS id
  string cms_id = 14;
  // provider type
  string provider_type = 15;
  // experience
  common.Experience experience = 16;
  // external reference id
  string external_reference_id = 17;
  // auth type for logging
  string auth_type = 18;
  // homegrown loyalty: the point system of the loyalty program
  MerchantLoyaltyPointSystemType point_system = 19;
  // external program name i.e. the name the mx uses on their assets for their loyalty program
  google.protobuf.StringValue external_program_name = 20;
  // homegrown loyalty: base point value
  google.protobuf.StringValue point_system_base_value = 21;
  // homegrown loyalty: min order value for earning points
  google.protobuf.Int32Value min_spend_to_earn_points = 22;
  // define the membership validation period, if the program needs to re-validate the membership status periodically
  google.protobuf.Int32Value validation_interval_sec = 23;
  // reward type
  LoyaltyRewardSystemType reward_type = 24;
  // membership price if applicable - it will set by runtime for now
  money.MonetaryFields membership_price = 25;
  // used for testing loyalty programs without setting it live for all users
  google.protobuf.BoolValue test_mode = 26;
  // enables loyalty accrual flow
  google.protobuf.BoolValue enable_accrual = 27;
  // reward/promo stacking configuration
  MerchantLoyaltyRewardPromotionStackingType reward_promo_stacking_type = 28;
  // additional program configuration key value map
  map<string, google.protobuf.StringValue> configuration = 29;
}

// Consumer links their merchant loyalty program via loyalty_code(membership card)
message MerchantLoyaltyProgramMembership {
  // merchant loyalty program
  string program_id = 2;
  // consumer id
  string consumer_id = 3;
  // loyalty_code or membership card number that consumer has
  string loyalty_code = 4;
  // when consumer links their loyalty_code, DD validates the code with
  // merchant during runtime which sometime returns consumer's
  // membership id on merchant side
  google.protobuf.StringValue external_loyalty_consumer_id = 5;
  // same as above; merchant side loyalty code (internal id)
  google.protobuf.StringValue external_loyalty_code = 6;
  // membership created at, housekeeping
  google.protobuf.Timestamp created_at = 12;
  // membership updated at, housekeeping
  google.protobuf.Timestamp updated_at = 13;
  // identifier for the merchant loyalty program membership
  google.protobuf.StringValue id = 14;
  // membership last validated at
  google.protobuf.Timestamp last_validated_at = 15;
  // state
  MerchantLoyaltyProgramMembershipState state = 16;
}

// It defines cx membership state for merchant membership purchase
// * For IS_A_MEMBER, BUYING_MEMBERSHIP, CONFIRMED_BUYING_MEMBERSHIP and VALIDATE_FAILED, we should treat cx as a member
//   for all benefits like membership item pricing.
// * For BUYING_MEMBERSHIP, we should tell order service to checkout the next order with membership fee added.
// Additionally, we use this state to track membership that requires one time password verification with Mx endpoint.
enum MerchantLoyaltyProgramMembershipState {
  // this field is generally unused
  MERCHANT_LOYALTY_PROGRAM_MEMBERSHIP_STATE_UNSPECIFIED = 0;
  // it indicates cx is not a member
  MERCHANT_LOYALTY_PROGRAM_MEMBERSHIP_STATE_NOT_A_MEMBER = 1;
  // it indicates cx is a member, usually after successfully validate with merchant
  MERCHANT_LOYALTY_PROGRAM_MEMBERSHIP_STATE_IS_A_MEMBER = 2;
  // it indicates cx tells doordash to buy a merchant membership, but have not pay doordash membership fee
  MERCHANT_LOYALTY_PROGRAM_MEMBERSHIP_STATE_BUYING_MEMBERSHIP = 3;
  // it indicates doordash confirmed received the membership fee from cx, but have not contact merchant yet
  MERCHANT_LOYALTY_PROGRAM_MEMBERSHIP_STATE_CONFIRMED_BUYING_MEMBERSHIP = 4;
  // it indicates doordash confirmed received the membership fee from cx, but failed the validation with merchant.
  MERCHANT_LOYALTY_PROGRAM_MEMBERSHIP_STATE_VALIDATE_FAILED = 5;
  // it indicates cx has been one time password verified with Mx endpoint
  MERCHANT_LOYALTY_PROGRAM_MEMBERSHIP_STATE_ONE_TIME_PASSWORD_VERIFIED = 6;
  // it indicates cx has received one time password, but has not verified yet.
  MERCHANT_LOYALTY_PROGRAM_MEMBERSHIP_STATE_ONE_TIME_PASSWORD_PENDING = 7;
}

// Contains both the program and the corresponding program membership
message MerchantLoyaltyProgramAndProgramMembership {
  // The loyalty program
  MerchantLoyaltyProgram program = 1;
  // The program membership tied to the above program
  MerchantLoyaltyProgramMembership membership = 2;
}

// Promotion associated with merchant loyalty program
message MerchantLoyaltyProgramPromotion {
  // merchant loyalty program
  string program_id = 1;
  // audience campaign tag associated with promotion
  string consumer_audience_tag = 2;
  // the name of the promotion
  google.protobuf.StringValue name = 3;
  // Promotion active from, to keep history
  google.protobuf.Timestamp active_from = 6;
  // Promotion deactivated at, to keep history
  google.protobuf.Timestamp deactivated_at = 7;
  // Promotion created at, housekeeping
  google.protobuf.Timestamp created_at = 12;
  // Promotion updated at, housekeeping
  google.protobuf.Timestamp updated_at = 13;
  // the campaign_id of the promotion
  google.protobuf.StringValue campaign_id = 14;
  // the points required for incentive to apply
  google.protobuf.StringValue incentive_criteria_points = 15;
  // UUID of the promotion
  google.protobuf.StringValue id = 11;
}

// type of reference id against which program is created
enum MerchantLoyaltyProgramReferenceIdType {
  // default case
  MERCHANT_LOYALTY_PROGRAM_REFERENCE_ID_TYPE_UNSPECIFIED = 0;
  // business id case
  MERCHANT_LOYALTY_PROGRAM_REFERENCE_ID_TYPE_BUSINESS = 1;
  // store id case
  MERCHANT_LOYALTY_PROGRAM_REFERENCE_ID_TYPE_STORE = 2;
  // business group case
  MERCHANT_LOYALTY_PROGRAM_REFERENCE_ID_TYPE_BUSINESS_GROUP = 3;
}

// Client uses the error to show to the user
message MerchantLoyaltyError {
  // String error code for the error.
  string error_code = 1;
  // error message
  string error_message = 2;
  // http_code
  int32 http_code = 3;
  // localized error message that clients can display to Cx
  string localized_message = 4;
}

// request for getting all available programs for an experience and corresponding memberships
message GetProgramsAndMembershipsRequest {
  // consumer id
  string consumer_id = 1;
  // experience
  common.Experience experience = 2;
}

// response for getting all available programs for an experience and corresponding memberships
message GetProgramsAndMembershipsResponse {
  // on success, return list of program and program membership
  message Success {
    // list of program and program membership
    repeated MerchantLoyaltyProgramAndProgramMembership programs_and_memberships = 1;
  }
  // result is either success or error
  oneof result {
    // on success, return list of program and program membership
    Success success = 1;
    // on failure, return error
    MerchantLoyaltyError error = 2;
  }
}

// The accelerator segment types
enum MerchantLoyaltySegmentType {
  // default case
  MERCHANT_LOYALTY_SEGMENT_TYPE_UNSPECIFIED = 0;
  // dash pass
  MERCHANT_LOYALTY_SEGMENT_TYPE_DASHPASS = 1;
  // num visits all time
  MERCHANT_LOYALTY_SEGMENT_TYPE_NUM_OF_VISITS_ALL_TIME_BONUS = 2;
  // num visits one time
  MERCHANT_LOYALTY_SEGMENT_TYPE_NUM_OF_VISITS_ONE_TIME_BONUS = 3;
  // gift
  MERCHANT_LOYALTY_SEGMENT_TYPE_GIFT = 4;
  // off-peak hours order
  MERCHANT_LOYALTY_SEGMENT_TYPE_OFF_PEAK = 5;
}

// Contains the accelerator information for a loyalty program
message MerchantLoyaltyAccelerator {
  // the program id that this accelerator belongs to
  string program_id = 1;
  // the segment
  MerchantLoyaltySegmentType segment = 2;
  // segment value (can be null or un-set)
  google.protobuf.StringValue segment_requirement = 3;
  // points multiplier
  string point_multiplier = 4;
  // bonus points
  string point_value = 5;
}

// Contains the points summary per promotion for rendering homegrown loyalty UI
message PointsSummaryPerPromotion {
  // Points towards next available reward
  google.protobuf.StringValue remaining_points = 1;
  // Current progress on the scale of 100
  google.protobuf.Int64Value current_progress_on_scale_100 = 2;
  // This controls whether to show the 'sparkles' or not
  google.protobuf.BoolValue is_close_to_redeeming_reward = 3;
}

// DoorDash loyalty program rewards summary
message DoorDashLoyaltyProgramRewardsSummary {
  // list of accelerators for this program
  repeated MerchantLoyaltyAccelerator accelerators = 1;
  // list of promotions for this program
  repeated MerchantLoyaltyProgramPromotion promotions = 2;
  // the current points the user has for this rewards program
  string current_points = 3;
  // the map of rewards progress for each available promo
  map<string, PointsSummaryPerPromotion> points_summary = 4;
}

// request for getting program data
message GetProgramRequest {
  // reference id
  google.protobuf.StringValue reference_id = 1;
  // reference type
  MerchantLoyaltyProgramReferenceIdType reference_id_type = 2;
  // optional, store id for rollout
  google.protobuf.StringValue store_id = 3;
  // experience
  common.Experience experience = 4;
}

// response for getting the program associated with a reference id and type
message GetProgramResponse {
  // on success, return the loyalty program
  message Success {
    // program data
    MerchantLoyaltyProgram program = 1;
  }
  // result is either success or error
  oneof result {
    // on success, return loyalty program
    Success success = 1;
    // on failure, return error
    MerchantLoyaltyError error = 2;
  }
}

// request for getting program data by program id
message GetProgramByIdRequest {
  // program id
  google.protobuf.StringValue program_id = 1;
}

// response for getting the program associated with a program id
message GetProgramByIdResponse {
  // on success, return the loyalty program
  message Success {
    // program data
    MerchantLoyaltyProgram program = 1;
  }
  // result is either success or error
  oneof result {
    // on success, return loyalty program
    Success success = 1;
    // on failure, return error
    MerchantLoyaltyError error = 2;
  }
}

// request for retrieving program with consumer membership details
message GetProgramAndMembershipRequest {
  // consumer id
  string consumer_id = 1;
  // reference id
  string reference_id = 2;
  // reference type
  MerchantLoyaltyProgramReferenceIdType reference_id_type = 3;
  // optional, store id for rollout
  google.protobuf.StringValue store_id = 4;
  // experience
  common.Experience experience = 5;
  // optional loyalty provider; if passed in will only include program/membership info with this provider
  common.LoyaltyProviderType loyalty_provider = 6;
}

// response for retrieving program with consumer membership details
message GetProgramAndMembershipResponse {
  // on success, return program and membership
  message Success {
    // loyalty program associated with reference id(business id)
    MerchantLoyaltyProgram program = 1;
    // consumer membership details against the program
    MerchantLoyaltyProgramMembership membership = 2;
    // The DoorDash loyalty rewards summary
    DoorDashLoyaltyProgramRewardsSummary rewards_summary = 3;
  }
  // result is either success or error
  oneof result {
    // on success, return program and membership
    Success success = 1;
    // on failure, return error
    MerchantLoyaltyError error = 2;
  }
}

// request for creating program
message UpsertProgramRequest {
  // name of the program
  string name = 2;
  // reference id for the program, can be business_id or store_id
  string reference_id = 3;
  // reference id type
  MerchantLoyaltyProgramReferenceIdType reference_id_type = 4;
  // Tenancy i.e. employee only for future use
  google.protobuf.StringValue tenancy = 5;
  // Program active from, to keep history
  google.protobuf.Timestamp active_from = 6;
  // Program deactivated at, to keep history
  google.protobuf.Timestamp deactivated_at = 7;
  // CMS id
  string cms_id = 8;
  // provider type
  string provider_type = 9;
  // experience
  common.Experience experience = 10;
  // external id for program
  string external_reference_id = 11;
  // auth type
  string auth_type = 12;
  // external program name i.e. the name the mx uses on their assets for their loyalty program
  google.protobuf.StringValue external_program_name = 13;
  // homegrown loyalty: the point system of the loyalty program
  MerchantLoyaltyPointSystemType point_system = 14;
  // homegrown loyalty: min order value for earning points
  google.protobuf.Int32Value min_spend_to_earn_points = 15;
  // define the membership validation period, if the program needs to re-validate the membership status periodically
  google.protobuf.Int32Value validation_interval_sec = 16;
  // reward type for the loyalty program
  LoyaltyRewardSystemType reward_type = 17;
  // used for testing loyalty programs without setting it live for all users
  google.protobuf.BoolValue test_mode = 18;
  // enables loyalty accrual flow
  google.protobuf.BoolValue enable_accrual = 19;
  // reward/promo stacking configuration
  MerchantLoyaltyRewardPromotionStackingType reward_promo_stacking_type = 20;
  // additional program configuration key value map
  map<string, google.protobuf.StringValue> configuration = 21;
}

// response for creating program
message UpsertProgramResponse {
  // on success, return program
  message Success {
    // loyalty program associated with reference id(business id)
    MerchantLoyaltyProgram program = 1;
  }
  // result is either success or error
  oneof result {
    // on success, return program
    Success success = 1;
    // on failure, return error
    MerchantLoyaltyError error = 2;
  }
}

// Represents the type of actions we need to take for upserting program membership
enum UpsertProgramMembershipActions {
  // unspecified
  UPSERT_PROGRAM_MEMBERSHIP_ACTIONS_UNSPECIFIED = 0;
  // no need for any further actions
  UPSERT_PROGRAM_MEMBERSHIP_ACTIONS_NO_ACTION = 1;
  // use validation
  UPSERT_PROGRAM_MEMBERSHIP_ACTIONS_MEMBERSHIP_VALIDATION = 2;
  // use create external user
  UPSERT_PROGRAM_MEMBERSHIP_ACTIONS_CREATE_NEW_MEMBERSHIP = 3;
  // use get external user
  UPSERT_PROGRAM_MEMBERSHIP_ACTIONS_GET_MEMBERSHIP = 4;
  // add membership purchase intention
  UPSERT_PROGRAM_MEMBERSHIP_ACTIONS_ADD_MEMBERSHIP_PURCHASE = 5;
  // remove membership purchase intention
  UPSERT_PROGRAM_MEMBERSHIP_ACTIONS_REMOVE_MEMBERSHIP_PURCHASE = 6;
  // send one time password to customer
  UPSERT_PROGRAM_MEMBERSHIP_ACTIONS_SEND_ONE_TIME_PASSWORD = 7;
  // verify one time password
  UPSERT_PROGRAM_MEMBERSHIP_ACTIONS_VERIFY_ONE_TIME_PASSWORD = 8;
  // mobile app flow
  UPSERT_PROGRAM_MEMBERSHIP_ACTIONS_STOREFRONT_MOBILE_APP = 9;
  // use create external user with external loyalty ID as loyalty code
  UPSERT_PROGRAM_MEMBERSHIP_ACTIONS_CREATE_NEW_MEMBERSHIP_EXTERNAL = 10;
}

// request for creating consumer membership
message UpsertProgramMembershipRequest {
  // consumer id
  string consumer_id = 1;
  // loyalty program id
  string program_id = 2;
  // loyalty code entered by the consumer
  string loyalty_code = 3;
  // consumer data
  common.loyalty.v1.LoyaltyConsumerData loyalty_consumer_data = 4;
  // Action which needs to be taken
  UpsertProgramMembershipActions action = 5;
  // redirect uri
  string redirect_uri = 6;
  // optional. one time password, only used when action == verify_one_time_password.
  string one_time_password = 7;
  // optional. should skip validation or not.
  google.protobuf.BoolValue should_skip_validation = 8;
  // optional. needed for mobile apps flow.
  google.protobuf.StringValue external_consumer_id = 9;
  // optional. needed for olopunchh integration
  google.protobuf.StringValue cart_uuid = 10;
  // optional. needed for olopunchh loyalty integration
  google.protobuf.StringValue store_id = 11;
}

// response for creating consumer membership
message UpsertProgramMembershipResponse {
  // on success, return consumer membership
  message Success {
    // consumer membership
    MerchantLoyaltyProgramMembership membership = 1;
    // consumer data
    common.loyalty.v1.LoyaltyUserInfo loyalty_user_info = 2;
  }
  // result is either success or error
  oneof result {
    // on success, return consumer membership
    Success success = 1;
    // on failure, return error
    MerchantLoyaltyError error = 2;
  }
}

// request for deleting consumer membership
message DeleteProgramMembershipRequest {
  // consumer id
  string consumer_id = 1;
  // loyalty program id
  string program_id = 2;
  // external loyalty consumer id
  string external_loyalty_consumer_id = 3;
}

// response for deleting consumer membership
message DeleteProgramMembershipResponse {
  // on success, return consumer membership
  message Success {}
  // result is either success or error
  oneof result {
    // on success, return nothing
    Success success = 1;
    // on failure, return error
    MerchantLoyaltyError error = 2;
  }
}

// request for creating program promotion
message UpsertProgramPromotionRequest {
  // loyalty program id
  string program_id = 1;
  // audience campaign tag associated with promotion
  string consumer_audience_tag = 2;
  // Promotion active from, to keep history
  google.protobuf.Timestamp active_from = 6;
  // Promotion deactivated at, to keep history
  google.protobuf.Timestamp deactivated_at = 7;
  // the points required to earn this promotion
  google.protobuf.Int32Value incentive_criteria_points = 8;
  // the campaign id of the promotion
  google.protobuf.StringValue campaign_id = 9;
  // the name of the promotion (for display purpose)
  google.protobuf.StringValue name = 10;
  // UUID of the promotion, for updates only
  google.protobuf.StringValue id = 11;
  // experience
  common.Experience experience = 12;
  // the flat amount off per unit for the promotion
  google.protobuf.Int32Value flat_amount_off_unit_amount = 13;
}

// response for creating/updating program promotion
message UpsertProgramPromotionResponse {
  // on success, return loyalty program promotion
  message Success {
    // loyalty program promotion
    MerchantLoyaltyProgramPromotion promotion = 1;
  }
  // result is either success or error
  oneof result {
    // on success, return program promotion
    Success success = 1;
    // on failure, return error
    MerchantLoyaltyError error = 2;
  }
}

// request to get external consumer information
message GetExternalLoyaltyConsumerInfoRequest {
  // consumer id
  string consumer_id = 1;
  // loyalty program id
  string program_id = 2;
  // auth code needed for some providers
  google.protobuf.StringValue auth_code = 3;
}

// response for get external consumer information
message GetExternalLoyaltyConsumerInfoResponse {
  // on success, return consumer loyalty data
  message Success {
    // consumer data
    common.loyalty.v1.LoyaltyUserInfo loyalty_user_info = 1;
  }
  // result is either success or error
  oneof result {
    // on success, return consumer loyalty data
    Success success = 1;
    // on failure, return error
    MerchantLoyaltyError error = 2;
  }
}

// request to get loyalty account information
message GetExternalLoyaltyAccountInfoRequest {
  // consumer id
  string consumer_id = 1;
  // loyalty program id
  string program_id = 2;
  // internal store id
  string store_id = 3;
}

// response for get loyalty account information
message GetExternalLoyaltyAccountInfoResponse {
  // on success, return loyalty account info
  message Success {
    // account info
    common.loyalty.v1.LoyaltyAccountInfo loyalty_account_info = 1;
  }
  // result is either success or error
  oneof result {
    // on success, return loyalty account info
    Success success = 1;
    // on failure, return error
    MerchantLoyaltyError error = 2;
  }
}

// Request to copying the membership info from one consumer to another
message CopyMembershipRequest {
  // from consumer id
  string from_consumer_id = 1;
  // to consumer id
  string to_consumer_id = 2;
  // program
  string program_id = 3;
  // phone number for migrating OCL data if user cannot be found
  google.protobuf.StringValue phone_number = 4;
  // email for migrating OCL data if user cannot be found
  google.protobuf.StringValue email = 5;
}

// Response after copying the membership info from one consumer to another
message CopyMembershipResponse {
  // on success, return nothing.
  message Success {}
  // result is either success or error
  oneof result {
    // on success, return nothing
    Success success = 1;
    // on failure, return error
    MerchantLoyaltyError error = 2;
  }
}

// OrderCartSummary
message OrderCartSummary {
  // subtotal
  money.MonetaryFields subtotal = 1;
  // tax
  money.MonetaryFields tax = 2;
  // discounts
  money.MonetaryFields discounts = 3;
  // merchant tips
  money.MonetaryFields merchant_tip = 4;
  // Original check total without tips
  money.MonetaryFields order_total_without_tips = 5;
  // Check total paid by the Cx
  money.MonetaryFields actual_order_total = 6;
  // time when order is created
  google.protobuf.Timestamp order_created_at = 7;
  // cart uuid
  google.protobuf.StringValue cart_uuid = 8;
  // Details of the cart items which may be needed by the external provider to return item-based rewards.
  repeated common.loyalty.v1.ExternalLoyaltyCartItem items = 9;
}

// AdjustmentReason
enum AdjustmentReason {
  // Unspecified
  ADJUSTMENT_REASON_UNSPECIFIED = 0;
  // order adjustment
  ADJUSTMENT_REASON_ADJUSTMENT = 1;
  // order cancellation
  ADJUSTMENT_REASON_CANCELLATION = 2;
  // order missing/incorrect
  ADJUSTMENT_REASON_MISSING_AND_INCORRECT = 3;
}

// AdjustmentMetadata
message AdjustmentMetadata {
  // adjustment is either order cart summary or refund amount
  oneof adjustment {
    // order cart summary for order adjustment/cancellation case
    OrderCartSummary order_cart_summary = 1;
    // refund amount for order missing/incorrect case
    money.MonetaryFields refund_amount = 2;
  }
  // to track what originated this request
  AdjustmentReason adjustment_reason = 3;
  // adjusted loyalty rewards
  money.LoyaltyRewardDetails loyalty_rewards = 4;
}

// GetLoyaltyRewardsForOrderRequest
message GetLoyaltyRewardsForOrderRequest {
  // consumer id
  google.protobuf.Int64Value consumer_id = 1;
  // program id
  google.protobuf.StringValue program_id = 2;
  // store id
  google.protobuf.StringValue store_id = 3;
  // order cart
  OrderCartSummary order_cart_summary = 4;
  // flow_type
  common.loyalty.v1.GetLoyaltyRewardsFlowType flow_type = 5;
  // fulfillment_type
  common.FulfillmentType fulfillment_type = 6;
}

// GetLoyaltyRewardsForOrderResponse
message GetLoyaltyRewardsForOrderResponse {
  // on success, return rewards info
  message Success {
    // loyalty rewards
    money.LoyaltyRewardDetails loyalty_rewards = 1;
  }
  // result is either success or error
  oneof result {
    // on success, return loyalty account info
    Success success = 1;
    // on failure, return error
    MerchantLoyaltyError error = 2;
  }
}

// GetAllLoyaltyRewardsForUserRequest
message GetAllLoyaltyRewardsForUserRequest {
  // consumer id
  google.protobuf.Int64Value consumer_id = 1;
  // program id
  google.protobuf.StringValue program_id = 2;
  // store id
  google.protobuf.StringValue store_id = 3;
}

// GetAllLoyaltyRewardsForUserResponse
message GetAllLoyaltyRewardsForUserResponse {
  // on success, return rewards info
  message Success {
    // loyalty rewards
    money.LoyaltyRewardDetails loyalty_rewards = 1;
    // For Olo Punchh integration, this endpoint returns membership id
    google.protobuf.StringValue membership_id = 2;
  }
  // result is either success or error
  oneof result {
    // on success, return loyalty account info
    Success success = 1;
    // on failure, return error
    MerchantLoyaltyError error = 2;
  }
}

// RedeemLoyaltyRewardsForOrderRequest
message RedeemLoyaltyRewardsForOrderRequest {
  // consumer id
  google.protobuf.Int64Value consumer_id = 1;
  // program id
  google.protobuf.StringValue program_id = 2;
  // store id
  google.protobuf.StringValue store_id = 3;
  // delivery uuid
  google.protobuf.StringValue delivery_uuid = 4;
  // summary
  OrderCartSummary order_cart_summary = 5;
  // loyalty rewards
  money.LoyaltyRewardDetails loyalty_rewards = 6;
  // fulfillment_type
  common.FulfillmentType fulfillment_type = 7;
}

// RedeemLoyaltyRewardsForOrderResponse
message RedeemLoyaltyRewardsForOrderResponse {
  // success
  message Success {}
  // result is either success or error
  oneof result {
    // on success, return program and membership
    Success success = 1;
    // on failure, return error
    MerchantLoyaltyError error = 2;
  }
}

// Request for adjusting loyalty rewards when there's an order cancellation/adjustment/incorrect
message AdjustLoyaltyRewardsForOrderRequest {
  // consumer id
  google.protobuf.Int64Value consumer_id = 1;
  // program id
  google.protobuf.StringValue program_id = 2;
  // store id
  google.protobuf.StringValue store_id = 3;
  // delivery uuid
  google.protobuf.StringValue delivery_uuid = 4;
  // adjustment metadata
  AdjustmentMetadata metadata = 5;
  // fulfillment_type
  common.FulfillmentType fulfillment_type = 6;
}

// Response for adjusting loyalty rewards when there's an order cancellation/adjustment
message AdjustLoyaltyRewardsForOrderResponse {
  // success
  message Success {}
  // result is either success or error
  oneof result {
    // on success, return program and membership
    Success success = 1;
    // on failure, return error
    MerchantLoyaltyError error = 2;
  }
}

// GetDoorDashLoyaltyPointsPreviewRequest
message GetDoorDashLoyaltyPointsPreviewRequest {
  // order id
  string order_id = 1;
  // consumer id
  string consumer_id = 2;
  // store id (for rollout purposes)
  string store_id = 3;
  // business id this store belongs to (used for obtaining loyalty program for said business)
  string reference_id = 4;
  // Order/cart subtotal
  money.MonetaryFields subtotal = 5;
  // Whether or not the DashPass is applied for order
  google.protobuf.BoolValue is_dashpass_applied = 6;
  // If this is a gifts order
  google.protobuf.BoolValue is_gift = 7;
  // The LOCAL time zone of the order
  string local_time_zone = 8;
  // experience
  common.Experience experience = 9;
  // Alcohol subtotal
  money.MonetaryFields alcohol_subtotal = 10;
  // campaignIds of promo applied to the order
  repeated google.protobuf.StringValue campaign_ids = 11;
  // user cart data
  consumer_pricing.Cart cart = 12;
  // merchant info
  MerchantInfo merchant_info = 13;
  // total promo discounts without credits
  money.MonetaryFields total_promotion_discount_without_credit = 14;
  // list of item price details in the cart, including the item level subtotal and unit price
  repeated money.ItemPriceDetails item_price_details_list = 15;
}

// More Information about the Mx
message MerchantInfo {
  // store location including country short name and submarket id
  common.StoreLocation store_location = 1;
  // including information such a city and state
  common.CommonAddress store_address = 2;
  // additional store information such as business vertical id
  consumer_pricing.AdditionalStoreInfo additional_store_info = 3;
}

// GetDoorDashLoyaltyPointsPreviewResponse
message GetDoorDashLoyaltyPointsPreviewResponse {
  // success
  message Success {
    // loyalty points to be earned from this order
    google.protobuf.Int32Value points = 1;
    // program id of the loyalty program
    string program_id = 2;
    // reward progress display text
    google.protobuf.StringValue rewards_progress_display_text = 3;
    // Store Loyalty Program Type
    common.loyalty.v1.StoreLoyaltyProgramType store_loyalty_program_type = 4;
    // program metadata, with text attributes
    common.loyalty.v1.StoreLoyaltyProgramData store_loyalty_program_data = 5;
    // nudge message for sticky footer, such as in progress info, or unused reward info
    google.protobuf.StringValue nudge_message = 6;
    // user loyalty state type
    common.loyalty.v1.UserLoyaltyStateType user_loyalty_state_type = 7;
    // reward type
    LoyaltyRewardSystemType reward_type = 8;
    // external loyalty provider
    common.LoyaltyProviderType loyalty_provider = 9;
    // list of loyalty program summaries that is applicable on the order
    repeated common.loyalty.v1.LoyaltyProgramSummary loyalty_program_summaries = 10;
  }
  // result is either success or error
  oneof result {
    // On success return the points
    Success success = 1;
    // On some failure, return the corresponding error
    MerchantLoyaltyError error = 2;
  }
}

// Request for getting membership by consumer id and program id
message GetMembershipByConsumerAndProgramIdRequest {
  // program id
  google.protobuf.StringValue program_id = 1;
  // consumer id
  google.protobuf.Int64Value consumer_id = 2;
}

// Response for getting membership by consumer id and program id
message GetMembershipByConsumerAndProgramIdResponse {
  // success
  message Success {
    // Membership object that contains info about the cx membership in the program
    MerchantLoyaltyProgramMembership membership = 1;
    // Program object that contains info about the loyalty program
    MerchantLoyaltyProgram program = 2;
  }
  // result is either success or error
  oneof result {
    // On success return the points
    Success success = 1;
    // On some failure, return the corresponding error
    MerchantLoyaltyError error = 2;
  }
}

// Request to get loyalty info by deliveryUUID
message GetLoyaltyInfoByDeliveryUUIDRequest {
  // order id
  google.protobuf.StringValue delivery_uuid = 1;
}

// Response to get loyalty info by deliveryUUID
message GetLoyaltyInfoByDeliveryUUIDResponse {
  // Success
  message Success {
    // loyalty membership info used for the deliveryUUID
    MerchantLoyaltyProgramMembership membership_info = 1;
  }
  // result is either success or error
  oneof result {
    // on success, return the id of the reversed order transaction
    Success success = 1;
    // on failure, return error
    MerchantLoyaltyError error = 2;
  }
}

// Request to upsert merchant loyalty accelerator
message UpsertProgramAcceleratorRequest {
  // the program id that this accelerator belongs to
  string program_id = 1;
  // the segment
  MerchantLoyaltySegmentType segment = 2;
  // segment value (can be null or un-set)
  google.protobuf.StringValue segment_requirement = 3;
  // points multiplier
  string point_multiplier = 4;
  // bonus points
  string point_value = 5;
  // active from time
  google.protobuf.Timestamp active_from = 6;
  // deactivated at time
  google.protobuf.Timestamp deactivated_at = 7;
}

// Response for upsert program accelerator
message UpsertProgramAcceleratorResponse {
  // Success
  message Success {
    // the accelerator information
    MerchantLoyaltyAccelerator accelerator = 1;
  }
  // result is either success or error
  oneof result {
    // on success, return the id of the reversed order transaction
    Success success = 1;
    // on failure, return error
    MerchantLoyaltyError error = 2;
  }
}

// Loyalty Constants
message MerchantLoyaltyConstants {
  // Reference ID type enum (STORE, BUSINESS, BUSINESS_GROUP)
  MerchantLoyaltyProgramReferenceIdType loyalty_program_reference_id_type = 1;
  // Corresponding ID for reference type
  google.protobuf.StringValue loyalty_program_reference_id = 2;
  // Login staging url
  google.protobuf.StringValue login_url_staging = 3;
  // Login production url
  google.protobuf.StringValue login_url_production = 4;
  // Signup staging url
  google.protobuf.StringValue signup_url_staging = 5;
  // Signup production url
  google.protobuf.StringValue signup_url_production = 6;
  // Edit profile staging url
  google.protobuf.StringValue edit_profile_url_staging = 7;
  // Edit profile production url
  google.protobuf.StringValue edit_profile_url_production = 8;
  // Loyalty info JSON
  google.protobuf.StringValue loyalty_info = 9;
  // Created at, housekeeping
  google.protobuf.Timestamp created_at = 10;
  // Updated at, housekeeping
  google.protobuf.Timestamp updated_at = 11;
}

// Request to get loyalty info based on the program type (group) and id
message GetMerchantLoyaltyConstantsRequest {
  // Reference ID type enum (STORE, BUSINESS, BUSINESS_GROUP)
  MerchantLoyaltyProgramReferenceIdType loyalty_program_reference_id_type = 1;
  // Corresponding ID for reference type
  google.protobuf.StringValue loyalty_program_reference_id = 2;
}

// Request to upsert the loyalty info for a merchant
message UpsertMerchantLoyaltyConstantsRequest {
  // Loyalty Info
  MerchantLoyaltyConstants merchant_loyalty_constants = 1;
}

// Request to delete a loyalty
message DeleteMerchantLoyaltyConstantsRequest {
  // Reference ID type enum (STORE, BUSINESS, BUSINESS_GROUP)
  MerchantLoyaltyProgramReferenceIdType loyalty_program_reference_id_type = 1;
  // Corresponding ID for reference type
  google.protobuf.StringValue loyalty_program_reference_id = 2;
}

// Response for getting the loyalty info
message GetMerchantLoyaltyConstantsResponse {
  // On success, return the loyalty info
  message Success {
    // Loyalty information
    MerchantLoyaltyConstants merchant_loyalty_constants = 1;
  }
  // Return one of either the success or error
  oneof result {
    // Success
    Success success = 1;
    // Error
    MerchantLoyaltyError error = 2;
  }
}

// Response for updating the loyalty info
message UpsertMerchantLoyaltyConstantsResponse {
  // On success, return the loyalty info
  message Success {
    // Loyalty information
    MerchantLoyaltyConstants merchant_loyalty_constants = 1;
  }
  // Return one of either the success or error
  oneof result {
    // Success
    Success success = 1;
    // Error
    MerchantLoyaltyError error = 2;
  }
}

// Response for creating the loyalty info
message DeleteMerchantLoyaltyConstantsResponse {
  // On success, return nothing
  message Success {}
  // Return one of either the success or error
  oneof result {
    // Success
    Success success = 1;
    // Error
    MerchantLoyaltyError error = 2;
  }
}

// Request for Fetch and Apply Loyalty Reward
message FetchAndApplyLoyaltyRewardRequest {
  // consumer id
  google.protobuf.Int64Value consumer_id = 1;
  // program id
  google.protobuf.StringValue program_id = 2;
  // store id
  google.protobuf.StringValue store_id = 3;
  // order cart
  OrderCartSummary order_cart_summary = 4;
  // flow_type
  common.loyalty.v1.GetLoyaltyRewardsFlowType flow_type = 5;
  // fulfillment_type
  common.FulfillmentType fulfillment_type = 6;
  // reward id to be applied
  google.protobuf.StringValue reward_id = 7;
}

// Response for Fetch and Apply Loyalty Reward
message FetchAndApplyLoyaltyRewardResponse {
  // on success, return reward details
  message Success {
    // loyalty rewards
    money.LoyaltyRewardDetails loyalty_rewards = 1;
  }
  // result is either success or error
  oneof result {
    // on success, return loyalty account info
    Success success = 1;
    // on failure, return error
    MerchantLoyaltyError error = 2;
  }
}
