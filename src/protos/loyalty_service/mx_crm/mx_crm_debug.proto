syntax = "proto3";

// buf:lint:ignore DIRECTORY_SAME_PACKAGE
// buf:lint:ignore PACKAGE_VERSION_SUFFIX
package loyalty_serivce.mx_crm;

import "google/protobuf/wrappers.proto";

option java_generic_services = true;
option java_multiple_files = true;
// buf:lint:ignore PACKAGE_SAME_JAVA_PACKAGE
option java_package = "com.doordash.rpc.loyalty.mx_crm";

// mx-crm Debug service
service MxCrmDebugService {
  // trigger an endpoint in batch to test pods + DB capacity
  rpc TriggerBatch(TriggerBatchRequest) returns (TriggerBatchResponse);

  // create and upload an photo
  rpc CreateAndUploadPhoto(CreateAndUploadPhotoRequest) returns (CreateAndUploadPhotoResponse);
}

// reqeust to trigger batch of requests with different batch size, and customize batch chunk processing
message TriggerBatchRequest {
  // number of batches to trigger
  int32 num_batches = 1;
  // delay between batches in ms
  int32 batch_process_delay_ms = 2;
  // size of batch
  int32 batch_size = 3;
  // further split batches into chunks (chunk_size <= batch_size)
  int32 batch_chunk_size = 4;
  // delay between processing chunks of a batch
  int32 batch_chunk_process_delay_ms = 5;
  // should perform db read during each operation
  bool db_read_enabled = 6;
  // number of db reads in each operation
  int32 num_db_reads_per_operation = 7;
  // whether or not to execute multiple chunks at the same time
  bool execute_chunks_in_parallel_enabled = 8;
}

// trigger batch response
message TriggerBatchResponse {
  // map of fields
  map<string, string> response_fields = 1;
}

// Request for creating and upload an photo
message CreateAndUploadPhotoRequest {
  // File name with extension.
  google.protobuf.StringValue file_name_with_extension = 1;
  // File path.
  google.protobuf.StringValue file_path = 2;
}

// Response for creating and uploading an photo
message CreateAndUploadPhotoResponse {
  // Photo id.
  google.protobuf.StringValue id = 1;
  // Photo URL.
  google.protobuf.StringValue url = 2;
}
