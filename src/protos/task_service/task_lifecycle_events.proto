syntax = "proto3";

// buf:lint:ignore DIRECTORY_SAME_PACKAGE
package task_service.v2;

import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "state_change_events/delivery_state_change.proto";
import "task_service/task_fulfillment.proto";
import "task_service/task_group.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.task_service";

// Enum to denote event types for task group
enum TaskGroupEventType {
  // unknown event type
  TASK_GROUP_EVENT_TYPE_UNSPECIFIED = 0;
  // task group creation event
  TASK_GROUP_EVENT_TYPE_CREATION_EVENT = 1;
  // task completion event
  TASK_GROUP_EVENT_TYPE_COMPLETION_EVENT = 2;
  // task group cancellation event
  TASK_GROUP_EVENT_TYPE_CANCELLATION_EVENT = 3;
  // task group unassign event
  TASK_GROUP_EVENT_TYPE_UNASSIGN_EVENT = 4;
  // confirm dasher event
  TASK_GROUP_EVENT_TYPE_DELIVERY_CONFIRM_DASHER_EVENT = 5;
  // confirm at store event
  TASK_GROUP_EVENT_TYPE_DELIVERY_CONFIRM_AT_STORE_EVENT = 6;
  // pickup event
  TASK_GROUP_EVENT_TYPE_DELIVERY_PICKUP_EVENT = 7;
  // dropoff event
  TASK_GROUP_EVENT_TYPE_DELIVERY_DROPOFF_EVENT = 8;
  // confirm at consumer event
  TASK_GROUP_EVENT_TYPE_DELIVERY_CONFIRM_AT_CONSUMER_EVENT = 9;
  // cancel delivery event
  TASK_GROUP_EVENT_TYPE_DELIVERY_CANCEL_EVENT = 10;
  // assign delivery event
  TASK_GROUP_EVENT_TYPE_DELIVERY_ASSIGN_EVENT = 11;
  // unassign delivery event
  TASK_GROUP_EVENT_TYPE_DELIVERY_UNASSIGN_EVENT = 12;
  // create v2 delivery event
  TASK_GROUP_EVENT_TYPE_DELIVERY_CREATE_V2_EVENT = 13;
  // batch delivery event
  TASK_GROUP_EVENT_TYPE_DELIVERY_BATCH_EVENT = 14;
  // parked at store event
  TASK_GROUP_EVENT_TYPE_DELIVERY_PARKED_AT_STORE_EVENT = 15;
  // customer unavailable event
  TASK_GROUP_EVENT_TYPE_DELIVERY_CUSTOMER_UNAVAILABLE_EVENT = 16;
  // arriving at consumer event
  TASK_GROUP_EVENT_TYPE_DELIVERY_ARRIVING_AT_CONSUMER_EVENT = 17;
  // dasher attempted delivery event
  TASK_GROUP_EVENT_TYPE_DELIVERY_DASHER_ATTEMPTED_DELIVERY_EVENT = 18;
  // unbatch delivery event
  TASK_GROUP_EVENT_TYPE_DELIVERY_UNBATCH_EVENT = 19;
  // revert dropped off event
  TASK_GROUP_EVENT_TYPE_DELIVERY_REVERT_DROPPED_OFF_EVENT = 20;
  // revert picked up event
  TASK_GROUP_EVENT_TYPE_DELIVERY_REVERT_PICKED_UP_EVENT = 21;
  // consumer pickup delivery event
  TASK_GROUP_EVENT_TYPE_DELIVERY_CONSUMER_PICKUP_EVENT = 22;
  // merchant fulfilled delivery event
  TASK_GROUP_EVENT_TYPE_DELIVERY_MERCHANT_FULFILLED_EVENT = 23;
  // task native assign event
  TASK_GROUP_EVENT_TYPE_TASK_NATIVE_ASSIGN_EVENT = 24;
  // task native acknowledge event
  TASK_GROUP_EVENT_TYPE_TASK_NATIVE_ACKNOWLEDGE_EVENT = 25;
  // task native accept event
  TASK_GROUP_EVENT_TYPE_TASK_NATIVE_ACCEPT_EVENT = 26;
  // task native decline event
  TASK_GROUP_EVENT_TYPE_TASK_NATIVE_DECLINE_EVENT = 27;
  // task native batch event
  TASK_GROUP_EVENT_TYPE_TASK_NATIVE_BATCH_EVENT = 28;
  // task native unbatch event
  TASK_GROUP_EVENT_TYPE_TASK_NATIVE_UNBATCH_EVENT = 29;
  // delivery AOR crossed release threshold event
  TASK_GROUP_EVENT_TYPE_DELIVERY_DASHER_CROSSED_RELEASE_THRESHOLD_EVENT = 30;
  // delivery AOR instant order release to store event
  TASK_GROUP_EVENT_TYPE_DELIVERY_INSTANT_ORDER_RELEASE_TO_STORE_EVENT = 31;
  // delivery assignment constriant updated event
  TASK_GROUP_EVENT_TYPE_DELIVERY_ASSIGNMENT_CONSTRAINT_UPDATED_EVENT = 32;
  // delivery verification event
  TASK_GROUP_EVENT_TYPE_DELIVERY_VERIFICATION_EVENT = 33;
}

// fat task group event
message TaskGroupLifecycleEventV2 {
  // task group identifier
  google.protobuf.StringValue task_group_id = 1;
  // kafka published at timestamp
  google.protobuf.Timestamp published_timestamp = 2;
  // unique idempotency key for kafka event
  google.protobuf.StringValue message_id = 3;
  // dasher id (from TGF)
  google.protobuf.Int64Value dasher_id = 8;
  // shift id (from TGF)
  google.protobuf.Int64Value shift_id = 9;
  // offer id (from TGF)
  google.protobuf.StringValue offer_id = 10;
  // workflow id (from task_group_v2)
  google.protobuf.StringValue workflow_id = 11;
  // type of task group (from task_group_v2)
  TaskGroupType task_group_type = 12;
  // Is it a test task group
  google.protobuf.BoolValue is_test = 13;

  // event type
  TaskGroupEventType event_type = 4;
  // task group fulfillment metadata
  TaskGroupFulfillmentMetadata task_group_fulfillment_metadata = 5;
  // task group data
  TaskGroupData task_group_data = 6;
  // event fields not found in task group or fulfillment data
  AdditionalEventFields additional_event_fields = 7;
}

// These are additional fields not found in TaskGroupData or TGF.
// This is necessary for a small num of delivery events since they have extra data.
// This is only for backwards compatibility and should not be used for new TLE events
message AdditionalEventFields {
  // fields for dasher crossed release threshold event
  DasherCrossedReleaseThresholdEventFields dasher_crossed_release_threshold_event = 1;
  // fields for delivery verification event
  state_change_events.DeliveryVerificationEvent delivery_verification_event = 2;
}

// Fields for DLE dasher crossed release threshold event
message DasherCrossedReleaseThresholdEventFields {
  // distance from store
  google.protobuf.FloatValue distance_from_store = 1;
  // longitude for last location of dasher
  google.protobuf.FloatValue dasher_lng = 2;
  // latitude for last location of dasher
  google.protobuf.FloatValue dasher_lat = 3;
  // store id
  google.protobuf.Int64Value store_id = 4;
}

// Enum to denote event types for offer
enum OfferEventType {
  // unknown event type
  OFFER_EVENT_TYPE_UNSPECIFIED = 0;
  // offer creation event
  OFFER_EVENT_TYPE_CREATION_EVENT = 1;
  // offer acceptance event
  OFFER_EVENT_TYPE_ACCEPTANCE_EVENT = 2;
  // offer decline event
  OFFER_EVENT_TYPE_DECLINE_EVENT = 3;
  // offer failed to publish task on create offer event
  OFFER_EVENT_TYPE_FAILED_TO_PUBLISH_TASK_ON_CREATE_OFFER = 4;
}

// fat offer event (also called "assignment")
message OfferLifecycleEventV2 {
  // offer identifier
  google.protobuf.StringValue offer_id = 1;
  // kafka published at timestamp
  google.protobuf.Timestamp published_timestamp = 2;
  // unique idempotency key for kafka event
  google.protobuf.StringValue message_id = 3;

  // event type
  OfferEventType event_type = 4;
  // offer metadata
  OfferMetadata offer_metadata = 5;
}

// Container protobuf for task service lifecycle events
message TaskServiceLifecycleEvent {
  // kafka published at timestamp
  google.protobuf.Timestamp published_timestamp = 1;
  // unique idempotency key for kafka event
  google.protobuf.StringValue message_id = 2;

  // event types for different task entities (task group, offer)
  oneof event {
    // task group event
    TaskGroupLifecycleEvent task_group_lifecycle_event = 3;
    // offer event
    OfferLifecycleEvent offer_lifecycle_event = 4;
  }
}

// task group event
message TaskGroupLifecycleEvent {
  // task group identifier
  google.protobuf.StringValue task_group_id = 1;

  // event payload
  oneof payload {
    // task group creation event
    TaskGroupCreationEvent task_group_creation_event = 2;
    // task completion event
    TaskCompletionEvent task_completion_event = 3;
    // task group cancellation event
    TaskGroupCancellationEvent task_group_cancellation_event = 4;
    // task group unassign event
    TaskGroupUnassignEvent task_group_unassign_event = 5;
  }
}

// offer event (also called "assignment")
message OfferLifecycleEvent {
  // offer identifier
  google.protobuf.StringValue offer_id = 1;

  // event payload
  oneof payload {
    // offer creation event
    OfferCreationEvent offer_creation_event = 2;
    // offer acceptance event
    OfferAcceptanceEvent offer_acceptance_event = 3;
    // offer decline event
    OfferDeclineEvent offer_decline_event = 4;
  }
}

// task group creation event
message TaskGroupCreationEvent {}

// task completion event
message TaskCompletionEvent {
  // completed at timestamp
  google.protobuf.Timestamp completed_at = 1;
  // task identifier
  TaskIdentifier task_identifier = 2;
}

// task cancellation event
message TaskGroupCancellationEvent {}

// task group unassign event
message TaskGroupUnassignEvent {}

// offer creation event
message OfferCreationEvent {}

// offer acceptance event
message OfferAcceptanceEvent {}

// offer decline event
message OfferDeclineEvent {}
