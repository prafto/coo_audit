syntax = "proto3";
// buf:lint:ignore DIRECTORY_SAME_PACKAGE
package task_service_iguazu_event.v1;

import "common/date.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "task_service/common.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.task_service_iguazu_event";

// Iguazu event accept_modal_payload_sent_event sent before sending the new accept modal payload to client
message AcceptModalPayloadSentEvent {
  // assignment id for the task group
  string assignment_id = 1;
  // shift id of the dasher
  int64 shift_id = 2;
  // id of the dasher
  int64 dasher_id = 3;
  // mp, drive or dsd
  string fulfillment_type = 4;
  // determines if the order is HQHP or not
  bool is_high_paying_order = 5;
  // determines if the order is dsd or not. Can be derived from fulfillment_type but here for backward compatibility
  bool is_dsd = 6;
  // determines if the order is cash order or not
  bool is_cash_order = 7;
  // determines if the earnings mode is time mode or not
  bool is_time_mode = 8;
  // determines if it is a peer to peer order
  bool is_p2p = 9;
  // determines if it is a returnable delivery
  bool is_returnable_delivery = 10;
  // determines if post tipping is eligible for this order
  bool is_post_tipping_eligible = 11;
  // determines if it is a batched order
  bool is_batched = 12;
  // determines if redcard required tag is shown
  bool is_redcard_required = 13;
  // determines if catering bag required tag is shown
  bool is_catering_bag_required = 14;
  // determines if catering setting required tag is shown
  bool is_catering_setup_required = 15;
  // determines if pizza bag required tag is shown
  bool is_pizza_bag_required = 16;
  // determines if it is an alchohol order
  bool is_alchohol = 17;
  // number of deliveries in the current route/assignment
  int32 delivery_count = 18;
  // time when the offer was assigned
  google.protobuf.Timestamp offer_assigned_at = 19;
  // time when the offer was sent by the backed to the client
  google.protobuf.Timestamp offer_sent_at = 20;
  // time when the offer expires
  google.protobuf.Timestamp offer_expires_at = 21;
  // seconds remaining for dasher to confirm, determined from above fields
  int32 seconds_remaining_to_confirm = 22;
  // pay data header shown to the dasher
  string pay_shown_to_dasher = 23;
  // effort estimate shown to the dasher
  string effort_estimate_shown = 24;
  // delivery_by time shown to the dasher
  google.protobuf.Timestamp delivery_time_shown_to_dasher = 25;
  // user locale/language preference
  string locale = 26;
  // uuid of the current delivery
  string delivery_uuid = 27;
  // legacy assignment id
  int64 legacy_assignment_id = 28;
  // is dasher place order protocol, for dasher stores
  bool is_dasher_place = 29;
  // is depot delivery; for dasher labs; self driving robot pickup
  bool is_depot = 30;
  // is packages, for return pickups
  bool is_packages = 31;
}

// Iguazy event for collect store hours ground truth task
message CollectStoreHoursTaskEvent {
  // The email of the submitter of task - usually a DD operator
  google.protobuf.StringValue submitter_email = 1;
  // The date for which the store hours are being collected
  date.Date event_date = 2;
  // This will define the occasion for which the store hours are being collected - Easter, Christmas, etc.
  google.protobuf.StringValue event_name = 3;
  // The time the store opens on the event date (as shown to the dasher)
  google.protobuf.Timestamp dd_store_open_time = 5;
  // The time the store closes on the event date (as shown to the dasher)
  google.protobuf.Timestamp dd_store_close_time = 6;
  // The time the store opens on the event date (collected by Dx)
  google.protobuf.Timestamp collected_store_open_time = 7;
  // The time the store closes on the event date (collected by Dx)
  google.protobuf.Timestamp collected_store_close_time = 8;
  // The store id
  google.protobuf.Int64Value store_id = 9;
  //  The store name
  google.protobuf.StringValue store_name = 10;
  // The business id
  google.protobuf.Int64Value business_id = 11;
  // The business name
  google.protobuf.StringValue business_name = 12;
  // The business vertical id
  google.protobuf.Int64Value business_vertical_id = 13;
  // The timezone of the store
  google.protobuf.StringValue timezone = 15;
  // Is the store open on the event date
  google.protobuf.BoolValue is_store_open = 16;
  // Does store have special hours on event date
  google.protobuf.BoolValue has_special_hours = 17;
  // Does store close after midnight
  google.protobuf.BoolValue ends_next_day = 18;
  // Description of the special hours
  google.protobuf.StringValue description = 19;
  // The time the task was accepted at
  google.protobuf.Timestamp task_accepted_at = 20;
  // The time the store hours were submitted at
  google.protobuf.Timestamp submitted_at = 21;
  // The lat of the dx when the task was submitted
  google.protobuf.DoubleValue dx_lat = 22;
  // The lng of the dx when the task was submitted
  google.protobuf.DoubleValue dx_lng = 23;
  // The lat of the store
  google.protobuf.DoubleValue store_lat = 24;
  // The lng of the store
  google.protobuf.DoubleValue store_lng = 25;
  // The dasher id
  google.protobuf.Int64Value dasher_id = 26;
  // The task group id
  google.protobuf.StringValue task_group_id = 27;
}

// Iguazu event for collect prep time etas ground truth task
message CollectPrepTimeEtaInformationEvent {
  // The date for which the prep times are being collected
  date.Date event_date = 1;
  // The store id
  google.protobuf.Int64Value store_id = 2;
  //  The store name
  google.protobuf.StringValue store_name = 3;
  // The business id
  google.protobuf.Int64Value business_id = 4;
  // The business name
  google.protobuf.StringValue business_name = 5;
  // The business vertical id
  google.protobuf.Int64Value business_vertical_id = 6;
  // The time the task was accepted at
  google.protobuf.Timestamp task_accepted_at = 7;
  // The dasher id
  google.protobuf.Int64Value dasher_id = 8;
  // The task group id
  google.protobuf.StringValue task_group_id = 9;
  // field to collect average prep time
  google.protobuf.Int64Value estimated_average_prep_time = 10;
  // field to collect on average number of concurrent orders
  google.protobuf.Int64Value number_of_concurrent_orders = 11;
  // field to collect busiest times for merchant
  google.protobuf.StringValue busy_peak_times = 12;
  // field to collect impact level with prep times for number of distinct items
  google.protobuf.StringValue number_of_distinct_items_impact = 13;
  // field to collect impact level with prep times for dollar value
  google.protobuf.StringValue total_dollar_value_impact = 14;
  // field to collect impact level to merchant operations for dasher arrival time
  google.protobuf.StringValue dasher_arrival_time_impact = 15;
}

// Iguazu event for the merchant fraud ground truth task
message MerchantFraudEvent {
  // The date for this task to be completed
  date.Date event_date = 1;
  // The store id
  google.protobuf.Int64Value store_id = 2;
  //  The store name
  google.protobuf.StringValue store_name = 3;
  // The business id
  google.protobuf.Int64Value business_id = 4;
  // The business name
  google.protobuf.StringValue business_name = 5;
  // The business vertical id
  google.protobuf.Int64Value business_vertical_id = 6;
  // The time the task was accepted at
  google.protobuf.Timestamp task_accepted_at = 7;
  // The dasher id
  google.protobuf.Int64Value dasher_id = 8;
  // The task group id
  google.protobuf.StringValue task_group_id = 9;
  // merchant contact name
  google.protobuf.StringValue merchant_contact_name = 10;
  // merchant contact email
  google.protobuf.StringValue merchant_contact_email = 11;
  // merchant phone number
  google.protobuf.StringValue merchant_contact_phone_number = 12;
  // radio buttons merchant self help issue faced
  google.protobuf.StringValue self_help_issue_faced = 13;
  // merchant self help issue faced more details
  google.protobuf.StringValue self_help_issue_faced_details = 14;
  // radio buttons for if a contact is recognized by employees/manager
  google.protobuf.StringValue merchant_contact_recognition_details = 15;
  // radio buttons for if the store tried to signup
  google.protobuf.StringValue store_initiated_details = 16;
  // What employee said when they're not sure if store is trying to sign up
  google.protobuf.StringValue store_signup_additional_text = 17;
  // What merchant contact info does the employee recognized when they don't know all
  google.protobuf.StringValue merchant_contact_recognized_info = 18;
}

// Iguazy event for collect property photos ground truth task
message CollectPropertyPhotosTaskEvent {
  // The email of the submitter of task - usually a DD operator
  google.protobuf.StringValue submitter_email = 1;
  // The time of event creation
  google.protobuf.Timestamp created_at = 2;
  // The time of completion of the task, whether successful or unsuccessful
  google.protobuf.Timestamp completed_at = 3;
  // Address name of the property
  string source_formatted_address = 4;
  // Name of the property to collect photos from, Displayed on Dx Accept and Earning screens
  string property_name = 5;
  // Type of the property: Mall, Office Park etc
  string property_type = 6;
  // Building ID: B000CTRGCFIQ, D000PISUEVG0
  google.protobuf.StringValue building_id = 7;
  // POI Id: B000CTPGXK6P, D000PISUW4NT
  google.protobuf.StringValue poi_id = 8;
  // The dasher id
  google.protobuf.Int64Value dasher_id = 9;
  // The task group id
  google.protobuf.StringValue task_group_id = 10;
  // The timezone of the property
  google.protobuf.StringValue timezone = 11;
  // Status of task: pending, cancelled, or succeeded
  TaskStatus task_status = 12;
}

// Iguazy event of issue report for collect property photos ground truth task
message CollectPropertyPhotosReportIssueEvent {
  // The task group id
  google.protobuf.StringValue task_group_id = 1;
  // The dasher id
  google.protobuf.Int64Value dasher_id = 2;
  // The angle of photo
  google.protobuf.StringValue angle = 3;
  // Reason for issue report
  google.protobuf.StringValue reason = 4;
}

// Iguazy event of photo taken for collect property photos ground truth task
message CollectPropertyPhotosPhotoTakenEvent {
  // Course
  google.protobuf.StringValue course = 1;
  // Longitude
  google.protobuf.StringValue longitude = 2;
  // Latitude
  google.protobuf.StringValue latitude = 3;
  // Photo horizontal accuracy
  google.protobuf.StringValue horizontal_accuracy = 4;
  // Photo vertical accuracy
  google.protobuf.StringValue vertical_accuracy = 5;
  // Photo altitude
  google.protobuf.StringValue altitude = 6;
  // The time of photo taken
  google.protobuf.Timestamp photo_timestamp = 7;
  // Photo identifier
  google.protobuf.StringValue photo_identifier = 8;
  // The angle of photo
  google.protobuf.StringValue angle = 9;
  // The task group id
  google.protobuf.StringValue task_group_id = 10;
  // The dasher id
  google.protobuf.Int64Value dasher_id = 11;
}

// Status enum for collect property photos ground truth task
enum TaskStatus {
  // Unspecified
  TASK_STATUS_UNSPECIFIED = 0;
  // Task completes successfully
  TASK_STATUS_DONE = 1;
  // Task gets cancelled
  TASK_STATUS_CANCELLED = 2;
  // Task failed
  TASK_STATUS_FAILED = 3;
  // Task not yet finished
  TASK_STATUS_PENDING = 4;
  // Task failed due to internal issue
  TASK_STATUS_FAILED_INTERNAL = 5;
}
