syntax = "proto3";

// buf:lint:ignore DIRECTORY_SAME_PACKAGE
package task_service.v2;

import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "task_service/common.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.task_service";

// Service for task fulfillment
service TaskFulfillmentService {
  // Create a new offer
  rpc CreateOffer(CreateOfferRequest) returns (CreateOfferResponse);
  // Create and accept a new offer
  rpc CreateAndAcceptOffer(CreateAndAcceptOfferRequest) returns (CreateAndAcceptOfferResponse);
  // Acknowledge the offer has been received
  rpc AcknowledgeOffer(AcknowledgeOfferRequest) returns (AcknowledgeOfferResponse);
  // Accept the offer
  rpc AcceptOffer(AcceptOfferRequest) returns (AcceptOfferResponse);
  // Decline the offer
  rpc DeclineOffer(DeclineOfferRequest) returns (DeclineOfferResponse);
  // Selectively unassign a task group
  rpc UnassignTaskGroup(UnassignTaskGroupRequest) returns (UnassignTaskGroupResponse);
  // Mark a task as completed
  rpc CompleteStep(CompleteStepRequest) returns (CompleteStepResponse);
  // Reverts a step/task/task group/offer data to not be completed
  rpc RevertStep(RevertStepRequest) returns (RevertStepResponse);
  // Polling endpoint to retrieve active offer ids for a shift
  rpc GetActiveOfferIdsForShift(GetActiveOfferIdsForShiftRequest) returns (GetActiveOfferIdsForShiftResponse);
  // Get latest trip including route and itinerary
  rpc GetCurrentTrip(GetCurrentTripRequest) returns (GetCurrentTripResponse);
  // Get latest trip including route and itinerary json information for task debugger
  rpc GetCurrentTripJsonData(GetCurrentTripJsonDataRequest) returns (GetCurrentTripJsonDataResponse);
  // Get latest trips including route and itinerary
  rpc GetCurrentTrips(GetCurrentTripsRequest) returns (GetCurrentTripsResponse);
  // [Deprecated] Polling endpoint to retrieve active tasks for a shift (post acceptance)
  rpc GetPendingStepsForShift(GetPendingStepsForShiftRequest) returns (GetPendingStepsForShiftResponse);
  // [Deprecated] Fetch the latest shift route
  rpc GetShiftRoute(GetShiftRouteRequest) returns (GetShiftRouteResponse);
  // [Deprecated] Fetch shift routes
  rpc GetShiftRoutes(GetShiftRoutesRequest) returns (GetShiftRoutesResponse);
  // Fetch the current shift route and itinerary and offered route
  rpc GetShiftRouteV2(GetShiftRouteV2Request) returns (GetShiftRouteV2Response);
  // Fetch the current shift routes and itineraries and offered routes
  rpc GetShiftRoutesV2(GetShiftRoutesV2Request) returns (GetShiftRoutesV2Response);
  // Fetch the fulfillment history
  rpc GetFulfillmentHistory(GetFulfillmentHistoryRequest) returns (GetFulfillmentHistoryResponse);
  // Fetch the batched fulfillment history (intended for deep-red use only)
  rpc GetFulfillmentHistoryBatched(GetFulfillmentHistoryBatchedRequest) returns (GetFulfillmentHistoryBatchedResponse);
  // Search the fulfillment history by parameters
  rpc FilterFulfillmentHistory(FilterFulfillmentHistoryRequest) returns (FilterFulfillmentHistoryResponse);
  // Search the fulfillment history by parameters and return offer ids
  rpc FilterOfferIdsFromFulfillmentHistory(FilterOfferIdsFromFulfillmentHistoryRequest) returns (FilterOfferIdsFromFulfillmentHistoryResponse);
  // Fetch the offer details
  rpc GetOffer(GetOfferRequest) returns (GetOfferResponse);
  // Lock shift route to prevent new assignments (needed for shift closeout)
  rpc LockShiftRoute(LockShiftRouteRequest) returns (LockShiftRouteResponse);
  // Release lock on shift route (needed for shift closeout)
  rpc ReleaseLockOnShiftRoute(ReleaseLockOnShiftRouteRequest) returns (ReleaseLockOnShiftRouteResponse);
  // Fetch the fulfillment history for task groups in task-debugger
  rpc GetFulfillmentHistoryJsonData(GetFulfillmentHistoryJsonDataRequest) returns (GetFulfillmentHistoryJsonDataResponse);
  // Create a new offer assignment mapping
  rpc CreateOfferAssignmentMapping(CreateOfferAssignmentMappingRequest) returns (CreateOfferAssignmentMappingResponse);
  // Get offer assignment mapping
  rpc GetOfferAssignmentMapping(GetOfferAssignmentMappingRequest) returns (GetOfferAssignmentMappingResponse);
  // Get offer assignment mappings
  rpc GetOfferAssignmentMappings(GetOfferAssignmentMappingsRequest) returns (GetOfferAssignmentMappingsResponse);
  // Send nudge for unconfirmed offers
  rpc SendUnconfirmedOfferNudge(SendUnconfirmedOfferNudgeRequest) returns (SendUnconfirmedOfferNudgeResponse);
  // Update the offer
  rpc UpdateOffer(UpdateOfferRequest) returns (UpdateOfferResponse);
  // Reverse the route for a trip
  rpc ReverseRouteForTrip(ReverseRouteForTripRequest) returns (ReverseRouteForTripResponse);
}

// Request for create offer
message CreateOfferRequest {
  // shift id
  google.protobuf.Int64Value shift_id = 1;
  // source of the offer
  OfferSource offer_source = 2;
  // tenant_id flag
  TenantId tenant_id = 3;
  // recorded lat/lng of the dasher
  LocationCoordinates dasher_location = 4;
  // [deprecated] offered route for the shift
  OfferedShiftRoute offered_shift_route = 5;
  // [deprecated] offered itinerary for the shift
  OfferedItinerary offered_itinerary = 6;
  // offered route for the dasher
  Route offered_route_v2 = 8;
  // expected current route for the trip excluding completed route points
  Route expected_route_v2 = 9;
  // offered itinerary for the dasher
  Itinerary offered_itinerary_v2 = 10;
  // expected current itinerary for the trip excluding completed steps
  Itinerary expected_itinerary_v2 = 11;
  // offered id
  google.protobuf.StringValue offer_id = 7;
  // legacy batch id
  google.protobuf.Int64Value batch_id = 12;
  // is_manually_offered
  google.protobuf.BoolValue is_manually_offered = 13;
  // Assignment legacy identifier
  AssignmentLegacyIdentifiers legacy_identifiers = 14;
  // market id
  google.protobuf.Int64Value market_id = 15;
  // Not needed for GT, but may include later if needed
  // pay_bonus_in_cents
  // dasher user id
  google.protobuf.Int64Value dasher_user_id = 16;
}

// Request for create and accept offer
message CreateAndAcceptOfferRequest {
  // offered id
  google.protobuf.StringValue offer_id = 1;
  // shift id
  google.protobuf.Int64Value shift_id = 2;
  // source of the offer
  OfferSource offer_source = 3;
  // tenant_id flag
  TenantId tenant_id = 4;
  // market id
  google.protobuf.Int64Value market_id = 5;
  // recorded lat/lng of the dasher
  LocationCoordinates dasher_location = 6;
  // offered route for the dasher
  Route offered_route_v2 = 7;
  // expected current route for the trip excluding completed route points
  Route expected_route_v2 = 8;
  // offered itinerary for the dasher
  Itinerary offered_itinerary_v2 = 9;
  // expected current itinerary for the trip excluding completed steps
  Itinerary expected_itinerary_v2 = 10;
}

// Assignment Legacy identifiers
message AssignmentLegacyIdentifiers {
  // deliveryPackageId
  google.protobuf.Int64Value delivery_package_id = 1;
  // assignmentId
  google.protobuf.Int64Value assignment_id = 2;
  // batchId
  google.protobuf.Int64Value batch_id = 3;
}

// Response for create offer
message CreateOfferResponse {
  // new offer that is generated
  Offer new_offer = 1;
}

// Response for create offer
message CreateAndAcceptOfferResponse {
  // new offer that is generated
  Offer new_offer = 1;
}

// Request for acknowledge offer
message AcknowledgeOfferRequest {
  // offer id
  google.protobuf.StringValue offer_id = 1;
  // dasher_user_id
  google.protobuf.Int64Value dasher_user_id = 2;
  // task_group_id
  google.protobuf.StringValue task_group_id = 3;
}

// Response for acknowledge offer
message AcknowledgeOfferResponse {
  // offer acknowledged_at
  google.protobuf.Timestamp acknowledged_at = 1;
}

// Request for accept offer
message AcceptOfferRequest {
  // offer id
  google.protobuf.StringValue offer_id = 1;
}

// Response for accept offer
message AcceptOfferResponse {
  // mappings for the accepted offer
  repeated AcceptOfferResponseMapping accept_offer_mappings = 1;
}

// Response mappings for accept offer
message AcceptOfferResponseMapping {
  //task group id
  google.protobuf.StringValue task_group_id = 1;
  // delivery uuid only for delivery task groups
  google.protobuf.StringValue delivery_uuid = 2;
  // accepted timestamp
  google.protobuf.Timestamp accepted_at = 3;
}

// Request for decline offer
message DeclineOfferRequest {
  // offer id
  google.protobuf.StringValue offer_id = 1;
  // decline reason text
  google.protobuf.StringValue decline_reason_text = 2;
  // is decline excused
  google.protobuf.BoolValue is_decline_excused = 3;
  // is decline by dasher
  google.protobuf.BoolValue is_decline_by_dasher = 4;
}

// Response for decline offer
message DeclineOfferResponse {}

// Request for unassign task group
message UnassignTaskGroupRequest {
  // task_group_id id
  google.protobuf.StringValue task_group_id = 1;
  // unassign reason text
  google.protobuf.StringValue unassign_reason_text = 2;
  // is unassign excused
  google.protobuf.BoolValue is_unassign_excused = 3;
}

// Response for unassign task group
message UnassignTaskGroupResponse {
  // time that it was unassigned
  google.protobuf.Timestamp unassigned_at = 1;
  // was it unassigned by the dasher
  google.protobuf.BoolValue is_unassign_by_dasher = 2;
  // reason for unassign
  google.protobuf.StringValue unassign_reason = 3;
  // is unassign excused
  google.protobuf.BoolValue is_unassign_excused = 4;
  // shift id
  google.protobuf.Int64Value shift_id = 5;
}

// Response for cancel task group
message CancelTaskGroupResponse {}

// Request for complete step
message CompleteStepRequest {
  // step_id
  google.protobuf.StringValue step_id = 1;
  // shift id
  google.protobuf.Int64Value shift_id = 2;
}

// Response for complete step
message CompleteStepResponse {
  // step completion time
  google.protobuf.Timestamp step_completed_at = 1;
  // task completion time
  google.protobuf.Timestamp task_completed_at = 2;
  // optional, if the task was the last in the task group
  google.protobuf.Timestamp task_group_completed_at = 3;
  // optional, if the task group was the last in the workflow
  google.protobuf.Timestamp workflow_completed_at = 4;
}

// request for revert step
message RevertStepRequest {
  // step_id
  google.protobuf.StringValue step_id = 1;
  // shift id
  google.protobuf.Int64Value shift_id = 2;
}

// response for revert step
message RevertStepResponse {
  // step reverted time
  google.protobuf.Timestamp step_reverted_at = 1;
  // task reverted time
  google.protobuf.Timestamp task_reverted_at = 2;
  // optional, if the task group was also reverted
  google.protobuf.Timestamp task_group_reverted_at = 3;
  // optional, if the offer was also reverted
  google.protobuf.Timestamp workflow_reverted_at = 4;
}

// Request for get active offer ids for shift
message GetActiveOfferIdsForShiftRequest {
  // shift id
  google.protobuf.Int64Value shift_id = 1;
}

// Response for get active offer ids for shift
message GetActiveOfferIdsForShiftResponse {
  // offer ids
  repeated google.protobuf.StringValue offer_ids = 1;
}

// Request for get current trip
message GetCurrentTripRequest {
  // one of either shift or trip id
  oneof idenitifier {
    // shift id
    google.protobuf.Int64Value shift_id = 1;
    // trip id
    google.protobuf.StringValue trip_id = 2;
  }
  // flag to control whether to return completed route tasks or not. Default is false.
  google.protobuf.BoolValue should_return_completed_tasks = 3;
}

// Response for get current trip
message GetCurrentTripResponse {
  // trip object response
  Trip trip = 1;
}

// Request for get current trip json data
message GetCurrentTripJsonDataRequest {
  // one of either shift or trip id
  oneof idenitifier {
    // shift id
    google.protobuf.Int64Value shift_id = 1;
    // trip id
    google.protobuf.StringValue trip_id = 2;
  }
  // flag to control whether to return completed route tasks or not. Default is false.
  google.protobuf.BoolValue should_return_completed_tasks = 3;
}

// Response for get current trip json data
message GetCurrentTripJsonDataResponse {
  // trip object response
  google.protobuf.StringValue trip_json_data = 1;
}

// Request for get current trips
message GetCurrentTripsRequest {
  // list of get current trip requests
  repeated google.protobuf.Int64Value shift_ids = 1;
  // flag to control whether to return completed route tasks or not. Default is false.
  google.protobuf.BoolValue should_return_completed_tasks = 2;
}

// Response for get current trips
message GetCurrentTripsResponse {
  // trips object response
  repeated Trip trips = 1;
}

// Request for get pending steps for shift
message GetPendingStepsForShiftRequest {
  // shift id
  google.protobuf.Int64Value shift_id = 1;
}

// Response for get pending steps for shift
message GetPendingStepsForShiftResponse {
  // pending tasks on the shift
  repeated PendingStep pending_steps = 1;
}

// Request to get shift route
message GetShiftRouteRequest {
  // shift id
  google.protobuf.Int64Value shift_id = 1;
  // flag to control whether to return completed route tasks or not. Default is false.
  google.protobuf.BoolValue should_return_completed_tasks = 2;
}

// Response to get shift route
message GetShiftRouteResponse {
  // shift route
  ShiftRoute shift_route = 1;
}

// Request to get shift routes
message GetShiftRoutesRequest {
  // shift ids
  ShiftIds shift_ids = 1;
  // flag to control whether to return completed route tasks or not. Default is false.
  google.protobuf.BoolValue should_return_completed_tasks = 2;
}

// Response to get shift routes
message GetShiftRoutesResponse {
  // shift routes
  repeated ShiftRoute shift_routes = 1;
}

// Request to get shift route v2
message GetShiftRouteV2Request {
  // shift id
  google.protobuf.Int64Value shift_id = 1;
  // flag to control whether to return completed route tasks or not. Default is false.
  google.protobuf.BoolValue should_return_completed_tasks = 2;
}

// Response to get shift route v2
message GetShiftRouteV2Response {
  // shift route
  ShiftRouteV2 shift_route = 1;
}

// Request to get shift routes v2
message GetShiftRoutesV2Request {
  // shift ids
  ShiftIds shift_ids = 1;
  // flag to control whether to return completed route tasks or not. Default is false.
  google.protobuf.BoolValue should_return_completed_tasks = 2;
}

// Response to get shift routes v2
message GetShiftRoutesV2Response {
  // shift routes
  repeated ShiftRouteV2 shift_routes = 1;
}

// Request for get fulfillment history
message GetFulfillmentHistoryRequest {
  // one of either shift or task group id
  oneof idenitifier {
    // task group id
    google.protobuf.StringValue task_group_id = 1;
    // shift id
    google.protobuf.Int64Value shift_id = 2;
    // offer id
    google.protobuf.StringValue offer_id = 3;
  }
  // Use follower reads - true by default
  google.protobuf.BoolValue use_follower_reads = 4;
}

// Response for get fulfillment history
message GetFulfillmentHistoryResponse {
  // task group fulfillment history (desc order)
  repeated TaskGroupFulfillment fulfillment_history = 1;
}

// request for get fulfillment history batched
message GetFulfillmentHistoryBatchedRequest {
  // one of either shifts or task group ids
  oneof identifier {
    // shift ids
    ShiftIds shift_ids = 1;
    // task group ids
    TaskGroupIds task_group_ids = 2;
    // task offer ids
    OfferIds offer_ids = 3;
  }
}

// response for get fulfillment history batched
message GetFulfillmentHistoryBatchedResponse {
  // task group fulfillment history (desc order)
  repeated TaskGroupFulfillment fulfillment_history = 1;
}

// Request for search fulfillment history
message FilterFulfillmentHistoryRequest {
  //Primary search parameters - at least one must be provided.
  // task group id
  google.protobuf.StringValue task_group_id = 1;
  // shift id
  google.protobuf.Int64Value shift_id = 2;
  // offer id
  google.protobuf.StringValue offer_id = 3;
  // dasher id
  google.protobuf.Int64Value dasher_id = 4;

  //Secondary search parameters - optional
  // is task group accepted
  google.protobuf.BoolValue is_accepted = 5;
  // is task group unassigned
  google.protobuf.BoolValue is_unassigned = 6;
  // is task group completed
  google.protobuf.BoolValue is_completed = 7;
  // created_at start
  google.protobuf.Timestamp created_at_start = 8;
  // created_at end
  google.protobuf.Timestamp created_at_end = 9;
  // limit
  google.protobuf.Int32Value limit = 10;
}

// response for search fulfillment history
message FilterFulfillmentHistoryResponse {
  // task group fulfillment history (desc order)
  repeated TaskGroupFulfillment fulfillment_history = 1;
}

// request for list offerIds from fulfillment history filter
message FilterOfferIdsFromFulfillmentHistoryRequest {
  //Primary search parameters - at least one must be provided.
  // task group ids
  repeated google.protobuf.StringValue task_group_ids = 1;
  // shift ids
  repeated google.protobuf.Int64Value shift_ids = 2;
  // dasher ids
  repeated google.protobuf.Int64Value dasher_ids = 3;

  //Secondary search parameters - optional
  // is task group accepted
  google.protobuf.BoolValue is_accepted = 4;
  // is task group unassigned
  google.protobuf.BoolValue is_unassigned = 5;
  // created_at start
  google.protobuf.Timestamp created_at_start = 6;
  // created_at end
  google.protobuf.Timestamp created_at_end = 7;
  // limit
  google.protobuf.Int64Value limit = 8;
  // return latest assignment first, default true
  google.protobuf.BoolValue sort_by_latest_first = 9;
}

// Response for list offerIds from fulfillment history filter
message FilterOfferIdsFromFulfillmentHistoryResponse {
  // offer ids
  repeated google.protobuf.StringValue offer_ids = 1;
}

// Request for get offer
message GetOfferRequest {
  // offer id
  google.protobuf.StringValue offer_id = 1;
}

// Response for get offer
message GetOfferResponse {
  // offer
  Offer offer = 1;
}

// Lock shift route request
message LockShiftRouteRequest {
  // shift id
  google.protobuf.Int64Value shift_id = 1;
}

// Lock shift route response
message LockShiftRouteResponse {
  // timestamp of when shift route was locked. Lock will only persist for 60s
  google.protobuf.Timestamp shift_route_locked_at = 1;
}

// Release lock on shift route request
message ReleaseLockOnShiftRouteRequest {
  // shift id
  google.protobuf.Int64Value shift_id = 1;
}

// Release lock on shift route response
message ReleaseLockOnShiftRouteResponse {}

// Trip object including route tasks and itinerary steps
message Trip {
  // identifier for the trip
  google.protobuf.StringValue trip_id = 1;
  // shift id
  google.protobuf.Int64Value shift_id = 2;
  // dasher id
  google.protobuf.Int64Value dasher_id = 3;
  // updated_at
  google.protobuf.Timestamp updated_at = 6;
  // the current route is composed of repeated route tasks
  Route route = 4;
  // the current itinerary is composed of repeated pending steps
  Itinerary itinerary = 5;
}

// Shift route V2 object
message ShiftRouteV2 {
  // shift id
  google.protobuf.Int64Value shift_id = 1;
  // trip
  Trip trip = 2;
  // offer
  Offer pending_offer = 3;
}

// [deprecated] Offered shift route object (by deep-red)
message OfferedShiftRoute {
  // the shift route is composed of repeated route tasks
  repeated OfferedRouteTask offered_route_tasks = 1;
}

// [deprecated] Offered route task object (by deep-red)
message OfferedRouteTask {
  // task type
  google.protobuf.StringValue task_type = 1;
  // task identifier
  TaskIdentifier task_identifer = 2;
  // lat/lng for the route task
  LocationCoordinates location = 3;
  // calculated time for completion
  google.protobuf.Timestamp calculated_time = 4;
  // completed at time
  google.protobuf.Timestamp completed_at = 5;
}

// Shift route object
message ShiftRoute {
  // identifier for the trip
  google.protobuf.StringValue trip_id = 1;
  // the shift route is composed of repeated route tasks
  repeated RouteTask route_tasks = 2;
  // shift id
  google.protobuf.Int64Value shift_id = 3;
  // dasher id
  google.protobuf.Int64Value dasher_id = 4;
}

// route composed of a list of tasks
message Route {
  // tasks in the route
  repeated RouteTask route_tasks = 1;
}

// Route task object
message RouteTask {
  reserved 4, 5;
  // task type
  google.protobuf.StringValue task_type = 1;
  // task identifier
  TaskIdentifier task_identifer = 2;
  // offer id
  google.protobuf.StringValue offer_id = 3;
  // lat/lng for the route task
  LocationCoordinates location = 6;
  // calculated time for completion
  google.protobuf.Timestamp calculated_time = 7;
  // dynamic time for completion
  google.protobuf.Timestamp dynamic_time = 8;
  // completed at time
  google.protobuf.Timestamp completed_at = 9;
  // estimations
  repeated RouteTaskEstimation estimations = 10;
  // travel pay type
  TravelPayType travel_pay_type = 11;
}

// Estimation for the route task
message RouteTaskEstimation {
  // name of the estimation
  google.protobuf.StringValue name = 1;
  // estimation value
  google.protobuf.Int64Value value = 2;
  // estimation source
  google.protobuf.StringValue source = 3;
}

// offer
message Offer {
  reserved 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17;
  reserved "dasher_id", "dasher_user_id", "dasher_location", "acknowledged_at", "accepted_at", "declined_at", "decline_reason_text", "is_decline_excused", "decline_source", "is_stacked", "new_shift_route", "previous_shift_route", "task_group_ids";
  // offer id
  google.protobuf.StringValue offer_id = 1;
  // shift id
  google.protobuf.Int64Value shift_id = 2;
  // enum state of the offer -- proposed/acknowledged/accepted/declined/completed
  OfferState state = 6;
  // when the offer was proposed/created
  google.protobuf.Timestamp created_at = 7;
  // when the offer was last updated
  google.protobuf.Timestamp updated_at = 19;
  // offer metadata
  OfferMetadata metadata = 18;
}

// metadata for offer
message OfferMetadata {
  // dasher id
  google.protobuf.Int64Value dasher_id = 1;
  // dasher user id
  google.protobuf.Int64Value dasher_user_id = 2;
  // lat/lng of the dasher
  LocationCoordinates dasher_location = 3;
  // when the dasher sees the offer in app
  google.protobuf.Timestamp acknowledged_at = 4;
  // when the dasher accepts the offer
  google.protobuf.Timestamp accepted_at = 5;
  // when the dasher declines the offer
  google.protobuf.Timestamp declined_at = 6;
  // decline reason
  google.protobuf.StringValue decline_reason_text = 7;
  // if the decline is excused
  google.protobuf.BoolValue is_decline_excused = 8;
  // source of the decine
  google.protobuf.StringValue decline_source = 9;
  // if there are multiple task groups in the offer
  google.protobuf.BoolValue is_stacked = 10;
  // [deprecated] new route (given by deep-red)
  ShiftRoute new_shift_route = 11;
  // [deprecated] new itinerary (given by deep-red)
  OfferedItinerary new_itinerary = 15;
  // [deprecated] previous route (given by deep-red)
  ShiftRoute previous_shift_route = 12;
  // [deprecated] previous itinerary (given by deep-red)
  OfferedItinerary previous_itinerary = 16;
  // new route (given by deep-red)
  Route new_route_v2 = 18;
  // new itinerary (given by deep-red)
  Itinerary new_itinerary_v2 = 19;
  // previous route (given by deep-red)
  Route previous_route_v2 = 20;
  // previous itinerary (given by deep-red)
  Itinerary previous_itinerary_v2 = 21;
  // task groups ids in the offer
  repeated google.protobuf.StringValue task_group_ids = 13;
  // completed at
  google.protobuf.Timestamp completed_at = 14;
  // field mask for updated fields
  google.protobuf.FieldMask updated_fields = 17;
  // flag for manual / forced offers
  google.protobuf.BoolValue is_manually_offered = 22;
  // immobile dasher strikes
  google.protobuf.Int32Value num_of_immobile_dasher_strikes = 23;
  // flag for dasher having seen immobile dasher strike alert
  google.protobuf.BoolValue has_seen_strike_alert = 24;
  // trip id for offer, set after accept offer
  google.protobuf.StringValue trip_id = 25;
  // flag for shadow offers only for validation
  google.protobuf.BoolValue is_shadow = 26;
  // flag for test offers
  google.protobuf.BoolValue is_test = 27;
  // market id
  google.protobuf.Int64Value market_id = 28;
}

// Offer state enum
enum OfferState {
  // unknown
  OFFER_STATE_UNSPECIFIED = 0;
  // proposed
  OFFER_STATE_PROPOSED = 1;
  // acknowledged
  OFFER_STATE_ACKNOWLEDGED = 2;
  // accepted
  OFFER_STATE_ACCEPTED = 3;
  // declined
  OFFER_STATE_DECLINED = 4;
  // completed
  OFFER_STATE_COMPLETED = 5;
}

// enum for offer source/creator
enum OfferSource {
  // unknown
  OFFER_SOURCE_UNSPECIFIED = 0;
  // deep red
  OFFER_SOURCE_DEEP_RED = 1;
  // fallback assigner
  OFFER_SOURCE_FALLBACK_ASSIGNER = 2;
  // thq
  OFFER_SOURCE_THQ = 3;
  // legacy assignment
  OFFER_SOURCE_LEGACY_ASSIGNMENT = 4;
}

// Pending step, used to power the dx app experience
message PendingStep {
  // step_id (uuid),
  google.protobuf.StringValue step_id = 1;
  // task_identifiers
  repeated TaskIdentifier associated_task_identifiers = 2;
  // updated_at
  google.protobuf.Timestamp updated_at = 3;
  // step type
  google.protobuf.StringValue step_type = 4;
}

// fulfillment timestamps on the task group
message TaskGroupFulfillment {
  reserved 9, 10, 11, 12, 13;
  reserved "accepted_at", "unassigned_at", "unassign_reason_text", "is_unassign_excused", "completed_at";
  // task group id
  google.protobuf.StringValue task_group_id = 1;
  // offer id
  google.protobuf.StringValue offer_id = 2;
  // shift id
  google.protobuf.Int64Value shift_id = 3;
  // created at
  google.protobuf.Timestamp created_at = 4;
  // updated at
  google.protobuf.Timestamp updated_at = 5;
  // dasher id
  google.protobuf.Int64Value dasher_id = 14;
  // metadata
  TaskGroupFulfillmentMetadata metadata = 15;
  // dasher user id
  google.protobuf.Int64Value dasher_user_id = 16;
}

// container proto for task group fulfillment metadata; most fields should live here
message TaskGroupFulfillmentMetadata {
  reserved 7;
  reserved "cancelled_at";
  // accepted at
  google.protobuf.Timestamp accepted_at = 1;
  // unassigned at
  google.protobuf.Timestamp unassigned_at = 2;
  // unassign reason text
  google.protobuf.StringValue unassign_reason_text = 3;
  // is unassign excused
  google.protobuf.BoolValue is_unassign_excused = 4;
  // completed at
  google.protobuf.Timestamp completed_at = 5;
  // task metadata
  repeated TaskMetadata task_metadata = 6;
  // field mask for updated fields
  google.protobuf.FieldMask updated_fields = 8;
  // user id when unassigned
  google.protobuf.Int64Value unassign_user_id = 9;
  // dasher user id
  google.protobuf.Int64Value dasher_user_id = 10;
  // legacy batch id
  google.protobuf.Int64Value batch_id = 11;
  // dasher approaching at consumer time
  google.protobuf.Timestamp dasher_approaching_customer_time = 12;
  // dasher approaching at store time
  google.protobuf.Timestamp dasher_arriving_at_store_time = 13;
  // market id
  google.protobuf.Int64Value market_id = 14;
  // delivery id (optional only for delivery task group)
  google.protobuf.Int64Value delivery_id = 15;
  // delivery uuid (optional only for delivery task group)
  google.protobuf.StringValue delivery_uuid = 16;
  // assignment id (legacy)
  google.protobuf.Int64Value assignment_id = 17;
}

// container proto for task fulfillment metadata;
message TaskMetadata {
  // task identifier
  TaskIdentifier task_identifier = 1;
  // arrived at
  google.protobuf.Timestamp arrived_at = 2;
  // completed at
  google.protobuf.Timestamp completed_at = 3;
}

// [deprecated] offered itinerary container object
message OfferedItinerary {
  // steps in the itinerary
  repeated OfferedItineraryStep steps = 1;
}

// [deprecated] step in the offered itinerary
message OfferedItineraryStep {
  // step id (uuid)
  google.protobuf.StringValue step_id = 1;
  // step type
  google.protobuf.StringValue step_type = 2;
  // associated task group id + task name
  repeated TaskIdentifier associated_task_identifiers = 3;
  // lat/lng for the step
  LocationCoordinates location = 4;
  // completed at
  google.protobuf.Timestamp completed_at = 5;
}

// itinerary composed of a list of steps
message Itinerary {
  // steps in the itinerary
  repeated ItineraryStep itinerary = 1;
}

// step in the itinerary
message ItineraryStep {
  // step id (uuid)
  google.protobuf.StringValue step_id = 1;
  // step type
  google.protobuf.StringValue step_type = 2;
  // associated task group id + task name
  repeated TaskIdentifier associated_task_identifiers = 3;
  // lat/lng for the step
  LocationCoordinates location = 4;
  // completed at
  google.protobuf.Timestamp completed_at = 5;
}

// globally unique identifier for tasks
message TaskIdentifier {
  // task name
  google.protobuf.StringValue task_name = 1;
  // task group id
  google.protobuf.StringValue task_group_id = 2;
  // offer id
  google.protobuf.StringValue offer_id = 3;
  // delivery id (optional only for delivery task group)
  google.protobuf.Int64Value delivery_id = 4;
  // delivery uuid (optional only for delivery task group)
  google.protobuf.StringValue delivery_uuid = 5;
}

// Request for get fulfillment history of a task group
message GetFulfillmentHistoryJsonDataRequest {
  // this endpoint can take one of the ids: taskGroupId, offerId, or shiftId
  oneof identifier {
    // task group id
    google.protobuf.StringValue task_group_id = 1;
    // shift id
    google.protobuf.Int64Value shift_id = 2;
    // offer id
    google.protobuf.StringValue offer_id = 3;
  }
}

// Response for get fulfillment history of a task group
message GetFulfillmentHistoryJsonDataResponse {
  // task group fulfillment history (desc order)
  google.protobuf.StringValue fulfillment_history = 1;
}

// Request for create offer assignment mapping
message CreateOfferAssignmentMappingRequest {
  // offer id
  google.protobuf.StringValue offer_id = 1;
  // delivery package id
  google.protobuf.Int64Value delivery_package_id = 2;
  // assignment id
  google.protobuf.Int64Value assignment_id = 3;
  // is cross batched offer
  google.protobuf.BoolValue is_offer_proposed_as_cross_batched = 4;
}

// Response for create offer assignment mapping
message CreateOfferAssignmentMappingResponse {
  // return offer assignment mapping
  OfferAssignmentMapping offer_assignment_mapping = 1;
}

// Request for get offer assignment mapping
message GetOfferAssignmentMappingRequest {
  // this endpoint can take one of the ids: offerId, deliveryPackageId, or assignmentId
  oneof identifier {
    // offer id
    google.protobuf.StringValue offer_id = 1;
    // delivery package id
    google.protobuf.Int64Value delivery_package_id = 2;
    // assignment id
    google.protobuf.Int64Value assignment_id = 3;
  }
}

// Response for get offer assignment mapping
message GetOfferAssignmentMappingResponse {
  // return offer assignment mapping
  OfferAssignmentMapping offer_assignment_mapping = 1;
}

// Request for get offer assignment mappings
message GetOfferAssignmentMappingsRequest {
  // this endpoint can take one of the ids: offerId, deliveryPackageId, or assignmentId
  oneof identifier {
    // offer ids
    OfferIds offer_ids = 1;
    // delivery package ids
    DeliveryPackageIds delivery_package_ids = 2;
    // assignment ids
    AssignmentIds assignment_ids = 3;
  }
}

// offer assignment mappings data
message GetOfferAssignmentMappingsResponse {
  // offer assignment mappings
  repeated OfferAssignmentMapping offer_assignment_mappings = 1;
}

// Request for sending nudge for unconfirmed offers
message SendUnconfirmedOfferNudgeRequest {
  // state of the offer when timer initiated
  OfferState offer_state = 1;
  // offer id
  google.protobuf.StringValue offer_id = 2;
}

// Response for sending nudge for unconfirmed offers
message SendUnconfirmedOfferNudgeResponse {}

// offer assignment mapping data
message OfferAssignmentMapping {
  // offer id
  google.protobuf.StringValue offer_id = 1;
  // delivery package id
  google.protobuf.Int64Value delivery_package_id = 2;
  // assignment id
  google.protobuf.Int64Value assignment_id = 3;
  // is cross batched offer
  google.protobuf.BoolValue is_offer_proposed_as_cross_batched = 4;
}

// Request for UpdateOffer api
message UpdateOfferRequest {
  // offer
  Offer offer = 1;

  // field mask for updated fields
  google.protobuf.FieldMask updated_fields = 2;
}

// Response for UpdateOffer api
message UpdateOfferResponse {
  // the updated offer (all fields up to date)
  Offer offer = 1;
}

// Request to reverse route for a trip
message ReverseRouteForTripRequest {
  // shift id
  google.protobuf.Int64Value shift_id = 1;
}

// Response containing the updated trip after reversing the route
message ReverseRouteForTripResponse {
  // The updated trip with reversed route
  Trip trip = 1;
}
