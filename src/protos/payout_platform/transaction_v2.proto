syntax = "proto3";

package doordash.payment.payout.v2;

option java_package = "com.doordash.rpc.payment.payout.v2";

option java_multiple_files = true;
option java_generic_services = true;

import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "payout_platform/common.proto";
import "payment/common.proto";
import "payment/payout_v1.proto";

// service that handles anything related to transactions
service TransactionService {
    // update transaction
    rpc UpdateTransaction(UpdateTransactionRequest) returns (UpdateTransactionResponse);
    // create a transaction with an account
    rpc CreateTransactionV2(CreateTransactionV2Request) returns (CreateTransactionV2Response);
}

// transaction V2
message TransactionV2 {

    // Unique id of the payout transaction
    google.protobuf.Int64Value id = 1;

    // total amount of the transaction
    google.protobuf.Int64Value amount = 2;

    // unique id of the associated payment account
    google.protobuf.Int64Value payment_account_id = 3;

    // total paid amount of the transaction
    google.protobuf.Int64Value amount_paid = 4;

    // created_at time of the transaction
    google.protobuf.Timestamp created_at = 5;

    // updated_at time of the transaction
    google.protobuf.Timestamp updated_at = 6;

    // unique transfer id associated with this transaction
    google.protobuf.Int64Value transfer_id = 7;

    // unique id of the who creates this transaction
    google.protobuf.Int64Value created_by_id = 8;

    // optional transaction notes
    google.protobuf.StringValue notes = 9;

    // transaction metadata
    google.protobuf.StringValue metadata = 10;

    // transaction idempotency key
    google.protobuf.StringValue idempotency_key = 11;

    // currency of the transaction
    doordash.payment.common.Currency currency = 12;

    // target id links this transaction
    google.protobuf.Int64Value target_id = 13;

    // target type links this transaction
    TransactionTargetType target_type = 14;

    // transaction state
    google.protobuf.StringValue state = 15;

    // dsj_id for this transaction
    google.protobuf.Int64Value dsj_id = 16;

    // payout id (fastpay) for this transaction
    google.protobuf.Int64Value payout_id = 17;

    // invoice id for this transaction
    google.protobuf.Int64Value invoice_id = 18;

    // settlement id for this transaction
    google.protobuf.StringValue settlement_id = 19;

    // settlement type for this transaction
    TransactionSettlementType settlement_type = 20;

    // inserted timestamp of this transaction
    google.protobuf.Timestamp inserted_at = 21;
}

// transaction target type
enum TransactionTargetType {
    // unspecified
    TRANSACTION_TARGET_TYPE_UNSPECIFIED = 0;
    // Mx delivery
    TRANSACTION_TARGET_TYPE_MERCHANT_DELIVERY = 1;
    // Dx job
    TRANSACTION_TARGET_TYPE_DASHER_JOB = 2;
    // Dx shift
    TRANSACTION_TARGET_TYPE_DASHER_SHIFT = 3;
    // Dx delivery not used
    TRANSACTION_TARGET_TYPE_DASHER_DELIVERY = 4;
    // Mx delivery error
    TRANSACTION_TARGET_TYPE_DELIVERY_ERROR = 5;
    // Mx delivery receipt
    TRANSACTION_TARGET_TYPE_DELIVERY_RECEIPT = 6;
    // Mx store payment
    TRANSACTION_TARGET_TYPE_STORE_PAYMENT = 7;
    // vehicle partner payment
    TRANSACTION_TARGET_TYPE_VEHICLE_PARTNER_PAYMENT = 8;
    // Dx fast pay payout fee
    TRANSACTION_TARGET_TYPE_PAYOUT_FEE = 9;
    // micro deposit
    TRANSACTION_TARGET_TYPE_MICRO_DEPOSIT = 10;
    // ddfw invoicing order
    TRANSACTION_TARGET_TYPE_INVOICING_ORDER = 11;
    // drive promotion
    TRANSACTION_TARGET_TYPE_DRIVE_PROMOTION = 12;
    // drive dasher regulartory fee
    TRANSACTION_TARGET_TYPE_DRIVE_DASHER_REGULATORY_FEE = 13;
    // drive withholding netwuit ach payment
    TRANSACTION_TARGET_TYPE_DRIVE_WITHHOLDING_NETSUITE_ACH_PAYMENT = 14;
    // drive withholding netsuite manual invoice
    TRANSACTION_TARGET_TYPE_DRIVE_WITHHOLDING_NETSUITE_MANUAL_INVOICE = 15;
    // drive withholding netsuite manual credit memo
    TRANSACTION_TARGET_TYPE_DRIVE_WITHHOLDING_NETSUITE_MANUAL_CREDIT_MEMO = 16;
    // drive withholding trt adjustment
    TRANSACTION_TARGET_TYPE_DRIVE_WITHHOLDING_TRT_ADJUSTMENT = 17;
    // Dx cash advance program sign up
    TRANSACTION_TARGET_TYPE_PAYMENT_PROGRAM_SIGNUP = 18;
    // Dx cash advance program sign up
    TRANSACTION_TARGET_TYPE_PAYMENT_PROGRAM_EARNINGS = 19;
    // Drive delivery level refund
    TRANSACTION_TARGET_TYPE_DRIVE_DELIVERY_LEVEL_REFUND = 20;
    // Drive item level refund
    TRANSACTION_TARGET_TYPE_DRIVE_ITEM_LEVEL_REFUND = 21;
    //Drive aggregate deal terms
    TRANSACTION_TARGET_TYPE_DRIVE_AGGREGATE_DEAL_TERM = 22;
    //Drive non-aggregate deal terms
    TRANSACTION_TARGET_TYPE_DRIVE_NON_AGGREGATE_DEAL_TERM = 23;
}

// transaction settlement type
enum TransactionSettlementType {
    // unspecified
    TRANSACTION_SETTLEMENT_TYPE_UNSPECIFIED = 0;
    // payout
    TRANSACTION_SETTLEMENT_TYPE_PAYOUT = 1;
}

// the enum to note why the update operations needed
enum UpdateTransactionNote {
    // unspecified
    UPDATE_TRANSACTION_NOTE_UNSPECIFIED = 0;
    // drive clean up
    UPDATE_TRANSACTION_NOTE_DRIVE_CLEANUP = 1;
}

// request for update transaction by id
message UpdateTransactionRequest {
    // transaction id needs to be updated
    google.protobuf.Int64Value transaction_id = 1;

    // note added for the reason why transaction need to be updated
    UpdateTransactionNote note = 2;

    // target id needs to be overwritten
    google.protobuf.Int64Value target_id = 3;

    // target type needs to be overwritten
    TransactionTargetType target_type = 4;
}

// response after update transaction
message UpdateTransactionResponse {
    // transaction got updated
    Transaction transaction = 1;
}

// message to use when creating a transaction
message CreateTransactionV2Request {
    // payment account id
    google.protobuf.Int64Value payment_account_id = 1;

    // amount of transaction
    google.protobuf.Int64Value amount = 2;

    // the idempotency key used to identify this transaction
    google.protobuf.StringValue idempotency_key = 3;

    // the currency of the transaction
    doordash.payment.common.Currency currency = 4;

    // id of target
    google.protobuf.Int64Value target_id = 5;

    // type of target
    TransactionTargetType target_type = 6;

    // (optional) amount paid of transaction
    google.protobuf.Int64Value amount_paid = 7;

    // (optional) who created it
    google.protobuf.Int64Value created_by_id = 8;

    // (optional) notes
    google.protobuf.StringValue notes = 9;

    // (optional) metadata about transaction
    google.protobuf.StringValue metadata = 10;
}

// response received when creating a transaction
message CreateTransactionV2Response {
    // transaction that was created
    Transaction transaction = 1;
}
