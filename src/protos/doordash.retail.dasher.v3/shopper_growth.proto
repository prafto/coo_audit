syntax = "proto3";
package doordash.retail.dasher.v3;

import "doordash.api/annotations.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "doordash.retail.dasher.v3";

// Shopper Growth Service
service ShopperGrowthService {
  option (doordash.api.service) = {
    name: "retail-fulfillment-service-shopper-growth"
    url: "retail-fulfillment-service-shopping-metrics.service.prod.ddsd"
    port: 50051
    name_spaces: ["shopper-growth"]
    owner: {
      name: "nv-fulfillment-shopper-growth"
      id: "new-verticals-fulfillment-shopper-quality-eng"
      slack_channel: "#nvf-shopper-growth"
      email_alias: "eng-nvf-shopper-lifecycle@doordash.com"
    }
    target_products: [DX]
  };
  /*
   * Get Red Card Upsell
   *
   * API to get red card upsell content
   */
  rpc GetRedCardUpsell(GetRedCardUpsellRequest) returns (GetRedCardUpsellResponse) {
    option (google.api.http) = {get: "/shopper-growth/v1/red-card-upsell"};
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: PROD
      authorization: [DX_USER]
      target_products: [DX]
      slo_config: {
        critical_alerts_enabled: true
        critical_5m_burn_threshold: 3000
        critical_5m_burn_sustain_seconds: 300
        p99_latency: 3
      }
    };
  }
}

// Get Red Card Upsell request
// This will maps to the http path:
// /shopper-growth/v1/red-card-upsell?dasher_id={dasher_id}&source={source}&screen_id={screen_id}
// according to wiki: https://devconsole.doordash.team/codelabs/exposing+an+endpoint+with+unified+gateway?step=15#examples
message GetRedCardUpsellRequest {
  // dasher id
  int64 dasher_id = 1;
  // should check eligibility for notification
  string source = 2;
  // screen id
  string screen_id = 3;
}

// Get Red Card Upsell response
message GetRedCardUpsellResponse {
  // upsell status, active or complete
  google.protobuf.StringValue status = 1;
  // upsell type, e.g. no_red_card
  google.protobuf.StringValue type = 2;
  // inbox upsell content map
  map<string, ViewContent> view_content = 3;
  // card info
  PurchaseCard card = 4;

  // Purchase Card
  message PurchaseCard {
    // When the card was activated
    google.protobuf.StringValue created_at = 1;
    // Card token
    google.protobuf.StringValue token = 2;
    // Card delight number
    google.protobuf.StringValue delight_number = 3;
    // Last 4 digits of the card number
    google.protobuf.StringValue last4 = 4;
    // Card status
    google.protobuf.StringValue status = 5;
    // When the card was terminated
    google.protobuf.StringValue terminated_at = 6; // optional
    // When the card expires
    google.protobuf.StringValue expiration_time = 7; // optional
    // Whether the card is virtual or physical
    google.protobuf.BoolValue is_virtual = 8;
    // Digital Wallet Tokens
    repeated DigitalWalletToken digital_wallet_tokens = 9; // optional

    // Digital Wallet Token
    message DigitalWalletToken {
      // token
      google.protobuf.StringValue token = 1;
      // service_provider_id
      google.protobuf.StringValue service_provider_id = 2;
      // pan_reference_id
      google.protobuf.StringValue pan_reference_id = 3; // optional
      // token_reference_id
      google.protobuf.StringValue token_reference_id = 4; // optional
      // status
      google.protobuf.StringValue status = 5;
    }
  }

  // view content
  message ViewContent {
    // notification title
    google.protobuf.StringValue title = 1;
    // notification subtitle
    google.protobuf.StringValue subtitle = 2;
    // notification image url
    google.protobuf.StringValue image_url = 3;
  }
}
