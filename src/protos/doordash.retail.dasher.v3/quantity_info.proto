syntax = "proto3";
package doordash.retail.dasher.v3;

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "doordash.retail.dasher.v3";

// QuantityInfo with support for loose/fixed weighted item packaging
message QuantityInfoV2 {
  // enumerations of QuantityInfo
  enum QuantityInfoType {
    // unsupported
    QUANTITY_INFO_TYPE_UNSPECIFIED = 0;
    // sold and fulfilled by unit (ea)
    QUANTITY_INFO_TYPE_QUANTITY = 1;
    // sold and fulfilled by weight Ex: $1.00/lbs
    QUANTITY_INFO_TYPE_MEASUREMENT = 2;
    // sold by unit, but fulfilled by weight and loosely packed (e.g.bananas).
    QUANTITY_INFO_TYPE_UNIT_TO_MEASUREMENT_LOOSE_PACKAGING = 3;
    // sold by unit, but fulfilled by weight and come in fixed packaging (e.g. packaged beef)
    QUANTITY_INFO_TYPE_UNIT_TO_MEASUREMENT_FIXED_PACKAGING = 4;
  }

  // type of quantity info
  QuantityInfoType quantity_info_type = 1;
  // quantity info with respect to type
  oneof quantity {
    // QUANTITY_INFO_TYPE_QUANTITY for buying an integer number of items.
    DiscreteQuantity unit_quantity = 2;
    // QUANTITY_INFO_TYPE_MEASUREMENT for buying weighted items.
    ContinuousQuantity measurement_quantity = 3;
    // QUANTITY_INFO_TYPE_UNIT_TO_MEASUREMENT_LOOSE_PACKAGING for buying an integer number of items but paid by weight.
    QuantityGroup unit_to_measurement_quantity = 4;
    // QUANTITY_INFO_TYPE_UNIT_TO_MEASUREMENT_FIXED_PACKAGING for buying multiple prepackaged weighted items.
    MultipleQuantityGroup unit_to_measurement_quantities = 5;
  }
}

// Unit Items
message DiscreteQuantity {
  // Number of items
  int32 quantity = 1;
  // Unit
  DiscreteQuantityUnit unit = 2;
  // Min value allowed
  int32 minimum_quantity = 3;
  // Max value allowed
  int32 maximum_quantity = 4;
}

// Weighted Item
message ContinuousQuantity {
  // Weight value
  double quantity = 1;
  // Weight unit
  ContinuousQuantityUnit unit = 2;
  // Min value allowed
  double minimum_quantity = 3;
  // Max value allowed
  double maximum_quantity = 4;
  // Soft limit for min value allowed
  double minimum_quantity_soft = 5;
  // Soft limit for max value allowed
  double maximum_quantity_soft = 6;
}

// Unit Items ordered but paid by weight
message QuantityGroup {
  // Number of items
  DiscreteQuantity discrete_quantity = 1;
  // Total weight
  ContinuousQuantity continuous_quantity = 2;
}

// Buying multiple prepackaged packages of a weighted item
message MultipleQuantityGroup {
  // List of items bought
  repeated QuantityGroup quantity_group = 1;
  // Min value allowed
  int32 minimum_quantity = 2;
  // Max value allowed
  int32 maximum_quantity = 3;
  // Max total weight allowed. Eg. FE sums the weight of all the packages and compares it to this value
  double maximum_total_weight = 4;
}

// Units for Discrete Quantities
enum DiscreteQuantityUnit {
  // unsupported
  DISCRETE_QUANTITY_UNIT_UNSPECIFIED = 0;
  // Unit Each
  DISCRETE_QUANTITY_UNIT_EA = 1;
  // Unit Quantity
  DISCRETE_QUANTITY_UNIT_QTY = 2;
  // Unit Package
  DISCRETE_QUANTITY_UNIT_PACKAGE = 3;
  // Unit Bag
  DISCRETE_QUANTITY_UNIT_BAG = 4;
  // Unit Bunch
  DISCRETE_QUANTITY_UNIT_BUNCH = 5;
  // Unit Box
  DISCRETE_QUANTITY_UNIT_BOX = 6;
  // Unit Tray
  DISCRETE_QUANTITY_UNIT_TRAY = 7;
  // Unit Bouquet
  DISCRETE_QUANTITY_UNIT_BOUQUET = 8;
  // Unit Pot
  DISCRETE_QUANTITY_UNIT_POT = 9;
}

// Units for Continuous Quantities
enum ContinuousQuantityUnit {
  // unsupported
  CONTINUOUS_QUANTITY_UNIT_UNSPECIFIED = 0;
  // Unit Pounds
  CONTINUOUS_QUANTITY_UNIT_LB = 1;
  // Unit Ounces
  CONTINUOUS_QUANTITY_UNIT_OZ = 2;
  // Unit Kilograms
  CONTINUOUS_QUANTITY_UNIT_KG = 3;
  // Unit Grams
  CONTINUOUS_QUANTITY_UNIT_GRAM = 4;
}
