syntax = "proto3";

package chat.data.input.v1;

import "chat_data/dialogflow.proto";
import "chat_data/survey.proto";
import "chat_data/workflow.proto";
import "google/protobuf/wrappers.proto";

option java_multiple_files = true;
option java_outer_classname = "Input";
option java_package = "com.doordash.rpc.chat.data.input.v1";

// Quick reply.
message QuickReply {
  // List of items.
  repeated QuickReplyItem items = 1;
  // Generic key value pair payload
  map<string, string> payload = 2;
}

// A single quick reply item
message QuickReplyItem {
  // Unique id for the item
  string id = 1;
  // Display value
  string display_value = 2;
  // Payload of the item
  oneof payload {
    // Dialogflow
    chat.data.dialogflow.v1.DialogflowPayload dialogflow = 3;
  }
}

// Contains information about the selected quick reply item.
// Intended to be attached to outgoing user message payload.
message QuickReplySelection {
  // Original message id
  string message_id = 1;
  // Quick reply payload
  oneof payload {
    // Dialogflow payload
    chat.data.dialogflow.v1.DialogflowPayload dialogflow = 3;
  }
}

// Enriched bot message object.
message BotMessageItem {
  // Generic key value pair payload
  map<string, string> payload = 1;
}

// Deep link
message DeepLink {
  // Type of deep link, determines where to navigate
  DeepLinkType type = 2;
  // Initial title to be displayed while deep link is pending
  string title = 3;
  // Initial subtitle to be displayed while deep link is pending
  string subtitle = 4;
  // Current state of the deep link
  DeepLinkState state = 5;
  // Payload to be sent when deep link flow is completed
  DeepLinkPayload completed_payload = 6;
  // Payload to be sent when deep link flow is incomplete
  DeepLinkPayload incomplete_payload = 7;
}

// Type of deep link, determines where to navigate
enum DeepLinkType {
  // Default
  DEEP_LINK_TYPE_UNSPECIFIED = 0;
  // Cx missing/incorrect
  DEEP_LINK_TYPE_CX_MISSING_INCORRECT = 1;
  // Cx poor food quality
  DEEP_LINK_TYPE_CX_POOR_FOOD_QUALITY = 2;
  // Cx never delivered
  DEEP_LINK_TYPE_CX_NEVER_DELIVERED = 3;
  // Cx cancellations
  DEEP_LINK_TYPE_CX_CANCELLATIONS = 4;
  // Cx wrong order delivered
  DEEP_LINK_TYPE_CX_WRONG_ORDER_DELIVERED = 5;
  // Cx dasher issue
  DEEP_LINK_TYPE_CX_DASHER_ISSUE = 6;
  // Cx feedback about the app
  DEEP_LINK_TYPE_CX_APP_FEEDBACK = 7;
  // CoD Cx unavailable entry
  DEEP_LINK_TYPE_DX_CUSTOMER_UNAVAILABLE = 8;
  // Dx safechat active delivery cancellation
  DEEP_LINK_TYPE_DX_ESCAPE_HATCH = 9;
  // Run store closed(DRSC) workflow on the Dx app
  DEEP_LINK_TYPE_DX_REPORT_STORE_CLOSED = 10;
  // Mx Tablet Order Cancellations
  DEEP_LINK_TYPE_MX_TABLET_ORDER_CANCELLATIONS = 11;
  // Mx Tablet IOOS
  DEEP_LINK_TYPE_MX_TABLET_IOOS = 12;
  // Cx safechat active delivery cancellation
  DEEP_LINK_TYPE_CX_ESCAPE_HATCH = 13;
}

// Current state of the deep link
enum DeepLinkState {
  // Default
  DEEP_LINK_STATE_UNSPECIFIED = 0;
  // Deep link is pending
  DEEP_LINK_STATE_PENDING = 1;
  // Deep link flow is completed
  DEEP_LINK_STATE_COMPLETED = 2;
  // Deep link flow is incomplete
  DEEP_LINK_STATE_INCOMPLETE = 3;
}

// Deeplink Action Payload
message DeepLinkActionPayload {
  // Workflow id
  int32 workflow_id = 1;
  // Choice value of manual decision node which has generic data with deepLink payload as output.
  string choice_value = 2;
}

// Deep link payload
message DeepLinkPayload {
  // Text to be sent with the outgoing user message (generally should be hidden)
  string message_text = 1;
  // Title
  string title = 2;
  // Subtitle
  string subtitle = 3;
  // Data for handling completed deep link flow
  oneof data {
    // Dialogflow payload
    chat.data.dialogflow.v1.DialogflowPayload dialogflow = 4;
    // Workflow payload
    DeepLinkActionPayload deep_link_action_payload = 5;
  }
}

// Payload to be sent on deep link flow completion
message DeepLinkCompletionResult {
  // Original message id
  string message_id = 1;
  // Payload data to be processed on deep link completion
  oneof payload {
    // Payload for completed deep link flow
    DeepLinkPayload completed = 2;
    // Payload for incomplete deep link flow
    DeepLinkPayload incomplete = 3;
  }
}

// Contact Card
message ContactCard {
  // Enum for type of contact
  enum ContactType {
    // Default value
    CONTACT_TYPE_UNSPECIFIED = 0;
    // Dasher
    CONTACT_TYPE_DASHER = 1;
    // Consumer
    CONTACT_TYPE_CONSUMER = 2;
    // Merchant
    CONTACT_TYPE_MERCHANT = 3;
  }
  // Contact type
  ContactType contact_type = 1;
}

// Specifies custom user input components for a message
message UserInputComponent {
  // Type of user input component
  oneof type {
    // Post-chat survey component
    chat.data.survey.v1.PostChatSurvey post_chat_survey = 1;
  }
}

// Geographic coordinates
message LatLng {
  // [Deprecated] Latitude in degrees
  google.protobuf.DoubleValue latitude = 1 [deprecated = true];

  // [Deprecated] Longitude in degrees
  google.protobuf.DoubleValue longitude = 2 [deprecated = true];

  // Latitude in degrees
  google.protobuf.DoubleValue lat = 3;

  // Longitude in degrees
  google.protobuf.DoubleValue lng = 4;
}

// Map marker object representing a point of interest on the map
message MapMarker {
  // Geographic position of the marker
  LatLng position = 1;
  // Optional label text for the marker
  string label = 2;
  // Type of marker icon to display (e.g. "home", "store", "dasher")
  string map_marker_type = 3;
}

// Map data containing markers and route polylines
message MapData {
  // List of map markers
  repeated MapMarker markers = 1;
  // List of coordinates forming the polyline route
  repeated LatLng polyline = 2;
}

// Image data containing url and metadata
message ImageData {
  // Display name of the file
  string file_name = 1;
  // Type of the file (e.g. "jpg", "png")
  string file_type = 2;
  // Image source - either URL or raw content
  oneof source {
    // URL of the image
    string url = 3;
    // Raw image content as base64 encoded string
    string content = 4;
  }
}

// A single input type.
message UserInput {
  // One of input type.
  oneof input {
    // Workflow response (used for quick replies)
    chat.data.workflow.v1.ExecuteWorkflowResponse execute_workflow_response = 1;
    // Quick reply (alternate)
    chat.data.input.v1.QuickReply quick_reply = 2;
    // Deep link
    chat.data.input.v1.DeepLink deep_link = 3;
    // Contact card
    chat.data.input.v1.ContactCard contact_card = 4;
  }
}

// Phone call data representing phone call type and status.
// Phone call summary will be set in the message itself.
message PhoneCallData {
  // Represents types of phone call.
  enum Type {
    // Unspecified type
    TYPE_UNSPECIFIED = 0;
    // Outbound call phone call type
    TYPE_OUTBOUND = 1;
  }

  // Represents status of the phone call.
  enum Status {
    // Unspecified status
    STATUS_UNSPECIFIED = 0;
    // Pending status: Represents initiating phone call
    STATUS_PENDING = 1;
    // Successful status: Represents phone call completed successfully
    STATUS_SUCCESSFUL = 2;
    // Error status: Represents either phone call failed or user did not answer
    STATUS_ERROR = 3;
  }

  // Type of the phone call
  Type type = 1;
  // Status of the phone call
  Status status = 2;
}
