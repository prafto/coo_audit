syntax = "proto3";

package media_management.integrations.data.v1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "media_management_service/integrations/data/invite_token.proto";
import "media_management_service/integrations/data/media_integration.proto";

option go_package = "github.com/doordash/services-protobuf/media_management_service/integrations/data";
option java_multiple_files = true;
option java_package = "com.doordash.media_management.integrations.data";

// MediaIntegrationsDataService handles media integrations data operations
service MediaIntegrationsDataService {
  // Creates a new invite token
  rpc CreateInviteToken(CreateInviteTokenRequest) returns (CreateInviteTokenResponse) {}

  // Updates an existing invite token
  rpc UpdateInviteToken(UpdateInviteTokenRequest) returns (UpdateInviteTokenResponse) {}

  // Retrieves an invite token by ID
  rpc GetInviteToken(GetInviteTokenRequest) returns (GetInviteTokenResponse) {}

  // Invalidates an existing invite token
  rpc DeleteInviteToken(DeleteInviteTokenRequest) returns (DeleteInviteTokenResponse) {}

  // Creates a new media integration record
  rpc CreateMediaIntegration(CreateMediaIntegrationRequest) returns (CreateMediaIntegrationResponse) {}

  // Updates an existing media integration record
  rpc UpdateMediaIntegration(UpdateMediaIntegrationRequest) returns (UpdateMediaIntegrationResponse) {}

  // Retrieves a media integration record by UUID
  rpc GetMediaIntegration(GetMediaIntegrationRequest) returns (GetMediaIntegrationResponse) {}

  // Deletes a media integration record by UUID
  rpc DeleteMediaIntegration(DeleteMediaIntegrationRequest) returns (DeleteMediaIntegrationResponse) {}

  // Lists media integration records based on the provided filters
  rpc ListMediaIntegrations(ListMediaIntegrationsRequest) returns (ListMediaIntegrationsResponse) {}
}

// Represents the request to create a new invite token
message CreateInviteTokenRequest {
  // Token to create
  InviteToken invite_token = 1;
}

// Indicates the result of token creation
message CreateInviteTokenResponse {}

// Represents the request to get an invite token
message GetInviteTokenRequest {
  // Token identifier to get
  string token = 1;
}

// Contains the invite token details
message GetInviteTokenResponse {
  // Token that was retrieved
  InviteToken invite_token = 1;
}

// Represents the request to update an invite token
message UpdateInviteTokenRequest {
  // Token with updated information to update
  InviteToken invite_token = 1;
}

// Contains the updated invite token details
message UpdateInviteTokenResponse {
  // Token that was updated
  InviteToken invite_token = 1;
}

// Represents the request to delete an invite token
message DeleteInviteTokenRequest {
  // Token identifier to delete
  string token = 1;
}

// Indicates the result of token deletion
message DeleteInviteTokenResponse {}

// Request to create a new media integration record
message CreateMediaIntegrationRequest {
  // Media integration record to create
  MediaIntegration media_integration = 1;
}

// Response indicating the result of the media integration record creation
message CreateMediaIntegrationResponse {}

// Request to update an existing media integration record
message UpdateMediaIntegrationRequest {
  // Media integration record to update
  MediaIntegration media_integration = 1;
}

// Response containing the updated media integration record
message UpdateMediaIntegrationResponse {
  // Updated media integration record
  MediaIntegration media_integration = 1;
}

// Request to retrieve a media integration record by UUID
message GetMediaIntegrationRequest {
  // UUID of the media integration record to retrieve
  string uuid = 1;
}

// Response containing the retrieved media integration record
message GetMediaIntegrationResponse {
  // Retrieved media integration record
  MediaIntegration media_integration = 1;
}

// Request to delete a media integration record by UUID
message DeleteMediaIntegrationRequest {
  // UUID of the media integration record to delete
  string uuid = 1;
}

// Response indicating the result of the deletion operation
message DeleteMediaIntegrationResponse {}

// Request to list media integration records with optional filters
message ListMediaIntegrationsRequest {
  // The destination type for the integration (e.g., BUSINESS or STORE)
  DestinationType destination_type = 1;
  // Identifier for the destination entity (business or store)
  string destination_id = 2;
  // The source type from which the integration originates (e.g., INSTAGRAM)
  SourceType source_type = 3;
  // Optional: The maximum number of records to return
  google.protobuf.Int32Value limit = 4;
  // Optional: The offset for pagination
  google.protobuf.Int32Value offset = 5;
}

// Response containing a list of media integration records
message ListMediaIntegrationsResponse {
  // List of media integration records matching the request criteria
  repeated MediaIntegration media_integrations = 1;
  // Total count of records matching the filter criteria
  int32 total_count = 2;
}
