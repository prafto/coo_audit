syntax = "proto3";

package datahub_service.v1;

import "common/code.proto";
import "google/protobuf/any.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.datahub.service.v1";

// Request message for retrieving databases
message GetDatabasesRequest {
  // List of types to filter the databases
  repeated string types = 1;
  // Query string for searching databases
  string query = 2;
  // OR-combined filters for advanced search
  repeated ConjunctiveFilter or_filters = 3;
  // Number of results to return
  int32 count = 4;
  // Optional scroll ID for pagination
  string scroll_id = 5;
}

// Request message for retrieving schemas from a database
message GetSchemasRequest {
  // Types of entities to fetch.
  repeated string types = 1;
  // Query string.
  string query = 2;
  // OR-filter clauses.
  repeated ConjunctiveFilter or_filters = 3;
  // Number of results to return.
  int32 count = 4;
  // Optional scroll ID to continue paginated queries.
  string scroll_id = 5;
}

// Request message for retrieving tables from a schema/database
message GetTablesRequest {
  // List of types to filter on (e.g., ["DATASET"]).
  repeated string types = 1;
  // Query term or wildcard.
  string query = 2;
  // Filter conditions to apply.
  repeated ConjunctiveFilter or_filters = 3;
  // Result limit.
  int32 count = 4;
  // Optional scroll ID to resume pagination.
  string scroll_id = 5;
}

// Represents a conjunctive filter (AND conditions)
message ConjunctiveFilter {
  // List of AND conditions within this filter
  repeated HierarchialFilter and = 1;
}

// Represents a single filter condition
message HierarchialFilter {
  // Field to be filtered
  string field = 1;
  // HierarchialCondition to apply on the field
  HierarchialCondition condition = 2;
  // Values to match for the field
  repeated string values = 3;
  // Whether the filter is negated
  bool negated = 4;
}

// Enum for specifying filter conditions
enum HierarchialCondition {
  // Unspecified condition
  HIERARCHIAL_CONDITION_UNSPECIFIED = 0;
  // Field value must be equal to the specified value
  HIERARCHIAL_CONDITION_EQUAL = 1;
  // Field value must not be equal to the specified value
  HIERARCHIAL_CONDITION_NOT_EQUAL = 2;
  // Field value must contain the specified value
  HIERARCHIAL_CONDITION_CONTAINS = 3;
  // Field value must not contain the specified value
  HIERARCHIAL_CONDITION_NOT_CONTAINS = 4;
  // Field value must start with the specified value
  HIERARCHIAL_CONDITION_STARTS_WITH = 5;
  // Field value must end with the specified value
  HIERARCHIAL_CONDITION_ENDS_WITH = 6;
  // Field value must be greater than the specified value
  HIERARCHIAL_CONDITION_GREATER_THAN = 7;
  // Field value must be less than the specified value
  HIERARCHIAL_CONDITION_LESS_THAN = 8;
}

// Represents a column in a table
message Column {
  // Name of the column
  string name = 1;
  // Description of the column
  string description = 2;
  // Data type of the column (e.g., STRING, INT, etc.)
  string datatype = 3;
  // Indicates whether the column allows NULL values
  bool is_null = 4;
}

// Response message for retrieving databases
message GetDatabasesResponse {
  // Scroll ID for fetching the next set of results
  string next_scroll_id = 1;
  // Number of results returned in this response
  int32 count = 2;
  // List of search results
  repeated HierarchialSearchResult search_results = 3;
  // Response code
  code.Code response_code = 4;
  // misc message for error handling
  string error_message = 5;
}

// Response message for retrieving schemas from a database
message GetSchemasResponse {
  // Scroll ID for pagination.
  string next_scroll_id = 1;
  // Number of entities returned.
  int32 count = 2;
  // List of entities matching the search.
  repeated HierarchialSearchResult search_results = 3;
  // Response code
  code.Code response_code = 4;
  // misc message for error handling
  string error_message = 5;
}

// Response message for retrieving tables from a schema/database
message GetTablesResponse {
  // Scroll token for fetching additional tables.
  string next_scroll_id = 1;
  // Count of tables returned.
  int32 count = 2;
  // Matched dataset/table results.
  repeated HierarchialSearchResult search_results = 3;
  // Response code
  code.Code response_code = 4;
  // misc message for error handling
  string error_message = 5;
}

// Represents a single search result
message HierarchialSearchResult {
  // HierarchialEntity that matches the search criteria
  HierarchialEntity entity = 1;
}

// Represents an entity in the search result
message HierarchialEntity {
  // Type of the entity
  string type = 1;
  // Details of the entity (oneof structure)
  HierarchialContainer container = 2;
}

// Represents a container entity
message HierarchialContainer {
  // Unique Resource Name (URN) of the container
  string urn = 1;
  // Properties of the container
  HierarchialContainerProperties properties = 2;
}

// Properties of a container
message HierarchialContainerProperties {
  // Name of the container
  string name = 1;
  // Description of the container
  string description = 2;
}

// Service definition
service DataHubHierarchialService {
  // RPC method to get database containers.
  rpc GetDatabases(GetDatabasesRequest) returns (GetDatabasesResponse);

  // RPC method to get schema containers.
  rpc GetSchemas(GetSchemasRequest) returns (GetSchemasResponse);

  // RPC method to retrieve tables (datasets).
  rpc GetTables(GetTablesRequest) returns (GetTablesResponse);
}
