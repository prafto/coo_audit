syntax = "proto3";

package datahub_service.v1;

import "google/protobuf/any.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.datahub.service.v1";

// Indicate whether the request has been successfully completed
enum ResponseCode {
  // Unspecified
  RESPONSE_CODE_UNSPECIFIED = 0;
  // Request is successful
  RESPONSE_CODE_SUCCESS = 1;
  // Request fails
  RESPONSE_CODE_ERROR = 2;
}

// Enum for defining filter conditions
enum Condition {
  // Equal condition
  CONDITION_UNSPECIFIED = 0;
  // Value is within an array
  CONDITION_IN = 1;
  // String contains substring
  CONDITION_CONTAIN = 2;
  // Unspecified
  CONDITION_EQUAL = 4;
}

// SchemaMetadata holds information about the structure of a dataset including its fields.
message SchemaMetadata {
  // A list of Field messages, each representing metadata about a field within the dataset.
  repeated Field fields = 1;
}

// Field represents metadata for each field in a dataset.
message Field {
  // Indicates whether the field is part of the primary key.
  bool is_part_of_key = 1;
  // The data type of the field, e.g., NUMBER, STRING, etc.
  string type = 2;
  // The path identifying the field within the dataset.
  string field_path = 3;
  // Whether the field can accept null values.
  bool nullable = 4;
  // A description of the field, explaining its purpose or contents.
  string description = 5;
}

// EntityProperties defines the core attributes and custom properties of an entity.
message EntityProperties {
  // The name of the entity, typically used as a display name or identifier.
  string name = 1;
  // A detailed description of the entity, explaining its purpose or characteristics.
  string description = 2;
  // A fully qualified name that uniquely identifies the entity within a namespace or system.
  string qualified_name = 3;
  // A list of custom properties that hold additional metadata or settings related to the entity.
  repeated CustomProperty custom_properties = 4;
  // An optional URL to external resources or further information about the entity.
  string external_url = 5;
}

// Editable properties
message EditableProperties {
  // A detailed description of the entity, explaining its purpose or characteristics.
  string description = 1;
}

// editable schema metadata
message EditableSchemaMetadata {
  // schema fields
  repeated EditableSchemaFieldInfo editable_schema_fields_info = 1;
}

// editable schema metadata
message EditableSchemaFieldInfo {
  // column name
  string field_path = 1;
  // detailed editable description
  string description = 2;
}

// CustomProperty represents a key-value pair used to store arbitrary metadata about an entity.
message CustomProperty {
  // The key of the custom property, which acts as an identifier.
  string key = 1;
  // The value of the custom property, holding the data or setting related to the key.
  string value = 2;
}

// Assertions represents a collection of Assertion messages, providing a summary of validation or testing outcomes.
message Assertions {
  // The total number of assertions included.
  int32 total = 1;
  // A list of individual Assertion messages detailing specific checks or validations.
  repeated Assertion assertions = 2;
}

// Assertion details a single assertion, which is typically a test or validation applied to data or processes.
message Assertion {
  // The type of assertion, categorizing the validation or test.
  string urn = 1;
  // A unique resource identifier (URN) for the assertion.
  string type = 2;
  // Information about the assertion, such as its specific category or classification.
  Info info = 4;
  // The events related to the execution of the assertion, such as runs or tests.
  RunEvents new_run_events = 3;
}

// Info provides additional information or classification details about a related entity.
message Info {
  // A type descriptor or category, providing context about the related entity's purpose or function.
  string type = 1;
}

// RunEvents summarizes the results of multiple runs or execution events for a particular process or test.
message RunEvents {
  // A list of individual RunEvent messages, each representing a specific execution instance.
  repeated RunEvent run_events = 1;
  // The total number of run events recorded.
  int32 total = 2;
  // The count of failed run events.
  int32 failed = 3;
  // The count of successfully completed run events.
  int32 succeeded = 4;
}

// RunEvent details a specific instance of a process or test execution.
message RunEvent {
  // The identifier for this particular run, which can be used to trace or reference the run.
  string run_id = 1;
  // The status of the run, such as "COMPLETE", "FAILED", etc.
  string status = 2;
  // The timestamp in milliseconds since the Unix epoch, indicating when the run was executed.
  int64 timestamp_millis = 3;
  // The result of the run, providing a summary outcome such as success or failure.
  Result result = 4;
}

// Result represents the outcome of a run or test, defining whether it was successful or not.
message Result {
  // The type of result, typically indicating "SUCCESS", "FAILURE", or other outcome categories.
  string type = 1;
}

// Ownership encapsulates details about the ownership of an entity, including the list of owners and modification information.
message Ownership {
  // A list of owners who hold some form of ownership or responsibility for the entity.
  repeated Owner owners = 1;
  // Timestamp information for when the ownership details were last modified.
  LastModified last_modified = 2;
}

// Owner represents an individual or group that holds ownership or responsibility for an entity.
message Owner {
  // Details about the corporate user who is listed as an owner.
  CorpUser owner = 1;
  // The type of ownership held by the owner, such as technical or business ownership.
  OwnershipType ownership_type = 2;
  // The URN associated with the entity that this owner is related to.
  string associated_urn = 3;
}

// CorpUser defines a corporate user within the organization who can be an owner of an entity.
message CorpUser {
  // A unique resource identifier for the corporate user.
  string urn = 1;
  // The type of user, typically defining their role or level within the organization.
  string type = 2;
  // The username or identifier used by the corporate user within corporate systems.
  string username = 3;
}

// OwnershipType provides details about the type of ownership an owner has over an entity.
message OwnershipType {
  // A unique resource identifier for the ownership type.
  string urn = 1;
  // A brief description of the ownership type, such as 'Technical Owner'.
  string type = 2;
  // Additional descriptive information about the ownership type.
  Info info = 3;
}

// LastModified contains timestamp information about when an entity or record was last updated.
message LastModified {
  // The Unix epoch time in milliseconds at which the record or entity was last modified.
  int64 time = 1;
}

// GlobalTags holds a collection of tags associated with an entity. Tags are used to categorize or label entities in a meaningful way.
message GlobalTags {
  // A list of tags associated with the entity. Each tag provides additional metadata or categorization.
  repeated Tag tags = 1;
}

// Tag represents a single tagging instance on an entity, linking detailed tag information to the entity's unique identifier.
message Tag {
  // Detailed information about the tag, including its type and unique identifier.
  TagDetail tag = 1;
  // The unique resource identifier (URN) of the entity to which this tag is associated.
  string associated_urn = 2;
}

// TagDetail contains the core attributes of a tag, defining its identity and type within the system.
message TagDetail {
  // A unique resource identifier (URN) for the tag, used to uniquely identify the tag across the system.
  string urn = 1;
  // The type of the tag, which may categorize the tag into groups such as 'security', 'compliance', or 'data classification'.
  string type = 2;
}

// SubTypes represents a collection of subtype names associated with an entity. Subtypes are used to further categorize entities within their primary type classification.
message SubTypes {
  // A list of subtype names. Each name is a string that categorizes the entity under a more specific classification within its main type.
  repeated string type_names = 1;
}

// Domain encapsulates the domain details of an entity, associating it with a specific domain within the system.
message Domain {
  // Details about the domain, including its identifier, type, and properties.
  DomainDetail domain = 1;
  // The unique resource identifier (URN) of the entity to which this domain is associated.
  string associated_urn = 2;
}

// DomainDetail contains the core attributes of a domain, which help define the conceptual or organizational sphere within which an entity operates.
message DomainDetail {
  // A unique resource identifier (URN) for the domain, used across the system to uniquely identify the domain.
  string urn = 1;
  // The type of the domain, often describing its broad classification or purpose within the system.
  string type = 2;
  // Additional properties of the domain that describe its specifics, such as its name and description.
  DomainProperties properties = 3;
}

// DomainProperties holds the descriptive details of a domain, which are used to provide more context about the domain's role or purpose.
message DomainProperties {
  // The name of the domain, typically used to quickly identify the domain within user interfaces or reports.
  string name = 1;
  // A detailed description of the domain, explaining its significance, scope, and the kind of entities it encompasses.
  string description = 2;
}

// ParentContainers holds information about the containers that an entity belongs to, providing a count and details of each container.
message ParentContainers {
  // The total number of containers that the entity is part of.
  int32 count = 1;
  // A list of Container messages, each detailing a specific container that holds the entity.
  repeated Container containers = 2;
}

// Container represents a single container within the system, encapsulating both its identifier and properties.
message Container {
  // A unique resource identifier (URN) for the container, used across the system to uniquely identify the container.
  string urn = 1;
  // Properties of the container, providing more detailed information such as the container's name.
  ContainerProperties properties = 2;
}

// ContainerProperties defines the descriptive details of a container, used mainly for identification and display purposes.
message ContainerProperties {
  // The name of the container, typically used to identify the container within user interfaces or reports.
  string name = 1;
}

// Health represents the health status of an entity, summarizing its operational state and any issues it might be experiencing.
message Health {
  // The type of health report, categorizing the nature of the health check (e.g., "operational", "performance").
  string type = 1;
  // The current status of the entity's health (e.g., "OK", "FAIL", "WARN").
  string status = 2;
  // A human-readable message providing details about the health status or issues detected.
  string message = 3;
  // A list of reasons or causes for the current health status, each a descriptive string.
  repeated string causes = 4;
}

// StatsSummary provides a summary of usage statistics for an entity over the last 30 days.
message StatsSummary {
  // The number of queries made to the entity in the last 30 days.
  int32 query_count_last_thirty_days = 1;
  // The number of unique users who have interacted with the entity in the last 30 days.
  int32 unique_user_count_last_thirty_days = 2;
}

// Properties specific to the platform.
message PlatformProperties {
  // Type of platform, e.g., RELATIONAL_DB.
  string type = 1;
  // Human-readable name for the platform.
  string display_name = 2;
  // Delimiter used in dataset names.
  string dataset_name_delimiter = 3;
  // URL to the platform's logo image.
  string logo_url = 4;
}

// Platform represents the underlying data platform or system where the entity is hosted or managed.
message Platform {
  // The unique resource identifier (URN) for the platform.
  string urn = 1;
  // The type of platform, typically categorizing the platform by its technology (e.g., "SQL", "NoSQL", "DataLake").
  string type = 2;
  // The name of the platform, usually a human-readable name like "Snowflake", "MySQL", or "Hadoop".
  string name = 3;
  // Additional properties of the platform that are specific to its type and configuration.
  PlatformProperties properties = 4;
}

// Entity represents a data entity within your system, encompassing all relevant metadata and relationships.
message Entity {
  // The unique resource identifier (URN) for the entity.
  string urn = 1;
  // The type of entity, indicating its role or category within the data model (e.g., "Dataset", "Report").
  string type = 2;
  // A flag indicating whether the entity currently exists or if it has been deprecated.
  bool exists = 3;
  // The name of the entity, which is often used in user interfaces and reports.
  string name = 4;
  // The origin of the entity, describing its source environment (e.g., "Production", "Development").
  string origin = 5;
  // A URI that provides a direct link to access or view the entity within the platform.
  string uri = 6;
  // The platform where this entity is managed or stored.
  Platform platform = 7;
  // Schema metadata associated with the entity, detailing its structure and field definitions.
  SchemaMetadata schema_metadata = 8;
  // General properties of the entity, including custom attributes and descriptions.
  EntityProperties properties = 9;
  // Assertions about the entity, typically validations or checks that the entity should pass.
  Assertions assertions = 10;
  // Ownership information, detailing who owns or is responsible for the entity.
  Ownership ownership = 11;
  // Tags that categorize or label the entity for easier classification and searchability.
  GlobalTags global_tags = 12;
  // Subtypes of the entity, providing additional categorization within its main type.
  SubTypes sub_types = 13;
  // The domain to which the entity is associated, often used for logical grouping within large organizations.
  Domain domain = 14;
  // Containers that group this entity with others, providing a hierarchical organizational structure.
  ParentContainers parent_containers = 15;
  // Health checks or status reports that provide insights into the operational state of the entity.
  repeated Health health = 16;
  // Summary statistics about the entity, offering metrics that reflect its usage or performance.
  StatsSummary stats_summary = 17;
  // auto render aspects
  repeated Aspect auto_render_aspects = 18;
  // editable properties
  EditableProperties editable_properties = 19;
  // editable schema metadata
  EditableSchemaMetadata editable_schema_metadata = 20;
  // usage stats
  UsageStats usage_stats = 21;
}

// Entity represents a data entity within your system, encompassing all relevant metadata and relationships.
message EntityLite {
  // The unique resource identifier (URN) for the entity.
  string urn = 1;
  // The type of entity, indicating its role or category within the data model (e.g., "Dataset", "Report").
  string type = 2;
  // The name of the entity, which is often used in user interfaces and reports.
  string name = 3;
  // The platform where this entity is managed or stored.
  Platform platform = 4;
  // Subtypes of the entity, providing additional categorization within its main type.
  SubTypes sub_types = 5;
  // usage stats
  UsageStats usage_stats = 6;
  // Ownership information, detailing who owns or is responsible for the entity.
  Ownership ownership = 7;
  // Tags that categorize or label the entity for easier classification and searchability.
  GlobalTags global_tags = 8;
  // Schema metadata associated with the entity, detailing its structure and field definitions.
  SchemaMetadata schema_metadata = 9;
  // auto render aspects
  repeated Aspect auto_render_aspects = 10;
}

// usage stats of a specific dataset
message UsageStats {
  // aggregations object
  Aggregations aggregations = 1;
}

// aggregations object
message Aggregations {
  // unique user count
  int32 unique_user_count = 1;
  // Can be null, hence using an optional type
  int64 total_sql_queries = 2;
}

// Dataset represents a complete dataset entity as described in your data.
message SearchResult {
  // entity
  Entity entity = 1;
}

// Dataset represents a complete dataset entity as described in your data.
message ScrollSearchResult {
  // shortened entity
  EntityLite entity = 1;
}

// GlobalTag represents tags applied globally to a dataset.
message GlobalTag {
  // Unique identifier for the tag.
  string tag_urn = 1;
  // URN of the entity to which the tag is associated.
  string associated_urn = 2;
}

// SearchResults encapsulates search results for dataset entities.
message SearchAcrossEntities {
  // Starting index of the results.
  int32 start = 1;
  // Count of entities returned.
  int32 count = 2;
  // Total number of entities that match the search.
  int32 total = 3;
  // List of datasets matching the search.
  repeated SearchResult search_results = 4;
}

// Represents the entire 'data' structure in the JSON.
message DataResponse {
  // Represents the search results as detailed in your JSON.
  SearchAcrossEntities search_across_entities = 1;
}

// Represents the entire 'data' structure in the JSON.
message FinalScrollAcrossEntities {
  // Represents the search results as detailed in your JSON.
  ScrollAcrossEntities scroll_across_entities = 1;
}

// Represents a query request for searching datasets.
message QueryRequest {
  // The search query, e.g., 'edw.finance.dimension_deliveries'.
  string query = 1;
  // Starting index for the search results.
  int32 start = 2;
  // Number of results to return.
  int32 count = 3;
  // Optional: Types of entities to search for.
  repeated string types = 4;
  // Optional: Filter to apply in the search
  repeated Filter filters = 7;
  // repeated and filters
  repeated AndFilter all_or_filters = 8;

  reserved 6;
  reserved 5;
  reserved "or_filter";
  reserved "or_filters";
}

// Represents the entire input including the QueryRequest.
message SearchInputRequest {
  // Nested QueryRequest as 'input'.
  QueryRequest input = 1;
}

// get dataset by name request
message GetDatasetByNameRequest {
  // data platform name
  string data_platform = 1;
  // dataset name
  string dataset_name = 2;
  // envrionment
  string environment = 3;
}

// get dataset by name response
message GetDatasetByNameResponse {
  // metadata about the dataset
  DatasetMetadata data = 1;
  // Response code
  ResponseCode response_code = 2;
  // misc message for error handling
  google.protobuf.StringValue error_message = 3;
}

// get datasets by platform request
message GetDatasetsByPlatformRequest {
  // Nested QueryRequest as 'input'.
  QueryRequest input = 1;
}

// get datasets by platform response
message GetDatasetsByPlatformResponse {
  // get the encapsulated data object
  DataResponse data = 1;
  // Response code
  ResponseCode response_code = 2;
  // misc message for error handling
  google.protobuf.StringValue error_message = 3;
}

// Represents an individual filter condition.
message Filter {
  // The field on which the filter is applied.
  string field = 1;
  // The condition to be applied (e.g., EQUAL, GREATER_THAN).
  string condition = 2;
  // The values to be used for the filter condition.
  repeated string values = 3;
  // Indicates if the filter is negated.
  bool negated = 4;
}

// and filter
message AndFilter {
  // repeated filters
  repeated Filter and = 1;
}

// dataset metadata
message DatasetMetadata {
  // Entity object metadata
  Entity dataset = 1;

  reserved 2;
  reserved "auto_render_aspects";
}

// Defines an individual aspect with its name, payload, and rendering specification.
message Aspect {
  // aspect name
  string aspect_name = 1;
  // payload
  string payload = 2;
  // render spec
  RenderSpec render_spec = 3;
}

// Rendering specifications for an aspect.
message RenderSpec {
  // display type
  string display_type = 1;
  // display name
  string display_name = 2;
  // key
  string key = 3;
}

// Input for the GraphQL query
message GetScrollAcrossEntitiesRequest {
  // Nested QueryRequest as 'input'.
  ScrollQueryRequest input = 1;
}

// query request blob
message ScrollQueryRequest {
  // Entity types to search
  repeated string types = 1;
  // General query string
  string query = 2;
  // Number of results to return
  int32 count = 3;
  // Scroll identifier for pagination
  string scroll_id = 4;
  // OR filters for refining the search
  repeated AndFilter or_filters = 5;
}

// Main response wrapper corresponding to the GraphQL response structure
message GetScrollAcrossEntitiesResponse {
  // Response specific to the query
  FinalScrollAcrossEntities scroll_across_entities = 1;
  // Response code
  ResponseCode response_code = 2;
  // misc message for error handling
  google.protobuf.StringValue error_message = 3;
}

// rolled response under data
message SearchInputResponse {
  // get the encapsulated data object
  DataResponse data = 1;
  // Response code
  ResponseCode response_code = 2;
  // misc message for error handling
  google.protobuf.StringValue error_message = 3;
}

// Response from the ScrollAcrossEntities query
message ScrollAcrossEntities {
  // Scroll ID for the next batch of data
  string next_scroll_id = 1;
  // Number of results returned
  int32 count = 2;
  // Array of search results
  repeated ScrollSearchResult scroll_search_results = 3;
}

// search service for datahub
service DataHubSearchService {
  // datahub search rpc call
  rpc SearchInput(SearchInputRequest) returns (SearchInputResponse);
  // datahub by name api
  rpc GetDatasetByName(GetDatasetByNameRequest) returns (GetDatasetByNameResponse);
  // rpc get datasets from platform
  rpc GetDatasetsByPlatform(GetDatasetsByPlatformRequest) returns (GetDatasetsByPlatformResponse);
  // scroll api
  rpc GetScrollAcrossEntities(GetScrollAcrossEntitiesRequest) returns (GetScrollAcrossEntitiesResponse);
}
