syntax = "proto3";

package datahub_service.v1;

import "google/protobuf/any.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.datahub.service.v1";

// Indicate whether the request has been successfully completed
enum LineageResponseCode {
  // Unspecified
  LINEAGE_RESPONSE_CODE_UNSPECIFIED = 0;
  // Request is successful
  LINEAGE_RESPONSE_CODE_SUCCESS = 1;
  // Request fails
  LINEAGE_RESPONSE_CODE_ERROR = 2;
}

// lineage request
message GetLineageForEntityRequest {
  // lineage input
  LineageInput input = 1;
}

// lineage input
message LineageInput {
  // Unique Resource Name of the entity.
  string urn = 1;
  // Direction of lineage query, e.g., UPSTREAM or DOWNSTREAM.
  Direction direction = 2;
  // Types of entities to include in the search.
  repeated string types = 3;
  // Search query text, if any.
  string query = 4;
  // Starting index for pagination.
  int32 start = 5;
  // Number of results to return.
  int32 count = 6;
  // OR-combined filters.
  repeated LineageOrFilter or_filters = 7;
}

// Enumeration for the direction of lineage traversal.
enum Direction {
  // unspecified direction
  DIRECTION_UNSPECIFIED = 0;
  // Tracing lineage upstream.
  DIRECTION_UPSTREAM = 1;
  // Tracing lineage downstream.
  DIRECTION_DOWNSTREAM = 2;
}

// Represents an OR filter, containing multiple AND filters.
message LineageOrFilter {
  // List of AND conditions within this OR filter.
  repeated LineageAndFilter and = 1;
}

// Represents an AND filter condition, specifying a field and values it must contain.
message LineageAndFilter {
  // The field to filter by.
  string field = 1;
  // Condition to apply (e.g., EQUAL, NOT_EQUAL).
  LineageCondition condition = 2;
  // Values for the field to match.
  repeated string values = 3;
  // Indicates if the condition should be negated.
  bool negated = 4;
}

// Enumeration for conditions in filters.
enum LineageCondition {
  // default condition
  LINEAGE_CONDITION_UNSPECIFIED = 0;
  // Equal condition.
  LINEAGE_CONDITION_EQUAL = 1;
  // Not equal condition.
  LINEAGE_CONDITION_CONTAIN = 2;
  // Greater than condition.
  LINEAGE_CONDITION_IN = 3;
}

// lineage response
message GetLineageForEntityResponse {
  // lineage results
  ListLineageStream data = 1;
  // Response code
  LineageResponseCode response_code = 2;
  // misc message for error handling
  google.protobuf.StringValue error_message = 3;
}

// Top-level structure wrapping the entire response
message ListLineageStream {
  // Contains the list of domains with pagination details
  LineageSearchResultsList list_search_results = 1;
}

// Handles pagination and list of domains
message LineageSearchResultsList {
  // Index of the first domain in this page
  int32 start = 1;
  // Number of domains returned in this page
  int32 count = 2;
  // Total number of domains available across all pages
  int32 total = 3;
  // Array of Domain objects
  repeated LineageSearchResult search_results = 4;
}

// Represents a single search result, including the entity, matched fields, and paths.
message LineageSearchResult {
  // The main entity involved in the search result.
  LineageEntity entity = 1;
  // Fields that matched the search criteria.
  repeated LineageMatchedField matched_fields = 2;
  // Insights derived from the search.
  repeated string insights = 3;
  // Paths that relate entities in the lineage.
  repeated LineagePath paths = 4;
  // Degree of connection within the path.
  int32 degree = 5;
}

// Represents an entity in the search results.
message LineageEntity {
  // Unique Resource Name of the entity.
  string urn = 1;
  // Type of the entity, e.g., MLMODEL, MLFEATURE.
  string type = 2;
}

// Represents a field that matched the search query.
message LineageMatchedField {
  // Name of the matched field.
  string name = 1;
  // Value of the matched field.
  string value = 2;
}

// Represents a path in the lineage of entities.
message LineagePath {
  // Sequence of entities forming a path in the lineage.
  repeated LineageEntity path = 1;
}

// lineage service for datahub
service DataHubLineageService {
  // get lineage based on the dataset urn
  rpc GetLineageForEntity(GetLineageForEntityRequest) returns (GetLineageForEntityResponse);
}
