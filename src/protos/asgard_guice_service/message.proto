syntax = "proto3";

package asgard_guice_service.v1;

import "buf/validate/validate.proto";
import "common/service_client_config.proto";
import "google/protobuf/wrappers.proto";

option go_package = "github.com/doordash/services-protobuf/generated/asgard_guice_service/api/v1";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.asgardguice";

// This is an example service for using Asgard server library in a Guice environment.
service AsgardGuiceService {
  // Example Hermes client config. The options not listed here use Hermes default.
  // The following applies for all RPCs in the service, if not overridden on individual RPCs.

  // Timeout after 700 milliseconds.
  option (service_client.client_config).response_attempt_timeout_millis = 700;
  // Make a total 4 attempts (initial + three retries).
  option (service_client.client_config).retry_config.max_attempts = 4;
  // Add RESOURCE_EXHAUSTED to the set of retriable codes.
  option (service_client.client_config).retry_config.do_retry_grpc_code = 8;
  // Break the circuit if the error rate exceeds 80%.
  option (service_client.client_config).circuit_breaker_config.failure_rate_threshold = 0.8;
  // Ignore NOT_FOUND from circuit breaker error rate calculation.
  option (service_client.client_config).circuit_breaker_config.do_ignore_grpc_code = 5;

  // Returns "Hello $name".
  rpc Hello(HelloRequest) returns (HelloResponse) {
    // This is an exceptionally slow RPC, so we will set its timeout to 2 seconds.
    option (service_client.client_method_config).response_attempt_timeout_millis = 2000;
  }

  // Returns "Bye $name".
  rpc Bye(ByeRequest) returns (ByeResponse);

  // Return stream message
  rpc GetMessageStream(GetMessageStreamRequest) returns (stream GetMessageStreamResponse);

  //Returns dbmesh query response
  rpc ExecDbmeshQuery(ExecDbmeshQueryRequest) returns (ExecDbmeshQueryResponse);

  // Bi-direction stream
  rpc BidirectionStream(stream GetMessageStreamRequest) returns (stream GetMessageStreamResponse);
}

//Request for dbmesh query
message ExecDbmeshQueryRequest {
  //Name of the test Id to be tested
  string test_id = 1;
}

//Response for dbmesh query
message ExecDbmeshQueryResponse {
  //Success and failure of each test
  repeated ExecDbmeshQueryTestResponse test_response = 1;
}

//Response for each dbmesh query test
message ExecDbmeshQueryTestResponse {
  //Name of the test Id that is tested
  string test_id = 1;

  //Success and failure of the test
  google.protobuf.BoolValue is_success = 2;
}

// Request for Hello
message HelloRequest {
  // Name of person being greeted.
  string name = 1 [(buf.validate.field).string.min_len = 1];
}

// Response for Hello
message HelloResponse {
  // Greeting message.
  string messages = 1;
}

// Request for Bye
message ByeRequest {
  // Name of person being farewelled.
  string name = 1;
}

// Response for Bye
message ByeResponse {
  // Farewell message.
  string messages = 1;
}

// Request for GetMessageStream
message GetMessageStreamRequest {
  // Request message
  string message = 1;
}

// Response for GetMessageStream
message GetMessageStreamResponse {
  // Stream message
  string message = 1;
}
