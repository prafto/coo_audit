syntax = "proto3";

// buf:lint:ignore DIRECTORY_SAME_PACKAGE
package supply_automation.v1;

option go_package = "github.com/doordash/services-protobuf/generated/supply_automation/api/v1";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.supply_automation.v1";

// Kafka message for python service
message SupplyPlanningEvent {
  // The event
  oneof event {
    // Scenario simulation
    ScenarioSimulationEvent scenario_simulation_event = 1;
    // Mobilizer run
    MobilizerRunEvent mobilizer_run_event = 2;
    // Create scenario inputs
    CreateScenarioInputEvent create_input_event = 3;
    // Validate scenario adjustments
    ValidateScenarioAdjustmentsEvent validate_scenario_adjustments_event = 4;
    // Execute DAC Optimizer inputs
    ExecuteOptimizerEvent execute_optimizer_event = 5;
  }
}

// Kafka Event for Scenario Simulation
message ScenarioSimulationEvent {
  // scenario id
  int64 scenario_id = 1;

  // scenario name
  string scenario_name = 2;

  // s3 location of the scenario adjustments CSV
  string s3_scenario_adjustments_url = 4;

  // s3 location of the config adjustments CSV
  string s3_config_adjustments_url = 5;

  reserved 3;
  reserved 's3_file_url';
}

// Kafka event for mobilizer run
message MobilizerRunEvent {
  // some unique run ID
  string run_id = 1;
}

// Kafka message for python service to create scenario inputs
message CreateScenarioInputEvent {
  // active week for the scenario
  string active_week = 1;

  // is volume forecast locked
  bool is_volume_forecast_locked = 2;

  // number of historical weeks
  int32 num_historical_weeks = 3;

  // uh threshold
  double uh_threshold = 4;

  // oh threshold
  double oh_threshold = 5;

  // extreme low uh threshold
  double extreme_low_uh_threshold = 6;

  // total required unoptimized budget
  int32 total_required_unoptimized_budget = 7;

  // required unoptimized spending trt ppt
  double required_unoptimized_spending_trt_ppt = 8;

  // required unoptimized spending ctrl ppt
  double required_unoptimized_spending_ctrl_ppt = 9;

  // scenario id
  int64 scenario_id = 10;
}

// Kafka message for python service to validate scenario adjustments CSV
message ValidateScenarioAdjustmentsEvent {
  // scenario id
  int64 scenario_id = 1;

  // s3 location of the scenario adjustments CSV
  string s3_scenario_adjustments_url = 2;
}

// Kafka message for python service to execute DAC optimizer
message ExecuteOptimizerEvent {
  // scenario id
  int64 scenario_id = 1;

  // s3 location of the scenario inputs CSV
  string s3_scenario_inputs_url = 2;

  // s3 location of the scenario adjustments CSV
  string s3_scenario_adjustments_url = 3;

  // s3 location of the config adjustments CSV
  string s3_config_adjustments_url = 4;

  // scenario name
  string scenario_name = 5;
}
