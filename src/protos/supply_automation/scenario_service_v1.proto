syntax = "proto3";

// buf:lint:ignore DIRECTORY_SAME_PACKAGE
package supply_automation.v1;

import "doordash.api/annotations.proto";
import "doordash.api/client.proto";
import "doordash.api/field_validate.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option go_package = "github.com/doordash/services-protobuf/generated/supply_automation/api/v1";
option java_generic_services = true;
option java_multiple_files = true;
option java_outer_classname = "ScenarioServiceProto";
option java_package = "com.doordash.supply_automation.v1";

// ScenarioService is responsible for creating/managing/simulating/locking scenarios
service ScenarioService {
  option (doordash.api.service) = {
    name: "supply-automation"
    url: "supply-automation-api.service.prod.ddsd"
    port: 50051
    name_spaces: ["supply-automation"]
    owner: {
      id: "supply-automation"
      name: "supply-automation"
      slack_channel: "#dx-supply-automation-ui"
      email_alias: "supply-automation-eng@doordash.com"
    }
    target_products: [INTERNAL] /* Full list https://github.com/doordash/services-protobuf/blob/master/protos/doordash.api/common.proto */
  };

  //Create new supply scenario by uploading a CSV
  rpc CreateSupplyScenario(CreateSupplyScenarioRequest) returns (CreateSupplyScenarioResponse) {
    option (google.api.http) = {
      post: "/supply-automation/v1/createSupplyScenario"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      authentication_config: {enable_okta_verification: true}
    };
  }

  // Create a blank scenario entry
  rpc CreateScenarioEntry(CreateScenarioEntryRequest) returns (CreateScenarioEntryResponse) {
    option (google.api.http) = {
      post: "/supply-automation/v1/createScenarioEntry"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      authentication_config: {enable_okta_verification: true}
    };
  }

  // Create scenario input
  rpc CreateScenarioInput(CreateScenarioInputRequest) returns (CreateScenarioInputResponse) {
    option (google.api.http) = {
      post: "/supply-automation/v1/createScenarioInput"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      authentication_config: {enable_okta_verification: true}
    };
  }

  // Create scenario adjustments by uploading a CSV
  rpc CreateScenarioAdjustments(CreateScenarioAdjustmentsRequest) returns (CreateScenarioAdjustmentsResponse) {
    option (google.api.http) = {
      post: "/supply-automation/v1/createScenarioAdjustments"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      authentication_config: {enable_okta_verification: true}
    };
  }

  //  Execute DAC Optimizer
  rpc ExecuteOptimizerOutput(ExecuteOptimizerOutputRequest) returns (ExecuteOptimizerOutputResponse) {
    option (google.api.http) = {
      post: "/supply-automation/v1/executeOptimizerOutput"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      authentication_config: {enable_okta_verification: true}
    };
  }

  //read all the previously simulated supply scenario's
  rpc GetSupplyScenarios(GetSupplyScenariosRequest) returns (GetSupplyScenariosResponse) {
    option (google.api.http) = {get: "/supply-automation/v1/getSupplyScenarios"};
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      authentication_config: {enable_okta_verification: true}
    };
  }

  // read all the metrics associated with a scenario
  rpc GetSupplyMetricsByScenarioId(GetSupplyMetricsByScenarioIdRequest) returns (GetSupplyMetricsByScenarioIdResponse) {
    option (google.api.http) = {get: "/supply-automation/v1/getSupplyMetricsByScenarioId"};
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      authentication_config: {enable_okta_verification: true}
    };
  }

  // request to lock a simulated scenario
  rpc LockSupplyScenario(LockSupplyScenarioRequest) returns (LockSupplyScenarioResponse) {
    option (google.api.http) = {
      post: "/supply-automation/v1/lockSupplyScenario"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      authentication_config: {enable_okta_verification: true}
    };
  }

  // API to update the status of the scenario input
  rpc UpdateScenarioInputStatus(UpdateScenarioInputStatusRequest) returns (UpdateScenarioInputStatusResponse);

  // API to update the status of the scenario simulation
  rpc UpdateScenarioSimulationStatus(UpdateScenarioSimulationStatusRequest) returns (UpdateScenarioSimulationStatusResponse);

  // API to upsert metrics
  rpc UpsertSupplyMetrics(UpsertSupplyMetricsRequest) returns (UpsertSupplyMetricsResponse);

  // API to copy metrics for locking
  rpc SnapshotMetricsByScenarioId(SnapshotMetricsByScenarioIdRequest) returns (SnapshotMetricsByScenarioIdResponse);

  //read supply scenarios by filter
  rpc GetSupplyScenariosByFilter(GetSupplyScenariosByFilterRequest) returns (GetSupplyScenariosByFilterResponse) {
    option (google.api.http) = {get: "/supply-automation/v1/getSupplyScenariosByFilter"};
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      authentication_config: {enable_okta_verification: true}
    };
  }

  // API to update status fields of existing scenario
  rpc UpdateSupplyScenario(UpdateSupplyScenarioRequest) returns (UpdateSupplyScenarioResponse);

  //read all audit logs by filter
  rpc GetAuditLogsByFilter(GetAuditLogsByFilterRequest) returns (GetAuditLogsByFilterResponse) {
    option (google.api.http) = {get: "/supply-automation/v1/getAuditLogsByFilter"};
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      authentication_config: {enable_okta_verification: true}
    };
  }

  // Fetch contents of a CSV file
  rpc FetchCSVContents(FetchCSVContentsRequest) returns (FetchCSVContentsResponse) {
    option (google.api.http) = {get: "/supply-automation/v1/fetchCSVContents"};
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      authentication_config: {enable_okta_verification: true}
    };
  }

  // Create a single scenario adjustments entry
  rpc CreateScenarioAdjustmentsEntry(CreateScenarioAdjustmentsEntryRequest) returns (CreateScenarioAdjustmentsEntryResponse) {
    option (google.api.http) = {
      post: "/supply-automation/v1/createScenarioAdjustmentsEntry"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      authentication_config: {enable_okta_verification: true}
    };
  }

  // Get a list of scenario adjustments entries
  rpc GetScenarioAdjustmentEntries(GetScenarioAdjustmentEntriesRequest) returns (GetScenarioAdjustmentEntriesResponse) {
    option (google.api.http) = {get: "/supply-automation/v1/getScenarioAdjustmentEntries"};
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      authentication_config: {enable_okta_verification: true}
    };
  }

  // Update a single scenario adjustments entry
  rpc UpdateScenarioAdjustmentsEntry(UpdateScenarioAdjustmentsEntryRequest) returns (UpdateScenarioAdjustmentsEntryResponse) {
    option (google.api.http) = {
      post: "/supply-automation/v1/updateScenarioAdjustmentsEntry"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      authentication_config: {enable_okta_verification: true}
    };
  }

  // Delete a single scenario adjustments entry
  rpc DeleteScenarioAdjustmentsEntry(DeleteScenarioAdjustmentsEntryRequest) returns (DeleteScenarioAdjustmentsEntryResponse) {
    option (google.api.http) = {
      post: "/supply-automation/v1/deleteScenarioAdjustmentsEntry"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      authentication_config: {enable_okta_verification: true}
    };
  }

  // Create a new scenario job
  rpc CreateScenarioJob(CreateScenarioJobRequest) returns (CreateScenarioJobResponse) {
    option (google.api.http) = {
      post: "/supply-automation/v1/createScenarioJob"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      authentication_config: {enable_okta_verification: true}
    };
  }

  // Get a list of scenario jobs
  rpc GetScenarioJobs(GetScenarioJobsRequest) returns (GetScenarioJobsResponse) {
    option (google.api.http) = {get: "/supply-automation/v1/getScenarioJobs"};
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      authentication_config: {enable_okta_verification: true}
    };
  }

  // Update a scenario job
  rpc UpdateScenarioJob(UpdateScenarioJobRequest) returns (UpdateScenarioJobResponse) {
    option (google.api.http) = {
      post: "/supply-automation/v1/updateScenarioJob"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      authentication_config: {enable_okta_verification: true}
    };
  }

  // Delete a scenario job
  rpc DeleteScenarioJob(DeleteScenarioJobRequest) returns (DeleteScenarioJobResponse) {
    option (google.api.http) = {
      post: "/supply-automation/v1/deleteScenarioJob"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      authentication_config: {enable_okta_verification: true}
    };
  }
}

// Int32Value
message Int32Value {
  // int32 value
  int32 value = 1;
}

// DoubleValue
message DoubleValue {
  // double value
  double value = 1;
}

// StringValue
message StringValue {
  // string value
  string value = 1;
}

// request payload to create a new scenario
message CreateSupplyScenarioRequest {
  // scenario name
  string scenario_name = 1 [(doordash.api.validate.rules).missing_value = {action: FAIL}];

  // uploader email
  string uploader_email = 2 [(doordash.api.validate.rules).missing_value = {action: FAIL}];

  // scenario upload data in csv format
  google.protobuf.BytesValue csv_contents = 3 [(doordash.api.validate.rules).missing_value = {action: FAIL}];

  // config adjustment data in csv format
  google.protobuf.BytesValue config_csv_contents = 6 [(doordash.api.validate.rules).missing_value = {action: FAIL}];

  // file_name for scenario CSV
  string file_name = 4 [(doordash.api.validate.rules).missing_value = {action: FAIL}];

  // file name for config adjustments
  string config_file_name = 7 [(doordash.api.validate.rules).missing_value = {action: FAIL}];

  // comments
  string comments = 5;
}

// response payload of scenario upload
message CreateSupplyScenarioResponse {
  // scenario id
  string scenario_id_string = 5;

  // scenario name
  string scenario_name = 2;

  reserved 1, 3, 4;
  reserved 'scenario_uuid', 'scenario_id', 'scenario_id_int';
}

// request payload to create a new scenario entry
message CreateScenarioEntryRequest {
  // scenario name
  string scenario_name = 1 [(doordash.api.validate.rules).missing_value = {action: FAIL}];

  // uploader email
  string uploader_email = 2 [(doordash.api.validate.rules).missing_value = {action: FAIL}];
}

// response payload of scenario entry creation
message CreateScenarioEntryResponse {
  // scenario id
  string scenario_id_string = 5;

  // scenario name
  string scenario_name = 2;

  reserved 1, 3, 4;
  reserved 'scenario_uuid', 'scenario_id', 'scenario_id_int';
}

// request payload to create a new scenario input
message CreateScenarioInputRequest {
  // scenario id
  string scenario_id_string = 1 [(doordash.api.validate.rules).missing_value = {action: FAIL}];

  // active week for the scenario
  string active_week = 2;

  // is volume forecast locked
  bool is_volume_forecast_locked = 3;

  // number of historical weeks
  int32 num_historical_weeks = 4;

  // uh threshold
  double uh_threshold = 5;

  // oh threshold
  double oh_threshold = 6;

  // extreme low uh threshold
  double extreme_low_uh_threshold = 7;

  // total required unoptimized budget
  int32 total_required_unoptimized_budget = 8;

  // required unoptimized spending trt ppt
  double required_unoptimized_spending_trt_ppt = 9;

  // required unoptimized spending ctrl ppt
  double required_unoptimized_spending_ctrl_ppt = 10;
}

// response payload of scenario input upload
message CreateScenarioInputResponse {
  // scenario id
  string scenario_id_string = 11;

  // active week for the scenario
  string active_week = 12;

  // S3 URL for scenarios input pickle file
  string scenario_inputs_url = 13;

  // Status of the Scenario Input
  ScenarioInputStatus status = 14;
}

// request payload to create a new scenario adjustments
message CreateScenarioAdjustmentsRequest {
  // scenario id
  string scenario_id_string = 1 [(doordash.api.validate.rules).missing_value = {action: FAIL}];

  // config adjustment data in csv format
  google.protobuf.BytesValue config_csv_contents = 2 [(doordash.api.validate.rules).missing_value = {action: FAIL}];

  // file name for config adjustments
  string config_file_name = 3 [(doordash.api.validate.rules).missing_value = {action: FAIL}];

  // scenario upload data in csv format
  google.protobuf.BytesValue csv_contents = 4 [(doordash.api.validate.rules).missing_value = {action: FAIL}];

  // file_name for scenario CSV
  string file_name = 5 [(doordash.api.validate.rules).missing_value = {action: FAIL}];
}

// response payload of scenario adjustments upload
message CreateScenarioAdjustmentsResponse {
  // scenario id
  string scenario_id_string = 4;

  // s3 location of the scenario adjustments CSV
  string scenario_adjustments_url = 5;

  // s3 location of the config adjustments CSV
  string config_adjustments_url = 6;
}

// pagination for heavy request
message TokenBasedPagination {
  // page size
  int32 page_size = 1;

  // page token, if not set, it will be considered as first page
  string page_token = 2;
}

// response for pagination
message TokenBasedPaginationResponse {
  // has next page or not
  bool next_page = 1;

  // Pagination info
  TokenBasedPagination page_info = 2;
}

// Sort order
enum SortOrder {
  // unspecified sort order
  SORT_ORDER_UNSPECIFIED = 0;

  // ascending
  SORT_ORDER_ASC = 1;

  // descending
  SORT_ORDER_DESC = 2;
}

// Request payload to execute optimizer output
message ExecuteOptimizerOutputRequest {
  // scenario id
  string scenario_id_string = 1 [(doordash.api.validate.rules).missing_value = {action: FAIL}];
}

// Request payload to execute optimizer output
message ExecuteOptimizerOutputResponse {
  // Status of the Simulation
  SimulationStatus simulation_status = 1;
}

// Request payload to read supply scenarios in a paginated way
message GetSupplyScenariosRequest {
  // token based pagination
  TokenBasedPagination token_based_pagination = 1;

  // Sort Order by default we only support sorting by created field, additional fields wll be supported later if needed
  SortOrder created_sort_order = 2;
}

// Simulation Status
enum SimulationStatus {
  // unspecified simulation status
  SIMULATION_STATUS_UNSPECIFIED = 0;

  // request received, simulation will start soon
  SIMULATION_STATUS_REQUEST_RECEIVED = 4;

  // simulation is still work in progress
  SIMULATION_STATUS_IN_PROGRESS = 1;

  // metrics computation completed
  SIMULATION_STATUS_METRICS_COMPUTED = 5;

  // metrics sync in progress
  SIMULATION_STATUS_METRICS_SYNCING = 6;

  // metrics sync done and ready to view
  SIMULATION_STATUS_METRICS_READY = 7;

  // simulation resulted in an Error
  SIMULATION_STATUS_ERROR = 3;

  reserved 2;
  reserved "SIMULATION_STATUS_DONE";
}

// Create Scenario Input Status
enum ScenarioInputStatus {
  // unspecified input status
  SCENARIO_INPUT_STATUS_UNSPECIFIED = 0;

  // request received, input creation will start soon
  SCENARIO_INPUT_STATUS_REQUEST_RECEIVED = 1;

  // input creation is still work in progress
  SCENARIO_INPUT_STATUS_IN_PROGRESS = 2;

  // input creation completed
  SCENARIO_INPUT_STATUS_COMPLETED = 3;

  // input creation resulted in an Error
  SCENARIO_INPUT_STATUS_ERROR = 4;
}

// Scenario Lock Status
enum ScenarioLockStatus {
  // unspecified lock status
  SCENARIO_LOCK_STATUS_UNSPECIFIED = 0;

  // scenario lock is still work in progress
  SCENARIO_LOCK_STATUS_IN_PROGRESS = 1;

  // scenario is locked;  budget/everything is finalized and ready for spending for the upcoming week
  SCENARIO_LOCK_STATUS_LOCKED = 2;

  // scenario locking failed
  SCENARIO_LOCK_STATUS_FAILED = 3;

  // scenario is not unlocked
  SCENARIO_LOCK_STATUS_UNLOCKED = 4;
}

// Supply Scenario payload
message SupplyScenario {
  // Unique ID to identify this scenario
  string scenario_id_string = 11;

  // Time this scenario was created
  google.protobuf.Timestamp created_date = 2;

  // scenario name associated with this
  string scenario_name = 3;

  //  owner of the scenario; person who uploaded this scenario
  string uploader_email = 4;

  // Status of the Simulation
  SimulationStatus simulation_status = 5;

  // simulation error details
  string error_details = 6;

  // LockStatus of the Scenario; locked means budget/everything is finalized and ready for spending for the upcoming week
  ScenarioLockStatus lock_status = 7;

  // Time this scenario was locked, null if it's not locked
  google.protobuf.Timestamp locked_date = 8 [(doordash.api.client.nullable) = true];

  // S3 URL for scenarios input pickle file
  string scenario_inputs_url = 12;

  // S3 URL for scenarios adjustments CSV file
  string scenario_adjustments_url = 13;

  // S3 URL for scenarios config CSV file
  string scenario_config_url = 14;

  // job id for preconfigured job
  string job_id = 15;

  reserved 1, 9, 10;
  reserved 'scenario_uuid', 'scenario_id', 'scenario_id_int';
}

// response payload to read all supply scenarios in a paginated way
message GetSupplyScenariosResponse {
  // list of SupplyScenario
  repeated SupplyScenario scenarios = 1;

  // pagination token response
  TokenBasedPaginationResponse token_based_page_response = 2;
}

// request payload for LockSupplyScenario
message LockSupplyScenarioRequest {
  //  email address of the person who executed lock request
  string email = 1 [(doordash.api.validate.rules).missing_value = {action: FAIL}];

  //  scenario_id to lock
  string scenario_id_string = 4 [(doordash.api.validate.rules).missing_value = {action: FAIL}];

  reserved 2, 3;
  reserved 'scenario_uuid', 'scenario_id';
}

// response payload for LockSupplyScenario
message LockSupplyScenarioResponse {
  // scenario_id to lock
  string scenario_id_string = 6;

  // LockStatus of the Scenario
  ScenarioLockStatus lock_status = 2;

  // Time this scenario lock was executed, null if it's not locked
  google.protobuf.Timestamp locked_date = 4 [(doordash.api.client.nullable) = true];

  reserved 1, 3, 5;
  reserved 'scenario_uuid', 'lock_date', 'scenario_id';
}

// request payload to GetSupplyMetricsByScenarioId
message GetSupplyMetricsByScenarioIdRequest {
  // scenario_id to read the metrics from
  string scenario_id_string = 8 [(doordash.api.validate.rules).missing_value = {action: FAIL}];

  // token based pagination
  TokenBasedPagination token_based_pagination = 4;

  // filter metrics to this particular submarket_id, if neither submarket_id nor submarket_name is set, return all
  google.protobuf.Int32Value submarket_id_filter = 5;

  // filter metrics to this particular submarket_name, if neither submarket_id nor submarket_name is set, return all
  google.protobuf.StringValue submarket_name_filter = 6;

  // oneof fields not supported for request messages
  reserved 1, 2, 3, 7;
  reserved 'scenario_uuid', 'submarket_id', 'submarket_name', 'scenario_id';
}

// metric data type
enum MetricDataType {
  // unspecified data type
  METRIC_DATA_TYPE_UNSPECIFIED = 0;

  // number data type ex: 100, 3393, 823.233, 8283323.99
  METRIC_DATA_TYPE_NUMBER = 1;

  // Date data type
  METRIC_DATA_TYPE_DATE = 2;

  // String data type
  METRIC_DATA_TYPE_STRING = 3;
}

// units of the metric, desgined for rendering purpose
enum MetricUnit {
  // unspecified data type
  METRIC_UNIT_UNSPECIFIED = 0;

  // currency unit
  METRIC_UNIT_CURRENCY = 1;

  // percentage unit
  METRIC_UNIT_PERCENTAGE = 2;

  // render as whole Number field
  METRIC_UNIT_NUMBER = 3;

  // one decimal unit
  METRIC_UNIT_ONE_DECIMAL = 4;

  // two decimal unit
  METRIC_UNIT_TWO_DECIMAL = 5;

  // render date field upto DAY precision
  METRIC_UNIT_DATE_DAY_PRECISION = 6;

  // render date field upto SECOND precision
  METRIC_UNIT_DATE_SECOND_PRECISION = 7;

  // cents unit
  METRIC_UNIT_CENTS = 8;

  // two decimal unit
  METRIC_UNIT_THREE_DECIMAL = 9;
}

// metric row
message MetricRow {
  // reserved fields
  reserved 1;
  reserved "values";

  // values for each row, key is the row header
  map<string, double> row = 2;
}

// metric field
message MetricField {
  // field key or column header
  string key = 1;

  // display name for UI
  string display_name = 2;

  // data type associated with this metric field
  MetricDataType data_type = 3;

  // unit associated with this metric field
  MetricUnit unit = 4;
}

// MetricSection associated with these metrics
message MetricSection {
  // metric section title
  string title = 1;

  // metric rows
  repeated MetricRow data = 2;

  // metric fields
  repeated MetricField fields = 3;
}

// response payload to GetSupplyMetricsByScenarioId
message GetSupplyMetricsByScenarioIdResponse {
  // scenario_id associated it with these metrics
  string scenario_id_string = 7;

  // various metric sections to display
  repeated MetricSection metric_sections = 2;

  // pagination token response
  TokenBasedPaginationResponse token_based_page_response = 3;

  // scenario name provided by user, should be unique
  string scenario_name = 4;

  // LockStatus of the Scenario; locked means budget/everything is finalized and ready for spending for the upcoming week
  ScenarioLockStatus lock_status = 8;

  reserved 1, 5, 6;
  reserved 'scenario_uuid', 'scenario_id', 'scenario_id_int';
}

// Request payload for UpdateScenarioInputStatus
message UpdateScenarioInputStatusRequest {
  // scenario_id to update
  string scenario_id_string = 6;

  // status of the input
  ScenarioInputStatus status = 2;

  // status details used for storing any errors associated the input creation
  string status_details = 3;

  reserved 1, 4, 5;
  reserved 'scenario_uuid', 'scenario_id', 'scenario_id_int';
}

// response payload for UpdateScenarioInputStatus
message UpdateScenarioInputStatusResponse {
  // scenario_id that got updated
  string scenario_id_string = 4;

  reserved 1, 2, 3;
  reserved 'scenario_uuid', 'scenario_id', 'scenario_id_int';
}

// request payload for UpdateScenarioSimulationStatus
message UpdateScenarioSimulationStatusRequest {
  // scenario_id to update
  string scenario_id_string = 6;

  // status of the simulation
  SimulationStatus status = 2;

  // status details used for storing any errors associated the scenario run
  string status_details = 3;

  reserved 1, 4, 5;
  reserved 'scenario_uuid', 'scenario_id', 'scenario_id_int';
}

// response payload for UpdateScenarioSimulationStatus
message UpdateScenarioSimulationStatusResponse {
  // scenario_id that got updated
  string scenario_id_string = 4;

  reserved 1, 2, 3;
  reserved 'scenario_uuid', 'scenario_id', 'scenario_id_int';
}

// metric_date and value json
message MetricsJson {
  // date associated with this metric.. time series
  google.protobuf.Timestamp metric_date = 1;

  // value associated with this metric
  double metric_value = 2;
}

// supply metric write payload
message SupplyMetric {
  // category associated with this metric
  MetricCategory metric_category = 2;

  // Unit associated with this metric
  MetricUnit metric_unit = 4;

  // scenario uuid associated with this metric
  string scenario_id_string = 11;

  // time when this metric was calculations were run
  google.protobuf.Timestamp active_date = 6;

  // sub market id associated with this metric
  int32 sub_market_id = 7;

  // type associated with this metric
  MetricType metric_type = 8;

  // metric json
  repeated MetricsJson metrics_json = 12;

  reserved 1, 3, 5, 9, 10;
  reserved 'metric_date', 'metric_value', 'scenario_uuid', 'scenario_id', 'scenario_id_int';
}

// request payload for UpsertSupplyMetrics
message UpsertSupplyMetricsRequest {
  // supply metrics to upsert
  repeated SupplyMetric metrics = 1;
}

// response payload for UpsertSupplyMetrics
message UpsertSupplyMetricsResponse {
  // count of metrics upserted
  int32 upsert_count = 1;
}

// request payload for SnapshotMetricsByScenarioId
message SnapshotMetricsByScenarioIdRequest {
  // scenario id
  string scenario_id_string = 4;

  // Time this scenario lock was executed
  google.protobuf.Timestamp locked_date = 3;

  // token based pagination
  TokenBasedPagination token_based_pagination = 2;

  reserved 1;
  reserved 'scenario_id';
}

// response payload for SnapshotMetricsByScenarioId
message SnapshotMetricsByScenarioIdResponse {
  // pagination token response
  TokenBasedPaginationResponse token_based_page_response = 1;
}

// Various Metric Categories supported
enum MetricCategory {
  // Unspecified category
  METRIC_CATEGORY_UNSPECIFIED = 0;

  // inputs category
  METRIC_CATEGORY_INPUTS = 1;

  // wad_target
  METRIC_CATEGORY_WAD_TARGET = 2;

  // wad_forecast
  METRIC_CATEGORY_WAD_FORECAST = 3;

  // acquisition
  METRIC_CATEGORY_ACQUISITION = 4;

  // mobilization
  METRIC_CATEGORY_MOBILIZATION = 5;

  // uh_dxo_forecast
  METRIC_CATEGORY_UH_DXO_FORECAST = 6;

  // wad_gap
  METRIC_CATEGORY_WAD_GAP = 7;

  // waitlists
  METRIC_CATEGORY_WAITLISTS = 8;
}

// Various Metric Types supported
enum MetricType {
  // Unspecified category
  METRIC_TYPE_UNSPECIFIED = 0;

  // WOW_VOLUME_CHANGE TYPE
  METRIC_TYPE_WOW_VOLUME_CHANGE = 1;

  // VOLUME_UPLIFT_PCT
  METRIC_TYPE_VOLUME_UPLIFT_PCT = 2;

  // ACTIVE_EFFICIENCY
  METRIC_TYPE_ACTIVE_EFFICIENCY = 3;

  // HOURS_PER_DASHER
  METRIC_TYPE_HOURS_PER_DASHER = 4;

  // HOURS_NEEDED
  METRIC_TYPE_HOURS_NEEDED = 5;

  // MOBILIZATION_HOURS
  METRIC_TYPE_MOBILIZATION_HOURS = 6;

  // BASELINE_HOURS_NEEDED
  METRIC_TYPE_BASELINE_HOURS_NEEDED = 7;

  // WAD_TARGET
  METRIC_TYPE_WAD_TARGET = 8;

  // EXISTING_DASHERS
  METRIC_TYPE_EXISTING_DASHERS = 9;

  // TURNOVER_PCT
  METRIC_TYPE_TURNOVER_PCT = 10;

  // ORGANIC_NEW_DASHERS
  METRIC_TYPE_ORGANIC_NEW_DASHERS = 11;

  // WAD_FORECAST_BEFORE_WAITLIST
  METRIC_TYPE_WAD_FORECAST_BEFORE_WAITLIST = 12;

  // WAD_GAP_BEFORE_WAITLIST
  METRIC_TYPE_WAD_GAP_BEFORE_WAITLIST = 13;

  // WAITLIST_DECISION
  METRIC_TYPE_WAITLIST_DECISION = 14;

  // INCREMENTAL_WAD_FROM_WAITLIST
  METRIC_TYPE_INCREMENTAL_WAD_FROM_WAITLIST = 15;

  // SMOOTHED_WAD_GAP
  METRIC_TYPE_SMOOTHED_WAD_GAP = 16;

  // DAC_SPEND
  METRIC_TYPE_DAC_SPEND = 17;

  // INCREMENTAL_NEW_DASHERS_FROM_DAC
  METRIC_TYPE_INCREMENTAL_NEW_DASHERS_FROM_DAC = 18;

  // INCREMENTAL_WAD_FROM_DAC
  METRIC_TYPE_INCREMENTAL_WAD_FROM_DAC = 19;

  // WAD_FORECAST_AFTER_DAC
  METRIC_TYPE_WAD_FORECAST_AFTER_DAC = 20;

  // DXO_SPEND
  METRIC_TYPE_DXO_SPEND = 21;

  // UH_FORECAST
  METRIC_TYPE_UH_FORECAST = 22;

  // TARGET_UH
  METRIC_TYPE_TARGET_UH = 23;

  // TOTAL_VOLUME
  METRIC_TYPE_TOTAL_VOLUME = 24;

  // AE_FORECAST
  METRIC_TYPE_AE_FORECAST = 25;

  // BASELINE_WAD
  METRIC_TYPE_BASELINE_WAD = 26;

  // DXO_ALLOCATION
  METRIC_TYPE_DXO_ALLOCATION = 27;

  // DXO_ALLOCATION_FROM_FORECAST
  METRIC_TYPE_DXO_ALLOCATION_FROM_FORECAST = 28;

  // DXO_BUDGET
  METRIC_TYPE_DXO_BUDGET = 29;

  // DXO_COST
  METRIC_TYPE_DXO_COST = 30;

  // DXO_CPIH
  METRIC_TYPE_DXO_CPIH = 31;

  // DXO_GLOBAL_BUDGET
  METRIC_TYPE_DXO_GLOBAL_BUDGET = 32;

  // DXO_GLOBAL_SPEND_CAPPED
  METRIC_TYPE_DXO_GLOBAL_SPEND_CAPPED = 33;

  // DXO_GLOBAL_SPEND_CAPPED_FROM_FORECAST
  METRIC_TYPE_DXO_GLOBAL_SPEND_CAPPED_FROM_FORECAST = 34;

  // DXO_HOURS
  METRIC_TYPE_DXO_HOURS = 35;

  // DXO_HOURS_IDEAL
  METRIC_TYPE_DXO_HOURS_IDEAL = 36;

  // DXO_HOURS_IDEAL_FROM_FORECAST
  METRIC_TYPE_DXO_HOURS_IDEAL_FROM_FORECAST = 37;

  // DXO_HOURS_SUPPLIED
  METRIC_TYPE_DXO_HOURS_SUPPLIED = 38;

  // DXO_HOURS_SUPPLIED_FROM_FORECAST
  METRIC_TYPE_DXO_HOURS_SUPPLIED_FROM_FORECAST = 39;

  // DXO_SPEND_CAPPED
  METRIC_TYPE_DXO_SPEND_CAPPED = 40;

  // DXO_SPEND_CAPPED_FROM_FORECAST
  METRIC_TYPE_DXO_SPEND_CAPPED_FROM_FORECAST = 41;

  // DXO_SPEND_IDEAL
  METRIC_TYPE_DXO_SPEND_IDEAL = 42;

  // DXO_SPEND_IDEAL_FROM_FORECAST
  METRIC_TYPE_DXO_SPEND_IDEAL_FROM_FORECAST = 43;

  // DXO_TARGET_UH
  METRIC_TYPE_DXO_TARGET_UH = 44;

  // DXO_TARGET_UH_FROM_FORECAST
  METRIC_TYPE_DXO_TARGET_UH_FROM_FORECAST = 45;

  // EXISTING_DX
  METRIC_TYPE_EXISTING_DX = 46;

  // FORECAST_WAD_GAP
  METRIC_TYPE_FORECAST_WAD_GAP = 47;

  // FORECAST_WAD_GAP_CLIPPED
  METRIC_TYPE_FORECAST_WAD_GAP_CLIPPED = 48;

  // FORECAST_WAD_GAP_UNCLIPPED
  METRIC_TYPE_FORECAST_WAD_GAP_UNCLIPPED = 49;

  // HISTORICAL_WAD_GAP
  METRIC_TYPE_HISTORICAL_WAD_GAP = 50;

  // HOURS_GAP
  METRIC_TYPE_HOURS_GAP = 51;

  // HOURS_GAP_AFTER_ACQ
  METRIC_TYPE_HOURS_GAP_AFTER_ACQ = 52;

  // HOURS_GAP_AFTER_ACQ_FROM_FORECAST
  METRIC_TYPE_HOURS_GAP_AFTER_ACQ_FROM_FORECAST = 53;

  // HOURS_GAP_FROM_FORECAST
  METRIC_TYPE_HOURS_GAP_FROM_FORECAST = 54;

  // HOURS_GAP_FROM_OVERRIDE
  METRIC_TYPE_HOURS_GAP_FROM_OVERRIDE = 55;

  // HOURS_PER_DX_TARGET
  METRIC_TYPE_HOURS_PER_DX_TARGET = 56;

  // IDEAL_HOURS_ADJUSTMENT
  METRIC_TYPE_IDEAL_HOURS_ADJUSTMENT = 57;

  // INCREMENTAL_WAD_FROM_SPEND
  METRIC_TYPE_INCREMENTAL_WAD_FROM_SPEND = 58;

  // MAX_DXO_APPETITE
  METRIC_TYPE_MAX_DXO_APPETITE = 59;

  // MAX_DXO_SPEND
  METRIC_TYPE_MAX_DXO_SPEND = 60;

  // MIN_DXO_SPEND
  METRIC_TYPE_MIN_DXO_SPEND = 61;

  // NEW_DASHERS_FROM_SPEND
  METRIC_TYPE_NEW_DASHERS_FROM_SPEND = 62;

  // NEW_DASHERS_FROM_WAITLIST
  METRIC_TYPE_NEW_DASHERS_FROM_WAITLIST = 63;

  // ORGANIC_NEW_DX
  METRIC_TYPE_ORGANIC_NEW_DX = 64;

  // OVERRIDE_SCALING
  METRIC_TYPE_OVERRIDE_SCALING = 65;

  // OVERRIDDEN_WAD_GAP
  METRIC_TYPE_OVERRIDDEN_WAD_GAP = 66;

  // PRIOR_PAID_DX
  METRIC_TYPE_PRIOR_PAID_DX = 67;

  // TARGET_BASELINE_HOURS
  METRIC_TYPE_TARGET_BASELINE_HOURS = 68;

  // TARGET_HOURS
  METRIC_TYPE_TARGET_HOURS = 69;

  // TARGET_WAD
  METRIC_TYPE_TARGET_WAD = 70;

  // TOTAL_HOURS_FORECAST
  METRIC_TYPE_TOTAL_HOURS_FORECAST = 71;

  // TOTAL_SPEND
  METRIC_TYPE_TOTAL_SPEND = 72;

  // UH_FORECAST_ACQ
  METRIC_TYPE_UH_FORECAST_ACQ = 73;

  // UH_FORECAST_ACQ_DXO
  METRIC_TYPE_UH_FORECAST_ACQ_DXO = 74;

  // UH_FORECAST_ACQ_DXO_FROM_FORECAST
  METRIC_TYPE_UH_FORECAST_ACQ_DXO_FROM_FORECAST = 75;

  // UH_FORECAST_ACQ_DXO_RAW
  METRIC_TYPE_UH_FORECAST_ACQ_DXO_RAW = 76;

  // UH_FORECAST_NO_ACQ_DXO
  METRIC_TYPE_UH_FORECAST_NO_ACQ_DXO = 77;

  // UH_FORECAST_NO_ACQ_DXO_FROM_FORECAST
  METRIC_TYPE_UH_FORECAST_NO_ACQ_DXO_FROM_FORECAST = 78;

  // UH_FORECAST_NO_ACQ_DXO_FROM_OVERRIDE
  METRIC_TYPE_UH_FORECAST_NO_ACQ_DXO_FROM_OVERRIDE = 79;

  // UH_TARGET
  METRIC_TYPE_UH_TARGET = 80;

  // UTILIZATION_TARGET
  METRIC_TYPE_UTILIZATION_TARGET = 81;

  // VOLUME_FORECAST
  METRIC_TYPE_VOLUME_FORECAST = 82;

  // WAD_FORECAST_POST_ACQUISITION
  METRIC_TYPE_WAD_FORECAST_POST_ACQUISITION = 83;

  // WAD_IMPACT_FROM_WAITLIST
  METRIC_TYPE_WAD_IMPACT_FROM_WAITLIST = 84;
}

// Request payload to read supply scenarios by filter
message GetSupplyScenariosByFilterRequest {
  // one of scenario filters
  oneof filters {
    // filter by scenario_id
    string scenario_id_string = 4;

    // filter by scenario_name
    string scenario_name = 2;
  }

  // token based pagination
  TokenBasedPagination token_based_pagination = 3;

  reserved 1;
  reserved 'scenario_id';
}

// response payload to read supply scenarios by filter
message GetSupplyScenariosByFilterResponse {
  // list of SupplyScenario
  repeated SupplyScenario scenarios = 1;

  // pagination token response
  TokenBasedPaginationResponse token_based_page_response = 2;
}

// payload for UpdateSupplyScenario
message SupplyScenarioUpdates {
  // scenario name associated with this
  string scenario_name = 1;

  // Status of the Simulation
  SimulationStatus simulation_status = 2;

  // LockStatus of the Scenario; locked means budget/everything is finalized and ready for spending for the upcoming week
  ScenarioLockStatus lock_status = 3;

  // simulation error details
  string error_details = 4;

  // Time this scenario was locked, null if it's not locked
  google.protobuf.Timestamp locked_date = 5 [(doordash.api.client.nullable) = true];
}

// Request payload to UpdateSupplyScenario
message UpdateSupplyScenarioRequest {
  // supply scenario to upload
  SupplyScenarioUpdates scenario = 2;
  reserved 1;
  reserved 'scenarios';
}

// Response payload to UpdateSupplyScenario
message UpdateSupplyScenarioResponse {
  // upsert count of supply scenario
  int32 upsert_count = 1;
}

// Request payload to read audit logs by filter
message GetAuditLogsByFilterRequest {
  // filter by scenario_id
  string scenario_id = 1;

  // filter by action_owner
  string action_owner = 2;

  // token based pagination
  TokenBasedPagination token_based_pagination = 3;
}

// response payload to read audit logs by filter
message GetAuditLogsByFilterResponse {
  // list of AuditLog
  repeated AuditLog logs = 1;

  // pagination token response
  TokenBasedPaginationResponse token_based_page_response = 2;
}

// action type
enum ActionType {
  // unspecified action type
  ACTION_TYPE_UNSPECIFIED = 0;

  // scenario created
  ACTION_TYPE_SCENARIO_CREATED = 1;

  // scenario status updated
  ACTION_TYPE_SCENARIO_STATUS_UPDATED = 2;

  // scenario simulation error
  ACTION_TYPE_SCENARIO_SIMULATION_ERROR = 3;

  // scenario lock status updated
  ACTION_TYPE_SCENARIO_LOCK_STATUS_UPDATED = 4;

  // scenario lock failed
  ACTION_TYPE_SCENARIO_LOCK_FAILED = 5;
}

// Audit log payload
message AuditLog {
  // Unique ID to identify log
  string log_id = 1;

  // scenario id associated with this
  string scenario_id = 2;

  // scenario name associated with this
  string scenario_name = 3;

  //  action owner
  string action_owner = 4;

  // Action Type
  ActionType action_type = 5;

  // action details
  string details = 6;

  // timestamp associated with this audit log
  google.protobuf.Timestamp action_date = 7;
}

// Request to read a CSV
message FetchCSVContentsRequest {
  // URL of the file to read
  string s3_url = 1;
}

// Response of the contents of the CSV file
message FetchCSVContentsResponse {
  // Contents of the file, line-by-line
  repeated string lines = 1;
}

// ScenarioAdjustments payload
message ScenarioAdjustments {
  // id of the adjustments
  string adjustments_id_string = 1;
  // url of the adjustments
  string adjustments_url = 2;
  // email of the uploader
  string uploader_email = 3;
  // name of the file
  string file_name = 4;
  // description of the adjustments
  string description = 5;
  // creation date of the adjustments
  google.protobuf.Timestamp created_at = 6;
  // last updated date of the adjustments
  google.protobuf.Timestamp updated_at = 7;
}

// ScenarioJob payload
message ScenarioJob {
  // id of the job
  string job_id_string = 1;
  // name of the job
  string job_name = 2;
  // description of the job
  string description = 3;
  // creation date of the job
  google.protobuf.Timestamp created_at = 4;
  // last updated date of the job
  google.protobuf.Timestamp updated_at = 5;
  // email of the creator
  string created_by = 6;
  // email of the last updater
  string updated_by = 7;
  // last run date of the job
  google.protobuf.Timestamp last_run_at = 8;
}

// ScenarioJobDetails payload
message ScenarioJobDetails {
  // id of the job
  string job_id = 1;
  // name of the job
  string job_name = 2;
  // id of the adjustments
  string adjustments_id_string = 3;
  // description of the job
  string description = 4;
  // creation date of the job
  google.protobuf.Timestamp created_at = 5;
  // last updated date of the job
  google.protobuf.Timestamp updated_at = 6;
  // email of the creator
  string created_by = 7;
  // email of the last updater
  string last_updated_by = 8;
  // deleted date of the job
  google.protobuf.Timestamp deleted_at = 9;
  // last run date of the job
  google.protobuf.Timestamp last_run_at = 10;
  // notify on success
  bool notify_on_success = 11;
  // notify on failure
  bool notify_on_failure = 12;
  // slack handle
  string slack_handle = 13;
  // supply scenarios that matches the job_id
  repeated SupplyScenario supply_scenarios = 14;
  // config csv id
  string config_csv_id_string = 15;
}

// Request to create a scenario adjustments entry
message CreateScenarioAdjustmentsEntryRequest {
  // scenario id
  string adjustments_name = 1;
  // CSV contents
  google.protobuf.BytesValue csv_contents = 2 [(doordash.api.validate.rules).missing_value = {action: FAIL}];
  // file name
  string file_name = 3 [(doordash.api.validate.rules).missing_value = {action: FAIL}];
  // description
  string description = 4;
}

// Response to create a scenario adjustments entry
message CreateScenarioAdjustmentsEntryResponse {
  // scenario adjustments entry id
  string adjustments_id_string = 1;
}

// Request to read scenario adjustments entries
message GetScenarioAdjustmentEntriesRequest {
  // page token
  string page_token = 1;
  // page size
  int32 page_size = 2;
  // sort order
  SortOrder sort_order = 3;
}

// Response to read scenario adjustments entries
message GetScenarioAdjustmentEntriesResponse {
  // list of scenario adjustments entries
  repeated ScenarioAdjustments adjustments = 1;
  // pagination token
  TokenBasedPaginationResponse token_based_page_response = 2;
}

// Request to update a scenario adjustments entry
message UpdateScenarioAdjustmentsEntryRequest {
  // scenario adjustments entry id
  string adjustments_id_string = 1;
  // uploader email
  string uploader_email = 2;
  // file name
  string file_name = 3 [(doordash.api.validate.rules).missing_value = {action: FAIL}];
  // description
  string description = 4;
}

// Response to update a scenario adjustments entry
message UpdateScenarioAdjustmentsEntryResponse {
  // scenario adjustments entry id
  string adjustments_id_string = 1;
}

// Request to delete a scenario adjustments entry
message DeleteScenarioAdjustmentsEntryRequest {
  // scenario adjustments entry id
  string adjustments_id_string = 1;
}

// Response to delete a scenario adjustments entry
message DeleteScenarioAdjustmentsEntryResponse {
  // success
  bool success = 1;
  // error message
  string error_message = 2;
}

// Request to create a scenario job
message CreateScenarioJobRequest {
  // job name
  string job_name = 1;
  // job description
  string description = 2;
  // job adjustments id
  string adjustments_id_string = 3;
  // notify on success
  bool notify_on_success = 4;
  // notify on failure
  bool notify_on_failure = 5;
  // slack handle
  string slack_handle = 6;
  // config csv contents
  google.protobuf.BytesValue config_csv_contents = 7 [(doordash.api.validate.rules).missing_value = {action: FAIL}];
}

// Response to create a scenario job
message CreateScenarioJobResponse {
  // scenario job id
  string job_id_string = 1;
}

// Request to read scenario jobs
message GetScenarioJobsRequest {
  // token based pagination
  TokenBasedPagination token_based_pagination = 1;
  // sort order
  SortOrder sort_order = 2;
}

// Response to read scenario jobs
message GetScenarioJobsResponse {
  // list of scenario jobs
  repeated ScenarioJob jobs = 1;
  // pagination token
  TokenBasedPaginationResponse next_page_token = 2;
}

// Request to update a scenario job
message UpdateScenarioJobRequest {
  // scenario job id
  string job_id_string = 1;
  // job name
  string job_name = 2;
  // job description
  string description = 3;
  // job adjustments id
  string adjustments_id_string = 4;
  // notify on success
  bool notify_on_success = 5;
  // notify on failure
  bool notify_on_failure = 6;
  // slack handle
  string slack_handle = 7;
  // config csv contents
  google.protobuf.BytesValue config_csv_contents = 8 [(doordash.api.validate.rules).missing_value = {action: FAIL}];
}

// Response to update a scenario job
message UpdateScenarioJobResponse {
  // scenario job id
  string job_id_string = 1;
}

// Request to delete a scenario job
message DeleteScenarioJobRequest {
  // scenario job id
  string job_id_string = 1;
  // uploader email
  string uploader_email = 2;
}

// Response to delete a scenario job
message DeleteScenarioJobResponse {
  // success
  bool success = 1;
  // error message
  string error_message = 2;
}
