syntax = "proto3";

package doordash.payment.event;

import "data_classification.v1/data_classification.proto";
import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "payment/credits.proto";
import "payment/payin_cart_payment.proto";
import "payment/payin_v1.proto";
import "payment/payout_v1.proto";
import "payment/purchase_card.proto";
import "payment/purchase_card_reversal.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.payment.event";

/*
   Indicates an entity's changed attribute with previous_value (pre-update) and current_value (post-update).
*/
message UpdatedAttribute {
  google.protobuf.StringValue name = 1;

  // Previous value of this attribute.
  // When set to null, meaning previous attribute was with Null value.
  // When left unset, meaning there was no information available for previous value.
  google.protobuf.Any previous_value = 2;

  // Current value of this attribute.
  // When set to null, meaning current attribute is set to Null value.
  // When left unset, meaning current attribute is removed from the entity.
  google.protobuf.Any current_value = 3;
}

/*
   Metadata from the request which triggered this event.
*/
message RequestMetaData {
  // Request id generated from payment services.
  google.protobuf.StringValue service_request_id = 1;

  // Id of target user the request acted on.
  google.protobuf.StringValue user_id = 2;

  // Id of user who issued request.
  google.protobuf.StringValue login_as_user_id = 3;

  // Ip address of caller.
  google.protobuf.StringValue ip_address = 4;

  // Generic context information that can be consumed by down streams
  // e.g. {"feature_flag_abc": True} could indicate this event is triggered under
  // a particular path where "feature_flag_abc" = True
  map<string, google.protobuf.Any> context = 5;
}

message PaymentEvent {
  // Unique id as well as idempotence key of this event.
  google.protobuf.StringValue id = 1;

  // Entity type of included entity in this event.
  EntityType entity_type = 2;

  // Id of included entity in this event.
  google.protobuf.StringValue entity_id = 3;

  // Type of the event.
  EventType event_type = 4;

  // Timestamp of when the originated action of this event was applied to included entity.
  // e.g. a cart_payment entity was captured at 2020-01-01T15:00:00Z therefore a "cart_payment.captured" event
  // is created with "created_At = 2020-01-01T15:00:00Z"
  google.protobuf.Timestamp created_at = 5;

  // List of updated attributes for included entity.
  // When the event is created for an entity's update, updated_attributes is typically present.
  // When the event is created for an entity's creation, updated_attributes is not set.
  repeated UpdatedAttribute updated_attributes = 6 [(data_classification.v1.data_classification).pii = true];

  // (Optional) Request metadata for this event.
  RequestMetaData request_metadata = 7;

  // Only of the included entity within this "oneof" block can be set for a single PaymentEvent instance.
  oneof entity {
    doordash.payment.payin.CartPayment cart_payment_v1 = 8;
    doordash.payment.payout.PayoutMethod payout_method_v1 = 9;
    doordash.payment.payin.PaymentIntent payment_intent = 10;
    doordash.payment.payin.PaymentMethod payment_method_v1 = 11;
    doordash.payment.purchase_card.MarqetaPurchase marqeta_purchase = 12;
    doordash.payment.payout.PayoutAccount payout_account_v1 = 13;
    doordash.payment.payout.Payout payout_v1 = 14;
    doordash.payment.payin.PaymentDispute dispute_v1 = 15;
    doordash.payment.purchase_card_reversal.MarqetaPurchaseReversal marqeta_purchase_reversal = 16;
    doordash.payment.payin.SubscriptionPlan subscription_plan_v1 = 17;
    doordash.payment.payin.Subscription subscription_v1 = 18;
    doordash.payment.payin.SubscriptionInvoice subscription_invoice_v1 = 19;
    doordash.payment.purchase_card.MarqetaPurchaseV2 marqeta_purchase_v2 = 20;
    doordash.payment.payout.InstantPayout instant_payout_v1 = 21;
    doordash.payment.credits.CreditUnit credit_unit_v1 = 22;
    doordash.payment.payout.Transaction transaction_v1 = 23;
    doordash.payment.payout.StripeTransfer stripe_transfer_v1 = 24;
    doordash.payment.payin.PaymentMethodCreationFailed payment_method_creation_failed_v1 = 25;
    doordash.payment.payin.PgpPaymentMethod pgp_payment_method = 26;
    doordash.payment.payout.Funding funding_v1 = 27;
    doordash.payment.purchase_card.RedCardPurchaseRefund red_card_purchase_refund_v1 = 28;
    doordash.payment.payout.StripeChargesEnabledUpdate stripe_charges_enabled_update = 29;
  }
}

/*
   Type enums of possible included entity on a PaymentEvent.
*/
enum EntityType {
  _UNKNOWN_ENTITY_TYPE = 0;
  CART_PAYMENT_V1 = 1;
  PAYOUT_METHOD_V1 = 2;
  PAYMENT_INTENT = 3; // No explicit versioning for payment intent, as it is an internal entity.
  PAYMENT_METHOD_V1 = 4;
  PAYOUT_ACCOUNT_V1 = 5;
  MARQETA_PURCHASE = 6;
  PAYOUT_V1 = 7;
  DISPUTE_V1 = 8;
  MARQETA_PURCHASE_REVERSAL = 9;
  SUBSCRIPTION_PLAN_V1 = 10;
  SUBSCRIPTION_V1 = 11;
  SUBSCRIPTION_INVOICE_V1 = 12;
  MARQETA_PURCHASE_V2 = 13;
  INSTANT_PAYOUT_V1 = 14;
  CREDIT_UNIT_V1 = 15;
  TRANSACTION_V1 = 16;
  STRIPE_TRANSFER_V1 = 17;
  PAYMENT_METHOD_CREATION_FAILED_V1 = 18;
  PGP_PAYMENT_METHOD = 19;
  FUNDING_V1 = 20;
  RED_CARD_PURCHASE_REFUND_V1 = 21;
  STRIPE_CHARGES_ENABLED_UPDATE_V1 = 22;
}

/*
   Type enums of possible event types of a PaymentEvent.
*/
enum EventType {
  // group event type enum indices at bucket size of 50 per each entity
  _UNKNOWN_EVENT_TYPE = 0;

  // CartPayment
  CART_PAYMENT_CREATED = 1;
  CART_PAYMENT_CAPTURED = 2;
  CART_PAYMENT_AMOUNT_UPDATED = 3;
  CART_PAYMENT_FAILED = 4;
  CART_PAYMENT_REFUND_SUCCEEDED = 5;
  CART_PAYMENT_CONFIRMED = 6;
  CART_PAYMENT_CAPTURE_PENDING_RETRY = 7;
  CART_PAYMENT_CAPTURE_FAILED = 8;
  CART_PAYMENT_UPDATE_FAILED = 9;

  // PayoutMethod
  PAYOUT_METHOD_BANK_UPDATED = 50;
  PAYOUT_METHOD_CREATED = 51;
  PAYOUT_METHOD_UPDATED = 52;

  // PaymentIntent
  PAYMENT_INTENT_CAPTURED = 101;
  PAYMENT_INTENT_CAPTURE_PENDING_RETRY = 102;
  PAYMENT_INTENT_CAPTURE_FAILED = 103;

  // PaymentMethod
  PAYMENT_METHOD_CREATED = 150;
  PAYMENT_METHOD_DELETED = 151;
  PAYMENT_METHOD_FAILED = 152;
  PAYMENT_METHOD_UPDATED = 153;
  PGP_PAYMENT_METHOD_CREATED = 154;

  // PayoutAccount
  PAYOUT_ACCOUNT_CREATED = 200;
  PAYOUT_ACCOUNT_UPDATED = 201;

  // PurchaseCard
  MARQETA_PURCHASE_UPDATED = 250;
  MARQETA_PURCHASE_REVERSED = 251;
  MARQETA_PURCHASE_UPDATED_V2 = 252;
  RED_CARD_PURCHASE_REFUND_UPDATED_V1 = 253;

  // PayoutPayout
  PAYOUT_CREATED = 300;
  PAYOUT_UPDATED = 301;

  // Dispute
  DISPUTE_CREATED = 350;
  DISPUTE_RESOLVED = 351;
  DISPUTE_UPDATED = 352;

  // SubscriptionPlan
  SUBSCRIPTION_PLAN_DELETED = 400;

  // SubscriptionInvoice
  SUBSCRIPTION_INVOICE_CREATED = 450;
  SUBSCRIPTION_INVOICE_PAYMENT_SUCCEEDED = 451;
  SUBSCRIPTION_INVOICE_PAYMENT_FAILED = 452;
  SUBSCRIPTION_INVOICE_UPCOMING = 453;
  SUBSCRIPTION_INVOICE_NEXT_CYCLE_UPCOMING = 454;

  // Subscription
  SUBSCRIPTION_DELETED = 500;
  SUBSCRIPTION_TRIAL_WILL_END = 501;
  SUBSCRIPTION_MIGRATED = 502;

  // InstantPayout
  INSTANT_PAYOUT_CREATED = 600;
  INSTANT_PAYOUT_UPDATED = 601;
  INSTANT_PAYOUT_CREATED_PAYOUT_V1 = 602;
  INSTANT_PAYOUT_UPDATED_PAYOUT_V1 = 603;

  // Credits
  CREDIT_DEPOSITED = 700;
  CREDIT_DEDUCTED = 701;
  DEPOSIT_CREDIT_REVERTED = 702;
  DEDUCT_CREDIT_REVERTED = 703;

  // Transaction
  TRANSACTION_CREATED = 800;
  TRANSACTION_UPDATED = 801;

  // Stripe Transfer
  STRIPE_TRANSFER_CREATED = 900;
  STRIPE_TRANSFER_UPDATED = 901;

  // Funding
  FUNDING_CREATED = 1000;

  // Migration Validation
  MIGRATION_VALIDATOR_EVENT_CREATED = 2000;

  // Stripe Charges Enabled field update
  STRIPE_CHARGES_ENABLED_UPDATE = 3000;
}

message MigrationValidatorEvent {
  // Unique id as well as idempotence key of this event.
  google.protobuf.StringValue event_id = 1;

  // Domain of the validator event
  MigrationValidatorEventDomain domain = 2;

  // Source of the validator event
  MigrationValidatorEventSource source = 3;

  // API or Job name
  google.protobuf.StringValue job_name = 4;

  // API or Job use case
  google.protobuf.StringValue job_use_case = 5;

  // API Request id or Job id
  google.protobuf.StringValue job_id = 6;

  // Indicates which payload is the current implementation
  google.protobuf.BoolValue current = 7;

  // Payload of the API or Job in JSON
  google.protobuf.StringValue payload = 8;

  // Runtime path of the validator strategy
  google.protobuf.StringValue strategy_config = 9;
}

/*
   Type enums of possible domain types of a MigrationValidatorEvent.
*/
enum MigrationValidatorEventDomain {
  _UNKNOWN_DOMAIN = 0;

  PAYIN = 1;
  PAYOUT = 2;
}

/*
   Type enums of possible source types of a MigrationValidatorEvent.
*/
enum MigrationValidatorEventSource {
  _UNKNOWN_SOURCE = 0;

  PAYMENT_SERVICE = 1;
  PAYIN_PLATFORM = 2;
  PAYOUT_PLATFORM = 3; // AKA PAYMENT_PLATFORM
}

/*
   Request for cleaning up resources from the Stripe Pharmacy Account.
   https://docs.google.com/document/d/1Hfc11wM4-BAoy8FkIIVL6f1x-ig5cgJikc3m_cFM8zs/edit#heading=h.d51gxe3xk7xc
*/
message StripeDeleteRequest {
  // Unique id as well as idempotency key of this event.
  google.protobuf.StringValue id = 1;

  // The type of cleanup task that we should trigger, along with the required information for that task.
  oneof event {
    DeleteCustomerEvent delete_customer = 2;
    DetachPaymentMethodEvent detach_payment_method = 3;
  }
}

/*
   Event to request that a customer in the Pharmacy Stripe account should be deleted.
*/
message DeleteCustomerEvent {
  // The id of the customer stored in the PGP that we want to delete.
  google.protobuf.StringValue pgp_customer_id = 1;
}

/*
   Event to request that a payment method in the Pharmacy Stripe account should be detached.
*/
message DetachPaymentMethodEvent {
  // The id of the payment method stored in the PGP that we want to detach.
  google.protobuf.StringValue pgp_payment_method_id = 1;
}
