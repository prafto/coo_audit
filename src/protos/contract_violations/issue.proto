syntax = "proto3";

package contract_violation.v1;

import "common/service_client_config.proto";
import "contract_violations/issue_common.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.contract_violation";

// generic issue service
service IssueService {
  option (service_client.client_config).service_name = "contract-violation";
  option (service_client.client_config).service_app = "web";

  // Get issue by ID
  rpc GetIssueById(GetIssueByIdRequest) returns (GetIssueByIdResponse);
  // Create issue
  rpc CreateIssue(CreateIssueRequest) returns (CreateIssueResponse);
  // Update issue
  rpc UpdateIssue(UpdateIssueRequest) returns (UpdateIssueResponse);
  // Delete issue
  rpc DeleteIssueById(DeleteIssueByIdRequest) returns (DeleteIssueByIdResponse);
  // List shift issues in last N shifts
  rpc ListIssuesInLastNShiftsByPerpetratorIdAndIssueType(ListIssuesInLastNShiftsByPerpetratorIdAndIssueTypeRequest) returns (ListIssuesInLastNShiftsByPerpetratorIdAndIssueTypeResponse);
  // Add shift ID to L25 tracking for Perpetrator ID
  rpc AddShiftToL25ShiftsForPerpetratorId(AddShiftToL25ShiftsForPerpetratorIdRequest) returns (AddShiftToL25ShiftsForPerpetratorIdResponse);
  // List issues for a specific entity type and entity id
  rpc ListIssuesByEntityTypeEntityId(ListIssuesByEntityTypeEntityIdRequest) returns (ListIssuesByEntityTypeEntityIdResponse);
}

// get issue request
message GetIssueByIdRequest {
  // issue id
  string id = 1;
}

// get issue response
message GetIssueByIdResponse {
  // wrapped issue
  Issue issue = 1;
}

// create issue request
message CreateIssueRequest {
  // entity id
  string entity_id = 1;
  // entity name
  IssueEntityType entity_type = 2;
  // perpetrator id
  int64 perpetrator_user_id = 3;
  // issue type
  IssueType issue_type = 4;
  // issue status
  IssueStatus issue_status = 5;
  // issue metadata
  google.protobuf.Struct issue_metadata = 6;
  // corresponding issue rule id
  string rule_id = 7;
  // points incurred by issue
  float points = 8;
  // rolloff period quantity
  int32 rolloff_period_quantity = 9;
  // rolloff period unit
  IssueRuleRolloffUnit rolloff_period_unit = 10;
}

// create issue response
message CreateIssueResponse {
  // created issue
  Issue issue = 1;
}

// update issue request
// if a field is null, we don't update it
message UpdateIssueRequest {
  // issue id
  string id = 1;
  // issue status
  IssueStatus issue_status = 2;
  // issue metadata
  google.protobuf.Struct issue_metadata = 3;
  // if set to true, replaces issue_metadata with whatever is passed in
  // if set to false or unset, we upsert the values in issue_metadata
  bool replace_metadata = 4;
}

// update issue response
message UpdateIssueResponse {
  // updated issue
  Issue issue = 1;
}

// delete issue request
message DeleteIssueByIdRequest {
  // issue id
  string id = 1;
}

// delete issue response
message DeleteIssueByIdResponse {}

// ListIssuesInLastNShiftsByPerpetratorIdAndIssueTypeRequest
message ListIssuesInLastNShiftsByPerpetratorIdAndIssueTypeRequest {
  // perpetrator id
  int64 perpetrator_user_id = 1;
  // lookback window
  int32 n = 2;
  // issue type
  IssueType issue_type = 3;
}

// ListIssuesInLastNShiftsByPerpetratorIdAndIssueTypeResponse
message ListIssuesInLastNShiftsByPerpetratorIdAndIssueTypeResponse {
  // issues
  repeated Issue issues = 1;
}

// AddShiftToL25ShiftsForPerpetratorIdRequest
message AddShiftToL25ShiftsForPerpetratorIdRequest {
  // perpetrator id
  int64 perpetrator_user_id = 1;
  // shift id
  int64 shift_id = 2;
}

// AddShiftToL25ShiftsForPerpetratorIdResponse
message AddShiftToL25ShiftsForPerpetratorIdResponse {}

// ListIssuesByEntityTypeEntityIdRequest
message ListIssuesByEntityTypeEntityIdRequest {
  // entity type
  IssueEntityType entity_type = 1;
  // entity ID
  string entity_id = 2;
}

// ListIssuesByEntityTypeEntityIdResponse
message ListIssuesByEntityTypeEntityIdResponse {
  // issues
  repeated Issue issues = 1;
}

// Issue
message Issue {
  //uuid auto-generated
  string id = 1;
  // entity id
  string entity_id = 2;
  // entity name
  IssueEntityType entity_type = 3;
  // perpetrator id
  int64 perpetrator_user_id = 4;
  // issues creation time
  google.protobuf.Timestamp created_at = 5;
  // issue type
  IssueType issue_type = 6;
  // issue status
  IssueStatus issue_status = 7;
  // issue metadata
  google.protobuf.Struct issue_metadata = 8;
  // corresponding issue rule id
  string rule_id = 9;
  // points incurred by issue
  float points = 10;
  // rolloff period quantity
  int32 rolloff_period_quantity = 11;
  // rolloff period unit
  IssueRuleRolloffUnit rolloff_period_unit = 12;
  // issues last update time
  google.protobuf.Timestamp updated_at = 13;
}

// Issue Entity Types
enum IssueEntityType {
  // fallback
  ISSUE_ENTITY_TYPE_UNSPECIFIED = 0;
  // delivery entity type
  ISSUE_ENTITY_TYPE_DELIVERY = 1;
  // shift type
  ISSUE_ENTITY_TYPE_SHIFT = 2;
}

// Issue Status
enum IssueStatus {
  // unspecified status
  ISSUE_STATUS_UNSPECIFIED = 0;
  // unread status
  ISSUE_STATUS_UNREAD = 1;
  // read status
  ISSUE_STATUS_READ = 2;
  // needs review status
  ISSUE_STATUS_NEEDS_REVIEW = 3;
  // in review status
  ISSUE_STATUS_IN_REVIEW = 4;
  // dispute accepted status
  ISSUE_STATUS_DISPUTE_ACCEPTED = 5;
  // dispute rejected status
  ISSUE_STATUS_DISPUTE_REJECTED = 6;
  // forgiven status
  ISSUE_STATUS_FORGIVEN = 7;
  // status empty status
  ISSUE_STATUS_EMPTY = 8;
}
