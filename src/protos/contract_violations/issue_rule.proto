syntax = "proto3";

package contract_violation.v1;

import "common/service_client_config.proto";
import "contract_violations/issue_common.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.contract_violation";

// Issue Rule Service
service IssueRuleService {
  option (service_client.client_config).service_name = "dasher_service";
  option (service_client.client_config).service_app = "contract-violations";
  option (service_client.client_config).response_attempt_timeout_millis = 750;

  // Get issue rule
  rpc GetIssueRuleById(GetIssueRuleByIdRequest) returns (GetIssueRuleByIdResponse);
  // Create issue rule
  rpc CreateIssueRule(CreateIssueRuleRequest) returns (CreateIssueRuleResponse);
  // Update issue rule
  rpc UpdateIssueRule(UpdateIssueRuleRequest) returns (UpdateIssueRuleResponse);
  // Delete issue rule
  rpc DeleteIssueRule(DeleteIssueRuleRequest) returns (DeleteIssueRuleResponse);
  // List issue rules by issue type
  rpc ListIssueRulesByIssueType(ListIssueRulesByIssueTypeRequest) returns (ListIssueRulesByIssueTypeResponse);
}

// Get issue rule request
message GetIssueRuleByIdRequest {
  // Issue rule ID
  string id = 1;
}

// Get issue rule response
message GetIssueRuleByIdResponse {
  // Issue rule
  IssueRule issue_rule = 1;
}

// Create issue rule request
message CreateIssueRuleRequest {
  // Issue rule name
  string name = 1;
  // Issue rule description
  google.protobuf.StringValue description = 2;
  // Issue rule type
  IssueType issue_type = 3;
  // Issue rule point weight
  float point_weight = 4;
  // Issue rule rolloff period
  int32 rolloff_period_quantity = 5;
  // Issue rule rolloff period unit
  IssueRuleRolloffUnit rolloff_period_unit = 6;
  // Json formatted metadata
  google.protobuf.Struct additional_rules_json = 7;
}

// Create issue rule response
message CreateIssueRuleResponse {
  // Issue rule
  IssueRule issue_rule = 1;
}

// Update issue rule request
message UpdateIssueRuleRequest {
  // Issue rule ID
  string id = 1;
  // Issue rule name
  google.protobuf.StringValue name = 2;
  // Issue rule description
  google.protobuf.StringValue description = 3;
  // Issue rule type
  IssueType issue_type = 4;
  // Issue rule point weight
  google.protobuf.FloatValue point_weight = 5;
  // Issue rule rolloff period
  google.protobuf.Int32Value rolloff_period_quantity = 6;
  // Issue rule rolloff period unit
  IssueRuleRolloffUnit rolloff_period_unit = 7;
  // Json formatted metadata
  google.protobuf.Struct additional_rules_json = 8;
}

// Update issue rule response
message UpdateIssueRuleResponse {
  // Issue rule
  IssueRule issue_rule = 1;
}

// Delete issue rule request
message DeleteIssueRuleRequest {
  // Issue rule ID
  string id = 1;
}

// Delete issue rule response
message DeleteIssueRuleResponse {}

// List issue rules by issue type request
message ListIssueRulesByIssueTypeRequest {
  // Issue type
  IssueType issue_type = 1;
}

// List issue rules by issue type response
message ListIssueRulesByIssueTypeResponse {
  // List of issue rules
  repeated IssueRule issue_rules = 1;
}

// Issue rule
message IssueRule {
  // auto-gen uuid
  string id = 1;
  // name of rule
  string name = 2;
  // rule description
  google.protobuf.StringValue description = 3;
  // created timestamp
  google.protobuf.Timestamp created_at = 4;
  // updated timestamp
  google.protobuf.Timestamp updated_at = 5;
  // issue type
  IssueType issue_type = 6;
  // number of points issue type should incur
  float point_weight = 7;
  // rolloff period for issue type
  int32 rolloff_period_quantity = 8;
  // rolloff period unit (e.g. delivery, shift)
  IssueRuleRolloffUnit rolloff_period_unit = 9;
  // additional rules can go here
  google.protobuf.Struct additional_rules_json = 10;
}
