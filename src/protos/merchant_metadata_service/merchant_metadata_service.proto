syntax = "proto3";

package merchant_metadata_service.v1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "merchant_metadata_service/common.proto";

option go_package = "github.com/doordash/services-protobuf/generated/merchant_metadata_service/api/v1";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.merchant_metadata_service.rpc.api";

// The GRPC service that holds APIs to get merchant metadata.
service MerchantMetadataService {
  // -------------
  // Get APIs
  // -------------
  // Get metadata by store and menu entity IDs and metadata type.
  rpc GetMetadata(GetMetadataRequest) returns (GetMetadataResponse);
  // Get all type of metadata by store and menu entity IDs.
  rpc GetMetadataByStoreMenuEntity(GetMetadataByStoreMenuEntityRequest) returns (GetMetadataByStoreMenuEntityResponse);
  // Get all metadata by entity type and metadata type such as cpg, dish, cuisine, etc.
  rpc GetMetadataByType(GetMetadataByTypeRequest) returns (GetMetadataByTypeResponse);
  // Retrieve a single row (the full DB record) for a specific metadata entity.
  rpc GetFullMetadataEntity(GetFullMetadataEntityRequest) returns (GetFullMetadataEntityResponse);
  // Retrieve multiple metadata entities (full records) for a specific store.
  rpc BatchGetFullMetadataEntitiesForStore(BatchGetFullMetadataEntitiesForStoreRequest) returns (BatchGetFullMetadataEntitiesForStoreResponse);

  // -------------
  // Write APIs
  // -------------
  // Upsert (create or update) a ML prediction metadata record
  rpc UpsertPredictedMetadata(UpsertPredictedMetadataRequest) returns (UpsertPredictedMetadataResponse);
  // Upsert (create or update) a manually labeled metadata record
  rpc UpsertManuallyLabeledMetadata(UpsertManuallyLabeledMetadataRequest) returns (UpsertManuallyLabeledMetadataResponse);
}

// Request object of getting merchant metadata.
message GetMetadataRequest {
  // Store ID
  string store_id = 1;
  // entity type: store, item, item+option, etc.
  string entity_type = 2;
  // entity ID (IDs by type, could be combination of IDs for item+option)
  string entity_id = 3;
  // Metadata type: cpg, dish, cuisine, etc.
  string metadata_type = 4;
}

// Response object of getting metadata.
message GetMetadataResponse {
  // Data to be returned
  message Data {
    // Metadata
    merchant_metadata_service.v1.Metadata metadata = 1;
    // model version (nullable for non-ML metadata)
    google.protobuf.StringValue model_version = 2;
    // concept scheme version (nullable for non-ML metadata)
    google.protobuf.StringValue concept_scheme_version = 3;
    // deleted at (nullable)
    google.protobuf.Timestamp deleted_at = 4;
  }
  // List of retrieved metadata
  repeated Data metadata = 1;
}

// Request object of getting merchant metadata by store and menu entity IDs.
message GetMetadataByStoreMenuEntityRequest {
  // Store ID
  string store_id = 1;
  // entity type: store, item, item+option, etc.
  string entity_type = 2;
  // entity ID (IDs by type, could be combination of IDs for item+option)
  string entity_id = 3;
}

// Response object of getting metadata by store and menu entity ids.
message GetMetadataByStoreMenuEntityResponse {
  // Data to be returned
  message Data {
    // Metadata type: cpg, dish, cuisine, etc.
    string metadata_type = 1;
    // Metadata
    merchant_metadata_service.v1.Metadata metadata = 2;
    // model version
    google.protobuf.StringValue model_version = 3;
    // concept scheme version
    google.protobuf.StringValue concept_scheme_version = 4;
    // deleted at (nullable)
    google.protobuf.Timestamp deleted_at = 5;
  }
  // List of retrieved metadata
  repeated Data metadata = 1;
}

// Request object of get metadata by type
message GetMetadataByTypeRequest {
  // Store ID
  string store_id = 1;
  // entity type: store, item, item+option, etc.
  string entity_type = 2;
  // Metadata type: cpg, dish, cuisine, etc.
  string metadata_type = 3;
  // is_deleted flag (false by default, only return non-deleted records)
  bool is_deleted = 4;
}

// Response object of getting merchant metadata by type.
message GetMetadataByTypeResponse {
  // Data to be returned
  message Data {
    // entity ID (IDs by type, could be combination of IDs for item+option)
    string entity_id = 1;
    // Metadata
    merchant_metadata_service.v1.Metadata metadata = 2;
    // model version
    google.protobuf.StringValue model_version = 3;
    // concept scheme version
    google.protobuf.StringValue concept_scheme_version = 4;
    // deleted at (nullable)
    google.protobuf.Timestamp deleted_at = 5;
  }
  // List of retrieved metadata
  repeated Data metadata = 1;
}

// Request object of getting one single full metadata entity.
message GetFullMetadataEntityRequest {
  // Store ID
  string store_id = 1;
  // entity type: store, item, item+option, etc.
  string entity_type = 2;
  // entity ID (IDs by type, could be combination of IDs for item+option)
  string entity_id = 3;
  // Metadata type: cpg, dish, cuisine, etc.
  string metadata_type = 4;
  // model version
  string model_version = 5;
  // concept scheme version
  string concept_scheme_version = 6;
}

// Response object of getting full metadata entities.
message GetFullMetadataEntityResponse {
  // single metadata entity record
  merchant_metadata_service.v1.MetadataEntity metadata_entity = 1;
}

// Request object of getting full metadata entities by store.
message BatchGetFullMetadataEntitiesForStoreRequest {
  // Store ID
  string store_id = 1;
}

// Response object of getting full metadata entities by store.
message BatchGetFullMetadataEntitiesForStoreResponse {
  // List of metadata entities
  repeated merchant_metadata_service.v1.MetadataEntity metadata_entities = 1;
}

// Upsert ML prediction metadata request
message UpsertPredictedMetadataRequest {
  // Required
  // store ID
  string store_id = 1;
  // entity type: store, item, item+option, etc.
  string entity_type = 2;
  // entity ID (IDs by type, could be combination of IDs for item+option)
  string entity_id = 3;
  // Metadata type: cpg, dish, cuisine, etc.
  string metadata_type = 4;
  // model version
  string model_version = 5;
  // concept scheme version
  string concept_scheme_version = 6;
  // Predicted metadata
  merchant_metadata_service.v1.MLPrediction ml_prediction = 7;

  // Optional
  // Menu ID
  google.protobuf.StringValue menu_id = 8;
  // Business ID
  google.protobuf.StringValue business_id = 9;
}

// Response object of upserting ML prediction metadata.
message UpsertPredictedMetadataResponse {
  // The upserted merchant metadata (the final version stored)
  merchant_metadata_service.v1.MetadataEntity metadata_entity = 1;
}

// Upsert manually labeled metadata request
message UpsertManuallyLabeledMetadataRequest {
  // Required
  // store ID
  string store_id = 1;
  // entity type: store, item, item+option, etc.
  string entity_type = 2;
  // entity ID (IDs by type, could be combination of IDs for item+option)
  string entity_id = 3;
  // Metadata type: cpg, dish, cuisine, etc.
  string metadata_type = 4;
  // metadata
  merchant_metadata_service.v1.NonMLOverride non_ml_override = 7;

  // Optional
  // Menu ID
  google.protobuf.StringValue menu_id = 8;
  // Business ID
  google.protobuf.StringValue business_id = 9;
  // model version
  google.protobuf.StringValue model_version = 10;
  // concept scheme version
  google.protobuf.StringValue concept_scheme_version = 11;
}

// Response object of upserting manually labeled metadata.
message UpsertManuallyLabeledMetadataResponse {
  // The upserted merchant metadata (the final version stored)
  merchant_metadata_service.v1.MetadataEntity metadata_entity = 1;
}
