syntax = "proto3";

package reliability_scorecard.v1;

import "common/date.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/doordash/services-protobuf/generated/reliability_scorecard";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.reliabilityscorecard";

// Provides APIs to retrieve reliability scorecards for projects.
// Design doc: https://docs.google.com/document/d/1tGl-ujGa7-YX94MKdz_wHAEuiL3-11-Sd-mWcvjjaG4/edit?usp=sharing
service ReliabilityScorecardService {
  // GetProjectScorecard retrieves the scorecard for the project with the specified name.
  rpc GetProjectScorecard(GetProjectScorecardRequest) returns (GetProjectScorecardResponse) {}

  // GetProjectScorecardHistory retrieves the historical data for the given project's scorecard.
  rpc GetProjectScorecardHistory(GetProjectScorecardHistoryRequest) returns (GetProjectScorecardHistoryResponse) {}

  // ListScorecards returns scorecards for each project listed in the request, if one is available for that project.
  rpc ListProjectScorecards(ListProjectScorecardsRequest) returns (ListProjectScorecardsResponse) {}

  // ListChecks returns basic information about Reliability Scorecard checks.
  rpc ListChecks(ListChecksRequest) returns (ListChecksResponse) {}

  // BatchGetTeamScorecards returns scorecards for each software asset owned by the given team.
  rpc BatchGetTeamScorecards(BatchGetTeamScorecardsRequest) returns (BatchGetTeamScorecardsResponse) {}
}

// Get the scorecard belonging to a specific project at DoorDash.
message GetProjectScorecardRequest {
  // name of the project for which the scorecard is to be retrieved.
  string project_name = 1;
}

// GetProjectScorecardResponse represents the data associated with a specific project's scorecard.
message GetProjectScorecardResponse {
  // Basic metadata about the project.
  ProjectMetadata metadata = 1;

  // Total score for the project combining results of all the applicable checks.
  uint32 total_score = 2;

  // Max score possible for the project considering all the applicable checks.
  uint32 max_score = 3;

  // Detailed scorecard.
  ProjectScorecard scorecard = 4;
}

// ProjectMetadata provides the basic metadata about a project.
message ProjectMetadata {
  // ProjectType indicates what type of project this is.
  enum ProjectType {
    // Default unknown type.
    PROJECT_TYPE_UNSPECIFIED = 0;
    // Service deployed on Kubernetes.
    PROJECT_TYPE_SERVICE = 1;
    // Infra projects (e.g. Jenkins, Spinnaker etc.)
    PROJECT_TYPE_INFRA = 2;
    // Web projects.
    PROJECT_TYPE_WEB = 3;
    // iOS apps.
    PROJECT_TYPE_IOS = 4;
    // Android apps.
    PROJECT_TYPE_ANDROID = 5;
  }

  // ProjectTier indicates the criticality of this project.
  // See: go/service-tiers
  enum ProjectTier {
    // Default value - unknown tier.
    PROJECT_TIER_UNSPECIFIED = 0;
    // Tier 0
    PROJECT_TIER_0 = 1;
    // Tier 1
    PROJECT_TIER_1 = 2;
    // Tier 2
    PROJECT_TIER_2 = 3;
    // Tier 3
    PROJECT_TIER_3 = 4;
  }

  // Name of the project.
  string name = 1;

  // Type of the project.
  ProjectType type = 2;

  // Criticality tier of the project.
  // See: go/service-tiers
  ProjectTier tier = 3;
}

// ProjectScorecard provides the most recent scorecard for a project.
message ProjectScorecard {
  // Timestamp of when this scorecard was last updated.
  google.protobuf.Timestamp last_updated = 1;

  // List of checks that were applied to the project.
  repeated ScorecardCheck checks = 2;

  // Total score for the project combining results of all the applicable checks.
  uint32 total_score = 3;

  // Max score possible for the project considering all the applicable checks.
  uint32 max_score = 4;
}

// ScorecardCheck represents the result for a single check for a project.
message ScorecardCheck {
  // Unique identifier for the check.
  string id = 1;

  // A more descriptive name for the check.
  string name = 2;

  // Brief description of what this check evaluates.
  string description = 3;

  // Documentation URL
  string documentation_url = 4;

  // The timestamp of when this check was last run for the project.
  google.protobuf.Timestamp last_updated = 5;

  // Score from the most recent evaluation of this check for this project.
  uint32 current_score = 6;

  // Max score possible for this check for this project.
  uint32 max_score = 7;

  // Cause for partial success or failure of the check.
  string reason = 8;
}

// Get the historical scorecard information for a specific project.
message GetProjectScorecardHistoryRequest {
  // name of the project for which the scorecard history needs to be retrieved.
  string project_name = 1;
}

// GetProjectScorecardHistoryResponse provides the historical data for a project's scorecard.
message GetProjectScorecardHistoryResponse {
  // Map of evaluation date (in YYYY-MM-DD format) to the scorecard for the project on that date.
  map<string, ScorecardSnapshot> history = 1;
}

// ScorecardSnapshot provides a snapshot for a project's performance on a given date.
message ScorecardSnapshot {
  // Map of check id to its corresponding evaluation result.
  map<string, HistoricalCheckResult> checks = 1;

  // Total score achieved on the evaluation date.
  uint32 total_score = 2;

  // Max score possible on the evaluation date.
  uint32 max_score = 3;
}

// HistoricalCheckResult represents a single data point in a check's history.
message HistoricalCheckResult {
  // Identifier for the check.
  string check_id = 1;

  // Evaluation date.
  date.Date eval_date = 2;

  // Best score achieved on evaluation date.
  int32 eval_score = 3;

  // Max score that was applicable for the check when it achieved its best score.
  int32 max_score = 4;
}

// ListProjectScorecardsRequest provides the names of projects for which scorecards need to be retrieved.
message ListProjectScorecardsRequest {
  // List of project names for which scorecards need to be retrieved.
  repeated string project_names = 1;
}

// ListProjectScorecardsResponse includes the scorecards requested using the ListProjectScorecards rpc.
message ListProjectScorecardsResponse {
  // Map of project name to its most recent scorecard.
  map<string, ProjectScorecard> scorecards = 1;
}

// ListChecksRequest defines criteria for which checks' information should be returned.
message ListChecksRequest {}

// ListChecksResponse provides information about requested checks.
message ListChecksResponse {
  // List of check configs.
  repeated CheckConfig checks = 1;
}

// CheckConfig provides information about a check used by Reliability Scorecard.
message CheckConfig {
  // A unique identifier for the check.
  string id = 1;

  // Name of the check in a readable form.
  string name = 2;

  // Brief description of what the check evaluates.
  string description = 3;
}

// BatchGetTeamScorecardsRequest defines the name of the team for which scorecards need to be retrieved.
message BatchGetTeamScorecardsRequest {
  // Name of the team for which scorecards need to be retrieved.
  string team_name = 1;
}

// BatchGetTeamScorecardsResponse includes the scorecards for all software assets owned by the specified team.
message BatchGetTeamScorecardsResponse {
  // Owner team for software assets.
  string owner = 1;

  // Map of project name to its scorecard.
  map<string, ProjectScorecard> scorecards = 10;
}
