syntax = "proto3";

package doordash_consumer_service.subscription;

import "action-catalog/common/deep_link_navigate.proto";
import "common/money.proto";
import "component-catalog.common/prism/components/text.proto";
import "component-catalog.common/prism/shared/icon.proto";
import "doordash.api/field_validate.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.consumer_service.subscription";

enum PlatformType {
  UNKNOWN_PLATFORM_TYPE = 0;
  IOS = 1;
  ANDROID = 2;
  DESKTOP = 3;
  MOBILE_WEB = 4;
  GOOGLE_AMP = 5;
  GOOGLE_NATIVE = 6;
}

enum RefundType {
  UNKNOWN_REFUND_TYPE = 0;
  POST_ORDER_REFUND = 1;
  PRE_CHECKOUT_REFUND = 2;
  LAST_MONTH_SAVING = 3;
}

// Enum representing the status of links for partner cards
enum MembershipLinkStatus {
  UNKNOWN_MEMBERSHIP_LINK_STATUS = 0;
  MEMBERSHIP_LINK_STATUS_LINK_CREATED = 1;
  MEMBERSHIP_LINK_STATUS_LINK_NOT_EXIST = 2;
  MEMBERSHIP_LINK_STATUS_LINK_EXCEPTION = 3;
}

message GenericCalloutInfo {
  google.protobuf.StringValue title = 1;
  google.protobuf.StringValue description = 2 [(doordash.api.validate.rules).missing_value = {action: FAIL}];
}

enum PartnerName {
  UNKNOWN_PARTNER_NAME = 0;
  PARTNER_NAME_CHASE = 1;
  PARTNER_NAME_MASTERCARD = 2;
  PARTNER_NAME_RBC = 3;
  PARTNER_NAME_AFTERPAY = 4;
}

enum SubscriptionPlanType {
  DASHPASS = 0;
  LUNCHPASS = 1;
}

enum BillingProvider {
  BILLING_PROVIDER_STRIPE = 0;
  BILLING_PROVIDER_DOORDASH = 1;
  BILLING_PROVIDER_GSM = 2;
}

enum TransitionType {
  TRANSITION_TYPE_UNKNOWN = 0;
  TRANSITION_TYPE_TRIAL_TO_ANNUAL_PLAN = 1;
  TRANSITION_TYPE_PAID_TO_DASHCARD_PLAN = 2;
  TRANSITION_TYPE_DELAYED_REDEEM_CODE_PLAN = 3;
  TRANSITION_TYPE_DELAYED_WBD_TO_MONTHLY_PLAN = 4;
  TRANSITION_TYPE_DELAYED_STRIPE_SUBSCRIPTION_CANCEL = 5;
  TRANSITION_TYPE_DISCOUNTED_TO_STANDARD_ANNUAL_PLAN = 6;
  TRANSITION_TYPE_FULL_PRICE_MONTHLY_TO_DISCOUNTED_MONTHLY = 7;
  TRANSITION_TYPE_DISCOUNTED_MONTHLY_TO_FULL_PRICE_MONTHLY = 8;
  TRANSITION_TYPE_ANNUAL_TO_DISCOUNTED_MONTHLY = 9;
  TRANSITION_TYPE_PAID_TO_DASHCARD_10K_PLAN = 10;
}

enum GiftingDeliveryOption {
  UNKNOWN_DELIVERY_OPTION = 0;
  EMAIL = 1;
  TEXT = 2;
}

message BenefitItem {
  google.protobuf.StringValue title = 1;
  google.protobuf.StringValue subtitle = 2;
  google.protobuf.StringValue description = 3;
  google.protobuf.StringValue logo_url = 4;
  google.protobuf.StringValue background_color = 5;
}

message DashPassSavings {
  SavingsType savings_type = 1;
  DashPassSavingsPeriod savings_period = 2;
  money.MonetaryFields savings_amount = 3;
  DashPassSavingsMessaging savings_messaging = 4;
  google.protobuf.Int32Value order_count = 5;
}

enum DashPassSavingsEntryPoint {
  DEFAULT_ENTRYPOINT = 0;
  ORDER_CONFIRMATION_SAVINGS = 1;
  SAVINGS_NOTIFICATION = 2;
}

message DashPassSavingsMessaging {
  google.protobuf.StringValue title = 1;
  google.protobuf.StringValue subtitle = 2;
  repeated BenefitItem benefits = 3;
}

/*
 * Generic styled text descriptions to be reused as much as possible.
 */

/*
 * A DescriptionSection is the basic unit for an array/display of text.  Description sections
 * have a string identifier along with styled text, so that BE can control styling and caller
 * can arrange the text however they see fit based on identifiers
 * Do not update this without review from @rohan.shankar, @wojciech.fratczak, or @fiona.miao.
 *
 */
message SubscriptionDescriptionSection {
  SectionIdentifier section_id = 1;

  // DEPRECATED - use oneof section instead
  component_catalog.common.prism.components.v1.Text text = 2;
  component_catalog.common.prism.shared.v1.Icon trailing_icon = 3;
  action_catalog.common.v1.DeepLinkNavigateAction on_click = 4;

  // One of the following fields must be set. The API supports returning a button or text for the section.
  oneof section {
    SubscriptionTextInfo section_text = 5;
    SubscriptionButtonInfo section_button = 6;
  }
}

message SubscriptionTextInfo {
  component_catalog.common.prism.components.v1.Text text = 1;
  component_catalog.common.prism.shared.v1.Icon trailing_icon = 2;

  // The navigate action to be performed when the element is clicked.
  action_catalog.common.v1.DeepLinkNavigateAction on_click = 3;
}

message SubscriptionButtonInfo {
  component_catalog.common.prism.components.v1.Text text = 1;
  component_catalog.common.prism.shared.v1.Icon leading_icon = 2;
  component_catalog.common.prism.shared.v1.Icon trailing_icon = 3;

  // The navigate action to be performed when the element is clicked.
  action_catalog.common.v1.DeepLinkNavigateAction on_click = 4;
}

enum SectionIdentifier {
  SECTION_ID_DASHPASS_STATUS = 0; // Subscription status of the user. Eg "DashPass subscriber since 1/1/24 (active)"
  SECTION_ID_BENEFITS_SUMMARY = 1; // Summary of used benefits. Eg "$20 in savings and 10 hours back the last 30 days"
  SECTION_ID_DASHPASS_DECORATOR = 2; // A Decorator around benefit message for dashpass branding. Eg "with DashPass"
  SECTION_ID_DASHPASS_BUTTON = 3; // A button for the user to view their current subscription or sign up for DashPass
  SECTION_ID_MEMBER_SHARING_BUTTON = 4; // A button that links the user to the "household sharing" dashpass benefit
}

enum SavingsType {
  DASHPASS_SERVICE_FEE = 0;
  DASHPASS_DELIVERY_FEE = 1;
  DASHPASS_PICKUP_BENEFIT = 2;
  DASHPASS_PROMOTIONS = 3;
  DASHPASS_TOTAL_SAVINGS = 4;
}

message DashPassSavingsPeriod {
  DashPassSavingsPeriodType savings_period_type = 1;
  google.protobuf.Int32Value savings_period_count = 2;
  google.protobuf.Timestamp start_time = 3; // required if type is timeperiod
  google.protobuf.Timestamp end_time = 4; // required if type is timeperiod
}

enum DashPassSavingsPeriodType {
  MONTHLY = 0;
  WEEKLY = 1;
  ORDERS = 2;
  TIME_PERIOD = 3;
  CURRENT_ORDER_CART = 4;
}

enum BadgeType {
  BADGE_TYPE_UNSPECIFIED = 0;
  BADGE_TYPE_DASHPASS = 1;
}

// deprecated, use common.subscription..v1.SubscriptionBenefitIneligibilityReason instead
enum BenefitEligibilityStatus {
  option deprecated = true;
  BENEFIT_ELIGIBILITY_STATUS_UNKNOWN = 0;
  BENEFIT_ELIGIBILITY_STATUS_ELIGIBLE = 1;
  BENEFIT_ELIGIBILITY_STATUS_INELIGIBLE_DUE_TO_INACTIVE_STATUS = 2;
  BENEFIT_ELIGIBILITY_STATUS_INELIGIBLE_DUE_TO_PAUSE_STATUS = 3;
  BENEFIT_ELIGIBILITY_STATUS_INELIGIBLE_DUE_TO_INCORRECT_PAYMENT_METHOD = 4;
  BENEFIT_ELIGIBILITY_STATUS_INELIGIBLE_DUE_TO_ENROLLMENT_LIMIT_REACHED = 5;
}
