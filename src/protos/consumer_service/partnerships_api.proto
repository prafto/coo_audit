syntax = "proto3";

// buf:lint:ignore DIRECTORY_SAME_PACKAGE
package doordash.subscription.partnerships.v1;

import "common/service_client_config.proto";
import "common/subscription.proto";
import "consumer_service/max_event.proto";
import "consumer_service/subscription_common.proto";
import "doordash.api/annotations.proto";
import "doordash.api/field_validate.proto";
import "google/api/annotations.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "lego.response/lego_response.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.subscription.partnerships";

// Dashpass Partnerships service
service PartnershipsService {
  option (doordash.api.service) = {
    name: "subscription-partnerships-grpc"
    url: "consumer-service-subscription-grpc.service.prod.ddsd"
    port: 50051
    name_spaces: ["subscriptions"] /* an area of the project, will be a part of URL */
    api_key_name: "UG_SUBSCRIPTIONS_SERVICE_API_KEY"
    owner: {
      name: "subscription-partnerships-service"
      id: "dashpass-partnerships-alerts"
      slack_channel: "#ask-dashpass-partnership"
      email_alias: "dashpass-partnership-eng@doordash.com"
    }
    target_products: [CX]
    vertical_domains: [CX]
  };

  // GetPartnerPage API
  rpc GetPartnerPage(GetPartnerPageRequest) returns (GetPartnerPageResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 5000;
    option (google.api.http) = {get: "/cx/subscriptions/v1/get_partner_page"};
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: PROD
      authorization: [
        CX_USER,
        CX_GUEST,
        CX_LITE_GUEST
      ]
      slo_config: {
        critical_alerts_enabled: false
        critical_5m_burn_threshold: 6000
        critical_5m_burn_sustain_seconds: 300
        p99_latency: 5
      }
    };
    option (doordash.api.inject_headers) = {
      inject: [
        {field: "platform"}]
    };
  }

  // GetPartnerBenefitInfo API
  rpc GetPartnerBenefitInfo(GetPartnerBenefitInfoRequest) returns (GetPartnerBenefitInfoResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 5000;
    option (google.api.http) = {get: "/cx/subscriptions/v1/get_partner_benefit_info"};
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: PROD
      authorization: [DD_USER]
      role_based_authorization: {
        mode: ALL,
        roles: ["perm_access_teammate_headquarters"]
      }
      slo_config: {
        critical_alerts_enabled: false
        critical_5m_burn_threshold: 6000
        critical_5m_burn_sustain_seconds: 600
        p99_latency: 5
      }
    };
  }

  // ActivatePartnerBenefit API
  rpc ActivatePartnerBenefit(ActivatePartnerBenefitRequest) returns (ActivatePartnerBenefitResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 10000;
    option (google.api.http) = {
      post: "/cx/subscriptions/v1/activate_partner_benefit"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: PROD
      authorization: [CX_USER]
      slo_config: {
        critical_alerts_enabled: false
        critical_5m_burn_threshold: 6000
        critical_5m_burn_sustain_seconds: 300
        p99_latency: 10
      }
    };
  }

  // SwitchPartnerBenefit API, used for upgrade/downgrade benefit scenarios
  rpc SwitchPartnerBenefit(SwitchPartnerBenefitRequest) returns (SwitchPartnerBenefitResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 10000;
    option (google.api.http) = {
      post: "/cx/subscriptions/v1/switch_partner_benefit"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: PROD
      authorization: [CX_USER]
      slo_config: {
        critical_alerts_enabled: false
        critical_5m_burn_threshold: 6000
        critical_5m_burn_sustain_seconds: 300
        p99_latency: 10
      }
    };
  }

  // TerminatePartnerBenefit API
  rpc TerminatePartnerBenefit(TerminatePartnerBenefitRequest) returns (TerminatePartnerBenefitResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 5000;
    option (google.api.http) = {
      post: "/cx/subscriptions/v1/terminate_partner_benefit"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: PROD
      authorization: [CX_USER]
      slo_config: {
        critical_alerts_enabled: false
        critical_5m_burn_threshold: 6000
        critical_5m_burn_sustain_seconds: 300
        p99_latency: 5
      }
    };
  }

  // TerminatePartnerBenefitWithOptions API
  rpc TerminatePartnerBenefitWithOptions(TerminatePartnerBenefitWithOptionsRequest) returns (TerminatePartnerBenefitWithOptionsResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 5000;
    option (google.api.http) = {
      post: "/cx/subscriptions/v1/terminate_partner_benefit_with_options"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [DD_USER]
      role_based_authorization: {
        mode: ALL,
        roles: [
          "perm_access_teammate_headquarters",
          "perm_workflow_tool_access_dispatch_dashpass_cancellation"
        ]
      }
    };
  }

  // ProcessMaxEvent API
  rpc ProcessMaxEvent(ProcessMaxEventRequest) returns (ProcessMaxEventResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 5000;
  }

  // ResetPartnerBenefit API
  rpc ResetPartnerBenefits(ResetPartnerBenefitsRequest) returns (ResetPartnerBenefitsResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 5000;
    option (google.api.http) = {
      post: "/cx/subscriptions/v1/reset_partner_benefit"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [DD_USER]
      role_based_authorization: {
        mode: ALL,
        roles: [
          "perm_access_teammate_headquarters",
          "perm_workflow_tool_access_dispatch_dashpass_cancellation"
        ]
      }
    };
  }

  // GetMembershipStatusForPartner API
  rpc GetMembershipStatusForPartner(GetMembershipStatusForPartnerRequest) returns (GetMembershipStatusForPartnerResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 5000;
  }

  // GetPartnerBenefitsEligibilityRequest API
  rpc GetPartnerBenefitsEligibility(GetPartnerBenefitsEligibilityRequest) returns (GetPartnerBenefitsEligibilityResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 5000;
  }
}

// GetPartnerPage request
message GetPartnerPageRequest {
  // Partner name
  PartnerName partner_name = 1 [(doordash.api.validate.rules).missing_value = {action: FAIL}];
  // Partner page type
  PartnerPageType page_type = 2;
  // Consumer Id
  google.protobuf.StringValue consumer_id = 3 [(doordash.api.inject_id) = CX_ID];
  // Source
  google.protobuf.StringValue source = 4;
  // (optional) External User Id
  google.protobuf.StringValue external_user_id = 5 [(doordash.api.validate.rules).missing_value = {action: IGNORE}];
  // (optional) Error code from partner
  google.protobuf.StringValue error_code = 6 [(doordash.api.validate.rules).missing_value = {action: IGNORE}];
  // (optional) External context from partner
  google.protobuf.StringValue external_context = 7 [(doordash.api.validate.rules).missing_value = {action: IGNORE}];
}

// GetPartnerBenefitInfo request
message GetPartnerBenefitInfoRequest {
  // Partner benefit names
  repeated PartnerName partner_names = 1;
  // Consumer Id
  google.protobuf.StringValue consumer_id = 2;
}

// GetPartnerBenefitInfo response
message GetPartnerBenefitInfoResponse {
  // List of partner benefit statuses
  repeated PartnerBenefitInfo partner_benefit_infos = 1;
}

// PartnerBenefitInfo response
message PartnerBenefitInfo {
  // Partner name
  PartnerName partner_name = 1;
  // Partner Benefit
  PartnerBenefit partner_benefit = 2;
  // Partner subscription status
  PartnerSubscriptionStatus partner_subscription_status = 3;
  // Subscription Id
  google.protobuf.StringValue consumer_subscription_id = 4;
  // Start time of the benefit
  google.protobuf.Timestamp start_time = 5;
  // End time of benefit subscription
  google.protobuf.Timestamp end_time = 6;
  // Refund Data
  BenefitRefundData benefit_refund_data = 7;
  // Reason for partner benefit ineligibility
  google.protobuf.StringValue ineligibility_reason = 8;
  // Cancel time of benefit subscription
  google.protobuf.Timestamp cancel_time = 9;
  // Active Card used for Benefit (null if doesn't exists) (Will deprecate)
  ActiveCardInfo active_card_info = 10;
  // Eligible Cards to enroll in benefit (empty list if none exist)
  repeated EligiblePartnerCard eligible_partner_cards = 11;
  // Authorized Users for Partner Benefit (empty list if none exist)
  repeated AuthorizedUser authorized_users = 12;
  // Details message at bottom of benefit info
  google.protobuf.StringValue benefit_details = 13;
  // Latest Enrollment card used for benefit (null if doesn't exist)
  LatestEnrollmentCardInfo latest_enrollment_card_info = 14;
  // Plan Id
  google.protobuf.StringValue consumer_subscription_plan_id = 15;
}

// AuthorizedUser data
message AuthorizedUser {
  // Consumer Id
  google.protobuf.StringValue consumer_id = 1;
  // Consumer First Name
  google.protobuf.StringValue first_name = 2;
  // Consumer Last Name
  google.protobuf.StringValue last_name = 3;
}

// EligiblePartnerCard data
message EligiblePartnerCard {
  // Is this the card active for enrollment? (deprecated)
  google.protobuf.BoolValue is_active = 1;
  // Brand name of card
  google.protobuf.StringValue brand = 2;
  // Product Brand of the Partner Card
  google.protobuf.StringValue brand_product = 3;
  // Last 4 of card number
  google.protobuf.StringValue last4 = 4;
  // Expiration Year of card
  google.protobuf.Int32Value exp_year = 5;
  // Expiration Month of card
  google.protobuf.Int32Value exp_month = 6;
  // Priority of the benefit
  google.protobuf.Int32Value membership_benefit_priority = 7;
  // Styling and Copy of benefit banner
  BenefitBanner benefit_banner = 8;
  // Card status for enrollment
  BenefitStatus benefit_status = 9;
}

// ActiveCardInfo data
message ActiveCardInfo {
  // Brand name of card
  google.protobuf.StringValue brand = 1;
  // Product Brand of the Partner Card
  google.protobuf.StringValue brand_product = 2;
  // Last 4 of card number
  google.protobuf.StringValue last4 = 3;
}

// LatestEnrollmentCardInfo data
message LatestEnrollmentCardInfo {
  // Brand name of card
  google.protobuf.StringValue brand = 1;
  // Product Brand of the Partner Card
  google.protobuf.StringValue brand_product = 2;
  // Last 4 of card number
  google.protobuf.StringValue last4 = 3;
}

// Benefit Banner data on card
message BenefitBanner {
  // Title of banner
  google.protobuf.StringValue title = 1;
  // Description of banner (in markdown)
  google.protobuf.StringValue description = 2;
  // Prism string for icon in banner
  google.protobuf.StringValue icon = 3;
  // Color of sidebar of banner
  google.protobuf.StringValue sidebar_color = 4;
}

// Benefit Refund estimate Data
message BenefitRefundData {
  // Partial refund amount
  google.protobuf.StringValue partial_refund_amount = 1;
  // Full refund amount
  google.protobuf.StringValue full_refund_amount = 2;
}

// ActivatePartnerBenefit request
message ActivatePartnerBenefitRequest {
  // Partner benefit name
  PartnerBenefit partner_benefit = 1 [(doordash.api.validate.rules).missing_value = {action: FAIL}];
  // (optional) Consumer Id
  google.protobuf.StringValue consumer_id = 2 [
    (doordash.api.inject_id) = CX_ID,
    (doordash.api.validate.rules).missing_value = {action: IGNORE}
  ];
  // Payment method type
  google.protobuf.StringValue payment_method_type = 3;
  // Payment method stripe Id. Not required if stripe_token or payment_method_uuid is provided
  google.protobuf.StringValue stripe_id = 4;
  // Stripe token - used for Apple/Google Pay
  google.protobuf.StringValue stripe_token = 5;
  // Payment method uuid - preferred over stripe Id
  google.protobuf.StringValue payment_method_uuid = 6;
  // (optional) User Id
  google.protobuf.StringValue user_id = 7 [(doordash.api.validate.rules).missing_value = {action: IGNORE}];
  // (optional) External User Id
  google.protobuf.StringValue external_user_id = 8 [(doordash.api.validate.rules).missing_value = {action: IGNORE}];
  // (optional) Extracted session params
  map<string, google.protobuf.StringValue> extracted_session_parameters = 9 [(doordash.api.validate.rules).missing_value = {action: IGNORE}];
}

// ProcessMaxEvent request
message ProcessMaxEventRequest {
  // Event id
  google.protobuf.StringValue id = 1;
  // Event type
  MaxEventType event_type = 2;
  // WBD user id
  google.protobuf.StringValue user_id = 3;
  // DoorDash generated partner user id
  google.protobuf.StringValue partner_user_id = 4;
  // Event timestamp
  google.protobuf.Timestamp timestamp = 5;
  // Event data
  MaxEventData event_data = 6;
}

// ProcessMaxEvent response
message ProcessMaxEventResponse {
  // Error code
  MaxEventErrorCode error = 1;
  // Error description
  google.protobuf.StringValue error_description = 2;
}

// SwitchPartnerBenefit request
message SwitchPartnerBenefitRequest {
  // Current partner benefit to switch from
  PartnerBenefit current_partner_benefit = 1 [(doordash.api.validate.rules).missing_value = {action: FAIL}];
  // New partner benefit to switch to
  PartnerBenefit new_partner_benefit = 2 [(doordash.api.validate.rules).missing_value = {action: FAIL}];
  // Consumer Id
  google.protobuf.StringValue consumer_id = 3 [(doordash.api.inject_id) = CX_ID];
  // Payment method type
  google.protobuf.StringValue payment_method_type = 4;
  // Payment method stripe Id. Not required if stripe_token or payment_method_uuid is provided
  google.protobuf.StringValue stripe_id = 5;
  // Stripe token - used for Apple/Google Pay
  google.protobuf.StringValue stripe_token = 6;
  // Payment method uuid - preferred over stripe Id
  google.protobuf.StringValue payment_method_uuid = 7;
  // (optional) Extracted session params
  map<string, google.protobuf.StringValue> extracted_session_parameters = 8 [(doordash.api.validate.rules).missing_value = {action: IGNORE}];
}

// TerminatePartnerBenefit request
message TerminatePartnerBenefitRequest {
  // Partner benefit name to terminate
  PartnerBenefit partner_benefit = 1 [(doordash.api.validate.rules).missing_value = {action: FAIL}];
  // Consumer Id
  google.protobuf.StringValue consumer_id = 2 [(doordash.api.inject_id) = CX_ID];
}

// TerminatePartnerBenefitWithOptionsRequest request
message TerminatePartnerBenefitWithOptionsRequest {
  // Partner benefit name to terminate
  PartnerBenefit partner_benefit = 1 [(doordash.api.validate.rules).missing_value = {action: FAIL}];
  // Consumer Id
  google.protobuf.StringValue consumer_id = 2;
  // Cancel Immediately
  google.protobuf.BoolValue cancel_immediately = 3;
  // Refund Type
  RefundType refund_type = 4;
}

// ResetPartnerBenefits request
message ResetPartnerBenefitsRequest {
  // Partner benefit name to reset
  repeated PartnerBenefit partner_benefits = 1;
  // Consumer Id
  google.protobuf.StringValue consumer_id = 2;
}

// GetMembershipStatusForPartner request
message GetMembershipStatusForPartnerRequest {
  // Partner name
  PartnerName partner_name = 1;
  // User Id
  google.protobuf.StringValue user_id = 2;
}

// GetMembershipStatusForPartner response
message GetMembershipStatusForPartnerResponse {
  // Partner benefit status
  PartnerBenefitsEligibility benefits_eligibility = 1;
  // Owner ID (who pays for the subscription)
  google.protobuf.StringValue owner_user_id = 2;
}

// Partner name
enum PartnerName {
  // Unspecified partner name
  PARTNER_NAME_UNSPECIFIED = 0;
  // MAX
  PARTNER_NAME_MAX = 1;
  // LYFT
  PARTNER_NAME_LYFT = 2;
  // CHASE
  PARTNER_NAME_CHASE = 3;
  // VFF
  PARTNER_NAME_VFF = 4;
  // AIR NZ
  PARTNER_NAME_AIRNZ = 5;
}

// Partner page type
enum PartnerPageType {
  // Unspecified page type
  PARTNER_PAGE_TYPE_UNSPECIFIED = 0;
  // Manage partner subscription
  PARTNER_PAGE_TYPE_MANAGE = 1;
  // Landing page
  PARTNER_PAGE_TYPE_LANDING = 2;
}

// Partner benefit name
enum PartnerBenefit {
  // Unspecified benefit
  PARTNER_BENEFIT_UNSPECIFIED = 0;
  // Max AdLite benefit
  PARTNER_BENEFIT_MAX_AD_LITE = 1;
  // Max AdLite benefit
  PARTNER_BENEFIT_MAX_AD_FREE = 2;
  // Lyft benefit
  PARTNER_BENEFIT_LYFT = 3;
  // Chase promo benefit
  PARTNER_BENEFIT_CHASE_PROMO = 4;
  // VFF benefit
  PARTNER_BENEFIT_VFF = 5;
  // Air NZ benefit
  PARTNER_BENEFIT_AIRNZ = 6;
}

// Partner subscription status
enum PartnerSubscriptionStatus {
  // Unspecified benefit status
  PARTNER_SUBSCRIPTION_STATUS_UNSPECIFIED = 0;
  // Benefit is active
  PARTNER_SUBSCRIPTION_STATUS_ACTIVE = 1;
  // Benefit is terminated
  PARTNER_SUBSCRIPTION_STATUS_TERMINATED = 2;
  // Benefit is pending activation
  PARTNER_SUBSCRIPTION_STATUS_PENDING = 3;
  // Customer is not eligible for the partner benefit
  PARTNER_SUBSCRIPTION_STATUS_INELIGIBLE = 4;
  // Customer has not activated partner benefit
  PARTNER_SUBSCRIPTION_STATUS_INACTIVE = 5;
  // Error with benefit enrollment
  PARTNER_SUBSCRIPTION_STATUS_ERROR = 6;
}

// Benefit status
enum BenefitStatus {
  // Unspecified status
  BENEFIT_STATUS_UNSPECIFIED = 0;
  // Active status
  BENEFIT_STATUS_ACTIVE = 1;
  // INACTIVE (benefits not activated) status
  BENEFIT_STATUS_INACTIVE = 2;
  // ISSUE (Issue with card) status
  BENEFIT_STATUS_ISSUE = 3;
}

// Refund type for THQ
enum RefundType {
  // Unspecified refund type
  REFUND_TYPE_UNSPECIFIED = 0;
  // None
  REFUND_TYPE_NONE = 1;
  // Full refund
  REFUND_TYPE_FULL = 2;
  // Partial refund
  REFUND_TYPE_PARTIAL = 3;
}

// Partner Benefits Eligibility
enum PartnerBenefitsEligibility {
  // Unspecified eligibility status
  PARTNER_BENEFITS_ELIGIBILITY_STATUS_UNSPECIFIED = 0;
  // No DP
  PARTNER_BENEFITS_ELIGIBILITY_STATUS_NON_MEMBER = 1;
  // Yes DP, but not eligible for partner benefits
  PARTNER_BENEFITS_ELIGIBILITY_STATUS_NON_ELIGIBLE_MEMBER = 2;
  // Yes DP, eligible for partner benefits
  PARTNER_BENEFITS_ELIGIBILITY_STATUS_ELIGIBLE_MEMBER = 3;
  // Yes DP, eligible, but the first DTP charge didn't go through yet
  PARTNER_BENEFITS_ELIGIBILITY_STATUS_PENDING_ELIGIBLE_MEMBER = 4;
}

// GetPartnerPage response
message GetPartnerPageResponse {
  // Map of page keys to page responses
  // The map must have a 'root' key with the main page to load
  // other pages are bottom sheets that can be shown on certain actions and are optional in response
  map<string, lego.response.v1.LegoPageResponse> partner_pages = 1;
}

// Activate Partner Benefit response
message ActivatePartnerBenefitResponse {
  // Whether the request was successful
  google.protobuf.BoolValue success = 1;
  // Url cx will be redirected to after the API call
  google.protobuf.StringValue redirect_url = 2;
  // Response message
  google.protobuf.StringValue message = 3;
}

// Switch Partner Benefit response
message SwitchPartnerBenefitResponse {
  // Response message
  google.protobuf.StringValue message = 1;
}

// Terminate Partner Benefit response
message TerminatePartnerBenefitResponse {
  // Response message
  google.protobuf.StringValue message = 1;
}

// TerminatePartnerBenefitWithOptions response
message TerminatePartnerBenefitWithOptionsResponse {
  // Response message
  google.protobuf.StringValue message = 1;
}

// Reset Partner Benefit response
message ResetPartnerBenefitsResponse {
  // Response message
  google.protobuf.StringValue message = 1;
}

// GetPartnerBenefitsEligibility request
message GetPartnerBenefitsEligibilityRequest {
  // consumer id
  google.protobuf.StringValue consumer_id = 1 [(doordash.api.inject_id) = CX_ID];
  // partner benefit name to recognize partner
  PartnerBenefit partner_benefit = 2;
  // stripe id for default payment method card (optional). Helps eliminate a call to payin service if this is provided.
  google.protobuf.StringValue stripe_id = 3;
  // indicates if default payment method is card
  google.protobuf.BoolValue is_card_payment = 4;
  // List of consumer ids across experience, to eliminate COPS call in this endpoint
  repeated google.protobuf.StringValue consumer_ids_across_experiences = 5;
}

// GetPartnerBenefitsEligibility response
message GetPartnerBenefitsEligibilityResponse {
  // Is the user eligible for the benefit?
  google.protobuf.BoolValue is_eligible = 2;
  // Reason why user was ineligible, if applicable
  common.subscription.v1.SubscriptionBenefitIneligibilityReason ineligibility_reason = 3;

  // deprecated benefit_eligibility_status enum in favour of ineligibility_reason enum
  reserved 1;
  reserved "benefit_eligibility_status";
}
