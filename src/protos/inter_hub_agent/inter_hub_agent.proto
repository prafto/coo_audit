syntax = "proto3";
package inter_hub_agent.v1;

option java_generic_services = true;
option java_package = "com.doordash.rpc.inter_hub_agent";
option java_outer_classname = "Service";

import "google/protobuf/wrappers.proto";
import "common/service_client_config.proto";

// Service dealing with Inter-Hub Agents
service InterHubAgentService {
  // Get available Inter-Hub Agents for a given Inter-Hub route
  rpc GetAvailableAgents(GetAvailableAgentsRequest) returns (GetAvailableAgentsResponse);
  // Assign an Inter-Hub Agent to a Delivery
  rpc AssignDelivery(AssignDeliveryRequest) returns (AssignDeliveryResponse);
  // Unassign an Inter-Hub Agent from a Delivery
  rpc UnassignDelivery(UnassignDeliveryRequest) returns (UnassignDeliveryResponse);
  // Mark that a Delivery has been loaded into/onto an Inter-Hub Agent from the origin Hub
  rpc MarkLoaded(MarkLoadedRequest) returns (MarkLoadedResponse);
  // Mark that an Inter-Hub Agent has departed with the Delivery from the origin Hub
  rpc MarkDeparted(MarkDepartedRequest) returns (MarkDepartedResponse);
  // Mark that a Delivery has been unloaded from an Inter-Hub Agent at the destination Hub
  rpc MarkUnloaded(MarkUnloadedRequest) returns (MarkUnloadedResponse);
}

// Inter-Hub Agents move deliveries between Hubs
message InterHubAgent {
  // Unique ID (UUID) of the Agent
  string id = 1;
  // Name of the Agent
  string name = 2;
}

// Request to get available Inter-Hub Agents for a given Inter-Hub route
message GetAvailableAgentsRequest {
  // Unique ID (UUID) of the origin Hub
  string from_hub_id = 1;
  // Unique ID (UUID) of the destination Hub
  string to_hub_id = 2;
}

// Response listing available Inter-Hub Agents for a given Inter-Hub route
message GetAvailableAgentsResponse {
  // List of Inter-Hub Agents
  repeated InterHubAgent agents = 1;
}

// Request to assign an Inter-Hub Agent to a Delivery
message AssignDeliveryRequest {
  // Integer ID of the Delivery being assigned to
  int64 delivery_id = 1;
  // Unique ID (UUID) of the Agent being assigned
  string agent_id = 2;
}

// Response from attempt to assign an Inter-Hub Agent to a Delivery
message  AssignDeliveryResponse {
  // Success/failure indicator for the assignment attempt
  bool success = 1;
  // Error description, only populated if success = false
  string error = 2;
}

// Request to unassign an Inter-Hub Agent from a Delivery
message UnassignDeliveryRequest {
  // Integer ID of the Delivery being unassigned from an Inter-Hub Agent
  int64 delivery_id = 1;
}

// Response from attempt to unassign an Inter-Hub Agent from a Delivery
message  UnassignDeliveryResponse {
  // Success/failure indicator for the assignment attempt
  bool success = 1;
  // Error description, only populated if success = false
  string error = 2;
}

// Request to mark that a Delivery has been loaded into/onto an Inter-Hub Agent from the origin Hub
message MarkLoadedRequest {
  // Integer ID of the Delivery being acted on
  int64 delivery_id = 1;
}

// Response from attempt to mark that a Delivery has been loaded into/onto an Inter-Hub Agent from the origin Hub
message  MarkLoadedResponse {
  // Success/failure indicator for the assignment attempt
  bool success = 1;
  // Error description, only populated if success = false
  string error = 2;
}

// Request to mark that an Inter-Hub Agent has departed with the Delivery from the origin Hub
message MarkDepartedRequest {
  // Integer ID of the Delivery being acted on
  int64 delivery_id = 1;
}

// Response from attempt to mark that an Inter-Hub Agent has departed with the Delivery from the origin Hub
message  MarkDepartedResponse {
  // Success/failure indicator for the assignment attempt
  bool success = 1;
  // Error description, only populated if success = false
  string error = 2;
}

// Request to mark that a Delivery has been unloaded from an Inter-Hub Agent at the destination Hub
message MarkUnloadedRequest {
  // Integer ID of the Delivery being acted on
  int64 delivery_id = 1;
}

// Response from attempt to mark that a Delivery has been unloaded from an Inter-Hub Agent at the destination Hub
message  MarkUnloadedResponse {
  // Success/failure indicator for the assignment attempt
  bool success = 1;
  // Error description, only populated if success = false
  string error = 2;
}

// Generic Response structure for "Actions" (i.e. simple mutations) where all the caller cares about is success/failure and why the Action failed
message ActionResponse {
  // Success/failure indicator for the Action. true = success, false = failure
  bool success = 1;
  // Error description, only populated if success = false
  string error = 2;
}
