syntax = "proto3";

package risk_core.v1.events.v1;

import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

// RiskCoreCheckpointFactEvent, encapsulates all necessary
// fact information needed by a checkpoint
message RiskCoreCheckpointFactEvent {
  // evaluation_id is the unique uuid for each evaluation request
  string evaluation_id = 1;
  // checkpoint is the checkpoint name
  string checkpoint = 2;
  // mode is the live or shadow mode for the evaluation
  // for this event we have LIVE and SHADOW together
  string mode = 3;

  // FactResult, essentially all the rules' results and this rule's dependent
  // facts' results value
  message FactResult {
    // output, fact or rule's output
    google.protobuf.Value output = 1;
    // details, output detail map to a protobuf struct
    google.protobuf.Struct details = 2;

    // error, evaluation error
    string error = 3;

    // rule or fact dependencies
    repeated string dependencies = 4;

    // total execution of each rule or fact
    google.protobuf.Int64Value execution_ms = 5;

    // How many ms since the start of the checkpoint evaluation did this fact start to run
    google.protobuf.Int64Value start_at_ms = 6;
  }

  // reserve couple of fields in case we need other other
  // parameters such as entity_id or extra_propers later

  // builtin_results, this may not be needed in patronus
  string builtin_results = 31; // json serialization of map<string, FactResult>
  // fact_results, checkpoint's all fact results
  string fact_results = 32; // json serialization of map<string, FactResult>
}
