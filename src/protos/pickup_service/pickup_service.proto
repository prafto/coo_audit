syntax = "proto3";
package pickup_service;

import "google/protobuf/wrappers.proto";
import "google/protobuf/timestamp.proto";

option java_multiple_files = true;
option java_generic_services = true;

option java_package = "com.doordash.rpc.pickup_service";
option go_package = "pickup_service";

service PickupService {
    rpc CloseOrder(CloseOrderRequest) returns (CloseOrderResponse);
    rpc GeoFenceCheckIn (GeoFenceRequest) returns (GeoFenceResponse);
    rpc GeoFenceCheckOut (GeoFenceRequest) returns (GeoFenceResponse);
    rpc GetDistrictAndSubmarket(GetDistrictAndSubmarketRequest) returns (GetDistrictAndSubmarketResponse);
    rpc GetGeoFenceCheckedInTime (GetGeoFenceCheckedInTimeRequest) returns (GetGeoFenceCheckedInTimeResponse);
    rpc MerchantEligibleToOnboardToPickupViaSelfServe(MerchantEligibleToOnboardToPickupViaSelfServeRequest) returns (MerchantEligibleToOnboardToPickupViaSelfServeResponse);
    rpc OnboardMerchantToPickup(OnboardMerchantToPickupRequest) returns (OnboardMerchantToPickupResponse);
    rpc OrderCheckIn(OrderCheckInRequest) returns (OrderCheckInResponse);
}

message OrderCheckInRequest {
    // Deprecated; delivery_id of the order we are checking in
    int64 delivery_id = 1;
    // (Deprecated, use consumer_id instead)
    // user_id of the user that requested the check in, should match the delivery creator_id
    int64 user_id = 2;
    // Required; consumer_id of the user that requested the check in, should match the consumer_id
    // of the Delivery's creator object. Taking this field instead of user_id because web doesn't
    // have the user_id in its context
    string consumer_id = 3;
    // Required; uuid of the delivery object
    string delivery_uuid = 4;
}

message OrderCheckInResponse {
    bool success = 1;
}

message GeoFenceRequest {
    // Deprecated;
    int64 delivery_id = 1;
    google.protobuf.Timestamp updated_at = 2;
    int64 user_id = 3;
    // Optional; if true, we will check the customer into the restaurant, which releases their order
    // to the POS terminal for preparation.
    bool should_checkin = 4;
    // Required; uuid of the delivery object
    string delivery_uuid = 5;
}

message GeoFenceResponse {
    bool success = 1;
}

message GetGeoFenceCheckedInTimeRequest {
    repeated int64 delivery_ids = 1;
}

message GetGeoFenceCheckedInTimeResponse {
    repeated CheckedInTimeStatus checked_in_time_statuses = 1;
}

message CheckedInTimeStatus {
    int64 delivery_id = 1;
    google.protobuf.Timestamp earliest_checkin_at = 2;
}

message CloseOrderRequest {
    // Deprecated;
    int64 delivery_id = 1;
    int64 user_id = 2;
    // Required; uuid of the delivery object
    string delivery_uuid = 3;
}

message CloseOrderResponseCalloutInfo {
    string title = 1;
    string description = 2;
}

message CloseOrderResponse {
    bool success = 1;
    CloseOrderResponseCalloutInfo callout_info = 2;
}

message GetDistrictAndSubmarketRequest {
    google.protobuf.DoubleValue lat = 1;
    google.protobuf.DoubleValue lng = 2;
}

message GetDistrictAndSubmarketResponse {
    google.protobuf.Int64Value district_id = 1;
    google.protobuf.BoolValue is_district_active = 2;
    google.protobuf.Int64Value submarket_id = 3;
    google.protobuf.BoolValue is_submarket_active = 4;
}

// user_id will be in the metadata with a key of DD-OBO-User-ID
message OnboardMerchantToPickupRequest {
    string store_id = 1;
    double commission_rate = 2;
    string contract_download_url = 3;
}

message OnboardMerchantToPickupResponse {
    bool success = 1;
    google.protobuf.StringValue error_reason = 2;
}

// Use cases for the MerchantEligibleToOnboardToPickupViaSelfServe call
enum MerchantPortalPickupOnboardingUseCase {
    // Merchant onboarding to pickup
    MERCHANT_PORTAL_PICKUP_ONBOARDING_USE_CASE_UNSPECIFIED = 0;
    // Merchant onboarding to pickup
    MERCHANT_PORTAL_PICKUP_ONBOARDING_USE_CASE_ONBOARDING = 1;
    // Merchant switching a pickup commission rate plan
    MERCHANT_PORTAL_PICKUP_ONBOARDING_USE_CASE_PLAN_SWITCH = 2;
}

message MerchantEligibleToOnboardToPickupViaSelfServeRequest {
    string store_id = 1;
    MerchantPortalPickupOnboardingUseCase use_case = 2;
}

message MerchantEligibleToOnboardToPickupViaSelfServeResponse {
    bool is_eligible = 1;
}
