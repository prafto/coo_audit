syntax = "proto3";

package decisionsystems.dvcrud;

import "google/protobuf/timestamp.proto";

option go_package = "internal/model";

// DynamicValueConfiguration represents the complete configuration for a dynamic value
message DynamicValueConfiguration {
  // Dynamic value details
  Details details = 1;

  // Derived details containing computed or inferred information about the dynamic value
  DerivedDetails derived_details = 2;

  // Dynamic value settings
  Settings settings = 3;

  // Evaluation settings
  Evaluation evaluation = 4;

  // Dynamic value variants
  Variants variants = 5;

  // Dynamic value segments
  repeated Segment segments = 6;

  // Dynamic value distributions
  repeated Distribution distributions = 7;
}

// The type of value to be returned
enum ValueType {
  // Unspecified
  VALUE_TYPE_UNSPECIFIED = 0;

  // Long
  VALUE_TYPE_LONG = 1;

  // Double
  VALUE_TYPE_DOUBLE = 2;

  // String
  VALUE_TYPE_STRING = 3;

  // Bool
  VALUE_TYPE_BOOL = 4;
}

// The type of value to be returned
enum ValueFormat {
  // Unspecified
  VALUE_FORMAT_UNSPECIFIED = 0;

  // None
  VALUE_FORMAT_NONE = 1;

  // JSON
  VALUE_FORMAT_JSON = 2;

  // YAML
  VALUE_FORMAT_YAML = 3;
}

// Lifecycle state enum
enum LifecycleState {
  // Unspecified
  LIFECYCLE_STATE_UNSPECIFIED = 0;

  // Awaiting Ramp
  LIFECYCLE_STATE_AWAITING_RAMP = 1;

  // Ramping
  LIFECYCLE_STATE_RAMPING = 2;

  // Running
  LIFECYCLE_STATE_RUNNING = 3;
}

// Segment Type
enum SegmentType {
  // Unspecified
  SEGMENT_TYPE_UNSPECIFIED = 0;

  // Development
  SEGMENT_TYPE_DEVELOPMENT = 1;

  // Experiment
  SEGMENT_TYPE_EXPERIMENT = 2;

  // Release
  SEGMENT_TYPE_RELEASE = 3;
}

// Describes the owner of the dynamic value
message Ownership {
  // Owner Name
  string owner_name = 1;

  // Owner Email
  string owner_email = 2;
}

// Dynamic value details
message Details {
  // Name
  string name = 1;

  // Value Type
  ValueType value_type = 2;

  // Description
  string description = 3;

  // When is the experiment starting?
  google.protobuf.Timestamp start_at = 6;

  // When is the experiment finishing?
  google.protobuf.Timestamp finish_at = 7;

  // Owner
  Ownership ownership = 8;

  // Value Format
  ValueFormat value_format = 9;

  // Value Format Schema
  string value_format_schema = 10;
}

// DerivedDetails contains computed or inferred information about a dynamic value configuration
message DerivedDetails {
  // Auto incrementing revision
  int64 revision = 1;

  // State
  LifecycleState state = 2;

  // When was the experiment created?
  google.protobuf.Timestamp created_at = 3;

  // When was the experiment updated?
  google.protobuf.Timestamp updated_at = 4;

  // Edit revision
  int64 edit_revision = 5;
}

// Matches properties with configuration rules
message Variants {
  // Variant Type
  oneof variant_type {
    // Int Variants
    VariantInts ints = 1;

    // Double Variants
    VariantDoubles doubles = 2;

    // String Variants
    VariantStrings strings = 3;

    // Bool Variants
    VariantBools bools = 4;
  }
}

// Variant Ints
message VariantInts {
  // Variants
  repeated VariantInt variants = 1;
}

// Variant Double
message VariantDoubles {
  // Variants
  repeated VariantDouble variants = 1;
}

// Variant Strings
message VariantStrings {
  // Variants
  repeated VariantString variants = 1;
}

// Variant Bool
message VariantBools {
  // Variants
  repeated VariantBool variants = 1;
}

// Variant Int
message VariantInt {
  // Name
  string name = 1;

  // Value
  int64 value = 2;
}

// Variant Double
message VariantDouble {
  // Name
  string name = 1;

  // Value
  double value = 2;
}

// Variant String
message VariantString {
  // Name
  string name = 1;

  // Value
  string value = 2;
}

// Variant Bool
message VariantBool {
  // Name
  string name = 1;

  // Value
  bool value = 2;
}

// Distribution
message Distribution {
  // Name
  string name = 1;

  // Allocations
  repeated Allocation allocations = 2;
}

// Allocation
message Allocation {
  // Variant name
  string variant = 1;

  // Allocation
  uint32 allocation = 2;
}

// Salt. Adds randomization to evaluation outcomes. DV name expected to be part of the salt
message Salt {
  // Rollout randomization "<dv_name>_rollout_<randomization_key>"
  string rollout_salt = 1;

  // Variant randomization "<dv_name>_variant_<randomization_key>"
  string variant_salt = 2;
}

// Segment
message Segment {
  // Name
  string name = 1;

  // Type
  SegmentType type = 2;

  // Is disabled?
  bool is_disabled = 3;

  // Distribution name for the fallback
  string fallback_distribution = 4;

  // Distribution name for the rollout
  string rollout_distribution = 5;

  // Rollout fraction [0, 1]
  double rollout_fraction = 6;

  // Optional salt override. If not set will use the overall DV salt
  Salt salt_override = 7;

  // Matcher
  Matcher matcher = 8;
}

// Dynamic value settings
message Settings {
  // Logging settings
  LoggingSettings logging = 1;
}

// Logging settings
message LoggingSettings {
  // Enable exposure logs
  bool enable_exposure_logs = 1;

  // Enable reference logs
  bool enable_reference_logs = 2;
}

// Dynamic value randomization
message Evaluation {
  // Randomization key
  string randomization_key = 1;

  // Overall salts to be applied to all segments
  Salt salt = 2;

  // Which variant to return if randomization key is missing or no segment is matched. Client Side Default expected
  string fallback = 3;

  // What type of randomization
  Randomizer randomizer = 4;
}

// Controls how the DV is randomized
message Randomizer {
  // Randomizer Type
  oneof randomizer_type {
    // AB
    ABRandomizer ab = 1;

    // Switchback
    SwitchbackRandomizer switchback = 2;
  }
}

// AB Randomizer
message ABRandomizer {}

// Switchback Randomizer
message SwitchbackRandomizer {
  // Enables pairing
  bool enable_pairing = 1;

  // Enables mirroring
  bool enable_mirroring = 2;

  // Enables copying
  bool enable_copying = 3;

  // The number of seconds to keep stable randomization
  int32 window = 4;

  // The number of windows before mirroring/copying
  int32 mirror_period = 5;

  // An offset so that time windows don't always occur at the top of the hour
  int64 time_offset = 6;
}

// Matches properties with configuration rules
message Matcher {
  // Matcher Type
  oneof matcher_type {
    // All Matcher
    AllMatcher all = 1;

    // Any Matcher
    AnyMatcher any = 2;

    // Collection Long Matcher
    CollectionLongMatcher collection_long = 3;

    // Collection Double Matcher
    CollectionDoubleMatcher collection_double = 4;

    // Collection String Matcher
    CollectionStringMatcher collection_string = 5;

    // Collection Reference Matcher
    CollectionReferenceMatcher collection_reference = 6;

    // Collection Version Matcher
    CollectionVersionMatcher collection_version = 7;

    // Scalar Bool Matcher
    ScalarBoolMatcher scalar_bool = 8;

    // Scalar Double Matcher
    ScalarDoubleMatcher scalar_double = 9;

    // Scalar Long Matcher
    ScalarLongMatcher scalar_long = 10;

    // Scalar String Matcher
    ScalarStringMatcher scalar_string = 11;

    // Scalar Reference Matcher
    ScalarReferenceMatcher scalar_reference = 12;

    // Scalar Version Matcher
    ScalarVersionMatcher scalar_version = 13;

    // Not Matcher
    NotMatcher not = 14;

    // Fixed Matcher
    FixedMatcher fixed = 15;
  }
}

// Scalar Operator
enum ScalarOperator {
  // Type unspecified
  SCALAR_OPERATOR_UNSPECIFIED = 0;

  // Equals
  SCALAR_OPERATOR_EQUALS = 1;

  // Not Equals
  SCALAR_OPERATOR_NOT_EQUALS = 2;

  // Not Equals
  SCALAR_OPERATOR_GREATER_THAN = 3;

  // Not Equals
  SCALAR_OPERATOR_GREATER_THAN_EQUAL = 4;

  // Not Equals
  SCALAR_OPERATOR_LESS_THAN = 5;

  // Not Equals
  SCALAR_OPERATOR_LESS_THAN_EQUAL = 6;
}

// Collection Operator
enum CollectionOperator {
  // Type unspecified
  COLLECTION_OPERATOR_UNSPECIFIED = 0;

  // Contains
  COLLECTION_OPERATOR_CONTAINS = 1;

  // Not Contains
  COLLECTION_OPERATOR_NOT_CONTAINS = 2;
}

// All Matcher
message AllMatcher {
  // An array of matchers
  repeated Matcher matchers = 1;
}

// Any Matcher
message AnyMatcher {
  // An array of matchers
  repeated Matcher matchers = 1;
}

// Collection Double Matcher
message CollectionDoubleMatcher {
  // The property key
  string key = 1;

  // The operator
  CollectionOperator operator = 2;

  // The values
  repeated double values = 3;
}

// Collection Long Matcher
message CollectionLongMatcher {
  // The property key
  string key = 1;

  // The operator
  CollectionOperator operator = 2;

  // The values
  repeated int64 values = 3;
}

// Collection String Matcher
message CollectionStringMatcher {
  // The property key
  string key = 1;

  // The operator
  CollectionOperator operator = 2;

  // The values
  repeated string values = 3;
}

// Collection Reference Matcher
message CollectionReferenceMatcher {
  // The Dynamic Value to reference
  string dynamic_value = 1;

  // The operator
  CollectionOperator operator = 2;

  // The variants
  repeated string variants = 3;
}

// Collection Version Matcher
message CollectionVersionMatcher {
  // The property key
  string key = 1;

  // The operator
  CollectionOperator operator = 2;

  // The values
  repeated string values = 3;
}

// Scalar Bool Matcher
message ScalarBoolMatcher {
  // The property key
  string key = 1;

  // The operator
  ScalarOperator operator = 2;

  // The values
  bool value = 3;
}

// Scalar Double Matcher
message ScalarDoubleMatcher {
  // The property key
  string key = 1;

  // The operator
  ScalarOperator operator = 2;

  // The values
  double value = 3;
}

// Scalar Long Matcher
message ScalarLongMatcher {
  // The property key
  string key = 1;

  // The operator
  ScalarOperator operator = 2;

  // The values
  int64 value = 3;
}

// Scalar Reference Matcher
message ScalarReferenceMatcher {
  // The Dynamic Value to reference
  string dynamic_value = 1;

  // The operator
  ScalarOperator operator = 2;

  // The variant
  string variant = 3;
}

// Scalar String Matcher
message ScalarStringMatcher {
  // The property key
  string key = 1;

  // The operator
  ScalarOperator operator = 2;

  // The values
  string value = 3;
}

// Scalar Version Matcher
message ScalarVersionMatcher {
  // The property key
  string key = 1;

  // The operator
  ScalarOperator operator = 2;

  // The values
  string value = 3;
}

// Not Matcher
message NotMatcher {
  // The matcher
  Matcher matcher = 1;
}

// Fixed Matcher
message FixedMatcher {
  // The value
  bool match = 1;
}
