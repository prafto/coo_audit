syntax = "proto3";

package dasher_onboarding.dasher_onboarding_checklist.v1;

import "common/service_client_config.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/wrappers.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.dasher_onboarding_checklist";

// Service for dasher onboarding checklist
service DasherOnboardingChecklistService {
  option (service_client.client_config).service_name = "dasher-onboarding";
  option (service_client.client_config).service_app = "web";

  // Get onboarding checklist
  rpc GetOnboardingChecklist(GetOnboardingChecklistRequest) returns (GetOnboardingChecklistResponse);

  // Get onboarding checklist v2
  rpc GetOnboardingChecklistV2(GetOnboardingChecklistV2Request) returns (GetOnboardingChecklistV2Response);

  // Update onboarding checklist
  rpc UpdateOnboardingChecklist(UpdateOnboardingChecklistRequest) returns (UpdateOnboardingChecklistResponse);

  // Conclude onboarding checklist
  rpc ConcludeOnboardingChecklist(ConcludeOnboardingChecklistRequest) returns (ConcludeOnboardingChecklistResponse);

  // Get compliance state
  rpc GetComplianceState(GetComplianceStateRequest) returns (GetComplianceStateResponse);

  // Get onboarding steps
  rpc GetChecklistSteps(GetChecklistStepsRequest) returns (GetChecklistStepsResponse);
}

// Request for GetOnboardingSteps API
message GetChecklistStepsRequest {
  // dasher_id (We should start relying more on this ID)
  string dasher_id = 1;
}

// Response for GetOnboardingSteps API
message GetChecklistStepsResponse {
  // The 2-letter ISO string of the country
  string country_shortname = 1;

  // Unique link of the applicant
  string applicant_unique_link = 2;

  // onboarding steps
  repeated ChecklistStep checklist_steps = 3;
}

// Onboarding step
message ChecklistStep {
  // is this step optional
  bool is_required = 1;

  // is this step complete
  bool is_step_complete = 2;

  // Step name
  string step_name = 3;
}

// Request of GetOnboardingChecklist
message GetOnboardingChecklistRequest {}

// Response of GetOnboardingChecklist
message GetOnboardingChecklistResponse {
  // Dasher onboarding context data
  DasherOnboardingContext dasher_onboarding_context = 1;

  // Template data for the checklist banner
  Banner banner = 2;

  // (Optional) Milliseconds until next poll
  google.protobuf.Int64Value next_poll_ms = 3;

  // (Optional) Action to take when receiving the response
  Action action = 4;

  // Whether to show the onboarding checklist
  bool is_onboarding_checklist_needed = 5;

  // Whether to enable dashing or not, only effective when is_onboarding_checklist_needed is true
  bool is_dashing_enabled = 6;
}

// Request of GetOnboardingChecklistV2
message GetOnboardingChecklistV2Request {
  // User id, set by BFF or injected by UG
  google.protobuf.StringValue user_id = 1;
}

// Response of GetOnboardingChecklistV2
message GetOnboardingChecklistV2Response {
  // Dasher onboarding context data
  DasherOnboardingContext dasher_onboarding_context = 1;

  // Whether checklist is completed
  bool is_completed = 2;

  // List of checklist items
  repeated ChecklistItem checklist = 3;

  // Data for SDUI
  SDUIData sdui_data = 4;
}

// Request of UpdateOnboardingChecklist
message UpdateOnboardingChecklistRequest {
  // User id, set by BFF or injected by UG
  google.protobuf.StringValue user_id = 1;

  // List of checklist input
  repeated ChecklistInput checklist_input = 2;
}

// Response of UpdateOnboardingChecklist
message UpdateOnboardingChecklistResponse {}

// Request of ConcludeOnboardingChecklist
message ConcludeOnboardingChecklistRequest {
  // User id, set by BFF or injected by UG
  google.protobuf.StringValue user_id = 1;
}

// Response of ConcludeOnboardingChecklist
message ConcludeOnboardingChecklistResponse {}

// Request of GetComplianceState
message GetComplianceStateRequest {
  // User id, set by BFF or injected by UG
  google.protobuf.StringValue user_id = 1;
}

// Response of GetComplianceState
message GetComplianceStateResponse {
  // Compliance state
  ComplianceState compliance_state = 1;

  // Data for SDUI
  SDUIData sdui_data = 2;
}

// Dasher onboarding context data
message DasherOnboardingContext {
  // Unique link of the dasher applicant
  string unique_link = 1;

  // Two-letter ISO country code
  string country_shortname = 2;
}

// Checklist item
message ChecklistItem {
  // Checklist item type
  ChecklistItemType type = 1;

  // Is required
  bool is_required = 2;

  // Is completed
  bool is_completed = 3;

  // Data for SDUI
  SDUIData sdui_data = 4;

  // Mark checklist item as completed when triggering the item action
  bool mark_as_completed_on_trigger = 5;
}

// Checklist item type
enum ChecklistItemType {
  // Unspecified
  CHECKLIST_ITEM_TYPE_UNSPECIFIED = 0;
  // Food safety course
  CHECKLIST_ITEM_TYPE_FOOD_SAFETY_COURSE = 1;

  reserved 2;
  reserved "CHECKLIST_ITEM_TYPE_DEMO_ORDER";

  // Payout setup
  CHECKLIST_ITEM_TYPE_PAYOUT_SETUP = 3;
  // Welcome gift
  CHECKLIST_ITEM_TYPE_WELCOME_GIFT = 4;
  // New dasher guide
  CHECKLIST_ITEM_TYPE_NEW_DASHER_GUIDE = 5;
}

// Checklist input
message ChecklistInput {
  // Type of the checklist item
  ChecklistItemType checklist_item_type = 1;

  // Data
  ChecklistInputData data = 2;
}

// Checklist input data
message ChecklistInputData {
  // New checklist item status
  ChecklistItemStatus new_status = 1;

  // Welcome gift input data
  WelcomeGiftInputData welcome_gift_input_data = 2;
}

// Checklist item status
enum ChecklistItemStatus {
  // Unspecified
  CHECKLIST_ITEM_STATUS_UNSPECIFIED = 0;
  // Completed
  CHECKLIST_ITEM_STATUS_COMPLETED = 1;
  // Failed
  CHECKLIST_ITEM_STATUS_FAILED = 2;
  // Pending
  CHECKLIST_ITEM_STATUS_PENDING = 3;
}

// Welcome gift input data
message WelcomeGiftInputData {
  // Required; Mailing address
  MailingAddress mailing_address = 1;

  // Optional; Vest Size for PPE equipment such as S, M, L, XL, 2XL
  string vest_size = 2;

  // Optional; Option to pickup from closest store instead of having it delivered
  bool is_pickup = 3;
}

// Mailing address
message MailingAddress {
  // Required; full street address, e.g. 1 Yonge St.
  string street_address = 1;

  // Optional; such as unit number, e.g. Unit 405
  string subpremise = 2;

  // Required; city name
  string city = 3;

  // Required; province/state
  string province = 4;

  // Required; country
  string country = 5;

  // Required; postal code/zip code
  string postal_code = 6;
}

// Compliance state
enum ComplianceState {
  // Unspecified
  COMPLIANCE_STATE_UNSPECIFIED = 0;
  // Clear
  COMPLIANCE_STATE_CLEAR = 1;
  // Pending
  COMPLIANCE_STATE_PENDING = 2;
  // Blocked
  COMPLIANCE_STATE_BLOCKED = 3;
  // TIN soft failed
  COMPLIANCE_STATE_TIN_SOFT_FAILED = 4;
  // TIN hard failed
  COMPLIANCE_STATE_TIN_HARD_FAILED = 5;
  // SSN dedupe failed
  COMPLIANCE_STATE_SSN_DEDUPE_FAILED = 6;
  // BGC suspended
  COMPLIANCE_STATE_BGC_SUSPENDED = 7;
  // BGC dispute
  COMPLIANCE_STATE_BGC_DISPUTE = 8;
  // BGC pre AA
  COMPLIANCE_STATE_BGC_PRE_AA = 9;
  // BGC post AA
  COMPLIANCE_STATE_BGC_POST_AA = 10;
}

// Banner
message Banner {
  // Banner type
  BannerType banner_type = 1;

  // Header text
  string header = 2;

  // Body text, replace {time} placeholder with FE countdown timer
  string body = 3;

  // (Optional) Button data, show button if not null
  Button button = 4;

  // (Optional) Count down data, show countdown timer if not null
  Countdown count_down = 5;
}

// Banner type
enum BannerType {
  // Unspecified
  BANNER_TYPE_UNSPECIFIED = 0;
  // Success
  BANNER_TYPE_SUCCESS = 1;
  // Pending
  BANNER_TYPE_PENDING = 2;
  // Pending with countdown
  BANNER_TYPE_PENDING_COUNTDOWN = 3;
  // Needs attention
  BANNER_TYPE_NEEDS_ATTENTION = 4;
}

// Button
message Button {
  // Button text
  string text = 1;

  // Button action on click
  Action action = 2;

  // (Optional) Trailing Icon
  string trailing_icon = 3;
}

// Countdown
message Countdown {
  // Countdown total time in millisecond
  int64 total_time_ms = 1;

  // Countdown remaining time in millisecond
  int64 remaining_time_ms = 2;
}

// Action
message Action {
  // Action type
  ActionType type = 1;

  // (Optional) Action context, e.g. redirection url
  google.protobuf.Struct context = 2;

  reserved 3;
  reserved "mark_as_completed_on_trigger";
}

// Action type
enum ActionType {
  // Unspecified
  ACTION_TYPE_UNSPECIFIED = 0;
  // Navigate to internal webview
  ACTION_TYPE_NAVIGATE_INTERNAL = 1;
  // Navigate to external webview
  ACTION_TYPE_NAVIGATE_EXTERNAL = 2;
  // Navigate to native workflow
  ACTION_TYPE_NAVIGATE_NATIVE = 6;
  // Conclude onboarding checklist
  ACTION_TYPE_CONCLUDE_CHECKLIST = 7;

  // Deprecated fields
  reserved 3, 4, 5;
  reserved "ACTION_TYPE_TIN_RESUBMIT", "ACTION_TYPE_TIN_VERIFICATION_FAIL", "ACTION_TYPE_SSN_DEDUPE_FAIL";
}

// Tag
message Tag {
  // Leading icon
  string leading_icon = 1;

  // Type
  TagType type = 2;

  // Label
  string label = 3;
}

// Tag type
enum TagType {
  // Unspecified
  TAG_TYPE_UNSPECIFIED = 0;
  // Informational
  TAG_TYPE_INFORMATIONAL = 1;
  // Warning
  TAG_TYPE_WARNING = 2;
}

// SDUI data
message SDUIData {
  // Header
  string header = 1;

  // Sub Header
  string subheader = 2;

  // Body
  string body = 3;

  // Auto action
  Action auto_action = 4;

  reserved 5;
  reserved "manual_action";

  // Milliseconds until next poll
  google.protobuf.Int64Value next_poll_ms = 6;

  // Button
  Button button = 7;

  // Banner
  Banner banner = 8;

  // Tags
  repeated Tag tags = 9;

  // Manual action
  Action action = 10;
}
