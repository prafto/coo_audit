syntax = "proto3";

package dasher_onboarding.v1;

import "google/protobuf/wrappers.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.dasher_onboarding";

// Applicant names
message ApplicantNamesData {
  // Required; user's first name
  string first_name = 1;

  // Required; user's last name
  string last_name = 2;

  // Optional; user's last name
  string middle_name = 3;

  // Optional; user's phonetic first name
  string phonetic_first_name = 4;

  // Optional; user's phonetic last name
  string phonetic_last_name = 5;

  // Optional; user's name type, e.g. Kana
  string name_type = 6;
}

// Vehicle details
message VehicleDetailsData {
  // Required; vehicle type ID
  int32 vehicle_type = 1;
  // Optional; used in US but not other countries
  bool has_insurance = 2;
}

// Waitlist Dasher Action Data
message WaitlistDasherActionData {
  // if Dx clicked continue (default is false)
  bool clicked_continue = 1;
}

// Birthday input
message BirthdayInputData {
  // Required; user's date of birth, in the format of yyyy-MM-dd, e.g. 2010-12-31 and 2020-03-02
  string dob = 1;
}

// Mailing address
message MailingAddressData {
  // Required; full street address, e.g. 1 Yonge St.
  string street_address = 1;

  // Optional; such as unit number, e.g. Unit 405
  string subpremise = 2;

  // Required; city name
  string city = 3;

  // Required; province/state
  string province = 4;

  // Required; country
  string country = 5;

  // Required; postal code/zip code
  string postal_code = 6;

  // Optional; Vest Size for PPE equipment such as S, M, L, XL, 2XL
  string size = 7;

  // Optional; To be removed once experiment is at 100%
  bool unified_address_collection_experiment = 8;

  // Optional; Option to pickup kit from closest store instead of having it delivered
  bool pickup_kit = 9;
}

// Address
message AddressData {
  // Basic address components
  google.protobuf.StringValue street = 1;

  // unit/apartment number
  google.protobuf.StringValue subpremise = 2;

  // city
  google.protobuf.StringValue city = 3;

  // state/province
  google.protobuf.StringValue state = 4;

  // postal code / zip code
  google.protobuf.StringValue postal_code = 5;

  // country
  google.protobuf.StringValue country_code = 6;

  // Full formatted address
  google.protobuf.StringValue formatted_address = 7;
}

// Create payment account
message CreatePaymentAccountData {}

// Checkr Canada background check submit
message CheckrCanadaBgcSubmitData {}

// Skip bank account
message SkipBankAccountData {}

// Complete safety course
message CompleteSafetyCourseData {}

// NCC background check submit
message NccBgcSubmitData {}

// Promotions
message PromotionsData {
  // Optional; earnings goal for Dasher in cents
  int32 earnings_goal = 1;
}

// KYC - personal identifier number
message PersonalIdNumberData {
  // Required: id number tokenized (ssn token)
  string id_number = 1;
  // Optional: first name
  google.protobuf.StringValue first_name = 2;
  // Optional: last name
  google.protobuf.StringValue last_name = 3;
}

// cupcake - driver's license data
message DriversLicenseData {
  // DL number tokenized
  string dl_number = 1;
}

// KYC - government photo information
message GovernmentPhotoData {
  // file token of stripe image
  string image = 1;
  // true if is a back image - set in bff based on web request
  bool is_back_image = 2;
  // true if this id is the additional_document sent to stripe
  bool is_additional_document = 3;
}

// KYC - skip kyc data (set only when is_dismissable is true)
message SkipKycData {}

// Phone Verification
message VerifyPhoneData {
  // An optional field that is used if we want to update the applicants phone number
  string phone_number = 1;
}

// welcome kit data - skip welcome kit data (set only when is_dismissable is true)
message SkipWelcomeKitData {}

// data for Canada Webhook
message CanadaWebhookData {
  // canada report webhook string
  string metadata = 1;
}

// data for idv status update
message IdentityVerificationData {
  // inquiry id
  string identity_inquiry_id = 1;
  // identity verification status
  IdentityVerificationStatus identity_verification_status = 2;
  // screen notes for applicant - to be appended to current value
  string screen_notes = 3;
}

// data for bgc submit
message BackgroundCheckData {
  // Driver's license state
  string dl_state = 1;
  // Driver's license number - tokenized
  string dl_number = 2;
  // applicant date of birth
  string dob = 4;
  // applicant ssn - tokenized
  string ssn = 5;
  // applicant requested copy of bgc report
  bool request_copy_of_bgc_report = 6;
}

// input data for TIN resubmit
message TinResubmitInputData {
  // applicant first name
  string first_name = 1;
  // applicant last name
  string last_name = 2;
  // applicant ssn
  string ssn = 3;
  // applicant middle name
  string middle_name = 4;
  // applicant middle name not exists
  bool no_middle_name = 5;
}

// Status for identity verification in dasher onboarding
enum IdentityVerificationStatus {
  // empty status
  IDENTITY_VERIFICATION_STATUS_UNSPECIFIED = 0;
  // Complete status
  IDENTITY_VERIFICATION_STATUS_COMPLETED = 1;
  //Fail status
  IDENTITY_VERIFICATION_STATUS_FAILED = 2;
  //Started status
  IDENTITY_VERIFICATION_STATUS_STARTED = 3;
  //Created status
  IDENTITY_VERIFICATION_STATUS_CREATED = 4;
  //Needs Review status
  IDENTITY_VERIFICATION_STATUS_NEEDS_REVIEW = 5;
  //APPROVED status
  IDENTITY_VERIFICATION_STATUS_APPROVED = 6;
  //DECLINED status
  IDENTITY_VERIFICATION_STATUS_DECLINED = 7;
}
