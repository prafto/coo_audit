syntax = "proto3";

package lattice_config_manager.v1;

import "common/service_client_config.proto";
import "doordash.api/annotations.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option go_package = "github.com/doordash/services-protobuf/generated/lattice_config_manager/v1";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "lattice_config_manager.v1";

/*
   Document Store Service is a service of the Lattice Platform that offers basic document style versioned storage of JSON
*/
service DocumentStoreService {
  option (doordash.api.service) = {
    name: "lattice-config-manager"
    url: "lattice-config-manager-api.service.prod.ddsd"
    port: 50051
    name_spaces: ["lattice-config-manager"]
    api_key_name: "LATTICE_CONFIG_MANAGER_UG_API_KEY"
    owner: {
      id: "lattice-config-manager"
      name: "lattice-config-manager"
      slack_channel: "#ask-lattice-platform-eng"
      email_alias: "team-customer-experience-platform@doordash.com"
    }
    target_products: [INTERNAL]
  };
  option (service_client.client_config).service_name = "lattice-config-manager";
  option (service_client.client_config).service_app = "api";
  option (service_client.client_config).response_attempt_timeout_millis = 2000;

  // Puts a list of documents into the store. Returns receipt.
  rpc PutDocuments(PutDocumentsRequest) returns (PutDocumentsResponse) {}
  // Gets a single document. Tags are included on documents in response.
  rpc GetDocument(GetDocumentRequest) returns (GetDocumentResponse) {}
  // Lists documents. Tags not included on documents in response.
  rpc ListDocuments(ListDocumentsRequest) returns (ListDocumentsResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 2000;
    option (google.api.http) = {get: "/lattice-config-manager/v1/documents"};
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_USER]
      target_products: [INTERNAL]
    };
  }
  // Lists all the versions of a document. Tags not included on documents in response.
  rpc ListDocumentVersions(ListDocumentVersionsRequest) returns (ListDocumentVersionsResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 2000;
    option (google.api.http) = {get: "/lattice-config-manager/v1/documents/{document_uuid}/versions"};
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_USER]
      target_products: [INTERNAL]
    };
  }
  // Tags a document version marking it as an active version.
  rpc TagDocument(TagDocumentRequest) returns (TagDocumentResponse) {}
  // Removes a tag from a document. Noop if tag does not exist.
  rpc RemoveTag(RemoveTagRequest) returns (RemoveTagResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 2000;
    option (google.api.http) = {delete: "/lattice-config-manager/v1/documents/{document_uuid}/tags"};
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_USER]
      target_products: [INTERNAL]
    };
  }
  // Lists all the active tags on a document.
  rpc ListActiveTags(ListActiveTagsRequest) returns (ListActiveTagsResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 2000;
    option (google.api.http) = {get: "/lattice-config-manager/v1/documents/{document_uuid}/tags"};
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_USER]
      target_products: [INTERNAL]
    };
  }
  // Lists the changelogs for a specific tag on a document.
  rpc ListTagEvents(ListTagEventsRequest) returns (ListTagEventsResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 2000;
    option (google.api.http) = {get: "/lattice-config-manager/v1/documents/{document_uuid}/tags/events"};
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_USER]
      target_products: [INTERNAL]
    };
  }
}

// Document
message Document {
  // Identifier for a document. Versions are within the scope of a document_uuid.
  // i.e. (document_uuid, version) uniquely identifies a document instance
  google.protobuf.StringValue document_uuid = 1;
  // Document type
  google.protobuf.StringValue type = 2;
  // Namespace
  google.protobuf.StringValue namespace = 3;
  // Version
  google.protobuf.Int64Value version = 4;
  // Optional -- name of the document
  google.protobuf.StringValue name = 5;
  // JSON body
  google.protobuf.StringValue body_json = 6;
  // Tags
  repeated google.protobuf.StringValue tags = 7;
  // Created at
  google.protobuf.Timestamp created_at = 8;
  // Created by
  google.protobuf.StringValue created_by = 9;
  // Created by type (i.e. SYSTEM vs USER)
  google.protobuf.StringValue created_by_type = 10;
  // Metadata -- for indexable metadata reach out to the team for an index.
  google.protobuf.StringValue metadata_json = 11;
}

// Active tag
message ActiveTag {
  // Document UUID (e.g. document_uuid)
  google.protobuf.StringValue document_uuid = 1;
  // Version
  google.protobuf.Int64Value document_version = 2;
  // Tag
  google.protobuf.StringValue tag = 3;
  // Updated at
  google.protobuf.Timestamp updated_at = 4;
  // Updated by
  google.protobuf.StringValue updated_by = 5;
  // Updated by type (i.e. SYSTEM vs USER)
  google.protobuf.StringValue updated_by_type = 6;
}

// Tag event
message TagEvent {
  // Event UUID
  google.protobuf.StringValue tag_event_uuid = 1;
  // Document UUID
  google.protobuf.StringValue document_uuid = 2;
  // Document version
  google.protobuf.Int64Value document_version = 3;
  // Tag
  google.protobuf.StringValue tag = 4;
  // Operation (i.e. UPDATE, REVERT, NOOP, etc.)
  google.protobuf.StringValue operation = 5;
  // Created at
  google.protobuf.Timestamp created_at = 6;
  // Created by
  google.protobuf.StringValue created_by = 7;
  // Created by type (i.e. SYSTEM vs USER)
  google.protobuf.StringValue created_by_type = 8;
}

// Request message for putting documents into the store.
//  - document_uuid can be provided for initial insert of a document if there is no existing document with that uuid.
//  - Tags are not applied as part of the put document request.
//  - Service increments version automatically, will not use version if provided.
message PutDocumentsRequest {
  // List of documents for insertion.
  repeated Document documents = 1;
}

// Response message for putting documents into the store.
message PutDocumentsResponse {
  // Receipt for storing a document.
  message PutDocumentResponseReceipt {
    // document_uuid
    google.protobuf.StringValue document_uuid = 1;
    // Document version. Useful for seeing latest version when upserting.
    google.protobuf.Int64Value version = 2;
  }

  // Parallel to ordering of input document array on request.
  repeated PutDocumentResponseReceipt receipts = 1;
}

// Request message for getting a single document by its uuid.
//  - Tags are included on the document.
message GetDocumentRequest {
  // Document UUID
  google.protobuf.StringValue document_uuid = 1;
  // Optional -- Version
  google.protobuf.Int64Value version = 2;
  // Optional -- Tag
  google.protobuf.StringValue tag = 3;
}

// Response message for getting a document.
message GetDocumentResponse {
  // Document
  Document document = 1;
}

// - At least 1 parameter for namespace, type, or tag is required; and any combination can be used to query the store.
// - Results will be latest versions of the documents unless query contains "tag", in which case the document_version of the active_tag record is used.
// - Tags for a document are not fetched as part of ListDocuments.
//
// (namespace, tag) --> "Give me all the documents in this namespace with this tag."
// (type) --> "Give me the latest version of all documents with this type."
// (tag) --> "Give me all documents with this tag."
message ListDocumentsRequest {
  // Namespace
  google.protobuf.StringValue namespace = 1;
  // Document type
  google.protobuf.StringValue type = 2;
  // Active tag
  google.protobuf.StringValue tag = 3;
  // Optional -- Pagination token based on created_at timestamp.
  google.protobuf.Timestamp pagination_token = 4;
  // Optional -- Page size for pagination results. Defaults to full list.
  google.protobuf.Int32Value page_size = 5;
  // Optional -- Toggle for including body on response. Defaults to yes.
  google.protobuf.BoolValue include_body = 6;
}

// Response message for querying the store.
message ListDocumentsResponse {
  // List of documents returned in descending order by created_at.
  repeated Document documents = 1;
}

// Request message for listing all versions of a document.
message ListDocumentVersionsRequest {
  // Document UUID
  google.protobuf.StringValue document_uuid = 1;
  // Optional -- Pagination token based on created_at timestamp.
  google.protobuf.Timestamp pagination_token = 2;
  // Optional -- Page size for pagination results. Defaults to return full list.
  google.protobuf.Int32Value page_size = 3;
  // Optional -- Toggle for including body on response. Defaults to yes.
  google.protobuf.BoolValue include_body = 4;
}

// Response message for listing all versions of a document.
message ListDocumentVersionsResponse {
  // List of documents returned in descending order by created_at, which is implicitly the same as version.
  repeated Document documents = 1;
}

// Request message for tagging an document on a per-version level.
message TagDocumentRequest {
  // Document UUID
  google.protobuf.StringValue document_uuid = 1;
  // Version to tag
  google.protobuf.Int64Value version = 2;
  // Tag
  google.protobuf.StringValue tag = 3;
}

// Response message for tagging an document on a per-version level.
message TagDocumentResponse {
  // Response is empty
  google.protobuf.Empty empty = 1;
}

// Request message for removing a tag from a document. Noop if tag does not exist.
message RemoveTagRequest {
  // Document UUID
  google.protobuf.StringValue document_uuid = 1;
  // Tag
  google.protobuf.StringValue tag = 2;
}

// Response message for removing a tag from a document.
message RemoveTagResponse {
  // Response is empty
  reserved 1;
  reserved "empty";
}

// Request message for listing all the active tags on an document.
message ListActiveTagsRequest {
  // Document UUID
  google.protobuf.StringValue document_uuid = 1;
  // Optional -- document version
  google.protobuf.Int64Value document_version = 2;
  // Optional -- Pagination token based on updated_at timestamp.
  google.protobuf.Timestamp pagination_token = 3;
  // Optional -- Page size for pagination results. Defaults to return full list.
  google.protobuf.Int32Value page_size = 4;
}

// Response message for listing all the active tags on an document.
message ListActiveTagsResponse {
  // List of active tags returned in descending order by updated_at.
  repeated ActiveTag tags = 1;
}

// Request message for listing the change history of a specific tag on a document.
message ListTagEventsRequest {
  // Document UUID
  google.protobuf.StringValue document_uuid = 1;
  // Tag
  google.protobuf.StringValue tag = 2;
  // Optional -- Pagination token based on created_at timestamp.
  google.protobuf.Timestamp pagination_token = 3;
  // Optional -- Page size for pagination results. Defaults to return full list.
  google.protobuf.Int32Value page_size = 4;
}

// Response message for the event history of an active tag.
message ListTagEventsResponse {
  // List of tag events returned in descending order by created_at.
  repeated TagEvent events = 1;
}
