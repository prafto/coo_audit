syntax = "proto3";

package lattice_config_manager.v1;

import "common/service_client_config.proto";
import "doordash.api/annotations.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "lattice_config_manager/common_prompt_template_v1.proto";

option go_package = "github.com/doordash/services-protobuf/generated/lattice_config_manager/v1";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "lattice_config_manager.v1";

// PromptTemplateService is a service that allows users to create, update, get, and activate prompt_template.
service PromptTemplateService {
  option (doordash.api.service) = {
    name: "lattice-config-manager"
    url: "lattice-config-manager-api.service.prod.ddsd"
    port: 50051
    name_spaces: ["lattice-config-manager"]
    api_key_name: "LATTICE_CONFIG_MANAGER_UG_API_KEY"
    owner: {
      id: "lattice-config-manager"
      name: "lattice-config-manager"
      slack_channel: "#ask-lattice-platform-eng"
      email_alias: "team-customer-experience-platform@doordash.com"
    }
    target_products: [INTERNAL]
  };
  option (service_client.client_config).service_name = "lattice-config-manager";

  // Create prompt_template.
  rpc CreatePromptTemplate(CreatePromptTemplateRequest) returns (CreatePromptTemplateResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 2000;
    option (google.api.http) = {
      post: "/lattice-config-manager/v1/prompt_templates"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_USER]
      target_products: [INTERNAL]
    };
  }

  /**
     Update prompt_template.
     This API will throw not found error if the prompt_template is not found.
  */
  rpc UpdatePromptTemplate(UpdatePromptTemplateRequest) returns (UpdatePromptTemplateResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 2000;
    option (google.api.http) = {
      put: "/lattice-config-manager/v1/prompt_templates/{prompt_template_uuid}"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_USER]
      target_products: [INTERNAL]
    };
  }

  /**
     Get prompt_template.
     This API will throw not found error if the prompt_template is not found.
  */
  rpc GetPromptTemplate(GetPromptTemplateRequest) returns (GetPromptTemplateResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 2000;
    option (google.api.http) = {
      post: "/lattice-config-manager/v1/prompt_templates/filtered"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_USER]
      target_products: [INTERNAL]
    };
  }

  /**
      Activate prompt_template.
      This API will throw not found error if the prompt_template is not found.


     An active prompt_template is an instance of a specific prompt_template that is tagged.
     e.g. prompt_template_1 (V1), "production"

     Same prompt_template can have multiple active versions.
     e.g.  prompt_template_1 (V1), "experimental"
           prompt_template_1 (V1), "a_b_testing"

     However, tags are unique for a prompt_template. So below is NOT possible
     e.g.  prompt_template_1 (V1), "production"
           prompt_template_1 (V2), "production"

     When you try to activate a prompt_template with a tag that already exists, it will overwrite the existing one.
     In the above example, activating prompt_template_1 (V2), "production" will overwrite prompt_template_1 (V1), "production"

  */
  rpc ActivatePromptTemplate(ActivatePromptTemplateRequest) returns (ActivatePromptTemplateResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 2000;
    option (google.api.http) = {
      post: "/lattice-config-manager/v1/prompt_templates/{prompt_template_uuid}/{version}/activate"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_USER]
      target_products: [INTERNAL]
    };
  }

  /**
     Get active prompt_templates.
     This API will return all active prompt_templates in descending order by updated_at.
  */
  rpc GetActivePromptTemplates(GetActivePromptTemplatesRequest) returns (GetActivePromptTemplatesResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 2000;
    option (google.api.http) = {get: "/lattice-config-manager/v1/prompt_templates/active"};
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_USER]
      target_products: [INTERNAL]
    };
  }

  /**
     Get all versions of a prompt_template.
     This API will return all versions of a prompt_template in descending order by created_at.
  */
  rpc GetPromptTemplateVersions(GetPromptTemplateVersionsRequest) returns (GetPromptTemplateVersionsResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 2000;
    option (google.api.http) = {
      post: "/lattice-config-manager/v1/prompt_templates/{prompt_template_uuid}"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_USER]
      target_products: [INTERNAL]
    };
  }

  /**
     Get all prompt_templates.
     This API will return all prompt_templates in descending order by created_at.
  */
  rpc GetPromptTemplates(GetPromptTemplatesRequest) returns (GetPromptTemplatesResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 2000;
    option (google.api.http) = {get: "/lattice-config-manager/v1/prompt_templates"};
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_USER]
      target_products: [INTERNAL]
    };
  }
}

// Request to get prompt_templates.
message GetPromptTemplatesRequest {
  // Optional: tag to filter prompt_templates. If not provided, will return the latest version of the prompt_templates.
  google.protobuf.StringValue tag = 1;
  // Optional: Pagination token based on created_at timestamp.
  google.protobuf.Timestamp pagination_token = 2;
  // Optional: Page size for pagination results. Defaults to return full list.
  google.protobuf.Int32Value page_size = 3;
  /*
     Optional: Toggle for including body on response.
     Defaults to false, prompt_template.details models will be returned.
     If set to true, prompt_template.complete_prompt_template models will be returned.
  */
  google.protobuf.BoolValue include_body = 4;
}

// Response to get prompt_templates. Will have prompt_template.details models if include_body is set to false.
message GetPromptTemplatesResponse {
  // List of prompt_templates returned in descending order by created_at.
  repeated lattice_config_manager.v1.PromptTemplate prompt_templates = 1;
}

// Request message for listing all versions of a prompt_template.
message GetPromptTemplateVersionsRequest {
  // prompt_template_uuid
  google.protobuf.StringValue prompt_template_uuid = 1;
  // Optional: Pagination token based on created_at timestamp.
  google.protobuf.Timestamp pagination_token = 2;
  // Optional: Page size for pagination results. Defaults to return full list.
  google.protobuf.Int32Value page_size = 3;
  /*
     Optional: Toggle for including body on response.
     Defaults to false, prompt_template.details models will be returned.
     If set to true, prompt_template.complete_prompt_template models will be returned.
  */
  google.protobuf.BoolValue include_body = 4;
}

// Response message for listing all versions of a prompt_template.
message GetPromptTemplateVersionsResponse {
  // List of prompt_templates returned in descending order by created_at.
  repeated lattice_config_manager.v1.PromptTemplate prompt_templates = 1;
}

// Request to get active (tagged) instances of a prompt_template.
message GetActivePromptTemplatesRequest {
  // prompt_template_uuid
  google.protobuf.StringValue prompt_template_uuid = 1;
  // Optional -- Pagination token based on updated_at timestamp.
  google.protobuf.Timestamp pagination_token = 3;
  // Optional -- Page size for pagination results. Defaults to return full list.
  google.protobuf.Int32Value page_size = 4;
}

// Response to get active prompt_templates. Will have prompt_template.active_prompt_template models.
message GetActivePromptTemplatesResponse {
  // List of active prompt_templates returned in descending order by updated_at.
  repeated lattice_config_manager.v1.PromptTemplate prompt_templates = 1;
}

// Request to get prompt_template.
message GetPromptTemplateRequest {
  // Filter to get the prompt_template.
  oneof filter {
    // Filter to get the latest version of the prompt_template.
    GetPromptTemplateRequestLatest latest = 1;
    // Filter to get a specific version of the prompt_template.
    GetPromptTemplateRequestWithVersion version = 2;
    // Filter to get prompt_template with a specific tag.
    GetPromptTemplateRequestWithTag tag = 3;
  }
}

// Request to get the latest version of the prompt_template.
message GetPromptTemplateRequestLatest {
  // Uuid of the prompt_template
  google.protobuf.StringValue prompt_template_uuid = 1;
}

// Request to get a specific version of the prompt_template.
message GetPromptTemplateRequestWithVersion {
  // Uuid of the prompt_template.
  google.protobuf.StringValue prompt_template_uuid = 1;
  // Version of the prompt_template.
  google.protobuf.Int64Value version = 2;
}

// Request to get a specific tag of the prompt_template. This will query the active table.
message GetPromptTemplateRequestWithTag {
  // Uuid of the prompt_template.
  google.protobuf.StringValue prompt_template_uuid = 1;
  // Tag of the prompt_template.
  google.protobuf.StringValue tag = 2;
}

// Response to get prompt_template.
message GetPromptTemplateResponse {
  // prompt_template
  lattice_config_manager.v1.PromptTemplate prompt_template = 1;
}

// Request to create prompt_template.
message CreatePromptTemplateRequest {
  // prompt_template name.
  google.protobuf.StringValue name = 1;
  // prompt_template description.
  google.protobuf.StringValue description = 2;
  // Content of the prompt_template. see https://handlebarsjs.com/guide/partials.html#partial-blocks
  google.protobuf.StringValue content = 5;
  // Partials of the prompt_template.
  repeated lattice_config_manager.v1.Partial partials = 6;
}

// Response to create prompt_template.
message CreatePromptTemplateResponse {
  // prompt_template
  lattice_config_manager.v1.PromptTemplate prompt_template = 1;
}

// Request to update prompt_template.
message UpdatePromptTemplateRequest {
  // Uuid for this prompt_template.
  google.protobuf.StringValue prompt_template_uuid = 1;
  // Version of this prompt_template.
  google.protobuf.Int64Value version = 2;
  // Name of the prompt_template.
  google.protobuf.StringValue name = 3;
  // Description of the prompt_template.
  google.protobuf.StringValue description = 4;
  // Content of the prompt_template.
  google.protobuf.StringValue content = 5;
  // Partials of the prompt_template.
  repeated lattice_config_manager.v1.Partial partials = 6;
}

// Response to update prompt_template.
message UpdatePromptTemplateResponse {
  // prompt_template
  lattice_config_manager.v1.PromptTemplate prompt_template = 1;
}

// Request to activate prompt_template.
message ActivatePromptTemplateRequest {
  // Uuid for this prompt_template.
  google.protobuf.StringValue prompt_template_uuid = 1;
  // Version of this prompt_template.
  google.protobuf.Int64Value version = 2;
  // Tag to attach to this active prompt_template (e.g. production_a, production_b, experiment_ab).
  google.protobuf.StringValue tag = 3;
}

// Response to activate prompt_template.
message ActivatePromptTemplateResponse {
  // prompt_template
  lattice_config_manager.v1.PromptTemplate prompt_template = 1;
}
