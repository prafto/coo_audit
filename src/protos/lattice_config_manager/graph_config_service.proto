syntax = "proto3";

package lattice_config_manager.v1;

import "common/service_client_config.proto";
import "doordash.api/annotations.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "lattice_config_manager/common_graph_config_v1.proto";

option go_package = "github.com/doordash/services-protobuf/generated/lattice_config_manager/v1";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "lattice_config_manager.v1";

// GraphConfigService is a service that allows users to create, update, get, and activate graph_config.
service GraphConfigService {
  option (doordash.api.service) = {
    name: "lattice-config-manager"
    url: "lattice-config-manager-api.service.prod.ddsd"
    port: 50051
    name_spaces: ["lattice-config-manager"]
    api_key_name: "LATTICE_CONFIG_MANAGER_UG_API_KEY"
    owner: {
      id: "lattice-config-manager"
      name: "lattice-config-manager"
      slack_channel: "#ask-lattice-platform-eng"
      email_alias: "team-customer-experience-platform@doordash.com"
    }
    target_products: [INTERNAL]
  };
  option (service_client.client_config).service_name = "lattice-config-manager";

  // Create a graph_config.
  rpc CreateGraph(CreateGraphRequest) returns (CreateGraphResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 2000;
    option (google.api.http) = {
      post: "/lattice-config-manager/v1/graphs"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_USER]
      target_products: [INTERNAL]
    };
  }

  /**
     Update a graph_config.
     This API will throw not found error if the graph_config_uuid is not found.
  */
  rpc UpdateGraph(UpdateGraphRequest) returns (UpdateGraphResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 2000;
    option (google.api.http) = {
      put: "/lattice-config-manager/v1/graphs/{graph_config_uuid}"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_USER]
      target_products: [INTERNAL]
    };
  }

  /**
     Get a graph_config. This will always return a complete graph_config.
     This API will throw not found error if the graph_config_uuid is not found.
  */
  rpc GetGraph(GetGraphRequest) returns (GetGraphResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 2000;
    option (google.api.http) = {
      post: "/lattice-config-manager/v1/graphs/filtered"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_USER]
      target_products: [INTERNAL]
    };
  }

  /**
     Activate a graph_config.
     This API will throw not found error if the graph_config is not found.
  */
  rpc ActivateGraph(ActivateGraphRequest) returns (ActivateGraphResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 2000;
    option (google.api.http) = {
      post: "/lattice-config-manager/v1/graphs/{graph_config_uuid}/{version}/activate"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_USER]
      target_products: [INTERNAL]
    };
  }

  /**
     Upsert nodes in the graph.
     This API will throw not found error if the graph_config_uuid is not found.
     This API will always use the latest version of the graph_config and will generate a new version.
  */
  rpc UpsertNodes(UpsertNodesRequest) returns (UpsertNodesResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 2000;
    option (google.api.http) = {
      put: "/lattice-config-manager/v1/graphs/{graph_config_uuid}/nodes"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_USER]
      target_products: [INTERNAL]
    };
  }

  /**
     Upsert edges in the graph.
     This API will throw not found error if the graph_config_uuid is not found.
     This API will always use the latest version of the graph_config and will generate a new version.
  */
  rpc UpsertEdges(UpsertEdgesRequest) returns (UpsertEdgesResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 2000;
    option (google.api.http) = {
      put: "/lattice-config-manager/v1/graphs/{graph_config_uuid}/edges"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_USER]
      target_products: [INTERNAL]
    };
  }

  /**
     Delete a node in the graph.
     This API will throw not found error if the graph_config_uuid is not found.
     This API will always use the latest version of the graph_config and will generate a new version.
     If the node is not found, the call will be a 'noop'.
  */
  rpc DeleteNode(DeleteNodeRequest) returns (DeleteNodeResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 2000;
    option (google.api.http) = {delete: "/lattice-config-manager/v1/graphs/{graph_config_uuid}/nodes/{node_uuid}"};
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_USER]
      target_products: [INTERNAL]
    };
  }

  /**
     Delete an edge in the graph.
     This API will throw not found error if the graph_config_uuid is not found.
     This API will always use the latest version of the graph_config and will generate a new version.
     If the edge is not found, the call will be a 'noop'.
  */
  rpc DeleteEdge(DeleteEdgeRequest) returns (DeleteEdgeResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 2000;
    option (google.api.http) = {delete: "/lattice-config-manager/v1/graphs/{graph_config_uuid}/edges/{edge_name}"};
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_USER]
      target_products: [INTERNAL]
    };
  }

  /**
     Convert a graph type.
     This API will always use the latest version of the graph_config and will generate a new version.
     Converting a GENERIC type to other types is not recommended since other types may have very specific implementations that may break generic graphs.
     This API will throw not found error if the graph_config_uuid is not found.
  */
  rpc ConvertGraphType(ConvertGraphTypeRequest) returns (ConvertGraphTypeResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 2000;
    option (google.api.http) = {
      post: "/lattice-config-manager/v1/graphs/{graph_config_uuid}/convert_graph_type"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_USER]
      target_products: [INTERNAL]
    };
  }
}

/**
 - will be matched with edge name
 - if an edge can't be matched with its name, that edge will be added to the graph.
 - if an edge already exists, the edge will be updated with the new values.
*/
message UpsertEdgesRequest {
  // graph_config uuid
  google.protobuf.StringValue graph_config_uuid = 1;
  // The edges in the graph.
  repeated lattice_config_manager.v1.Edge edges = 2;
}

/**
   Response to upsert edges, returns the updated graph_config.
*/
message UpsertEdgesResponse {
  // graph_config
  lattice_config_manager.v1.GraphConfig graph_config = 1;
}

/**
 - will be matched by node_uuid
 - if a node can't be matched with its node_uuid, that node will be added to the graph.
 - if a node already exists, the node will be updated with the new values.
*/
message UpsertNodesRequest {
  // graph_config uuid
  google.protobuf.StringValue graph_config_uuid = 1;
  // The nodes in the graph.
  repeated lattice_config_manager.v1.Node nodes = 2;
}

/**
   Response to upsert nodes, returns the updated graph_config.
*/
message UpsertNodesResponse {
  // graph_config
  lattice_config_manager.v1.GraphConfig graph_config = 1;
}

// Deletes a node in the graph, will always use the latest version of the graph.
message DeleteNodeRequest {
  // graph_config uuid
  google.protobuf.StringValue graph_config_uuid = 1;
  // node_uuid
  google.protobuf.StringValue node_uuid = 2;
}

// Returns the graph_config after deleting the node.
message DeleteNodeResponse {
  // graph_config
  lattice_config_manager.v1.GraphConfig graph_config = 1;
}

// Deletes an edge in the graph, will always use the latest version of the graph.
message DeleteEdgeRequest {
  // graph_config uuid
  google.protobuf.StringValue graph_config_uuid = 1;
  // edge name
  google.protobuf.StringValue edge_name = 2;
}

// Returns the graph_config after deleting the edge.
message DeleteEdgeResponse {
  // graph_config
  lattice_config_manager.v1.GraphConfig graph_config = 1;
}

// Request to get a graph_config.
message GetGraphRequest {
  // Filter to get the graph_config.
  oneof filter {
    // Filter to get the latest version of the graph_config.
    GetGraphRequestLatest filter_latest = 1;
    // Filter to get a specific version of the graph_config.
    GetGraphRequestWithVersion filter_with_version = 2;
    // Filter to get graph_config with a specific tag.
    GetGraphRequestWithTag filter_with_tag = 3;
  }
  // When set to true, the service will not convert active_prompt_templates to complete_prompt_templates.
  google.protobuf.BoolValue disable_expanded_view = 4;
  // When set to true, the ui_config will be included on the response.
  google.protobuf.BoolValue should_fetch_ui_config = 5;
}

// Request to get the latest version of the graph_config.
message GetGraphRequestLatest {
  // Uuid of the graph_config.
  google.protobuf.StringValue graph_config_uuid = 1;
}

// Request to get a specific version of the graph_config.
message GetGraphRequestWithVersion {
  // Uuid of the graph_config.
  google.protobuf.StringValue graph_config_uuid = 1;
  // Version of the graph_config.
  google.protobuf.Int64Value version = 2;
}

// Request to get a specific tag of the graph_config. This will query the active table.
message GetGraphRequestWithTag {
  // Uuid of the graph_config.
  google.protobuf.StringValue graph_config_uuid = 1;
  // Tag of the graph_config.
  google.protobuf.StringValue tag = 2;
}

// Response to get graph_config.
message GetGraphResponse {
  // graph_config
  lattice_config_manager.v1.GraphConfig graph_config = 1;
}

// Request to create graph_config.
message CreateGraphRequest {
  // graph_config name.
  google.protobuf.StringValue name = 1;
  // graph_config description.
  google.protobuf.StringValue description = 2;
  // The root node of the graph. This is required for the Lattice Runner to work.
  google.protobuf.StringValue root_node_uuid = 3;
  // The nodes in the graph.
  repeated lattice_config_manager.v1.Node nodes = 4;
  // The Edges in the graph.
  repeated lattice_config_manager.v1.Edge edges = 5;
}

// Response to create graph_config.
message CreateGraphResponse {
  // graph_config
  lattice_config_manager.v1.GraphConfig graph_config = 1;
}

// Request to update graph_config.
message UpdateGraphRequest {
  // graph_config uuid
  google.protobuf.StringValue graph_config_uuid = 1;
  // graph_config name.
  google.protobuf.StringValue name = 2;
  // graph_config description.
  google.protobuf.StringValue description = 3;
  // The root node of the graph. This is required for the Lattice Runner to work.
  google.protobuf.StringValue root_node_uuid = 4;
  // The nodes in the graph.
  repeated lattice_config_manager.v1.Node nodes = 5;
  // The edges in the graph.
  repeated lattice_config_manager.v1.Edge edges = 6;
  // Position config for rendering the graph. Required only for the UI.
  google.protobuf.StringValue ui_config = 7;
}

// Response to update graph_config.
message UpdateGraphResponse {
  // graph_config
  lattice_config_manager.v1.GraphConfig graph_config = 1;
}

// Request to activate graph_config.
message ActivateGraphRequest {
  // Uuid of the graph_config.
  google.protobuf.StringValue graph_config_uuid = 1;
  // Version of the graph_config.
  google.protobuf.Int64Value version = 2;
  // Tag to attach to this active graph_config (e.g. production_a, production_b, experiment_ab).
  google.protobuf.StringValue tag = 3;
}

// Response to activate graph_config.
message ActivateGraphResponse {
  // graph config
  lattice_config_manager.v1.GraphConfig graph_config = 1;
}

// Request to convert a graph type.
message ConvertGraphTypeRequest {
  // graph_config uuid
  google.protobuf.StringValue graph_config_uuid = 1;
  // The new graph type.
  lattice_config_manager.v1.GraphType graph_type = 2;
}

// Response to convert a graph type.
message ConvertGraphTypeResponse {
  // Updated graph_config
  lattice_config_manager.v1.GraphConfig graph_config = 1;
}
