syntax = "proto3";

// buf:lint:ignore DIRECTORY_SAME_PACKAGE
package attributes_service.v3;

import "attributes-service/common.proto";
import "attributes-service/dasher_arbitrary_entity_segment.proto";
import "attributes-service/dasher_skill_segment.proto";
import "attributes-service/dasher_sp_timestamp_segment.proto";
import "attributes-service/dasher_task_history_segment.proto";
import "attributes-service/insights_manager_segment.proto";
import "attributes-service/sm_weekly_delivery_segment.proto";
import "attributes-service/store_item_segment.proto";
import "attributes-service/store_sp_segment.proto";
import "google/protobuf/timestamp.proto";

option go_package = "attributes_service";
option java_generic_services = true;
option java_multiple_files = true;
option java_outer_classname = "SegmentationAttributeServiceProto";
option java_package = "com.doordash.rpc.attributes_service.v3";

// provides the set of APIs for segment related tasks
service SegmentationService {
  // read API to get segments by specific filters
  rpc GetSegmentsByFilter(GetSegmentsByFilterRequest) returns (GetSegmentsByFilterResponse);

  // write API to add/update segments in attribute-service
  rpc UpsertSegment(UpsertSegmentRequest) returns (UpsertSegmentResponse);
}

// payload for segmentation read API
message GetSegmentsByFilterRequest {
  // the type of segment
  attributes_service.common.v1.SegmentType segment_type = 1;

  // fields to read
  oneof read_fields {
    // sp dasher type
    SdSpDasherFieldList sd_sp_dx_fields = 2;

    // sm weekly segments
    attributes_service.segments.v1.SmWeeklySegmentFieldList sm_weekly_fields = 6;

    // dasher task history segments
    attributes_service.segments.v1.DxTaskHistorySegmentFieldList dx_task_history_fields = 7;

    // store item segments
    attributes_service.segments.v1.StoreItemSegmentFieldList store_item_fields = 8;

    // insights manager segments
    attributes_service.segments.v1.InsightsManagerSegmentFieldList insights_manager_fields = 9;

    // dasher sp timestamp segments
    attributes_service.segments.v1.DxSpTimestampSegmentFieldList dx_sp_timestamp_fields = 10;

    // dasher skill segments
    attributes_service.segments.v1.DxSkillSegmentFieldList dx_skill_fields = 12;

    // store sp segments
    attributes_service.segments.v1.StoreSpSegmentFieldList store_sp_fields = 13;
  }
  reserved 11;
  reserved "dx_arbitrary_entity_fields";

  // list of segment filters
  repeated SegmentFilter segment_filters = 3;

  // pagination
  oneof pagination {
    // offset based pagination
    attributes_service.common.v1.OffsetBasedPagination offset_based_pagination = 4;

    // token based pagination
    attributes_service.common.v1.TokenBasedPagination token_based_pagination = 5;
  }
}

// response for segmentation read API
message GetSegmentsByFilterResponse {
  // the type of segment
  attributes_service.common.v1.SegmentType segment_type = 1;

  // fields
  oneof fields {
    // segment type sp dasher fields
    SdSpDasherFieldList sd_sp_dx_field_list = 2;

    // sm weekly segments
    attributes_service.segments.v1.SmWeeklySegmentFieldList sm_weekly_fields = 6;

    // Dasher task history segments
    attributes_service.segments.v1.DxTaskHistorySegmentFieldList dx_task_history_fields = 7;

    // store item segments
    attributes_service.segments.v1.StoreItemSegmentFieldList store_item_fields = 8;

    // insights manager segments
    attributes_service.segments.v1.InsightsManagerSegmentFieldList insights_manager_fields = 9;

    // dasher sp timestamp segments
    attributes_service.segments.v1.DxSpTimestampSegmentFieldList dx_sp_timestamp_fields = 10;

    // dasher skill segments
    attributes_service.segments.v1.DxSkillSegmentFieldList dx_skill_fields = 12;

    // store sp segments
    attributes_service.segments.v1.StoreSpSegmentFieldList store_sp_fields = 13;
  }
  reserved 11;
  reserved "dx_arbitrary_entity_fields";

  // result data
  repeated FieldRow records = 3;

  // pagination response
  oneof pagination {
    // offset based pagination
    attributes_service.common.v1.OffsetBasedPaginationResponse offset_based_page_response = 4;

    // token based pagination
    attributes_service.common.v1.TokenBasedPaginationResponse token_based_page_response = 5;
  }
}

// data model for segmentation
message FieldRow {
  // list of field values
  repeated attributes_service.common.v1.FieldValue row = 1;
}

// payload for segmentation write API
message UpsertSegmentRequest {
  // rows to write
  oneof rows {
    // segment type dasher sp
    UpsertSdSpDasherSegmentList sd_sp_dx_segment_list = 1;

    // subMarket weekly segments
    attributes_service.segments.v1.UpsertSmWeeklySegmentList sm_weekly_segment_list = 2;

    // dx task history segments
    attributes_service.segments.v1.UpsertDxTaskHistorySegmentList dx_task_history_segment_list = 3;

    // store item segments
    attributes_service.segments.v1.UpsertStoreItemSegmentList store_item_segment_list = 4;

    // insights manager segments
    attributes_service.segments.v1.UpsertInsightsManagerSegmentList insights_manager_segment_list = 5;

    // dasher sp timestamp segments
    attributes_service.segments.v1.UpsertDxSpTimestampSegmentList dx_sp_timestamp_segment_list = 6;

    // dasher skill segments
    attributes_service.segments.v1.UpsertDxSkillSegmentList dx_skill_segment_list = 8;

    // store sp segments
    attributes_service.segments.v1.UpsertStoreSpSegmentList store_sp_segment_list = 9;
  }
  reserved 7;
  reserved "dx_arbitrary_entity_segment_list";
}

// response for segmentation write API
message UpsertSegmentResponse {
  // total records updated by this API call
  int64 upsert_count = 1;

  // response contains autogenerated fields for reference
  oneof rows {
    // segment type dasher sp
    UpsertSdSpDasherSegmentList sd_sp_dx_segment_list = 2;

    // subMarket weekly segments
    attributes_service.segments.v1.UpsertSmWeeklySegmentList sm_weekly_segment_list = 3;

    // dx task history segments
    attributes_service.segments.v1.UpsertDxTaskHistorySegmentList dx_task_history_segment_list = 4;

    // store item segments
    attributes_service.segments.v1.UpsertStoreItemSegmentList store_item_segment_list = 5;

    // insights manager segments
    attributes_service.segments.v1.UpsertInsightsManagerSegmentList insights_manager_segment_list = 6;

    // dasher sp timestamp segments
    attributes_service.segments.v1.UpsertDxSpTimestampSegmentList dx_sp_timestamp_segment_list = 7;

    // dasher skill segments
    attributes_service.segments.v1.UpsertDxSkillSegmentList dx_skill_segment_list = 9;

    // store sp segments
    attributes_service.segments.v1.UpsertStoreSpSegmentList store_sp_segment_list = 10;
  }
  reserved 8;
  reserved "dx_arbitrary_entity_segment_list";
}

// segment filters; each filter must contain an identifier filter and optionally a dimension filter
message SegmentFilter {
  // identifier filter
  IdentifierFilter identifier_filter = 1;

  // dimension filter
  DimensionFilter dimension_filter = 2;
}

// response for identifier filter
message IdentifierFilter {
  // filters
  oneof filter {
    // logical filter
    IdentifierLogicalFilter logical_filter = 1;

    // comparison filter
    IdentifierComparisonFilter comparison_filter = 2;
  }
}

// response for identifier logical filter
message IdentifierLogicalFilter {
  // logical operator
  attributes_service.common.v1.LogicalOperator operator = 1;

  // identifier filter
  repeated IdentifierFilter filters = 2;
}

// identifier comparison filter
message IdentifierComparisonFilter {
  // field type
  oneof field_type {
    // sp dasher identifier
    SdSpDasherIdentifier sd_sp_dx_identifier = 1;

    // sm weekly identifier
    attributes_service.segments.v1.SmWeeklySegmentIdentifier sm_weekly_identifier = 5;

    // dx task history identifier
    attributes_service.segments.v1.DxTaskHistorySegmentIdentifier dx_task_history_identifier = 6;

    // store item identifier
    attributes_service.segments.v1.StoreItemSegmentIdentifier store_item_identifier = 7;

    // insights manager identifier
    attributes_service.segments.v1.InsightsManagerSegmentIdentifier insights_manager_identifier = 8;

    // dx sp timestamp identifier
    attributes_service.segments.v1.DxSpTimestampSegmentIdentifier dx_sp_timestamp_identifier = 10;

    // dx skill identifier
    attributes_service.segments.v1.DxSkillSegmentIdentifier dx_skill_identifier = 12;

    // store sp identifier
    attributes_service.segments.v1.StoreSpSegmentIdentifier store_sp_identifier = 13;
  }
  reserved 11;
  reserved "dx_arbitrary_entity_identifier";

  // comparison operator
  attributes_service.common.v1.ComparisonOperator operator = 2;

  // field value
  oneof field_value_type {
    // value for single field
    attributes_service.common.v1.FieldValue field_value = 3;

    // multi field values
    attributes_service.common.v1.FieldValueList field_value_list = 4;
  }

  reserved 9;
  reserved "field_enum";
}

// dimension filter; can be nested up to 3 levels
message DimensionFilter {
  // can be either logical or comparison filter
  oneof filter {
    // dimension logical filter
    DimensionLogicalFilter logical_filter = 1;

    // dimension comparison filter
    DimensionComparisonFilter comparison_filter = 2;
  }
}

// dimension logical filter
message DimensionLogicalFilter {
  // logical operator
  attributes_service.common.v1.LogicalOperator operator = 1;

  // nested; list of filters
  repeated DimensionFilter filters = 2;
}

// dimension comparison filter
message DimensionComparisonFilter {
  // field type
  oneof field_type {
    // sp dasher segment type
    SdSpDasherDimension sd_sp_dx_dimension = 1;

    // sm weekly segment type
    attributes_service.segments.v1.SmWeeklySegmentDimension sm_weekly_dimension = 5;

    // Dx Task History segment type
    attributes_service.segments.v1.DxTaskHistorySegmentDimension dx_task_history_dimension = 6;

    // DO NOT ADD StoreItem segment dimension fields.  Only ONE dimension of type JSONB available which we don't support filtering

    // insights manager identifier
    attributes_service.segments.v1.InsightsManagerSegmentDimension insights_manager_dimension = 7;

    // dx sp timestamp identifier
    attributes_service.segments.v1.DxSpTimestampSegmentDimension dx_sp_timestamp_dimension = 8;

    // dx skill dimension
    attributes_service.segments.v1.DxSkillSegmentDimension dx_skill_dimension = 10;

    // store sp dimension
    attributes_service.segments.v1.StoreSpSegmentDimension store_sp_dimension = 11;
  }
  reserved 9;
  reserved "dx_arbitrary_entity_dimension";

  // comparison operator
  attributes_service.common.v1.ComparisonOperator operator = 2;

  // field value
  oneof field_value_type {
    // field value
    attributes_service.common.v1.FieldValue field_value = 3;

    // field value list
    attributes_service.common.v1.FieldValueList field_value_list = 4;
  }
}

// identifier
enum SdSpDasherIdentifier {
  // default
  SD_SP_DASHER_IDENTIFIER_UNSPECIFIED = 0;

  // sp_id
  SD_SP_DASHER_IDENTIFIER_SP_ID = 1;

  // dasher_id
  SD_SP_DASHER_IDENTIFIER_DASHER_ID = 2;
}

// field
enum SdSpDasherDimension {
  // unspecified field
  SD_SP_DASHER_DIMENSION_UNSPECIFIED = 0;

  // segment tag
  SD_SP_DASHER_DIMENSION_SEGMENT_TAG = 1;

  // segment create date
  SD_SP_DASHER_DIMENSION_CREATED_AT = 2;

  // segment activate date
  SD_SP_DASHER_DIMENSION_ACTIVATED_AT = 3;

  // segment expire date
  SD_SP_DASHER_DIMENSION_EXPIRE_AT = 4;
}

// identifiers and fields to read
message SdSpDasherField {
  // can read either identifier or field
  oneof field {
    // identifier
    SdSpDasherIdentifier sd_sp_dx_identifier = 1;

    // field
    SdSpDasherDimension sd_sp_dx_dimension = 2;
  }
}

// list of fields to read
message SdSpDasherFieldList {
  // list of fields
  repeated SdSpDasherField fields = 1;
}

// data model for sp dasher segment table
message UpsertSdSpDasherSegment {
  // starting point identifier
  int64 sp_id = 1;

  // dasher identifier
  int64 dasher_id = 2;

  // segment tag
  string segment_tag = 3;

  // segment creation time
  google.protobuf.Timestamp created_on = 4;

  // segment active time
  google.protobuf.Timestamp activated_on = 5;

  // segment expiration time
  google.protobuf.Timestamp expire_on = 6;
}

// payload for upsert sp dasher segment
message UpsertSdSpDasherSegmentList {
  // list of segments to write
  repeated UpsertSdSpDasherSegment segments = 1;
}
