syntax = "proto3";

// buf:lint:ignore DIRECTORY_SAME_PACKAGE
package attributes_service.v2;

import "attributes-service/common.proto";
import "google/protobuf/timestamp.proto";

option go_package = "attributes_service";
option java_generic_services = true;
option java_multiple_files = true;
option java_outer_classname = "SegmentationAttributeServiceProto";
option java_package = "com.doordash.rpc.attributes_service.v2";

// provides the set of APIs for segment related tasks
service SegmentationService {
  // read API to get segments by specific filters
  rpc GetSegmentsByFilter(GetSegmentsByFilterRequest) returns (GetSegmentsByFilterResponse);

  // write API to add/update segments in attribute-service
  rpc UpsertSegment(UpsertSegmentRequest) returns (UpsertSegmentResponse);
}

// identifier for sp dasher segment type
enum SdSpDasherIdentifierField {
  // default
  SD_SP_DASHER_IDENTIFIER_FIELD_UNSPECIFIED = 0;

  // sp_id
  SD_SP_DASHER_IDENTIFIER_FIELD_SP_ID = 1;

  // dasher_id
  SD_SP_DASHER_IDENTIFIER_FIELD_DASHER_ID = 2;
}

// field for sp dasher segment type
enum SdSpDasherDimensionField {
  // unspecified field
  SD_SP_DASHER_DIMENSION_FIELD_UNSPECIFIED = 0;

  // segment tag
  SD_SP_DASHER_DIMENSION_FIELD_SEGMENT_TAG = 3;

  // segment create date
  SD_SP_DASHER_DIMENSION_FIELD_CREATE_DATE = 4;

  // segment activate date
  SD_SP_DASHER_DIMENSION_FIELD_ACTIVATE_DATE = 5;

  // segment expire date
  SD_SP_DASHER_DIMENSION_FIELD_EXPIRE_DATE = 6;
}

// identifiers and fields to read
message SdSpDasherReadField {
  // can read either identifier or field
  oneof read_field {
    // identifier
    SdSpDasherIdentifierField identifier_field = 1;

    // field
    SdSpDasherDimensionField dimension_field = 2;
  }
}

// list of fields to read for segment type of sp dasher
message SdSpDasherReadRequest {
  // list of fields
  repeated SdSpDasherReadField fields = 1;
}

// payload for segmentation read API
message GetSegmentsByFilterRequest {
  // the type of segment
  attributes_service.common.v1.SegmentType segment_type = 1;

  // fields to read
  oneof fields {
    // segment type sp dasher fields
    SdSpDasherReadRequest sd_sp_dasher_read_request = 2;
  }

  // identifier filter
  SegmentIdentifierFilter identifier_filter = 3;

  // dimension filter
  SegmentDimensionFilter dimension_filter = 4;

  // pagination
  oneof pagination {
    // offset based pagination
    attributes_service.common.v1.OffsetBasedPagination offset_based_pagination = 5;

    // token based pagination
    attributes_service.common.v1.TokenBasedPagination token_based_pagination = 6;
  }
}

// data model for segmentation
message FieldRow {
  // list of field values
  repeated attributes_service.common.v1.FieldValue row = 1;
}

// response for segmentation read API
message GetSegmentsByFilterResponse {
  // the type of segment
  attributes_service.common.v1.SegmentType segment_type = 1;

  // fields to read
  oneof fields {
    // segment type sp dasher fields
    SdSpDasherReadRequest sd_sp_dasher_read_request = 2;
  }

  // result data
  repeated FieldRow records = 3;

  // pagination response
  oneof pagination {
    // offset based pagination
    attributes_service.common.v1.OffsetBasedPaginationResponse offset_based_page_response = 4;

    // token based pagination
    attributes_service.common.v1.TokenBasedPaginationResponse token_based_page_response = 5;
  }
}

// data model for sp dasher segment table
message UpsertSdSpDasherSegment {
  // starting point identifier
  int64 sp_id = 1;

  // dasher identifier
  int64 dasher_id = 2;

  // segment tag
  string segment_tag = 3;

  // segment creation time
  google.protobuf.Timestamp created_on = 4;

  // segment active time
  google.protobuf.Timestamp activated_on = 5;

  // segment expiration time
  google.protobuf.Timestamp expire_on = 6;
}

// payload for upsert sp dasher segment
message UpsertSdSpDasherSegmentRequest {
  // list of fields to write
  repeated UpsertSdSpDasherSegment fields = 1;
}

// payload for segmentation write API
message UpsertSegmentRequest {
  // rows to write
  oneof rows {
    // segment type dasher sp
    UpsertSdSpDasherSegmentRequest sd_sp_dasher_fields = 1;
  }
}

// response for segmentation write API
message UpsertSegmentResponse {
  // total records updated by this API call
  int64 upsert_count = 1;

  // response contains autogenerated fields for reference
  oneof response {
    // segment type dasher sp
    UpsertSdSpDasherSegmentRequest sd_sp_dasher_fields = 2;
  }
}

// list of int32 values for identifier filter
message IdentifierFieldValueList {
  // string value for multi filters
  repeated int64 list = 1;
}

// int32 from and to for identifier filter
message IdentifierBetweenValue {
  // from in between filter
  int64 from = 1;

  // to in between filter
  int64 to = 2;
}

// identifier filter
message SegmentIdentifierFilter {
  // individual filter expressions
  repeated SegmentIdentifierFilterExpression id_filter_expressions = 1;
}

// individual identifier filter expression
message SegmentIdentifierFilterExpression {
  // filter field
  oneof filter_field {
    // segment type of sp dasher
    SdSpDasherIdentifierField sd_sp_dasher_id_field = 1;
  }

  // filter value
  oneof filter_value_type {
    // value for single filter
    int64 field_value = 6;

    // value for multi filters
    IdentifierFieldValueList field_value_list = 7;

    // value for between filter
    IdentifierBetweenValue from_to = 8;
  }
}

// dimension filter
message SegmentDimensionFilter {
  // individual filter expressions
  repeated SegmentDimensionFilterExpression dim_filter_expressions = 1;
}

// individual filter expression
message SegmentDimensionFilterExpression {
  // filter field
  oneof filter_field {
    // sd sp dasher segment type
    SdSpDasherDimensionField sd_sp_dasher_dim_field = 1;
  }

  // filter operator
  attributes_service.common.v1.FilterOperator operator = 3;

  // filter value
  oneof filter_value_type {
    // value for single filter
    attributes_service.common.v1.FieldValue field_value = 6;

    // value for multi filters
    attributes_service.common.v1.FieldValueList field_value_list = 7;

    // value for between filter
    attributes_service.common.v1.BetweenValue from_to = 8;
  }
}
