syntax = "proto3";

package release_coordination.v1;

import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option go_package = "github.com/doordash/services-protobuf/generated/release_coordination";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.release_coordination";

// RCS definition, DevConsole will call this API
service ReleaseCoordinationService {
  // Return a single global config.
  rpc GetGlobalConfig(GetGlobalConfigRequest) returns (GetGlobalConfigResponse);
  // Return a list of all the global configs.
  rpc GetAllGlobalConfigs(GetAllGlobalConfigsRequest) returns (GetAllGlobalConfigsResponse);
  // Create/Update a global config.
  rpc UpsertGlobalConfig(UpsertGlobalConfigRequest) returns (UpsertGlobalConfigResponse);
  // Return a list of changes for a single global config, by time and/or limited to last X entries.
  rpc GetGlobalConfigList(GetGlobalConfigListRequest) returns (GetGlobalConfigListResponse);

  // Return a single service config.
  rpc GetServiceConfig(GetServiceConfigRequest) returns (GetServiceConfigResponse);
  // Return a list of all service configs.
  rpc GetAllServiceConfigs(GetAllServiceConfigsRequest) returns (GetAllServiceConfigsResponse);
  // Return a list of all service configs for a given flag. For example, use_automatic_deployment to get all service configs with automatic deployment enabled
  rpc GetServiceConfigList(GetServiceConfigListRequest) returns (GetServiceConfigListResponse);
  // Return a list of service names that can use automated deployment
  rpc GetAutoDeployServiceNames(GetAutoDeployServiceNamesRequest) returns (GetAutoDeployServiceNamesResponse);
  // Update a service config.
  rpc UpdateServiceConfig(UpdateServiceConfigRequest) returns (UpdateServiceConfigResponse);
  // Create/Update bundles in service config.
  rpc UpsertServiceConfigBundles(UpsertServiceConfigBundlesRequest) returns (UpsertServiceConfigBundlesResponse);

  // Return a deploy schedule for a given: service, bundle and environment.
  rpc GetDeploySchedule(GetDeployScheduleRequest) returns (GetDeployScheduleResponse);
  // Return a list of all deploy schedules for a service.
  rpc GetAllServiceDeploySchedules(GetAllServiceDeploySchedulesRequest) returns (GetAllServiceDeploySchedulesResponse);
  // Create/Update a deploy schedule for a given: service, bundle and environment.
  rpc UpsertDeploySchedule(UpsertDeployScheduleRequest) returns (UpsertDeployScheduleResponse);

  // Return the available parameters for a SpinnakerPipelineAction.
  rpc GetSpinnakerPipelineActionParams(GetSpinnakerPipelineActionParamsRequest) returns (GetSpinnakerPipelineActionParamsResponse);
  // Send a SpinnakerEvent to RCS for it to trigger a Spinnaker pipeline.
  rpc SendSpinnakerEvent(SendSpinnakerEventRequest) returns (SendSpinnakerEventResponse);
  // Send a SpinnakerEvent to RCS for it to trigger a Spinnaker pipeline by a specific caller
  rpc SendSpinnakerEventByCaller(SendSpinnakerEventByCallerRequest) returns (SendSpinnakerEventByCallerResponse);

  // Return the details for a specific build (tag) of a service.
  rpc GetBuildData(GetBuildDataRequest) returns (GetBuildDataResponse);
  // Update mutable fields for a specific build (tag) of a service.
  rpc UpdateBuildData(UpdateBuildDataRequest) returns (UpdateBuildDataResponse);
  // Update mutable fields for a specific build (tag) of a service.
  rpc UpdateBuildDataLockStatus(UpdateBuildDataLockStatusRequest) returns (UpdateBuildDataLockStatusResponse);
  // Return a list of build data for a service, by time and/or limited to the last X entries.
  rpc GetBuildDataList(GetBuildDataListRequest) returns (GetBuildDataListResponse);

  // Return the deploy data for a specific deploy of a (bundle/app) service.
  rpc GetDeployData(GetDeployDataRequest) returns (GetDeployDataResponse);
  // Return a list of deploy data for a service, by time and/or limited to the last X entries.
  rpc GetDeployDataList(GetDeployDataListRequest) returns (GetDeployDataListResponse);

  // Return Spinnaker pipeline data from a single execution.
  rpc GetSpinnakerPipelineData(GetSpinnakerPipelineDataRequest) returns (GetSpinnakerPipelineDataResponse);

  // Return a list of Spinnaker pipeline data child pipelines that share the same parent pipeline.
  rpc GetSpinnakerPipelineDataList(GetSpinnakerPipelineDataListRequest) returns (GetSpinnakerPipelineDataListResponse);

  // Return a single rollback config.
  rpc GetRollbackConfig(GetRollbackConfigRequest) returns (GetRollbackConfigResponse);
  // Return a list of all rollback configs for a single service.
  rpc GetAllServiceRollbackConfigs(GetAllServiceRollbackConfigsRequest) returns (GetAllServiceRollbackConfigsResponse);
  // Update a rollback config.
  rpc UpsertRollbackConfig(UpsertRollbackConfigRequest) returns (UpsertRollbackConfigResponse);

  // Return the rollback data for a specific rollback of a: service, bundle/app, environment.
  rpc GetRollbackData(GetRollbackDataRequest) returns (GetRollbackDataResponse);
  // Return a list of rollback data for a service, by time and/or limited to the last X entries.
  rpc GetRollbackDataList(GetRollbackDataListRequest) returns (GetRollbackDataListResponse);
  // Update a rollback data.
  rpc UpsertRollbackData(UpsertRollbackDataRequest) returns (UpsertRollbackDataResponse);

  // Return the deploy metadata for a specific pipeline id.
  rpc GetDeployMetadata(GetDeployMetadataRequest) returns (GetDeployMetadataResponse);

  // Return all global deploy freeze configs
  rpc GetAllGlobalDeployFreezeConfigs(GetAllGlobalDeployFreezeConfigsRequest) returns (GetAllGlobalDeployFreezeConfigsResponse);
  // Return the deploy freeze config for a specific service/graph
  rpc GetDeployFreezeConfig(GetDeployFreezeConfigRequest) returns (GetDeployFreezeConfigResponse);

  // Update a global deploy freeze config
  rpc UpsertGlobalDeployFreezeConfig(UpsertGlobalDeployFreezeConfigRequest) returns (UpsertGlobalDeployFreezeConfigResponse);
  // Update a service level deploy freeze config
  rpc UpsertDeployFreezeConfig(UpsertDeployFreezeConfigRequest) returns (UpsertDeployFreezeConfigResponse);

  // Upload a global deploy freeze config to S3 bucket
  rpc UploadGlobalDeployFreezeConfigToS3(UploadGlobalDeployFreezeConfigToS3Request) returns (UploadGlobalDeployFreezeConfigToS3Response);

  // Fetch a config tag version based on github PR number
  rpc GetConfigTagByPullRequestId(GetConfigTagByPullRequestIdRequest) returns (GetConfigTagByPullRequestIdResponse);

  // Return a single graph config.
  rpc GetGraphConfig(GetGraphConfigRequest) returns (GetGraphConfigResponse);
  // Return a list of all graph configs.
  rpc GetAllGraphConfigs(GetAllGraphConfigsRequest) returns (GetAllGraphConfigsResponse);
  // Return a list of all graph configs for a given flag. For example, use_automatic_deployment to get all graph configs with automatic deployment enabled
  rpc GetGraphConfigList(GetGraphConfigListRequest) returns (GetGraphConfigListResponse);
  // Return a list of graph names that can use automated deployment
  rpc GetAutoDeployGraphNames(GetAutoDeployGraphNamesRequest) returns (GetAutoDeployGraphNamesResponse);
  // Update a graph config.
  rpc UpdateGraphConfig(UpdateGraphConfigRequest) returns (UpdateGraphConfigResponse);
  // Upsert a graph config.
  rpc UpsertGraphConfig(UpsertGraphConfigRequest) returns (UpsertGraphConfigResponse);
}

/**
 * Global Configurations
 */
// Global Configurations
message GlobalConfig {
  // Name of config, required
  string name = 1;
  // Current value of config, required
  string value = 2;
  // Name of user who set this value
  google.protobuf.StringValue username = 3;
  // Comment/Reason why the value was set
  google.protobuf.StringValue comment = 4;
  // Time the value was set
  google.protobuf.Timestamp updated_at = 5;
}

// Request to get a single global config based on name.
message GetGlobalConfigRequest {
  // Name of config to get
  string name = 1;
}

// Response to get a single global config based on name.
message GetGlobalConfigResponse {
  // GlobalConfig response
  GlobalConfig config = 1;
}

// Request to get a list of all the global configs.
message GetAllGlobalConfigsRequest {}

// Response to get a list of all the global configs.
message GetAllGlobalConfigsResponse {
  // List of GlobalConfig response
  repeated GlobalConfig configs = 1;
}

// Request to create/update a global config.
message UpsertGlobalConfigRequest {
  // Required GlobalConfig fields: name, value, username, comment
  GlobalConfig config = 1;
}

// Response to create/update a global config.
message UpsertGlobalConfigResponse {
  // Returns result of upsert
  google.protobuf.BoolValue success = 1;
}

// Request to get list of changes for a single global config,
// by time and/or limited to last X entries.
message GetGlobalConfigListRequest {
  // Name of global config, required
  string name = 1;
  // Limit of last <limit> entries to retrieve
  google.protobuf.Int32Value limit = 2;
  // Timestamp start time of request range
  google.protobuf.Timestamp start_time = 3;
  // Timestamp end time of request range
  google.protobuf.Timestamp end_time = 4;
}

// Response to get list of changes for a single global config.
message GetGlobalConfigListResponse {
  // List of GlobalConfig response
  repeated GlobalConfig configs = 1;
}

/**
 * Service Configurations
 */
// Service Configurations
message ServiceConfig {
  // Name of the service, required.
  string service_name = 1;
  // List of apps within the service.
  repeated google.protobuf.StringValue apps_list = 2;
  // Bundles and their apps defined for the service.
  // Keys are the bundle name as string and values are a string list of apps within the bundle.
  google.protobuf.Struct bundles = 3;
  // Flag to set service-level deploy freeze. True is active.
  google.protobuf.BoolValue is_deploy_freeze_active = 4;
  // The reason for the current state of the deploy freeze.
  google.protobuf.StringValue deploy_freeze_comment = 5;
  // (Deprecated) Flag to set automatic deployments (deploy window, timeframe) across all environments. True is active.
  google.protobuf.BoolValue is_automatic_deploys_active = 6;
  // (Deprecated) The reason for the current state of automatic deploys.
  google.protobuf.StringValue automatic_deploys_comment = 7;
  // (Deprecated) Flag to set cron deployments (scheduled, trigger at exact time) across all environments. True is active.
  google.protobuf.BoolValue is_cron_deploys_active = 8;
  // (Deprecated) The reason for the current state of cron deploys.
  google.protobuf.StringValue cron_deploys_comment = 9;
  // Flag that indicates if service can use automatic deployment. True is when they can use
  google.protobuf.BoolValue use_automatic_deployment = 10;
  // List of environments the service can deploy to
  repeated google.protobuf.StringValue environments = 11;
  // List of sandbox environments the service can deploy to
  repeated google.protobuf.StringValue sandbox_environments = 12;
}

// Request to get a single service config based on the service name.
message GetServiceConfigRequest {
  // Name of the service to get config for
  string service_name = 1;
}

// Response to get a single service config based on the service name.
message GetServiceConfigResponse {
  // ServiceConfig response
  ServiceConfig config = 1;
}

// Request to get a list of all the service configs.
message GetAllServiceConfigsRequest {}

// Response to get a list of all the service configs.
message GetAllServiceConfigsResponse {
  // List of ServiceConfig response
  repeated ServiceConfig configs = 1;
}

// Request to get a list of all service configs for a given flag. For example, use_automatic_deployment to get all service configs with automatic deployment enabled
message GetServiceConfigListRequest {
  // Flag to set service-level deploy freeze. True is active.
  google.protobuf.BoolValue is_deploy_freeze_active = 1;
  // Flag that indicates if service can use automatic deployment. True is when they can use
  google.protobuf.BoolValue use_automatic_deployment = 2;
}

// Response to get a list of all the service configs for a given flag
message GetServiceConfigListResponse {
  // List of ServiceConfig response
  repeated ServiceConfig configs = 1;
}

// Return a list of service names that can use automated deployment
message GetAutoDeployServiceNamesRequest {
  // Flag that indicates if service can use automatic deployment. True is when they can use
  google.protobuf.BoolValue use_automatic_deployment = 1;
}

// Response to get a list of all the service configs that can use automatic deployment
message GetAutoDeployServiceNamesResponse {
  // List of service names
  repeated string service_names = 1;
}

// Request to update a service config.
message UpdateServiceConfigRequest {
  // Required ServiceConfig fields: service_name
  ServiceConfig config = 1;
}

// Response to update a service config.
message UpdateServiceConfigResponse {
  // Returns result of update
  google.protobuf.BoolValue success = 1;
  // Returns a message about the result
  google.protobuf.StringValue message = 2;
}

// Request to create/update bundles in service config.
message UpsertServiceConfigBundlesRequest {
  // Name of the service, required.
  string service_name = 1;
  // List of apps within the service
  repeated google.protobuf.StringValue apps = 2;
  // Bundles and their apps defined for the service.
  // Keys are the bundle name as string and values are a string list of apps within the bundle.
  google.protobuf.Struct bundles = 3;
  // List of environments the service can deploy to
  repeated google.protobuf.StringValue environments = 4;
  // List of sandbox environments the service can deploy to
  repeated google.protobuf.StringValue sandbox_environments = 5;
}

// Response to create/update bundles in service config.
message UpsertServiceConfigBundlesResponse {
  // Returns result of create/update
  google.protobuf.BoolValue success = 1;
  // Returns a message about the result
  google.protobuf.StringValue message = 2;
}

/**
 * Deploy Schedules
 */
// Deploy Schedule for a service
message DeploySchedule {
  // Name of the service to set the schedule for, required
  string service_name = 1;
  // Name of the bundle to set the schedule for, required
  string bundle_name = 2;
  // Name of the environment to set the schedule for, required
  string environment = 3;
  // List cron schedules as ScheduleTime. Times in UTC.
  repeated ScheduleTime cron_schedules = 4;
  // List of ScheduleWindow, which is a Pair of start and end ScheduleTime to represent a deploy window for
  // automatic deploys. Times in UTC.
  // e.g. {"start": {"minute": 0, "hour": 1, "day": "MONDAY"}, "end": {"minute": 30, "hour": 2, "day": "TUESDAY"}}
  repeated ScheduleWindow window_schedules = 5;
  // If saved cron schedules will not run during holidays
  google.protobuf.BoolValue is_cron_schedules_skip_holidays_active = 6;
  // If saved automatic deploy windows will not run during holidays
  google.protobuf.BoolValue is_window_schedules_skip_holidays_active = 7;
  // Flag to set automatic deployments (deploy window, timeframe) for this environment. True is active.
  google.protobuf.BoolValue is_automatic_deploys_active = 8;
  // Flag to set cron deployments (scheduled, trigger at exact time) for this environment. True is active.
  google.protobuf.BoolValue is_cron_deploys_active = 9;
}

// Represents the start and end time for a schedule window.
message ScheduleWindow {
  // Start time, represented by ScheduleTime
  ScheduleTime start = 1;
  // End time, represented by ScheduleTime
  ScheduleTime end = 2;
}

// Represents the minute, hour and day to for a schedule.
message ScheduleTime {
  // Minute in the hour, 0-59
  google.protobuf.Int32Value minute = 1;
  // Hour in the day, 0-23
  google.protobuf.Int32Value hour = 2;
  // Day of the week
  DayOfWeek day = 3;
}

// Represents the day of the week
enum DayOfWeek {
  // The unspecified day-of-week.
  DAY_OF_WEEK_UNSPECIFIED = 0;
  // Monday
  DAY_OF_WEEK_MONDAY = 1;
  // Tuesday
  DAY_OF_WEEK_TUESDAY = 2;
  //Wednesday
  DAY_OF_WEEK_WEDNESDAY = 3;
  // Thursday
  DAY_OF_WEEK_THURSDAY = 4;
  // Friday
  DAY_OF_WEEK_FRIDAY = 5;
  // Saturday
  DAY_OF_WEEK_SATURDAY = 6;
  // Sunday
  DAY_OF_WEEK_SUNDAY = 7;
}

// Request to get a single deploy schedule based on: service name, bundle name, environment.
message GetDeployScheduleRequest {
  // Name of service to get
  string service_name = 1;
  // Name of bundle to get
  string bundle_name = 2;
  // Environment to get
  string environment = 3;
}

// Response to get a single deploy schedule.
message GetDeployScheduleResponse {
  // DeploySchedule response
  DeploySchedule deploy_schedule = 1;
}

// Request to get a list of all the deploy schedules based on service name.
message GetAllServiceDeploySchedulesRequest {
  // Name of service to get
  string service_name = 1;
}

// Response to get a list of all the deploy schedules based on service name.
message GetAllServiceDeploySchedulesResponse {
  // List of DeploySchedule response
  repeated DeploySchedule deploy_schedules = 1;
}

// Request to create/update a deploy schedule.
message UpsertDeployScheduleRequest {
  // Required DeploySchedule fields: service_name, bundle_name, environment, schedule
  DeploySchedule deploy_schedule = 1;
}

// Response to create/update a deploy schedule.
message UpsertDeployScheduleResponse {
  // Returns result of upsert
  google.protobuf.BoolValue success = 1;
}

/**
 * Spinnaker Events
 */
// Spinnaker Event for RCS to trigger a Spinnaker pipeline.
message SpinnakerEvent {
  // Name of the service, required
  string service_name = 1;
  // The type of pipeline action to run, required
  SpinnakerPipelineAction pipeline_action = 2;
  // User who triggered the Spinnaker event, required
  string trigger_user = 3;
  // Spinnaker pipeline/action parameters, changes depending on the pipeline action. required.
  google.protobuf.Struct pipeline_parameters = 4;
}

// Represents the action in Spinnaker to take.
enum SpinnakerPipelineAction {
  // Unspecified action
  SPINNAKER_PIPELINE_ACTION_UNSPECIFIED = 0;
  // Stop pipeline action
  SPINNAKER_PIPELINE_ACTION_STOP = 1;
  // Pause pipeline action
  SPINNAKER_PIPELINE_ACTION_PAUSE = 2;
  // Resume pipeline action
  SPINNAKER_PIPELINE_ACTION_RESUME = 3;
  // Deploy pipeline
  SPINNAKER_PIPELINE_ACTION_DEPLOY = 4;
  // Bounce pipeline
  SPINNAKER_PIPELINE_ACTION_BOUNCE = 5;
  // Scale pipeline
  SPINNAKER_PIPELINE_ACTION_SCALE = 6;
  // Emergency deploy pipeline
  SPINNAKER_PIPELINE_ACTION_EMERGENCY_DEPLOY = 7;
  // Emergency bounce pipeline
  SPINNAKER_PIPELINE_ACTION_EMERGENCY_BOUNCE = 8;
  // Emergency Scale pipeline
  SPINNAKER_PIPELINE_ACTION_EMERGENCY_SCALE = 9;
  // Backfill LKG Pipeline
  SPINNAKER_PIPELINE_ACTION_BACKFILL_LKG = 10;
  // Sandbox Deploy pipeline
  SPINNAKER_PIPELINE_ACTION_SANDBOX_DEPLOY = 11;
  // DeleteResourcesByApp pipeline
  SPINNAKER_PIPELINE_ACTION_DELETE = 12;
  // Graph Deploy pipeline
  SPINNAKER_PIPELINE_ACTION_GRAPH_DEPLOY = 13;
  // Graph Emergency Deploy pipeline
  SPINNAKER_PIPELINE_ACTION_GRAPH_EMERGENCY_DEPLOY = 14;
  // Graph Bounce pipeline
  SPINNAKER_PIPELINE_ACTION_GRAPH_BOUNCE = 15;
  // Graph Sandbox Deploy pipeline
  SPINNAKER_PIPELINE_ACTION_GRAPH_SANDBOX_DEPLOY = 16;
}

// Request to get the available parameters for a SpinnakerPipelineAction
message GetSpinnakerPipelineActionParamsRequest {
  // The type of pipeline action to get the available parameters for
  SpinnakerPipelineAction pipeline_action = 1;
}

// Response to get the available parameters for a SpinnakerPipelineAction
message GetSpinnakerPipelineActionParamsResponse {
  // Returns the available parameters for the Spinnaker pipeline/action
  google.protobuf.Struct pipeline_parameters = 1;
}

// Request to send a SpinnakerEvent, taking a Spinnaker action.
message SendSpinnakerEventRequest {
  // Required SpinnakerEvent fields: service_name, pipeline_action, trigger_user, pipeline_parameters
  SpinnakerEvent event = 1;
}

// Response from sending a SpinnakerEvent.
message SendSpinnakerEventResponse {
  // Returns result from sending the event
  google.protobuf.BoolValue success = 1;
  // Returns a comment about the result
  google.protobuf.StringValue comment = 2;
}

// Request to send a SpinnakerEvent by a caller, taking a Spinnaker action.
message SendSpinnakerEventByCallerRequest {
  // Required SpinnakerEvent fields: service_name, pipeline_action, trigger_user, pipeline_parameters
  SpinnakerEvent event = 1;
}

// Response from sending a SpinnakerEvent by a caller.
message SendSpinnakerEventByCallerResponse {
  // Returns result from sending the event
  google.protobuf.BoolValue success = 1;
  // Returns a comment about the result
  google.protobuf.StringValue comment = 2;
}

/**
 * Build Data
 */
// Build Data for a project
message BuildData {
  // Name of the project or service, required
  string project_name = 1;
  // Semver tag, required
  string tag = 2;
  // Commit SHA relating to the tag
  google.protobuf.StringValue sha = 3;
  // Base reference branch name where commit was merged. Such as master, main, release branch.
  google.protobuf.StringValue base_ref = 4;
  // Timestamp when the tag was created
  google.protobuf.Timestamp created_at = 5;
  // ID that can be used to directly link to the build log
  google.protobuf.StringValue log_id = 6;
  // Mark if the tag is locked, making it not-deployable
  google.protobuf.BoolValue is_locked = 7;
  // Comment why the tag is locked
  google.protobuf.StringValue lock_comment = 8;
  // PRs that are part of this tag
  repeated google.protobuf.StringValue pull_requests = 9;
}

// Request to get the build data for a specific build (tag) of a project
message GetBuildDataRequest {
  // Name of the project to get build data for
  string project_name = 1;
  // Semver tag
  string tag = 2;
}

// Response to get the build data for a specific build (tag) of a project
message GetBuildDataResponse {
  // BuildData response
  BuildData data = 1;
}

// Request to update the mutable build data for a tag of a project.
// Only mutable fields: is_locked, lock_comment
message UpdateBuildDataRequest {
  // Required BuildData fields: project_name, tag, is_locked, lock_comment
  BuildData data = 1;
}

// Response to update the mutable build data for a tag of a project
message UpdateBuildDataResponse {
  // Returns result of update
  google.protobuf.BoolValue success = 1;
}

// Request to update the mutable build data for a tag of a project, only for lock status.
// Only mutable fields: is_locked, lock_comment
message UpdateBuildDataLockStatusRequest {
  // Required BuildData fields: project_name, tag
  BuildData data = 1;
}

// Response to update the mutable build data for a tag of a project, only for lock status.
message UpdateBuildDataLockStatusResponse {
  // Returns result of update
  google.protobuf.BoolValue success = 1;
}

// Request to get a list of BuildData for a project.
// Must use both start_time & end_time, only limit, or all 3.
message GetBuildDataListRequest {
  // Required BuildData fields: project_name, tag
  BuildData data = 1;
  // The oldest timestamp when retrieving BuildData over a time range
  google.protobuf.Timestamp start_time = 2;
  // Most recent timestamp when retrieving BuildData over a time range
  google.protobuf.Timestamp end_time = 3;
  // Limit the response to be max this number of BuildData
  google.protobuf.Int32Value limit = 4;
}

// Response to get a list of BuildData for a project
message GetBuildDataListResponse {
  // List of BuildData response
  repeated BuildData data = 1;
}

/**
 * Deploy Data
 */
// Deploy Data for a service
message DeployData {
  // Name of the service, required
  string service_name = 1;
  // Name of the bundle in the service
  google.protobuf.StringValue bundle_name = 2;
  // Name of the app in the service
  google.protobuf.StringValue app_name = 3;
  // Semver tag or SHA, required
  string tag = 4;
  // Target environment of the deploy, required
  string target_environment = 5;
  // Current status of the deploy
  google.protobuf.StringValue status = 6;
  // Timestamp when the deploy started
  google.protobuf.Timestamp created_at = 7;
  // Timestamp when this DeployData was last updated
  google.protobuf.Timestamp updated_at = 8;
  // ID that can be used to directly link to the pipeline in Spinnaker
  google.protobuf.StringValue pipeline_id = 9;
  // User who triggered the deploy
  google.protobuf.StringValue trigger_user = 10;
  // Name of Spinnaker pipeline for the deployment
  google.protobuf.StringValue pipeline_name = 11;
  // Semver tag or SHA of the previous successful deployment, required
  string previous_tag = 12;
  // Name of the repo of the service
  google.protobuf.StringValue repo_name = 13;
  // Type of pipeline ran
  SpinnakerPipelineAction pipeline_type = 14;
  // Name of the service that triggered the deploy pipeline. Example: rcs
  google.protobuf.StringValue triggered_by = 15;
  // Pipeline ID for deployment that rolls back this deployment
  google.protobuf.StringValue rollback_id = 16;
  // If this is the latest bundled deployment in the environment
  google.protobuf.BoolValue is_latest = 17;
  // Config version
  google.protobuf.StringValue config_version = 18;
  // Config version of the last successful deployment
  google.protobuf.StringValue previous_config_version = 19;
}

// Request to get the deploy data for a specific deploy of a (bundle/app) service.
// Not all services have a bundle or an app and in those cases are optional fields.
message GetDeployDataRequest {
  // Name of the service to get deploy data for
  string service_name = 1;
  // Name of the bundle in the service to get deploy data for
  google.protobuf.StringValue bundle_name = 2;
  // Name of the app in the service to get deploy data for
  google.protobuf.StringValue app_name = 3;
  // Semver tag or SHA
  string tag = 4;
  // Target environment of the deploy
  string target_environment = 5;
  // Timestamp when the deploy started
  google.protobuf.Timestamp created_at = 6;
}

// Response to get the deploy data for a specific deploy of a (bundle/app) service
message GetDeployDataResponse {
  // DeployData response
  DeployData data = 1;
}

// Request to get a list of DeployData for a service.
// Must use both start_time & end_time, only limit, or all 3.
// The is_bundle flag returns only bundle deployment
message GetDeployDataListRequest {
  // Required DeployData fields: service_name
  DeployData data = 1;
  // The oldest timestamp when retrieving DeployData over a time range
  google.protobuf.Timestamp start_time = 2;
  // Most recent timestamp when retrieving DeployData over a time range
  google.protobuf.Timestamp end_time = 3;
  // Limit the response to be max this number of DeployData
  google.protobuf.Int32Value limit = 4;
  // If the request should return only bundle deployment
  google.protobuf.BoolValue is_bundle = 5;
  // List of pipeline types
  repeated SpinnakerPipelineAction pipeline_types = 6;
}

// Response to get a list of DeployData for a service
message GetDeployDataListResponse {
  // List of DeployData response
  repeated DeployData data = 1;
}

/**
 * Spinnaker Pipeline Data
 */
// Spinnaker Pipeline Data from a single execution
message SpinnakerPipelineData {
  // Name of the service, required
  string service_name = 1;
  // ID that can be used to directly link to the pipeline in Spinnaker, required
  string pipeline_id = 2;
  // Name of the bundle in the service
  google.protobuf.StringValue bundle_name = 3;
  // Name of the app in the service
  google.protobuf.StringValue app_name = 4;
  // Timestamp when the pipeline started
  google.protobuf.Timestamp created_at = 5;
  // Timestamp when this SpinnakerPipelineData was last updated
  google.protobuf.Timestamp updated_at = 6;
  // Current status of the pipeline
  google.protobuf.StringValue status = 7;
  // Type of pipeline ran
  SpinnakerPipelineAction pipeline_type = 8;
  // User who triggered the Spinnaker pipeline
  google.protobuf.StringValue trigger_user = 9;
  // Spinnaker pipeline parameters, changes depending on the pipeline action
  google.protobuf.Struct pipeline_parameters = 10;
  // The pipelines stages and its data
  google.protobuf.Struct custom_stages = 11;
  // The pipelines stages and its data
  google.protobuf.Struct spinnaker_stages = 12;
  // ID that can be used to directly link to the parent pipeline in Spinnaker, if any
  string parent_pipeline_id = 13;
  // Name of the pipeline
  string pipeline_name = 14;
  // ID that can be used to directly link to a specific stage in the parent pipeline in Spinnaker, if any
  string parent_pipeline_stage_id = 15;
  // List of errors that occurred in the pipeline
  repeated google.protobuf.StringValue errors = 16;
}

// Request to get Spinnaker pipeline data from a single execution.
message GetSpinnakerPipelineDataRequest {
  // Name of the service
  string service_name = 1;
  // ID that can be used to directly link to the pipeline in Spinnaker
  string pipeline_id = 2;
  // Deprecated. ID that can be used to directly link to the parent pipeline in Spinnaker
  reserved 3;
  reserved "parent_pipeline_id";
}

// Response to get Spinnaker pipeline data from a single execution.
message GetSpinnakerPipelineDataResponse {
  // SpinnakerPipelineData response
  SpinnakerPipelineData data = 1;
}

// Request to get a list of Spinnaker pipeline data from a single parent execution.
message GetSpinnakerPipelineDataListRequest {
  // Name of the service
  string service_name = 1;
  // ID that can be used to directly link to the parent pipeline in Spinnaker
  string parent_pipeline_id = 2;
  // ID that can be used to directly link to a specific stage in the parent pipeline in Spinnaker
  string parent_pipeline_stage_id = 3;
}

// Response to get a list of Spinnaker pipeline data from a single parent execution.
message GetSpinnakerPipelineDataListResponse {
  // List of SpinnakerPipelineData response
  repeated SpinnakerPipelineData data = 1;
}

/**
 * Rollback Configurations
 */
// Rollback Configurations
message RollbackConfig {
  // Name of the service, required.
  string service_name = 1;
  // Name of the bundle, required.
  string bundle_name = 2;
  // Name of the environment, required.
  string environment = 3;
  // Flag to set auto rollback notifications. True is active.
  google.protobuf.BoolValue is_notifications_active = 4;
  // Flag to set auto rollback actions. This is for performing the rollback action itself, not just notifying that
  // a rollback should take place.
  // True is active and also indicates notifications are active.
  // False will not perform the rollback action, and instead can optionally notify teams if a rollback should take place.
  google.protobuf.BoolValue is_rollback_active = 5;
}

// Request to get a single rollback config based on: service name, bundle name, environment.
message GetRollbackConfigRequest {
  // Name of service to get
  string service_name = 1;
  // Name of bundle to get
  string bundle_name = 2;
  // Environment to get
  string environment = 3;
}

// Response to get a single service config.
message GetRollbackConfigResponse {
  // RollbackConfig response
  RollbackConfig config = 1;
}

// Request to get a list of all the rollback configs based on service name.
message GetAllServiceRollbackConfigsRequest {
  // Name of service to get
  string service_name = 1;
}

// Response to get a list of all the rollback configs based on a service name.
message GetAllServiceRollbackConfigsResponse {
  // List of RollbackConfig response
  repeated RollbackConfig configs = 1;
}

// Request to create/update a rollback config.
message UpsertRollbackConfigRequest {
  // Required RollbackConfig fields: service_name, bundle_name, environment
  RollbackConfig config = 1;
}

// Response to create/update a rollback config.
message UpsertRollbackConfigResponse {
  // Returns result of upsert
  google.protobuf.BoolValue success = 1;
}

/**
 * Rollback Data
 */
// Rollback Data for a service
message RollbackData {
  // Name of the service, required
  string service_name = 1;
  // Name of the bundle in the service
  google.protobuf.StringValue bundle_name = 2;
  // Name of the app in the service
  google.protobuf.StringValue app_name = 3;
  // Semver tag or SHA, required
  string tag_rolling_back = 4;
  // Target environment of the rollback, required
  string target_environment = 5;
  // Current status of the rollback
  google.protobuf.StringValue status = 6;
  // Timestamp when the rollback started
  google.protobuf.Timestamp created_at = 7;
  // Timestamp when this RollbackData was last updated
  google.protobuf.Timestamp updated_at = 8;
  // ID that can be used to directly link to the pipeline in Spinnaker
  google.protobuf.StringValue pipeline_id = 9;
  // ID that can be used to directly link to the pipeline that is being rolled back in Spinnaker
  google.protobuf.StringValue pipeline_id_to_rollback = 10;
  // Reason why the rollback was initiated
  google.protobuf.StringValue rollback_reason = 11;
  // Name of the repo of the service
  google.protobuf.StringValue repo_name = 12;
}

// Request to get the rollback data for a specific rollback of a: service, bundle/app, environment.
message GetRollbackDataRequest {
  // Name of the service to get rollback data for
  string service_name = 1;
  // Name of the bundle in the service to get rollback data for
  google.protobuf.StringValue bundle_name = 2;
  // Name of the app in the service to get rollback data for
  google.protobuf.StringValue app_name = 3;
  // Semver tag or SHA
  string tag_rolling_back = 4;
  // Target environment of the rollback
  string target_environment = 5;
  // Optional. Timestamp when the rollback started. If left empty in request, response will return the latest timestamped created_at.
  google.protobuf.Timestamp created_at = 6;
  // Optional. Pipeline Id of the deployment that performs the rollback
  google.protobuf.StringValue pipeline_id = 7;
  // Optional. Pipeline Id of the deployment that was rolled back
  google.protobuf.StringValue pipeline_id_to_rollback = 8;
}

// Response to get the rollback data for a specific rollback of a: service, bundle/app, environment.
message GetRollbackDataResponse {
  // RollbackData response
  RollbackData data = 1;
}

// Request to get a list of RollbackData for a service.
// Must use both start_time & end_time, only limit, or all 3.
message GetRollbackDataListRequest {
  // Required RollbackData fields: service_name
  RollbackData data = 1;
  // The oldest timestamp when retrieving RollbackData over a time range
  google.protobuf.Timestamp start_time = 2;
  // Most recent timestamp when retrieving RollbackData over a time range
  google.protobuf.Timestamp end_time = 3;
  // Limit the response to be max this number of RollbackData
  google.protobuf.Int32Value limit = 4;
}

// Response to get a list of RollbackData for a service
message GetRollbackDataListResponse {
  // List of RollbackData response
  repeated RollbackData data = 1;
}

// Request to create/update a rollback data.
message UpsertRollbackDataRequest {
  // Required RollbackData fields: service_name, bundle_name, environment
  RollbackData data = 1;
}

// Response to create/update a rollback data.
message UpsertRollbackDataResponse {
  // Returns result of upsert
  google.protobuf.BoolValue success = 1;
}

/**
 * Deploy Metadata
 */
// Metadata for a deployment
message DeployMetadata {
  // Name of the repo of the service
  string repo_name = 1;
  // Name of the service, required
  string service_name = 2;
  // ID that can be used to directly link to the pipeline in Spinnaker
  string pipeline_id = 3;
  // Semver tag or SHA, required
  string tag = 4;
  // Target environment of the deploy, required
  string target_environment = 5;
  // Freeform metadata for deploy data
  google.protobuf.Struct metadata = 6;
}

// Request to get the deploy metadata for a specific pipeline id.
message GetDeployMetadataRequest {
  // Pipeline Id to get deploy metadata for
  string pipeline_id = 1;
}

// Response to get the deploy metadata for a specific pipeline id.
message GetDeployMetadataResponse {
  // DeployMetadata response
  DeployMetadata data = 1;
}

// Enum to indicate the type of the software asset
enum AssetType {
  // The unspecified asset type
  ASSET_TYPE_UNSPECIFIED = 0;
  // Regular DoorDash service
  ASSET_TYPE_SERVICE = 1;
  // Graph
  ASSET_TYPE_GRAPH = 2;
}

// Global deploy freeze config data
message GlobalDeployFreezeConfig {
  // Name of the spinnaker environment
  string spinnaker_env_name = 1;
  // Whether the spinnaker environment is frozen
  google.protobuf.BoolValue is_freeze_active = 2;
  // Per-group configuration
  string deployment_group = 3;
  // Context message to indicate why code freeze is enforced
  string context_message = 4;
}

// Request to list all global deploy freeze configs
message GetAllGlobalDeployFreezeConfigsRequest {}

// Update the global deploy freeze config for a specific Spinnaker instance
message UpsertGlobalDeployFreezeConfigRequest {
  // The config to be updated
  GlobalDeployFreezeConfig config = 1;
}

// Response to get a list of all the global configs
message GetAllGlobalDeployFreezeConfigsResponse {
  // List of GlobalConfig response
  repeated GlobalDeployFreezeConfig configs = 1;
}

// Service level deploy freeze config data
message DeployFreezeConfig {
  // Name of the service/graph
  string name = 1;
  // Whether the service is frozen
  google.protobuf.BoolValue is_freeze_active = 2;
  // Context message to indicate why code freeze is enforced
  string context_message = 3;
  // Type of the service
  AssetType type = 4;
}

// Update the deploy freeze config for a specific service/graph
message UpsertDeployFreezeConfigRequest {
  // The config to be updated
  DeployFreezeConfig config = 1;
}

// Response to insert or update a service level deploy freeze config
message UpsertDeployFreezeConfigResponse {
  // Returns result of upsert
  google.protobuf.BoolValue success = 1;
}

// Response to insert or update a global deploy freeze config
message UpsertGlobalDeployFreezeConfigResponse {
  // Returns result of upsert
  google.protobuf.BoolValue success = 1;
}

// Request to get a service's deploy freeze config
message GetDeployFreezeConfigRequest {
  // Name of the service/graph
  string name = 1;
  // Type of the asset
  AssetType type = 2;
}

// Response to get a service's deploy freeze config
message GetDeployFreezeConfigResponse {
  // Service config returned
  DeployFreezeConfig config = 1;
}

// Global deploy freeze config to be uploaded to S3
message UploadGlobalDeployFreezeConfig {
  // Name of the spinnaker environment
  string spinnaker_env_name = 1;
  // Whether the spinnaker environment is frozen
  google.protobuf.BoolValue is_freeze_active = 2;
  // Per-group configuration
  string deployment_group = 3;
  // Context message to indicate why code freeze is enforced
  string context_message = 4;
}

// Request to upload the global deploy freeze config to the S3 bucket
message UploadGlobalDeployFreezeConfigToS3Request {
  // The config to be uploaded
  UploadGlobalDeployFreezeConfig config = 1;
}

// Response to upload the global deploy freeze config to the S3 bucket
message UploadGlobalDeployFreezeConfigToS3Response {
  // Returns result of upload
  google.protobuf.BoolValue success = 1;
}

// Request to retrieve the service config version associated with a pull request id
message GetConfigTagByPullRequestIdRequest {
  // Id of the pull request
  string pull_request_id = 1;
}

// Result type for config history
message ConfigTagWithSha {
  // Name of the project, usually refers to the service name
  string project_name = 1;
  // Config tag version
  string tag = 2;
  // Git sha of the PR
  string sha = 3;
}

// Response to retrieve the service config version associated with a pull request id
message GetConfigTagByPullRequestIdResponse {
  // Service config info
  repeated ConfigTagWithSha config_tags = 1;
}

/**
 * Graph Configurations
 */
// Graph Configurations
message GraphConfig {
  // Name of the graph, required.
  string name = 1;
  // Flag to set graph-level deploy freeze. True is active.
  google.protobuf.BoolValue is_deploy_freeze_active = 2;
  // The reason for the current state of the deploy freeze.
  google.protobuf.StringValue deploy_freeze_comment = 3;
  // (Deprecated) Flag to set automatic deployments (deploy window, timeframe) across all environments. True is active.
  google.protobuf.BoolValue is_automatic_deploys_active = 4;
  // (Deprecated) The reason for the current state of automatic deploys.
  google.protobuf.StringValue automatic_deploys_comment = 5;
  // Flag that indicates if graph can use automatic deployment. True is when they can use
  google.protobuf.BoolValue use_automatic_deployment = 6;
  // List of environments the graph can deploy to
  repeated google.protobuf.StringValue environments = 7;
  // List of sandbox environments the graph can deploy to
  repeated google.protobuf.StringValue sandbox_environments = 8;
}

// Request to get a single graph config based on the graph name.
message GetGraphConfigRequest {
  // Name of the graph to get config for
  string name = 1;
}

// Response to get a single graph config based on the graph name.
message GetGraphConfigResponse {
  // GraphConfig response
  GraphConfig config = 1;
}

// Request to get a list of all the graph configs.
message GetAllGraphConfigsRequest {}

// Response to get a list of all the graph configs.
message GetAllGraphConfigsResponse {
  // List of GraphConfig response
  repeated GraphConfig configs = 1;
}

// Request to get a list of all graph configs for a given flag. For example, use_automatic_deployment to get all graph configs with automatic deployment enabled
message GetGraphConfigListRequest {
  // Flag to set graph-level deploy freeze. True is active.
  google.protobuf.BoolValue is_deploy_freeze_active = 1;
  // Flag that indicates if graph can use automatic deployment. True is when they can use
  google.protobuf.BoolValue use_automatic_deployment = 2;
}

// Response to get a list of all the graph configs for a given flag
message GetGraphConfigListResponse {
  // List of GraphConfig response
  repeated GraphConfig configs = 1;
}

// Return a list of graph names that can use automated deployment
message GetAutoDeployGraphNamesRequest {
  // Flag that indicates if graph can use automatic deployment. True is when they can use
  google.protobuf.BoolValue use_automatic_deployment = 1;
}

// Response to get a list of all the graph configs that can use automatic deployment
message GetAutoDeployGraphNamesResponse {
  // List of graph names
  repeated string names = 1;
}

// Request to update a graph config.
message UpdateGraphConfigRequest {
  // Required GraphConfig fields: name
  GraphConfig config = 1;
}

// Response to update a graph config.
message UpdateGraphConfigResponse {
  // Returns result of update
  google.protobuf.BoolValue success = 1;
  // Returns a message about the result
  google.protobuf.StringValue message = 2;
}

// Request to create/update bundles in service config.
message UpsertGraphConfigRequest {
  // Name of the graph, required.
  string name = 1;
  // List of environments the graph can deploy to
  repeated google.protobuf.StringValue environments = 2;
  // List of sandbox environments the graph can deploy to
  repeated google.protobuf.StringValue sandbox_environments = 3;
}

// Response to upsert a graph config.
message UpsertGraphConfigResponse {
  // Returns result of upsert
  google.protobuf.BoolValue success = 1;
  // Returns a message about the result
  google.protobuf.StringValue message = 2;
}
