syntax = "proto3";

// buf:lint:ignore DIRECTORY_SAME_PACKAGE
package com.doordash.rpc.merchant_order_service_async_api.v1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_outer_classname = "StoreEventScheduleServiceProto";
option java_package = "com.doordash.rpc.merchant_order_service_async_api";

// StoreEventScheduleService
service StoreEventScheduleService {
  // CreateStoreEventSchedules
  rpc CreateStoreEventSchedules(CreateStoreEventSchedulesRequest) returns (CreateStoreEventSchedulesResponse);
  // GetStoreEventSchedulesByStoreId
  rpc GetStoreEventSchedulesByStoreId(GetStoreEventSchedulesByStoreIdRequest) returns (GetStoreEventSchedulesByStoreIdResponse);
  // UpdateStoreEventSchedules
  rpc UpdateStoreEventSchedules(UpdateStoreEventSchedulesRequest) returns (UpdateStoreEventSchedulesResponse);
  // DeleteStoreEventSchedules
  rpc DeleteStoreEventSchedules(DeleteStoreEventSchedulesRequest) returns (DeleteStoreEventSchedulesResponse);
}

// CreateStoreEventSchedulesRequest
message CreateStoreEventSchedulesRequest {
  // store id
  google.protobuf.Int64Value store_id = 1;
  // store event schedules
  repeated StoreEventScheduleConfig store_event_schedule_configs = 2;
  // request user id
  google.protobuf.StringValue request_user_id = 3;
}

// CreateStoreEventSchedulesResponse
message CreateStoreEventSchedulesResponse {
  // store id
  google.protobuf.Int64Value store_id = 1;
  // store event schedules
  repeated StoreEventSchedule store_event_schedules = 2;
}

// GetStoreEventSchedulesByStoreIdRequest
message GetStoreEventSchedulesByStoreIdRequest {
  // store id
  google.protobuf.Int64Value store_id = 1;
  // query param
  QueryParam query_param = 2;
  // request user id
  google.protobuf.StringValue request_user_id = 3;

  // QueryParam
  message QueryParam {
    // schedule_type
    ScheduleType schedule_type = 1;
    // event_type
    EventType event_type = 2;
    // is_active
    google.protobuf.BoolValue is_active = 3;
  }
}

// GetStoreEventSchedulesByStoreIdResponse
message GetStoreEventSchedulesByStoreIdResponse {
  // store id
  google.protobuf.Int64Value store_id = 1;
  // store event schedules
  repeated StoreEventSchedule store_event_schedules = 2;
}

// UpdateStoreEventSchedulesRequest
message UpdateStoreEventSchedulesRequest {
  // store id
  google.protobuf.Int64Value store_id = 1;
  // store event schedules
  repeated StoreEventSchedule store_event_schedules = 2;
  // request user id
  google.protobuf.StringValue request_user_id = 3;
}

// UpdateStoreEventSchedulesResponse
message UpdateStoreEventSchedulesResponse {
  // store id
  google.protobuf.Int64Value store_id = 1;
  // store event schedules
  repeated StoreEventSchedule store_event_schedules = 2;
}

// DeleteStoreEventSchedulesRequest
message DeleteStoreEventSchedulesRequest {
  // store id
  google.protobuf.Int64Value store_id = 1;
  // store event schedule ids
  repeated google.protobuf.StringValue store_event_schedule_ids = 2;
  // request user id
  google.protobuf.StringValue request_user_id = 3;
}

// DeleteStoreEventSchedulesResponse
message DeleteStoreEventSchedulesResponse {}

// StoreEventSchedule
message StoreEventSchedule {
  // store id
  google.protobuf.Int64Value store_id = 1;
  // store event schedule id
  google.protobuf.StringValue store_event_schedule_id = 2;
  // store event schedule config
  StoreEventScheduleConfig store_event_schedule_config = 3;
  // is active
  google.protobuf.BoolValue is_active = 4;
}

// StoreEventScheduleConfig
message StoreEventScheduleConfig {
  // schedule type
  ScheduleType schedule_type = 1;
  // schedule
  oneof schedule_info {
    // cron schedule
    CronScheduleInfo cron_schedule_info = 2;
    // one shot schedule
    OneShotScheduleInfo one_shot_schedule_info = 3;
  }
  // event type
  EventType event_type = 4;
  // event context
  EventContext event_context = 5;
}

// StoreEventScheduleType
enum ScheduleType {
  // unspecified schedule type
  SCHEDULE_TYPE_UNSPECIFIED = 0;
  // cron schedule
  SCHEDULE_TYPE_CRON = 1;
  // one shot schedule
  SCHEDULE_TYPE_ONE_SHOT = 2;
}

// CronScheduleInfo
message CronScheduleInfo {
  // trigger minute
  google.protobuf.Int32Value trigger_minute = 1;
  // trigger hour
  google.protobuf.Int32Value trigger_hour = 2;
  // day of week, for weekly schedule only
  DayOfWeek day_of_week = 3;
}

// OneShotScheduleInfo
message OneShotScheduleInfo {
  // trigger time
  google.protobuf.Timestamp trigger_time = 1;
}

// Represents a day of week.
enum DayOfWeek {
  // The unspecified day-of-week.
  DAY_OF_WEEK_UNSPECIFIED = 0;

  // The day-of-week of Monday.
  DAY_OF_WEEK_MONDAY = 1;

  // The day-of-week of Tuesday.
  DAY_OF_WEEK_TUESDAY = 2;

  // The day-of-week of Wednesday.
  DAY_OF_WEEK_WEDNESDAY = 3;

  // The day-of-week of Thursday.
  DAY_OF_WEEK_THURSDAY = 4;

  // The day-of-week of Friday.
  DAY_OF_WEEK_FRIDAY = 5;

  // The day-of-week of Saturday.
  DAY_OF_WEEK_SATURDAY = 6;

  // The day-of-week of Sunday.
  DAY_OF_WEEK_SUNDAY = 7;
}

// EventType
enum EventType {
  // unspecified event type
  EVENT_TYPE_UNSPECIFIED = 0;
  // store kitchen busy
  EVENT_TYPE_STORE_KITCHEN_BUSY = 1;
}

// EventContext
message EventContext {
  // store kitchen busy context
  StoreKitchenBusyContext store_kitchen_busy_context = 1;
}

// StoreKitchenBusyContext
message StoreKitchenBusyContext {
  // additional prep duration in seconds added to order
  google.protobuf.Int64Value additional_prep_seconds = 1;
  // duration in seconds
  google.protobuf.Int64Value expiry_in_seconds = 2;
}
