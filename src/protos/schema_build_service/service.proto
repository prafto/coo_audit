syntax = "proto3";

package schema_build_service.v1;

import "google/protobuf/wrappers.proto";

option go_package = "github.com/doordash/services-protobuf/generated/schema_build_service/api/v1";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.schema_build_service.rpc.api";

// Schema build service
service SchemaBuildService {
  // Kick off gradle build
  rpc Build(BuildRequest) returns (BuildResponse);
  // Check build status
  rpc BuildStatus(BuildStatusRequest) returns (BuildStatusResponse);
  // Terminate build
  rpc BuildTerminate(BuildTerminateRequest) returns (BuildTerminateResponse);
}

// Build Request
message BuildRequest {
  // The sha of the commit
  string sha = 1;

  // The branch name
  string branch = 2;

  // Sha of merge-base for commit
  string merge_base_sha = 3;

  // timeout minutes
  int32 time_out = 4;

  // is this a cd build
  bool is_cd = 5;

  // changed targets
  repeated string changed_targets = 6;

  // project semver versions
  map<string, string> project_semver_versions = 7;
}

// The response of build request
message BuildResponse {
  // unique id for the build event
  string event_id = 1;
}

// Build status request
message BuildStatusRequest {
  // unique id for the build event
  string event_id = 1;
}

// Build status response
message BuildStatusResponse {
  // overall build status for the entire job
  BuildStatus job_status = 1;

  // build status for each project
  map<string, BuildStatus> project_status = 2;
}

// Build terminate request
message BuildTerminateRequest {
  // unique id for the build event
  string event_id = 1;
}

// Build terminate response
message BuildTerminateResponse {}

// build status enum
enum BuildStatus {
  // unknown status
  UNKNOWN = 0;
  // successful
  SUCCESS = 1;
  // failed
  FAILED = 2;
  // in progress
  IN_PROGRESS = 3;
  // not started
  NOT_STARTED = 4;
  // terminated
  TERMINATED = 5;
  // skipped
  SKIPPED = 6;
  // timeout
  TIME_OUT = 7;
  // initializing
  INITIALIZING = 8;
}
