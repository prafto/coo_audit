syntax = "proto3";

// buf:lint:ignore DIRECTORY_SAME_PACKAGE
package dasher_service.dasher_preference.v1;

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.dasher.dasher_preference";

import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

import "dasher_service/dasher_preference.proto";

// Preference service for dasher.
service DasherPreferenceService {
  // Gets the preference of a dasher.
  rpc GetDasherPreferences(GetDasherPreferencesRequest) returns (GetDasherPreferencesResponse);

  // Updates the preference of a dasher.
  rpc UpdateDasherPreferences(UpdateDasherPreferencesRequest) returns (UpdateDasherPreferencesResponse);

  // Lists the eligible preference types for given inputs.
  rpc ListEligiblePreferenceTypes(ListEligiblePreferenceTypesRequest) returns (ListEligiblePreferenceTypesResponse);

  // Fetches the information of eligible orders for the distance parameter in the preference.
  rpc FetchEligibleOrderInfoForDistance(FetchEligibleOrderInfoForDistanceRequest) returns (FetchEligibleOrderInfoForDistanceResponse);

  // Bulk update preferences for a set of dashers.
  rpc BulkUpdateDasherPreferences(BulkUpdateDasherPreferencesRequest) returns (BulkUpdateDasherPreferencesResponse);
}

// Request for GetDasherPreferences.
message GetDasherPreferencesRequest {
  // The id of the dasher to get the preference.
  int64 dasher_id = 1;

  // The types of the preferences to get.
  repeated string type = 2;
}

//Response for GetDasherPreferences.
message GetDasherPreferencesResponse {
  // The preferences requested.
  repeated DasherPreference preferences = 1;
}

// Request for UpdateDasherPreferences.
message UpdateDasherPreferencesRequest {
  // The dasher whose preference will be updated.
  int64 dasher_id = 1;

  // The preferences to update.
  repeated DasherPreference preferences = 2;
}

// Response for UpdateDasherPreferences.
message UpdateDasherPreferencesResponse {
  // Preferences updated.
  repeated DasherPreference preferences = 1;
}

// Request for ListEligiblePreferenceTypes.
message ListEligiblePreferenceTypesRequest {
  // ID of the dasher.
  int64 dasher_id = 1;

  // ID of the starting point.
  int64 sp_id = 2;
}

// Response for ListEligiblePreferenceTypes.
message ListEligiblePreferenceTypesResponse {
  // The eligible types of preferences requested.
  repeated string types = 1;
}

// Request for FetchEligibleOrderInfoForDistance.
message FetchEligibleOrderInfoForDistanceRequest{
  // ID of the starting point to fetch the eligible order info.
  int64 sp_id = 1;
}

// Response for FetchEligibleOrderInfoForDistance.
message FetchEligibleOrderInfoForDistanceResponse {
  // Entry describing eligible order info.
  message EligibleOrderInfoEntry{
    // The lower bound of this info entry.
    float distance = 1;

    // The percentage of eligible orders for the given distance.
    float percentage = 2;
  }

  // A sorted list (based on the distance) of entries. A distance within [distance1, distance2) of two adjacent entries
  // will be considered to have the percentage of the entries of distance1.
  // For example, if the entries contain [ {0, 0%}, {0.5, 25%}, {1.0, 78%}, {2.0, 99%} ] then for 25% for 0.5 and 0% for
  // 0.4.
  // Note: an ideal usage will be just using the distances in the entries as options, as for the example above, 0% for
  // 0.4, or 25% for 0.9 makes no sense. Unless the client introduces some logic to 'guess' the value, such as for a
  // distance falling in [distance1, distance2) with percentage1 and percentage2 as value, respectively, calculate
  // percentage = percentage1 + (distance - distance1) / (distance2 - distance1) * percentage2.
  repeated EligibleOrderInfoEntry entries = 1;
}

// Request for BulkUpdateDasherPreference.
message BulkUpdateDasherPreferencesRequest {
  // dasher id lists to update preference
  repeated int64 dasher_ids = 1;

  // the preference type to update. E.g. alcohol, dsd, etc.
  string preference_type = 2;

  // If this preference is to be opt in.
  bool is_opt_in = 3;
}

//Response for BulkUpdateDasherPreference.
message BulkUpdateDasherPreferencesResponse {
  // The list of dashers whose preference is updated successfully.
  repeated int64 succeeded_dasher_ids = 1;

  // The list of dashers whose preference is updated unsuccessfully.
  repeated int64 failed_dasher_ids = 2;
}