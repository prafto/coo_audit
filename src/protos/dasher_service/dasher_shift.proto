syntax = "proto3";

package dasher_service.shift;

import "common/money.proto";
import "common/service_client_config.proto";
import "dasher_service/dasher_api.proto";
import "dasher_service/dasher_common.proto";
import "dasher_service/dasher_dasher.proto";
import "dasher_service/dasher_earnings_mode.proto";
import "dasher_service/dasher_vehicle.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.dasher.shift";

service ShiftService {
  option (service_client.client_config).circuit_breaker_config.do_ignore_grpc_code = 9;

  rpc CreateShiftV2(CreateShiftV2Request) returns (CreateShiftV2Response);

  rpc GetShift(dasher_service.dasher_api.GetRequest) returns (Shift);

  rpc UpdateShiftV2(UpdateShiftV2Request) returns (UpdateShiftV2Response);

  rpc ExtendShiftV2(ExtendShiftV2Request) returns (ExtendShiftV2Response);

  rpc CancelShiftV2(CancelShiftV2Request) returns (CancelShiftV2Response);

  rpc CheckInShiftV2(CheckInShiftV2Request) returns (CheckInShiftV2Response);

  rpc PauseShiftV2(PauseShiftV2Request) returns (PauseShiftV2Response);

  rpc ResumeShift(ResumeShiftRequest) returns (ResumeShiftResponse);

  rpc CheckOutShiftV2(CheckOutShiftV2Request) returns (CheckOutShiftV2Response);

  rpc CheckOutShiftUpdateSchedulingTotals(CheckOutShiftUpdateSchedulingTotalsRequest) returns (Shift);

  rpc FindShiftsWithDeliveries(dasher_service.dasher_common.FindRequest) returns (dasher_service.dasher_common.FindResponse);

  rpc GetShiftExtendLimit(dasher_service.dasher_api.GetRequest) returns (GetShiftExtendLimitResponse);

  rpc GetStartingPointFromZipCode(dasher_service.dasher_api.CreateRequest) returns (GetStartingPointFromZipCodeResponse);

  rpc ListMostRecentShiftsByDasherIds(ListMostRecentShiftsByDasherIdsRequest) returns (ListMostRecentShiftsByDasherIdsResponse);

  rpc ListScheduledShifts(ListScheduledShiftsRequest) returns (stream ListScheduledShiftsResponse);

  rpc ListShiftsForDasher(ListShiftsForDasherRequest) returns (ListShiftsForDasherResponse);

  rpc CalculateAndSendRestRequirementCRMForShift(CalculateAndSendRestRequirementCRMForShiftRequest) returns (CalculateAndSendRestRequirementCRMForShiftResponse);

  rpc GetFutureScheduledShiftsForDasher(dasher_service.dasher_api.GetRequest) returns (GetFutureScheduledShiftsForDasherResponse);

  rpc GetCurrentShiftForDasher(dasher_service.dasher_api.GetRequest) returns (Shift);

  rpc UpdateShiftEta(UpdateShiftEtaRequest) returns (UpdateShiftEtaResponse);

  rpc UpdateShiftTaskEligibility(UpdateShiftTaskEligibilityRequest) returns (Shift);

  // Process a shift which is considered as WeDash.
  rpc ProcessWeDashShiftClose(ProcessWeDashShiftCloseRequest) returns (ProcessWeDashShiftCloseResponse);

  rpc GetShiftDetail(GetShiftDetailRequest) returns (GetShiftDetailResponse);

  rpc IndexShift(IndexShiftRequest) returns (IndexShiftResponse);

  rpc FixShiftTransactions(FixShiftTransactionsRequest) returns (FixShiftTransactionsResponse);

  rpc SearchShifts(SearchShiftsRequest) returns (SearchShiftsResponse);

  rpc GetRouteSegmentInfo(RouteSegmentInfoRequest) returns (RouteSegmentInfoResponse);

  rpc CloseOutShiftV2(CloseOutShiftV2Request) returns (CloseOutShiftV2Response);

  rpc GetTotalDeliveriesForDasher(GetTotalDeliveriesForDasherRequest) returns (GetTotalDeliveriesForDasherResponse);
}

message CreateShiftV2Request {
  // path params
  ShiftInfoParams shift_info_params = 1;

  // dasher id
  google.protobuf.Int32Value dasher_id = 2;

  // scheduled start time of the shift
  google.protobuf.Timestamp scheduled_start_time = 3;

  // scheduled end time of the shift
  google.protobuf.Timestamp scheduled_end_time = 4;

  // true if the dasher wasn't scheduled ahead of time
  google.protobuf.BoolValue is_impromptu_dash = 5;

  // true if allowed to ignore scheduling limits
  google.protobuf.BoolValue ignore_caps = 6;

  // true if allowed to ignore restrictions on shift length
  google.protobuf.BoolValue ignore_min_shift_duration = 7;

  // true if commute to home is enabled
  google.protobuf.BoolValue commute_enabled = 8;

  // starting point of the shift
  google.protobuf.Int32Value shift_starting_point_id = 9;

  // dasher vehicle info
  google.protobuf.Int32Value vehicle_id = 10;

  // dasher address info
  dasher.CommuteAddress commute_end_destination = 11;

  // client_version defines caller client version i.e. ios 2.024
  google.protobuf.StringValue client_version = 12;

  // auto assign
  google.protobuf.BoolValue auto_assign = 13;

  // shift type
  dasher_service.dasher_common.ShiftType shift_type = 14;
}

message CreateShiftV2Response {
  ShiftInfo shift_info = 1;

  google.protobuf.Timestamp created_at = 2;
}

message ExtendShiftV2Request {
  // path params
  ShiftInfoParams shift_info_params = 1;

  // shift id
  google.protobuf.Int64Value shift_id = 2;

  // scheduled end time
  google.protobuf.Timestamp scheduled_end_time = 3;

  // true if allowed to ignore scheduling limits
  google.protobuf.BoolValue ignore_caps = 4;
}

message ExtendShiftV2Response {
  ShiftInfo shift_info = 1;
}

message ResumeShiftRequest {
  int64 shift_id = 1;
}

message ResumeShiftResponse {
  ShiftInfo shift = 1;
}

message CheckInShiftV2Request {
  dasher_service.dasher_api.APIParams api_params = 1;
  int64 pk = 2;
  dasher_service.dasher_common.LatLng location = 3;
  bool is_commute_to_dash_v2_enabled = 4;
  dasher_service.dasher_earnings_mode.v1.EarningsMode earnings_mode = 5;
}

message CheckInShiftV2Response {
  int64 id = 1;
  google.protobuf.Timestamp check_in_time = 2;
  string commute_state = 3;
  google.protobuf.Timestamp commute_expire_time = 4;
  ExperimentInfo experiment_info = 5;
}

message ExperimentInfo {
  bool is_ppoh_enabled = 1;
}

message DasherOnboarding {
  int32 onboarding_type = 1;

  int32 tier = 2;
}

message CheckOutShiftV2Request {
  // path params
  ShiftInfoParams shift_info_params = 1;

  int64 shift_id = 2;
}

message CheckOutShiftV2Response {
  ShiftInfo shift = 1;
}

message CloseOutShiftV2Request {
  // path params
  ShiftInfoParams shift_info_params = 1;

  int64 shift_id = 2;
}

message CloseOutShiftV2Response {
  ShiftInfo shift = 1;
}

message CheckOutShiftUpdateSchedulingTotalsRequest {
  dasher_service.dasher_api.APIParams api_params = 1;

  int64 pk = 2;

  google.protobuf.Timestamp check_out_time = 5;
}

message Shift {
  int64 id = 1;

  int32 dasher_id = 2;

  int32 starting_point_id = 3;

  int32 vehicle_id = 4;

  google.protobuf.Timestamp scheduled_start_time = 5;

  google.protobuf.Timestamp scheduled_end_time = 6;

  google.protobuf.Timestamp check_in_time = 7;

  google.protobuf.Timestamp check_out_time = 8;

  google.protobuf.Timestamp close_out_time = 9;

  bool auto_assign = 10;

  int32 total_pay = 11;

  int32 rate_per_delivery = 12;

  int32 extra_amount_owed = 13;

  int32 amount_deducted = 14;

  int32 delivery_pay = 15;

  int32 boost_pay = 16;

  int32 reimbursement_amount = 17;

  int32 num_deliveries = 18;

  int32 tip_amount = 19;

  int32 sos_pay = 20;

  bool is_on_dynamic_pay_model = 21;

  google.protobuf.Timestamp cancelled_at = 22;

  bool is_no_show = 23;

  int32 transfer_id = 24;

  int64 transaction_id = 25;

  repeated RoutePoint route_history = 26;

  repeated float route_distances = 27;

  string delivery_payout_interval = 28;

  int32 tip_additive_pay_model_version = 29;

  float acceptance_rate_on_check_in = 30;

  string experiment_info = 31;

  int32 vehicle_type_id = 32;

  string vehicle_type_name = 33;

  repeated google.protobuf.Int64Value delivered_dasher_delivery_pay_ids = 34;

  google.protobuf.StringValue currency = 35;

  google.protobuf.Timestamp created_at = 36;

  google.protobuf.Timestamp updated_at = 37;

  google.protobuf.Timestamp active_date = 38;

  bool is_waiting_for_expected_assignment = 39;

  money.MonetaryFields total_pay_monetary_fields = 40;

  money.MonetaryFields amount_deducted_monetary_fields = 41;

  money.MonetaryFields extra_amount_owed_monetary_fields = 42;

  money.MonetaryFields delivery_pay_monetary_fields = 43;

  money.MonetaryFields boost_pay_monetary_fields = 44;

  money.MonetaryFields reimbursement_amount_monetary_fields = 45;

  money.MonetaryFields tip_amount_monetary_fields = 46;

  money.MonetaryFields sos_pay_monetary_fields = 47;

  money.MonetaryFields rate_per_delivery_monetary_fields = 48;

  int64 user_id = 49;

  google.protobuf.StringValue dasher_soft_skills = 50;

  bool notified_to_extend = 51;

  string commute_state = 52;

  google.protobuf.Timestamp commute_expire_time = 53;

  // commute to home preferences
  CommuteShiftPreference commute_shift_preference = 54;

  // shift type
  dasher_service.dasher_common.ShiftType shift_type = 55;
}

message ShiftStateChangeEvent {
  int64 shift_id = 1;

  int32 dasher_id = 2;

  string initial_commute_state = 3;

  string updated_commute_state = 4;

  google.protobuf.Timestamp initial_commute_expire_time = 5;

  google.protobuf.Timestamp updated_commute_expire_time = 6;

  float lat = 7;

  float lng = 8;
}

message ManualAssignInterval {
  // Reason for manually assigning the interval
  string reason = 1;
  // Start time of the manual interval
  google.protobuf.Timestamp start_time = 2;
}

message ShiftManualAssignInfo {
  // message ManualAssignInterval
  ManualAssignInterval current_manual_assign_interval = 1;
  // Maximum allowed time per Dash
  int32 allowed_ma_seconds = 2;
  // Remaining time in shift
  int32 remaining_ma_seconds = 3;
}

message ShiftPayInfo {
  // Total pay per shift
  int32 total_pay = 1;
  // Starting point base pay per delivery
  int32 rate_per_delivery = 2;
  // Extra pay per shift
  int32 extra_amount_owed = 3;
  // Deduct any penalties during shift + manual deduction
  int32 amount_deducted = 4;
  // Amount dasher is paid for deliveries during the shift
  int32 delivery_pay = 5;
  // Extra pay based on campaigns (obsolete ?)
  int32 boost_pay = 6;
  // Amount refunded to Dasher
  int32 reimbursement_amount = 7;
  int32 tip_amount = 8;
  // Busy (surge?) pay
  int32 sos_pay = 9;
  // Check if this delivery paid the dasher using the dynamic pay model
  bool is_on_dynamic_pay_model = 10;
  // Set to true if dashers are paid externally, which means we hide pay
  // details post dash. Usually means dasher is considered an employee and not
  // a contractor.This was needed for initial launch in Germany.
  bool is_base_pay_external = 11;
  // Set to true if we need to hide dash summary at end of dash. This was
  // needed for initial launch in Germany.
  bool skip_post_dash_screen = 12;
  // transaction_id for the shift
  google.protobuf.Int64Value transaction_id = 13;
  // transfer_id for the shift
  google.protobuf.Int32Value transfer_id = 14;
  // Delivery pay ids for the deliveries delivered during the shift
  repeated google.protobuf.Int64Value delivered_dasher_delivery_pay_ids = 15;
  // true if cash order can be assigned for the shift
  google.protobuf.BoolValue can_assign_cash_order = 16;
}

message ShiftPayInfoMonetaryFields {
  // MonetaryFields corresponding to ShiftPayInfo fields that store monetary
  // values.

  money.MonetaryFields total_pay_monetary_fields = 1;

  money.MonetaryFields amount_deducted_monetary_fields = 2;

  money.MonetaryFields extra_amount_owed_monetary_fields = 3;

  money.MonetaryFields delivery_pay_monetary_fields = 4;

  money.MonetaryFields boost_pay_monetary_fields = 5;

  money.MonetaryFields reimbursement_amount_monetary_fields = 6;

  money.MonetaryFields tip_amount_monetary_fields = 7;

  money.MonetaryFields sos_pay_monetary_fields = 8;

  money.MonetaryFields rate_per_delivery_monetary_fields = 9;
}

message ShiftStartingPoint {
  // StartingPoint ID.
  int32 id = 1;

  // Name of starting point.
  string name = 2;

  // StartingPoint's Market ID.
  int32 market_id = 3;

  // StartingPoint's short Name.
  string short_name = 4;
}

message CommuteToDashInfo {
  // State of dasher's commute, e.g. "commuting".
  string commute_state = 1;

  // Commute-to-dash expiry datetime.
  google.protobuf.Timestamp commute_expire_time = 2;

  // commute to home preferences
  CommuteShiftPreference commute_shift_preference = 3;
}

message CommuteShiftPreference {
  bool is_commute_home_enabled = 1;

  dasher_service.dasher.CommuteAddress commute_end_destination = 2;

  google.protobuf.Timestamp end_route_start_time = 3;

  string end_route_unavailable_reason = 4;
}

message ShiftInfo {
  // Base fields are default fields that are always set. If it's a direct read
  // from a column and/or computationally light then we set it as a base
  // field.

  // Shift ID.
  int64 id = 1;

  // Shift starting point, as read from the geo-intelligence service.
  ShiftStartingPoint starting_point = 2;

  // Scheduled start time for shift.
  google.protobuf.Timestamp scheduled_start_time = 3;

  // Schedule end time for shift.
  google.protobuf.Timestamp scheduled_end_time = 4;

  // Shift check in time.
  google.protobuf.Timestamp check_in_time = 5;

  // Shift check out time.
  google.protobuf.Timestamp check_out_time = 6;

  // Number of deliveries fulfilled during this shift.
  int32 num_deliveries = 7;

  // Whether dasher is already expecting an order to be assigned.
  bool is_waiting_for_expected_assignment = 8;

  // Whether or not dasher will be auto-assigned orders.
  bool auto_assign = 9;

  // Shift close out time.
  google.protobuf.Timestamp close_out_time = 10;

  // Shift experiment info.
  string experiment_info = 11;

  // Shift cancelled at time.
  google.protobuf.Timestamp cancelled_at = 12;

  // Commute Expire Time
  google.protobuf.Timestamp commute_expire_time = 13;

  // Dasher Id
  google.protobuf.Int64Value dasher_id = 14;

  // user id
  google.protobuf.Int64Value user_id = 15;

  // Reserve fields for future use-cases / extensibility

  // Fields that are computationally expensive (i.e. requires fanning out to
  // different services, performing DB joins, etc.) and can't be grouped based
  // on certain properties.

  // Latest date time that a dasher can extend a shift to.
  google.protobuf.Timestamp can_extend_until = 101;

  // Number of preassigned deliveries (early assign)
  google.protobuf.Int32Value num_preassigned_deliveries = 102;

  // Number of past consecutive unfulfilled deliveries. Computed by looping
  // through past assignments and checking to see how many have been
  // unassigned. Current deliveries in progress do not count and will be
  // skipped.
  google.protobuf.Int32Value past_consecutive_unfulfilled_deliveries = 103;

  // Whether or not this shift has any current deliveries that have not yet
  // been fulfilled.
  google.protobuf.BoolValue is_idle = 104;

  // Reserve fields for future use-cases / extensibility

  // Fields grouped on certain properties, such as fields associated with
  // manual assignment, pay information, etc.

  // Dasher's vehicle information. VehicleType is nested inside Vehicle.
  dasher_service.dasher_vehicle.Vehicle vehicle = 201;

  // Shift pay-related fields (see ShiftPayInfo).
  ShiftPayInfo shift_pay_info = 202;

  // Monetary fields for shift pay-related fields.
  ShiftPayInfoMonetaryFields shift_pay_info_monetary_fields = 203;

  // Shift fields related to manual assignment.
  ShiftManualAssignInfo shift_ma_info = 204;

  // Commute-to-dash fields
  CommuteToDashInfo commute_to_dash_info = 205;

  // Whether or not a delivery in the shift has delivery issues
  google.protobuf.BoolValue has_delivery_experience_issues = 206;

  // Shift resume time
  google.protobuf.Timestamp resume_time = 207;

  // Get total active time for a shift
  float active_time = 301;

  // shift type
  dasher_service.dasher_common.ShiftType shift_type = 302;
}

message ShiftInfoParams {
  // Sections to be projected in the ShiftInfo.

  // Grouped fields.
  bool include_vehicle = 1;
  bool include_shift_pay_info = 2;
  bool include_shift_pay_info_monetary_fields = 3;
  bool include_shift_ma_info = 4;
  bool include_commute_to_dash_info = 5;
  bool include_has_delivery_experience_issues = 6;

  // Computationally expensive fields.
  bool include_can_extend_until = 101;
  bool include_num_preassigned_deliveries = 102;
  bool include_past_consecutive_unfulfilled_deliveries = 103;
  bool include_is_idle = 104;

  // get shift related active time info
  bool include_active_time_info = 301;
}

message GetShiftExtendLimitResponse {
  google.protobuf.Timestamp can_extend_until = 1;
}

message RoutePoint {
  int32 delivery_id = 1;

  string type = 2;

  float lat = 3;

  float lng = 4;

  google.protobuf.Timestamp calculated_time = 5;

  google.protobuf.Timestamp actual_time = 6;

  float stdev = 7;
}

message GetStartingPointFromZipCodeResponse {
  int32 id = 1;
}

message ListMostRecentShiftsByDasherIdsRequest {
  repeated int32 ids = 1;
}

message ListMostRecentShiftsByDasherIdsResponse {
  repeated Shift shifts = 1;
}

message CalculateAndSendRestRequirementCRMForShiftRequest {
  int64 pk = 1;
}

message ListScheduledShiftsRequest {
  int32 starting_point_id = 1;

  google.protobuf.Timestamp scheduled_start_time = 2;
}

message ListScheduledShiftsResponse {
  repeated Shift shifts = 1;
}

message ListShiftsForDasherRequest {
  // Required field.
  int32 dasher_id = 1;

  // Define the projection for each Shift.
  ShiftInfoParams shift_info_params = 2;

  // If specified, limits the number of shifts returned to this number.
  // If set to a value less than or equal to 0, logs a warning and returns an
  // empty response.
  // If unset (null), defaults to 25.
  google.protobuf.Int32Value limit = 3;

  // If both start_time and end_time are set, return shifts where scheduled_start_time falls
  // within the range (start_time, end_time) inclusive.
  // Otherwise returns current and upcoming shifts.
  google.protobuf.Timestamp start_time = 4;
  google.protobuf.Timestamp end_time = 5;

  // Include only completed shifts, i.e. checked in and closed out.
  // If start_time and end_time are not both set, this parameter is ignored.
  bool include_only_completed_shifts = 6;
}

message ListShiftsForDasherResponse {
  repeated ShiftInfo shifts = 1;
}

message CancelShiftV2Request {
  int64 shift_id = 1;
}

message CancelShiftV2Response {
  ShiftInfo shift = 1;
}

message PauseShiftV2Request {
  int64 shift_id = 1;

  bool paused_by_dasher = 2;

  string pause_reason = 3;

  int64 allowed_seconds = 4;
}

message PauseShiftV2Response {
  ShiftInfo shift = 1;
}

message CalculateAndSendRestRequirementCRMForShiftResponse {
  bool rest_break_required = 1;
}

message GetFutureScheduledShiftsForDasherResponse {
  repeated Shift shifts = 1;
}

message UpdateShiftEtaRequest {
  int64 shift_id = 1;

  string reason = 2;

  float lat = 3;

  float lng = 4;
}

message UpdateShiftEtaResponse {
  int64 id = 1;

  google.protobuf.Timestamp commute_expire_time = 2;

  string commute_state = 3;
}

message UpdateShiftTaskEligibilityRequest {
  int64 shift_id = 1;

  repeated string supported_task_group_types = 2;
}

message ProcessWeDashShiftCloseRequest {
  // Id of the WeDash shift.
  int64 shift_id = 1;

  // Dasher id of this shift.
  int64 dasher_id = 2;
}

message ProcessWeDashShiftCloseResponse {
  // Success flag.
  bool success = 1;

  // A developer-facing human-readable error message in English.
  // It should explain the error and offer an actionable resolution to it.
  google.protobuf.StringValue error_message = 2;

  // A simple error code that can be easily handled by the client.
  // The actual error code is defined by `google.rpc.Code`.
  google.protobuf.Int32Value error_code = 3;
}

message GetShiftDetailRequest {
  // Required field
  int64 shift_id = 1;

  // Indicator for whether or not to use cache to fetch shift fields which
  // are directly available from shift database.
  bool use_cache = 2;

  // Define the projection for each Shift.
  ShiftInfoParams shift_info_params = 3;
}

message GetShiftDetailResponse {
  ShiftInfo shift_detail = 1;
}

message ShiftMergeEvent {
  int32 dasher_id = 1;

  google.protobuf.Timestamp requested_start_time = 2;

  google.protobuf.Timestamp requested_end_time = 3;

  bool is_dash_now = 4;

  int64 updated_shift_id = 5;

  google.protobuf.Timestamp updated_shift_original_start_time = 6;

  google.protobuf.Timestamp updated_shift_original_end_time = 7;

  google.protobuf.Timestamp updated_shift_new_start_time = 8;

  google.protobuf.Timestamp updated_shift_new_end_time = 9;

  repeated int64 canceled_shift_ids = 10;
}

message ShiftLogEvent {
  // enums for shift log event types
  enum EventType {
    // unspecified
    EVENT_TYPE_UNSPECIFIED = 0;
    // shift creation attempt
    EVENT_TYPE_CREATE = 1;
  }
  // can add more enums to ShiftLogEventType to expand use cases
  EventType event_type = 1;

  // enums for shift log event status
  enum EventStatus {
    // unspecified
    EVENT_STATUS_UNSPECIFIED = 0;
    // successful call
    EVENT_STATUS_SUCCESS = 1;
    // error returned
    EVENT_STATUS_ERROR = 2;
  }
  // will be used to determine if the log is for a successful call or an error, can be expanded for other statuses
  EventStatus status = 2;

  int32 dasher_id = 3;

  // used only when an error is thrown
  string error_message = 4;

  // flexible field for generalizable logging of events
  oneof event {
    CreateShiftLogEvent create = 5;
  }
}

message CreateShiftLogEvent {
  // the scheduled start time of the shift
  google.protobuf.Timestamp scheduled_start_time = 1;
  // the scheduled end time of the shift
  google.protobuf.Timestamp scheduled_end_time = 2;
  // the starting point in which the shift was started on
  int32 starting_point_id = 3;
  // true if the dasher wasn't scheduled ahead of time
  bool is_impromptu_dash = 4;
  // true if allowed to ignore scheduling limits
  bool ignore_caps = 5;
}

message ShiftLogEventV2 {
  // general fields for all shift logging events
  // type of event (create, update etc.)
  google.protobuf.StringValue event_type = 1;
  // will be used to determine if the log is for a successful call or an error
  google.protobuf.BoolValue is_success = 2;
  // dasher id
  google.protobuf.Int32Value dasher_id = 3;
  // used only when an error is thrown
  google.protobuf.StringValue error_message = 4;

  // special fields for create shift logging. can be used for other use cases too
  // the scheduled start time of the shift
  google.protobuf.Timestamp scheduled_start_time = 5;
  // the scheduled end time of the shift
  google.protobuf.Timestamp scheduled_end_time = 6;
  // the starting point for the shift
  google.protobuf.Int32Value starting_point_id = 7;
  // true if the dash wasn't scheduled ahead of time
  google.protobuf.BoolValue is_impromptu_dash = 8;
  // true if allowed to ignore scheduling limits
  google.protobuf.BoolValue ignore_caps = 9;

  // dasher ratings info
  google.protobuf.StringValue dasher_ratings_info = 10;

  // shift id if shift successfully created
  google.protobuf.Int64Value shift_id = 11;
}

message IndexShiftRequest {
  int64 shift_id = 1;
}

message IndexShiftResponse {
  // Success flag.
  bool success = 1;

  // A developer-facing human-readable error message in English.
  // It should explain the error and offer an actionable resolution to it.
  google.protobuf.StringValue error_message = 2;

  // A simple error code that can be easily handled by the client.
  // The actual error code is defined by `google.rpc.Code`.
  google.protobuf.Int32Value error_code = 3;
}

message FixShiftTransactionsRequest {
  /*
     To identify if the source of the request is Cadence or the Bulk Tool: If fetch_shifts is true, then we would ignore
     the shift_id arguments and have the gRPC endpoint itself retrieve the required data (shift rows that have been
     checked out between 45 and 40 minutes from the current time).
  */
  bool fetch_shifts = 1;

  repeated int64 shift_ids = 2;
}

message FixShiftTransactionsResponse {
  repeated ShiftTransactionResult fix_results = 1;
}

message ShiftTransactionResult {
  //Describes the type of error found:
  enum ErrorType {
    //no known error found
    ERROR_TYPE_NONE_OR_UNSPECIFIED = 0;
    //shift has no transaction whatsoever
    ERROR_TYPE_MISSING_TRANSACTION = 1;
    //transaction exists in transaction DB however shift.transaction == null
    ERROR_TYPE_UNMATCHED_TRANSACTION = 2;
    //shift.amount != sum(transaction.amount)
    ERROR_TYPE_SHIFT_TRANSACTION_AMOUNT = 3;
  }
  ErrorType error_type = 1;

  //Describes the result of the fix
  enum FixResult {
    //No fix applied to given row
    FIX_RESULT_NONE_OR_UNSPECIFIED = 0;
    //successfully fixed shift-transaction error.
    FIX_RESULT_SUCCESSFUL = 1;
    //unsuccessful at fixing known shift-transaction error.
    FIX_RESULT_FAILED = 2;
  }
  FixResult fix_result = 2;

  //In the case of error type 1 or 3, we create a new delta transaction.
  google.protobuf.Int64Value created_transaction_id = 3;

  Shift shift = 4;
}

message UpdateShiftV2Request {
  google.protobuf.Int64Value shift_id = 1;

  UpdateShiftBody update_shift_body = 2;

  ShiftInfoParams shift_info_params = 3;
}

message UpdateShiftV2Response {
  ShiftInfo shift = 1;
}

message UpdateShiftBody {
  // the scheduled start time of the shift
  google.protobuf.Timestamp scheduled_start_time = 1;
  // the scheduled end time of the shift
  google.protobuf.Timestamp scheduled_end_time = 2;
  // the starting point in which the shift was started on
  google.protobuf.Int32Value starting_point_id = 3;
  // true if allowed to ignore scheduling limits
  google.protobuf.BoolValue ignore_caps = 4;
  // Extra pay per shift
  google.protobuf.Int32Value extra_amount_owed = 5;
  // Amount refunded to Dasher
  google.protobuf.Int32Value reimbursement_amount = 6;
  // Commute address for dasher
  google.protobuf.StringValue commute_address = 7;
  // Commute Toggle Preference
  google.protobuf.BoolValue commute_toggle_preference = 8;
  // true if auto assign
  google.protobuf.BoolValue auto_assign = 9;
  // the id of the starting point to be switched into
  google.protobuf.Int32Value switch_starting_point_id = 10;
  // true if is waiting for expected assignment
  google.protobuf.BoolValue is_waiting_for_expected_assignment = 11;
  // true if caller is Dispatcher
  google.protobuf.BoolValue is_dispatcher = 12;
  // transaction id for the shift
  google.protobuf.Int64Value transaction_id = 13;
  // total pay for the shift
  google.protobuf.Int32Value total_pay = 14;
  // delivery pay for the shift
  google.protobuf.Int32Value delivery_pay = 15;
  // tip amount for the shift
  google.protobuf.Int32Value tip_amount = 16;
  // true if cash order can be assigned for the shift
  google.protobuf.BoolValue can_assign_cash_order = 17;
}

message SearchShiftsRequest {
  // the Market ID of the shift
  google.protobuf.Int32Value market_id = 1;
  // the Sub-Market ID of the shift
  google.protobuf.Int32Value submarket_id = 2;
  // the starting point in which the shift was started on
  google.protobuf.Int32Value starting_point_id = 3;
  // the Vehicle Type ID of the shift
  google.protobuf.Int32Value vehicle_type_id = 4;
  // true if the dasher is on shift
  google.protobuf.BoolValue on_shift = 5;
  // true if the shift is active
  google.protobuf.BoolValue active = 6;
  // true if the shift is free
  google.protobuf.BoolValue free_only = 7;
  // true if the shift is manual
  google.protobuf.BoolValue on_manual = 8;
  // the shifts which has scheduled_start_time gte start_time
  google.protobuf.Timestamp start_time = 9;
  // the shifts which has scheduled_start_time lte end_time
  google.protobuf.Timestamp end_time = 10;
  // true if searching for shifts that are completed/closed-out
  google.protobuf.BoolValue completed = 11;
  // query string param
  google.protobuf.StringValue query_string = 12;
  // offset for the search query
  google.protobuf.Int32Value offset = 13;
  // limit the number of search results
  google.protobuf.Int32Value limit = 14;
  // return count instead of shift list
  google.protobuf.BoolValue count_only = 15;
  // Define the projection for each Shift.
  ShiftInfoParams shift_info_params = 16;
}

message DasherInfo {
  // first name of the dasher
  google.protobuf.StringValue first_name = 1;
  // last name of the dasher
  google.protobuf.StringValue last_name = 2;
  // dasher id
  google.protobuf.Int64Value id = 3;
  // timezone the dasher is operating in
  google.protobuf.StringValue timezone = 4;
  // status of dasher if is_online
  google.protobuf.BoolValue is_online = 5;
  //onboardings
  repeated DasherOnboarding dasher_onboardings = 6;
}

message ShiftDasherInfo {
  // shift related info for the desired shift
  ShiftInfo shift_info = 1;
  // dasher info for the dasher of desired shift
  DasherInfo dasher_info = 2;
}

message SearchShiftsResponse {
  // return list of shifts fetched for given set of params
  repeated ShiftDasherInfo shifts = 1;
  // return the count of filtered shifts
  google.protobuf.Int32Value count = 2;
}

message RouteSegmentInfo {
  // dasher id
  google.protobuf.Int64Value dasher_id = 1;

  // delivery id
  google.protobuf.Int64Value delivery_id = 2;

  // shift id
  google.protobuf.Int64Value shift_id = 3;

  // start time
  google.protobuf.Timestamp start_time = 4;

  // end time
  google.protobuf.Timestamp end_time = 5;

  // fallback reason
  google.protobuf.StringValue fallback_reason = 6;

  // mileage
  google.protobuf.DoubleValue mileage = 7;
}

message RouteSegmentInfoRequest {
  // delivery id
  google.protobuf.Int64Value delivery_id = 1;

  // shift id
  google.protobuf.Int64Value shift_id = 2;
}

message RouteSegmentInfoResponse {
  // Route Segment Info
  RouteSegmentInfo route_segment_info = 1;
}

message GetTotalDeliveriesForDasherRequest {
  // Dasher Id (Required)
  int64 dasher_id = 1;
  // shift close_out_time gte start_time (Required)
  google.protobuf.Timestamp start_time = 2;
  // shift close_out_time lte end_time (Required)
  google.protobuf.Timestamp end_time = 3;
}

message GetTotalDeliveriesForDasherResponse {
  // Total deliveries count in the given time range.
  int32 count = 1;
}

message ActiveShiftCounts {
  google.protobuf.Int64Value db_count = 1;
  google.protobuf.Int64Value redis_count = 2;
}
