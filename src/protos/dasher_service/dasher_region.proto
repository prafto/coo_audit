syntax = "proto3";

package dasher_service.region;

import "common/money.proto";
import "dasher_service/dasher_earnings_mode.proto";
import "dasher_service/dasher_pay_campaign.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "supply_demand_service/supply_demand_service.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.dasher.region";

service StartingPointService {
  rpc StartingPointListView(StartingPointListViewRequest) returns (StartingPointListViewResponse);
  rpc SaveStartingPointsPreference(SaveStartingPointsPreferenceRequest) returns (SaveStartingPointsPreferenceResponse);
}

message StartingPointListViewRequest {
  google.protobuf.Int32Value dasher_id = 1;

  google.protobuf.FloatValue lat = 2;

  google.protobuf.FloatValue lng = 3;

  google.protobuf.Int32Value vehicle_type_id = 4;

  google.protobuf.Int64Value shift_id = 5;

  google.protobuf.BoolValue is_dasher_preference_enabled = 6;
}

message StartingPointListViewResponse {
  repeated StartingPointListViewMap response = 1;

  google.protobuf.Int32Value dasher_market_id = 2;
}

message SaveStartingPointsPreferenceRequest {
  google.protobuf.Int32Value dasher_id = 1;

  google.protobuf.FloatValue lat = 2;

  google.protobuf.FloatValue lng = 3;

  repeated int32 selected_starting_point_ids = 4;
}

message SaveStartingPointsPreferenceResponse {
  google.protobuf.Int32Value preference_id = 1;

  google.protobuf.Int32Value dasher_id = 2;

  repeated int32 selected_starting_point_ids = 3;

  google.protobuf.Timestamp updated_at = 4;
}

message StartingPoint {
  int32 id = 1;

  int32 consumer_order_open_pad = 2;

  int32 consumer_order_close_pad = 3;

  int32 market_id = 4;

  int32 submarket_id = 5;

  string name = 6;

  string shortname = 7;

  google.protobuf.Timestamp activation_time = 8;

  google.protobuf.Timestamp deactivation_time = 9;

  int32 rate_per_delivery = 10;

  string ideal_flfs = 11;

  google.protobuf.StringValue geometry = 12; // GeoJson Format

  money.MonetaryFields rate_per_delivery_monetary_fields = 13;
}

message StartingPointListViewMap {
  int32 starting_point_id = 1;

  bool is_outside_dasher_current_market = 2;

  dasher_service.pay_campaign.Boost active_boost = 3;

  repeated dasher_service.pay_campaign.Boost upcoming_boosts = 4;

  StartingPoint starting_point = 5;

  Location location = 6;

  repeated string encoded_polyline = 7;

  map<string, supply_demand_service.VehicleDashStatus> vehicle_dash_status = 8;

  bool is_selected_by_dasher_preference = 9;

  CommuteToDash commute_to_dash = 10;

  HighQualityHighPay high_quality_high_pay = 11;

  TimeMode time_mode = 12;
}

message Location {
  float lat = 1;

  float lng = 2;
}

message CommuteToDash {
  bool is_commutable = 1;

  float max_auto_assign_meters = 2;

  bool is_commutable_v2 = 3;

  float max_auto_assign_meters_v2 = 4;

  bool is_commutable_home = 5;

  float max_auto_assign_meters_home = 6;
}

message HighQualityHighPay {
  bool high_quality_high_pay_enabled = 1;
}

// Time mode info for a starting point.
message TimeMode {
  // Whether time mode peak pay is available for this staring point.
  bool is_enabled = 1;

  // The hourly pay info of this starting point.
  money.MonetaryFields hourly_pay_monetary_fields = 2;

  // The peak pay info of this starting point.
  dasher_service.pay_campaign.Boost active_boost = 3;

  // Whether the starting point still have available time mode slots to schedule new time mode shifts.
  bool is_cap_available = 4;

  // Flag that indicates if dasher is eligible for time mode
  bool is_time_mode_eligible = 5;

  // Information for dash now panel
  dasher_service.dasher_earnings_mode.v1.DashNowPanelInfo dash_now_panel_info = 6;

  // Enable PPAH experience on home screen
  bool is_ppah_enabled = 7;

  // Enable time mode ineligibility experience due to contract violations
  bool is_locked_due_to_contract_violations = 8;
}

// proto message for Locate Dasher Iguazu Event
message LocateDasherLogEvent {
  google.protobuf.Int32Value dasher_id = 1;

  // market id from the getDistrictByPt or from defaulting
  google.protobuf.Int32Value current_market_id = 2;

  // default market id from Dx object
  google.protobuf.Int32Value default_market_id = 3;

  // sp id from sorting sps from getDistrictByPt
  google.protobuf.Int32Value current_sp_id = 4;

  // default sp id from the Dx object
  google.protobuf.Int32Value default_sp_id = 5;

  // distance from dasher to default sp
  google.protobuf.FloatValue distance_away_from_default_sp = 6;

  // distance from dasher to current sp
  google.protobuf.FloatValue distance_away_from_current_sp = 7;

  // location coordinates
  google.protobuf.FloatValue lat = 8;

  google.protobuf.FloatValue lng = 9;

  // check to see if getDistrictByPt succeeded
  google.protobuf.BoolValue get_district_by_pt_success = 10;

  // id of the district obtained from getDistrictByPt
  google.protobuf.Int32Value district_id = 11;
}
