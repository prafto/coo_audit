syntax = "proto3";

package dasher_service.ratings_platform.v1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.dasher.ratings_platform";

// This service holds the APIs for the dasher ratings platform.
service DasherRatingsPlatformService {
  // RPCs below are only supposed to be used within the ratings platform, no external callers.
  // Update the rating history for a dasher by the type of rating. If there is no existing rating history, a new one
  // will be created.
  rpc UpsertDasherRatingHistory(UpsertDasherRatingHistoryRequest) returns (UpsertDasherRatingHistoryResponse);
  // Compute and update the rating value for a dasher by the type of rating.
  rpc ComputeAndUpdateDasherRatings(ComputeAndUpdateDasherRatingsRequest) returns (ComputeAndUpdateDasherRatingsResponse);
  // Get the list of rating history for a dasher by the types of rating.
  rpc GetDasherRatingsHistory(GetDasherRatingsHistoryRequest) returns (GetDasherRatingsHistoryResponse);
  // Populate the rating history for a dasher for each of the rating types
  rpc PopulateDasherRatingHistory(PopulateDasherRatingHistoryRequest) returns (PopulateDasherRatingHistoryResponse);
  // Prune the dasher ratings history for rating types based on their individual limits.
  rpc PruneDasherRatingsHistory(PruneDasherRatingsHistoryRequest) returns (PruneDasherRatingsHistoryResponse);
  // Get the current ratings for a dasher
  rpc GetDasherCurrentRatings(GetDasherCurrentRatingsRequest) returns (GetDasherCurrentRatingsResponse);
  // Waive or exclude a delivery (or delivery package) from the dasher rating history.
  rpc WaiveExcludeDasherRatingHistory(WaiveExcludeDasherRatingHistoryRequest) returns (WaiveExcludeDasherRatingHistoryResponse);
  // Bulk Waive or exclude a delivery (or delivery package) from the dasher rating history. This can be later integrated with the bulk tooling.
  rpc BulkWaiveExcludeDasherRatingHistory(BulkWaiveExcludeDasherRatingHistoryRequest) returns (BulkWaiveExcludeDasherRatingHistoryResponse);
  // Update/Insert ratings metadata by region (submarket/starting point).
  rpc UpsertRatingsMetadataByRegion(UpsertRatingsMetadataByRegionRequest) returns (UpsertRatingsMetadataByRegionResponse);
  // Dispute a rating for a dasher and rating for the package/delivery.
  rpc DisputeRating(DisputeRatingRequest) returns (DisputeRatingResponse);
}

// Request for UpsertDasherRatingHistory.
message UpsertDasherRatingHistoryRequest {
  // Id of the dasher.
  int64 dasher_id = 1;

  // List of rating types to update history for.
  repeated RatingType rating_types = 2;

  // Delivery status history used for updating the rating history. Delivery status will be de-duplicated using the
  // delivery id or package id. If there already exists a record in the current history, it will be updated using this
  // value in the request.
  DeliveryStatusHistory.DeliveryStatus delivery_status = 3;

  // The customer rating data
  CustomerRatingHistory.CustomerRatingData customer_rating_data = 4;
}

// Response for UpsertDasherRatingHistory. Left empty in case there are return values needed in the future.
message UpsertDasherRatingHistoryResponse {}

// Request for ComputeAndUpdateDasherRatings.
message ComputeAndUpdateDasherRatingsRequest {
  // Id of the dasher.
  int64 dasher_id = 1;

  // List of rating types to compute and update the rating value.
  repeated RatingType rating_types = 2;
}

// Response for ComputeAndUpdateDasherRatings.
message ComputeAndUpdateDasherRatingsResponse {}

// Request for GetDasherRatingsHistory.
message GetDasherRatingsHistoryRequest {
  // Id of the dasher.
  int64 dasher_id = 1;

  //List of rating types to get the rating history.
  repeated RatingType rating_types = 2;
}

// Response for GetDasherRatingsHistory.
message GetDasherRatingsHistoryResponse {
  // List of dasher rating history for the given list of rating_types
  repeated DasherRatingHistory dasher_rating_histories = 1;
}

// Request for PopulateDasherRatingHistory.
message PopulateDasherRatingHistoryRequest {
  // Id of the dasher.
  int64 dasher_id = 1;

  // List of rating types to compute and update the rating value.
  repeated RatingType rating_types = 2;
}

// Response for PopulateDasherRatingHistory.
message PopulateDasherRatingHistoryResponse {}

// Request for PruneDasherRatingsHistory
message PruneDasherRatingsHistoryRequest {
  // Id of the dasher.
  int64 dasher_id = 1;

  // List of rating types to compute and update the rating value.
  repeated RatingType rating_types = 2;
}

// Response for PruneDasherRatingsHistory.
message PruneDasherRatingsHistoryResponse {}

// Rating type to specify the types of rating.
enum RatingType {
  // Unspecified type
  RATING_TYPE_UNSPECIFIED = 0;
  // Acceptance Rate
  RATING_TYPE_ACCEPTANCE_RATE = 1;
  // Completion Rate
  RATING_TYPE_COMPLETION_RATE = 2;
  // Expected Acceptance Rate, calculated along with Acceptance Rate.
  // This is the assuming the next assignment is declined.
  RATING_TYPE_EXPECTED_ACCEPTANCE_RATE = 3;
  // Expected Completion Rate, calculated along with Completion Rate.
  // This is the assuming the next confirmed assignment is not completed.
  RATING_TYPE_EXPECTED_COMPLETION_RATE = 4;
  // On time ratings
  RATING_TYPE_ON_TIME = 5;
  // Customer rating
  RATING_TYPE_CUSTOMER_RATING = 6;
  // High Quality Rating
  RATING_TYPE_HIGH_QUALITY = 7;
}

// Request for GetDasherCurrentRatings
message GetDasherCurrentRatingsRequest {
  // Id of the dasher.
  int64 dasher_id = 1;
  // List of rating types for which to return the rating value.
  repeated RatingType rating_types = 2;
  // Indicates if the rating history snapshot is required to be returned.
  bool is_rating_history_snapshot_required = 3;
}

// Response for GetDasherCurrentRatings.
message GetDasherCurrentRatingsResponse {
  // List of dasher ratings for the given list of rating_types
  repeated DasherRating dasher_ratings = 1;
}

// Request for WaiveExcludeDasherRatingHistory.
message WaiveExcludeDasherRatingHistoryRequest {
  // Dasher ID for which the deliveries need to be waived or excluded from.
  int64 dasher_id = 1;
  // The list of delivery UUIDs that need to be waived or excluded.
  repeated string delivery_uuid = 2;
  // The list of delivery package IDs that need to be waived or excluded.
  repeated string delivery_package_id = 3;

  // The reason for waiving the deliveries. This will be written into the delivery status history meaning the delivery
  // or the delivery package was waived.
  google.protobuf.StringValue waive_reason = 4;
  // The reason for excluding the deliveries. This will be written into the delivery status history meaning the delivery
  // or the delivery package was excluded.
  google.protobuf.StringValue exclude_reason = 5;

  // The timestamp on which the waiver or exclusion was created.
  google.protobuf.Timestamp timestamp = 6;

  // The rating types to which the waiver or exclusion should be applied.
  repeated RatingType rating_types = 7;

  // The reason for waiving the pickup
  google.protobuf.StringValue pickup_waived_reason = 8;

  // The reason for waiving the dropoff
  google.protobuf.StringValue dropoff_waived_reason = 9;
}

// Response for WaiveExcludeDasherRatingHistory.
message WaiveExcludeDasherRatingHistoryResponse {}

// Request for BulkWaiveExcludeDasherRatingHistory.
message BulkWaiveExcludeDasherRatingHistoryRequest {
  // The list of WaivedExcludedDelivery objects.
  repeated WaivedExcludedDelivery waived_excluded_deliveries = 1;
}

// Response for WaiveExcludeDasherRatingHistory.
message BulkWaiveExcludeDasherRatingHistoryResponse {}

// Request to update/insert ratings metadata by region (submarket/starting point).
message UpsertRatingsMetadataByRegionRequest {
  // The ratings metadata by region.
  RatingsMetadataByRegion rating_metadata_by_region = 1;
  // Operation mode
  OperationMode operation_mode = 2;

  // Operation Mode
  enum OperationMode {
    // Invalid Operation Mode
    OPERATION_MODE_UNSPECIFIED = 0;
    // Rollback mode, it will set the regions is_active flag to false.
    OPERATION_MODE_ROLLBACK = 1;
    // Normal mode, it will insert the metadata by region
    OPERATION_MODE_NORMAL = 2;
  }
}

// Response for UpsertRatingsMetadataByRegion.
message UpsertRatingsMetadataByRegionResponse {}

// Request for DisputeRating.
message DisputeRatingRequest {
  // Dasher ID for which the rating needs to be disputed.
  int64 dasher_id = 1;
  // The rating type to dispute.
  RatingType rating_type = 2;
  // The delivery package ID that need to be disputed.
  google.protobuf.StringValue delivery_package_id = 3;
  // The delivery UUID that need to be disputed. This can be used for rating that depend on delivery level info.
  google.protobuf.StringValue delivery_uuid = 4;
  // The dispute type.
  DisputeType dispute_type = 5;
  // The dispute description which captures the free form text about the dispute.
  google.protobuf.StringValue dispute_description = 6;
}

// Response for DisputeRating.
message DisputeRatingResponse {
  // The status of the dispute.
  DisputeStatus dispute_status = 1;
}

// Keeping this outside, as it can used if we want to support bulk disputes in future.
// Dispute type enum
enum DisputeType {
  //  Unspecified dispute type
  DISPUTE_TYPE_UNSPECIFIED = 0;
  // Long MX wait time dispute type
  DISPUTE_TYPE_LONG_MX_WAIT_TIME = 1;
  // Difficult dropoff location dispute type
  DISPUTE_TYPE_DIFFICULT_DROPOFF_LOCATION = 2;
  // Unexpected traffic/road closure dispute type
  DISPUTE_TYPE_UNEXPECTED_TRAFFIC_ROAD_CLOSURE = 3;
  // Issues with parking dispute type
  DISPUTE_TYPE_ISSUES_WITH_PARKING = 4;
  // Other dispute type
  DISPUTE_TYPE_OTHER = 5;
}

// Dispute status enum
enum DisputeStatus {
  // Unspecified dispute status
  DISPUTE_STATUS_UNSPECIFIED = 0;
  // Dispute approved status
  DISPUTE_STATUS_APPROVED = 1;
  // Dispute rejected status
  DISPUTE_STATUS_REJECTED = 2;
}

// Ratings metadata by region.
message RatingsMetadataByRegion {
  // Region to which the metadata belongs.
  RegionList region_list = 1;
  // Metadata type
  MetadataType metadata_type = 2;
  // Ratings metadata
  RatingsMetadata metadata = 3;

  // Region object
  message RegionList {
    // Type of the region
    RegionType region_type = 1;
    // Region IDs
    repeated int64 region_ids = 2;

    // Region Type
    enum RegionType {
      // Invalid Region Type
      REGION_TYPE_UNSPECIFIED = 0;
      // Submarket
      REGION_TYPE_SUBMARKET = 1;
      // Starting Point
      REGION_TYPE_STARTING_POINT = 2;
    }
  }
}

// ratings metadata
message RatingsMetadata {
  // Metadata for the ratings
  oneof metadata {
    // OTR Buffer Metadata
    OnTimeRatingBuffer on_time_rating_buffer = 1;
    // Rating Scores Metadata
    RatingScoresMetadata rating_scores_metadata = 2;
  }
}

// Metadata Type
enum MetadataType {
  // unspecified or NA
  METADATA_TYPE_UNSPECIFIED = 0;
  // OTR Buffer
  METADATA_TYPE_OTR_BUFFER = 1;
  // Rating Scores
  METADATA_TYPE_RATING_SCORES = 2;
}

// Waived/excluded delivery object.
message WaivedExcludedDelivery {
  // Dasher ID for which the deliveries need to be waived or excluded from.
  int64 dasher_id = 1;
  // The delivery UUID that need to be waived or excluded.
  google.protobuf.StringValue delivery_uuid = 2;
  // The delivery package ID that need to be waived or excluded.
  google.protobuf.StringValue delivery_package_id = 3;
  // The reason for waiving the delivery/package. This will be written into the delivery status history meaning the delivery
  // or the delivery package was waived.
  google.protobuf.StringValue waive_reason = 4;
  // The reason for excluding the delivery/package. This will be written into the delivery status history meaning the delivery
  // or the delivery package was excluded.
  google.protobuf.StringValue exclude_reason = 5;
  // The rating type to which the waiver or exclusion should be applied.
  RatingType rating_type = 6;
  // The reason for waiving the pickup
  google.protobuf.StringValue pickup_waived_reason = 7;

  // The reason for waiving the dropoff
  google.protobuf.StringValue dropoff_waived_reason = 8;
}

// An abstract wrapper for different types of rating histories for easier handling. Different rating types will have
// their own logic handling the rating history they need to store and calculate the rating value.
message RatingHistory {
  // Using oneof to restrict there's only one type of rating history that can be used for a specific rating type.
  oneof rating_history {
    // Used by ACCEPTANCE_RATE, COMPLETION_RATE, ON_TIME_RATE, HIGH_QUALITY_RATE rating types
    DeliveryStatusHistory delivery_status_history = 1;
    // Used by CUSTOMER_RATING
    CustomerRatingHistory customer_rating_history = 3;
  }
  // metadata for the rating history.
  // This would normally be populated after the rating calculation, and then persisted in ratings table.
  oneof metadata {
    // meta_data for ontime rating
    OnTimeRateMetaData on_time_rating_meta_data = 2;
    // metadata for high quality rate
    HighQualityRateMetaData high_quality_rate_metadata = 5;
  }

  // indicates whether this rating history has been backfilled or not
  google.protobuf.BoolValue is_backfilled = 4;
}

// Metadata for ontime rating.
message OnTimeRateMetaData {
  // ontime count
  google.protobuf.Int32Value on_time_count = 1;
  // late count
  google.protobuf.Int32Value late_count = 2;
  // excused count
  google.protobuf.Int32Value excused_count = 3;
}

// Metadata for high quality rate
message HighQualityRateMetaData {
  // Number of deliveries without any issues
  google.protobuf.Int32Value delivery_without_issues_count = 1;
  // Number of deliveries with issues
  google.protobuf.Int32Value delivery_issues_count = 2;
}

// Describes one type of rating for a dasher.
// Each rating type has the rating history and the rating value calculated based on the rating history.
message DasherRating {
  // Id of the dasher .
  int64 dasher_id = 1;

  // Type of the rating.
  RatingType rating_type = 2;

  // Rating value. Using double to support both integer and float.
  google.protobuf.DoubleValue rating_value = 3;

  // Timestamp when the rating was created.
  google.protobuf.Timestamp created_at = 4;

  // Timestamp when the rating was last updated.
  google.protobuf.Timestamp updated_at = 5;

  // The snapshot of the rating history which was used to calculate the rating value.
  RatingHistory rating_history_snapshot = 7;

  reserved 6;
  reserved "delivery_status_history";
}

// Dasher rating history object here is used to capture the history of events for a particular dasher and rating type.
// It is bit different from DasherRating's rating_history filed, DasherRating's history actually captures the snapshot
// of events that are used to compute the rating value at a given point of time, basically it's a subset of the
// DasherRatingHistory's rating_history field.
message DasherRatingHistory {
  // Id of the dasher .
  int64 dasher_id = 1;

  // Type of the rating.
  RatingType rating_type = 2;

  // Timestamp when the rating history was created.
  google.protobuf.Timestamp created_at = 3;

  // Timestamp when the rating history was last updated.
  google.protobuf.Timestamp updated_at = 4;

  // The rating history
  RatingHistory rating_history = 6;

  reserved 5;
  reserved "delivery_status_history";
}

// The history of delivery status. This is used by the ACCEPTANCE_RATE and COMPLETION_RATE rating types.
message DeliveryStatusHistory {
  // Description of the status of a delivery. It contains the timestamp when the status was changed.
  message DeliveryStatus {
    // The identifier of the delivery.
    // If the rating type using this message is based on package, then refer to `delivery_package_id`, otherwise refer to
    // `delivery_uuid`.
    // The package id of the delivery.
    string delivery_package_id = 1;

    // The uuid of the delivery.
    google.protobuf.StringValue delivery_uuid = 2;

    // Timestamp when the delivery (package) was assigned to the dasher. This field won't be null.
    google.protobuf.Timestamp assigned_at = 3;

    // Timestamp when the delivery (package) was confirmed by the dasher.
    google.protobuf.Timestamp confirmed_at = 4;

    // Timestamp when the delivery (package) was unassigned from the dasher.
    google.protobuf.Timestamp unassigned_at = 5;

    // Timestamp when the delivery (package) was dropped off by the dasher.
    google.protobuf.Timestamp dropoff_at = 6;

    // Timestamp when the delivery (package) dropoff was reverted. This field is only used when `dropoff_at` is not null.
    google.protobuf.Timestamp revert_dropoff_at = 7;

    // Timestamp when the delivery (package) is excluded from the rating calculation.
    google.protobuf.Timestamp excluded_at = 8;

    // Reason for excluding the delivery (package) from the rating calculation. Will only be set when `excluded_at` is
    // not null.
    google.protobuf.StringValue exclusion_reason = 9;

    // Timestamp when the delivery (package) is waived from the rating calculation, basically isExcused = true but unassign reason
    // is not part of the excluded reasons.
    google.protobuf.Timestamp waived_at = 10;

    // Reason for waving the delivery (package) from the rating calculation. Will only be set when `waived_at` is
    // not null.
    google.protobuf.StringValue waived_reason = 11;

    // The type of delivery.
    DeliveryType delivery_type = 12;

    // Timestamp when the delivery (package) was picked up by the dasher.
    google.protobuf.Timestamp pickup_at = 13;

    // orginal ETA Timestamp when the delivery (package) was picked up by the dasher.
    google.protobuf.Timestamp original_estimated_pickup_at = 14;

    // orginal ETA Timestamp when the delivery (package) was dropped off by the dasher.
    google.protobuf.Timestamp original_estimated_dropoff_at = 15;

    // starting_point_id where the order was accepted
    google.protobuf.Int64Value order_accepted_starting_point_id = 16;

    // submarket_id where the order was accepted
    google.protobuf.Int64Value order_accepted_submarket_id = 17;

    // meta_data for ontime rating
    message OnTimeDeliveryStatusMetaData {
      // The ontime rating buffer.
      OnTimeRatingBuffer on_time_rating_buffer = 1;
      // is the delivery on time
      google.protobuf.BoolValue is_on_time = 2;
      // contract violation meta data
      ContractViolationMetaData contract_violation_meta_data = 3;
    }

    // metadata for high quality rate
    message HighQualityRateMetaData {
      // Unique identifier for the merchant
      google.protobuf.StringValue merchant_id = 1;
      // Name of the merchant
      google.protobuf.StringValue merchant_name = 2;
      // Type of the merchant
      MerchantType merchant_type = 3;
      // List of issue details related to the delivery
      repeated DeliveryIssueDetail delivery_issue_details = 4;
    }

    // metadata for the delivery status
    oneof metadata {
      // meta_data for ontime rating
      OnTimeDeliveryStatusMetaData on_time_rating_meta_data = 18;
      // metadata for high quality rate
      HighQualityRateMetaData high_quality_rate_metadata = 26;
    }

    // Shift id of the delivery.
    google.protobuf.Int64Value shift_id = 19;

    // latest ETA Timestamp when the delivery (package) was picked up by the dasher.
    google.protobuf.Timestamp latest_estimated_pickup_at = 20;

    // latest ETA Timestamp when the delivery (package) was dropped off by the dasher.
    google.protobuf.Timestamp latest_estimated_dropoff_at = 21;

    // Addtional information/context regarding the delivery
    DeliveryContext delivery_context = 22;

    // The delivery id.
    google.protobuf.Int64Value delivery_id = 23;

    // The reason for unassigning the delivery (package) from the dasher.
    google.protobuf.StringValue unassign_reason = 24;

    // Timestamp when dasher enters merchant geo fence.
    google.protobuf.Timestamp dasher_arriving_at_merchant_at = 25;

    // Timestamp when the pickup was waived.
    google.protobuf.Timestamp pickup_waived_at = 27;
    // Reason for waving the pickup. Will only be set when `pickup_waived_at` is
    google.protobuf.StringValue pickup_waived_reason = 28;
    // Timestamp when the dropoff was waived.
    google.protobuf.Timestamp dropoff_waived_at = 29;
    // Reason for waving the dropoff. Will only be set when `dropoff_waived_at` is
    google.protobuf.StringValue dropoff_waived_reason = 30;
  }
  // List of delivery status used in Ratings.
  repeated DeliveryStatus delivery_status = 1;
}

// The history of a customer rating.  This is used for CUSTOMER_RATE
message CustomerRatingHistory {
  // Data that is included with a customer review for a dasher
  message CustomerRatingData {
    // The uuid used to identify this rating
    google.protobuf.StringValue consumer_review_uuid = 1;
    // The time this was created
    google.protobuf.Timestamp created_at = 2;
    // The number of stars
    google.protobuf.Int32Value num_stars = 3;
    // The review text
    google.protobuf.StringValue review_text = 4;
    // The flag for if the comment was flagged
    google.protobuf.BoolValue comment_flagged = 5;
    // The delivery uuid
    google.protobuf.StringValue delivery_uuid = 6;
    // A list of tags associated with this review
    repeated google.protobuf.Int32Value tag_ids = 7;
    // The dasher id this review was for
    google.protobuf.Int64Value dasher_id = 8;
    // If this review has been deleted and what time
    google.protobuf.Timestamp deleted_at = 9;
    // The moderation status
    ModerationStatus moderation_status = 10;
    // Consumer id who left this review
    google.protobuf.Int64Value consumer_id = 11;

    // Moderation Status
    enum ModerationStatus {
      // moderation status unspecified
      MODERATION_STATUS_UNSPECIFIED = 0;
      // moderation status waived
      MODERATION_STATUS_WAIVED = 1;
      // moderation status rejected
      MODERATION_STATUS_REJECTED = 2;
      // moderation status pending
      MODERATION_STATUS_PENDING = 3;
      // moderation status approved
      MODERATION_STATUS_APPROVED = 4;
      // moderation status error
      MODERATION_STATUS_ERROR = 5;
      // moderation status escalated
      MODERATION_STATUS_ESCALATED = 6;
    }
  }

  // A list of the customer rating data that makes up the history
  repeated CustomerRatingData customer_rating_data = 1;
}

// Context for the delivery.
message DeliveryContext {
  // Consumer details.
  ConsumerDetails consumer_details = 1;
  // Merchant details.
  MerchantDetails merchant_details = 2;
}

// Consumer details
message ConsumerDetails {
  // Consumer first name.
  google.protobuf.StringValue first_name = 1;
  // Consumer last name.
  google.protobuf.StringValue last_name = 2;
}

// Merchant details
message MerchantDetails {
  // Merchant business name
  google.protobuf.StringValue business_name = 1;
}

// Delivery Type
enum DeliveryType {
  // unspecified or NA
  DELIVERY_TYPE_UNSPECIFIED = 0;
  // delivery is a normal delivery
  DELIVERY_TYPE_NORMAL = 1;
  // delivery is a parcel delivery
  DELIVERY_TYPE_PARCEL = 2;
  // delivery is a shop and delivery order
  DELIVERY_TYPE_SHOP_AND_DELIVERY = 3;
}

// The buffer time for ontime rating
message OnTimeRatingBuffer {
  // The buffer type def.
  enum BufferType {
    // Unspecified buffer type.
    BUFFER_TYPE_UNSPECIFIED = 0;
    // Addition buffer type.
    BUFFER_TYPE_ADDITION = 1;
    // Multiplicaiton buffer type.
    BUFFER_TYPE_MULTIPLICATION = 2;
  }
  // The buffer type.
  BufferType buffer_type = 1;
  // The buffer time in seconds for the ontime rating.
  google.protobuf.FloatValue buffer_value = 2;
}

// Contract violation meta data.
message ContractViolationMetaData {
  // The delivery issue.
  message DeliveryIssue {
    // The delivery phase when the contract violation occurred.
    DeliveryPhase delivery_phase = 1;
    // The delivery issue type.
    DeliveryIssueType delivery_issue_type = 2;
    // Timestamp when the delivery was issued a contract violation.
    google.protobuf.Timestamp issued_at = 3;
    // Timestamp when the contract violation was disputed successfully.
    google.protobuf.Timestamp disputed_accepted_at = 4;
    // Timestamp when the contract violation was forgiven.
    google.protobuf.Timestamp forgiven_at = 5;
    // risk_warning_id for Fraud CV.
    google.protobuf.Int64Value risk_warning_id = 6;
    // delivery_issue_id for Quality CV.
    google.protobuf.Int64Value delivery_issue_id = 7;
  }

  // List of delivery issues.
  repeated DeliveryIssue delivery_issues = 1;
}

// The delivery phase.
enum DeliveryPhase {
  // Unspecified delivery phase.
  DELIVERY_PHASE_UNSPECIFIED = 0;
  // Delivery phase for pick up.
  DELIVERY_PHASE_PICK_UP = 1;
  // Delivery phase for drop off.
  DELIVERY_PHASE_DROP_OFF = 2;
}

// The delivery issue status.
enum DeliveryIssueStatus {
  // Unspecified delivery issue status.
  DELIVERY_ISSUE_STATUS_UNSPECIFIED = 0;
  // Unread delivery issue status.
  DELIVERY_ISSUE_STATUS_UNREAD = 1;
  // Dispute accepted delivery issue status.
  DELIVERY_ISSUE_STATUS_DISPUTE_ACCEPTED = 2;
  // Forgiven delivery issue status.
  DELIVERY_ISSUE_STATUS_FORGIVEN = 3;
}

// The delivery issue type.
enum DeliveryIssueType {
  // Unspecified delivery issue type.
  DELIVERY_ISSUE_TYPE_UNSPECIFIED = 0;
  // Delivery issue type for extremely late delivery.
  DELIVERY_ISSUE_TYPE_EXTREMELY_LATE = 1;
}

// Rating Scores Metadata
message RatingScoresMetadata {
  // The rating scores metadata.
  repeated RatingScores rating_scores = 1;
}

// Rating to Scores mapping
message RatingScores {
  // Rating type
  RatingType rating_type = 1;
  // Rating values
  repeated google.protobuf.DoubleValue rating_value = 2;
  // Rating scores
  repeated google.protobuf.DoubleValue rating_score = 3;
  // Rating buckets
  repeated google.protobuf.Int32Value rating_bucket = 4;
}

// Represents details of a specific delivery issue
message DeliveryIssueDetail {
  // Timestamp when the issue was reported
  google.protobuf.Timestamp issued_at = 1;
  // Timestamp when the issue was forgiven
  google.protobuf.Timestamp forgiven_at = 9;

  // Type of issue
  oneof issue_type {
    // Issue where the order was never delivered
    NeverDelivered never_delivered = 2;
    // Issue where the wrong order was delivered
    WrongOrderDelivered wrong_order_delivered = 3;
    // Issue where an item was missing from the order
    MissingItem missing_item = 4;
    // Issue where an item was damaged
    DamagedItem damaged_item = 5;
    // Issue where the item was of poor quality
    PoorQuality poor_quality = 6;
    // Issue where an item was substituted
    Substitution substitution = 7;
    // Issue where there were not enough items
    NotEnoughItems not_enough_items = 8;
  }

  // Represents an issue where the order was never delivered
  message NeverDelivered {}

  // Represents an issue where the wrong order was delivered
  message WrongOrderDelivered {}

  // Represents an issue where an item was missing
  message MissingItem {
    // List of missing item details
    repeated ItemDetail item_details = 1;
  }

  // Represents an issue where an item was damaged
  message DamagedItem {
    // List of damaged item details
    repeated ItemDetail item_details = 1;
  }

  // Represents an issue where an item was of poor quality
  message PoorQuality {
    // List of poor quality item details
    repeated ItemDetail item_details = 1;
  }

  // Represents an issue where an item was substituted
  message Substitution {
    // List of substituted item details
    repeated ItemDetail item_details = 1;
  }

  // Represents an issue where there were not enough items
  message NotEnoughItems {
    // List of insufficient item details
    repeated ItemDetail item_details = 1;
  }

  // Represents details of an item in an order
  message ItemDetail {
    // Unique identifier for the item
    google.protobuf.StringValue item_id = 1;
    // Name of the item
    google.protobuf.StringValue item_name = 2;
    // Quantity of the item
    google.protobuf.StringValue item_quantity = 3;
  }
}

// Enum representing different types of merchants
enum MerchantType {
  // Default unspecified type
  MERCHANT_TYPE_UNSPECIFIED = 0;
  // Restaurant merchant type
  MERCHANT_TYPE_RESTAURANT = 1;
  // Shop and deliver merchant type
  MERCHANT_TYPE_SHOP_AND_DELIVER = 2;
}
