syntax = "proto3";

// buf:lint:ignore DIRECTORY_SAME_PACKAGE
package dasher_service.shift.internal.v1;

import "common/date.proto";
import "common/money.proto";
import "common/service_client_config.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.dasher.shift.internal";

// Internal service for dasher shift related operations.
// For new use cases, do not use this service directly. Use the ShiftService instead.
service ShiftInternalService {
  option (service_client.client_config).circuit_breaker_config.do_ignore_grpc_code = 9;

  // Get active shift count for a starting point
  rpc GetActiveShiftsCountForStartingPoint(GetActiveShiftsCountForStartingPointRequest) returns (GetActiveShiftsCountForStartingPointResponse);

  // Get past shifts for a given dasher
  rpc GetPastShifts(GetPastShiftsRequest) returns (GetPastShiftsResponse);

  // Get shift by id
  rpc GetShiftInternal(GetShiftInternalRequest) returns (GetShiftInternalResponse);

  // Update dasher equipment verifications for a shift
  rpc UpdateShiftDasherEquipmentVerifications(UpdateShiftDasherEquipmentVerificationsRequest) returns (UpdateShiftDasherEquipmentVerificationsResponse);

  // Update dasher soft skills for a shift
  rpc UpdateShiftDasherSoftSkillsRemoveEquipment(UpdateShiftDasherSoftSkillsRemoveEquipmentRequest) returns (UpdateShiftDasherSoftSkillsRemoveEquipmentResponse);

  // Get current and upcoming shift for vehicle
  rpc GetCurrentAndUpcomingShiftForVehicle(GetCurrentAndUpcomingShiftForVehicleRequest) returns (GetCurrentAndUpcomingShiftForVehicleResponse);

  // Create shift v2 internal
  rpc CreateShiftV2Internal(CreateShiftV2InternalRequest) returns (CreateShiftV2InternalResponse);

  // Get total active time for shifts
  rpc GetTotalActiveTimeForShifts(GetTotalActiveTimeForShiftsRequest) returns (GetTotalActiveTimeForShiftsResponse);

  // Has Dx taken break between or during shifts
  rpc HasTakenRestBreak(HasTakenRestBreakRequest) returns (HasTakenRestBreakResponse);

  // Get checked in shifts after start timestamp
  rpc GetCheckedInShiftsAfterStartTimestamp(GetCheckedInShiftsAfterStartTimestampRequest) returns (GetCheckedInShiftsAfterStartTimestampResponse);

  // Get manual assign interval for shift ids
  rpc GetManualAssignIntervalForShiftIds(GetManualAssignIntervalForShiftIdsRequest) returns (GetManualAssignIntervalForShiftIdsResponse);

  // Check if shift is over unassignment limit
  rpc CheckOverUnassignmentLimit(CheckOverUnassignmentLimitRequest) returns (CheckOverUnassignmentLimitResponse);

  // start manual assign interval on delivery completion
  rpc StartMAIntervalOnDeliveryCompletion(StartMAIntervalOnDeliveryCompletionRequest) returns (StartMAIntervalOnDeliveryCompletionResponse);

  // Update num deliveries for shift
  rpc UpdateNumDeliveriesForShift(UpdateNumDeliveriesForShiftRequest) returns (UpdateNumDeliveriesForShiftResponse);

  // Get past completed shifts
  rpc GetPastCompletedShifts(GetPastCompletedShiftsRequest) returns (GetPastCompletedShiftsResponse);

  // Get past completed shifts by close out time
  rpc GetPastCompletedShiftsByCloseOutTime(GetPastCompletedShiftsByCloseOutTimeRequest) returns (GetPastCompletedShiftsByCloseOutTimeResponse);

  // Update shift common
  rpc UpdateShiftCommon(UpdateShiftCommonRequest) returns (UpdateShiftCommonResponse);

  // Filter upcoming dasher shifts
  rpc FilterUpcomingDasherShifts(FilterUpcomingDasherShiftsRequest) returns (FilterUpcomingDasherShiftsResponse);

  // Get current and future scheduled shifts for dasher
  rpc GetCurrentAndFutureScheduledShiftsForDasher(GetCurrentAndFutureScheduledShiftsForDasherRequest) returns (GetCurrentAndFutureScheduledShiftsForDasherResponse);

  // Get current shift for dasher
  rpc GetCurrentShiftForDasher(GetCurrentShiftForDasherRequest) returns (GetCurrentShiftForDasherResponse);
}

// Get current shift for dasher id
message GetCurrentShiftForDasherRequest {
  // dasher id
  int64 dasher_id = 1;

  // minimum end time
  google.protobuf.Timestamp minimum_scheduled_end_time = 2;
}

// Get current shift for dasher id
message GetCurrentShiftForDasherResponse {
  // shift
  Shift shift = 1;
}

// Get current and future scheduled shifts for dasher id
message GetCurrentAndFutureScheduledShiftsForDasherRequest {
  // dasher id
  int64 dasher_id = 1;
}

// List of current and future scheduled shifts for dasher
message GetCurrentAndFutureScheduledShiftsForDasherResponse {
  // shifts
  repeated Shift shifts = 1;
}

// Filter upcoming dasher shifts
message FilterUpcomingDasherShiftsRequest {
  // dasher id
  int64 dasher_id = 1;

  // end time
  google.protobuf.Timestamp scheduled_end_time = 3;
}

// Filter upcoming dasher shifts
message FilterUpcomingDasherShiftsResponse {
  // shifts
  repeated Shift shifts = 1;
}

// Update shift common request
message UpdateShiftCommonRequest {
  // shift id
  int64 shift_id = 1;

  // shift updating fields
  ShiftUpdatingFields shift_updating_fields = 2;

  // should update ES
  bool should_update_es = 3;
}

// Update shift common response
message UpdateShiftCommonResponse {
  // shift
  Shift shift = 1;
}

// Updatable fields for shift
message ShiftUpdatingFields {
  // can ignore caps
  google.protobuf.BoolValue ignore_caps = 1;

  // is dispatcher
  google.protobuf.BoolValue is_dispatcher = 2;

  // scheduled start time
  google.protobuf.Timestamp scheduled_start_time = 3;

  // scheduled end time
  google.protobuf.Timestamp scheduled_end_time = 4;

  // starting point id
  google.protobuf.Int64Value starting_point_id = 5;

  // auto assign
  google.protobuf.BoolValue auto_assign = 6;

  // reimbursement amount
  google.protobuf.Int32Value reimbursement_amount = 7;

  // extra amount owed
  google.protobuf.Int32Value extra_amount_owed = 8;

  // is waiting for expected assignment
  google.protobuf.BoolValue is_waiting_for_expected_assignment = 9;

  // total pay
  google.protobuf.Int32Value total_pay = 10;

  // delivery pay
  google.protobuf.Int32Value delivery_pay = 11;

  // tip amount
  google.protobuf.Int32Value tip_amount = 12;

  // transaction id
  google.protobuf.Int64Value transaction_id = 13;

  // pay ids
  repeated google.protobuf.Int64Value delivered_dasher_delivery_pay_ids = 14;

  // commute address
  google.protobuf.StringValue commute_address = 15;

  // commute toggle preference
  google.protobuf.BoolValue commute_toggle_preference = 16;

  // switch SP Id
  google.protobuf.Int64Value switch_starting_point_id = 17;

  // can assign cash order
  google.protobuf.BoolValue can_assign_cash_order = 18;
}

// Get manual assign interval for shift ids
message GetManualAssignIntervalForShiftIdsRequest {
  // shift ids
  repeated int64 shift_ids = 1;
}

// Get manual assign interval for shift ids
message GetManualAssignIntervalForShiftIdsResponse {
  // manual assign intervals
  repeated ManualAssignInterval manual_assign_intervals = 1;
}

// Check if shift is over unassignment limit
message CheckOverUnassignmentLimitRequest {
  // shift id
  int64 shift_id = 1;
}

// Check if shift is over unassignment limit
message CheckOverUnassignmentLimitResponse {}

// Start manual assign interval on delivery completion
message StartMAIntervalOnDeliveryCompletionRequest {
  // shift id
  int64 shift_id = 1;
}

// Start manual assign interval on delivery completion
message StartMAIntervalOnDeliveryCompletionResponse {}

// Update num deliveries for shift
message UpdateNumDeliveriesForShiftRequest {
  // shift id
  int64 shift_id = 1;

  // deliveries
  int32 deliveries = 2;
}

// Update num deliveries for shift
message UpdateNumDeliveriesForShiftResponse {
  // shift
  Shift shift = 1;
}

// Get past completed shifts
message GetPastCompletedShiftsRequest {
  // dasher id
  int64 dasher_id = 1;

  // start time
  google.protobuf.Timestamp start_time = 2;

  // end time
  google.protobuf.Timestamp end_time = 3;

  // limit
  int32 limit = 4;
}

// Get past completed shifts
message GetPastCompletedShiftsResponse {
  // past shifts
  repeated Shift shifts = 1;
}

// Get past completed shifts by close out time
message GetPastCompletedShiftsByCloseOutTimeRequest {
  // dasher id
  int64 dasher_id = 1;

  // start time
  google.protobuf.Timestamp start_time = 2;

  // end time
  google.protobuf.Timestamp end_time = 3;

  // limit
  int32 limit = 4;
}

// Get past completed shifts by close out time
message GetPastCompletedShiftsByCloseOutTimeResponse {
  // past shifts
  repeated Shift shifts = 1;
}

// Get checked in shifts after start timestamp
message GetCheckedInShiftsAfterStartTimestampRequest {
  // dasher id
  int64 dasher_id = 1;

  // start timestamp
  google.protobuf.Timestamp start_timestamp = 2;
}

// Get checked in shifts after start timestamp
message GetCheckedInShiftsAfterStartTimestampResponse {
  // shifts
  repeated Shift shifts = 1;
}

// Create shift v2 internal
message CreateShiftV2InternalRequest {
  // dasher id
  int64 dasher_id = 1;

  // scheduled start time
  google.protobuf.Timestamp scheduled_start_time = 2;

  // scheduled end time
  google.protobuf.Timestamp scheduled_end_time = 3;

  // starting point id
  int64 starting_point_id = 4;

  // vehicle id
  int32 vehicle_id = 5;

  // vehicle type id
  google.protobuf.Int32Value vehicle_type_id = 6;

  // is dash now
  google.protobuf.BoolValue is_impromptu_dash = 7;

  // should ignore caps
  google.protobuf.BoolValue ignore_caps = 8;

  // ignore minimum shift duration
  google.protobuf.BoolValue ignore_min_shift_duration = 9;

  // payout interval for each delivery
  google.protobuf.StringValue delivery_payout_interval = 10;

  // experiment info
  google.protobuf.StringValue experiment_info = 11;

  // client version
  google.protobuf.StringValue client_version = 12;

  // can shift receive red card deliveries
  google.protobuf.BoolValue can_receive_red_card_deliveries = 13;

  // is commute to home enabled
  google.protobuf.BoolValue commute_home_enabled = 14;

  // commute address fields
  google.protobuf.BoolValue commute_address_fields = 15;

  // commute address id
  google.protobuf.StringValue commute_address_id = 16;

  // commute address
  google.protobuf.StringValue commute_address = 17;

  // commute address latitude
  google.protobuf.FloatValue commute_address_lat = 18;

  // commute address longitude
  google.protobuf.FloatValue commute_address_lng = 19;

  // can auto assign deliveries
  google.protobuf.BoolValue auto_assign = 20;
}

// Create shift v2 internal
message CreateShiftV2InternalResponse {
  // shift
  Shift shift = 1;
}

// Get total active time for shifts
message GetTotalActiveTimeForShiftsRequest {
  // shift ids
  repeated int64 shift_ids = 1;

  // manual assign interval ids
  repeated int64 manual_assign_interval_ids = 2;

  // start time
  google.protobuf.Timestamp start_time = 3;
}

// Get total active time for shifts
message GetTotalActiveTimeForShiftsResponse {
  // active time
  google.protobuf.FloatValue active_time = 1;
}

// Has Dx taken break between or during shifts
message HasTakenRestBreakRequest {
  // shift ids
  repeated int64 shift_ids = 1;

  // current time
  google.protobuf.Timestamp current_time = 3;
}

// Has Dx taken break between or during shifts
message HasTakenRestBreakResponse {
  // has dasher taken rest break
  google.protobuf.BoolValue result = 1;
}

//  Get current and upcoming shift for vehicle
message GetCurrentAndUpcomingShiftForVehicleRequest {
  // vehicle id
  int32 vehicle_id = 1;

  // how many shifts to return
  int32 limit = 2;
}

//  Get current and upcoming shift for vehicle
message GetCurrentAndUpcomingShiftForVehicleResponse {
  // shift ids
  repeated int64 shift_ids = 2;
}

// Update dasher soft skills for a shift
message UpdateShiftDasherSoftSkillsRemoveEquipmentRequest {
  // shift id
  int64 shift_id = 1;

  // dasher soft skills
  int32 equipment_type_id = 2;
}

// Update dasher soft skills for a shift
message UpdateShiftDasherSoftSkillsRemoveEquipmentResponse {
  // shift
  Shift shift = 1;
}

// Update dasher equipment verifications for a shift
message UpdateShiftDasherEquipmentVerificationsRequest {
  // shift id
  int64 shift_id = 1;

  // dasher equipment verifications
  google.protobuf.StringValue dasher_equipment_verifications = 2;
}

//  Update dasher equipment verifications for a shift
message UpdateShiftDasherEquipmentVerificationsResponse {
  // shift
  Shift shift = 1;
}

// Get active shift count for a starting point
message GetActiveShiftsCountForStartingPointRequest {
  // starting point id
  int64 starting_point_id = 1;

  // if true, only shifts that are in time mode will be counted
  bool time_mode_shifts_only = 2;
}

// Get active shift count for a starting point
message GetActiveShiftsCountForStartingPointResponse {
  // active shift count
  int64 active_shifts_count = 1;
}

// Get past shifts for a given dasher
message GetPastShiftsRequest {
  // dasher id
  int64 dasher_id = 1;

  // start time
  google.protobuf.Timestamp start_time = 2;

  // end time
  google.protobuf.Timestamp end_time = 3;

  // limit
  int32 limit = 4;
}

// Get past shifts for a given dasher
message GetPastShiftsResponse {
  // past shifts
  repeated Shift shifts = 1;
}

// Get shift by id
message GetShiftInternalRequest {
  // shift id
  int64 shift_id = 1;

  // if true, use cache
  bool use_cache = 2;
}

// Get shift by id
message GetShiftInternalResponse {
  // shift
  Shift shift = 1;
}

// Shift
message Shift {
  // shift id
  int64 id = 1;

  // shift created time
  google.protobuf.Timestamp created_at = 2;

  // shift user info
  ShiftUserInfo user_info = 3;

  // shift scheduled start time
  google.protobuf.Timestamp scheduled_start_time = 4;

  // shift scheduled end time
  google.protobuf.Timestamp scheduled_end_time = 5;

  // check in time
  google.protobuf.Timestamp check_in_time = 6;

  // check out time
  google.protobuf.Timestamp check_out_time = 7;

  // close out time
  google.protobuf.Timestamp close_out_time = 8;

  // cancelled at time
  google.protobuf.Timestamp cancelled_at = 9;

  // experiment info
  google.protobuf.StringValue experiment_info = 10;

  // auto close out
  bool auto_close_out = 11;

  // status
  google.protobuf.StringValue status = 12;

  // sub status
  google.protobuf.StringValue sub_status = 13;

  // is dash now
  google.protobuf.BoolValue is_dash_now = 15;

  // geo info
  ShiftGeoInfo geo_info = 16;

  // pay info
  ShiftPayInfo pay_info = 17;

  // assignment info
  ShiftAssignmentInfo assignment_info = 18;

  // vehicle info
  ShiftVehicleInfo vehicle_info = 19;

  // commute info
  ShiftCommuteInfo commute_info = 20;

  // active date
  reserved 21;
  reserved "active_date";

  // is first shift
  google.protobuf.BoolValue is_first_shift = 22;

  // is no show
  google.protobuf.BoolValue is_no_show = 23;

  // notification sent
  bool notification_sent = 24;

  // route history
  string route_history = 25;

  // route distances
  string route_distances = 26;

  // is waiting for expected assignment
  google.protobuf.BoolValue is_waiting_for_expected_assignment = 27;

  // notified to extend
  google.protobuf.BoolValue notified_to_extend = 28;

  // active date
  date.Date shift_active_date = 29;

  // Internal shift UUID. Not for external usage
  google.protobuf.StringValue shift_uuid = 30;
}

// Shift user info
message ShiftUserInfo {
  // dasher id
  int32 dasher_id = 1;
  // user id
  google.protobuf.Int64Value user_id = 2;
}

// Shift geo info
message ShiftGeoInfo {
  // starting point id
  int64 starting_point_id = 1;
  // original starting point id
  int64 original_starting_point_id = 2;
  // check in location
  google.protobuf.StringValue check_in_location = 3;
}

// Shift vehicle info
message ShiftVehicleInfo {
  // vehicle id
  int32 vehicle_id = 1;
  // vehicle type id
  google.protobuf.Int32Value vehicle_type_id = 2;
  // vehicle type name
  google.protobuf.StringValue vehicle_type_name = 3;
}

// Shift assignment info
message ShiftAssignmentInfo {
  // should auto assign
  bool auto_assign = 1;
  // num deliveries completed
  int32 num_deliveries = 2;
  // dasher can receive red card deliveries
  google.protobuf.BoolValue can_receive_red_card_deliveries = 3;
  // can be assigned cash order
  google.protobuf.BoolValue can_assign_cash_order = 4;
  // AR on check in
  google.protobuf.FloatValue acceptance_rate_on_check_in = 5;
  // onboarding preferences
  google.protobuf.StringValue dasher_onboarding_preferences = 6;
  // dasher skills
  google.protobuf.StringValue dasher_skills = 7;
  // dasher soft skills
  google.protobuf.StringValue dasher_soft_skills = 8;
  // is dasher equipped
  google.protobuf.BoolValue is_equipped = 9;
  // dispatcher approved
  google.protobuf.BoolValue dispatcher_approved = 10;
  // dasher date of birth
  reserved 11;
  reserved "dasher_date_of_birth";
  // is dasher top dasher on check in
  google.protobuf.BoolValue is_top_dasher_on_check_in = 12;
  // dasher equipment verifications
  google.protobuf.StringValue dasher_equipment_verifications = 13;

  // dasher date of birth
  date.Date dx_date_of_birth = 14;
}

// Shift commute info
message ShiftCommuteInfo {
  // commute state
  google.protobuf.StringValue commute_state = 1;
  // commute preference
  google.protobuf.StringValue commute_preference = 2;
  // commute expire time
  google.protobuf.Timestamp commute_expire_time = 3;
}

// Shift pay info
message ShiftPayInfo {
  // total pay
  money.MonetaryFields total_pay = 1;
  // rate per delivery
  money.MonetaryFields rate_per_delivery = 2;
  // cash advance
  money.MonetaryFields cash_advance = 3;
  // extra amount owed
  money.MonetaryFields extra_amount_owed = 4;
  // amount deducted
  money.MonetaryFields amount_deducted = 5;
  // delivery pay
  money.MonetaryFields delivery_pay = 6;
  // boost pay
  money.MonetaryFields boost_pay = 7;
  // hourly pay
  money.MonetaryFields hourly_pay = 8;
  // reimbursement amount
  money.MonetaryFields reimbursement_amount = 9;
  // tip amount
  money.MonetaryFields tip_amount = 10;
  // sos pay
  money.MonetaryFields sos_pay = 11;
  // is on dynamic pay model
  google.protobuf.BoolValue is_on_dynamic_pay_model = 12;
  // transfer id
  google.protobuf.Int32Value transfer_id = 13;
  // transaction id
  google.protobuf.Int64Value transaction_id = 14;
  // delivery payout interval
  google.protobuf.StringValue delivery_payout_interval = 15;
  // num double pay deliveries
  int32 num_double_pay_deliveries = 16;
  // amount manually deducted
  money.MonetaryFields amount_manually_deducted = 17;
  // delivered dasher delivery pay ids
  repeated int64 delivered_dasher_delivery_pay_ids = 18;
  // has pre tippable deliveries
  google.protobuf.BoolValue has_pre_tippable_deliveries = 19;
  // total active time
  google.protobuf.FloatValue total_active_time = 20;
  // calculated total pay
  money.MonetaryFields calculated_total_pay = 21;
  // calculated tip amount
  money.MonetaryFields calculated_tip_amount = 22;
  // calculated delivery pay
  money.MonetaryFields calculated_delivery_pay = 23;
  // calculated dashlink tip amount
  money.MonetaryFields calculated_dashlink_tip_amount = 24;
  // calculated dashlink delivery pay
  money.MonetaryFields calculated_dashlink_delivery_pay = 25;
  // fraud deliveries
  repeated string fraud_deliveries = 26;
}

// Manual assign interval
message ManualAssignInterval {
  // id
  int64 id = 1;

  // shift id
  int64 shift_id = 2;

  // start time
  google.protobuf.Timestamp start_time = 3;

  // end time
  google.protobuf.Timestamp end_time = 4;

  // is excused
  google.protobuf.BoolValue excused = 5;

  // reason
  google.protobuf.StringValue reason = 6;

  // allowed seconds
  google.protobuf.Int64Value allowed_seconds = 7;
}
