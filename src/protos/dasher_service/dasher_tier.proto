syntax = "proto3";

package dasher_service.tier;

import "common/service_client_config.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.dasher.tier";

// endpoints for tier service
service TierService {
  option (service_client.client_config).service_name = "dasher-service";
  option (service_client.client_config).service_app = "engagement";

  // To create new tier for the dasher
  rpc CreateTier(CreateTierRequest) returns (CreateTierResponse);
  // To create new tier_v2 for the dasher
  rpc CreateTierV2(CreateTierV2Request) returns (CreateTierV2Response);
  // Fetch the existing tier
  rpc GetTier(GetTierRequest) returns (GetTierResponse);
  // To update the existing tier
  rpc UpdateTier(UpdateTierRequest) returns (UpdateTierResponse);
  // To update the existing tier_v2
  rpc UpdateTierV2(UpdateTierV2Request) returns (UpdateTierV2Response);
  // To update the existing tier_v2 for regions
  rpc UpdateTierV2ForRegions(UpdateTierV2ForRegionsRequest) returns (UpdateTierV2ForRegionsResponse);
  // Fetch the all the active tiers
  rpc ListTiers(ListTiersRequest) returns (ListTiersResponse);
  // Fetch the all the active tier_v2
  rpc ListAllTierV2(ListAllTierV2Request) returns (ListAllTierV2Response);
  // Fetch the all the active tier_v2 by dasher_id
  rpc ListAllTierV2ByDasherId(ListAllTierV2ByDasherIdRequest) returns (ListAllTierV2ByDasherIdResponse);
  // Fetch dasher ratings and tier status
  rpc GetDasherTierRatings(GetDasherTierRatingsRequest) returns (GetDasherTierRatingsResponse);
  // To compute the dasher tier based on the rating event
  rpc ComputeDasherTier(ComputeDasherTierRequest) returns (ComputeDasherTierResponse);
  // Update or insert dasher tier. Behind the scene the inputted ratings + SP_ID will be used to re-calculate the tier.
  rpc UpsertDasherTier(UpsertDasherTierRequest) returns (UpsertDasherTierResponse);
  // Fetch dasher tier
  rpc GetDasherTier(GetDasherTierRequest) returns (GetDasherTierResponse);

  // Get dasher tier override by ID
  rpc GetDasherTierOverride(GetDasherTierOverrideRequest) returns (GetDasherTierOverrideResponse);
  // Get recent tier overrides for a dasher
  rpc GetRecentDasherTierOverrides(GetRecentDasherTierOverridesRequest) returns (GetRecentDasherTierOverridesResponse);
  // Create a dasher tier override.
  rpc CreateDasherTierOverride(CreateDasherTierOverrideRequest) returns (CreateDasherTierOverrideResponse);

  // Expire a dasher tier override.
  rpc ExpireDasherTierOverride(ExpireDasherTierOverrideRequest) returns (ExpireDasherTierOverrideResponse);

  // Bulk expire dasher tier overrides.
  rpc BulkExpireDasherCurrentTierOverride(BulkExpireDasherCurrentTierOverrideRequest) returns (BulkExpireDasherCurrentTierOverrideResponse);

  // Recomputes dasher tier and rewards for the dasher
  rpc RecomputeDasherTierRewards(RecomputeDasherTierRewardsRequest) returns (RecomputeDasherTierRewardsResponse);

  // In order to qualify and maintain Platinum tier status, Dashers need to maintain a certain number of deliveries
  // in the last 30 days. An inactive Dx could remain Platinum or lose it with every day of inactivity.
  // This endpoint is used to verify if a Platinum Dx would have remained Platinum based on their L30D delivery count when they were
  // in-active
  // The Timestamp must be within the last 60 days.
  rpc PlatinumRecentDeliveryCountCheck(PlatinumRecentDeliveryCountCheckRequest) returns (PlatinumRecentDeliveryCountCheckResponse);
}

// CreateTierRequest
message CreateTierRequest {
  // Name of the tier (Required)
  TierType tier_type = 1;
  // Display name for the tier. (Required)
  string display_name = 2;
  // If the tier is active or not. Default will be false.
  bool is_active = 3;
  // Criteria that defines a Tier. (Required)
  TierQualification tier_qualification = 4;
  // Rewards associated with the tier.
  repeated string reward_ids = 5;
}

// CreateTierResponse
message CreateTierResponse {
  // Created tier
  Tier tier = 1;
}

// CreateTierV2Request
message CreateTierV2Request {
  // Type of the tier (Required)
  TierType tier_type = 1;
  // Display name for the tier. (Required)
  string display_name = 2;
  // Criteria that defines a Tier. (Required)
  TierQualification rules = 3;
  // filtering criteria (contains location info SM/SP) for the tier.
  FilteringCriteria filtering_criteria = 4;
  // Rewards associated with the tier.
  repeated string reward_ids = 5;
  // If the tier is active or not. Default will be false.
  bool is_active = 6;
}

// CreateTierV2Response
message CreateTierV2Response {
  // Created tierV2
  TierV2 tier = 1;
}

// GetTierRequest
message GetTierRequest {
  // Fetch the tier based on the tier type
  TierType tier_type = 1;
}

// GetTierResponse
message GetTierResponse {
  // Existing tier
  Tier tier = 1;
}

// ListTiersRequest
message ListTiersRequest {}

// ListTiersResponse
message ListTiersResponse {
  // Existing tier
  repeated Tier tier = 1;
}

// ListAllTierV2Request
message ListAllTierV2Request {
  // Type of the tier (Optional)
  TierType tier_type = 1;
}

// ListAllTierV2Response
message ListAllTierV2Response {
  // Existing tier
  repeated TierV2 tier = 1;
}

// ListAllTierV2ByDasherIdRequest
message ListAllTierV2ByDasherIdRequest {
  // The ID of the dasher. ListTiers will called under the hood if this dasher_id not specified.
  int64 dasher_id = 1;
}

// ListAllTierV2ByDasherIdResponse
message ListAllTierV2ByDasherIdResponse {
  // Existing tierV1 for backwards comp
  repeated Tier tier = 1;
}

// UpdateTierRequest
message UpdateTierRequest {
  // Required to indentify which tier needs to be updated.
  TierType tier_type = 1;
  // Display name for the tier.
  string display_name = 2;
  // If the tier is active or not.
  bool is_active = 3;
  // Criteria that defines a Tier.
  TierQualification tier_qualification = 4;
  // Rewards associated with the tier.
  repeated string reward_ids = 5;
}

// UpdateTierResponse
message UpdateTierResponse {
  // Updated tier
  Tier tier = 1;
}

// UpdateTierV2Request
message UpdateTierV2Request {
  // id for the tier. (Required)
  string id = 1;
  // type of the tier needs to be updated.
  TierType tier_type = 2;
  // Display name for the tier.
  string display_name = 3;
  // If the tier is active or not. [DEPRECATED] Please use is_active_enhanced instead.
  bool is_active = 4 [deprecated = true];
  // rules that defines a Tier.
  TierQualification rules = 5;
  // Rewards associated with the tier.
  repeated string reward_ids = 6;
  // The filtering criteria update request.
  FilteringCriteria filtering_criteria = 7;
  // Enhanced is_active field. This field is used to update the is_active field.
  google.protobuf.BoolValue is_active_enhanced = 8;
}

// UpdateTierV2Response
message UpdateTierV2Response {
  // Updated tier
  TierV2 tier = 1;
}

// UpdateTierV2ForRegionsRequest
message UpdateTierV2ForRegionsRequest {
  // Regions to update the tierV2
  RegionList region_list = 1;
  // Tiers to update the regions
  repeated TierInfo destination_tiers = 2;
  // Operation mode
  OperationMode operation_mode = 3;

  // Region object
  message RegionList {
    // Type of the region
    RegionType region_type = 1;
    // Region IDs
    repeated int64 region_ids = 2;

    // Region Type
    enum RegionType {
      // Invalid Region Type
      REGION_TYPE_UNSPECIFIED = 0;
      // Submarket
      REGION_TYPE_SUBMARKET = 1;
      // Starting Point
      REGION_TYPE_STARTING_POINT = 2;
    }
  }

  // TierInfo object
  message TierInfo {
    // type of the tier (Required)
    TierType tier_type = 1;
    // tier_v2_id for the tier. (Required)
    google.protobuf.StringValue tier_v2_id = 2;
  }

  // Operation Mode
  enum OperationMode {
    // Invalid Operation Mode
    OPERATION_MODE_UNSPECIFIED = 0;
    // Dry run mode, everything will same as live but no real DB changes will be made.
    OPERATION_MODE_DRY_RUN = 1;
    // Live mode, real DB changes will be made.
    OPERATION_MODE_LIVE = 2;
    // Rollback mode, real DB changes will be made and rollback will be done.
    OPERATION_MODE_ROLLBACK = 3;
  }
}

// UpdateTierV2ForRegionsResponse
message UpdateTierV2ForRegionsResponse {
  // Updated tiers
  repeated TierV2 tiers = 1;
  // Updated sp_to_tier_v2s
  repeated StartingPointToTierV2 sp_to_tier_v2 = 2;
}

// GetDasherTierRatingsRequest
message GetDasherTierRatingsRequest {
  // Id of the dasher
  int64 dasher_id = 1;
  // starting point id. This will be used to recalculate dasher tier.
  // If it's not passed, the SP for latest shift_check_in will be used instead.
  int32 starting_point_id = 2;
}

// GetDasherTierRatingsResponse
message GetDasherTierRatingsResponse {
  // Dasher's tier
  Tier tier = 1;
  // Dasher's ratings
  repeated Rating ratings = 2;
  // Composite score
  CompositeScore score = 3;
}

// CompositeScore
message CompositeScore {
  // score
  google.protobuf.Int32Value score = 1;
  // composite score metadata
  CompositeScoreMetadata composite_score_metadata = 2;
}

// CompositeScoreMetadata
message CompositeScoreMetadata {
  // max score
  google.protobuf.Int32Value max_score = 1;
}

// GetDasherTierRequest
message GetDasherTierRequest {
  // Id of the dasher
  int64 dasher_id = 1;
  // optional starting point id
  int32 starting_point_id = 2;
}

// GetDasherTierResponse
message GetDasherTierResponse {
  // Dasher's tier
  DasherTier dasher_tier = 1;
}

// PlatinumRecentDeliveryCountCheckRequest
message PlatinumRecentDeliveryCountCheckRequest {
  // Id of the dasher
  int64 dasher_id = 1;
  // Previous timestamp to fetch the tier for
  google.protobuf.Timestamp previous_timestamp = 2;
}

// PlatinumRecentDeliveryCountCheckResponse
message PlatinumRecentDeliveryCountCheckResponse {
  // Dasher's tier type for the given timestamp.
  // It will either be PLATINUM or UNSPECIFIED (not-platinum)
  TierType tier_type = 1;
  // The number of deliveries in the last 30 days
  int32 recent_deliveries = 2;
}

// ComputeDasherTierRequest
message ComputeDasherTierRequest {
  // Id of the dasher
  int64 dasher_id = 1;
  // Rating type and value that triggers the dasher tier computation.
  // Deprecated, please use `updated_ratings` field instead.
  Rating rating = 2 [deprecated = true];
  // The dasher's current starting_point_id when tier computation is triggered (Optional)
  int64 starting_point_id = 3;
  // Ratings that are updated which will trigger dasher tier computation.
  repeated Rating updated_ratings = 4;
}

// ComputeDasherTierResponse
message ComputeDasherTierResponse {
  // computed dasher tier object
  DasherTier dasher_tier = 1;
}

// GetRecentDasherTierOverridesRequest
message GetRecentDasherTierOverridesRequest {
  // id of the dasher
  int64 dasher_id = 1;

  // max number of results to return, defaults to 10
  int32 limit = 2;
}

// GetRecentDasherTierOverridesResponse
message GetRecentDasherTierOverridesResponse {
  // overrides for the dasher
  repeated DasherTierOverride overrides = 1;
}

// GetDasherTierOverride request
message GetDasherTierOverrideRequest {
  // override to fetch
  string id = 1;
}

// GetDasherTierOverride response
message GetDasherTierOverrideResponse {
  // DasherTierOverride
  DasherTierOverride dasher_tier_override = 1;
}

// CreateDasherTierOverride request
message CreateDasherTierOverrideRequest {
  // DasherTierOverride to be created.
  DasherTierOverride dasher_tier_override = 1;
  // dasher ids to override
  repeated int64 dasher_ids = 2;
}

// CreateDasherTierOverride response
message CreateDasherTierOverrideResponse {
  // Created DasherTierOverride
  DasherTierOverride dasher_tier_override = 1 [deprecated = true];
  // list of failed dasher_ids
  repeated int64 failed_dasher_ids = 2;
  // list of Created DasherTierOverride
  repeated DasherTierOverride list_of_dasher_tier_overrides = 3;
}

// UpsertDasherTierRequest
message UpsertDasherTierRequest {
  // Id of the dasher
  int64 dasher_id = 1;
  // Type of the tier. DEPRECATED. Please use the ratings + SP_ID to re-calculate the tier.
  TierType tier_type = 2 [deprecated = true];
  // Rating type and value
  repeated Rating ratings = 3;
  // (Optional) The starting_point_id where the tier recalculation is triggered at. If not provided, the latest SP will be used.
  int64 starting_point_id = 4;
}

// UpsertDasherTierResponse
message UpsertDasherTierResponse {
  // updated/inserted dasher tier object
  DasherTier dasher_tier = 1;
}

// ExpireDasherTierOverride request
message ExpireDasherTierOverrideRequest {
  // The UUID of the DasherTierOverride to expire
  string tier_override_uuid = 1;
}

// ExpireDasherTierOverride response
message ExpireDasherTierOverrideResponse {
  // The timestamp of when the override is expired.
  google.protobuf.Timestamp expired_at = 1;
}

// BulkExpireDasherTierOverride request
message BulkExpireDasherCurrentTierOverrideRequest {
  // expire overrides for dashers in the list
  repeated int64 dasher_ids = 1;
}

// BulkExpireDasherTierOverride response
message BulkExpireDasherCurrentTierOverrideResponse {
  // list of failed dasher_ids
  repeated int64 failed_dasher_ids = 1;
}

// RecomputeDasherTierRewards request
message RecomputeDasherTierRewardsRequest {
  // List of dasher metadata
  repeated DasherMetadata dasher_metadatas = 1;
}

// RecomputeDasherTierRewards response
message RecomputeDasherTierRewardsResponse {
  // List of dasher tiers
  repeated DasherTier dasher_tiers = 1;
}

// Dasher metadata object
message DasherMetadata {
  // Id of the dasher
  int64 dasher_id = 1;
  // starting point id. This will be used to recalculate dasher tier.
  // If it's not passed, the SP for latest shift_check_in will be used instead
  int32 starting_point_id = 2;
}

// Tier object
message Tier {
  // Name of the tier (Required)
  TierType tier_type = 1;
  // Display name for the tier. (Required)
  string display_name = 2;
  // If the tier is active or not. Default will be false.
  bool is_active = 3;
  // Criteria that defines a Tier. (Required)
  TierQualification tier_qualification = 4;
  // Rewards associated with the tier.
  repeated string reward_ids = 5;
  // Created timestamp of the tier
  google.protobuf.Timestamp created_at = 6;
  // Last updated timestamp of the tier
  google.protobuf.Timestamp updated_at = 7;
  // Starting Point ID
  int32 starting_point_id = 8;
}

// TierV2 object
message TierV2 {
  // id for the tier.
  string id = 1;
  // Name of the tier (Required)
  TierType tier_type = 2;
  // Display name for the tier. (Required)
  string display_name = 3;
  // If the tier is active or not. Default will be false.
  bool is_active = 4;
  // Criteria (location based) that defines a Tier. (Required)
  FilteringCriteria filtering_criteria = 5;
  // Rewards associated with the tier.
  repeated string reward_ids = 6;
  // rules that defines a Tier. (Required)
  TierQualification rules = 7;
  // Created timestamp of the tier
  google.protobuf.Timestamp created_at = 8;
  // Last updated timestamp of the tier
  google.protobuf.Timestamp updated_at = 9;
}

// Location (SM/SP) specific criteria that defines a Tier.
message FilteringCriteria {
  // Tracks changes in criteria structure
  int32 version = 1;
  // list of submarket ids where this criteria applies
  repeated int32 sub_market_ids = 2;
  // list of starting_point ids where this criteria applies
  repeated int32 starting_point_ids = 3;
}

// tier type enum for different dasher tiers
enum TierType {
  // Unspecified value
  TIER_TYPE_UNSPECIFIED = 0;
  // New dashers
  TIER_TYPE_NEW_DASHER = 1;
  // Dx not qualifying for any tiers
  TIER_TYPE_NON_TIER = 2;
  // silver tier.
  TIER_TYPE_SILVER = 3;
  // gold tier
  TIER_TYPE_GOLD = 4;
  // platinum tier.
  TIER_TYPE_PLATINUM = 5;
}

// priority associated with a tier override
enum TierOverridePriority {
  // Default value when no priority is set
  TIER_OVERRIDE_PRIORITY_UNSPECIFIED = 0;
  // low priority
  TIER_OVERRIDE_PRIORITY_LOW = 1;
  // mid priority, this will take precedence over low priority
  TIER_OVERRIDE_PRIORITY_MID = 2;
  // high priority, this will take precedence over both low and mid priority
  TIER_OVERRIDE_PRIORITY_HIGH = 3;
}

// buf:lint:ignore ENUM_VALUE_PREFIX
// Rating type enum
enum RatingType {
  // Invalid Rating Type
  RATING_TYPE_UNSPECIFIED = 0;
  // Acceptance rate of assignments
  ACCEPTANCE_RATE = 1;
  // Completion rate of deliveries
  COMPLETION_RATE = 2;
  // Customer Rating
  CUSTOMER_RATING = 3;
  // Rate for deliveries made on time or early
  ON_TIME_OR_EARLY = 4;
  // Number of deliveries made during a specific time period
  DELIVERY_IN_SPECIFIC_TIME = 5;
  // Number of deliveries made so far
  LIFETIME_DELIVERY = 6;
  // Contract Violations
  CONTRACT_VIOLATION = 7;
  // Rate for offers made on time (this is a newer version of ON_TIME_OR_EARLY)
  ON_TIME_RATE = 8;
  // Rate to track high quality deliveries
  HIGH_QUALITY_RATE = 9;
}

// Rating Object
message Rating {
  reserved 6;
  reserved "rating_metadata";

  // Name of the rating
  RatingType rating_type = 1;
  // Value of that rating
  oneof value {
    // int type value
    int32 int_value = 2;
    // float type value
    float float_value = 3;
  }
  // Rating metadata
  oneof metadata {
    // contains metadata about contract violation
    ContractViolationMetadata contract_violation_metadata = 4;
    // on_time rating metadata
    OnTimeRatingMetadata on_time_rating_metadata = 5;
    // high quality rating metadata
    HighQualityRateMetadata high_quality_rate_metadata = 8;
  }
  // contains metadata about the rating
  RatingScoreMetadata rating_score_metadata = 7;
}

// Metadata for the rating score
message RatingScoreMetadata {
  // Score
  int32 score = 1;
  // Max score
  int32 max_score = 2;
  // Category
  RatingCategory category = 3;
  // List of rating category values
  repeated RatingCategoryValue rating_category_values = 4;
}

// Rating category
enum RatingCategory {
  // RATING_CATEGORY_UNSPECIFIED
  RATING_CATEGORY_UNSPECIFIED = 0;
  // RATING_CATEGORY_EXCELLENT
  RATING_CATEGORY_EXCELLENT = 1;
  // RATING_CATEGORY_GREAT
  RATING_CATEGORY_GREAT = 2;
  // RATING_CATEGORY_GOOD
  RATING_CATEGORY_GOOD = 3;
  // RATING_CATEGORY_FAIR
  RATING_CATEGORY_FAIR = 4;
  // RATING_CATEGORY_VERY_LOW
  RATING_CATEGORY_VERY_LOW = 5;
  // RATING_CATEGORY_LOW
  RATING_CATEGORY_LOW = 6;
  // RATING_CATEGORY_VERY_HIGH
  RATING_CATEGORY_VERY_HIGH = 7;
  // RATING_CATEGORY_HIGH
  RATING_CATEGORY_HIGH = 8;
  // RATING_CATEGORY_MODERATE
  RATING_CATEGORY_MODERATE = 9;
}

// Rating category value
message RatingCategoryValue {
  // Category
  RatingCategory category = 1;
  // start value to compare, inclusive
  int32 start_rating = 2;
  // end value to compare, inclusive
  int32 end_rating = 3;
  // start score
  int32 start_score = 4;
  // end score
  int32 end_score = 5;
  // decimal start value to compare, inclusive
  google.protobuf.DoubleValue start_rating_decimal = 6;
  // decimal end value to compare, inclusive
  google.protobuf.DoubleValue end_rating_decimal = 7;
}

// Metadata for contract violation
message ContractViolationMetadata {
  // Number of unread contract violation in L100 deliveries
  int32 unread_contract_violation = 1;
}

// Metadata for on_time rating
message OnTimeRatingMetadata {
  reserved 4;
  reserved "rating_score_metadata";

  // ontime count
  int32 on_time_count = 1;
  // late count
  int32 late_count = 2;
  // excused count
  int32 excused_count = 3;
}

// Metadata for high quality rate
message HighQualityRateMetadata {
  // Number of deliveries without any issues
  int32 delivery_without_issues_count = 1;
  // Number of deliveries with issues
  int32 delivery_issues_count = 2;
}

// Rules build a tier's qualification criteria
message TierRule {
  // Rule types
  enum Type {
    // Invalid Type
    TYPE_UNSPECIFIED = 0;
    // accepatance rate
    TYPE_ACCEPTANCE_RATE = 1;
    // completion rate
    TYPE_COMPLETION_RATE = 2;
    // customer rating
    TYPE_CUSTOMER_RATING = 3;
    // last 30 day deliveries
    TYPE_RECENT_DELIVERIES = 4;
    // lifetime deliveries
    TYPE_LIFETIME_DELIVERIES = 5;
    // contract violations
    TYPE_CONTRACT_VIOLATIONS = 6;
    // composite_score
    TYPE_COMPOSITE_SCORE = 7;
  }

  // type
  Type type = 1;

  // Rule comparision operator
  enum Operator {
    // Invalid Type
    OPERATOR_UNSPECIFIED = 0;
    // less than
    OPERATOR_LESS_THAN = 1;
    // greater than or equal
    OPERATOR_GREATER_THAN_EQUAL = 2;
    // in range
    OPERATOR_RANGE = 3;
  }

  // int value type
  message RuleIntValue {
    // value
    int32 value = 1;
    // operator
    Operator operator = 2;
  }

  // float value type
  message RuleFloatValue {
    // value
    float value = 1;
    // operator
    Operator operator = 2;
  }

  // int range value type
  message RuleIntRangeValue {
    // start value to compare, inclusive
    int32 start = 1;
    // end value to compare, inclusive
    int32 end = 2;
    // operator
    Operator operator = 3;
  }

  // value of rule
  oneof value {
    // int value
    RuleIntValue int_value = 3;
    // float value
    RuleFloatValue float_value = 4;
    // int range value
    RuleIntRangeValue int_range_value = 5;
  }
}

// Criteria that defines a Tier.
message TierQualification {
  // Tracks changes in qualification structure
  int32 version = 1;
  // list of rules
  repeated TierRule rules = 2;
}

// Dasher tier object
message DasherTier {
  // Id of the dasher
  int64 dasher_id = 1;
  // Type of the tier
  TierType tier_type = 2;
  // Dasher's ratings
  repeated Rating ratings = 3;
  // Created timestamp of the tier
  google.protobuf.Timestamp created_at = 4;
  // Last updated timestamp of the tier
  google.protobuf.Timestamp updated_at = 5;
  // Refer to a DasherTierOverride. If this field is not null, this Tier is
  // being affected by the override with the uuid of this field.
  google.protobuf.StringValue active_override = 6;
  // Rewards associated with the tier.
  repeated string reward_ids = 7;
  // Starting Point ID
  int32 starting_point_id = 8;
  // Criteria that defines a Tier.
  TierQualification tier_qualification = 9;
}

// Describing a dasher tier override. An override applies to a tier calculation
// as an override to mask out specific qualification or directly override
// the dasher with a specific tier - with specified scheduled start and end
// timestamps along with extra expire rules.
message DasherTierOverride {
  // Id of the dasher
  int64 dasher_id = 1;

  // Name of the tier
  TierType tier = 2;

  // UUID so it can be referenced with this one field.
  string id = 10;

  // Scheduled start timestamp of this override.
  google.protobuf.Timestamp scheduled_start = 3;

  // Scheduled end timestamp of this override.
  google.protobuf.Timestamp scheduled_end = 4;

  // Expiration timestamp of this override. If this field is null the
  // override is either active or will be active in the future. If this field
  // is set, this override has expired.
  google.protobuf.Timestamp expired_at = 5;

  // Mask rules are used to mask a certain qualification from the Tier.
  // i.e. if CR is masked, then CR won't be considered when determining the
  // Dasher's Tier, even if the Dx has a CR of 50%, they'll be qualified for
  // any tiers.
  message MaskRules {
    // The types to be masked during the override.
    repeated TierRule.Type masked_types = 1;
  }
  // Masking rules of this override.
  MaskRules mask_rules = 6;

  // Expire rules are used to determine when an override expires other than
  // the `scheduled_end` timestamp. If this field is not null, expiration
  // will happen
  // For example, when a certain qualification reaches a certain number, i.e.
  // when lifetime delivery reaches 100 or Acceptance Rate reaches 0.8.
  message ExpireRules {
    // Override will expire once lifetime delivery count becomes greater or
    // equal to this target.
    google.protobuf.Int32Value lifetime_delivery_target = 1;
  }
  // Expire rules of this override.
  ExpireRules expire_rules = 7;

  // Timestamp for creation of the override.
  google.protobuf.Timestamp created_at = 8;

  // Timestamp for the last update of the override.
  google.protobuf.Timestamp updated_at = 9;

  // If the priority of current override is higher than the new one,
  // it prevents new overrides from being created and take precedence over this once if there is a time overlap.
  TierOverridePriority priority = 11;
}

// StartingPointToTierV2 object
message StartingPointToTierV2 {
  // Starting Point ID
  int64 starting_point_id = 1;
  // Name of the tier (Required)
  TierType tier_type = 2;
  // TierV2 ID
  string tier_v2_id = 3;
  // Created timestamp of the sp_to_tier_v2
  google.protobuf.Timestamp created_at = 4;
  // Last updated timestamp of the sp_to_tier_v2
  google.protobuf.Timestamp updated_at = 5;
  // If the sp_to_tier_v2 is active or not. Default will be false.
  bool is_active = 6;
}
