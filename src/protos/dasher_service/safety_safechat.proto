syntax = "proto3";

package dasher_service.safety.v1;

import "doordash.api/annotations.proto";
import "doordash.api/client.proto";
import "doordash.api/field_validate.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "lego.response/lego_response.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.dasher.safety";

// Safechat APIs
service SafechatService {
  option (doordash.api.service) = {
    name: "safety-service"
    url: "safety-service-api.service.prod.ddsd"
    port: 50051
    name_spaces: ["safety-service"]
    owner: {
      id: "trust-and-safety-observability"
      name: "safety"
      slack_channel: "#ask-safety-eng"
      email_alias: "tns-eng@doordash.com"
    }
    target_products: [
      CX,
      DX,
      PHONE_MODERATION
    ]
  };
  // Safechat Moderation Cancel Active Delivery
  rpc SafechatModerationCancelActiveDelivery(SafechatModerationCancelActiveDeliveryRequest) returns (SafechatModerationCancelActiveDeliveryResponse) {
    option (google.api.http) = {
      // {HttpMethod}: "{pathPattern}"
      post: "/safety-service/v1/safechat/active_delivery_escape"
      // Needed for post, patch, put methods. Omit for others.
      body: "*"
    };

    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [CX_USER]
      target_products: [CX]
    };
  }
  // Safechat Check if in app chat message is safe
  rpc SafeChatCheckIfChatSafe(SafeChatCheckMessageSafetyRequest) returns (SafeChatCheckMessageSafetyResponse);
  // Safechat Check if in app chat image is safe
  rpc SafeChatCheckImageSafety(SafeChatCheckImageSafetyRequest) returns (SafeChatCheckImageSafetyResponse);
  // Moderate a sms message by blocking and censoring it with escape hatch when necessary
  rpc SafeChatModerateSmsMessage(SafeChatModerateSmsMessageRequest) returns (SafeChatModerateSmsMessageResponse);
  // Moderate a drop-off image by blocking and censoring it with escape hatch when necessary
  rpc SafeChatModerateDropOffImage(SafeChatModerateDropOffImageRequest) returns (SafeChatModerateDropOffImageResponse);
  // Safechat Moderation Cancel Active Delivery
  rpc GetEscapeHatchUi(GetEscapeHatchUiRequest) returns (GetEscapeHatchUiResponse) {
    option (google.api.http) = {get: "/safety-service/v1/safechat/active_delivery_escape_ui"};

    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [CX_USER]
      target_products: [CX]
    };
  }

  // Phone Moderation store moderation results
  rpc StorePhoneModerationResults(StorePhoneModerationResultsRequest) returns (StorePhoneModerationResultsResponse);

  // Check if escape hatch is available for SMS moderation
  rpc GetSmsEscapeHatchAvailability(GetSmsEscapeHatchAvailabilityRequest) returns (GetSmsEscapeHatchAvailabilityResponse) {
    option (google.api.http) = {get: "/safety-service/v1/safechat/sms_escape_hatch_availability"};

    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DX_USER]
      target_products: [DX]
    };
  }

  // Check if dasher and delivery is eligible for SMS moderation
  rpc GetSmsModerationAvailability(GetSmsModerationAvailabilityRequest) returns (GetSmsModerationAvailabilityResponse);
}

// Request to get availability of SMS moderation
message GetSmsModerationAvailabilityRequest {
  // the delivery id
  google.protobuf.Int64Value delivery_id = 1;
  // the dasher id
  google.protobuf.StringValue dasher_id = 2;
  // the delivery uuid
  google.protobuf.StringValue delivery_uuid = 3;
}

// Response to get availability of SMS moderation
message GetSmsModerationAvailabilityResponse {
  // whether the moderation is available or not
  google.protobuf.BoolValue is_available = 1;
}

// Request to get availability of SMS escape hatch
message GetSmsEscapeHatchAvailabilityRequest {
  // the delivery uuid
  string delivery_uuid = 1;
  // the dasher id
  string dasher_id = 2;
}

// Response to get availability of SMS escape hatch
message GetSmsEscapeHatchAvailabilityResponse {
  // whether the escape hatch is available or not
  bool is_available = 1;
}

// Request to store phone moderation results
message StorePhoneModerationResultsRequest {
  // The version of this request
  google.protobuf.StringValue version = 1;
  // The ID of the moderation who moderated the clip
  google.protobuf.StringValue moderator_id = 2;
  // Email of the person who moderated the clip
  google.protobuf.StringValue moderator_email = 3;
  // Our account ID with the vendor
  google.protobuf.StringValue account_id = 4;
  // Moderation action taken by the moderator
  google.protobuf.StringValue moderation_action = 5;
  // The User ID
  google.protobuf.StringValue player_id = 6;
  // Timestamp
  google.protobuf.StringValue timestamp = 7;
  // Offense ID
  google.protobuf.StringValue offense_id = 8;
  // Alias of the user
  google.protobuf.StringValue player_alias = 9;
  // Transcript
  google.protobuf.StringValue transcript = 10;
  // Timestamp where the bad audio was spoken
  google.protobuf.StringValue clip_spoken_timestamp = 11;
  // URL of audio
  google.protobuf.StringValue audio_url = 12;
  // A session ID
  google.protobuf.StringValue session_id = 13;
  // The score of moderation
  google.protobuf.StringValue score = 14;
  // The primary category flagged
  google.protobuf.StringValue primary_category = 15;
  // a list of clips that happened before and after the flagged clip
  repeated PhoneModerationContext context = 16;
  // Session alias
  google.protobuf.StringValue session_alias = 17;
  // Session data
  google.protobuf.StringValue session_data = 18;
  // Language
  google.protobuf.StringValue language = 19;
  // Comment from the moderator
  google.protobuf.StringValue moderation_comment = 20;
}

// Phone Moderation Clip Contexts
message PhoneModerationContext {
  // The transcript text
  google.protobuf.StringValue transcript = 1;
  // URL of audio
  google.protobuf.StringValue audio_url = 2;
  // Timestamp spoken
  google.protobuf.StringValue clip_spoken_timestamp = 3;
  // The player ID
  google.protobuf.StringValue player_id = 4;
  // A UUID for the audio
  google.protobuf.StringValue audio_uuid = 5;
  // The alias of the user
  google.protobuf.StringValue player_alias = 6;
  // Language
  google.protobuf.StringValue language = 7;
}

// Response to store phone moderation results
message StorePhoneModerationResultsResponse {}

// Request to get the escape hatch UI
message GetEscapeHatchUiRequest {
  // the delivery uuid
  string delivery_uuid = 1;
  // the consumer id
  string consumer_id = 2;
  // version of UI to return
  int32 version = 3;
  // the page to return
  EscapeHatchPage escape_hatch_page = 4;
  // The refund choice of the Cx
  RefundChoice refund_choice = 5;
}

// enum of page types
enum EscapeHatchPage {
  // Unspecified
  ESCAPE_HATCH_PAGE_UNSPECIFIED = 0;
  // Landing escape hatch page when content first detected
  ESCAPE_HATCH_PAGE_HARMFUL_CONTENT_DETECTED_LANDING = 1;
  // Refund options if Cx is wants to cancel
  ESCAPE_HATCH_PAGE_REFUND_OPTIONS = 2;
  // Refund completed page after refund issued
  ESCAPE_HATCH_PAGE_REFUND_COMPLETED = 3;
}

// Response to get the escape hatch UI
message GetEscapeHatchUiResponse {
  // The lego page to render
  lego.response.v1.LegoPageResponse lego_page_response = 1;
  // version number of the page
  int32 version = 2;
}

message SafeChatCheckMessageSafetyRequest {
  // Id of chat event
  string id = 1;
  // Url of channel
  string channel_url = 2;
  // Masked chat message
  string chat_msg = 3;
  // Time of chat event
  google.protobuf.Timestamp chat_event_time = 4;
  // The user id of sender
  string sender_id = 5;
  // The role of sender
  string sender_role = 6;
}

message SafeChatCheckImageSafetyRequest {
  // Id of chat event
  string id = 1;
  // Url of channel
  string channel_url = 2;
  // Private url of chat Image
  string chat_image_url = 3;
  // Time of chat event
  google.protobuf.Timestamp chat_image_event_time = 4;
  // The user id of sender
  string sender_id = 5;
  // The user id of receiver
  string receiver_id = 6;
  // Whether or not to disable image moderation actions
  bool disable_actions = 7;
}

message SafeChatCheckMessageSafetyResponse {
  // whether or not the message is safe
  bool is_safe = 1;
  // the message to send back
  string message = 2;
}

message SafeChatCheckImageSafetyResponse {
  bool is_safe = 1;
}

message SafeChatModerateDropOffImageRequest {
  // Public url of drop-off image
  string image_url = 1;
  // The user id of image uploader (dasher)
  string dasher_id = 2;
  // The delivery uuid of the drop-off image
  string delivery_uuid = 3;
}

message SafeChatModerateDropOffImageResponse {
  bool is_safe = 1;
}

// Safechat Moderation Cancel Active Delivery Request
message SafechatModerationCancelActiveDeliveryRequest {
  // Delivery Uuid
  string delivery_uuid = 1;
  // Decision to cancel or dismiss
  SafechatModerationCancelActiveDeliveryDecision decision = 2;
  // The type of escape hatch (cx/dx/etc.)
  SafechatEscapeHatchType escape_hatch_type = 3;
  // Refund choice of the Cx if eligible
  RefundChoice refund_choice = 4;
}

// Cx's refund choice
enum RefundChoice {
  // unspecified
  REFUND_CHOICE_UNSPECIFIED = 0;
  // original payment method
  REFUND_CHOICE_ORIGINAL_PAYMENT_METHOD = 1;
  // credits
  REFUND_CHOICE_CREDITS = 2;
}

// Safechat Moderation Cancel Active Delivery Response
message SafechatModerationCancelActiveDeliveryResponse {
  // Delivery Uuid
  string delivery_uuid = 1;
}

// SafeChat Moderate Sms Message Request
message SafeChatModerateSmsMessageRequest {
  reserved 3, 6;
  reserved "sender_role", "receiver_role";
  // sms message content
  SmsMessage sms_message = 1;
  // The user id of sender
  string sender_id = 2;
  // Delivery uuid
  string delivery_uuid = 4;
  // The user id of receiver
  string receiver_id = 5;
  // The role of the sender, enum type
  SafechatUserRole sender_user_role = 7;
  // The role of the receiver, enum type
  SafechatUserRole receiver_user_role = 8;
}

// SafeChat Moderate Sms Message Response
message SafeChatModerateSmsMessageResponse {
  // Messages sent to sender
  repeated SmsMessage origin_sms_messages = 1;
  // Messages sent to receiver
  repeated SmsMessage destination_sms_messages = 2;
}

// Sms message
message SmsMessage {
  // Text message content
  string text = 1;
  // Images attached in the message
  repeated string image_urls = 2;
  // SMS message type
  SmsMessageType message_type = 3;
}

// Safechat Moderation Cancel Active Delivery Decision
enum SafechatModerationCancelActiveDeliveryDecision {
  // Unspecified
  SAFECHAT_MODERATION_CANCEL_ACTIVE_DELIVERY_DECISION_UNSPECIFIED = 0;
  // Cancel or unassign
  SAFECHAT_MODERATION_CANCEL_ACTIVE_DELIVERY_DECISION_CANCEL = 1;
  // Dismiss
  SAFECHAT_MODERATION_CANCEL_ACTIVE_DELIVERY_DECISION_DISMISS = 2;
  // Reorder
  SAFECHAT_MODERATION_CANCEL_ACTIVE_DELIVERY_DECISION_REORDER = 3;
  // Reassign
  SAFECHAT_MODERATION_CANCEL_ACTIVE_DELIVERY_DECISION_REASSIGN = 4;
}

enum SafechatEscapeHatchType {
  // Unspecified
  SAFECHAT_ESCAPE_HATCH_TYPE_UNSPECIFIED = 0;
  // Dx escape hatch
  SAFECHAT_ESCAPE_HATCH_TYPE_DX_ESCAPE_HATCH = 1;
  // Cx escape hatch
  SAFECHAT_ESCAPE_HATCH_TYPE_CX_ESCAPE_HATCH = 2;
}

enum SmsMessageType {
  // Unspecified
  SMS_MESSAGE_TYPE_UNSPECIFIED = 0;
  // Original message forwarded to destination
  SMS_MESSAGE_TYPE_FORWARDED_MESSAGE = 1;
  // Original message censored and forwarded to destination
  SMS_MESSAGE_TYPE_CENSORED_MESSAGE = 2;
  // SafeChat admin message
  SMS_MESSAGE_TYPE_SAFECHAT_ADMIN_MESSAGE = 3;
}

enum SafechatUserRole {
  // Unspecified
  SAFECHAT_USER_ROLE_UNSPECIFIED = 0;
  // Consumer
  SAFECHAT_USER_ROLE_CONSUMER = 1;
  // Dasher
  SAFECHAT_USER_ROLE_DASHER = 2;
  // Merchant
  SAFECHAT_USER_ROLE_MERCHANT = 3;
}
