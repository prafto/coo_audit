syntax = "proto3";

package dasher_service.safety;

import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.dasher.safety";

// A service in support of dasher safety related initiatives
service SafetyService {
  // Call dasher safety for safety service provider
  rpc GetAvailability(GetAvailabilityRequest) returns (GetAvailabilityResponse);
  // Call ADT endpoints for service availability
  rpc GetStatus(GetStatusRequest) returns (GetStatusResponse);
  // Call ADT endpoints for a silent alert
  rpc TriggerSilentAlert(SilentAlertRequest) returns (EmptyResponse);
  // Call ADT endpoints for a check in call
  rpc TriggerAgentCall(AgentCallRequest) returns (EmptyResponse);
  // Call ADT endpoints for a silent alert
  rpc TriggerSilentAlertV2(SilentAlertRequest) returns (SilentAlertResponse);
  // Call ADT endpoints for a check in call
  rpc TriggerAgentCallV2(AgentCallRequest) returns (AgentCallResponse);
  // Save ADT incident update event
  rpc SaveAdtIncidentUpdateEvent(AdtIncidentUpdateEventRequest) returns (EmptyResponse) {
    option deprecated = true;
  }
  // Store ADT incident update event
  rpc StoreAdtIncidentUpdateEvent(StoreAdtIncidentUpdateEventRequest) returns (EventUpdateStatus);
  // This will be called by chat user to report in-app chats
  rpc ReportInAppChat(ReportInAppChatRequest) returns (ReportInAppChatResponse);
  // Store Dasher Delivery Ratings
  rpc StoreDasherDeliveryRating(StoreDasherDeliveryRatingRequest) returns (StoreDasherDeliveryRatingResponse);
  // Get Dasher Delivery Rating Categories
  rpc GetDasherDeliveryCategory(GetDasherDeliveryRatingCategoryRequest) returns (GetDasherDeliveryRatingCategoryResponse);
  // Store Dasher Delivery Sentiments
  rpc StoreDasherDeliverySentiment(StoreDasherDeliverySentimentRequest) returns (StoreDasherDeliverySentimentResponse);
  // Get Dasher Delivery Rating Categories
  rpc GetDasherDeliverySentimentCategories(GetDasherDeliverySentimentCategoriesRequest) returns (GetDasherDeliverySentimentCategoriesResponse);
  // Get is Dasher Delivery Sentiment Survey Enabled
  rpc GetDasherDeliverySentimentSurveyEnabled(GetDasherDeliverySentimentSurveyEnabledRequest) returns (GetDasherDeliverySentimentSurveyEnabledResponse);
  // Create new sentiment categories
  rpc CreateDasherDeliverySentimentCategory(CreateDasherDeliverySentimentCategoryRequest) returns (CreateDasherDeliverySentimentCategoryResponse);
  // Update a category
  rpc UpdateDasherDeliverySentimentCategory(UpdateDasherDeliverySentimentCategoryRequest) returns (UpdateDasherDeliverySentimentCategoryResponse);
  // IsOrderSafe check
  rpc IsOrderSafe(IsOrderSafeRequest) returns (IsOrderSafeResponse);
}

// Order Info
message OrderInfo {
  // Phone number
  google.protobuf.StringValue phone_number = 1;
  // Address ID
  google.protobuf.StringValue address_id = 2;
  // Email
  google.protobuf.StringValue email = 3;
  // Submarket ID
  google.protobuf.StringValue submarket_id = 4;
  // Store ID
  google.protobuf.Int64Value store_id = 5;
  // Business ID
  google.protobuf.Int64Value business_id = 6;
  // Starting Point ID
  google.protobuf.Int64Value starting_point_id = 7;
}

// Is Order Safe Request
message IsOrderSafeRequest {
  OrderInfo order_info = 1;
}

// Is Order Safe Response
message IsOrderSafeResponse {
  bool is_eligible = 1;
  // Optional reason for safety issue
  google.protobuf.StringValue reason = 2;
}

// Update Sentiment Category Request
message UpdateDasherDeliverySentimentCategoryRequest {
  // Rating ID
  int32 rating_id = 1;
  // Category ID
  int32 category_id = 2;
  // Translation ID for the category text
  string category_translation_id = 3;
  // Fallback Category Text
  string category_friendly_name = 4;
  // Active status
  bool is_active = 5;
}

// Update Sentiment Category Response
message UpdateDasherDeliverySentimentCategoryResponse {}

// Create a Sentiment Category Request
message CreateDasherDeliverySentimentCategoryRequest {
  // Rating ID
  int32 rating_id = 1;
  // Category ID
  int32 category_id = 2;
  // Translation ID for the category text
  string category_translation_id = 3;
  // Fallback Category Text
  string category_friendly_name = 4;
}

// Create Sentiment Category Response
message CreateDasherDeliverySentimentCategoryResponse {}

// Status request
message GetStatusRequest {
  google.protobuf.FloatValue lat = 1;

  google.protobuf.FloatValue lng = 2;
}

// Status response
message GetStatusResponse {
  string provider = 1;
  repeated string active_features = 2;
}

// Empty availability request
message GetAvailabilityRequest {}

// Availability response
message GetAvailabilityResponse {
  string provider = 1;
}

message Geolocation {
  google.protobuf.FloatValue lat = 1;

  google.protobuf.FloatValue lng = 2;

  int64 accuracy_meters = 3;

  google.protobuf.Timestamp observed = 4;
}

// Silent alert request
message SilentAlertRequest {
  Geolocation geolocation = 1;
}

// Agent call request
message AgentCallRequest {
  Geolocation geolocation = 1;
  google.protobuf.StringValue event_type = 2;
  google.protobuf.StringValue context = 3;
}

// Silent alert response
message SilentAlertResponse {
  // event id generated by ADT
  string event_id = 1;
}

// Agent call response
message AgentCallResponse {
  // event id generated by ADT
  string event_id = 1;
}

// ADT incident update event request
message AdtIncidentUpdateEventRequest {
  string notification_id = 1;

  string event_id = 2;

  string incident_id = 3;

  string update_type = 4;

  google.protobuf.Timestamp occurred_at = 5;
}

// Empty alert response
message EmptyResponse {}

// ADT webhook update data request
message StoreAdtIncidentUpdateEventRequest {
  string raw_message = 1;
}

// ADT webhook update data persistence status
message EventUpdateStatus {
  message Success {}

  message UpdateError {
    string error_code = 1;
    string error_message = 2;
  }

  // result is either success or error
  oneof result {
    // on success
    Success success = 1;
    // on error
    UpdateError error = 2;
  }
}

// Information about the user making the request.
message ReportRequestUserInfo {
  // Unique ID for the user making the request.
  oneof id {
    // DoorDash Consumer ID.
    string consumer_id = 1;
    // DoorDash Dasher ID.
    string dasher_id = 2;
  }
}

enum ReportReason {
  // Unspecified (Don't set this val)
  REPORT_REASON_UNSPECIFIED = 0;
  // harassment
  REPORT_REASON_HARASSMENT = 1;
  // thread
  REPORT_REASON_THREAT = 2;
  // rude
  REPORT_REASON_RUDE = 3;
  // fraud
  REPORT_REASON_FRAUD = 4;
  // other
  REPORT_REASON_OTHER = 5;
  // "I think the customer may file a report for something out of my control"
  REPORT_REASON_UNFAIRLY_REPORTED = 6;
  // Customer wants to change the dropoff address
  REPORT_REASON_DROPOFF_LOCATION_CHANGE = 7;
}

// Report in app chat request
message ReportInAppChatRequest {
  // Delivery Id
  string delivery_id = 1;
  // Sendbird channel url
  string channel_url = 2;
  // Sendbird message id
  string message_id = 3;
  // Information about the user making the request.
  ReportRequestUserInfo user_info = 4;
  // Reason for reporting
  ReportReason report_reason = 5;
  // Information about other Report Reason
  string report_reason_comment = 6;
}

// Report in app chat response
message ReportInAppChatResponse {}

// Dasher delivery Rating
message StoreDasherDeliveryRatingRequest {
  // Dasher Id
  int64 dasher_id = 1;
  // Delivery Id
  int64 delivery_id = 2;
  // Dasher Delivery Rating
  Rating rating = 3;
  // List of checked categories
  repeated int32 checked_reason_category_ids = 4;
  // Comment
  google.protobuf.StringValue comments = 5;
  // Delivery UUID
  google.protobuf.StringValue delivery_uuid = 6;
}

// Dasher delivery Rating Response
message StoreDasherDeliveryRatingResponse {}

// Dasher Delivery Sentiment Request
message StoreDasherDeliverySentimentRequest {
  // Delivery UUID
  string delivery_uuid = 1;
  // Dasher Delivery Rating
  int32 rating_id = 2;
  // List of checked categories
  repeated int32 category_ids = 3;
  // Comment
  google.protobuf.StringValue comments = 4;
  // Delivery Id
  int64 delivery_id = 5;
}

// Dasher Delivery Sentiment Response
message StoreDasherDeliverySentimentResponse {}

// Dasher Delivery Sentiment Categories Request params
message GetDasherDeliverySentimentCategoriesRequest {
  // the version number of the categories
  int32 version = 1;
  // whether or not the order contains alcohol
  bool contains_alcohol = 2;
}

message GetDasherDeliverySentimentSurveyEnabledRequest {
  // Delivery UUID
  string delivery_uuid = 1;
  // If the order contains alcohol
  bool contains_alcohol = 2;
  // Consumer ID of customer being delivered to
  int64 consumer_id = 3;
  // Address ID of address being delivered to
  string address_id = 4;
}

message GetDasherDeliverySentimentSurveyEnabledResponse {
  // Is the survey enabled
  bool is_enabled = 1;
}

// Dasher Delivery Rating Category Request params
message GetDasherDeliveryRatingCategoryRequest {}

// Dasher Delivery Rating Category
message DasherDeliveryRatingCategory {
  // Delivery Rating Category Id
  int32 delivery_rating_category_id = 1;
  // Delivery Rating Category Name
  string delivery_rating_category_name = 2;
  // Delivery Category Friendly Name
  string delivery_rating_category_friendly_name = 3;
  // Delivery Category Group
  string delivery_rating_category_group = 4;
}

// Dasher Delivery Rating Category Response params
message GetDasherDeliveryRatingCategoryResponse {
  // Delivery Rating Category List
  repeated DasherDeliveryRatingCategory delivery_rating_categories = 1;
}

message GetDasherDeliverySentimentCategoriesResponse {
  // List of available sentiment ratings
  repeated DeliverySentimentRating ratings = 1;
  // a list of ratings -> a list of categories for each rating
  repeated DeliverySentimentCategory categories = 2;
}

message DeliverySentimentCategory {
  // Category ID
  int32 category_id = 1;
  // Fallback Category Text
  string category_friendly_name = 2;
  // Identifies if a category requires user input
  bool requires_text_block = 3;
  // Identifies if a category is potentially serious
  bool potentially_serious = 4;
  // The rating ID associated with this category
  int32 rating_id = 5;
}

message DeliverySentimentRating {
  // Rating ID
  int32 rating_id = 1;
  // Fallback Rating Text
  string rating_friendly_name = 2;
  // If selecting a category is required for this rating
  bool requires_category = 3;
}

// Dasher Delivery Rating
enum Rating {
  // Unspecified (Don't set this val)
  RATING_UNSPECIFIED = 0;
  // Good Delivery Rating
  RATING_GOOD = 1;
  // Bad Delivery Rating
  RATING_BAD = 2;
}
