syntax = "proto3";

package dasher_service.ratings;

import "dasher_service/dasher_ratings_platform.proto";
import "dasher_service/dasher_tier.proto";
import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "google/rpc/status.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.dasher.ratings";

// ratings endpoints for dasher
service DasherRatingsService {
  // get non-waived dasher ratings
  rpc GetDasherRatings(GetDasherRatingsRequest) returns (GetDasherRatingsResponse);
  // get dasher rating comments
  rpc GetDasherRatingComments(GetDasherRatingCommentsRequest) returns (GetDasherRatingCommentsResponse);
  // flag dasher rating comment as abusive
  rpc FlagRatingComment(FlagRatingCommentRequest) returns (FlagRatingCommentResponse);
  // get dasher rating main tab
  rpc GetDasherRatingMainTab(GetDasherRatingMainTabRequest) returns (GetDasherRatingMainTabResponse);
  // Batch get dasher rating assignment info (Deep Red integration, for usage in dasher_assignment_info_service)
  rpc GetDasherRatingsAssignmentInfo(GetDasherRatingsAssignmentInfoRequest) returns (GetDasherRatingsAssignmentInfoResponse);
  // resets a dasher's rating
  rpc ResetDasherRating(ResetDasherRatingRequest) returns (ResetDasherRatingResponse);
  // Bulk resets multiple dasher's ratings
  rpc BulkResetDasherRating(BulkResetDasherRatingRequest) returns (BulkResetDasherRatingResponse);
  // get dasher rating main tab
  rpc InsertDeliveryStateChangeEvent(InsertDeliveryStateChangeEventRequest) returns (InsertDeliveryStateChangeEventResponse);
  // insert delivery event from DIP kafka consumer
  rpc InsertDeliveryEvent(InsertDeliveryEventRequest) returns (InsertDeliveryEventResponse);
  // get delivery state change events for a dasher by type
  rpc GetRecentDeliveryStateEventsByType(GetRecentDeliveryStateEventsByTypeRequest) returns (GetRecentDeliveryStateEventsByTypeResponse);
  // get delivery state change events for a dasher by type
  rpc GetRecentDeliveryStateEventsByTypeInDeliveryIdList(GetRecentDeliveryStateEventsByTypeInDeliveryIdListRequest) returns (GetRecentDeliveryStateEventsByTypeInDeliveryIdListResponse);
  // get delivery state change events for a dasher by type
  rpc GetPreComputedRatingByRatingType(GetPreComputedRatingByRatingTypeRequest) returns (GetPreComputedRatingByRatingTypeResponse);
  // get delivery state change events for a dasher by type
  rpc GetPreComputedRatings(GetPreComputedRatingsRequest) returns (GetPreComputedRatingsResponse);
  // index precomputed ratings in elastic search
  rpc InsertPreComputedRatingByRatingTypeInES(InsertPreComputedRatingByRatingTypeInESRequest) returns (InsertPreComputedRatingByRatingTypeInESResponse);
  // get precomputed ratings from elastic search
  rpc GetPreComputedRatingByRatingTypeFromES(GetPreComputedRatingByRatingTypeFromESRequest) returns (GetPreComputedRatingByRatingTypeFromESResponse);
  // utility API to get ratings backfill failures greater than the input timestamp
  rpc GetDasherRatingsBackfillFailures(GetDasherRatingsBackfillFailuresRequest) returns (GetDasherRatingsBackfillFailuresResponse);
  // Bulk Waive acceptance rate and Completion rate by inserting delivery state change events with is_excused set to true
  rpc BulkWaiveDeliveryStateChangeEvents(BulkWaiveDeliveryStateChangeEventsRequest) returns (BulkWaiveDeliveryStateChangeEventsResponse);
  // Get the rating tips for dasher across different categories
  rpc GetDasherRatingTipsListView(GetDasherRatingTipsListViewRequest) returns (GetDasherRatingTipsListViewResponse);
  // [DEPRECATED] Check whether dasher is part of reward tier experiment
  rpc IsDasherInRewardTierExperiment(IsDasherInRewardTierExperimentRequest) returns (IsDasherInRewardTierExperimentResponse) {
    option deprecated = true;
  }
  // [DEPRECATED] Filter out all dashers who aren't part of the reward tier experiment
  rpc FilterDashersInRewardTierExperiment(FilterDashersInRewardTierExperimentRequest) returns (FilterDashersInRewardTierExperimentResponse) {
    option deprecated = true;
  }
  // Computes and updates dasher delivery count
  rpc ComputeDasherDeliveryRating(ComputeDasherDeliveryRatingRequest) returns (ComputeDasherDeliveryRatingResponse);
  // Fetch the dasher delivery count. (Can compute at max of last 90 days for a given dasher)
  rpc GetDasherDeliveryCount(GetDasherDeliveryCountRequest) returns (GetDasherDeliveryCountResponse);
  // Bulk Waive ARP (acceptance rate by package) by inserting delivery events with is_excused set to true
  rpc BulkWaiveDeliveryEvents(BulkWaiveDeliveryEventsRequest) returns (BulkWaiveDeliveryEventsResponse);
  // Get the page content for the dasher unassign warning banner
  rpc GetPageContentForUnassignWarningBanner(GetPageContentForUnassignWarningBannerRequest) returns (GetPageContentForUnassignWarningBannerResponse);
  // Calculate the delivery eta buffer for a delivery (or set of deliveries) and report if it was on time
  rpc ValidateOnTimeStatus(ValidateOnTimeStatusRequest) returns (ValidateOnTimeStatusResponse);
  // Create a new customer rating
  rpc CreateCustomerReviewInRatingsHistoryForDasher(CreateCustomerReviewInRatingsHistoryForDasherRequest) returns (CreateCustomerReviewInRatingsHistoryForDasherResponse);
  // Update an existing customer rating
  rpc UpdateCustomerReviewInRatingsHistoryForDasher(UpdateCustomerReviewInRatingsHistoryForDasherRequest) returns (UpdateCustomerReviewInRatingsHistoryForDasherResponse);
}

// request for CreateCustomerRatingForDasher
message CreateCustomerReviewInRatingsHistoryForDasherRequest {
  // the data for the customer review
  dasher_service.ratings_platform.v1.CustomerRatingHistory.CustomerRatingData customer_rating_data = 1;
}

// response for CreateCustomerRatingForDasher
message CreateCustomerReviewInRatingsHistoryForDasherResponse {}

// request for UpdateCustomerRatingForDasher
message UpdateCustomerReviewInRatingsHistoryForDasherRequest {
  // the data for the customer review
  dasher_service.ratings_platform.v1.CustomerRatingHistory.CustomerRatingData customer_rating_data = 1;
}

// response for UpdateCustomerRatingForDasher
message UpdateCustomerReviewInRatingsHistoryForDasherResponse {}

// request for GetDasherRatings
message GetDasherRatingsRequest {
  // dasher_id making this request
  int32 dasher_id = 1;
  // number of ratings to use for calculations
  int32 limit = 2;
}

//  request for BulkWaiveDeliveryStateChangeEvents
message BulkWaiveDeliveryStateChangeEventsRequest {
  // delivery event to be excused
  repeated ExcuseDeliveryStateChangeEvent excuse_delivery_state_change_event = 1;
}

// DeliveryStateChangeEvent as received from kafka consumer , stored in db
message ExcuseDeliveryStateChangeEvent {
  // dasher_id making this request
  int32 dasher_id = 1;
  // delivery_id of the event
  int64 delivery_id = 2;
  // delivery_uuid of the event
  string delivery_uuid = 3;
  // event timestamp of delivery event
  google.protobuf.Timestamp event_timestamp = 4;
}

// response for BulkWaiveDeliveryStateChangeEventsResponse
message BulkWaiveDeliveryStateChangeEventsResponse {
  // return result or error
  oneof value {
    // result
    BulkWaiveDeliveryStateChangeEventsResult result = 1;
    // error
    string error = 2;
  }
}

// BulkWaiveDeliveryStateChangeEventsResponse response status
message BulkWaiveDeliveryStateChangeEventsResult {
  // success
  google.protobuf.BoolValue success = 1;
}

// text to display based on number of ratings and average rating
message RatingInfo {
  // info message
  string message = 1;
  // info url
  string help_url = 2;
}

// dasher rating
message DasherRating {
  // average star rating
  float avg_star_rating = 1;
  // total count of dasher ratings considered in calculating average
  int32 total_count = 2;
  // count of ratings for each star rating (1, 7), (2, 10), etc
  map<int32, int32> rating_counts = 3;
  // timestamp of earliest rating considered in calculating average
  google.protobuf.Timestamp earliest_rating_timestamp = 4;
  // timestamp of latest rating considered in calculating average
  google.protobuf.Timestamp latest_rating_timestamp = 5;
  // rating info
  RatingInfo rating_info = 6;
}

// dasher comment
message Comment {
  // consumer review uuid
  string consumer_review_uuid = 1;
  // comment from customer about the dasher
  string dasher_comment = 2;
}

// list of dasher comments
message CustomerCompliments {
  // list of dasher comments
  repeated Comment comments = 1;
}

// response for GetDasherRatings
message GetDasherRatingsResponse {
  // status code
  string status_code = 1;
  // updated at timestamp
  google.protobuf.Timestamp updated_at = 2;
  // dasher ratings
  DasherRating dasher_rating = 3;
  // map of (tag_id, count)
  map<int64, google.protobuf.Int64Value> tag_counts = 4;
  // customer compliments
  CustomerCompliments customer_compliments = 5;
  // number of waived ratings between the first and the last ratings being considered
  // for calculating the average star rating
  int32 num_waived = 6;
}

// request for GetDasherRatingComments
message GetDasherRatingCommentsRequest {
  // dasher_id making this request
  int32 dasher_id = 1;
  // offset starting index
  int32 offset = 2;
  // limit for pagination
  int32 limit = 3;
}

// response for GetDasherRatingComments
message GetDasherRatingCommentsResponse {
  // Customer compliments
  CustomerCompliments customer_compliments = 1;
}

// request for FlagRatingComment
message FlagRatingCommentRequest {
  // dasher_id making this request
  int32 dasher_id = 1;
  // consumer review uuid
  string consumer_review_uuid = 2;
  // boolean value to flag rating comment
  bool comment_flagged = 3;
}

// response for FlagRatingComment
message FlagRatingCommentResponse {
  // success or failure
  bool success = 1;
}

// handle dasher delivery rating request
message ComputeDasherDeliveryRatingRequest {
  // Id of the dasher
  int64 dasher_id = 1;
  // event type
  DeliveryEventType delivery_event_type = 2;
  // delivery id
  int64 delivery_id = 3;
}

// handle dasher delivery rating response
message ComputeDasherDeliveryRatingResponse {}

// Request for dasher delivery count based on the input. (e.g. count in last N days)
message GetDasherDeliveryCountRequest {
  // To fetch the delivery count for dasher in last N days
  google.protobuf.Int32Value last_n_days = 1;
  // dasher id
  int64 dasher_id = 2;
}

// Count of dasher deliveries.
message GetDasherDeliveryCountResponse {
  // Count of dasher delivery count.
  int32 count = 1;
}

// on time rating info response
message OnTimeRating {
  // category assigned based on score - good, bad, etc
  string category = 1;
  // on time deliveries / deliveries counted for on time
  float score = 2;
  // UI fields
  string category_display_text = 3;
  // UI fields
  string score_display_text = 4;
  // UI fields
  string color = 5;
}

// pre-assign completion rating response
message PreassignCompletionRating {
  // completed_drive_delivery_count / claimed_drive_delivery_count
  int32 score = 1;
  // low (score < 90), good
  string quality_level = 2;
  // drive deliveries accepted
  int32 claimed_drive_delivery_count = 3;
  // drive deliveries completed
  int32 completed_drive_delivery_count = 4;
  // drive eligibility text
  string eligible_drive_description = 5;
}

// Info for acceptance rate tiers
message AcceptanceRateTierInfo {
  // lower bound
  float lower_bound = 1;
  // upper bound
  float upper_bound = 2;
}

// Info for customer rating tiers
message CustomerRatingTierInfo {
  // lower bound
  float lower_bound = 1;
  // upper bound
  float upper_bound = 2;
}

// dasher rating main tab response
message GetDasherRatingMainTabResponse {
  // assignments accepted / total recent deliveries
  float recent_acceptance_rate = 1;
  // total ratings / number of ratings
  float recent_customer_rating = 2;
  // customer rating
  float new_recent_customer_rating = 3;
  // num of deliveries completed
  int32 recent_num_deliveries_completed = 4;
  // completed deliveries / (total recent deliveries - excused - cancelled)
  float recent_completion_rate = 5;
  // quality(perfect, good, etc) based on recent_customer_rating
  string recent_customer_rating_quality = 6;
  // lifetime deliveries count
  int32 num_lifetime_deliveries = 7;
  // num of deliveries issues
  int32 num_delivery_issues = 8;
  // quality(perfect, good, etc) based on recent_acceptance_rate
  string recent_acceptance_rate_quality = 9;
  // quality(perfect, good, etc) based on recent_completion_rate
  string recent_completion_rate_quality = 10;
  // lifetime drive deliveries count
  int32 drive_lifetime_deliveries = 11;
  // dasher eligible for drive assignments
  bool is_qualified_for_drive = 12;
  // drive non eligibility text
  string not_eligible_drive_description = 13;
  // 0.8
  float drive_on_time_rate_deactivation_threshold = 14;
  // 4.30
  float customer_rating_deactivation_threshold = 15;
  // 0.25
  float acceptance_rate_deactivation_threshold = 16;
  // 0.85
  float completion_rate_deactivation_threshold = 17;
  // drive specific on time quality rate
  string drive_on_time_rate_quality = 18;
  // drive specific on time rate
  float drive_on_time_rate = 19;
  // drive specific on time consumer quality rate
  string drive_on_time_to_consumer_rate_quality = 20;
  // drive specific on time consumer rate
  float drive_on_time_to_consumer_rate = 21;
  // on time rating for dasher
  OnTimeRating ontime_rating = 22;
  // pre-assign completion rating for dasher
  PreassignCompletionRating preassign_completion_rating = 23;
  // set by runtime
  float top_dasher_minimum_threshold = 24;
  // set by runtime
  float top_dasher_threshold = 25;
  // orders declined should less than 1
  bool has_lifetime_declined_orders_below_threshold = 26;
  // completion_rate after last delivery
  float expected_recent_completion_rate = 27;
  // acceptance_rate after last delivery
  float expected_recent_acceptance_rate = 28;
  // average customer rating
  float star_rating = 29;
  // count of 5 star customer ratings
  int32 num_five_stars = 30;
  // AR tier map used for UI purposes
  map<int32, AcceptanceRateTierInfo> acceptance_rate_tiers = 31;
  // CR tier map used for UI purposes
  map<int32, CustomerRatingTierInfo> customer_rating_tiers = 32;
  // AR tier
  int32 acceptance_rate_tier = 33;
  // CR tier
  int32 customer_rating_tier = 34;
  // High pay order eligbility stop datetime for new dashers or resetted rating dashers, null means not eligible, not null means eligible
  google.protobuf.Timestamp high_paying_order_eligibility_stop_timestamp = 35;
  // total_recent_deliveries
  int32 total_recent_deliveries = 36;
  // recent_num_assignments_accepted
  int32 recent_num_assignments_accepted = 37;
  // ratings last updated at
  string updated_at = 38;
  // num of unread deliveries issues(contract violations)
  int32 num_unread_delivery_issues = 39;
  // customer rating based on the failure_mode
  string recent_customer_rating_v3 = 40;
}

// dasher rating main tab request
message GetDasherRatingMainTabRequest {
  // true/false
  google.protobuf.BoolValue recent_acceptance_rate = 1;
  // true/false
  google.protobuf.BoolValue recent_customer_rating = 2;
  // true/false
  google.protobuf.BoolValue new_recent_customer_rating = 3;
  // true/false
  google.protobuf.BoolValue recent_num_deliveries_completed = 4;
  // true/false
  google.protobuf.BoolValue recent_completion_rate = 5;
  // true/false
  google.protobuf.BoolValue recent_customer_rating_quality = 6;
  // true/false
  google.protobuf.BoolValue num_lifetime_deliveries = 7;
  // true/false
  google.protobuf.BoolValue num_delivery_issues = 8;
  // true/false
  google.protobuf.BoolValue recent_acceptance_rate_quality = 9;
  // true/false
  google.protobuf.BoolValue recent_completion_rate_quality = 10;
  // true/false
  google.protobuf.BoolValue drive_lifetime_deliveries = 11;
  // true/false
  google.protobuf.BoolValue is_qualified_for_drive = 12;
  // true/false
  google.protobuf.BoolValue not_eligible_drive_description = 13;
  // true/false
  google.protobuf.BoolValue drive_on_time_rate_deactivation_threshold = 14;
  // true/false
  google.protobuf.BoolValue customer_rating_deactivation_threshold = 15;
  // true/false
  google.protobuf.BoolValue acceptance_rate_deactivation_threshold = 16;
  // true/false
  google.protobuf.BoolValue completion_rate_deactivation_threshold = 17;
  // true/false
  google.protobuf.BoolValue drive_on_time_rate_quality = 18;
  // true/false
  google.protobuf.BoolValue drive_on_time_rate = 19;
  // true/false
  google.protobuf.BoolValue drive_on_time_to_consumer_rate_quality = 20;
  // true/false
  google.protobuf.BoolValue drive_on_time_to_consumer_rate = 21;
  // true/false
  google.protobuf.BoolValue ontime_rating = 22;
  // true/false
  google.protobuf.BoolValue preassign_completion_rating = 23;
  // true/false
  google.protobuf.BoolValue top_dasher_minimum_threshold = 24;
  // true/false
  google.protobuf.BoolValue top_dasher_threshold = 25;
  // true/false
  google.protobuf.BoolValue has_lifetime_declined_orders_below_threshold = 26;
  // true/false
  google.protobuf.BoolValue expected_recent_completion_rate = 27;
  // true/false
  google.protobuf.BoolValue expected_recent_acceptance_rate = 28;
  // true/false
  google.protobuf.BoolValue num_five_stars = 29;
  // Dasher Id
  int64 dasher_id = 30;
  // true/false on using cache for recent_customer_rating
  google.protobuf.BoolValue recent_customer_rating_use_cache = 31;
  // true/false
  google.protobuf.BoolValue acceptance_rate_tier = 32;
  // true/false
  google.protobuf.BoolValue customer_rating_tier = 33;
  // true/false
  google.protobuf.BoolValue total_recent_deliveries = 34;
  // true/false
  google.protobuf.BoolValue recent_num_assignments_accepted = 35;
  // true/false
  google.protobuf.BoolValue updated_at = 36;
  // true/false
  google.protobuf.BoolValue use_cache = 38;
  // true/false for requesting unread delivery issues
  google.protobuf.BoolValue num_unread_delivery_issues = 39;
  // true/false for requesting customer rating based on the failure_mode
  google.protobuf.BoolValue recent_customer_rating_v3 = 40;
  // enum val FailureMode
  FailureMode failure_mode = 41;

  // FailureMode for recent_customer_rating_v3
  enum FailureMode {
    // Unspecified failure mode
    FAILURE_MODE_UNSPECIFIED = 0;
    // Silent failure mode
    FAILURE_MODE_SILENT = 1;
  }
}

// Dasher ratings request for dasher assignment info (Deep Red integration)
message GetDasherRatingsAssignmentInfoRequest {
  // The dasher IDs to request for
  repeated int64 dasher_ids = 1;
}

// Dasher ratings response for dasher assignment info (Deep Red integration)
message GetDasherRatingsAssignmentInfoResponse {
  // Map between dasher ID -> dasher rating assignment info
  map<int64, DasherRatingsAssignmentInfo> dasher_ratings_assignment_info = 1;
}

// Dasher rating assignment info for a single dasher
message DasherRatingsAssignmentInfo {
  // dasher ID
  int64 dasher_id = 1;
  // assignments accepted / total recent deliveries
  float recent_acceptance_rate = 2;
  // total ratings / number of ratings
  float recent_customer_rating = 3;
  // AR tier
  int32 acceptance_rate_tier = 4;
  // CR tier
  int32 customer_rating_tier = 5;
  // High paying order eligibility
  HighPayingOrderEligibility high_paying_order_eligibility = 6;

  // Eligibility of receiving high paying orders.
  enum HighPayingOrderEligibility {
    // Unspecified value.
    HIGH_PAYING_ORDER_ELIGIBILITY_UNSPECIFIED = 0;

    // Not applicable for high paying orders, this will be defaulted for extension
    HIGH_PAYING_ORDER_ELIGIBILITY_NOT_IN_TIER = 1;

    // Currently high paying order but extensible to have multiple tiers, Tier 1 will  continue mean the top, anything downwards will be in between (eg. HPO_Tier_2)
    HIGH_PAYING_ORDER_ELIGIBILITY_TIER_1 = 2;

    // Tier 2 high paying order
    HIGH_PAYING_ORDER_ELIGIBILITY_TIER_2 = 3;
  }
}

// Reset a dasher's rating request
message ResetDasherRatingRequest {
  // dasher_id making this request
  int64 dasher_id = 1;
  // The rating type
  ResetRatingType rating_type = 2;
  // Timestamp on when to start including the rating calculation, null indicates use current UTC timestamp
  google.protobuf.Timestamp reset_at_timestamp = 3;
  // If the reset is already set, the default behavior will not override and will fail.
  bool to_override = 4;
}

// Reset a dasher's rating response
message ResetDasherRatingResponse {
  // dasher_id making this request
  int64 dasher_id = 1;
  // The rating type
  ResetRatingType rating_type = 2;
  // Timestamp on when to start including the rating calculation, null indicates use current UTC timestamp
  google.protobuf.Timestamp reset_at_timestamp = 3;
}

// Bulk Reset a dasher's rating request
message BulkResetDasherRatingRequest {
  // dasher_ids making this request (max 1000)
  repeated int64 dasher_ids = 1;
  // The rating type
  ResetRatingType rating_type = 2;
  // Timestamp on when to start including the rating calculation, null indicates use current UTC timestamp
  google.protobuf.Timestamp reset_at_timestamp = 3;
  // If the reset is already set, the default behavior will not override and will fail.
  bool to_override = 4;
}

// Bulk Reset a dasher's rating response
message BulkResetDasherRatingResponse {
  // dasher_ids making this request
  repeated int64 dasher_ids = 1;
  // The rating type
  ResetRatingType rating_type = 2;
  // Timestamp on when to start including the rating calculation, null indicates use current UTC timestamp
  google.protobuf.Timestamp reset_at_timestamp = 3;
}

// Reset Rating type, add more rating types as we go/require
enum ResetRatingType {
  // Unknown type
  RESET_RATING_TYPE_UNSPECIFIED = 0;
  // Acceptance Rate
  RESET_RATING_TYPE_ACCEPTANCE_RATE = 1;
  // Completion Rate
  RESET_RATING_TYPE_COMPLETION_RATE = 2;
  // On-time Rate
  RESET_RATING_TYPE_ON_TIME_RATE = 3;
}

// GetPreComputedRatings request
message GetPreComputedRatingsRequest {
  // dasher id to get GetPreComputedRatings
  int32 dasher_id = 1;
}

// GetPreComputedRatings response
message GetPreComputedRatingsResponse {
  // List of DasherRatingPrecomputed
  repeated DasherRatingPrecomputed dasher_rating_precomputed = 1;
  // Error message if encountered while fetching dasher rating
  repeated Error error = 2;
}

// GetPreComputedRatingByRatingType Request
message GetPreComputedRatingByRatingTypeRequest {
  // dasher_id  to get GetPreComputedRatingByRating
  int32 dasher_id = 1;
  // type of precomputed rating for dasher
  DasherRatingType dasher_rating_type = 2;
}

// GetPreComputedRatingByRatingType Response
message GetPreComputedRatingByRatingTypeResponse {
  // Dashers precomputed rating
  DasherRatingPrecomputed dasher_rating_precomputed = 1;
  // Error message if encountered while fetching precomputed rating by rating type
  repeated Error error = 2;
}

// Represents a precomputed rating response
message DasherRatingPrecomputed {
  // rating type of precomputed rating
  DasherRatingType dasher_rating_type = 1;
  // rating value
  double rating_value = 2;
  // time at which rating was precomputed
  google.protobuf.Timestamp event_timestamp = 3;
}

//GetRecentDeliveryStateEventsByTypeInDeliveryIdList Request
message GetRecentDeliveryStateEventsByTypeInDeliveryIdListRequest {
  // dasher id to get GetRecentDeliveryStateEventsByTypeInDeliveryIdList
  int32 dasher_id = 1;
  // delivery event type filter
  DeliveryEventType delivery_event_type = 2;
  // max number of delivery events to return
  repeated int64 delivery_id = 3;
}

//GetRecentDeliveryStateEventsByTypeInDeliveryIdList Response
message GetRecentDeliveryStateEventsByTypeInDeliveryIdListResponse {
  // list of DeliveryStateChangeEvents
  repeated DeliveryStateChangeEvent delivery_state_change_event = 1;
  // error if the call results in any exception / error
  repeated Error error = 2;
}

// GetRecentDeliveryStateEventsByType Request
message GetRecentDeliveryStateEventsByTypeRequest {
  // dasher_id making this request
  int32 dasher_id = 1;
  // delivery event type filter
  DeliveryEventType delivery_event_type = 2;
  // max number of delivery events to return
  int32 limit = 3;
}

// GetRecentDeliveryStateEventsByType Response
message GetRecentDeliveryStateEventsByTypeResponse {
  // list of DeliveryStateChangeEvents
  repeated DeliveryStateChangeEvent delivery_state_change_event = 1;
  // error if the call results in any exception / error
  repeated Error error = 2;
}

// DeliveryStateChangeEvent as received from kafka consumer , stored in db
message DeliveryStateChangeEvent {
  // dasher_id making this request
  int32 dasher_id = 1;
  // delivery_id of the event
  int64 delivery_id = 2;
  // delivery_uuid of the event
  string delivery_uuid = 3;
  // shift_id of event
  int64 shift_id = 4;
  // bool to mark if an unassign event is excused
  bool is_excused = 5;
  // event timestamp of delivery event
  google.protobuf.Timestamp event_timestamp = 6;
  // delivery event type
  DeliveryEventType delivery_event_type = 7;
  // the reason why the event is unassigned (only applicable for unassigned event)
  google.protobuf.StringValue unassign_reason = 8;
  // delivery type
  DeliveryType delivery_type = 9;
}

// DeliveryEvent as received from DIP kafka consumer , stored in db
message DeliveryEvent {
  // id of DeliveryEvent
  int64 id = 1;
  // dasher_id making this request
  int64 dasher_id = 2;
  // delivery_package_id of the event
  int64 delivery_package_id = 3;
  // shift_id of event
  int64 shift_id = 4;
  // delivery_id of the event
  int64 delivery_id = 5;
  // delivery_uuid of the event
  string delivery_uuid = 6;
  // delivery event type
  DeliveryEventType delivery_event_type = 7;
  // event timestamp of delivery event
  google.protobuf.Timestamp event_timestamp = 8;
  // bool to mark if an unassign event is excused
  bool is_excused = 9;
  // the reason why the event is unassigned (only applicable for unassigned event)
  google.protobuf.StringValue unassign_reason = 10;
}

// InsertDeliveryStateChangeEvent Request
message InsertDeliveryStateChangeEventRequest {
  // DeliveryStateChangeEvent to be inserted into db
  DeliveryStateChangeEvent delivery_state_change_event = 1;
}

// InsertDeliveryStateChangeEventRequest Request
message InsertDeliveryEventRequest {
  // DeliveryStateChangeEvent to be inserted into db
  DeliveryEvent delivery_event = 1;
}

// InsertDeliveryStateChangeEvent Response
message InsertDeliveryStateChangeEventResponse {
  // delivery_state_change_event successfully inserted
  DeliveryStateChangeEvent delivery_state_change_event = 1;
  // error if encountered while inserting  DeliveryStateChangeEvent into db
  repeated Error error = 2;
}

// InsertDeliveryEventResponse Response
message InsertDeliveryEventResponse {
  // delivery_state_change_event successfully inserted
  DeliveryEvent delivery_event = 1;
}

// Delivery event type
enum DeliveryEventType {
  // unspecified or NA
  DELIVERY_EVENT_TYPE_UNSPECIFIED = 0;
  // dasher was assigned a delivery (but not confirmed/unassigned yet)
  DELIVERY_EVENT_TYPE_DASHER_ASSIGNED_DELIVERY = 1;
  // dasher confirmed a delivery
  DELIVERY_EVENT_TYPE_DASHER_CONFIRMED_DELIVERY = 2;
  // delivery was unassigned due to dasher or due to system
  DELIVERY_EVENT_TYPE_DASHER_UNASSIGNED_DELIVERY = 3;
  // dasher delivered a confirmed delivery
  DELIVERY_EVENT_TYPE_DELIVERY_DROP_OFF = 4;
  // dasher reverted a dropped off delivery
  DELIVERY_EVENT_TYPE_DELIVERY_REVERT_DROP_OFF = 5;
}

// Delivery Type
enum DeliveryType {
  // unspecified or NA
  DELIVERY_TYPE_UNSPECIFIED = 0;
  // delivery is a parcel delivery
  DELIVERY_TYPE_PARCEL = 1;
}

// Dasher rating type
enum DasherRatingType {
  // unspecified or NA
  DASHER_RATING_TYPE_UNSPECIFIED = 0;
  // AR/acceptance rating
  DASHER_RATING_TYPE_RECENT_ACCEPTANCE_RATING = 1;
  // CR/completion rating
  DASHER_RATING_TYPE_RECENT_COMPLETION_RATING = 2;
  // number of lifetime deliveries completed
  DASHER_RATING_TYPE_NUM_LIFETIME_DELIVERIES = 3;
  // number of deliveries deliveries on time or early
  DASHER_RATING_TYPE_ON_TIME_OR_EARLY = 4;
}

// Error for any rating  response
message Error {
  // the Status code
  int32 code = 1;
  // error message as returned from rating endpoint
  string error_message = 2;
}

// Insert pre-computed ratings into elastic search
message InsertPreComputedRatingByRatingTypeInESRequest {
  // create a new index - new tables
  bool is_create = 1;
  // ratings type elastic search fields
  PreComputedRatingByRatingTypeES ratings = 2;
}

// Pre-computed ratings elastic search message
message PreComputedRatingByRatingTypeES {
  // dasher id
  int32 dasher_id = 1;
  // rating type
  string rating_type = 2;
  // rating value
  float rating_value = 3;
  // list of DeliveryStateChangeEvents
  repeated DeliveryStateChangeEvent delivery_state_change_events = 4;
  // last updated timestamp
  google.protobuf.Timestamp last_updated_timestamp = 6;
}

// Response for InsertPreComputedRatingByRatingTypeInESRequest
message InsertPreComputedRatingByRatingTypeInESResponse {
  // success or failure
  bool success = 1;
}

// Get precomputed ratings from elastic search
message GetPreComputedRatingByRatingTypeFromESRequest {
  // Number of entries to fetch
  int32 limit = 1;
  // offset to begin search, defaults to zero
  int32 offset = 2;
  // search string
  string search_term = 3;
  // rating type
  string rating_type = 4;
  // dasher id
  int32 dasher_id = 5;
}

// Response with pre computed ratings from elastic search
message GetPreComputedRatingByRatingTypeFromESResponse {
  // list of search results
  repeated PreComputedRatingByRatingTypeES result = 1;
}

// request for GetDasherRatingsBackfillFailures
message GetDasherRatingsBackfillFailuresRequest {
  // event timestamp
  google.protobuf.Timestamp event_timestamp = 1;
}

// response for GetDasherRatingsBackfillFailures
message GetDasherRatingsBackfillFailuresResponse {
  // Dasher Ids that failed to backfill
  repeated int64 failed_dasher_ids = 1;
}

// request for GetDasherRatingTipsListViewRequest
message GetDasherRatingTipsListViewRequest {
  // The category can be one of the following values: followed_delivery_instructions or order_handling or friendliness or communication
  string category = 1;
}

// request for GetDasherRatingTipsListViewResponse
message GetDasherRatingTipsListViewResponse {
  // list of suggestions for dasher to look out for based on category
  repeated string look_out_for = 1;
  // list of tips from different dashers
  repeated DasherRatingTip tips_from_dashers = 2;
}

// request for DasherRatingTip
message DasherRatingTip {
  // dasher tip
  string text = 1;
  // name of the dasher
  string dasher_name = 2;
  // dasher life time deliveries
  int32 lifetime_deliveries = 3;
  // rating of that dasher
  float rating = 4;
}

// [DEPRECATED] request for IsDasherInRewardTierExperiment
message IsDasherInRewardTierExperimentRequest {
  // request obj
  DasherRewardTierExperimentRequest request = 1;
}

// [DEPRECATED] response for IsDasherInRewardTierExperiment
message IsDasherInRewardTierExperimentResponse {
  // response obj
  DasherRewardTierExperimentResponse response = 1;
}

// [DEPRECATED] request for FilterDashersInRewardTierExperiment
message FilterDashersInRewardTierExperimentRequest {
  // list of dasher_id & submarket_id
  repeated DasherRewardTierExperimentRequest requests = 1;
}

// [DEPRECATED] response for FilterDashersInRewardTierExperiment
message FilterDashersInRewardTierExperimentResponse {
  // list of DasherRewardTierExperimentResponse
  repeated DasherRewardTierExperimentResponse responses = 1;
}

// DasherRewardTierExperimentRequest type
message DasherRewardTierExperimentRequest {
  // dasher id
  int32 dasher_id = 1;
  // submarket id
  int32 submarket_id = 2;
}

// DasherRewardTierExperimentResponse type
message DasherRewardTierExperimentResponse {
  // dasher id
  int32 dasher_id = 1;
  // submarket id
  int32 submarket_id = 2;
  // Denote if dasher is part of experiment.
  bool is_enabled = 3;
  // denote which experiment gave access.
  EligiblitySource eligiblity_source = 4;
}

// EligiblitySource type
enum EligiblitySource {
  // Placeholder Eligiblity Source
  ELIGIBLITY_SOURCE_UNSPECIFIED = 0;
  // “submarket” type
  ELIGIBLITY_SOURCE_SUB_MARKET = 1;
  // “dasher” type
  ELIGIBLITY_SOURCE_DASHER = 2;
}

// This event will help us capture bad state errors for deliveries
message DasherDeliveryRatingEvent {
  // enums log delivery event type
  DeliveryEventType delivery_event_type = 1;

  // dasher id
  int32 dasher_id = 2;

  // delivery id
  int64 delivery_id = 3;

  // used to capture the specific error type
  DasherDeliveryRatingErrorType error_type = 4;
}

// buf:lint:ignore ENUM_VALUE_PREFIX
// Error types for dasher delivery rating event
enum DasherDeliveryRatingErrorType {
  // Invalid error type
  DASHER_DELIVERY_RATING_ERROR_TYPE_UNSPECIFIED = 0;
  // Revert drop off event failed
  REVERT_DROP_OFF_EVENT_FAILED = 1;
  // Drop off event failed
  DROP_OFF_EVENT_FAILED = 2;
  // Revert drop off delivery without drop off entry
  REVERT_DROP_OFF_DELIVERY_WITHOUT_DROP_OFF = 3;
  // drop off delivery not found for revert event
  DROP_OFF_DELIVERY_NOT_FOUND_FOR_REVERT_EVENT = 4;
}

// Bulk waive delivery events request
message BulkWaiveDeliveryEventsRequest {
  // Excused delivery event
  repeated WaivedDeliveryEvent waived_delivery_events = 1;
}

// Bulk waive delivery events response
message BulkWaiveDeliveryEventsResponse {
  // Status of the upload
  google.rpc.Status status = 1;
  // Response message based on status
  google.protobuf.StringValue message = 2;
}

// Excused delivery event
message WaivedDeliveryEvent {
  // dasher_id making this request
  int64 dasher_id = 1;
  // delivery_package_id of the event
  int64 delivery_package_id = 2;
  // shift_id of event
  int64 shift_id = 3;
  // delivery_id of the event
  int64 delivery_id = 4;
  // delivery_uuid of the event
  string delivery_uuid = 5;
  // the reason why the event is being unassigned/waived
  google.protobuf.StringValue unassign_reason = 6;
}

// Request message for getting the unassign warning banner for completion rate
message GetPageContentForUnassignWarningBannerRequest {
  // The ID of the dasher
  int32 dasher_id = 1;
  // Type of precomputed rating for dasher
  DasherRatingType dasher_rating_type = 2;
}

// Response message for the unassign warning banner for completion rate
message GetPageContentForUnassignWarningBannerResponse {
  // The banner type to display
  RatingBannerType banner_type = 1;
  // The current rating
  RatingValue current_rating = 2;
  // The expected rating
  RatingValue expected_rating = 3;
  // The lower boundary of the dasher's tier qualification
  RatingValue tier_lower_boundary = 4;
  // The deactivation threshold for the rating
  RatingValue deactivation_threshold = 5;
  // Dasher Tier
  dasher_service.tier.TierType tier = 6;
  // Rating value either in int or float
  message RatingValue {
    // The value of the rating
    oneof value {
      // The integer value of the rating
      int32 int_value = 1;
      // The float value of the rating
      float float_value = 2;
    }
  }
}

// Enum for the rating banner type
enum RatingBannerType {
  // Unspecified rating banner type
  RATING_BANNER_TYPE_UNSPECIFIED = 0;
  // The rating will not change
  RATING_BANNER_TYPE_NO_CHANGE = 1;
  // The rating will be above the deactivation threshold (for non-tier dashers)
  RATING_BANNER_TYPE_ABOVE_DEACTIVATION_NON_TIER = 2;
  // The rating will drop below the deactivation threshold (for non-tier dashers)
  RATING_BANNER_TYPE_BELOW_DEACTIVATION_NON_TIER = 3;
  // The rating will above current tier qualification and the deactivation threshold (when tier boundary is larger than deactivation threshold)
  RATING_BANNER_TYPE_ABOVE_TIER_THRESHOLD = 4;
  // The rating will above current tier qualification and the deactivation threshold (when tier boundary is smaller or equal to deactivation threshold)
  RATING_BANNER_TYPE_ABOVE_TIER_AND_DEACTIVATION_THRESHOLD = 5;
  // The rating will drop below current tier qualification but above the deactivation threshold
  RATING_BANNER_TYPE_BELOW_TIER_ABOVE_DEACTIVATION_THRESHOLD = 6;
  // The rating will drop below current tier qualification and the deactivation threshold
  RATING_BANNER_TYPE_BELOW_TIER_AND_DEACTIVATION_THRESHOLD = 7;
}

// Request to calculate the delivery eta buffer
message ValidateOnTimeStatusRequest {
  // container for per delivery step times
  message DeliveryStepEventTimes {
    // The timestamp delivery event was expected
    google.protobuf.Timestamp estimated = 1;
    // The timestamp delivery event actually occurred
    google.protobuf.Timestamp actual = 2;
  }

  // per delivery timing information
  message DeliveryTimes {
    // delivery_uuid of the event
    string delivery_uuid = 1;
    // time the delivery was confirmed
    google.protobuf.Timestamp confirmed_at = 2;
    // times for the pickup event
    DeliveryStepEventTimes pickup = 3;
    // times for the dropOff event
    DeliveryStepEventTimes drop_off = 4;
    // time when dasher enters merchant geo fence
    google.protobuf.Timestamp dasher_arriving_at_merchant_at = 5;
  }

  // dasher_id associated this request
  google.protobuf.Int32Value dasher_id = 1;
  // delivery_package_id of the event (optional)
  google.protobuf.Int64Value delivery_package_id = 2;
  // sub market for the package (or single delivery)
  google.protobuf.Int32Value sub_market_id = 3;
  // the list of delivery times in the package (or single delivery)
  repeated DeliveryTimes delivery_times = 4;
}

// Calculated delivery eta buffer response
message ValidateOnTimeStatusResponse {
  // if true, the delivery was considered to be on-time
  google.protobuf.BoolValue is_on_time = 1;
  // the calculated delivery eta buffer (in seconds) used to determine on-time status
  google.protobuf.Int64Value buffer_seconds = 2;
}
