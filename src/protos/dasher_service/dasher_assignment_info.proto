syntax = "proto3";

// buf:lint:ignore DIRECTORY_SAME_PACKAGE
package dasher_service.dasher_assignment_info.v1;

import "dasher_service/dasher_preference.proto";
import "dasher_service/dasher_tier.proto";
import "google/protobuf/wrappers.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.dasher.dasher_assignment_info";

// Assignment info of a dasher for a given shift.
// The info fields should be nullable (optional). And if the assignment info does not exist the corresponding field
// should be set as null for messages (or UNSPECIFIED for enums).
message DasherAssignmentInfo {
  // The ID of the shift.
  int64 shift_id = 8;

  // The ID of the dasher with the assignment info.
  int64 dasher_id = 1;

  // Assignment preferences
  DasherAssignmentPreferences preferences = 2;

  // Acceptance_rate of the dasher.
  google.protobuf.DoubleValue acceptance_rate = 3;

  // 0 represents 'not in a tier', 1 represents highest tier, 2 is the tier below 1, so on and so forth.
  google.protobuf.Int32Value acceptance_rate_tier = 4;

  // Customer rating of the dasher.
  google.protobuf.DoubleValue customer_rating = 5;

  // 0 represents 'not in a tier', 1 represents highest tier, 2 is the tier below 1, so on and so forth.
  google.protobuf.Int32Value customer_rate_tier = 6;

  // Whether the dasher is eligible for high paying orders.
  HighPayingOrderEligibility high_paying_order_eligibility = 7;

  // Dasher score for DSD (Dasher shop and deliver).
  google.protobuf.DoubleValue dsd_dx_pick_score = 9;

  // Map from Store id to number of deliveries.
  // Key = Store ID, Value = Number of deliveries.
  map<int64, int64> delivery_count_for_store = 10;

  // Dasher phone OS
  PhoneOS phone_os = 11;

  // Dasher app version
  string app_version = 12;

  // Order type preferences passing into Deep Red.
  // The valid keys are listed in the comment of dasher_service.dasher_preference.v1.OrderTypePreference.
  // The value is an integer of [-100, 100] with -100 meaning the least preferred and 100 being the most preferred.
  map<string, int32> order_type_preferences = 13;

  // Dasher pick scores for DSD (Dasher shop and deliver).
  repeated DsdPickScore dsd_dx_pick_scores = 14;

  // Dasher Tier, when this field presents, high_paying_order_eligibility and other reward based statuses
  // should be ignored.
  dasher_service.tier.TierType tier = 15;

  // Dasher phone model
  google.protobuf.StringValue phone_model = 16;

  // Military ID of dasher
  // True = opt-in
  // false = opt-out
  // null = opt-in (for backward compatibility)
  google.protobuf.BoolValue military_id = 17;
}

// Preferences related with assignment of dashers.
message DasherAssignmentPreferences {
  // Max r2c distance the dasher would dash. Null means no max_r2c distance should be enforced.
  // This value is in meters.
  google.protobuf.DoubleValue max_r2c_distance = 1;

  // Max total distance the dasher would dash. Null means no total distance should be enforced.
  // This value is in meters.
  google.protobuf.DoubleValue max_total_distance = 2;

  // Offline assignment related preferences.
  // If Dx hasn't explicitly set their preference, default values of "00:00 to 23:59" will be returned for every single day of the week.
  // Null means no offline preference is set for a given Dx because their not part of the experiment,
  // so assignment decision shouldn't enforce it.
  dasher_service.dasher_preference.v1.OfflineAssignmentPreference offline_assignment_preference = 3;
}

// Eligibility of receiving high paying orders.
enum HighPayingOrderEligibility {
  // Unspecified value.
  HIGH_PAYING_ORDER_ELIGIBILITY_UNSPECIFIED = 0;

  // Not applicable for high paying orders, this will be defaulted for extension
  HIGH_PAYING_ORDER_ELIGIBILITY_NOT_IN_TIER = 1;

  // Currently high paying order but extensible to have multiple tiers, Tier 1 will  continue mean the top, anything downwards will be in between (eg. HPO_Tier_2)
  HIGH_PAYING_ORDER_ELIGIBILITY_TIER_1 = 2;

  // Tier 2 high paying order
  HIGH_PAYING_ORDER_ELIGIBILITY_TIER_2 = 3;
}

// Phone OS name.
enum PhoneOS {
  // Unspecified
  PHONE_OS_UNSPECIFIED = 0;
  // Android
  PHONE_OS_ANDROID = 1;
  // iOS
  PHONE_OS_IOS = 2;
}

// DSD pick score model used to generate the pick score
enum DsdPickScoreModelVersion {
  // Unspecified
  DSD_PICK_SCORE_MODEL_VERSION_UNSPECIFIED = 0;
  // Scores generated by pick score model V1
  DSD_PICK_SCORE_MODEL_VERSION_1 = 1;
  // Scores generated by pick score model V2
  DSD_PICK_SCORE_MODEL_VERSION_2 = 2;
  // Scores generated by pick score model V2.5
  DSD_PICK_SCORE_MODEL_VERSION_2_5 = 3;
}

// Dasher pick score for DSD (Dasher shop and deliver)
message DsdPickScore {
  // The pick score model used to generate the score
  DsdPickScoreModelVersion pick_score_model = 1;
  // The dasher pick score
  google.protobuf.DoubleValue score = 2;
}
