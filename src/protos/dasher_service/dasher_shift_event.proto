syntax = "proto3";

package dasher_service.shift_event.v1;

import "common/common.proto";
import "dasher_service/dasher_common.proto";
import "dasher_service/dasher_dasher_shift.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.dasher.shift_event.v1";

// Contains info relevant to the creation of a new shift
message CreateShiftEvent {
  // the scheduled start time of the shift
  google.protobuf.Timestamp scheduled_start_time = 1;
  // the scheduled end time of the shift
  google.protobuf.Timestamp scheduled_end_time = 2;
  // the starting point in which the shift was started on
  int32 starting_point_id = 3;
  // the id of the dasher's vehicle
  int32 vehicle_id = 4;
  // the type id of the dasher's vehicle
  int32 vehicle_type_id = 5;
  // true if the dasher wasn't scheduled ahead of time
  bool is_impromptu_dash = 6;
  // true if allowed to ignore scheduling limits
  bool ignore_caps = 7;
  // optional
  google.protobuf.StringValue delivery_payout_interval = 8;
  // shift type, default is unspecified
  dasher_service.dasher_common.ShiftType shift_type = 9;
}

// Contains info relevant to the assignment of a new shift
message AssignShiftEvent {
  // the scheduled start time of the shift
  google.protobuf.Timestamp scheduled_start_time = 1;
  // the scheduled end time of the shift
  google.protobuf.Timestamp scheduled_end_time = 2;
  // the starting point in which the shift was started on
  int32 starting_point_id = 3;
  // the id of the dasher's vehicle
  int32 vehicle_id = 4;
  // the type id of the dasher's vehicle
  int32 vehicle_type_id = 5;
  // shift type, default is unspecified
  dasher_service.dasher_common.ShiftType shift_type = 6;
}

// Contains info relevant to the unassignment of a new shift
message UnassignShiftEvent {
  // the scheduled start time of the shift
  google.protobuf.Timestamp scheduled_start_time = 1;
  // the scheduled end time of the shift
  google.protobuf.Timestamp scheduled_end_time = 2;
  // the starting point in which the shift was started on
  int32 starting_point_id = 3;
  // the type id of the dasher's vehicle
  int32 vehicle_type_id = 4;
  // previous dasher id
  google.protobuf.Int64Value unassigned_dasher_id = 5;
  // shift type, default is unspecified
  dasher_service.dasher_common.ShiftType shift_type = 6;
}

// Contains info relevant to dasher checking into a shift
message CheckInShiftEvent {
  // location of dasher at check in
  common.Location dasher_location = 1;
  // starting point at time of checkin
  int32 starting_point_id = 2;
  // check in timestamp
  google.protobuf.Timestamp check_in_time = 3;
  // if dasher is activated for drive orders
  bool is_equipped = 4;
  // if dasher is on their first shift
  bool is_first_shift = 5;
  // if dasher is top dasher
  bool is_top_dasher = 6;
  // optional
  google.protobuf.StringValue dasher_soft_skills = 7;
  // optional
  google.protobuf.FloatValue acceptance_rate_on_check_in = 8;
}

// Contains info relevant to dasher checking out a shift
message CheckOutShiftEvent {
  // the scheduled start time of the shift
  google.protobuf.Timestamp scheduled_start_time = 1;
  // the scheduled end time of the shift
  google.protobuf.Timestamp scheduled_end_time = 2;
  // check in timestamp
  google.protobuf.Timestamp check_in_time = 3;
  // check out timestamp
  google.protobuf.Timestamp check_out_time = 4;
  // starting point at time of checkin
  int32 starting_point_id = 5;
  // vehicle id
  google.protobuf.Int64Value vehicle_id = 6;
  // vehicle type id
  google.protobuf.Int64Value vehicle_type_id = 7;
  // auto assign
  google.protobuf.BoolValue auto_assign = 8;
  // dasher date of birth
  google.protobuf.Timestamp dasher_date_of_birth = 9;
  // dasher score
  google.protobuf.Int64Value dasher_score = 10;
  // is equipped
  google.protobuf.BoolValue is_equipped = 11;
  // list of dasher skill
  repeated dasher_service.dasher_shift.DasherSkill dasher_skills = 12;
  // list of dasher soft skill
  repeated dasher_service.dasher_shift.DasherSoftSkill dasher_soft_skills = 13;
  // can assign cash order
  google.protobuf.BoolValue can_assign_cash_order = 14;
  // can receive red card deliveries
  google.protobuf.BoolValue can_receive_red_card_deliveries = 15;
  // updated at
  google.protobuf.Timestamp updated_at = 16;
  // cancelled at
  google.protobuf.Timestamp cancelled_at = 17;
  // version
  google.protobuf.StringValue version = 18;
  // list of route point
  repeated dasher_service.dasher_shift.RoutePoint route_history = 19;
  // is first shift
  google.protobuf.BoolValue is_first_shift = 20;
  // acceptance rate on check in
  google.protobuf.FloatValue acceptance_rate_on_check_in = 21;
  // experiment info
  google.protobuf.StringValue experiment_info = 22;
  // num of deliveries
  google.protobuf.Int32Value num_deliveries = 23;
  // delivery pay
  google.protobuf.Int32Value delivery_pay = 24;
  // tip amount
  google.protobuf.Int32Value tip_amount = 25;
  // total pay
  google.protobuf.Int32Value total_pay = 26;
  // is top dasher on check in
  google.protobuf.BoolValue is_top_dasher_on_check_in = 27;
  // notified to extend
  google.protobuf.BoolValue notified_to_extend = 28;
  // commute expire time
  google.protobuf.Timestamp commute_expire_time = 29;
  // commute state
  google.protobuf.StringValue commute_state = 30;
  // commute preference
  dasher_service.dasher_shift.CommutePreference commute_preference = 31;
  // is waiting for expected assignment
  google.protobuf.BoolValue is_waiting_for_expected_assignment = 32;
  // is dasher now
  google.protobuf.BoolValue is_dash_now = 33;
  // is test
  google.protobuf.BoolValue is_test = 34;
  // most recent shift resume timestamp
  google.protobuf.Timestamp resume_time = 35;
  // DasherShiftAttributes asked by client
  dasher_service.dasher_shift.DasherShiftAttributes dasher_shift_attributes = 36;
  // location of dasher at check in
  common.Location check_in_location = 37;
}

// Contains info relevant to dasher updating their shift
message UpdateShiftEvent {
  // the scheduled start time of the shift
  google.protobuf.Timestamp scheduled_start_time = 1;
  // the scheduled end time of the shift
  google.protobuf.Timestamp scheduled_end_time = 2;
  // the starting point in which the shift was started on
  int32 starting_point_id = 3;
  // true if auto assign
  bool auto_assign = 4;
  // reimbursement amount to the dasher
  int32 reimbursement_amount = 5;
  // extra amount owed to dasher
  int32 extra_amount_owed = 6;
  // True if the shift is waiting for expected assignment
  bool is_waiting_for_expected_assignment = 7;
  // true if allowed to ignore scheduling limits
  bool ignore_caps = 8;
  // shift type, default is unspecified
  dasher_service.dasher_common.ShiftType shift_type = 9;
}

// Contains info relevant to dasher cancelling their shift
message CancelShiftEvent {
  // cancel timestamp
  google.protobuf.Timestamp cancel_time = 1;
  // whether the dasher missed their shift
  bool is_no_show = 2;
  // the starting point in which the shift was started on
  int32 starting_point_id = 3;
}

// Contains info relevant to dx closing out their shift
message CloseOutShiftEvent {
  // close out timestamp
  google.protobuf.Timestamp close_out_time = 1;
  // total amount dx earned (delivery + extras + tips)
  int32 total_pay = 2;
  // tip amount dx earned on shift
  int32 tip_amount = 3;
  // delivery pay amount dx earned on shift
  int32 delivery_pay = 4;
  // total amount of time spent actively fulfilling deliveries on shift
  int32 total_active_time = 5;
  // total number of deliveries completed on shift
  int32 num_deliveries = 6;
  // list of dasher delivery pay ids of completed deliveries
  repeated google.protobuf.Int64Value delivered_dasher_delivery_pay_ids = 7;
  // list of delivery ids of completed deliveries
  repeated google.protobuf.Int64Value delivered_delivery_ids = 8;
  // currency of shift
  google.protobuf.StringValue currency = 9;
}

// Contains info relevant to a shift pause
message PauseShiftEvent {
  // the ma interval id from the db
  google.protobuf.Int64Value ma_interval_id = 1;
  // whether the pause was initiated by the dasher
  google.protobuf.BoolValue paused_by_dasher = 2;
  // is the pause due to an excused reason
  google.protobuf.BoolValue excused = 3;
  // the reason for the pause
  google.protobuf.StringValue reason = 4;
  // how many seconds of pause are allowed
  google.protobuf.Int64Value allowed_seconds = 5;
  // time the pause was created
  google.protobuf.Timestamp pause_create_time = 6;
  // time the pause was started
  google.protobuf.Timestamp pause_start_time = 7;
  // time the pause was ended
  google.protobuf.Timestamp pause_end_time = 8;
}

// Contains info relevant to a shift resume
message ResumeShiftEvent {
  // the ma interval id from the db
  google.protobuf.Int64Value ma_interval_id = 1;
  // whether the pause was initiated by the dasher
  google.protobuf.BoolValue paused_by_dasher = 2;
  // is the pause due to an excused reason
  google.protobuf.BoolValue excused = 3;
  // the reason for the pause
  google.protobuf.StringValue reason = 4;
  // how many seconds of pause are allowed
  google.protobuf.Int64Value allowed_seconds = 5;
  // time the pause was started
  google.protobuf.Timestamp pause_start_time = 6;
  // time the pause was ended
  google.protobuf.Timestamp pause_end_time = 7;
  // time the pause was created
  google.protobuf.Timestamp pause_create_time = 8;
}

// Contains info related to overall shift earnings pay adjustments
message PayAdjustmentEvent {
  // total amount dx earned (delivery + extras + tips)
  int32 total_pay = 1;
  // tip amount dx earned on shift
  int32 tip_amount = 2;
  // delivery pay amount dx earned on shift
  int32 delivery_pay = 3;
  // total amount of time spent actively fulfilling deliveries on shift
  int32 total_active_time = 4;
  // total number of deliveries completed on shift
  int32 num_deliveries = 5;
  // list of dasher delivery pay ids of completed deliveries
  repeated google.protobuf.Int64Value delivered_dasher_delivery_pay_ids = 6;
  // list of delivery ids of completed deliveries
  repeated google.protobuf.Int64Value delivered_delivery_ids = 7;
  // currency of shift
  google.protobuf.StringValue currency = 8;
}

// The top level message type for Dasher Shift Events
message DasherShiftEvent {
  // the id of the shift
  int64 shift_id = 1;
  // the id of the dasher
  int64 dasher_id = 2;
  // the user id of the dasher
  int64 user_id = 3;
  // the timestamp on which this event was created
  google.protobuf.Timestamp timestamp = 4;
  // polymorphic underlying event
  oneof event {
    // a shift was created
    CreateShiftEvent create = 5;
    // dasher checked in to shift
    CheckInShiftEvent check_in = 6;
    // dasher updated a shift
    UpdateShiftEvent update = 7;
    // dasher canceled a shift
    CancelShiftEvent cancel = 8;
    // dasher closed out shift
    CloseOutShiftEvent close_out = 9;
    // shift received pay adjustment (via post-tips, etc)
    PayAdjustmentEvent pay_adjustment = 10;
    // dasher checked out shift
    CheckOutShiftEvent check_out = 11;
    // shift was paused
    PauseShiftEvent pause = 12;
    // shift was resumed
    ResumeShiftEvent resume = 13;
    // a shift was assigned
    AssignShiftEvent assign = 14;
    // a shift was unassigned
    UnassignShiftEvent unassign = 15;
  }
}
