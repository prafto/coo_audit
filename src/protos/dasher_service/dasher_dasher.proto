syntax = "proto3";

package dasher_service.dasher;

import "common/common.proto";
import "common/names.proto";
import "dasher_service/dasher_api.proto";
import "dasher_service/dasher_common.proto";
import "device-service/common.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "presentation_gateway/presentation_gateway_config.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.dasher.dasher";

service DasherService {
  rpc CreateDasher(dasher_service.dasher_api.CreateRequest) returns (Dasher);

  rpc GetDasher(dasher_service.dasher_api.GetRequest) returns (Dasher) {
    option (presentation_gateway.v1.presentation_gateway_config).service_name = "dasher-service";
    option (presentation_gateway.v1.presentation_gateway_config).service_app = "dasher";
  }
  rpc GetDasherForUser(dasher_service.dasher_api.GetRequest) returns (Dasher);
  rpc GetDasherForShift(dasher_service.dasher_api.GetRequest) returns (Dasher);
  rpc GetDasherForPaymentAccount(dasher_service.dasher_api.GetRequest) returns (Dasher);
  rpc GetDasherProfile(dasher_service.dasher_api.GetRequest) returns (DasherProfileResponse);

  rpc ListDasher(ListDasherRequest) returns (ListDasherResponse);
  rpc ListDasherForShift(ListDasherRequest) returns (ListDasherForShiftResponse);
  rpc ListDriveDashersForStartingPoints(ListDasherRequest) returns (ListDasherResponse);

  rpc UpdateDasher(dasher_service.dasher_api.PatchRequest) returns (Dasher);
  rpc UpdateDasherEphemeralFlags(dasher_service.dasher_api.PatchRequest) returns (UpdateDasherEphemeralFlagsResponse);
  rpc UnsetDasherEphemeralFlags(UnsetDasherEphemeralFlagsRequest) returns (UnsetDasherEphemeralFlagsResponse);

  rpc GetDasherEphemeralFlagData(GetDasherEphemeralFlagDataRequest) returns (GetDasherEphemeralFlagDataResponse);
  rpc GetAndUpdateDasherEphemeralFlagData(GetAndUpdateDasherEphemeralFlagDataRequest) returns (GetAndUpdateDasherEphemeralFlagDataResponse);

  rpc IsDasherActivatedForDrive(dasher_service.dasher_api.GetRequest) returns (DriveActivationStatusResponse);

  rpc GetEquipmentDetailsForDelivery(GetEquipmentDetailsForDeliveryRequest) returns (GetEquipmentDetailsForDeliveryResponse);

  // Generic function to add new row or update an existing row. If should_remove_equipment is true it reduces the equipment count by 1 else increments it
  // A safe function to remove an equipment from a dasher by setting its count 0.
  rpc CreateOrUpdateDasherEquipment(CreateOrUpdateDasherEquipmentRequest) returns (CreateOrUpdateDasherEquipmentResponse);
  rpc DeleteDasherEquipment(DeleteDasherEquipmentRequest) returns (DeleteDasherEquipmentResponse);

  rpc EquipDasherOnboarding(EquipDasherOnboardingRequest) returns (EquipDasherOnboardingResponse);
  rpc QualifyDasherOnboarding(QualifyDasherOnboardingRequest) returns (QualifyDasherOnboardingResponse);
  rpc GetDasherEquipmentNameMapping(GetDasherEquipmentNameMappingRequest) returns (GetDasherEquipmentNameMappingResponse);
  rpc IsDasherEquippedForEquipmentType(IsDasherEquippedForEquipmentTypeRequest) returns (IsDasherEquippedForEquipmentTypeResponse);

  rpc UpdateDasherEquipmentStatus(UpdateDasherEquipmentStatusRequest) returns (UpdateDasherEquipmentStatusResponse);
  rpc UpdateDasherEquipmentEducationalSMS(UpdateDasherEquipmentEducationalSMSRequest) returns (UpdateDasherEquipmentEducationalSMSResponse);

  rpc ForgetDasher(dasher_service.dasher_api.PatchRequest) returns (Dasher);

  rpc DasherDelinkUser(dasher_service.dasher_api.PatchRequest) returns (Dasher);

  rpc VerifyImageAndSave(ImageAndSourceRequest) returns (google.protobuf.Empty);

  rpc UpdateCashOnDeliveryDasherPreference(UpdateCashOnDeliveryDasherPreferenceRequest) returns (google.protobuf.Empty);

  rpc GetDasherPreference(DasherPreferenceRequest) returns (DasherPreferenceResponse);

  rpc RefreshPaymentInfoForDasher(RefreshPaymentInfoForDasherRequest) returns (google.protobuf.Empty);

  rpc UploadVerificationPhoto(UploadVerificationPhotoRequest) returns (UploadVerificationPhotoResponse);

  rpc GetCommandoModeString(google.protobuf.Empty) returns (CommandoModeResponse);

  rpc UpdatePromoPushNotifications(UpdatePromoPushNotificationsRequest) returns (UpdatePromoPushNotificationsResponse);

  rpc UpdateDeviceToken(UpdateDeviceTokenRequest) returns (UpdateDeviceTokenResponse);

  rpc GetDasherRewardTierStatus(GetDasherRewardTierStatusRequest) returns (GetDasherRewardTierStatusResponse);

  rpc UpdateDasherRewardTierStatus(UpdateDasherRewardTierStatusRequest) returns (UpdateDasherRewardTierStatusResponse);

  rpc UpdateDasherStartingPoint(UpdateDasherStartingPointRequest) returns (UpdateDasherStartingPointResponse);

  rpc GetDasherListView(GetDasherListViewRequest) returns (GetDasherListViewResponse);

  rpc GetDasherTOSDetailView(GetDasherTOSDetailViewRequest) returns (GetDasherTOSDetailViewResponse);

  rpc AcceptDasherTOS(AcceptDasherTOSRequest) returns (google.protobuf.Empty);

  rpc UpdateDasherIcaStatus(UpdateDasherIcaStatusRequest) returns (google.protobuf.Empty);

  // adding new equipment type to table [DOORDASH_DASHER.PUBLIC.MAINDB_DASHER_EQUIPMENT_TYPE] which stores all the equipment type pairs [Id, name]
  rpc CreateNewDxEquipmentTypeWithName(CreateNewDxEquipmentTypeWithNameRequest) returns (CreateNewDxEquipmentTypeWithNameResponse);

  rpc GetDasherByReferralCode(GetDasherByReferralCodeRequest) returns (GetDasherByReferralCodeResponse);

  // Dasher verification status
  rpc UpdateDasherVerificationStatus(UpdateDasherVerificationStatusRequest) returns (UpdateDasherVerificationStatusResponse);
  // Dasher daily count
  rpc GetDasherDailyVerificationCount(GetDasherDailyVerificationCountRequest) returns (GetDasherDailyVerificationCountResponse);
  rpc IncrementDasherDailyVerificationCount(IncrementDasherDailyVerificationCountRequest) returns (IncrementDasherDailyVerificationCountResponse);

  // dasher cash on delivery abandon count in previous shift
  rpc GetCodAbandonCountInPreviousShift(GetCodAbandonCountInPreviousShiftRequest) returns (GetCodAbandonCountInPreviousShiftResponse);

  rpc GetDasherEquipmentTypesByNames(GetDasherEquipmentTypesByNamesRequest) returns (GetDasherEquipmentTypesByNamesResponse);
}

message UpdateDasherVerificationStatusRequest {
  google.protobuf.Int64Value dasher_id = 1;
  google.protobuf.StringValue verification_type = 2;
  bytes photo = 3;
}

message UpdateDasherVerificationStatusResponse {
  google.protobuf.Int64Value dasher_id = 1;
  google.protobuf.StringValue verification_type = 2;
  google.protobuf.StringValue verification_status = 3;
  google.protobuf.StringValue photo_url = 4;
}

message GetDasherDailyVerificationCountRequest {
  google.protobuf.Int64Value dasher_id = 1;
  google.protobuf.StringValue verification_type = 2;
  google.protobuf.StringValue flag_name = 3;
}

message GetDasherDailyVerificationCountResponse {
  google.protobuf.Int64Value current_count = 1;
  google.protobuf.StringValue current_verification_status = 2;
}

message IncrementDasherDailyVerificationCountRequest {
  google.protobuf.Int64Value dasher_id = 1;
  google.protobuf.StringValue verification_type = 2;
  google.protobuf.StringValue flag_name = 3;
}

message IncrementDasherDailyVerificationCountResponse {
  google.protobuf.Int64Value updated_count = 1;
}

message GetDasherByReferralCodeRequest {
  string referral_code = 1;
  string http_referrer_uri = 2;
}

message GetDasherByReferralCodeResponse {
  int32 dasher_id = 1;
  Dasher dasher = 2;
}

message CreateNewDxEquipmentTypeWithNameRequest {
  google.protobuf.StringValue name = 2;
}

message CreateNewDxEquipmentTypeWithNameResponse {
  google.protobuf.StringValue name = 1;
  int64 id = 2;
}

message GetDasherListViewRequest {
  google.protobuf.BoolValue count_only = 1;
  google.protobuf.Int32Value market_id = 2;
  google.protobuf.Int32Value starting_point_id = 3;
  google.protobuf.StringValue query = 4;
  int32 offset = 5;
  int32 limit = 6;
}

message GetDasherListViewResponse {
  int64 count = 1;
  repeated SearchDasher response = 2;
}

message SearchDasher {
  int32 id = 1;
  int64 user_id = 2;
  string first_name = 3;
  string last_name = 4;
  string email = 5;
}

message UpdateDasherRewardTierStatusRequest {
  int32 dasher_id = 1;
  google.protobuf.Timestamp tier_update_viewed_at = 2;
}

message UpdateDasherRewardTierStatusResponse {
  bool status = 1;
  google.protobuf.StringValue error_message = 2;
}

message GetDasherRewardTierStatusRequest {
  int32 dasher_id = 1;
  google.protobuf.StringValue accept_language = 2;
}

message GetDasherRewardTierStatusResponse {
  string dasher_rewards_tier = 1;
  repeated TierRewardResponse tier_rewards = 2;
  repeated TierQualificationResponse tier_qualifications = 3;
  string learn_more_url = 4;
  string feedback_url = 5;
  google.protobuf.Timestamp qualified_at_date = 6;
  google.protobuf.Timestamp current_rewards_start_date = 7;
  google.protobuf.Timestamp current_rewards_end_date = 8;
  google.protobuf.Timestamp next_rewards_start_date = 9;
}

message TierRewardResponse {
  string type = 1;
  string title = 2;
  string description = 3;
}

message TierQualificationResponse {
  string type = 1;
  string title = 2;
  string required_description = 3;
  string obtained_description = 4;
}

message UpdateDeviceTokenRequest {
  google.protobuf.Int64Value user_id = 1;

  // Different type of devices supported now are android, ios and browser
  google.protobuf.StringValue type = 2;

  google.protobuf.StringValue session_id = 3;
  google.protobuf.StringValue login_id = 4;
  google.protobuf.StringValue notification_token = 5;
  google.protobuf.StringValue app_version = 6;
  google.protobuf.StringValue user_agent = 7;
  google.protobuf.StringValue device_unique_id = 8;
  google.protobuf.StringValue device_advertising_id = 9;
  device.service.common.DeviceRoles device_role = 10;
  int32 dasher_id = 11;
  google.protobuf.StringValue phone_model = 12;
}

message UpdateDeviceTokenResponse {
  google.protobuf.StringValue result = 1;
  google.protobuf.StringValue message = 2;
}

message UpdatePromoPushNotificationsRequest {
  string dasher_email = 1;

  bool enable_promo_push_notifications = 2;

  int32 dasher_id = 3;
}

message UpdatePromoPushNotificationsResponse {
  bool updated_promo_push_notifications = 1;

  google.protobuf.StringValue error_message = 2;
}

message ListDasherRequest {
  dasher_service.dasher_api.APIParams api_params = 1;

  repeated int64 ids = 2;

  bool provide_all_serializer_fields = 3;

  repeated string serializer_fields = 4;

  bool include_expired_equipments = 5;
}

message ListDasherResponse {
  repeated Dasher objects = 1;

  int32 count = 2;
}

message ListDasherForShiftResponse {
  repeated ShiftDasher objects = 1;
}

message DasherUsesDynamicPayModelRequest {
  int32 dasher_id = 1;

  int32 starting_point_id = 2;
}

message DasherUsesDynamicPayModelResponse {
  bool use_dynamic_pay_model = 1;
}

message ShiftDasher {
  int64 shift_id = 1;

  Dasher dasher = 2;
}

// contract type in legal terms
enum DasherContractType {
  // unknown or unspecified contract type
  DASHER_CONTRACT_TYPE_UNSPECIFIED = 0;
  // independent contractor
  DASHER_CONTRACT_TYPE_IC = 1;
  // w2 employee
  DASHER_CONTRACT_TYPE_W2 = 2;
  // robot
  DASHER_CONTRACT_TYPE_ROBOT = 3;
}

// ICA - Individual Contract Agreement
enum DasherIcaType {
  // unknown or unspecified ICA
  DASHER_ICA_TYPE_UNSPECIFIED = 0;
  // Colorado State ICA
  DASHER_ICA_TYPE_US_CO = 1;
}

// What purchase card mode/features the Dx has access to
enum PurchaseCardMode {
  // unknown or unspecified mode
  PURCHASE_CARD_MODE_UNSPECIFIED = 0;
  // physical card enabled using v1 UI
  PURCHASE_CARD_MODE_PHYSICAL_V1 = 1;
  // virtual card enabled using v1 UI
  PURCHASE_CARD_MODE_VIRTUAL_V1 = 2;
  // virtual, physical, and digital cards enabled using v2 UI
  PURCHASE_CARD_MODE_VIRTUAL_PHYSICAL_DIGITAL_V2 = 3;
}

message Dasher {
  int32 id = 1;

  google.protobuf.Timestamp created_at = 2;

  int64 user_id = 3;

  int32 default_starting_point_id = 4;

  bool is_equipped_for_large_orders = 5;

  bool is_active = 6;

  bool is_hearing_impaired = 7;

  string referral_code = 8;

  int32 address_id = 9;

  int32 lifetime_num_deliveries_made = 10;

  int32 lifetime_num_deliveries_assigned = 11;

  int32 lifetime_num_deliveries_dispatch_unassigned = 12;

  string license_expiration = 13;

  string insurance_expiration = 14;

  string date_of_birth = 15;

  string zip_code = 16;

  bool is_oriented = 17;

  bool is_background_checked = 18;

  google.protobuf.Timestamp oriented_at = 19;

  int32 background_check_owed = 20;

  string phone_os = 21;

  string phone_model = 22;

  string app_version = 23;

  string gcm_id = 24;

  string start_date = 25;

  string end_date = 26;

  string notes = 27;

  int32 reason_for_deactivation_id = 28;

  int32 num_warnings = 29;

  string verification_code = 30;

  int32 verification_code_attempts = 31;

  dasher_service.dasher_common.LatLng last_location = 32;

  google.protobuf.Timestamp last_location_time = 33;

  int32 performance_score = 34;

  int32 last_starting_point_id = 35;

  string pex_card = 36;

  string marqeta_user_token = 37;

  string stripe_recipient_id = 38;

  string stripe_managed_account_id = 39;

  bool stripe_managed_account_required = 40;

  string stripe_bank_name = 41;

  string stripe_bank_last4 = 42;

  int32 payment_account_id = 43;

  string hypertrack_driver_id = 44;

  string drive_qualification_status = 45;

  bool is_activated_for_drive_orders = 46;

  repeated DasherEquipment equipments = 47;

  bool has_completed_cash_delivery = 48;

  bool has_completed_post_tip_delivery = 49;

  int32 deactivated_by_user_id = 50;

  google.protobuf.Timestamp deactivation_date = 51;

  string first_name = 52;

  string last_name = 53;

  string email = 54;

  string phone_number = 55;

  string referral_utm_medium = 56;

  google.protobuf.Timestamp OBSOLETE_stripe_last_updated_at = 57;

  string license_img = 58;

  string license_img_uploaded_at = 59;

  string insurance_img = 60;

  string insurance_img_uploaded_at = 61;

  int32 performance_score_override = 62;

  string OBSOLETE_drive_qualification = 63;

  string fcm_id = 64;

  string instant_dashing_treatment = 65;

  google.protobuf.Timestamp red_card_required_by = 66;

  bool has_had_cx_unavailable_education = 67;

  bool has_had_dafnd_since_last_cx_unavailable_education = 68;

  // Additional Serializer Fields
  string readable_name = 69;

  PhoneNumberComponents phone_number_components = 70;

  string timezone = 71;

  int32 age = 72;

  string country_shortname = 73;

  Address address = 74;

  bool is_eligible_for_drive_orders = 75;

  bool is_selected_for_drive_orders = 76;

  bool is_equipped_with_pizza_bag = 77;

  bool can_receive_red_card_deliveries = 78;

  bool is_deactivated = 79;

  bool needs_peak_dash_hints = 80;

  bool needs_supplemental_onboarding_user_experience = 81;

  StartingPoint default_starting_point = 82;

  int32 market_id = 83;

  int32 submarket = 84;

  StartingPoint last_dash_starting_point = 85;

  int64 current_dash = 86;

  bool is_online = 87;

  int32 applicant_id = 88;

  string applicant_unique_link = 89;

  string car_make = 90;

  string car_year = 91;

  string car_model = 92;

  string car_color = 130;

  string registration_expiration = 93;

  repeated int32 vehicles = 94;

  PurchaseCard purchase_card = 95;

  bool is_on_latest_tos_version = 96;

  bool is_early_access = 97;

  int32 early_access_days_threshold = 98;

  int32 payment_account = 99;

  string drive_quality_tier = 100;

  int32 dasher_guaranteed_earnings_progress_id = 101;

  bool show_available_balance = 102;

  bool is_trusted_for_support_escalations = 103;

  string rewards_tier = 104;

  bool needs_to_view_reward_tier_update = 105;

  bool is_first_delivery_complete = 106;

  bool has_urgent_issue = 107;

  bool needs_cx_unavailable_education = 108;

  bool is_virtual_purchase_card_enabled = 109;

  bool should_show_prop22_callout = 110;

  string earnings_model = 111;

  names.LocalizedNames localized_names = 112;

  Submarket submarket_info = 113;

  bool should_show_referral_visibility = 114;

  google.protobuf.BoolValue enabled_promo_push_notifications = 116;

  google.protobuf.BoolValue is_eligible_for_referral = 117;

  reserved 115;

  bool hide_earnings_tab = 118;

  bool prompt_location_disclaimer = 119;

  bool prompt_camera_disclaimer = 120;

  bool skip_checking_missing_payment_fields = 121;

  bool hide_red_card = 122;

  google.protobuf.BoolValue has_red_card = 123;

  DasherContractType contract_type = 124;

  bool in_house_courier_experience_enabled = 125;

  bool show_confirm_end_shift_if_remaining_time = 126;

  bool hide_schedule_tab = 127;

  bool disable_edit_shift = 128;

  bool hide_time_off_tab = 129;

  Status status = 131;

  int32 status_reason_id = 132;

  bool platform_onboarding_needed = 133;

  int32 earnings_goal = 134;

  bool nsw_safety_course_required = 135;

  string ssn_token = 136;

  string dl_token = 137;

  // Motor Vehicle Report result which is needed for motor onboarding.
  // For U.S and CA if 'CLEAR' then mvr_skip_or_pass = true
  // For AU and NZ, no such check so will mvr_skip_or_pass = true
  bool mvr_skip_or_pass = 138;

  // What purchase card mode/features the Dx has access to.
  PurchaseCardMode purchase_card_mode = 139;

  string legal_first_name = 140;

  string legal_middle_name = 141;

  string legal_last_name = 142;

  google.protobuf.StringValue preferred_name = 143;

  bool is_onboarding_checklist_needed = 144;
}

// Dasher status
enum Status {
  // unspecified, fallback
  STATUS_UNSPECIFIED = 0;
  // Dx active status
  STATUS_ACTIVE = 1;
  // Dx suspended status
  STATUS_SUSPENDED = 2;
  // Dx inactive status
  STATUS_INACTIVE = 3;
  // Dx suspend dash
  STATUS_DASH_SUSPENDED = 4;
}

message PhoneNumberComponents {
  string country_shortname = 1;

  string country_code = 2;

  string national_number = 3;

  string international_number = 4;

  string formatted_national_number = 5;

  string formatted_international_number = 6;
}

message DasherProfileResponse {
  message DasherProfile {
    EmergencyContact emergencyContact = 1;
    string image_url = 2;
  }

  message EmergencyContact {
    string first_name = 1;
    string last_name = 2;
    string email = 3;
    common.PhoneNumberComponents phone_number_components = 4;
  }

  message Error {
    // Http status code
    int32 code = 1;
    // Detailed error message.
    string error_message = 2;
  }

  int32 dasher_id = 1;
  DasherProfile dasher_profile = 2;
  repeated Error errors = 3;
}

message StartingPoint {
  int32 id = 1;

  string name = 2;
}

message Submarket {
  int32 id = 1;

  string name = 2;
}

message Address {
  string city = 1;

  bool is_location_overriden = 2;

  string subpremise = 3;

  string printable_address = 4;

  string state = 5;

  string street = 6;

  float lat = 7;

  float lng = 8;

  int32 submarket_id = 9;

  string shortname = 10;

  string zip_code = 11;
}

message PurchaseCard {
  string last4 = 1;

  string delight_number = 2;

  string token = 3;

  bool is_virtual = 4;
}

message DasherEquipment {
  int32 equipment_type_id = 1;

  string name = 2;

  int32 count = 3;

  DasherEquipmentExpirationDetails expiration_details = 4;
}

message DriveActivationStatusResponse {
  google.protobuf.BoolValue is_activated = 1;
}

message GetEquipmentDetailsForDeliveryRequest {
  int32 dasher_id = 1;
  string delivery_uuid = 2;
}

message GetEquipmentDetailsForDeliveryResponse {
  string equipment_type = 1;
  bool unequip_dasher = 2;
  string verification_status = 3;
}

message CreateOrUpdateDasherEquipmentRequest {
  // Id of the dasher
  int32 dasher_id = 1;
  // Type of the equipment
  common.DasherEquipmentType equipment_type = 2;
  // Are we removing or adding equipment as a part of the request
  bool should_remove_equipment = 3;
  // Optional expiration details
  DasherEquipmentExpirationDetails expiration_details = 4;
}

message CreateOrUpdateDasherEquipmentResponse {
  // Id of the row of the equipment created for logs tracing purpose
  int64 id = 1;
  // Count of the equipment attached to the dasher
  int32 count = 2;
  // Id of the dasher
  int32 dasher_id = 3;
  // Type of the equipment
  common.DasherEquipmentType equipment_type = 4;
  // Timestamp of creation
  google.protobuf.Timestamp equipped_at = 5;
  // Expiration details
  DasherEquipmentExpirationDetails expiration_details = 6;
}

message UpdateDasherEquipmentStatusRequest {
  int32 dasher_id = 1;
  string delivery_uuid = 2;
  string equipment_type = 3;
  bytes photo = 4;
  bool is_verified = 5;
  google.protobuf.Int64Value shift_id = 6;
}

message UpdateDasherEquipmentStatusResponse {
  string verification_status = 1;
  bool unequip_dasher = 2;
  string photo_url = 3;
}

message GetDasherEquipmentNameMappingRequest {}

message GetDasherEquipmentNameMappingResponse {
  repeated string name = 1;
  repeated string proper_snake_case_name = 2;
}

message IsDasherEquippedForEquipmentTypeRequest {
  // Id of the dasher
  int64 dasher_id = 1;
  // Equipment type name
  string equipment_type = 2;
}

message IsDasherEquippedForEquipmentTypeResponse {
  bool is_equipped = 1;
}

message QualifyDasherOnboardingRequest {
  // Id of the dasher
  repeated int64 dasher_id = 1;
  // The qualification status
  string qualification_status = 2;
  // Timestamp of update
  google.protobuf.Timestamp updated_at = 3;
}

message QualifyDasherOnboardingResponse {
  // Id of the dasher
  repeated int64 id = 1;
  // The qualification status
  string qualification_status = 2;
  // Timestamp of update
  google.protobuf.Timestamp updated_at = 3;
}

message EquipDasherOnboardingRequest {
  // Id of the dasher
  repeated int64 dasher_id = 1;
  // Count of the equipments attached to the dasher
  repeated int32 count = 2;
  // Types of the equipment
  repeated common.DasherEquipmentType equipment_type = 3;
  // Timestamp of creation
  google.protobuf.Timestamp equipped_at = 4;
  // Expiration details
  DasherEquipmentExpirationDetails expiration_details = 5;
}

message DasherEquipmentExpirationDetails {
  // Expiration timestamp (UTC) of the equipment, default is null
  google.protobuf.Timestamp expires_at = 1;
}

message EquipDasherOnboardingResponse {
  // Id of the dasher
  repeated int64 id = 1;
  // Count of the equipments attached to the dasher
  repeated int32 count = 2;
  // Types of the equipment
  repeated common.DasherEquipmentType equipment_type = 3;
  // Timestamp of creation
  google.protobuf.Timestamp equipped_at = 4;
  // Expiration details
  DasherEquipmentExpirationDetails expiration_details = 5;
}

message UpdateDasherEquipmentEducationalSMSRequest {
  int32 dasher_id = 1;
}

message UpdateDasherEquipmentEducationalSMSResponse {
  bool is_success = 1;
  string error_message = 2;
}

message ImageAndSourceRequest {
  google.protobuf.StringValue image_source = 1;
  map<string, string> params = 2;
}

message UpdateCashOnDeliveryDasherPreferenceRequest {
  int32 dasher_id = 1;
  google.protobuf.StringValue feature_preference_key = 2;
  bool feature_preference_value = 3;
}

message DasherPreferenceRequest {
  int32 dasher_id = 1;
}

// error codes for failure
enum DasherPreferenceErrorCode {
  // unspecified
  DASHER_PREFERENCE_ERROR_CODE_UNSPECIFIED = 0;
  // invalid request.
  DASHER_PREFERENCE_ERROR_CODE_INVALID_REQUEST = 1;
}
message DasherPreferenceResponse {
  message DasherPreference {
    message PreferenceValue {
      // this type can be extended for arrays, int etc
      bool boolean_value = 1;
    }
    google.protobuf.StringValue feature_preference_key = 1;
    map<string, PreferenceValue> feature_preference_value = 2;
  }

  message Error {
    // Http status code
    int32 code = 1;

    // One of the generic errors listed in the enum.
    DasherPreferenceErrorCode error_code = 2;

    // Detailed error message.
    string error_message = 3;
  }

  int32 dasher_id = 1;
  repeated DasherPreference dasher_preferences = 2;
  repeated Error errors = 3;
}

// enums to specify which dasher payment info to update in
// RefreshPaymentInfoForDasher
enum DasherPaymentInfoType {
  // unspecified, fallback
  DASHER_PAYMENT_INFO_TYPE_UNSPECIFIED = 0;
  // bank account or card
  DASHER_PAYMENT_INFO_TYPE_PAYOUT_METHOD = 1;
}

message RefreshPaymentInfoForDasherRequest {
  // rpc RefreshPaymentInfoForDasher takes dasher_id as an argument and makes
  // a call to payment service to retrieve the dasher's payment info. Then it
  // updates dasher.payment_info, a jsonb column.

  // dasher ID related to payout method. If dasher doesn't exist, returns an
  // error.
  int32 dasher_id = 1;

  // enum to specify which kind of payment info to refresh.
  DasherPaymentInfoType payment_info_type = 2;
}

message UploadVerificationPhotoRequest {
  int32 dasher_id = 1;
  string delivery_uuid = 2;
  string photo_type = 3;
  bytes photo = 4;
}

message UploadVerificationPhotoResponse {
  string photo_url = 1;
}

message CommuteAddress {
  string address_id = 1;

  float lat = 2;

  float lng = 3;

  string address = 4;

  google.protobuf.Timestamp selected_at = 5;
}

message CommutePreference {
  bool commute_home_enabled = 1;

  repeated CommuteAddress commute_addresses = 2;
}

message CommandoModeResponse {
  string commando_mode = 1;
}

message UpdateDasherEphemeralFlagsResponse {
  repeated string failed_flags = 1;
}

message UnsetDasherEphemeralFlagsRequest {
  int32 dasher_id = 1;
  repeated string flags = 2;
}

message UnsetDasherEphemeralFlagsResponse {
  repeated string failed_flags = 1;
}

message GetDasherEphemeralFlagDataRequest {
  int32 dasher_id = 1;
  string flag_name = 2;
}

message GetDasherEphemeralFlagDataResponse {
  // Only checking if ephemeralFlagId and dasherId exists as is the logic used in DxS
  // Other EphemeralData can be added in the future when required
  bool has_feature = 1;
  google.protobuf.Timestamp date_time_data = 2;
  string text_data = 3;
}

// For a particular flag we can fetch the flag data and update the required fields in one request
message GetAndUpdateDasherEphemeralFlagDataRequest {
  // dasher_id and flag_name will be used to fetch the existing flag data
  int32 dasher_id = 1;
  string flag_name = 2;
  // This will be the mapping of flag_name and new value which we want to update.
  google.protobuf.Struct data = 3;
}

message GetAndUpdateDasherEphemeralFlagDataResponse {
  // Only checking if ephemeralFlagId and dasherId exists as is the logic used in DxS
  // Other EphemeralData can be added in the future when required
  bool has_feature = 1;
  // This will be value before the update happens.
  google.protobuf.BoolValue bool_data = 2;
  string text_data = 3;
  repeated string failed_flags = 4;
}

message UpdateDasherStartingPointRequest {
  google.protobuf.Int32Value starting_point_id = 1;
  google.protobuf.FloatValue lat = 2;
  google.protobuf.FloatValue lng = 3;
  int64 dasher_id = 4;
}

message UpdateDasherStartingPointResponse {
  StartingPoint starting_point = 1;
}

message GetDasherTOSDetailViewRequest {
  int32 dasher_id = 1;
  string version_id = 2;
}

message GetDasherTOSDetailViewResponse {
  string url = 1;
  int32 version = 2;
}

message AcceptDasherTOSRequest {
  int32 dasher_id = 1;
  int32 version_id = 2;
}

message UpdateDasherIcaStatusRequest {
  int32 dasher_id = 1;
  google.protobuf.Timestamp accepted_at = 2;
  DasherIcaType ica_type = 3;
}

message GetCodAbandonCountInPreviousShiftRequest {
  google.protobuf.Int64Value dasher_id = 1;
}

message GetCodAbandonCountInPreviousShiftResponse {
  google.protobuf.Int64Value count = 1;
  google.protobuf.Int64Value previous_shift_id = 2;
}

message DeleteDasherEquipmentRequest {
  // Id of the dasher
  google.protobuf.Int64Value dasher_id = 1;
  // Type of the equipment
  common.DasherEquipmentType equipment_type = 2;
}

message DeleteDasherEquipmentResponse {
  // Id of the dasher
  google.protobuf.Int64Value dasher_id = 1;
  // Type of the equipment
  common.DasherEquipmentType equipment_type = 2;
}

message DasherCreationEvent {
  // Id of the dasher
  google.protobuf.Int64Value dasher_id = 1;
  // Applicant Id of the dasher
  google.protobuf.Int64Value dasher_applicant_id = 2;
  // User Id of the dasher
  google.protobuf.Int64Value user_id = 3;
  // unique application link of the dasher
  google.protobuf.StringValue unique_link = 4;
  // dasher_id creation timestamp
  google.protobuf.Timestamp created_at = 5;
  // email of the dasher
  string email = 6;
}

// Used to track LTD Milestone for now in dasher_update. If adding additional fields,
// you should update the dasher-service-engagement__dasher_update_events.
// int sizes are set to match Dasher model in dasher-service
message DasherUpdateEvent {
  // Id of dasher
  google.protobuf.Int64Value dasher_id = 1;
  // User id of dasher
  google.protobuf.Int64Value user_id = 2;
  // Default sp id of dasher
  google.protobuf.Int64Value default_starting_point_id = 3;
  // Dasher's last shift's sp id
  google.protobuf.Int32Value last_shift_starting_point_id = 4;
  // Dasher's LTD count
  google.protobuf.Int32Value lifetime_num_deliveries_made = 5;
}

message DasherEquipmentType {
  // Id of the equipment type
  google.protobuf.Int64Value id = 1;
  // Name of the equipment type
  google.protobuf.StringValue name = 2;
}

message GetDasherEquipmentTypesByNamesRequest {
  // name of the equipment
  repeated string equipment_name = 1;
}

message GetDasherEquipmentTypesByNamesResponse {
  // id of the equipment type
  repeated DasherEquipmentType equipment_type = 1;
}
