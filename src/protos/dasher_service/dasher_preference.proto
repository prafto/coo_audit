syntax = "proto3";

// buf:lint:ignore DIRECTORY_SAME_PACKAGE
package dasher_service.dasher_preference.v1;

import "common/dayparts.proto";
import "dasher_service/dasher_dasher.proto";
import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.dasher.dasher_preference";

// Preference of a dasher.
message DasherPreference {
  // Dasher ID of this preference.
  int64 dasher_id = 3;

  // Type of the preference.
  string type = 1;

  // Actual content of the preference, the `type` should be used to infer which type of message is used as Preference.
  // Each preference should define the type in the comment with all lowercase kebab case, i.e. [type-example].
  oneof preference {
    // [distance] Distance related preferences.
    DistancePreference distance_preference = 2;
    // [commute-to-home] Commute to home related preferences.
    dasher_service.dasher.CommutePreference commute_home_preference = 4;
    // [order-type] Order type preferences.
    OrderTypePreference order_type_preference = 5;
    // [safety] Safety Related Preferences
    SafetyPreference safety_preference = 6;
    // [insurance] Insurance Related Preferences
    InsurancePreference insurance_preference = 7;
    // [military] military base related Preferences
    MilitaryPreference military_preference = 8;
    // [vehicle] Vehicle related preferences.
    VehiclePreference vehicle_preference = 9;
    // [offline-assignment] Offline assignment related preferences.
    OfflineAssignmentPreference offline_assignment_preference = 10;
  }
}

// Distance as preference.
message DistancePreference {
  // Type of the distance set as the preference.
  enum Type {
    // UNSPECIFIED.
    TYPE_UNSPECIFIED = 0;
    // The preference is disabled.
    TYPE_DISABLED = 1;
    // Maximum total distance of an order the dasher prefers.
    TYPE_TOTAL_DISTANCE = 2;
    // Restaurant_to_customer distance.
    TYPE_R2C_DISTANCE = 3;
  }
  // Distance type.
  // If the type is set as `TYPE_DISABLED` then this preference is disabled, and `distance` value should be ignored.
  Type type = 1;

  // Value of the distance with specified type. Distance is in miles.
  // This field should be ignored if `type` is set as `TYPE_DISABLED`
  float distance = 2;
}

// Order type as preference.
// grouped_offers is a preference which allows dasher to provide preference for receiving multiple offers where
// each offer consists of max # of deliveries allowed per offer.
// Example: In CA, offers can consist of max 12 deliveries. This preference allows the dasher to receive multiple of
// such offers, or just one offer but with more than 12 deliveries
message OrderTypePreference {
  // Preferences map, with the key being the order type and value as an integer of [-100, 100] with -100 meaning the
  // least preferred and 100 being the most preferred.
  // Valid keys are:
  // - drive
  // - marketplace
  // - alcohol
  // - dsd
  // - double_dash
  // - parcels
  // - new_verticals
  // - grouped_offers
  map<string, int32> preferences = 1;
}

// Safety as preference.
message SafetyPreference {
  // Type of the safety options set as the preference.
  enum Type {
    // UNSPECIFIED.
    TYPE_UNSPECIFIED = 0;
    // The preference is disabled.
    TYPE_DISABLED = 1;
    // Dashers check-in preference
    TYPE_CHECKIN = 2;
  }
  // Preference type.
  // If the type is set as `TYPE_DISABLED` then this preference is disabled, and `is_enabled` value should be ignored.
  Type type = 1;

  // Boolean Values of the Safety Preference with specified type.The field indicates if the safety type is enable or not
  // This field should be ignored if `type` is set as `TYPE_DISABLED`
  bool is_enabled = 2;

  // Boolean Values of the Safety Preference with safety checking tooltip flag.
  // The field indicates if the safety checking tooltip has been seen by dasher or not
  bool is_safety_checkin_seen = 3;

  // Boolean Value of the Dx location sharing preference flag.
  // The field indicates if the location sharing preference is enabled by dasher or not
  bool is_safety_location_sharing_enabled = 4;

  // Boolean Value of the Dx location sharing tutorial seen flag.
  // The field indicates if location sharing tutorial has been seen by dasher or not
  bool is_safety_location_sharing_tutorial_seen = 5;
}

// Insurance related preference
message InsurancePreference {
  // Hard braking audio alert preference
  HardBrakingAudioAlertPreference hard_braking_audio_alert_preference = 1;

  // Hard braking audio alert preference
  message HardBrakingAudioAlertPreference {
    // If the hard braking audio alert is enabled
    bool is_enabled = 1;
    // If the any cta button was clicked / education modal complete
    bool is_education_modal_complete = 2;
    // Counted for hard brake audio alert notification
    int32 notification_count = 3;
    // When the last hard brake audio alert notification pushed
    google.protobuf.Timestamp last_notification_seen_at = 4;
  }
  // Driving insights preference
  DrivingInsightsPreference driving_insights_preference = 2;

  // Driving insights preference
  message DrivingInsightsPreference {
    // Frequency of showing driving insights report
    FrequencyType show_report_frequency = 1;
  }

  // Frequency Type
  enum FrequencyType {
    // Frequency type unspecified
    FREQUENCY_TYPE_UNSPECIFIED = 0;
    // Frequency type always
    FREQUENCY_TYPE_ALWAYS = 1;
    // Frequency type never
    FREQUENCY_TYPE_NEVER = 2;
  }
}

// Military base related preference
message MilitaryPreference {
  // If dx specify preference then is_enabled = true
  bool is_enabled = 1;
}

// Vehicle related preference
message VehiclePreference {
  reserved 1;
  reserved 'vehicle_type_id';
  // Which vehicle the dasher has chosen as their current
  google.protobuf.Int64Value vehicle_id = 2;
}

// Offline Assignment preference
message OfflineAssignmentPreference {
  // if enabled, our assignment engine will make offline assignments to Dx and they will receive a notification for it.
  bool is_enabled = 1;
  // Whether the day/time preferences should be auto-set based on their dashing history.
  bool auto_set_preference = 2;
  // The local time zone of the dasher(PST, EST, CST, etc...)
  string dasher_local_timezone = 3;
  // metadata for each day's preference
  repeated DayPreference day_preferences = 4;

  // Encapsulates metadata for a given day's preference
  message DayPreference {
    // the day of the week(i.e. Tuesday) for which Dx has offline assignment enabled
    dayparts.DayOfWeek weekday = 1;
    // whether Dx has enabled offline assignment preference for this day
    bool is_enabled = 2;
    // the list of time windows Dx has set to received offline assignments
    repeated TimeWindow time_windows = 3;

    // Represents a given time window
    message TimeWindow {
      // start time
      dayparts.TimeOfDay start_time = 1;
      // end time
      dayparts.TimeOfDay end_time = 2;
    }
  }
}
