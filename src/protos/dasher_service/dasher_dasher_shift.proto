syntax = "proto3";

package dasher_service.dasher_shift;

import "common/service_client_config.proto";
import "dasher_opportunity_service/types/v1/opportunity.proto";
import "dasher_service/dasher_common.proto";
import "dasher_service/dasher_dasher.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.dasher.dasher_shift";

// Apollo Shift Service
service ShiftAssignmentService {
  option (service_client.client_config).circuit_breaker_config.do_ignore_grpc_code = 9;

  // Get Shift
  rpc GetShift(GetShiftRequest) returns (GetShiftResponse);

  // Get Assignable Shifts
  rpc GetAssignableShifts(GetAssignableShiftsRequest) returns (GetAssignableShiftsResponse);

  // Batch Get Shift
  rpc BatchGetShift(BatchGetShiftRequest) returns (BatchGetShiftResponse);

  // Get Active Shifts By SP
  rpc GetActiveShiftsBySP(GetActiveShiftsBySPRequest) returns (GetActiveShiftsBySPResponse);

  // Get scheduled assignable shifts By SP and time window
  rpc GetScheduledAssignableShifts(GetScheduledAssignableShiftsRequest) returns (GetScheduledAssignableShiftsResponse);
}

// Get Shift Request
message GetShiftRequest {
  // shift id
  google.protobuf.Int64Value id = 1;
}

// Get Shift Response
message GetShiftResponse {
  // shift
  DasherShift dasher_shift = 1;
}

// Get Assignable Shifts Request
message GetAssignableShiftsRequest {
  // list of starting point id
  repeated google.protobuf.Int64Value starting_point_ids = 1;

  // limit
  google.protobuf.Int32Value response_limit = 2;
}

// Get Assignable Shifts Response
message GetAssignableShiftsResponse {
  // list of shifts
  repeated DasherShift dasher_shifts = 1;
}

// Batch Get Shift Request
message BatchGetShiftRequest {
  // list of shift id with version
  repeated VersionedId versioned_ids = 1;

  // limit
  google.protobuf.Int32Value response_limit = 2;
}

// Batch Get Shift Response
message BatchGetShiftResponse {
  // list of shift
  repeated DasherShift dasher_shifts = 1;
}

// Get Active Shifts By SP Request
message GetActiveShiftsBySPRequest {
  // list of starting point id
  google.protobuf.Int64Value starting_point_id = 1;

  // request params
  GetActiveShiftsBySPRequestParams get_active_shifts_by_sp_request_params = 2;
}

// Get Active Shifts By SP Request Params
message GetActiveShiftsBySPRequestParams {
  // limit default 100
  google.protobuf.Int32Value response_limit = 1;

  // auto assign
  google.protobuf.BoolValue auto_assign = 2;

  // Add additional_attributes
  repeated google.protobuf.StringValue additional_attributes = 3;

  // look back window for scheduled end time if still active in minutes
  google.protobuf.Int32Value window_past_scheduled_end_time_in_mins = 4;
}

// Get Assignable Shifts Response
message GetActiveShiftsBySPResponse {
  // list of shifts
  repeated DasherShift dasher_shifts = 1;
}

// Get future assignable shifts By SP Request
message GetScheduledAssignableShiftsRequest {
  // Starting point id
  google.protobuf.Int64Value starting_point_id = 1;

  // Min and max time work together
  // Any shift which overlaps with time range [min_time, max_time] will be returned.

  // Min time to look for. Default is current time in UTC.
  google.protobuf.Timestamp min_time = 2;

  // Max time to look for. Default is till end of time.
  google.protobuf.Timestamp max_time = 3;

  // request params
  GetScheduledAssignableShiftsRequestParams get_scheduled_assignable_shifts_request_params = 4;
}

// Get future assignable shifts By SP Request Params
message GetScheduledAssignableShiftsRequestParams {
  // limit default 100
  google.protobuf.Int32Value page_size = 1;

  // offset. default is empty string for first page
  google.protobuf.StringValue page_offset = 2;

  // auto assign
  google.protobuf.BoolValue auto_assign = 3;

  // Add additional_attributes
  repeated google.protobuf.StringValue additional_attributes = 4;
}

// Get future assignable Shifts Response
message GetScheduledAssignableShiftsResponse {
  // list of shifts
  repeated DasherShift dasher_shifts = 1;

  // next page offset
  google.protobuf.StringValue next_page_offset = 2;
}

// Version ID
message VersionedId {
  // shift id
  google.protobuf.Int64Value id = 1;

  // version
  google.protobuf.StringValue version = 2;
}

// Dasher Shift
message DasherShift {
  // shift id
  google.protobuf.Int64Value id = 1;

  // dasher id
  google.protobuf.Int64Value dasher_id = 2;

  // user id
  google.protobuf.Int64Value user_id = 3;

  // starting point id
  google.protobuf.Int64Value shift_starting_point_id = 4;

  // vehicle id
  google.protobuf.Int64Value vehicle_id = 5;

  // vehicle type id
  google.protobuf.Int64Value vehicle_type_id = 6;

  // auto assign
  google.protobuf.BoolValue auto_assign = 7;

  // scheduled start time
  google.protobuf.Timestamp scheduled_start_time = 8;

  // scheduled end time
  google.protobuf.Timestamp scheduled_end_time = 9;

  // dasher date of birth
  google.protobuf.Timestamp dasher_date_of_birth = 10;

  // dasher score
  google.protobuf.Int64Value dasher_score = 11;

  // is equipped
  google.protobuf.BoolValue is_equipped = 12;

  // list of dasher skill
  repeated DasherSkill dasher_skills = 13;

  // list of dasher soft skill
  repeated DasherSoftSkill dasher_soft_skills = 14;

  // can assign cash order
  google.protobuf.BoolValue can_assign_cash_order = 15;

  // can receive red card deliveries
  google.protobuf.BoolValue can_receive_red_card_deliveries = 16;

  // check in time
  google.protobuf.Timestamp check_in_time = 17;

  // close out time
  google.protobuf.Timestamp close_out_time = 18;

  // check out time
  google.protobuf.Timestamp check_out_time = 19;

  // updated at
  google.protobuf.Timestamp updated_at = 20;

  // cancelled at
  google.protobuf.Timestamp cancelled_at = 21;

  // version
  google.protobuf.StringValue version = 22;

  // list of route point
  repeated RoutePoint route_history = 23;

  // is first shift
  google.protobuf.BoolValue is_first_shift = 24;

  // acceptance rate on check in
  google.protobuf.FloatValue acceptance_rate_on_check_in = 25;

  // experiment info
  google.protobuf.StringValue experiment_info = 26;

  // num of deliveries
  google.protobuf.Int32Value num_deliveries = 27;

  // delivery pay
  google.protobuf.Int32Value delivery_pay = 28;

  // tip amount
  google.protobuf.Int32Value tip_amount = 29;

  // total pay
  google.protobuf.Int32Value total_pay = 30;

  // is top dasher on check in
  google.protobuf.BoolValue is_top_dasher_on_check_in = 31;

  // notified to extend
  google.protobuf.BoolValue notified_to_extend = 32;

  // commute expire time
  google.protobuf.Timestamp commute_expire_time = 33;

  // commute state
  google.protobuf.StringValue commute_state = 34;

  // commute preference
  CommutePreference commute_preference = 35;

  // is waiting for expected assignment
  google.protobuf.BoolValue is_waiting_for_expected_assignment = 36;

  // is dasher now
  google.protobuf.BoolValue is_dash_now = 37;

  // is test
  google.protobuf.BoolValue is_test = 38;

  // most recent shift resume timestamp
  google.protobuf.Timestamp resume_time = 39;

  // DasherShiftAttributes asked by client
  DasherShiftAttributes dasher_shift_attributes = 40;

  // check in location
  dasher_service.dasher_common.LatLng check_in_location = 41;
}

// Dasher Shift Attributes
message DasherShiftAttributes {
  // CargoCapacity associated with dasher's vehicle
  dasher_service.dasher_common.VehicleCargoCapacity vehicle_cargo_capacity = 1;

  // Opportunity associated with the shift
  dasher_opportunity_service.types.v1.Opportunity opportunity = 2;
}

// Dasher Skill
message DasherSkill {
  // dasher skill id
  google.protobuf.Int64Value id = 1;
}

// Dasher Soft Skill
message DasherSoftSkill {
  // dasher soft skill subtype
  google.protobuf.Int64Value subtype = 1;

  // dasher soft skill type
  google.protobuf.Int64Value type = 2;

  // dasher soft skill value
  google.protobuf.Int64Value value = 3;
}

// Route Point
message RoutePoint {
  // delivery id
  google.protobuf.Int64Value delivery_id = 1;

  // stdev
  google.protobuf.Int64Value stdev = 2;

  // lat
  google.protobuf.DoubleValue lat = 3;

  // lng
  google.protobuf.DoubleValue lng = 4;

  // calculated time
  google.protobuf.Timestamp calculated_time = 5;

  // actual time
  google.protobuf.Timestamp actual_time = 6;

  // type
  RoutePointType type = 7;
}

// Route Point Type
enum RoutePointType {
  // UNSPECIFIED
  ROUTE_POINT_TYPE_UNSPECIFIED = 0;

  // PICKUP
  ROUTE_POINT_TYPE_PICKUP = 1;

  // DELIVER
  ROUTE_POINT_TYPE_DELIVER = 2;
}

// Commute Preference
message CommutePreference {
  // is commute home enabled
  google.protobuf.BoolValue is_commute_home_enabled = 1;

  // commute end destination
  dasher_service.dasher.CommuteAddress commute_end_destination = 2;

  // end route start time
  google.protobuf.Timestamp end_route_start_time = 3;

  // end route unavailable reason
  google.protobuf.StringValue end_route_unavailable_reason = 4;
}
