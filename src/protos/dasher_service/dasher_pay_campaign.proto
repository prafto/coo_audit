syntax = "proto3";

package dasher_service.pay_campaign;

import "common/date.proto";
import "common/money.proto";
import "common/service_client_config.proto";
import "dasher_service/dasher_api.proto";
import "dasher_service/dasher_common.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.dasher.pay_campaign";

service DasherPayCampaignService {
  option (service_client.client_config).service_name = "dasher-service";
  option (service_client.client_config).service_app = "tools";
  option (service_client.client_config).response_attempt_timeout_millis = 1500;

  rpc GetActiveDasherPayCampaigns(GetActiveDasherPayCampaignsRequest) returns (GetActiveDasherPayCampaignsResponse);

  // Fetches all currently active pay campaigns for an onshift dasher’s current starting point
  rpc GetPayCampaignsForOnshiftDasher(GetPayCampaignsForOnshiftDasherRequest) returns (GetPayCampaignsForOnshiftDasherResponse);

  // Fetches all current and upcoming pay campaigns for the rest of the day, in the dasher’s default SP and all adjacent SPs
  // (or from whatever SPs the dasher has previously selected as their preference)
  rpc GetUpcomingPayCampaignsForDasher(GetUpcomingPayCampaignsForDasherRequest) returns (GetUpcomingPayCampaignsForDasherResponse);

  // Fetches dasher's starting point selections and whether there will be pay campaigns returned for each of them.
  rpc GetStartingPointSelectionsForDasher(GetStartingPointSelectionsForDasherRequest) returns (GetStartingPointSelectionsForDasherResponse);

  rpc SaveStartingPointSelectionsForDasher(SaveStartingPointSelectionsForDasherRequest) returns (SaveStartingPointSelectionsForDasherResponse);

  // Bulk create pay campaigns for multiple starting points
  rpc BulkCreateDasherPayCampaign(BulkCreateDasherPayCampaignRequest) returns (BulkCreateDasherPayCampaignResponse);

  rpc CreateDasherPayCampaign(CreateDasherPayCampaignRequest) returns (CreateDasherPayCampaignResponse);

  rpc GetAllDasherPayCampaigns(GetAllDasherPayCampaignsRequest) returns (GetAllDasherPayCampaignsResponse);

  rpc GetAllDasherPayCampaignsBySp(GetAllDasherPayCampaignsBySpRequest) returns (GetAllDasherPayCampaignsBySpResponse);

  rpc GetPayCampaignsById(GetPayCampaignsByIdRequest) returns (GetPayCampaignsByIdResponse);

  rpc UpdateDasherPayCampaigns(UpdateDasherPayCampaignsRequest) returns (UpdateDasherPayCampaignsResponse);

  rpc DeleteDasherPayCampaigns(DeleteDasherPayCampaignsRequest) returns (DeleteDasherPayCampaignsResponse);

  rpc ListDasherPayCampaigns(ListDasherPayCampaignsRequest) returns (ListDasherPayCampaignsResponse);

  rpc ListDasherPayCampaignsByStartingPointId(ListDasherPayCampaignsByStartingPointIdRequest) returns (ListDasherPayCampaignsByStartingPointIdResponse);
}

message PayCampaignInterval {
  int32 id = 1;

  bool is_active = 2;

  int32 starting_point_id = 3;

  int32 delivery_pay_modification = 4;

  string whitelist_dasher_ids = 5;

  google.protobuf.Timestamp activation_time = 6;

  google.protobuf.Timestamp activation_until_time = 7;

  int32 minimum_hourly_pay = 8;

  map<string, string> metadata = 9;

  money.MonetaryFields minimum_hourly_pay_monetary_fields = 10;

  map<string, int32> constraints = 11;

  google.protobuf.StringValue variant = 12;

  money.MonetaryFields delivery_pay_modification_monetary_fields = 13;

  string starting_point_name = 14;

  dasher_service.dasher_common.LatLng starting_point_location = 15;

  string activation_time_string = 16;

  string activation_until_time_string = 17;
}

message TimeModePayCampaignInterval {
  bool is_enabled = 1;

  repeated PayCampaignInterval pay_campaigns = 2;
}

message PayCampaign {
  int32 id = 1;

  int32 amount = 2;

  google.protobuf.Timestamp activation_time = 3;

  google.protobuf.Timestamp activation_until_time = 4;

  repeated string rules = 5;

  money.MonetaryFields amount_monetary_fields = 6;
}

message PayCampaignMap {
  int32 starting_point_id = 1;
  repeated PayCampaignInterval pay_campaign_intervals = 2;
}

message Boost {
  google.protobuf.Timestamp activation_time = 1;

  google.protobuf.Timestamp activation_until_time = 2;

  int32 amount = 3;

  repeated PayCampaign pay_campaigns = 4;

  money.MonetaryFields amount_monetary_fields = 5;
}

message GetActiveDasherPayCampaignsRequest {
  int32 starting_point_id = 1;

  google.protobuf.Timestamp active_time = 2;

  uint64 active_time_epoch = 3;

  google.protobuf.Int64Value dasher_id = 4;
}

message GetPayCampaignsForOnshiftDasherRequest {
  google.protobuf.Int64Value dasher_id = 1;

  google.protobuf.Int64Value delivery_id = 2;
}

message GetPayCampaignsForOnshiftDasherResponse {
  repeated PayCampaignInterval pay_campaigns = 1;

  TimeModePayCampaignInterval time_mode_pay_campaigns = 2;
}

message GetActiveDasherPayCampaignsResponse {
  repeated PayCampaignInterval pay_campaigns = 1;

  TimeModePayCampaignInterval time_mode_pay_campaigns = 2;
}

message BulkCreateDasherPayCampaignRequest {
  repeated int32 starting_point_ids = 1;

  string whitelist_dasher_ids = 2;

  google.protobuf.Timestamp activation_time = 3;

  google.protobuf.Timestamp activation_until_time = 4;

  map<string, string> metadata = 5;

  money.MonetaryFields minimum_hourly_pay = 6;

  money.MonetaryFields delivery_pay_modification = 7;
}

message BulkCreateDasherPayCampaignResponse {
  repeated PayCampaignInterval pay_campaigns = 1;
}

message CreateDasherPayCampaignRequest {
  bool is_active = 1;

  int32 starting_point_id = 2;

  int32 delivery_pay_modification = 3;

  string whitelist_dasher_ids = 4;

  google.protobuf.Timestamp activation_time = 5;

  google.protobuf.Timestamp activation_until_time = 6;

  int32 minimum_hourly_pay = 7;

  map<string, string> metadata = 8;

  google.protobuf.StringValue variant = 9;

  money.MonetaryFields minimum_hourly_pay_monetary_fields = 10;

  money.MonetaryFields delivery_pay_modification_monetary_fields = 11;
}

message CreateDasherPayCampaignResponse {
  PayCampaignInterval pay_campaign = 1;
}

message GetAllDasherPayCampaignsRequest {
  int32 starting_point_id = 1;

  uint64 active_time_epoch_second = 2;

  uint64 active_until_time_epoch_second = 3;

  google.protobuf.Int64Value dasher_id = 4;
}

message GetAllDasherPayCampaignsResponse {
  repeated PayCampaignInterval pay_campaigns = 1;
}

message GetAllDasherPayCampaignsBySpRequest {
  repeated int32 starting_point_id = 1;

  uint64 active_time_epoch_second = 2;

  uint64 active_until_time_epoch_second = 3;

  google.protobuf.Int64Value dasher_id = 4;
}

message GetAllDasherPayCampaignsBySpResponse {
  repeated PayCampaignInterval pay_campaigns = 1;

  repeated PayCampaignInterval time_mode_pay_campaigns = 2;
}

message GetUpcomingPayCampaignsForDasherRequest {
  google.protobuf.Int64Value dasher_id = 1;
}

message GetUpcomingPayCampaignsForDasherResponse {
  map<int32, StartingPointPayCampaigns> starting_point_pay_campaigns = 1;
}

message GetStartingPointSelectionsForDasherRequest {
  google.protobuf.Int64Value dasher_id = 1;
}

message GetStartingPointSelectionsForDasherResponse {
  map<int32, StartingPointSelectionPayCampaigns> starting_point_selection_pay_campaigns = 1;
}

message SaveStartingPointSelectionsForDasherRequest {
  google.protobuf.Int64Value dasher_id = 1;
  repeated int32 selected_starting_point_ids = 2;
}

message GetPayCampaignsByIdRequest {
  repeated int32 pay_campaign_ids = 1;
}
message GetPayCampaignsByIdResponse {
  repeated PayCampaignInterval pay_campaigns = 1;
}

message UpdateDasherPayCampaignsRequest {
  reserved 1;
  repeated dasher_service.dasher_api.PatchRequest patch_requests = 2;
}
message UpdateDasherPayCampaignsResponse {
  reserved 1;
  reserved "pay_campaign";
  repeated PayCampaignInterval pay_campaigns = 2;
}

message ListDasherPayCampaignsRequest {
  // Total limit of challenges to be listed
  google.protobuf.Int32Value limit = 1;
  // Offset of challenges to be listed
  google.protobuf.Int32Value offset = 2;
  // ID of starting Point
  google.protobuf.Int32Value starting_point_id = 3;
  // Timestamp of the date to filter
  google.protobuf.Timestamp date = 4;
  // String of the SP name
  google.protobuf.StringValue sp_name = 5;
}

message ListDasherPayCampaignsResponse {
  repeated PayCampaignInterval pay_campaigns = 1;
}

message ListDasherPayCampaignsByStartingPointIdRequest {
  // Total limit of challenges to be listed
  google.protobuf.Int32Value limit = 1;
  // Offset of challenges to be listed
  google.protobuf.Int32Value offset = 2;
  // ID of starting Point
  google.protobuf.Int32Value starting_point_id = 3;
}

message ListDasherPayCampaignsByStartingPointIdResponse {
  repeated PayCampaignInterval pay_campaigns = 1;
}

message DeleteDasherPayCampaignsRequest {
  repeated int32 pay_campaign_ids = 1;
}

message DeleteDasherPayCampaignsResponse {
  repeated int32 pay_campaign_ids = 1;
}

message SaveStartingPointSelectionsForDasherResponse {}

// A list of pay campaigns available in a starting point
message StartingPointPayCampaigns {
  int32 starting_point_id = 1;
  repeated PayCampaignInterval pay_campaigns = 2;
  string starting_point_name = 3;
  dasher_service.dasher_common.LatLng starting_point_location = 4;
}

// A starting point that indicates whether there will be pay campaigns
message StartingPointSelectionPayCampaigns {
  int32 starting_point_id = 1;
  string starting_point_name = 2;
  dasher_service.dasher_common.LatLng starting_point_location = 3;
  bool is_selected_for_promos = 4;
}
