syntax = "proto3";

// buf:lint:ignore DIRECTORY_SAME_PACKAGE
package dasher_service.courier_platform.v1;

option java_multiple_files = true;
option java_generic_services = true;
option java_package = "com.doordash.rpc.dasher.courier_platform";

import "dasher_service/courier_common.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "common/service_client_config.proto";

// The types of time offs
enum TimeOffType {
    // Unspecified
    TIME_OFF_TYPE_UNSPECIFIED = 0;
    // Bereavement
    // buf:lint:ignore ENUM_VALUE_PREFIX
    BEREAVEMENT = 1;
    // COVID-19 PTO - Quarantine/Isolation/Illness
    // buf:lint:ignore ENUM_VALUE_PREFIX
    COVID_PTO = 2;
    // Sick Time Off
    // buf:lint:ignore ENUM_VALUE_PREFIX
    SICK_TIME_OFF = 3;
    // Paid Time Off (Hourly)
    // buf:lint:ignore ENUM_VALUE_PREFIX
    PTO = 4;
    // Jury duty
    // buf:lint:ignore ENUM_VALUE_PREFIX
    JURY_DUTY = 5;
    // COVID-19 PTO - Vaccine Child
    // buf:lint:ignore ENUM_VALUE_PREFIX
    COVID_PTO_VACCINE_CHILD = 6;
    // COVID-19 PTO - Vaccine Self
    // buf:lint:ignore ENUM_VALUE_PREFIX
    COVID_PTO_VACCINE_SELF = 7;
    // Unpaid Time Off
    // buf:lint:ignore ENUM_VALUE_PREFIX
    UNPAID_TIME_OFF = 8;
    // Voting Time Off
    // buf:lint:ignore ENUM_VALUE_PREFIX
    VOTING_TIME_OFF = 9;
    // Parental leave
    // buf:lint:ignore ENUM_VALUE_PREFIX
    PARENTAL_LEAVE = 10;
}

// The date of the time off request
message TimeOffDate {
    // True if it is an all-day time off request
    bool all_day = 1;
    // Start time of the time off request
    google.protobuf.Timestamp start_date = 2;
    // End time of the time off request
    google.protobuf.Timestamp end_date = 3;
}

// Overview of a time off request
message TimeOffOverview {
    // ID of the time off request
    string time_off_uuid = 1;
    // ID of the courier
    int64 dasher_id = 2;
    // Type of the time off request
    TimeOffType type = 3;
    // Status of the time off request
    courier_common.Status status = 4;
    // Dates of the time off request
    repeated TimeOffDate dates = 5;
    // Amount of paid hours
    double paid_hours_requested = 6;
}

// Overview of a time off request V2
message TimeOffOverviewV2{
    // ID of the time off request
    string time_off_uuid = 1;
    // ID of the courier
    int64 dasher_id = 2;
    // Type of the time off request
    TimeOffType type = 3;
    // Status of the time off request
    courier_common.Status status = 4;
    // Dates of the time off request
    repeated TimeOffDate dates = 5;
    // Total amount of hours requested
    double total_hours_requested = 6;
}

// Status history of a time off request
message TimeOffHistory {
    // Status of the time off request
    courier_common.Status status = 1;
    // Date when the status is created
    google.protobuf.Timestamp created_at = 2;
}

// Mapping between time off type and absence plan
message TimeOffTypeAbsencePlanMapping {
    // Time off type
    TimeOffType time_off_type = 1;
    // Display name for Time off type
    google.protobuf.StringValue time_off_type_display_name = 2;
    // Display name for Absence Plan
    google.protobuf.StringValue absence_plan = 3;
}

// Balance of absence plans
message AbsencePlanBalance {
    // Display name for Absence Plan
    google.protobuf.StringValue absence_plan = 1;
    // Balance of absence plan
    double amount = 2;
    // True if there is no balance limit
    bool is_unlimited = 3;
}

// Request of CreateTimeOff
message CreateTimeOffRequest {
    // ID of the courier
    int64 dasher_id = 1;
    // Type of the time off request
    TimeOffType type = 2;
    // Dates of the time off request
    repeated TimeOffDate dates = 3;
    // Comment of the time off request
    google.protobuf.StringValue comment = 4;
}   

// Response of CreateTimeOff
message CreateTimeOffResponse {
}

// Request of GetTimeOffs
message GetTimeOffsRequest {
    // ID of the courier
    int64 dasher_id = 1;
}

// Request of GetTimeOffsV2
message GetTimeOffsV2Request {
    // ID of the courier
    int64 dasher_id = 1;
}

// Response of GetTimeOffsResponse
message GetTimeOffsResponse {
    // Past time off requests
    repeated TimeOffOverview past_time_offs = 1;
    // Current time off requests
    repeated TimeOffOverview current_time_offs = 2;
}

// Request of GetTimeOffDetail
message GetTimeOffDetailRequest {
    // ID of the time off request
    string time_off_uuid = 1;
}

// Request of GetTimeOffDetailV2
message GetTimeOffDetailV2Request {
    // ID of the time off request
    string time_off_uuid = 1;
}

// Response of GetTimeOffDetail
message GetTimeOffDetailResponse {
    // ID of the time off request
    string time_off_uuid = 1;
    // ID of the courier
    int64 dasher_id = 2;
    // Type of the time off request
    TimeOffType type = 3;
    // Status of the time off request
    courier_common.Status status = 4;
    // Status info of the time off request
    google.protobuf.StringValue status_info = 5;
    // Dates of the time off request
    repeated TimeOffDate dates = 6;
    // Amount of total hours
    double total_hours_requested = 7;
    // Amount of paid hours
    double paid_hours_requested = 8;
    // Comment of the time off request
    google.protobuf.StringValue comment = 9;
    // History of the time off request
    repeated TimeOffHistory history = 10;
}

// Request of CancelTimeOff
message CancelTimeOffRequest {
    // ID of the time off request
    string time_off_uuid = 1;
    // The comment for canceling time off request
    google.protobuf.StringValue comment = 2;
}

// Response of CancelTimeOff
message CancelTimeOffResponse {
}

// Request of GetTimeOffBalance
message GetTimeOffBalanceRequest {
    // ID of the courier
    int64 dasher_id = 1;
}

// Response of GetTimeOffBalance
message GetTimeOffBalanceResponse {
    // Type of the time off request
    repeated TimeOffTypeAbsencePlanMapping time_off_types = 1;
    // Balance of absence plans
    repeated AbsencePlanBalance balances = 2;
    // Maximum number of hours time off per day
    double max_hours_allowed_per_day = 3;
    // Time zone of the courier in Workday
    google.protobuf.StringValue time_zone = 4;
}

// Response of GetTimeOffsV2
message GetTimeOffsV2Response {
    // Past time off requests
    repeated TimeOffOverviewV2 past_time_offs = 1;
    // Current time off requests
    repeated TimeOffOverviewV2 current_time_offs = 2;
}

// Response of GetTImeOffDetailV2
message GetTimeOffDetailV2Response {
    // ID of the time off request
    string time_off_uuid = 1;
    // ID of the courier
    int64 dasher_id = 2;
    // Type of the time off request
    TimeOffType type = 3;
    // Status of the time off request
    courier_common.Status status = 4;
    // Manager comment of the time off request
    google.protobuf.StringValue manager_comment = 5;
    // Dates of the time off request
    repeated TimeOffDate dates = 6;
    // Amount of total hours
    double total_hours_requested = 7;
    // Employee comment of the time off request
    google.protobuf.StringValue employee_comment = 8;
    // History of the time off request
    repeated TimeOffHistory history = 9;
}

// Time Off Service
service TimeOffService {
    option (service_client.client_config).response_attempt_timeout_millis = 35000;

    // Create a new time off request
    rpc CreateTimeOff(CreateTimeOffRequest) returns (CreateTimeOffResponse) { }
    // Get time off requests given current dates  
    rpc GetTimeOffs(GetTimeOffsRequest) returns (GetTimeOffsResponse) {
        option (service_client.client_method_config).response_attempt_timeout_millis = 35000;
    }
    // Get time off request V2
    rpc GetTimeOffsV2(GetTimeOffsV2Request) returns (GetTimeOffsV2Response) { }
    // Get detail of a time off request
    rpc GetTimeOffDetail(GetTimeOffDetailRequest) returns (GetTimeOffDetailResponse) { }
    // Get detail of a time off request V2
    rpc GetTimeOffDetailV2(GetTimeOffDetailV2Request) returns (GetTimeOffDetailV2Response) { }
    // Cancel a time off request
    rpc CancelTimeOff(CancelTimeOffRequest) returns (CancelTimeOffResponse) { }
    // Get the current time off balance 
    rpc GetTimeOffBalance(GetTimeOffBalanceRequest) returns (GetTimeOffBalanceResponse) { } 
}
 