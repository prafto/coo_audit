syntax = "proto3";

package discovery_content_service.v1;

option java_multiple_files = true;
option java_generic_services = true;
option java_package = "com.doordash.rpc.discovery_content_service";

import "common/common.proto";
import "discovery_content_service/surface.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

/* Represent the metadata of the filter */
message Filter {
    /* filter id */
    google.protobuf.StringValue id = 1;
    /* will deprecate later once we update the source table for ranking */
    google.protobuf.StringValue ranking_id = 2;
    /* filter name */
    string name = 3;
    /* fitler type metadata: Rx, NV and special case */
    FilterTypeMetadata filter_type_metadata = 4;
    /* is active */
    bool is_active = 5;
    /* excluded submarket ids, optional field, use case: alcohol */
    repeated string excluded_submarkets = 6;
    /* Surface level configuration */
    repeated FilterSurfaceInfo filter_surface_info = 7;
    /* DV experiment */
    FilterExperiment experiment = 8; 
	
    /* for auditing purpose */
    /* created by */
    common.Creator created_by = 9;
    /* create timestamp */
    google.protobuf.Timestamp created_at = 10;
    /* update by */
    common.Creator updated_by = 11;
    /* update timestamp */
    google.protobuf.Timestamp updated_at = 12;
}

/* Represent a lite version of the filter. */
message LiteFilter {
    /* filter id */
    google.protobuf.StringValue id = 1;
    /* will deprecate later once we update the source table for ranking */
    google.protobuf.StringValue ranking_id = 2;
    /* filter name */
    string name = 3;
    /* fitler type metadata: Rx, NV and special case */
    FilterTypeMetadata filter_type_metadata = 4;
    /* image asset */
    ImageAsset image_asset = 5;
}

/* Experiment for filter */
message FilterExperiment {
    /* experiment name */
    google.protobuf.StringValue experiment_name = 1;
    /* experiment buckets this filter is eligible for within experiment_name */
    repeated google.protobuf.StringValue visible_to_buckets = 2;
}

/* Fitler surface information */
message FilterSurfaceInfo {
    /* surface page type, ie. homepage, browsepage */
    SurfaceType surface_type = 1;
    /* image assets by platform list */
    repeated ImageAssetByPlatform image_asset_by_platform = 2;
    /* is active */
    bool is_active = 3;
}

/* Platform information */
enum Platform {
    /* unspecified */
    PLATFORM_UNSPECIFIED = 0;
    /* IOS */
    PLATFORM_IOS = 1;
    /* Android */
    PLATFORM_ANDROID = 2;
    /* Desktop web */
    PLATFORM_WEB = 3;
    /* Mobile web */
    PLATFORM_MOBILE_WEB = 4;
}

/* Image asset for filter */
message ImageAsset {
    /* url of icon image */
    string image_url = 1;
}

/* Image asset by platform */
message ImageAssetByPlatform {
    /* platform */
    Platform platform = 1;
    /* image asset */
    ImageAsset image_asset = 2;
}

/* Represent the filter type and metadata */
message FilterTypeMetadata {
    /* filter type: Rx, NV and special case */
    FilterType type = 1;
    /* metadata per filter type */
    oneof value {
        /* Restaurant filter data */
        RxFilterData rx_filter_data = 2;
        /* New Vertical filter data */
        NVFilterData nv_filter_data = 3;
        /* landing filter data */
        LandingFilterData landing_filter_data = 4;
    } 
}

/* Filter type */
enum FilterType {
    /* unspecified */
    FILTER_TYPE_UNSPECIFIED = 0;
    /* Restaurant cuisines filter */
    FILTER_TYPE_RX = 1;
    /* New vertical subcategory filter */
    FILTER_TYPE_NV = 2;
    /* Landing page special use case */
    FILTER_TYPE_LANDING = 3;
}

/* Data for restaurant based filter */
message RxFilterData {
    /* search term override filter name */
    google.protobuf.StringValue search_term_override = 1;

}

/* Data for new vertical based filter */
message NVFilterData {
    /* search term override filter name */
    google.protobuf.StringValue search_term_override = 1;
    /* For homepage only, restrict search store verticals */
    repeated string vertical_ids = 2;
}

/* Data for special case filter */
message LandingFilterData {
    /* For special use case such as Trending and Acclaimed, 
    use string here but define Enum in the biz logic */
    string subtype = 1;
}