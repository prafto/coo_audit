syntax = "proto3";

package discovery_content_service.v1;

option java_multiple_files = true;
option java_generic_services = true;
option java_package = "com.doordash.rpc.discovery_content_service";

import "common/service_client_config.proto";
import "discovery_content_service/content.proto";
import "discovery_content_service/item.proto";
import "discovery_content_service/surface.proto";
import "discovery_content_service/target.proto";
import "discovery_content_service/surface_group.proto";
import "google/protobuf/timestamp.proto";
import "discovery_content_service/filter.proto";
import "google/protobuf/wrappers.proto";

// RPC calls for DiscoveryContentService. Read path only.
service DiscoveryContentService {

  // Timeout after 1000 milliseconds.
  option (service_client.client_config).response_attempt_timeout_millis = 1000;
  // Make a total 4 attempts (initial + two retries).
  option (service_client.client_config).retry_config.max_attempts = 2;
  // Add RESOURCE_EXHAUSTED to the set of retriable codes.
  option (service_client.client_config).retry_config.do_retry_grpc_code = 8;
  // Break the circuit if the error rate exceeds 80%.
  option (service_client.client_config).circuit_breaker_config.failure_rate_threshold = 0.8;
  // Ignore NOT_FOUND from circuit breaker error rate calculation.
  option (service_client.client_config).circuit_breaker_config.do_ignore_grpc_code = 5;

  // Read for get content metadata.
  rpc GetContentMetadata(GetContentMetadataRequest) returns (GetContentMetadataResponse){
    option (service_client.client_method_config).response_attempt_timeout_millis = 500;
  }

  // Upsert content metadata
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc UpsertContent(UpsertContentRequest) returns (UpsertContentResponse);

  // Upsert target
  rpc UpsertTarget(UpsertTargetRequest) returns (UpsertTargetResponse);

  // Upsert surface group
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc UpsertSurfaceGroup(UpsertSurfaceGroupRequest) returns (UpsertSurfaceGroupResponse);

  // Upsert surface
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc UpsertSurface(UpsertSurfaceRequest) returns (UpsertSurfaceResponse);

  // Delete content metadata
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc DeleteContent(DeleteContentRequest) returns (DeleteContentResponse);

  // Delete nv collection target
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc DeleteCollectionTarget(DeleteCollectionTargetRequest) returns (DeleteCollectionTargetResponse);

  // Delete target
  rpc DeleteTarget(DeleteTargetRequest) returns (DeleteTargetResponse);

  // Delete surface group
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc DeleteSurfaceGroup(DeleteSurfaceGroupRequest) returns (DeleteSurfaceGroupResponse);

  // Delete surface
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc DeleteSurface(DeleteSurfaceRequest) returns (DeleteSurfaceResponse);

  // Get surface
  rpc GetSurface(GetSurfaceRequest) returns (GetSurfaceResponse);

  // Upsert content item
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc UpsertItem(UpsertItemRequest) returns (UpsertItemResponse);

  // Delete msid item request
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc DeleteMsidItem(DeleteMsidItemRequest) returns (DeleteMsidItemResponse);

  // Get content items that are active.
  rpc GetMsidItems(GetMsidItemsRequest) returns (GetMsidItemsResponse);
}

/* Request for eligible content metadata. */
message GetContentMetadataRequest {
  /* For pagination, not being used yet as all values will currently be returned. */
  int32 page_size = 1;

  /* A page token, received from previous GetContentMetadataResponse.
  When paginating, all other parameters provided must match the initial call. */
  string page_token = 2;

  /* nullable for guest */
  google.protobuf.StringValue consumer_id = 3;

  /* if looking for only metadata of specific external id, e.g. NV Collection ID */
  google.protobuf.StringValue external_id = 4;

  /* Type associated with external id, e.g. NV Collection Type */
  ExternalType external_type = 5;

  /* if looking for specific content metadata*/
  google.protobuf.StringValue content_id = 6;

  /* different types of targets to look for content metadata within */
  repeated TargetRequest targets = 7;

  /* Consumer timezone e.g. US/Pacific see full list here https://en.wikipedia.org/wiki/List_of_tz_database_time_zones */
  google.protobuf.StringValue consumer_timezone = 8;

  /* surface infos needed to get the content metadata */
  SurfaceRequest surface_request = 9;

  /* different types of surface groups to look for content metadata within */
  repeated SurfaceGroupRequest surface_groups = 10;

  /* temp nullable bool value bypass filters */
  google.protobuf.BoolValue bypass_filters = 11;
}

/* Response to get eligible content metadata. */
message GetContentMetadataResponse {
  /* list of eligible content metadata */
  repeated Content content = 1;

  // A token that can be sent as `page_token` to retrieve the next page.
  // If this field is omitted, there are no subsequent pages.
  string next_page_token = 2;
}

/* Target params used to fetch eligible content metadata */
message TargetRequest {
  /* non-null target id associated with target type. */
  string target_id = 3;
  /* target type */
  TargetType target_type = 5;
}

/* Surface group params used to fetch eligible content metadata */
message SurfaceGroupRequest {
  /* non-null surface group id associated with surface group type. */
  string surface_group_id = 1;
  /* surface group type */
  SurfaceGroupType surface_group_type = 2;
}

/* Surface params used to fetch eligible content metadata */
message SurfaceRequest {
  /* geo id */
  string geo_id = 1;
  /* geo type */
  GeoType geo_type = 2;
  /* surface type */
  SurfaceType surface_type = 3;
}

/* Surface params used to fetch correspond surface */
message GetSurfaceRequest {
  /* geo id */
  string geo_id = 1;
  /* geo type */
  GeoType geo_type = 2;
  /* surface type */
  SurfaceType surface_type = 3;
}

/* Surface response */
message GetSurfaceResponse {
  /* surface that returned */
  Surface surface = 1;
}

// Request to upsert content metadata.
// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
message UpsertContentRequest{
  /* Content to be upserted. */
  Content content = 1;
}

// empty response
// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
message UpsertContentResponse {
  /* Content upserted. */
  Content content = 1;
}

// Request to upsert target.
// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
message UpsertTargetRequest{
  /* Target to add */
  Target target = 1;
  /* nullable content. */
  google.protobuf.StringValue content_id = 2;
  /* nullable external id, e.g. nv collection id */
  google.protobuf.StringValue external_id = 3;
  /* external type associated, like NV Collection. */
  ExternalType external_type = 4;
  /* surface uuid only apply to discovery targets, not nv targets */
  google.protobuf.StringValue surface_uuid = 5;
}

// response
// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
message UpsertTargetResponse {
  /* Target upserted. */
  Target target = 1;
}

// Request to upsert surface group.
// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
message UpsertSurfaceGroupRequest{
  /* SurfaceGroup to add */
  SurfaceGroup surface_group = 1;
  /* nullable content. */
  google.protobuf.StringValue content_id = 2;
  /* nullable external id, e.g. nv collection id */
  google.protobuf.StringValue external_id = 3;
  /* external type associated, like NV Collection. */
  ExternalType external_type = 4;
  /* surface uuid only apply to discovery targets, not nv targets */
  google.protobuf.StringValue surface_uuid = 5;
}

// response
// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
message UpsertSurfaceGroupResponse {
  /* SurfaceGroup upserted. */
  SurfaceGroup surface_group = 1;
}

// Request to delete content metadata.
// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
message DeleteContentRequest{
  /* nullable id of content metadata to delete */
  google.protobuf.StringValue content_id = 1;
  /* nullable external id, e.g. nv collection id */
  google.protobuf.StringValue external_id = 2;
  /* external type associated, like NV Collection. */
  ExternalType external_type = 3;
}

// empty response
// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
message DeleteContentResponse { }

/* Request to delete nv target. */
message DeleteCollectionTargetRequest{
  /* nullable id of target to delete */
  google.protobuf.StringValue target_id = 1;
  /* nullable target type */
  TargetType target_type = 2;
  /* NV Collection id. */
  google.protobuf.StringValue collection_id = 3;
}

/* empty response */
message DeleteCollectionTargetResponse { }

// Surface params used to fetch eligible content metadata
// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
message UpsertSurfaceRequest {
  /* uuid */
  google.protobuf.StringValue uuid = 1;
  /* geo id */
  google.protobuf.StringValue geo_id = 2;
  /* geo type */
  GeoType geo_type = 3;
  /* surface type */
  SurfaceType surface_type = 4;
}

// Surface upsert response
// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
message UpsertSurfaceResponse {
  /* surface returned */
  Surface surface = 1;
}

// Surface deletion request
// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
message DeleteSurfaceRequest {
  /* surface uuid */
  google.protobuf.StringValue surface_uuid = 1;
}

// surface deletion empty response
// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
message DeleteSurfaceResponse { }

/* Request to delete discovery target. */
message DeleteTargetRequest{
  /* nullable id of target to delete */
  google.protobuf.StringValue target_id = 1;
  /* nullable target type */
  TargetType target_type = 2;
  /* surface uuid, only applicable for discovery targets, not nv targets*/
  google.protobuf.StringValue surface_uuid = 3;
  /* content id, only applicable for discovery targets, not nv targets*/
  google.protobuf.StringValue content_id = 4;
}

/* discovery target delete empty response */
message DeleteTargetResponse { }

// Request to delete surface group.
// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
message DeleteSurfaceGroupRequest{
  /* nullable id of surface group to delete */
  google.protobuf.StringValue surface_group_id = 1;
  /* nullable surface group type */
  SurfaceGroupType surface_group_type = 2;
  /* surface uuid, only applicable for discovery targets, not nv targets*/
  google.protobuf.StringValue surface_uuid = 3;
  /* content id, only applicable for discovery targets, not nv targets*/
  google.protobuf.StringValue content_id = 4;
  /* nullable external id, e.g. nv collection id */
  google.protobuf.StringValue external_id = 5;
  /* external type associated, like NV Collection. */
  ExternalType external_type = 6;
}

// surface group delete empty response
// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
message DeleteSurfaceGroupResponse { }


// Request to upsert items to be members of a content.
// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
message UpsertItemRequest{
  /* item */
  Item item = 1;
}

// Response of what items were upserted as members of a content.
// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
message UpsertItemResponse {
  /* item */
  Item item = 1;
}

// Item deletion request
// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
message DeleteMsidItemRequest {
  /* msid. */
  string msid = 1;
  /* business id. */
  string business_id = 2;
  /* content id. */
  string content_id = 3;
}

// msid item deletion empty response
// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
message DeleteMsidItemResponse { }

/* Request to get msid members of a content. */
message GetMsidItemsRequest {
  /* content id. */
  string content_id = 1;
  /* business id. */
  string business_id = 2;
}

/* Response with all msid items that are members of a content. */
message GetMsidItemsResponse {
  /* list of items. */
  repeated MsidItem msid_items = 1;
}
