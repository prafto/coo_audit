syntax = "proto3";

package discovery_content_service.v1;

import "common/service_client_config.proto";
import "discovery_content_service/filter.proto";
import "discovery_content_service/surface.proto";
import "google/protobuf/wrappers.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.discovery_content_service";

// RPC calls for FilterService.
service FilterService {
  // Timeout after 1000 milliseconds.
  option (service_client.client_config).response_attempt_timeout_millis = 1000;
  // Make a total 4 attempts (initial + two retries).
  option (service_client.client_config).retry_config.max_attempts = 2;
  // Add RESOURCE_EXHAUSTED to the set of retriable codes.
  option (service_client.client_config).retry_config.do_retry_grpc_code = 8;
  // Break the circuit if the error rate exceeds 80%.
  option (service_client.client_config).circuit_breaker_config.failure_rate_threshold = 0.8;
  // Ignore NOT_FOUND from circuit breaker error rate calculation.
  option (service_client.client_config).circuit_breaker_config.do_ignore_grpc_code = 5;

  // Upsert filter
  rpc UpsertFilter(UpsertFilterRequest) returns (UpsertFilterResponse);

  // Delete filter
  rpc DeleteFilter(DeleteFilterRequest) returns (DeleteFilterResponse);

  // Get filter by id
  rpc GetFilterById(GetFilterByIdRequest) returns (GetFilterByIdResponse);

  // Get filter metadata by surface
  rpc GetActiveFiltersMetadataForSurface(GetActiveFiltersMetadataForSurfaceRequest) returns (GetActiveFiltersMetadataForSurfaceResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 500;
  }

  // Get filter metadata by a batch of ids, will be deprecated once GetActiveFiltersMetadataByIdBatchV2 implementation done
  rpc GetActiveFiltersMetadataByIdBatch(GetActiveFiltersMetadataByIdBatchRequest) returns (GetActiveFiltersMetadataByIdBatchResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 500;
  }

  // Get filter metadata by a batch of ids v2
  rpc GetActiveFiltersMetadataByIdBatchV2(GetActiveFiltersMetadataByIdBatchV2Request) returns (GetActiveFiltersMetadataByIdBatchV2Response) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 500;
  }
}

/* Request to upsert filter */
message UpsertFilterRequest {
  /* filter */
  Filter filter = 1;
}

/* Response with the filter */
message UpsertFilterResponse {
  /* filter */
  Filter filter = 1;
}

/* Request to delete filter */
message DeleteFilterRequest {
  /* filter id */
  string id = 1;
}

/* empty response for delete filter*/
message DeleteFilterResponse {}

/* Request to get filter by id */
message GetFilterByIdRequest {
  /* filter id */
  string id = 1;
}

/* Response with the filter */
message GetFilterByIdResponse {
  /* filter */
  Filter filter = 1;
}

/* Request to get filter metadata for given surface */
message GetActiveFiltersMetadataForSurfaceRequest {
  /* consumer id */
  google.protobuf.StringValue consumer_id = 1;
  /* submarket id */
  int32 submarket_id = 2;
  /* surface type */
  SurfaceType surface_type = 3;
}

/* Response with the filter metadata for given surface */
message GetActiveFiltersMetadataForSurfaceResponse {
  /* contains necessary information of a filter */
  repeated LiteFilter lite_filter = 1;
}

/* Request to get filter metadata for given ids */
message GetActiveFiltersMetadataByIdBatchRequest {
  /* filter id */
  repeated string id = 1;
}

/* Response with the filters metadata for given ids */
message GetActiveFiltersMetadataByIdBatchResponse {
  /* contains necessary information of a filter */
  repeated LiteFilter lite_filter = 1;
}

/* Request to get filter metadata for given ids */
message GetActiveFiltersMetadataByIdBatchV2Request {
  /* a list of filter ids */
  repeated string id = 1;
  /* consumer id */
  google.protobuf.StringValue consumer_id = 2;
  /* submarket id */
  int32 submarket_id = 3;
  /* surface type */
  SurfaceType surface_type = 4;
}

/* Response with the filters metadata for given ids */
message GetActiveFiltersMetadataByIdBatchV2Response {
  /* contains necessary information of a filter */
  repeated LiteFilter lite_filter = 1;
}
