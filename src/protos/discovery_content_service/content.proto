syntax = "proto3";

package discovery_content_service.v1;

option java_multiple_files = true;
option java_generic_services = true;
option java_package = "com.doordash.rpc.discovery_content_service";

import "common/common.proto";
import "promotion/criterion.proto";
import "promotion/limitation.proto";
import "discovery_content_service/target.proto";
import "discovery_content_service/surface_group.proto";
import "google/protobuf/struct.proto";
import "discovery_content_service/dynamic_properties.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

/* Represent the metadata of the content. */
message Content {
  /* non-null content id */
  string id = 1;
  /* if content is currently active */
  google.protobuf.BoolValue is_active = 2;
  /* ties to legacy systems */
  google.protobuf.StringValue external_id = 3;
  /* external type */
  ExternalType external_type = 4;
  /* type of content */
  ContentType content_type = 5;
  /* type of layout */
  LayoutType layout_type = 6;

  /* content title */
  google.protobuf.StringValue title = 7;
  /* content description */
  google.protobuf.StringValue description = 8;

  // Targets and Limitations and Audiencing
  /* list of targets that content is eligible. */
  repeated Target targets = 9;
  /* limitation for the content */
  repeated promotion_service.Limitation limitations = 10;
  /* user criterion for the content */
  repeated promotion_service.UserCriterion user_criteria = 11;


  /* experiment around content */
  ContentExperiment experiment = 12;

  /* Experiment associated with this content metadata. */
  message ContentExperiment {
    /* experiment name */
    google.protobuf.StringValue experiment_name = 1;
    /* experiment buckets this content is eligible for within experiment_name */
    repeated google.protobuf.StringValue visible_to_buckets = 2;
  }

  // Auditing
  /* user who created */
  common.Creator created_by = 13;
  /* when created */
  google.protobuf.Timestamp created_at = 14;
  /* user who updated */
  common.Creator updated_by = 15;
  /* when updated */
  google.protobuf.Timestamp updated_at = 16;
  // UI Specifications
  /* optional dark mode specification */
  google.protobuf.BoolValue use_light_content = 17;  // Text light/dark on tile
  /* optional content header image url */
  google.protobuf.StringValue header_image_url = 18;
  /* optional header background color */
  google.protobuf.StringValue header_bg_color = 19;
  /* optional struct for content-specific values */
  google.protobuf.Struct struct = 20 [deprecated=true]; // deprecated, have dynamic properties to take care of content-specific values
  /* optional DynamicProperties for carousels*/
  DynamicProperties dynamic_properties= 21;
  /* list of surface group that content is eligible */
  repeated SurfaceGroup surface_group = 22;

  // Type of members
  ContentMembershipEntityType content_membership_entity_type = 23;
  // Details of where the membership data is stored
  ExternalMembershipDataStorage external_membership_data_storage = 24;

  // used for offers hub personalized carousels for horizontal ranking
  google.protobuf.StringValue predictor = 25;
}

// Used as response to feed
message LiteContent {
  //content id
  google.protobuf.StringValue id = 1;
  //content title
  google.protobuf.StringValue title = 2;
  //content description
  google.protobuf.StringValue description = 3;

  /* list of surface group that content is eligible */
  repeated SurfaceGroup surface_group = 4;

  // used for offers hub personalized carousels for horizontal ranking
  google.protobuf.StringValue predictor = 5;

  // layout_type refers to the type of layout the carousel should be rendered with.
  // See the LayoutType enum for more information.
  LayoutType layout_type = 6;

  // External Content ID for retrieving external content, ex Listicles
  google.protobuf.StringValue external_content_id = 7;

  /* optional DynamicProperties for carousels*/
  DynamicProperties dynamic_properties= 8;
}

/* How content is represented */
enum ContentType {
  /* undefined content */
  CONTENT_TYPE_UNSPECIFIED = 0;
  /* list of items */
  CONTENT_TYPE_ITEM_LIST = 1;
  /* list of stores */
  CONTENT_TYPE_STORE_LIST = 2;
}

/* Info for how to layout content. */
enum LayoutType {
  /* no layout defined */
  LAYOUT_TYPE_UNSPECIFIED = 0;
  /* default list content */
  LAYOUT_TYPE_LIST = 1;
  /* logo style content */
  LAYOUT_TYPE_LOGOS = 2;
  /* map style content */
  LAYOUT_TYPE_MAP = 3;
}

enum ContentMembershipEntityType {
  /* unknown type */
  CONTENT_MEMBERSHIP_ENTITY_TYPE_UNKNOWN = 0;
  /* csv schema: business_id, sort_order */
  CONTENT_MEMBERSHIP_ENTITY_TYPE_BUSINESS = 1;
  /* csv schema: store_id, sort_order */
  CONTENT_MEMBERSHIP_ENTITY_TYPE_STORE = 2;
  /* csv schema: item_id, store_id, sort_order */
  CONTENT_MEMBERSHIP_ENTITY_TYPE_MENU_ITEM = 3;
  /* csv schema: item_id, store_id, sort_order,sku_item_id */
  CONTENT_MEMBERSHIP_ENTITY_TYPE_SKU_ITEM = 4;
}

// Details of where membership data such as store_id, sort_order, etc are stored
message ExternalMembershipDataStorage {
  // Type of storage
  ExternalStorageType type = 1;
  // The value for storage. for ex: snowflake would be table name, s3 would be s3 url
  google.protobuf.StringValue value = 2;
}

// Type of external storage for memberships data
enum ExternalStorageType {
  // Not defined
  EXTERNAL_STORAGE_TYPE_UNDEFINED = 0;
  // Store in S3
  EXTERNAL_STORAGE_TYPE_S3 = 1;
  // Store in snowflake
  EXTERNAL_STORAGE_TYPE_SNOWFLAKE = 2;
}

