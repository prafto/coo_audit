syntax = "proto3";

package graph_runner.v1;

import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option go_package = "github.com/doordash/services-protobuf/generated/graph_runner";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.graph_runner";

// Graph runner service
service GraphRunnerService {
  // To retrieve a list of graph execution summaries
  rpc GetGraphExecutionSummaries(GetGraphExecutionSummariesRequest) returns (GetGraphExecutionSummariesResponse) {}
  // To retrieve a list of graph execution details given execution id
  rpc GetGraphExecutionById(GetGraphExecutionByIdRequest) returns (GetGraphExecutionByIdResponse) {}
  // To retrieve a list of node names given execution id
  rpc GetNodeNamesById(GetNodeNamesByIdRequest) returns (GetNodeNamesByIdResponse) {}
  // To retrieve a graph visualization given Graph Name
  rpc GetGraphVizById(GetGraphVizByIdRequest) returns (GetGraphVizByIdResponse) {}

  // To retrieve an Execution Id given Order Id (not implemented)
  rpc GetExecIdByOrderId(GetExecIdByOrderIdRequest) returns (GetExecIdByOrderIdResponse) {}
  // To retrieve a graph visualization given Graph Name (not implemented)
  rpc GetGraphVizByGraphName(GetGraphVizByGraphNameRequest) returns (GetGraphVizByGraphNameResponse) {}
}

// The request to retrieve a list of graph execution summaries
message GetGraphExecutionSummariesRequest {
  // The limit field is the same as SQL LIMIT keyword semantically.
  google.protobuf.Int32Value limit = 1;
  // If specified, only summaries with that graph are returned.
  google.protobuf.StringValue graph_name = 2;
}

// The response message containing a list of graph execution summaries
message GetGraphExecutionSummariesResponse {
  // Graph execution summary
  message GraphExecutionSummary {
    // node count for a specific graph execution
    google.protobuf.Int32Value node_count = 1 [deprecated = true];
    // graph name
    google.protobuf.StringValue graph_name = 2 [deprecated = true];
    // execution id
    google.protobuf.StringValue execution_id = 3;
    // created timestamp
    google.protobuf.Timestamp created_time = 4;
    // execution duration
    google.protobuf.StringValue execution_duration = 5;
  }
  // List of graph execution summaries in the reverse chronological order
  repeated GraphExecutionSummary graph_execution_summaries = 1;

  // graph name
  google.protobuf.StringValue graph_name = 2;
}

// The request to retrieve details of a graph execution based on the provided execution id and node name
// If a node name is specified, it returns the execution context for that node; otherwise, it returns
// the execution context for the node 'Final Context'
message GetGraphExecutionByIdRequest {
  // execution id
  google.protobuf.StringValue execution_id = 1;
  // node name
  google.protobuf.StringValue node_name = 2;
}

// The response message containing a list of execution details
message GetGraphExecutionByIdResponse {
  // Graph execution node detail
  message GraphExecutionDetail {
    // node name
    google.protobuf.StringValue node_name = 1;
    // graph name
    google.protobuf.StringValue graph_name = 2 [deprecated = true];
    // Deprecated: Use input_context_struct instead.
    google.protobuf.StringValue input_context = 3 [deprecated = true];
    // input context Struct
    google.protobuf.Struct input_context_struct = 6;
    // output context json string
    google.protobuf.StringValue output_context = 4;
    // created timestamp
    google.protobuf.Timestamp created_time = 5;
  }
  // graph name
  google.protobuf.StringValue graph_name = 7;
  // List of graph execution details in the reverse chronological order
  repeated GraphExecutionDetail graph_execution_details = 1;
}

// The request to retrieve the nodes of a graph execution based on the provided execution id
message GetNodeNamesByIdRequest {
  // execution id
  google.protobuf.StringValue execution_id = 1;
}

// The response message contain a list of nodenames
message GetNodeNamesByIdResponse {
  // node names
  repeated google.protobuf.StringValue node_names = 1;
}

// The request to retrieve the graph visualization based on the provided graph name
message GetGraphVizByIdRequest {
  // execution id, used to get the graph the execution belongs to
  google.protobuf.StringValue execution_id = 1;
}

// The response message containing the graph visualization
message GetGraphVizByIdResponse {
  // graph visualization
  google.protobuf.Struct graph_viz = 1;
  google.protobuf.StringValue graph_name = 2;
  google.protobuf.StringValue latest_node_name = 3;
}

// The request to retrieve the execution id based on the provided order id
message GetExecIdByOrderIdRequest {
  // order id
  google.protobuf.StringValue order_id = 1 [deprecated = true];
}

// The response message containing the execution id
message GetExecIdByOrderIdResponse {
  // execution id
  google.protobuf.StringValue execution_id = 1 [deprecated = true];
}

// The request to retrieve the graph visualization based on the provided graph name
message GetGraphVizByGraphNameRequest {
  // graph name
  google.protobuf.StringValue graph_name = 1 [deprecated = true];
}

// The response message containing the graph visualization
message GetGraphVizByGraphNameResponse {
  // graph visualization
  google.protobuf.StringValue graph_viz = 1 [deprecated = true];
}

// Represents an HTTP header.
message HttpHeader {
  // The HTTP header key. It is case insensitive.
  string key = 1;
  // The HTTP header value.
  string value = 2;
}

// Represents an HTTP request.
message HttpRequest {
  enum HttpMethod {
    UNSPECIFIED = 0;
    GET = 1;
    POST = 2;
    PUT = 3;
    DELETE = 4;
    PATCH = 5;
    HEAD = 6;
  }

  message RetrySettings {
    // maximum number of retry attempts
    int32 max_attempts = 1;
    // initial delay between the initial failed attempt and the first retry attempt
    int32 initial_backoff_ms = 2;
    // the upper limit for this increasing delay between retries
    int32 max_backoff_ms = 3;
    // non retryable http status codes
    repeated int32 non_retryable_status_codes = 4;
  }
  // The complete URL for the HTTP request
  string url = 1;
  // http request method
  HttpMethod method = 2;
  // http request body
  bytes body = 3;
  // timeout duration in ms for the request
  int32 timeout_ms = 4;
  // a repeated field containing key-value pairs for http headers
  repeated HttpHeader headers = 5;
  RetrySettings retry_settings = 6;
}

// Represents an HTTP response.
message HttpResponse {
  // e.g. "200 OK"
  string status = 1;
  // e.g. 200
  int32 status_code = 2;
  // Header maps header keys to values. If the response had multiple
  // headers with the same key, they may be concatenated, with comma
  // delimiters.
  repeated HttpHeader headers = 3;
  // response body
  bytes body = 4;
}
