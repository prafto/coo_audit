syntax = "proto3";

package pg.test_service.v1;

import "common/service_client_config.proto";
import "doordash.api/annotations.proto";
import "google/api/annotations.proto";
import "google/protobuf/wrappers.proto";

option go_package = "github.com/doordash/services-protobuf/generated/presentation_gateway";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.pg.test_service";

// Demo gRPCs for presentation gateway, expose to UG
service PgTestService {
  option (service_client.client_config).response_attempt_timeout_millis = 5000;
  option (service_client.client_config).retry_config.max_attempts = 2;

  option (doordash.api.service) = {
    name: "presentation-gateway"
    port: 50051
    name_spaces: "presentation-gateway"
    // will update owner session but to pass UG option validation atm
    owner: {
      id: "presentation-gateway"
      name: "presentation-gateway-platform"
      slack_channel: "#presentation-gateway-platform"
      email_alias: "presentation-gateway@doordash.com"
    }
    target_products: [INTERNAL]
  };

  // Simple test pg grpc to greet
  rpc GreetConsumer(GreetConsumerRequest) returns (GreetConsumerResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 5000;
    option (service_client.client_method_config).retry_config.max_attempts = 3;
    option (google.api.http) = {
      post: "/presentation-gateway/v1/test/greet-consumer"
      body: '*'
    };
    option (doordash.api.endpoint) = {
      hostname: "pg-test-service-v1-pg-test-service-greet-consumer.service.prod.ddsd"
      port: 50051
      tier: T3
      lifecycle: TEST
      authorization: [CX_USER]
      target_products: [INTERNAL]
    };
  }
}

// Request for Greet rpc
message GreetConsumerRequest {
  // id
  google.protobuf.StringValue id = 1;
}

// Response for Greet rpc
message GreetConsumerResponse {
  // greeting
  google.protobuf.StringValue greeting = 1;
}
