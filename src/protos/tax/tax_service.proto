syntax = "proto3";
package doordash.tax.tax_service;

import "common/common.proto";
import "common/money.proto";
import "common/service_client_config.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "tax/transaction.proto";

option go_package = "github.com/doordash/services-protobuf/generated/tax/tax_service";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.tax.tax_service";

service TaxService {
  option (service_client.client_config).response_attempt_timeout_millis = 1000;
  option (service_client.client_config).retry_config.max_attempts = 2;
  option (service_client.client_config).retry_config.do_not_retry_grpc_code = 5;
  option (service_client.client_config).retry_config.do_not_retry_grpc_code = 7;
  option (service_client.client_config).retry_config.do_not_retry_grpc_code = 10;
  option (service_client.client_config).circuit_breaker_config.failure_rate_threshold = 0.5;
  option (service_client.client_config).circuit_breaker_config.minimum_request_threshold = 10;
  option (service_client.client_config).circuit_breaker_config.counter_sliding_window_millis = 10000;
  option (service_client.client_config).circuit_breaker_config.circuit_open_window_millis = 10000;

  rpc IsStoreMarketplaceFacilitator(IsStoreMarketplaceFacilitatorRequest) returns (IsStoreMarketplaceFacilitatorResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 400;
  }
  rpc IsDeliveryFromMarketplaceFacilitator(IsDeliveryFromMarketplaceFacilitatorRequest) returns (IsDeliveryFromMarketplaceFacilitatorResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 400;
  }
  rpc IsStateMarketplaceFacilitator(IsStateMarketplaceFacilitatorRequest) returns (IsStateMarketplaceFacilitatorResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 400;
  }
  rpc GetStoreTaxRate(GetStoreTaxRateRequest) returns (GetStoreTaxRateResponse);
  rpc IngestTaxRate(IngestTaxRateRequest) returns (IngestTaxRateResponse);
  rpc BatchIngestTaxRate(BatchIngestTaxRateRequest) returns (BatchIngestTaxRateResponse);
  rpc IsTaxEditEligible(IsTaxEditEligibleRequest) returns (IsTaxEditEligibleResponse);
  rpc GetItemsTaxRates(GetItemsTaxRatesRequest) returns (GetItemsTaxRatesResponse);
  rpc InsertLineItemTaxCategories(InsertLineItemTaxCategoriesRequest) returns (InsertLineItemTaxCategoriesResponse);
  rpc ChangeStoreTaxRateOverride(ChangeStoreTaxRateOverrideRequest) returns (ChangeStoreTaxRateOverrideResponse);
  rpc CreateTaxStrategySetting(CreateTaxStrategySettingRequest) returns (CreateTaxStrategySettingResponse);
  rpc GetTaxSetting(GetTaxSettingRequest) returns (GetTaxSettingResponse);
  rpc IsStoreLevelTaxRateOverrideEligible(IsStoreLevelTaxRateOverrideEligibleRequest) returns (IsStoreLevelTaxRateOverrideEligibleResponse);
  rpc GetMerchantTaxTransaction(GetMerchantTaxTransactionRequest) returns (GetMerchantTaxTransactionResponse);
  rpc UpsertTaxStrategySetting(UpsertTaxStrategySettingRequest) returns (UpsertTaxStrategySettingResponse);
  rpc IsTaxChargeDisabledAtMerchant(IsTaxChargeDisabledAtMerchantRequest) returns (IsTaxChargeDisabledAtMerchantResponse);
  rpc InsertPromoTaxTreatments(InsertPromoTaxTreatmentsRequest) returns (InsertPromoTaxTreatmentsResponse);
  rpc AddTaxCategorySourceConfiguration(AddTaxCategorySourceConfigurationRequest) returns (AddTaxCategorySourceConfigurationResponse);
  rpc SoftDeleteTaxCategorySourceConfiguration(SoftDeleteTaxCategorySourceConfigurationRequest) returns (SoftDeleteTaxCategorySourceConfigurationResponse);
  rpc UpdateTaxCategoryRuleStatus(UpdateTaxCategoryRuleStatusRequest) returns (UpdateTaxCategoryRuleStatusResponse);
  rpc AddTaxCategoryRuleConfiguration(AddTaxCategoryRuleConfigurationRequest) returns (AddTaxCategoryRuleConfigurationResponse);
  rpc SoftDeleteTaxCategoryRuleConfiguration(SoftDeleteTaxCategoryRuleConfigurationRequest) returns (SoftDeleteTaxCategoryRuleConfigurationResponse);
}

message IsStateMarketplaceFacilitatorRequest {
  string country_code = 1;
  string state = 2;
}

message IsStateMarketplaceFacilitatorResponse {
  bool result = 1;
}

message IsStoreMarketplaceFacilitatorRequest {
  int64 store_id = 1;
}

message IsStoreMarketplaceFacilitatorResponse {
  bool result = 1;
}

message IsDeliveryFromMarketplaceFacilitatorRequest {
  int64 delivery_id = 1;
  google.protobuf.BoolValue check_mpf_state_only = 2;
}

message IsDeliveryFromMarketplaceFacilitatorResponse {
  bool result = 1;
}

message GetStoreTaxRateRequest {
  int64 store_id = 1;
}

message GetStoreTaxRateResponse {
  google.protobuf.StringValue tax_rate = 1;
}

message IsTaxChargeDisabledAtMerchantRequest {
  TaxSettingEntityType entity_type = 1;
  string entity_id = 2;
}

message IsTaxChargeDisabledAtMerchantResponse {
  bool is_tax_charge_disabled_at_merchant = 1;
}

message IngestEntity {
  string entity_id = 1;
  transaction.LineItemType entity_type = 2;
  google.protobuf.StringValue tax_rate = 3;
  google.protobuf.Int32Value taxable_price = 4;
  google.protobuf.StringValue dine_in_tax_rate = 5;
  google.protobuf.FieldMask update_mask = 6;
}

enum RequestSource {
  UNKNOWN_REQUEST_SOURCE = 0;
  STORE_SETTING = 1;
  SELF_SERVICE_MENU_EDITOR = 2;
  BULK_TOOL = 3;
  POS_MENU = 4;
  MERCHANT_DATA_SERVICE = 5;
}

message IngestTaxRateRequest {
  string store_id = 1;
  IngestEntity ingestion_entity = 2;
  // String representation of sql Decimal percentage (java type java.math.BigDecimal)
  google.protobuf.StringValue tax_rate = 3;
}

message IngestTaxRateResponse {
  bool result = 1;
}

message BatchIngestTaxRateRequest {
  string store_id = 1;
  repeated IngestEntity ingestion_entities = 2;
  RequestSource request_source = 3;
}

message BatchIngestTaxRateResponse {
  bool result = 1;
}

message IsTaxEditEligibleRequest {
  string store_id = 1;
}

message TaxDetailIngestEntity {
  string entity_id = 1;
  transaction.LineItemType entity_type = 2;
  google.protobuf.StringValue tax_rate = 3;
  google.protobuf.Int32Value taxable_price = 4;
  google.protobuf.StringValue tax_category = 5;
}

message IsTaxEditEligibleResponse {
  bool is_eligible = 1;
  bool is_mpf = 2;
  bool is_vat = 3;
}

message Item {
  enum ItemType {
    MENU_ITEM = 0;
    MENU_OPTION = 1;
  }

  string item_id = 1;
  ItemType item_type = 2;
}

message GetItemsTaxRatesRequest {
  string store_id = 1;
  repeated Item items = 2;
  RequestSource request_source = 3;
}

message ItemTaxRate {
  enum DataSource {
    TAX_15 = 0;
    HISTORY = 1;
    QUOTE = 2;
  }
  Item item = 1;
  google.protobuf.StringValue tax_rate = 2;
  google.protobuf.Int32Value taxable_price = 3;
  google.protobuf.StringValue store_id = 4;
  google.protobuf.StringValue dine_in_tax_rate = 5;
  DataSource data_source = 6;
}

message GetItemsTaxRatesResponse {
  repeated ItemTaxRate item_tax_rates = 1;
}

message InsertLineItemTaxCategoriesRequest {
  message LineItemTaxCategory {
    string line_item_reference_id = 1;
    string tax_category_short_code = 2;
    transaction.LineItemType line_item_type = 3;
    google.protobuf.Timestamp start_time = 4;
    google.protobuf.Timestamp end_time = 5;
    google.protobuf.StringValue store_id = 6;
  }

  repeated LineItemTaxCategory line_item_tax_categories = 1;
}

message InsertLineItemTaxCategoriesResponse {}

message ChangeStoreTaxRateOverrideRequest {
  string store_id = 1;
  google.protobuf.FloatValue tax_rate_override = 2;
  RequestSource request_source = 3;
}

message ChangeStoreTaxRateOverrideResponse {}

enum TaxSettingEntityType {
  UNKNOWN_ENTITY_TYPE = 0;
  STORE = 1;
  BUSINESS = 2;
}

message CreateTaxStrategySettingRequest {
  TaxSettingEntityType entity_type = 1;
  string entity_id = 2;
  money.TaxStrategy tax_strategy = 3;
}

message CreateTaxStrategySettingResponse {
  bool result = 1;
}

message GetTaxSettingRequest {
  TaxSettingEntityType entity_type = 1;
  string entity_id = 2;
}

message GetTaxSettingResponse {
  TaxSettingEntityType entity_type = 1;
  string entity_id = 2;
  money.TaxStrategy tax_strategy = 3;
}

message IsStoreLevelTaxRateOverrideEligibleRequest {
  int64 store_id = 1;
}

message IsStoreLevelTaxRateOverrideEligibleResponse {
  bool is_eligible = 1;
}

message TaxDataEvent {
  TaxDataEventType event_type = 1;
  // TaxTransaction will be used if event_type is TAX_TRANSACTION
  // BatchIngestTaxRateRequest if event type is ITEM_TAX_RATE
  // PayoutBreakDownTaxes or StorePaymentTaxes will be used if event_type is MX_FEE_TAX
  // delivery_id will be used if event_type is VOID_MX_FEE_TAX
  // TaxBreakdownSummaryRecord will be used if event_type is TAX_BREAKDOWN_SUMMARY
  // TaxBreakdownDetailRecord will be used if event_type is TAX_BREAKDOWN_DETAIL
  // MerchantTaxTransaction will be used if event_type is MERCHANT_TAX_TRANSACTION
  // ReplayOrderTransaction will be used if event_type is REPLAY_ORDER_TRANSACTION
  // TaxBreakdownTemp will be used if event_type is TAX_BREAKDOWN_TEMP
  oneof event_payload {
    TaxTransaction tax_transaction = 2;
    BatchIngestTaxRateRequest batch_ingest_tax_rate_request = 3;
    VertexReqResp vertex_req_resp = 4;
    PayoutBreakDownTaxes payout_breakdown_taxes = 5;
    StorePaymentTaxes store_payment_taxes = 6;
    int64 delivery_id = 7;
    TaxBreakdownSummaryRecord tax_breakdown_summary_record = 8;
    TaxBreakdownDetailRecord tax_breakdown_detail_record = 9;
    ShadowRequestResponse shadow_request_response = 10;
    MerchantTaxTransaction merchant_tax_transaction = 11;
    ReplayOrderTransaction replay_order_transaction = 12;
    TaxBreakdownTemp tax_breakdown_temp = 13;
  }
}

message MenuIngestionTaxDetailEvent {
  string store_id = 1;
  repeated TaxDetailIngestEntity ingestion_entities = 2;
  RequestSource request_source = 3;
}

message TaxBreakdownSummaryRecord {
  transaction.TaxBreakdownRecordSource record_source = 1;
  string tax_breakdown_id = 2;
  transaction.Reference reference = 3;
  common.Channel channel = 4;
  transaction.LineItemType fee_type = 5;
  google.protobuf.Int32Value store_id = 6;
  money.MonetaryFields tax_amount = 7;
  string tax_transaction_id = 8;
  bool is_from_inhouse_calculation = 9;
}

message TaxBreakdownDetailRecord {
  transaction.TaxBreakdownRecordSource record_source = 1;
  transaction.TaxBreakdownDetail tax_breakdown_detail = 2;
}

enum TaxDataEventType {
  UNKNOWN = 0;
  ITEM_TAX_RATE = 1;
  TAX_TRANSACTION = 2;
  VERTEX_REQ_RESP = 3;
  MX_FEE_TAX = 4;
  VOID_MX_FEE_TAX = 5;
  TAX_BREAKDOWN_SUMMARY = 6;
  TAX_BREAKDOWN_DETAIL = 7;
  SHADOW_REQUEST_RESPONSE = 8;
  MERCHANT_TAX_TRANSACTION = 9;
  REPLAY_ORDER_TRANSACTION = 10;
  TAX_BREAKDOWN_TEMP = 11;
}

message PayoutBreakDownTaxes {
  repeated PayoutBreakdownTax payout_breakdown_tax = 1;
}

message StorePaymentTaxes {
  repeated StorePaymentTax store_payment_tax = 1;
}

message PayoutBreakdownTax {
  string reference_type = 1;
  string reference_id = 2;
  string source_type = 3;
  string source_id = 4;
  string entry_type = 5;
  int64 amount_in_minor_units = 6;
  int64 delivery_id = 7;
}

message StorePaymentTax {
  string reference_type = 1;
  string reference_id = 2;
  string source_type = 3;
  string source_id = 4;
  int64 amount_in_minor_units = 6;
  string reason_name = 7;
  int64 store_id = 8;
}

// This is equivalent to the TaxTransaction data class
// https://github.com/doordash/merchant-financial-service/blob/master/tax/src/main/kotlin/com/doordash/tax/models/TaxTransaction.kt
message TaxTransaction {
  string id = 1;
  string store_id = 2;
  ProcessType process_type = 3;
  string reference_type = 4;
  string reference_id = 5;
  TaxTransactionStatus status = 6;
  TaxTransactionRequestType request_type = 7;
  string request_body = 8;
  google.protobuf.StringValue response_body = 9;
  google.protobuf.Timestamp created_at = 10;
  google.protobuf.Timestamp updated_at = 11;
  bool enabled = 12;
  google.protobuf.StringValue merchant_tax_transaction_uuid = 13;
  google.protobuf.StringValue cache_key = 14;
}

enum TaxTransactionStatus {
  PENDING = 0;
  PROCESSING = 1;
  PROCESSED = 2;
  FAILED = 3;
}

enum TaxTransactionRequestType {
  QUOTE = 0;
  FINALIZE = 1;
  REFUND = 2;
  ADJUSTMENT = 3;
}

enum ProcessType {
  DEFAULT = 0;
  CHECKOUT = 1;
  ADJUST = 2;
  PROCESS_TYPE_REFUND = 3;
}

message VertexReqResp {
  string reference_id = 1;
  string reference_type = 2;
  string vertex_request = 3;
  google.protobuf.StringValue vertex_response = 4;
}

message ShadowRequestResponse {
  string reference_id = 1;
  string reference_type = 2;
  string event_type = 3;
  string request_text = 4;
  string response_text = 5;
}

message GetMerchantTaxTransactionResponse {
  repeated MerchantTaxTransaction merchant_tax_transactions = 1;
}

message GetMerchantTaxTransactionRequest {
  string store_id = 1;
  string store_order_cart_id = 2;
}

message MerchantTaxTransaction {
  string id = 1;
  string uuid = 2;
  string store_id = 3;
  string reference_id = 4;
  string store_order_cart_id = 5;
  string request_subtotal_amount = 6;
  string request_status = 7;
  string subtotal_tax_amount_status = 8;
  string subtotal_tax_amount = 9;
  google.protobuf.Timestamp created_at = 10;
  google.protobuf.Timestamp updated_at = 11;
}

message ReplayOrderTransaction {
  string request_text = 1;
  string response_text = 2;
  string reference_id = 3;
  string reference_type = 4;
  string store_id = 5;
  string sandbox_name = 6;
  string sandbox_version = 7;
  string original_id = 8;
}

message TaxBreakdownTemp {
  string tax_transaction_id = 1;
  string cart_uuid = 2;
  string order_tax_breakdown_info = 3;
  string tax_remittance_info = 4;
  string metadata = 5;
}

enum TaxFlow {
  UNSPECIFIED = 0;
  TAX_15 = 1;
}

message UpsertTaxStrategySettingRequest {
  // request type
  enum RequestType {
    UNSPECIFIED = 0;
    CREATE = 1;
    DELETE = 2;
  }
  // request field
  enum RequestField {
    UNKNOWN = 0;
    TAX_FLOW = 1;
    TAX_STRATEGY = 2;
  }

  // entity type
  TaxSettingEntityType entity_type = 1;
  // entity id
  string entity_id = 2;
  money.TaxStrategy tax_strategy = 3;
  TaxFlow tax_flow = 4;
  // request type
  RequestType request_type = 5;
  // fields requested to change/update
  repeated RequestField request_field = 6;
}

message UpsertTaxStrategySettingResponse {
  // is successfully processed
  bool success = 1;
}

enum PromoDiscountCategory {
  ITEM_CATEGORY = 0;
  FEE_CATEGORY = 1;
}

enum PromoChannel {
  ANY_CHANNEL = 0;
  MARKETPLACE = 1;
  DEMAND_GEN = 2;
  SHIP_ANYWHERE = 3;
}

enum PromoBusinessLine {
  ANY_BUSINESS_LINE = 0;
  RESTAURANT = 1;
  GROCERY = 2;
  DASH_MART = 3;
}

enum PromoTaxStrategy {
  ANY_TAX_STRATEGY = 0;
  FACILITATOR = 1;
  NON_FACILITATOR = 2;
  RETAILER = 3;
}

enum PromoTaxTreatment {
  PRE_DISCOUNT = 0;
  POST_DISCOUNT = 1;
}

message InsertPromoTaxTreatmentsRequest {
  google.protobuf.StringValue state = 1;
  string country = 2;
  PromoDiscountCategory discount_category = 3;
  PromoChannel channel = 4;
  PromoBusinessLine business_line = 5;
  PromoTaxStrategy tax_strategy = 6;
  money.Entity.EntityType funding_source = 7;
  PromoTaxTreatment tax_treatment = 8;
  google.protobuf.Timestamp start_time = 9;
  google.protobuf.Timestamp end_time = 10;
}

message InsertPromoTaxTreatmentsResponse {
  bool success = 1;
}

// This is the definition for the kafka message containing the range of tax category rate updates to apply.
message TaxCategoryRateUpdates {
  int64 start_id = 1;
  int64 end_id = 2;
}

message TaxAreaIdUpdateEvent {
  int64 tax_area_id = 1;
}

message TaxCategorySourceConfiguration {
  string entity_type = 1;
  string entity_id = 2;
  string channel = 3;
  string business_line = 4;
  string country = 5;
  string state = 6;
  transaction.LineItemType line_item_type = 7;
  repeated string category_sources = 8;
  google.protobuf.Timestamp start_time = 9;
  google.protobuf.Timestamp end_time = 10;
}

message TaxCategoryRuleConfiguration {
  string entity_type = 1;
  string entity_id = 2;
  string channel = 3;
  string business_line = 4;
  string country = 5;
  string state = 6;
  string category_source = 7;
  string context_level = 8;
  string rule_type = 9;
  string rule_context = 10;
  string base_category = 11;
  string rule_category = 12;
  string parent = 13;
  string rule_status = 14;
  google.protobuf.Timestamp start_time = 15;
  google.protobuf.Timestamp end_time = 16;
}

message AddTaxCategorySourceConfigurationRequest {
  repeated TaxCategorySourceConfiguration configurations = 1;
}

message AddTaxCategorySourceConfigurationResponse {
  ExecutionResult result = 1;
}

message SoftDeleteTaxCategorySourceConfigurationRequest {
  repeated string id = 1;
  google.protobuf.Timestamp end_time = 2;
}

message SoftDeleteTaxCategorySourceConfigurationResponse {
  ExecutionResult result = 1;
}

message AddTaxCategoryRuleConfigurationRequest {
  repeated TaxCategoryRuleConfiguration configurations = 1;
}

message AddTaxCategoryRuleConfigurationResponse {
  ExecutionResult result = 1;
}

message UpdateTaxCategoryRuleStatusRequest {
  repeated CategoryRuleStatusUpdate updates = 1;
}

message UpdateTaxCategoryRuleStatusResponse {
  ExecutionResult result = 1;
}

message SoftDeleteTaxCategoryRuleConfigurationRequest {
  repeated string id = 1;
  google.protobuf.Timestamp end_time = 2;
}

message SoftDeleteTaxCategoryRuleConfigurationResponse {
  ExecutionResult result = 1;
}

message CategoryRuleStatusUpdate {
  string id = 1;
  CategoryRuleStatusEnum status = 2;
}

enum CategoryRuleStatusEnum {
  ACTIVE = 0;
  INACTIVE = 1;
  SHADOW = 2;
}

message ExecutionResult {
  bool success = 1;
  string err_msg = 2;
}

enum JobSource {
  DAILY = 0;
  BACKFILL = 1;
}

message RxTaxCategoryIncrementalRangeCopyEvent {
  int64 upper_bound_id_inclusive = 1;
  int64 lower_bound_id_inclusive = 2;
  google.protobuf.Timestamp expires_at = 3;
  google.protobuf.Timestamp job_started_at = 4;
  JobSource job_source = 5;
}

message NonRxTaxCategoryIncrementalRangeCopyEvent {
  string upper_bound_id_inclusive = 1;
  string lower_bound_id_inclusive = 2;
  string batch_key = 3;
  google.protobuf.Timestamp job_started_at = 4;
  JobSource job_source = 5;
}

message UpdateHistoricalItemLevelTaxEvent {
  repeated StoreHistoricalItemLevelTax store_detail = 1;
}

message StoreHistoricalItemLevelTax {
  string store_id = 1;
  repeated HistoricalItemDetail item_detail = 2;
}

message HistoricalItemDetail {
  string item_id = 1;
  string tax_rate = 2;
  transaction.TaxStep tax_step = 3;
}

// A generic message that represents a range of IDs to be copied, designed for use by jobs which incrementally copy rows
message GenericIncrementalRangeCopyEvent {
  string upper_bound_id_inclusive = 1;
  string lower_bound_id_inclusive = 2;
}

message CachedTransactionEvent {
  google.protobuf.StringValue id = 1;
  google.protobuf.StringValue cache_key = 2;
  google.protobuf.StringValue response_body = 3;
  google.protobuf.BoolValue is_vertex_failed = 4;
  google.protobuf.Timestamp created_at = 5;
  google.protobuf.Timestamp expired_at = 6;
}
