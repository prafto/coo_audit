syntax = "proto3";

package dsj_tax_service;

import "common/cart.proto";
import "common/mfs_common.proto";
import "common/money.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option go_package = "github.com/doordash/services-protobuf/generated/tax/dsj_tax";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.dsj.tax";

service TaxService {
  rpc EstimateTax(EstimateTaxRequest) returns (EstimateTaxResponse) {}
  rpc CalculateAccurateTax(CalculateAccurateTaxRequest) returns (CalculateAccurateTaxResponse) {}
  rpc IsStoreMarketPlaceFacilitator(IsStoreMarketPlaceFacilitatorRequest) returns (IsStoreMarketPlaceFacilitatorResponse) {}
}

message FeesDetails {
  money.MonetaryFields service_fee = 1;
  money.MonetaryFields extra_sos_delivery_fee = 2;
  money.MonetaryFields base_delivery_fee = 3;
  money.MonetaryFields delivery_fee_discount = 4;
  money.MonetaryFields min_order_fee = 5;
}

message EstimateTaxRequest {
  string consumer_id = 1;
  cart.Cart cart = 2;
  FeesDetails fees_details = 3;
  string store_id = 4;
}

message EstimateTaxResponse {
  reserved 5;
  money.MonetaryFields subtotal_tax = 1;
  money.MonetaryFields fees_tax = 2;
  money.BasisPoint store_tax_rate = 3;
  google.protobuf.BoolValue is_mpf = 4;
  money.TaxDetails tax_details = 6;
  // A breakdown of multiple tax transactions if it exists (returned from tax-service).
  // Only used if > 1 EstimateTaxResponse exists in this list.
  repeated EstimateTaxResponse sub_tax_responses = 7;
  repeated ItemSupplementalPaymentDetails item_supplemental_payment_details = 8;
  repeated money.PaymentDetail payment_breakdown = 9;
  repeated money.ItemTaxBreakdown item_tax_breakdowns = 10;
}

message CalculateAccurateTaxRequest {
  string consumer_id = 1;
  cart.Cart cart = 2;
  FeesDetails fees_details = 3;
  string store_id = 4;
  google.protobuf.BoolValue is_dry_run = 5;
  google.protobuf.Timestamp scheduled_delivery_time = 6;
  repeated money.AppliedDiscounts applied_discounts = 7;
}

enum MerchantSubtotalAdjustmentType {
  UNKNOWN = 0;
  DISCOUNTS = 1;
  FEES = 2;
}

message MerchantSubtotalAdjustment {
  MerchantSubtotalAdjustmentType type = 1;
  string sub_type = 2;
  money.MonetaryFields amount = 3;
}

message CalculateAccurateTaxResponse {
  money.MonetaryFields subtotal_tax = 1;
  money.MonetaryFields fees_tax = 2;
  google.protobuf.BoolValue has_failed = 3;
  google.protobuf.StringValue error_message = 4;
  repeated MerchantSubtotalAdjustment merchant_subtotal_adjustments = 5;
  google.protobuf.StringValue transaction_id = 6;
  money.FeesTaxDetail fees_tax_amount_detail = 7;
  // aggregated subtotal amount used for tax calculation on subtotal line items
  money.MonetaryFields subtotal_for_tax = 8;
  google.protobuf.BoolValue is_mpf_state = 9;
  google.protobuf.StringValue merchant_tax_transaction_uuid = 10;
  repeated ItemSupplementalPaymentDetails item_supplemental_payment_details = 11;
  repeated money.PaymentDetail payment_breakdown = 12;
}

message ItemSupplementalPaymentDetails {
  google.protobuf.StringValue item_id = 1;
  repeated money.PaymentDetail payment_details = 2;
}

message IsStoreMarketPlaceFacilitatorRequest {
  string store_id = 1;
}

message IsStoreMarketPlaceFacilitatorResponse {
  bool result = 1;
}
