syntax = "proto3";

package store_service;

import "google/protobuf/wrappers.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/empty.proto";

option java_multiple_files = true;
option java_generic_services = true;
option java_package = "com.doordash.rpc.merchant_data_service_store_service";
option java_outer_classname = "StoreGroupProto";
option go_package = "StoreGroupProto";


service StoreGroupService {
  // Creates store group object with given properties
  rpc CreateStoreGroup (CreateStoreGroupRequest) returns (CreateStoreGroupResponse);

  // Get store group object by id
  rpc GetStoreGroupById (GetStoreGroupByIdRequest) returns (GetStoreGroupByIdResponse);

  // Get store group objects by name
  rpc GetStoreGroupsByName(GetStoreGroupsByNameRequest) returns (stream StoreGroup);

  // Update store group object with given id by given attributes
  // This is a partial update:
  // the given attributes in request will replace original ones in store group object; no other attributes will be replaced
  rpc UpdateStoreGroupById (UpdateStoreGroupByIdRequest) returns (UpdateStoreGroupByIdResponse);

  // Link store and store group with given IDs
  // Will throw INVALID_ARGUMENT if either of store and store group don't exist
  rpc LinkStoreAndStoreGroup (LinkStoreAndStoreGroupRequest) returns (google.protobuf.Empty);

  // Unlink store and store group with given IDs
  // Will do nothing if either store or store group don't exist
  rpc UnlinkStoreAndStoreGroup (UnlinkStoreAndStoreGroupRequest) returns (google.protobuf.Empty);

  // Get store group linked to a store with a given id
  rpc GetStoreGroupsByStoreId(GetStoreGroupsByStoreIdRequest) returns (stream StoreGroup);

}

message StoreGroup {
  google.protobuf.Int64Value id = 1;
  google.protobuf.StringValue name = 2;
  // represents logical type of a given store group (i.e. franchisee)
  google.protobuf.StringValue type = 3;
  google.protobuf.StringValue description = 4;
  // represents store group creation method (i.e. merchant portal)
  google.protobuf.StringValue creation_method = 5;
}

message CreateStoreGroupRequest {
  // Store group object to be inserted
  // Given attributes will be used for creating a DB instance
  // Absent attributes will be set in DB as null/default value
  // "id" attribute will be ignored
  StoreGroup store_group = 1;
}

message CreateStoreGroupResponse {
  // Complete store group object (including null fields)
  StoreGroup store_group = 1;
}

message GetStoreGroupByIdRequest {
  // Store group ID to look up
  google.protobuf.Int64Value id = 1;
}

message GetStoreGroupByIdResponse {
  // Complete store group object (including null fields)
  StoreGroup store_group = 1;
}

message GetStoreGroupsByNameRequest {
  // Store group name to look up
  google.protobuf.StringValue name = 1;
}

message UpdateStoreGroupByIdRequest {
  // Store group object to be updated
  // "id" attribute inside store_group is required, will be used to determine exact store group to update
  StoreGroup store_group = 1;
  // Update mask to specify exact fields which need to be updated - will include these fields in update statement; will ignore others
  google.protobuf.FieldMask update_mask = 2;
}

message UpdateStoreGroupByIdResponse {
  // Complete store group object (including null fields)
  StoreGroup store_group = 1;
}

message LinkStoreAndStoreGroupRequest {
  google.protobuf.Int64Value store_id = 1;
  google.protobuf.Int64Value store_group_id = 2;
}

message UnlinkStoreAndStoreGroupRequest {
  google.protobuf.Int64Value store_id = 1;
  google.protobuf.Int64Value store_group_id = 2;
}

message GetStoreGroupsByStoreIdRequest {
  google.protobuf.Int64Value store_id = 1;
}
