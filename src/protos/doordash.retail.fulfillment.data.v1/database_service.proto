syntax = "proto3";

package doordash.retail.fulfillment.data.v1;

import "common/common.proto";
import "common/marketplace_purchase.proto";
import "common/measurements.proto";
import "common/money.proto";
import "common/order.proto";
import "common/restriction_rules.proto";
import "doordash.retail.catalog.v1/fulfillment.proto";
import "doordash.retail.common.v1/common.proto";
import "doordash.retail.common.v1/item_instructions.proto";
import "doordash.retail.consumer.v1alpha1/common.proto";
import "doordash.retail.dasher.v3/shopping_metrics_exemptions.proto";
import "doordash.retail.fulfillment.planning_service.v1/fulfillment_plan_event.proto";
import "doordash.retail.fulfillment.planning_service.v1/planning_service.proto";
import "doordash.retail.fulfillment.store_items.v1/store_items_service.proto";
import "doordash.retail.fulfillment.v1/retail_data_fulfillment_service.proto";
import "doordash.retail.order.v1/pick_pack.proto";
import "doordash.retail.serving.v1/catalog_data.proto";
import "doordash.retail.serving.v1/inventory_data.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "menu/menu.proto";
import "menu/menu_data_gateway.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "doordash.retail.fulfillment.data.v1";

// 1-1000 required and immutable fields
// 1001-2000 optional but immutable fields
// 2001 onwards optional and mutable fields

// APIs for RFDS database service
service DatabaseService {
  // retrieve fulfillment plans for a cart and version
  rpc GetFulfillmentPlans(GetFulfillmentPlansRequest) returns (GetFulfillmentPlansResponse);
  // insert/update fulfillmentPlans for a cart and version
  rpc UpsertFulfillmentPlans(UpsertFulfillmentPlansRequest) returns (UpsertFulfillmentPlansResponse);
  // retrieve substitution recommendations for single item or all items in the cart
  rpc GetSubstitutionRecommendations(GetSubstitutionRecommendationsRequest) returns (GetSubstitutionRecommendationsResponse);
  // insert/update substitution recommendation for all items or single item in a cart
  rpc UpsertSubstitutionRecommendations(UpsertSubstitutionRecommendationsRequest) returns (UpsertSubstitutionRecommendationsResponse);
  // retrieve original item substitution attributes for single item or all items in the cart
  rpc GetOriginalItemSubstitutionAttributes(GetOriginalItemSubstitutionAttributesRequest) returns (GetOriginalItemSubstitutionAttributesResponse);
  // insert/update original item substitution attributes for all items or single item in a cart
  rpc UpsertOriginalItemSubstitutionAttributes(UpsertOriginalItemSubstitutionAttributesRequest) returns (UpsertOriginalItemSubstitutionAttributesResponse);
  // insert/update order
  rpc UpsertOrders(UpsertOrdersRequest) returns (UpsertOrdersResponse);
  // get orders
  rpc GetOrders(GetOrdersRequest) returns (GetOrdersResponse);
  // insert/update order_items
  rpc UpsertOrderItems(UpsertOrderItemsRequest) returns (UpsertOrderItemsResponse);
  // get order items by delivery uuid
  rpc GetOrderItems(GetOrderItemsRequest) returns (GetOrderItemsResponse);
  // insert delivery_uuid mapping for external_id (3P merchant orders) and delivery_id
  rpc UpsertDeliveryUuidMapping(UpsertDeliveryUuidMappingRequest) returns (UpsertDeliveryUuidMappingResponse);
  // get delivery_uuid from external_id or delivery_id
  rpc GetDeliveryUuidMapping(GetDeliveryUuidMappingRequest) returns (GetDeliveryUuidMappingResponse);
  // retrieve saved substitutions preferences for a given Cx
  rpc GetSavedSubstitutionsPreferences(GetSavedSubstitutionsPreferencesRequest) returns (GetSavedSubstitutionsPreferencesResponse);
  // Upsert saved substitutions preferences for a given Cx
  rpc UpsertSavedSubstitutionsPreferences(UpsertSavedSubstitutionsPreferencesRequest) returns (UpsertSavedSubstitutionsPreferencesResponse);
  // retrieve saved substitutions preferences for a given Cx
  rpc GetSavedOriginalItemPreferences(GetSavedOriginalItemPreferencesRequest) returns (GetSavedOriginalItemPreferencesResponse);
  // Upsert saved substitutions preferences for a given Cx
  rpc UpsertSavedOriginalItemPreferences(UpsertSavedOriginalItemPreferencesRequest) returns (UpsertSavedOriginalItemPreferencesResponse);
  // retrieve last found timestamp for a given list of item
  rpc GetEventForStoreItem(GetEventForStoreItemRequest) returns (GetEventForStoreItemResponse);
  // retrieve last found timestamp for a given item
  rpc GetTokenRateLimitRecord(GetTokenRateLimitRecordRequest) returns (GetTokenRateLimitRecordResponse);
  // get community photo for a given item
  rpc GetItemCommunityPhoto(GetItemCommunityPhotoRequest) returns (GetItemCommunityPhotoResponse);
  // upsert list of community photo objects
  rpc UpsertItemCommunityPhoto(UpsertItemCommunityPhotoRequest) returns (UpsertItemCommunityPhotoResponse);
  // delete list of community photo objects
  rpc DeleteItemCommunityPhoto(DeleteItemCommunityPhotoRequest) returns (DeleteItemCommunityPhotoResponse);
  // retrieve item level instructions
  rpc GetItemInstructions(GetItemInstructionsRequest) returns (GetItemInstructionsResponse);
  // upsert item level instructions
  rpc UpsertItemInstructions(UpsertItemInstructionsRequest) returns (UpsertItemInstructionsResponse);
  // get post-checkout attribute request
  rpc GetPostCheckoutAttribute(GetPostCheckoutAttributeRequest) returns (GetPostCheckoutAttributeResponse);
  // upsert post-checkout attribute request
  rpc UpsertPostCheckoutAttribute(UpsertPostCheckoutAttributeRequest) returns (UpsertPostCheckoutAttributeResponse);
  // temporary - retrieve store item identifiers (store_id + MSID) by store_item_uuid
  rpc GetStoreItemsIdentifiers(GetStoreItemsIdentifiersRequest) returns (GetStoreItemsIdentifiersResponse);
  // upsert substitution snapshot - keeps track of all the substitution snapshots
  rpc UpsertSubstitutionSnapshots(UpsertSubstitutionSnapshotsRequest) returns (UpsertSubstitutionSnapshotsResponse);
  // get substitution snapshot
  rpc GetSubstitutionSnapshots(GetSubstitutionSnapshotsRequest) returns (GetSubstitutionSnapshotsResponse);
  // get store directory aisle info
  rpc GetStoreDirectoryAisleInfo(GetStoreDirectoryAisleInfoRequest) returns (GetStoreDirectoryAisleInfoResponse);
  // upsert store directory aisle info
  rpc UpsertStoreDirectoryAisleInfo(UpsertStoreDirectoryAisleInfoRequest) returns (UpsertStoreDirectoryAisleInfoResponse);
}

// Generic mutable object types. Represents mutable messages fields after creation
// String field that can be mutable
message MutableString {
  // Value of String
  google.protobuf.StringValue value = 2001;
}

// Int32 field that can be mutable
message MutableInt32 {
  // Value of Int32
  google.protobuf.Int32Value value = 2001;
}

// Int64 field that can be mutable
message MutableInt64 {
  // Value of Int64
  google.protobuf.Int64Value value = 2001;
}

// Timestamp field that can be mutable
message MutableTimestamp {
  // Value of Timestamp
  google.protobuf.Timestamp value = 2001;
}

// Boolean field that can be mutable
message MutableBool {
  // Value of Boolean
  google.protobuf.BoolValue value = 2001;
}

// Double field that can be mutable
message MutableDouble {
  // Value of Double
  google.protobuf.DoubleValue value = 2001;
}

// Float field that can be mutable
message MutableFloat {
  // Value of Float
  google.protobuf.FloatValue value = 2001;
}

// information about substitution item
message SubstitutionItemMetadataAttributes {
  // substitution item metadata values
  repeated google.protobuf.StringValue values = 1;
}

// this map contains metadata about substitution items
// currently used to filter out subs based on category
// use this map to save more sub metadata in future
message SubstitutionItemMetadata {
  // map of substitution item metadata
  map<string, SubstitutionItemMetadataAttributes> attributes = 1;
}

// this map contains metadata about the original item
// use this map to save more metadata in future
message OriginalItemMetadata {
  // metadata about original item like l1 category name
  map<string, google.protobuf.StringValue> attributes = 1;
}

// attributes for a single substitution item
message SubstitutionRecommendationData {
  // computed from (cart_item_uuid, original_item_store_id,
  // original_item_merchant_supplied_id, substitution_item_store_id, substitution_item_merchant_supplied_id)
  google.protobuf.StringValue uuid = 1;
  // cart uuid
  google.protobuf.StringValue cart_uuid = 2;
  // store id of original item
  google.protobuf.StringValue original_item_store_id = 3;
  // msid of original item
  google.protobuf.StringValue original_item_merchant_supplied_id = 4;
  // store id of substitution item
  google.protobuf.StringValue substitution_item_store_id = 5;
  // msid of substitution item
  google.protobuf.StringValue substitution_item_merchant_supplied_id = 6;
  // created by
  google.protobuf.StringValue created_by = 7;
  // created at
  google.protobuf.Timestamp created_at = 8;
  // rank of substitution item
  google.protobuf.Int32Value substitution_rank = 9;
  // feature values for raw count all unique Cx has selected (positive) this sub choice
  MutableInt64 past_26w_num_cx_positive_selections = 10;
  // feature values for raw count all unique Cx has deselected (negative) this sub choice
  MutableInt64 past_26w_num_cx_negative_selections = 11;
  // Cx quantity preference of the substitution item
  doordash.retail.consumer.v1alpha1.QuantityInfoV3 substitution_item_quantity = 12;
  // metadata about substitutions like category info, use this to add more metadata in future
  SubstitutionItemMetadata substitution_item_metadata = 13;

  // delivery uuid
  google.protobuf.StringValue delivery_uuid = 1001;

  // is selected by the Cx
  MutableBool is_selected = 2001;
  //origin of the substitution
  Origin substitution_origin = 2002;
  // updated by
  MutableString updated_by = 2003;
  //updated at
  MutableTimestamp updated_at = 2004;

  // retail product
  RetailProductStoreItem retail_product_store_item = 2005;

  // price
  message Price {
    //unit amount
    int64 unit_amount = 1;
    //currency
    string currency = 2;
    //display string
    string display_string = 3;
    //decimal places
    int32 decimal_places = 4;
  }
}

// source of substitution
enum Origin {
  // unspecified
  ORIGIN_UNSPECIFIED = 0;
  // selected from search
  ORIGIN_CX_SEARCH = 1;
  // selected from recommendations
  ORIGIN_RECOMMENDATIONS = 2;
  // selected by the customer when the order was made
  ORIGIN_CX_APPROVED = 3;
  // recommended by the merchant for customer
  ORIGIN_MX_RECOMMENDED = 4;
}

// item out-of-stock preference types
enum OutOfStockPreference {
  // unspecified
  OUT_OF_STOCK_PREFERENCE_UNSPECIFIED = 0;
  // substitute
  OUT_OF_STOCK_PREFERENCE_SUBSTITUTE = 1;
  // contact me
  OUT_OF_STOCK_PREFERENCE_CONTACT_ME = 2;
  // refund
  OUT_OF_STOCK_PREFERENCE_REFUND = 3;
  // generic category eg: "Any similar whole milk" or "Any similar eggs" etc.
  OUT_OF_STOCK_PREFERENCE_GENERIC_CATEGORY = 4;
}

// resquest for fulfillment plans
message GetFulfillmentPlansRequest {
  // record_key - computed from (cart_id, version)
  google.protobuf.StringValue record_key = 1001;
}

// response for fulfillment plans
message GetFulfillmentPlansResponse {
  // Contains data and metadata for fulfillment_plans
  FulfillmentPlansData fulfillment_plans_data = 1;
}

// request for upsert of fulfillment_plans
message UpsertFulfillmentPlansRequest {
  // Contains data and metadata for fulfillment plans
  FulfillmentPlansData fulfillment_plans_data = 1;
}

// empty response for now
message UpsertFulfillmentPlansResponse {}

// object containing data and metada on fulfillment plans
message FulfillmentPlansData {
  // Metadata
  // computed from (card_uuid, version)
  google.protobuf.StringValue record_key = 1;
  // created by
  google.protobuf.StringValue created_by = 2;
  // created at
  google.protobuf.Timestamp created_at = 3;
  // updated by
  MutableString updated_by = 4;
  // updated_at
  MutableTimestamp updated_at = 5;
  // a custom expiration time used to CRDB TTL
  MutableTimestamp expired_at = 6;
  // Data
  // object containing fulfillment plans necessary for response
  FulfillmentPlansObjectData fulfillment_plans_object_data = 7;
  // fulfillment intent id of this cart/order
  google.protobuf.StringValue fulfillment_intent_id = 8;
}

// contains all data on fulfillment plans
message FulfillmentPlansObjectData {
  // List of FulfillmentPlans sorted
  repeated .doordash.retail.fulfillment.planning_service.v1.FulfillmentPlan fulfillment_plans = 1;
  // Fulfillment Plan Generation Information, only available with developerMode, can adapt for future
  google.protobuf.StringValue fulfillment_plan_info = 2;
  // Caller Identifier Metadata, this is just passed back from request
  .doordash.retail.fulfillment.planning_service.v1.GetPlansRequestIdentifier call_identifier_metadata = 3;
  // Hash value of fulfillment plans request
  google.protobuf.StringValue fulfillment_plans_request_hash = 4;
  // Context of fulfillment plan generation, used for dv evaluation when GetFulfillmentPlans call is made
  CreateFulfillmentPlansContext create_fulfillment_plans_context = 5;
}

//response of GetSubstitutionRecommendations api
message GetSubstitutionRecommendationsResponse {
  // list of substitution recommendations
  repeated SubstitutionRecommendationData substitution_recommendation_data = 1;
}

//request of GetSubstitutionRecommendations rpc
message GetSubstitutionRecommendationsRequest {
  // cart uuid - required
  google.protobuf.StringValue cart_uuid = 1;

  // uuid - computed from (cart_item_uuid, original_item_store_id,
  // original_item_merchant_supplied_id, substitution_item_store_id, substitution_item_merchant_supplied_id)
  google.protobuf.StringValue uuid = 1001;
}

// request for UpsertSubstitutionRecommendations rpc
message UpsertSubstitutionRecommendationsRequest {
  // list of substitution recommendations
  repeated SubstitutionRecommendationData substitution_recommendation_data = 1;
}

// response for UpsertSubstitutionRecommendations rpc
message UpsertSubstitutionRecommendationsResponse {}

// original item suggestion attributes for single original item
message OriginalItemSubstitutionAttributesData {
  // computed from (cart_item_uuid, original_item_store_id,
  // original_item_merchant_supplied_id)
  google.protobuf.StringValue uuid = 1;
  // cart uuid
  google.protobuf.StringValue cart_uuid = 2;
  // store id of original item
  google.protobuf.StringValue original_item_store_id = 3;
  // msid of original item
  google.protobuf.StringValue original_item_merchant_supplied_id = 4;
  // created by
  google.protobuf.StringValue created_by = 7;
  // created at
  google.protobuf.Timestamp created_at = 8;

  // delivery uuid
  google.protobuf.StringValue delivery_uuid = 1001;
  // metadata about original item like l1 category, use this to add more metadata in future
  OriginalItemMetadata original_item_metadata = 1002;

  // out of stock preference for the item
  OutOfStockPreference out_of_stock_preference = 2001;
  // has cx reviewed substitutions for the item
  MutableBool cx_reviewed_subs = 2002;
  // updated by
  MutableString updated_by = 2003;
  // updated at
  MutableTimestamp updated_at = 2004;
  // badges
  repeated BadgeEntity badges = 2005;
  // stores metadata about generic category oos preference
  GenericCategoryOosPreferenceData generic_category_oos_pref_data = 2006;
  // Store retail product
  RetailProductStoreItem retail_product_store_item = 2007;

  // badge entity
  message BadgeEntity {
    // text
    google.protobuf.StringValue text = 1;
    // background color
    google.protobuf.StringValue background_color = 2;
    // type
    google.protobuf.StringValue type = 3;
    // placement
    google.protobuf.StringValue placement = 4;
    // dlsTagSize
    google.protobuf.StringValue dls_tag_size = 5;
    // dlsTagStyle
    google.protobuf.StringValue dls_tag_style = 6;
    // dlsTagType
    google.protobuf.StringValue dls_tag_type = 7;
    // leading icon
    google.protobuf.StringValue leading_icon = 8;
    // leading icon size
    google.protobuf.StringValue leading_icon_size = 9;
    // trailing icon
    google.protobuf.StringValue trailing_icon = 10;
    // trailing icon size
    google.protobuf.StringValue trailing_icon_size = 11;
    // experiment name
    google.protobuf.StringValue experiment_name = 12;
  }
}

// Generic category OOS preference metadata for storing into tables
message GenericCategoryOosPreferenceData {
  // category information
  CategoryInfo category_info = 1;
  // metadata about generic categories using which OOS pref will be generated
  message CategoryInfo {
    // key in the format of L1Id.L2Id.L3Id.L4Id
    google.protobuf.StringValue category_matched_key = 1; // 1.163.892
    // category id to be used for displaying generic OOS preference
    google.protobuf.Int64Value terminal_category_id = 2; // 892
    // category name to be used for displaying generic OOS preference
    google.protobuf.StringValue oos_pref_display_name = 3; // Puffs & Doodles
  }
}

//request for GetOriginalItemSubstitutionAttributes rpc
message GetOriginalItemSubstitutionAttributesRequest {
  // cart uuid - required
  google.protobuf.StringValue cart_uuid = 1;

  // uuid computed from (cart_item_uuid, original_item_store_id,
  // original_item_merchant_supplied_id)
  google.protobuf.StringValue uuid = 1001;
}

//response for GetOriginalItemSubstitutionAttributes rpc
message GetOriginalItemSubstitutionAttributesResponse {
  // list of original item attributes
  repeated OriginalItemSubstitutionAttributesData original_item_attributes = 1;
}

// request for UpsertOriginalItemSubstitutionAttributes rpc
message UpsertOriginalItemSubstitutionAttributesRequest {
  // list of original item attributes
  repeated OriginalItemSubstitutionAttributesData original_item_attributes = 1;
}

//response for UpsertOriginalItemSubstitutionAttributes rpc
message UpsertOriginalItemSubstitutionAttributesResponse {}

// Order table schema
message OrderData {
  //required fields
  // uuid
  google.protobuf.StringValue uuid = 1;
  //delivery id
  google.protobuf.StringValue delivery_id = 2;
  //store id
  google.protobuf.StringValue store_id = 3;
  //external id
  google.protobuf.StringValue external_id = 4;
  //delivery uuid
  google.protobuf.StringValue delivery_uuid = 5;
  //dd order uuid
  google.protobuf.StringValue dd_order_uuid = 6;
  //dd order id
  google.protobuf.Int64Value dd_order_id = 7;
  //shopping protocol
  .order.ShoppingProtocol shopping_protocol = 8;
  //Customer
  .doordash.retail.order.v1.Consumer consumer = 9;
  //created at
  google.protobuf.Timestamp created_at = 10;
  // created by
  google.protobuf.StringValue created_by = 11;
  // common store information
  .doordash.retail.common.v1.Store store = 12;

  // optional immutable fields
  // staging required
  google.protobuf.BoolValue staging_required = 1001;
  //merchant order id
  google.protobuf.StringValue merchant_order_id = 1002;
  //loyalty details
  .doordash.retail.order.v1.OrderDetail.LoyaltyDetails loyalty_details = 1003;
  //platform that Cx place order on - used to differentiate order placed on Desktop
  google.protobuf.StringValue cx_order_platform = 1004;

  //optional mutable fields
  //employee id
  MutableInt64 employee_id = 2001;
  //updated at
  MutableTimestamp updated_at = 2002;
  //updated by
  MutableString updated_by = 2003;
  //cancelled at
  MutableTimestamp cancelled_at = 2004;
  //pick started time
  MutableTimestamp pick_started_at = 2005;
  //pick completed time
  MutableTimestamp pick_completed_at = 2006;
  //actual finish time
  MutableTimestamp actual_finish_at = 2007;
  //quoted finish time
  MutableTimestamp quoted_finish_at = 2008;
  //tax
  money.MonetaryFields tax = 2009;
  //total
  money.MonetaryFields total = 2010;
  //checkout barcode
  CheckoutBarcode checkout_barcode = 2011;
  //allowance id
  MutableString allowance_id = 2012;
  //allowance creation status
  MutableString allowance_creation_status = 2013;
  //shift id
  MutableInt64 shift_id = 2014;
  //actual swipe amount
  money.MonetaryFields actual_swipe_amount = 2015;
  //actual swipe time
  MutableTimestamp actual_swipe_at = 2016;
  //dropped off time
  MutableTimestamp dropped_off_at = 2017;
  //oca completed at
  MutableTimestamp oca_completed_at = 2018;
  //expected shopping duration
  MutableInt64 expected_shopping_duration_in_millis = 2019;
  //stage completed at
  MutableTimestamp stage_completed_at = 2020;
  //staged containers
  repeated StagedContainer staged_containers = 2021;
  //batch id
  MutableString batch_id = 2022;
  //batch order metadata
  BatchOrderMetadata batch_order_metadata = 2023;
  //drive order attributes
  .doordash.retail.order.v1.OrderDetail.DriveOrderAttributes drive_order_attributes = 2024;
  // order dyf attribute order_version
  MutableString order_version = 2025;
  // Whether order has dyf items
  MutableBool has_dyf_items = 2026;
  // whether dyf window is closed
  MutableBool dyf_window_closed = 2027;
  // whether DYF v2 window is closed
  MutableBool dyf_v2_window_closed = 2028;
  // delivery option type
  .common.DeliveryOptionType delivery_option_type = 2029;
  // receipt info, including but not limited to physical receipts
  ReceiptInfo receipt_info = 2030;
  // qr code payment ack info
  QrcodePaymentAckInfo qrcode_payment_ack_info = 2031;
  // red card refund status
  RedCardRefundStatus red_card_refund_status = 2032;
  // oca email status
  OcaEmailStatus oca_email_status = 2033;
  // [Deprecated] Qr code Scan ack info
  reserved 2034;
  reserved "qrcode_scan_ack_info";
  // New Qr code Scan ack info
  QrcodeScanAckInfo qrcode_scan_ack = 2035;
  // digitized receipt status
  DigitizedReceiptStatus digitized_receipt_status = 2036;
  // Indicate if cx calls dx, cx texts dx or dx calls cx (In this case, as dx talks to cx about subs choices. The cx can ask for dyf item)
  MutableBool did_cx_comm_with_dx = 2037;
  // Shop Anywhere order attributes
  .doordash.retail.order.v1.Order.ShopAnywhereAttributes shop_anywhere_attributes = 2038;
  // Dasher pick-up time from store, in most cases this is equivalent to checkout completion time
  MutableTimestamp dasher_picked_up_at = 2039;
  // Prescription delivery info; if exists, the order is a prescription delivery
  .doordash.retail.common.v1.PrescriptionDeliveryInfo prescription_delivery_info = 2040;
  //dasher id
  google.protobuf.StringValue dasher_id = 2041;

  // red card refund status
  enum RedCardRefundStatus {
    // not supported or labeled
    RED_CARD_REFUND_STATUS_UNSPECIFIED = 0;
    // red card refund status is pending
    RED_CARD_REFUND_STATUS_PENDING = 1;
    // red card refund status is failed
    RED_CARD_REFUND_STATUS_FAILED = 2;
    // red card refund status is complete
    RED_CARD_REFUND_STATUS_COMPLETE = 3;
  }

  // oca email status
  enum OcaEmailStatus {
    // not supported or labeled
    OCA_EMAIL_STATUS_UNSPECIFIED = 0;
    // oca email sending status is pending
    OCA_EMAIL_STATUS_PENDING = 1;
    // oca email sending status is failed
    OCA_EMAIL_STATUS_FAILED = 2;
    // oca email sending status is complete
    OCA_EMAIL_STATUS_COMPLETE = 3;
  }

  // digitized receipt status
  enum DigitizedReceiptStatus {
    // not supported or labeled
    DIGITIZED_RECEIPT_STATUS_UNSPECIFIED = 0;
    // digitized receipt is pending for order
    DIGITIZED_RECEIPT_STATUS_PENDING = 1;
    // digitized receipt has been received for order
    DIGITIZED_RECEIPT_STATUS_RECEIVED = 2;
    // error/timeout waiting for digitized receipt
    DIGITIZED_RECEIPT_STATUS_ERROR_TIMEOUT = 3;
  }

  // QrcodePaymentAckInfo is the event that is sent when the QR payment is successful.
  message QrcodePaymentAckInfo {
    // Unique id as well as idempotence key of this event.
    google.protobuf.StringValue id = 1;

    // Delivery uuid.
    google.protobuf.StringValue delivery_uuid = 2;

    // Transaction amount.
    google.protobuf.DoubleValue transaction_amount = 3;

    // Transaction date.
    google.protobuf.Timestamp transaction_date = 4;

    // Transaction status.
    google.protobuf.StringValue transaction_status = 5;

    // Store id.
    google.protobuf.StringValue store_id = 6;

    // Order type.
    google.protobuf.StringValue order_type = 7;

    // Auth code.
    google.protobuf.StringValue auth_code = 8;

    // Message.
    google.protobuf.StringValue message = 9;

    // Event type.
    google.protobuf.StringValue event_type = 10;

    // [Deprecated] Scan Status.
    reserved 11;
    reserved "scan_status";
  }

  // QrcodeScanAckInfo is the event that is sent when the QR code is scanned.
  message QrcodeScanAckInfo {
    // Delivery uuid.
    google.protobuf.StringValue delivery_uuid = 1;
    // QR code token
    google.protobuf.StringValue token = 2;
    // Store id.
    google.protobuf.StringValue store_id = 3;
    // Event type.
    google.protobuf.StringValue event_type = 4;
    // Scan status.
    google.protobuf.StringValue status = 5;
  }

  // checkout barcode
  message CheckoutBarcode {
    // code
    google.protobuf.StringValue code = 1;
    // format
    google.protobuf.StringValue format = 2;
    // provider name
    google.protobuf.StringValue provider_name = 3;
    // normalized code
    google.protobuf.StringValue normalized_code = 4;
    // isMpfState
    google.protobuf.BoolValue is_mpf_state = 5;
  }
  // staged container
  message StagedContainer {
    // external id
    google.protobuf.StringValue external_id = 1;
    // external location id
    google.protobuf.StringValue external_location_id = 2;
    // external zone id
    google.protobuf.StringValue external_zone_id = 3;
  }
  // batch order metadata
  message BatchOrderMetadata {
    // order initials
    google.protobuf.StringValue order_initials = 1;
    // order initials color
    google.protobuf.StringValue order_initials_color = 2;
  }
  // physical receipts
  message ReceiptInfo {
    // physical receipt images
    repeated PhysicalReceiptImage receipt_images = 1;
    // physical receipt images
    message PhysicalReceiptImage {
      // time when receipt image was saved
      google.protobuf.Timestamp created_at = 1;
      // url to the receipt image
      google.protobuf.StringValue url = 2;
      // hash value of the image for deduplication
      google.protobuf.StringValue image_hash = 3;
      // optional barcode string
      google.protobuf.StringValue barcode = 4;
    }
  }
}

// request for UpsertOrdersRequest
message UpsertOrdersRequest {
  // list of orders
  repeated OrderData orders = 1;
}

// response for UpsertOrdersRequest
message UpsertOrdersResponse {}

// request for GetOrdersRequest
message GetOrdersRequest {
  // query parameters
  oneof index {
    // query by delivery_uuid - primary key
    PrimaryKey primary_key = 1;
    // deprecated
    StoreIdEmployeeId store_id_employee_id = 2 [deprecated = true];
    // query by delivery_id - not indexed
    DeliveryIdList delivery_ids = 3;
    // query by external_id - not indexed
    ExternalIdList external_ids = 4;
    // query by store_id and employee_id - indexed
    StoreIdAndEmployeeId store_id_and_employee_id = 6;
  }
  // optional time constraints for query
  repeated TimeConstraint time_constraints = 5;
  // optional shopping protocols:
  // - if not set, will return all orders
  // - if set, will return only orders that have specified shopping protocols
  repeated .order.ShoppingProtocol shopping_protocols = 7;

  // a time constraint to check
  message TimeConstraint {
    // required type / field name
    TimeConstraintType type = 1;
    // optional start_timestamp, but at least one of start and end should be present
    google.protobuf.Timestamp start_timestamp = 2;
    // optional end_timestamp, but at least one of start and end should be present
    google.protobuf.Timestamp end_timestamp = 3;
    // optional is_null, if true, check if the field 'is null'; if false, check if the field 'is not null'
    // while 'is_null' does not conflict with start/end timestamp, certain combination of them will always yield
    // empty results, e.g. is_null = true and start_timestamp = 'some_timestamp'
    google.protobuf.BoolValue is_null = 4;

    // which timestamp to check against
    enum TimeConstraintType {
      // unspecified
      TIME_CONSTRAINT_TYPE_UNSPECIFIED = 0;
      // should check "created_at"
      TIME_CONSTRAINT_TYPE_CREATED_AT = 1;
      // should check "quoted_finish_at"
      TIME_CONSTRAINT_TYPE_QUOTED_FINISH_AT = 2;
      // should check "cancelled_at"
      TIME_CONSTRAINT_TYPE_CANCELLED_AT = 3;
      // should check "actual_finish_at"
      TIME_CONSTRAINT_TYPE_ACTUAL_FINISH_AT = 4;
    }
  }
  // delivery_uuid
  message PrimaryKey {
    // query for multiple delivery_uuids
    repeated google.protobuf.StringValue delivery_uuids = 1;
  }
  // deprecated
  message StoreIdEmployeeId {
    // store_id
    google.protobuf.StringValue store_id = 1;
    // employee_id
    google.protobuf.StringValue employee_id = 2;
  }
  // query for store_id and employee_id
  message StoreIdAndEmployeeId {
    // store_id
    string store_id = 1;
    // employee_id, can be set to explicitly target employee_id == null
    MutableString employee_id = 2;
  }
  // query for multiple delivery_id
  message DeliveryIdList {
    // delivery_ids
    repeated google.protobuf.StringValue delivery_ids = 1;
  }
  // query for multiple external_id
  message ExternalIdList {
    // external_ids
    repeated google.protobuf.StringValue external_ids = 1;
  }
}

// response for GetOrdersRequest
message GetOrdersResponse {
  // list of Orders
  repeated OrderData orders = 1;
}

// OrderItemData
message OrderItemData {
  // required fields
  // uuid
  google.protobuf.StringValue uuid = 1;
  // delivery uuid
  google.protobuf.StringValue delivery_uuid = 2;
  // store item
  StoreItem store_item = 3;

  // optional immutable fields
  // dd order item id -- this is a required field for original items but optional for substituted items.
  google.protobuf.Int64Value dd_order_item_id = 1001;
  // special instructions -- only for drive orders
  google.protobuf.StringValue special_instructions = 1002;
  // item Extras also known as modifiers
  repeated ItemExtra item_extras = 1003;

  // optional mutable fields
  // updated at
  MutableTimestamp updated_at = 2001;
  // updated by
  MutableString updated_by = 2002;
  // quantity requested
  MutableDouble quantity_requested = 2003;
  // picked at
  MutableTimestamp picked_at = 2004;
  // scanned at
  MutableTimestamp scanned_at = 2005;
  // not found at
  MutableTimestamp not_found_at = 2006;
  // quantity confirmed at
  MutableTimestamp quantity_confirmed_at = 2007;
  // substituted order item uuid
  MutableString substituted_order_item_uuid = 2008;
  // reset at
  MutableTimestamp reset_at = 2009;
  // pick result
  PickResult pick_result = 2010;

  // PickResult
  message PickResult {
    // quantity
    repeated .common.QuantityInfo quantities = 1;
  }

  // quantity picked
  MutableDouble quantity_picked = 2011;
  // measurement quantity picked
  MutableDouble measurement_quantity_picked = 2012;
  // adjusted price
  MutableInt32 adjusted_price = 2013;
  // num weighted
  MutableInt32 num_weighted = 2014;
  // num scanned
  MutableInt32 num_scanned = 2015;
  // pick state
  PickState pick_state = 2016;
  // scanned barcode
  doordash.retail.catalog.v1.Barcode scanned_barcode = 2017;
  // order item dyf attribute order_version
  MutableString order_version = 2018;
  // substitution type - in case of a substitution
  SubstitutionType substitution_type = 2019;

  // Details regarding addition of new order item
  DyfItemCreationMetadata dyf_item_creation_metadata = 2020;

  // Deprecated
  reserved "stock_level_badge";
  reserved 2021;

  // Stock level badges
  repeated StockLevelBadge stock_level_badges = 2022;

  // Prescription info for this item if the order is from a pharmacy store
  .common.PrescriptionItemInfo prescription_item_info = 2023;

  // CreationMetadata for new order item
  message DyfItemCreationMetadata {
    // Indicates who added this new item
    .order.OrderAdjustmentSource source = 1;
    // Entity which made the adjustment
    oneof entity_id {
      // Dasher id is used in case of Dx DYF
      google.protobuf.StringValue dasher_id = 2;
      // Cx id
      google.protobuf.StringValue customer_id = 3;
    }
  }

  // Pick State
  enum PickState {
    // unspecified
    PICK_STATE_UNSPECIFIED = 0;
    // new
    PICK_STATE_NEW = 1;
    // picked
    PICK_STATE_PICKED = 2;
    // refunded
    PICK_STATE_REFUNDED = 3;
    // substituted
    PICK_STATE_SUBSTITUTED = 4;
    // pending_cx
    PICK_STATE_PENDING_CX = 5;
    // pending_dx
    PICK_STATE_PENDING_DX = 6;
    // pending_cx_review_picture
    PICK_STATE_PENDING_CX_REVIEW_PICTURE = 7;
  }

  // substitution type indicating which type of sub was picked
  enum SubstitutionType {
    // substitution type unspecified
    SUBSTITUTION_TYPE_UNSPECIFIED = 0;
    // substitution type cx approved
    SUBSTITUTION_TYPE_CX_APPROVED = 1;
    // substitution type doordash choice
    SUBSTITUTION_TYPE_DOORDASH_CHOICE = 2;
    // substitution type for a specific sub item under generic category
    SUBSTITUTION_TYPE_GENERIC_CATEGORY_SUB_ITEM = 3;
    // substitution type for any item under generic category
    SUBSTITUTION_TYPE_GENERIC_CATEGORY_ANY = 4;
    // substitution type for item searched & selected for substituting
    SUBSTITUTION_TYPE_MANUAL_SUB_SEARCH = 5;
    // substitution type for item manually scanned & selected for substituting
    SUBSTITUTION_TYPE_MANUAL_SUB_SCAN = 6;
    // substitution type for sub item provided by mx
    SUBSTITUTION_TYPE_MX_RECOMMENDED = 7;
  }

  // Store Item
  message StoreItem {
    //Store ID
    google.protobuf.StringValue store_id = 1;
    // Item name
    google.protobuf.StringValue name = 2;
    // Item category
    google.protobuf.StringValue category = 3;
    // Merchant supplied id
    google.protobuf.StringValue merchant_supplied_id = 4;
    // Image URLs
    repeated string image_urls = 5;
    // Unit of measurement
    google.protobuf.StringValue unit_of_measurement = 6;
    // category uuid -- hashed category name is stored as category_uuid
    google.protobuf.StringValue category_uuid = 7;
    // Menu Item ID
    google.protobuf.Int64Value dd_menu_item_id = 8;
    // PLU
    google.protobuf.StringValue plu = 9;
    // Scan strategy
    .doordash.retail.catalog.v1.ScanStrategy scan_strategy = 10;
    // indicates approximately how much a single item is sold by.
    .common.Decimal approximate_sold_as_quantity = 11;
    // Measurement unit for weighted items
    google.protobuf.StringValue measurement_unit_wi = 12;
    // Price info for store items
    .doordash.retail.fulfillment.v1.StoreItemPriceInfo price_info = 13;
    // Purchase type
    .common.marketplace_purchase.v1.PurchaseType purchase_type = 14;
    //Restriction Info
    menu.RestrictionInfo restriction_info = 15;
    //aggregated attributes
    doordash.retail.fulfillment.store_items.v1.StoreItemAttributes attributes = 16;
    // weight, volume, and unit count of item
    measurements.Measurements measurements = 17;
  }

  // Item Extras aka Grocery modifiers
  message ItemExtra {
    // id
    string id = 1;
    // name
    google.protobuf.StringValue name = 2;
    // title
    google.protobuf.StringValue title = 3;
    // sort id
    google.protobuf.Int32Value sort_id = 4;
    // merchant supplied id
    google.protobuf.StringValue merchant_supplied_id = 5;
    // option selected for the modifier
    repeated ItemExtraOption options = 6;
  }

  // Details of the option selected for the modifier
  message ItemExtraOption {
    // id
    string id = 1;
    // name
    google.protobuf.StringValue name = 2;
    // description
    google.protobuf.StringValue description = 3;
    // price
    money.MonetaryFields price = 4;
    // quantity
    google.protobuf.Int32Value quantity = 5;
    // sort id
    google.protobuf.Int32Value sort_id = 6;
    // extra title
    google.protobuf.StringValue extra_title = 7;
    // extra id
    string extra_id = 8;
    // extra merchant supplied id
    google.protobuf.StringValue merchant_supplied_id = 9;
    // default quantity
    google.protobuf.Int32Value default_quantity = 10;
    // is recepie
    bool is_recipe = 11;
  }

  // Stock level badge info for item
  message StockLevelBadge {
    // Item stock level
    StockLevel stock_level = 1;
    // Badge display text
    google.protobuf.StringValue display_text = 2;

    // Stock level info
    enum StockLevel {
      // Default empty stock level
      STOCK_LEVEL_UNSPECIFIED = 0;
      // Item is high in stock
      STOCK_LEVEL_HIGH_IN_STOCK = 1;
      // Item was recently restocked
      STOCK_LEVEL_RECENTLY_RESTOCKED = 2;
    }
  }
}

// request for UpsertOrderItemsRequest
message UpsertOrderItemsRequest {
  // list of orders
  repeated OrderItemData order_items = 1;
}

// response for UpsertOrderItemsRequest
message UpsertOrderItemsResponse {}

// request for GetOrderItemsRequest
message GetOrderItemsRequest {
  // delivery uuid list
  repeated google.protobuf.StringValue delivery_uuids = 1 [deprecated = true];
  // Order items table index
  oneof index {
    // query by delivery_uuids
    DeliveryUuidList delivery_uuid_list = 2;
    // query by order_items' uuids
    UuidList uuid_list = 3;
  }
}

// delivery uuids for GetOrderItemsRequest
message DeliveryUuidList {
  // delivery uuids
  repeated google.protobuf.StringValue delivery_uuids = 1;
}

// uuids for GetOrderItemsRequest
message UuidList {
  // uuids
  repeated google.protobuf.StringValue uuids = 1;
}

// response for GetOrderItemsResponse
message GetOrderItemsResponse {
  // order items
  repeated OrderItemData order_items = 1;
}

// OrderItemDimensionData
message OrderItemDimensionData {
  // required fields
  // uuid
  google.protobuf.StringValue uuid = 1;
  // delivery uuid
  google.protobuf.StringValue delivery_uuid = 2;
  // order item uuid
  google.protobuf.StringValue order_item_uuid = 3;

  // optional mutable fields
  // created at
  google.protobuf.Timestamp created_at = 1001;
  // updated at
  MutableTimestamp updated_at = 1002;
  // updated by
  MutableString updated_by = 1003;

  // get pick pack dependencies
  // merchant catalog response
  menudatagateway.MerchantCatalogResponse merchant_catalog_response = 2001;
  // RPS response
  menudatagateway.RetailProductResponse rps_response = 2002;
}

// request for GetOrderItemsDimensionDataRequest
message GetOrderItemsDimensionDataRequest {
  // Order items dimension data table index
  oneof index {
    // query by delivery_uuids
    DeliveryUuidList delivery_uuid_list = 2;
    // query by order_items_dimension_data' uuids
    UuidList uuid_list = 3;
    // query by order items uuids
    UuidList order_item_uuid_list = 4;
  }
}

// response for GetOrderItemsResponse
message GetOrderItemsDimensionDataResponse {
  // order items
  repeated OrderItemDimensionData order_items_dimension_data = 1;
}

// request for UpsertOrderItemsDimensionDataRequest
message UpsertOrderItemsDimensionDataRequest {
  // list of order items dimention data
  repeated OrderItemDimensionData order_items_dimension_data = 1;
}

// response for UpsertOrderItemsDimensionDataResponse
message UpsertOrderItemsDimensionDataResponse {}

// request for UpsertDeliveryUuidMapping
message UpsertDeliveryUuidMappingRequest {
  // list of deliveryUuidMapping
  repeated DeliveryUuidMapping delivery_uuid_mappings = 1;
}

// response for UpsertDeliveryUuidMapping
message UpsertDeliveryUuidMappingResponse {}

// request for GetDeliveryUuidMapping
message GetDeliveryUuidMappingRequest {
  // list of entity
  repeated DeliveryUuidMapping.Entity entities = 1;
}

// response for GetDeliveryUuidMapping
message GetDeliveryUuidMappingResponse {
  // list of deliveryUuidMapping
  repeated DeliveryUuidMapping delivery_uuid_mappings = 1;
}

// maps delivery entity (external_id, delivery_id, etc) to deliveryUuid
message DeliveryUuidMapping {
  // delivery identifier entity
  Entity entity = 1;
  // delivery_uuid
  string delivery_uuid = 2;

  //updated at
  MutableTimestamp updated_at = 2001;

  // delivery identifier entity
  message Entity {
    // Specifies the type of entity to query for
    enum Type {
      // Unspecified and/or invalid entity
      TYPE_UNSPECIFIED = 0;
      // delivery_id
      TYPE_DELIVERY_ID = 1;
      // external_id (3P merchant order)
      TYPE_EXTERNAL_ID = 2;
    }
    // type of entity to update
    Type type = 1;
    // Id of entity
    string id = 2;
  }
}

// response for GetSavedSubstitutionsPreferences
message GetSavedSubstitutionsPreferencesResponse {
  // list of substitution recommendations
  repeated SavedSubstitutionsPreferencesData saved_subs_preferences_data = 1;
}

// request for GetSavedSubstitutionsPreferences
message GetSavedSubstitutionsPreferencesRequest {
  //customer id
  google.protobuf.StringValue customer_id = 1;
  //business id
  google.protobuf.StringValue business_id = 2;
  //list of original item merchant supplied ids
  repeated google.protobuf.StringValue original_item_merchant_supplied_ids = 3;
}

// saved substitutions information for an original item
message SavedSubstitutionsPreferencesData {
  // computed from (
  // original_item_store_id, original_item_merchant_supplied_id,
  // substitution_item_store_id,
  // substitution_item_merchant_supplied_id)
  google.protobuf.StringValue uuid = 1;
  // customer ID
  google.protobuf.StringValue customer_id = 2;
  // business id of original item
  google.protobuf.StringValue original_item_business_id = 3;
  // store id of original item
  google.protobuf.StringValue original_item_store_id = 4;
  // msid of original item
  google.protobuf.StringValue original_item_merchant_supplied_id = 5;
  // business id of substitution
  google.protobuf.StringValue substitution_item_business_id = 6;
  // store id of substitution
  google.protobuf.StringValue substitution_item_store_id = 7;
  // msid of substitution
  google.protobuf.StringValue substitution_item_merchant_supplied_id = 8;
  // rank of substitution item
  google.protobuf.Int32Value substitution_rank = 9;
  // Cx quantity preference of the substitution item
  doordash.retail.consumer.v1alpha1.QuantityInfoV3 substitution_item_quantity = 10;
  // Associated delivery uuid with the rating
  google.protobuf.StringValue delivery_uuid = 11;

  // is selected by the Cx
  MutableBool is_selected = 2001;
  // origin of the substitution
  Origin substitution_origin = 2002;
  // updated at
  MutableTimestamp updated_at = 2003;
  // updated by
  MutableString updated_by = 2004;
  // substitution rating provided, 1: positive, 0: none, -1: negative
  MutableInt32 rating = 2005;
  // timestamp when sub was actually picked
  MutableTimestamp last_sub_picked_at = 2006;
  // timestamp when sub was last updated
  MutableTimestamp last_rating_updated_at = 2007;
  // list of rating tags that Cx selects or comment if Cx selects "other" and choose to enter text
  repeated google.protobuf.StringValue rating_tags = 2008;
}

// request for UpsertSavedSubstitutionsPreferences api
message UpsertSavedSubstitutionsPreferencesRequest {
  // list of saved substitutions preferences
  repeated SavedSubstitutionsPreferencesData saved_subs_preferences_data = 1;
}

//response for UpsertSavedSubstitutionsPreferences api
message UpsertSavedSubstitutionsPreferencesResponse {}

//request for GetSavedOriginalItemPreferences api
message GetSavedOriginalItemPreferencesRequest {
  //customer id
  google.protobuf.StringValue customer_id = 1;
  //business id
  google.protobuf.StringValue business_id = 2;
  //list of original item merchant supplied ids
  repeated google.protobuf.StringValue original_item_merchant_supplied_ids = 3;
}

// response for GetSavedOriginalItemPreferences api
message GetSavedOriginalItemPreferencesResponse {
  //list of substitution recommendations
  repeated SavedOriginalItemPreferencesData saved_original_item_preferences_data = 1;
}

// oos attributes for an original item
message SavedOriginalItemPreferencesData {
  // computed from (
  // original_item_store_id, original_item_merchant_supplied_id)
  google.protobuf.StringValue uuid = 1;
  // customer ID
  google.protobuf.StringValue customer_id = 2;
  // business id of original item
  google.protobuf.StringValue original_item_business_id = 3;
  // business id of original item
  google.protobuf.StringValue original_item_store_id = 4;
  // msid of original item
  google.protobuf.StringValue original_item_merchant_supplied_id = 5;
  // saved oos preference
  OutOfStockPreference out_of_stock_preference = 2001;
  // updated at
  MutableTimestamp updated_at = 2002;
  // updated by
  MutableString updated_by = 2003;
  // if OutOfStockPreference = GENERIC_CATEGORY then this object stores additional metadata
  GenericCategoryOosPreferenceData generic_category_oos_pref_data = 2004;
}

// request for UpsertSavedOriginalItemPreferences api
message UpsertSavedOriginalItemPreferencesRequest {
  // list of saved original item preferences
  repeated SavedOriginalItemPreferencesData saved_original_item_preferences_data = 1;
}

//response for UpsertSavedOriginalItemPreferences api
message UpsertSavedOriginalItemPreferencesResponse {}

// Receipt
message ReceiptData {
  // Receipt status
  enum ReceiptStatus {
    // Unspecified
    RECEIPT_STATUS_UNSPECIFIED = 0;
    // Unprocessed
    RECEIPT_STATUS_UNPROCESSED = 1;
    // Tokenized
    RECEIPT_STATUS_TOKENIZED = 2;
    // Verified
    RECEIPT_STATUS_VERIFIED = 3;
    // Cancelled
    RECEIPT_STATUS_CANCELLED = 4;
    // Order Item Not Found
    RECEIPT_STATUS_ORDER_ITEM_NOT_FOUND = 5;
  }

  // Receipt Flagged Reason
  enum ReceiptFlaggedReason {
    // Unspecified
    RECEIPT_FLAGGED_REASON_UNSPECIFIED = 0;
    // Quantity
    RECEIPT_FLAGGED_REASON_QUANTITY = 1;
    // Price
    RECEIPT_FLAGGED_REASON_PRICE = 2;
    // Wrong Item
    RECEIPT_FLAGGED_REASON_WRONG_ITEM = 3;
    // No Match
    RECEIPT_FLAGGED_REASON_NO_MATCH = 4;
    // Bottle Fees
    RECEIPT_FLAGGED_REASON_BOTTLE_FEES = 5;
    // Bag Fees
    RECEIPT_FLAGGED_REASON_BAG_FEES = 6;
    // Taxes
    RECEIPT_FLAGGED_REASON_TAXES = 7;
  }

  // Receipt Item Type
  enum ReceiptItemType {
    // Unspecified
    RECEIPT_ITEM_TYPE_UNSPECIFIED = 0;
    // Bag Fee
    RECEIPT_ITEM_TYPE_BAG_FEE = 1;
    // Bottle Fee
    RECEIPT_ITEM_TYPE_BOTTLE_FEE = 2;
    // Sales Tax
    RECEIPT_ITEM_TYPE_SALES_TAX = 3;
    // Alcohol Tax
    RECEIPT_ITEM_TYPE_ALCOHOL_TAX = 4;
    // Store Item
    RECEIPT_ITEM_TYPE_STORE_ITEM = 5;
  }

  // OCR Source
  enum OCRSource {
    // Unspecified
    OCR_SOURCE_UNSPECIFIED = 0;
    // Verfyi
    OCR_SOURCE_VERYFI = 1;
    // Woflow
    OCR_SOURCE_WOFLOW = 2;
    // Microblink
    OCR_SOURCE_MICROBLINK = 3;
  }

  // Receipt Item
  message ReceiptItem {
    // Required Fields
    // Name
    google.protobuf.StringValue name = 1;
    // Type
    ReceiptItemType type = 2;
    // Quantity
    google.protobuf.FloatValue quantity = 3;
    // Quantity Type
    .doordash.retail.common.v1.ItemUnit quantity_type = 4;
    // Price
    google.protobuf.Int32Value price = 5;

    // Optional Mutable Fields
    // Order Item Id
    MutableString dd_order_item_id = 2001;
    // Expected Quantity
    MutableFloat expected_quantity = 2002;
    // Expected Quantity Type
    .doordash.retail.common.v1.ItemUnit expected_quantity_type = 2003;
    // Currency
    MutableString currency = 2004;
    // Expected Price
    MutableInt32 expected_price = 2005;
    // Discount
    MutableInt32 discount = 2006;
    // Tax
    MutableInt32 tax = 2007;
    // Fee
    MutableInt32 fee = 2008;
    // Is Item Flagged
    MutableBool is_flagged = 2009;
    // Flagged Reason If Item Is Flagged
    ReceiptFlaggedReason flagged_reason = 2010;
    // Confidence Level
    MutableFloat confidence_level = 2011;
    // item UPC
    MutableString upc = 2012;
    // Expected Discount
    MutableInt32 expected_discount = 2013;
    // Expected tax
    MutableInt32 expected_tax = 2014;
    // Expected fee
    MutableInt32 expected_fee = 2015;
    // Is Item Taxable
    MutableBool is_taxable = 2016;
    // Expected Is Item Taxable
    MutableBool expected_is_taxable = 2017;
  }
  // Required Fields
  // Delivery Uuid
  google.protobuf.StringValue delivery_uuid = 1;
  // Receipt Status
  ReceiptStatus receipt_status = 2;
  // Create At
  MutableTimestamp created_at = 3;

  // Mutable Optional Fields
  // Store Id
  MutableString store_id = 2001;
  // Business Id
  MutableString business_id = 2002;
  // Dasher Id
  MutableString dasher_id = 2003;
  // Parsed OCR Raw Response
  MutableString raw_data = 2004;
  // Receipt Items
  repeated ReceiptItem items = 2005;
  // Source of OCR response
  OCRSource ocr_source = 2006;
  // Total Tax
  google.protobuf.Int32Value total_tax = 2007;
  // Total Expected Tax
  google.protobuf.Int32Value expected_total_tax = 2008;
  // Total Bag Fees
  MutableInt32 bag_fees = 2009;
  // Total Expected Bag Fees
  MutableInt32 expected_bag_fees = 2010;
  // Total Bottle Fees
  MutableInt32 bottle_fees = 2011;
  // Total Expected Bottle Fees
  MutableInt32 expected_bottle_fees = 2012;
  // Combined set of reasons this receipt is flagged, if any
  repeated ReceiptFlaggedReason flagged_reasons = 2013;
  // Subtotal
  MutableInt32 subtotal = 2014;
  // Expected Subtotal
  MutableInt32 expected_subtotal = 2015;
  // Total Price
  MutableInt32 total_price = 2016;
  // Expected Total Price
  MutableInt32 expected_total_price = 2017;
  // Is the image a receipt
  MutableBool is_receipt = 2018;
  // Is the image blurry
  MutableBool is_blurry = 2019;
}

// Store Item Event
message StoreItemEventData {
  // Uuid
  string uuid = 1;
  // Store id
  google.protobuf.StringValue store_id = 2;
  // merchant supplied id
  google.protobuf.StringValue merchant_supplied_id = 3;
  // Updated by
  MutableString updated_by = 151;
  // Updated at
  MutableTimestamp updated_at = 152;
  // Found at timestamp
  MutableTimestamp last_found_at = 153;
}

// Request for getting store item event data
message GetEventForStoreItemRequest {
  // uuid list
  repeated string uuids = 1;
}

// Response for getting store item event data
message GetEventForStoreItemResponse {
  // Event data for store items
  repeated StoreItemEventData store_item_events = 1;
}

// Token Rate Limit Record
message TokenRateLimitRecord {
  // status code for result parsing between different stages
  enum TokenType {
    // unspecified token type
    TOKEN_TYPE_UNSPECIFIED = 0;
    // token type for shopping hint
    TOKEN_TYPE_SHOPPING_HINT = 1;
    // token type for Poor Food Quality(PFQ) nudge
    TOKEN_TYPE_PFQ_NUDGE = 2;
  }
  // uuid
  google.protobuf.StringValue uuid = 1;
  // dasher id
  google.protobuf.StringValue dasher_id = 2;
  // token type
  TokenType token_type = 3;
  // optional category
  google.protobuf.StringValue category = 1001;
  // optional dd_sic
  google.protobuf.StringValue dd_sic = 1002;
  // optional business id
  google.protobuf.StringValue business_id = 1003;
  // optional store id
  google.protobuf.StringValue store_id = 1004;
  // optional merchant supplied id
  google.protobuf.StringValue merchant_supplied_id = 1005;
  // token count
  MutableInt32 token_count = 2001;
  // last used at timestamp
  MutableTimestamp last_used_at = 2002;
  // updated by
  MutableString updated_by = 2003;
  // updated at
  MutableTimestamp updated_at = 2004;
}

// Request for getting token rate limit records
message GetTokenRateLimitRecordRequest {
  // list of UUIDs
  repeated google.protobuf.StringValue uuids = 1;
}

// Response for getting token rate limit records
message GetTokenRateLimitRecordResponse {
  // Token rate limit records
  repeated TokenRateLimitRecord token_rate_limit_records = 1;
}

// Item Community Photo
message ItemCommunityPhoto {
  // photo attributes
  message Attributes {
    // photo type
    enum PhotoType {
      // photo type unspecified
      PHOTO_TYPE_UNSPECIFIED = 0;
      // aisle photo
      PHOTO_TYPE_AISLE = 1;
      // shelf photo
      PHOTO_TYPE_SHELF = 2;
      // item in-store photo
      PHOTO_TYPE_ITEM_IN_STORE = 3;
      // item in-store-secondary photo
      PHOTO_TYPE_ITEM_IN_STORE_SECONDARY = 4;
      // item shelf tag photo
      PHOTO_TYPE_ITEM_SHELF_TAG = 5;
      // item location photo
      PHOTO_TYPE_ITEM_LOCATION = 6;
      // perishable item photo
      PHOTO_TYPE_PERISHABLE_ITEM = 7;
    }
    //photo type
    PhotoType photo_type = 1;

    // shelf tag attributes
    message ItemShelfTagPhotoAttributes {
      // x center of bounding box in absolute pixels
      google.protobuf.Int32Value bbox_center_x = 1;
      // y center of bounding box in absolute pixels
      google.protobuf.Int32Value bbox_center_y = 2;
      // bounding box width in absolute pixels
      google.protobuf.Int32Value bbox_width = 3;
      // bounding box height in absolute pixels
      google.protobuf.Int32Value bbox_height = 4;
      // timestamp string of photo from which attributes are derived. Follow yyyy-MM-dd HH:mm:ss format
      google.protobuf.StringValue time_stamp_string = 5;
      // original image width in absolute pixels
      google.protobuf.Int32Value image_width = 6;
      // original image height in absolute pixels
      google.protobuf.Int32Value image_height = 7;
      // crop area width in absolute pixels
      google.protobuf.Int32Value crop_width = 8;
      // crop area height in absolute pixels
      google.protobuf.Int32Value crop_height = 9;
      // offset distance from edge of crop area (from edge toward the interior) in absolute pixels
      google.protobuf.Int32Value edge_offset = 10;
    }
    // shelf tag attributes
    ItemShelfTagPhotoAttributes item_shelf_tag_photo_attributes = 2;

    // dasher id
    google.protobuf.StringValue dasher_id = 3;

    // deprecated
    google.protobuf.BoolValue quality_check_status = 4;

    // quality check
    QualityCheck quality_check = 5;

    // quality check
    message QualityCheck {
      // quality check status
      google.protobuf.BoolValue status = 1;
    }
  }
  // uuid
  google.protobuf.StringValue uuid = 1;
  // store id
  google.protobuf.StringValue store_id = 2;
  // merchant supplied id
  google.protobuf.StringValue merchant_supplied_id = 3;
  // photo url
  google.protobuf.StringValue image_url = 4;
  // photo attributes
  Attributes attributes = 5;
  // item photo created at timestamp
  google.protobuf.Timestamp item_photo_created_at = 6;
  // item photo updated at timestamp
  google.protobuf.Timestamp item_photo_updated_at = 7;
}

// Request for getting item community photo
message GetItemCommunityPhotoRequest {
  // store id
  google.protobuf.StringValue store_id = 1;
  // merchant supplied ids
  repeated google.protobuf.StringValue merchant_supplied_ids = 2;
}

// Response for getting item community photo
message GetItemCommunityPhotoResponse {
  // item community photo
  repeated ItemCommunityPhoto item_community_photos = 1;
}

// Request for upserting community photo
message UpsertItemCommunityPhotoRequest {
  // item community photo
  repeated ItemCommunityPhoto item_community_photos = 1;
}

// Response for upserting community photo
message UpsertItemCommunityPhotoResponse {}

// Request for deleting community photo
message DeleteItemCommunityPhotoRequest {
  // item community photo
  repeated google.protobuf.StringValue uuids = 1;
}

// Response for deleting community photo
message DeleteItemCommunityPhotoResponse {}

// item level instructions data
message ItemInstructionsData {
  // uuid of the instruction, computed by ItemIdentifier
  // computed from (store_id, msid)
  google.protobuf.StringValue uuid = 1;
  // customer ID
  google.protobuf.StringValue customer_id = 2;
  // business id of the item
  google.protobuf.StringValue business_id = 3;
  // store id of the item
  google.protobuf.StringValue store_id = 4;
  // msid of the item
  google.protobuf.StringValue merchant_supplied_id = 5;
  // dd_sic of the item
  google.protobuf.StringValue dd_sic = 6;
  // item instructions
  .doordash.retail.common.v1.ItemInstructions item_instructions = 2001;
  // updated at
  MutableTimestamp updated_at = 2002;
  // last referenced at for TTL
  MutableTimestamp last_referenced_at = 2003;
  // updated by
  MutableString updated_by = 2004;
}

// identifier of the item
// currently only used by item level instructions api
message ItemIdentifier {
  // store_id of the item
  google.protobuf.StringValue store_id = 1;
  // business_id of the item
  google.protobuf.StringValue business_id = 2;
  // msid of the item
  google.protobuf.StringValue merchant_supplied_id = 3;
  // ddsic of the item, optional field for now
  google.protobuf.StringValue dd_sic = 4;
}

// request for GetItemInstructions api
message GetItemInstructionsRequest {
  // customer_id
  google.protobuf.StringValue customer_id = 1;
  // item identifier
  repeated ItemIdentifier item_identifiers = 2;
}

// response for GetItemInstructions api
message GetItemInstructionsResponse {
  // item level notes
  repeated ItemInstructionsData item_instructions_data = 1;
}

// request for UpsertItemInstructionsData api
message UpsertItemInstructionsRequest {
  // item notes data
  repeated ItemInstructionsData item_instructions_data = 1;
}

// response for UpsertItemInstructions api
message UpsertItemInstructionsResponse {}

// post-checkout attribute
message PostCheckoutAttribute {
  // delivery_uuid
  string delivery_uuid = 1;
  // is grocery pro photo enabled
  google.protobuf.BoolValue is_grocery_pro_photo_enabled = 2;
  // created at
  MutableTimestamp created_at = 3;
}

// get post-checkout attribute request
message GetPostCheckoutAttributeRequest {
  // delivery_uuid
  string delivery_uuid = 1;
}

// get post-checkout attribute response
message GetPostCheckoutAttributeResponse {
  // post-checkout attribute request
  PostCheckoutAttribute post_checkout_attribute = 1;
}

// upsert post-checkout attribute request
message UpsertPostCheckoutAttributeRequest {
  // post-checkout attribute request
  PostCheckoutAttribute post_checkout_attribute = 1;
}

// upsert post-checkout attribute response
message UpsertPostCheckoutAttributeResponse {}

// get list of store item identifiers (store_id, msid) by store item uuid
message GetStoreItemsIdentifiersRequest {
  // store item identifiers by store_id + msid
  message MsidStoreIdList {
    // list of msid
    repeated string merchant_supplied_ids = 1;
    // store id
    string store_id = 2;
  }
  // store item (legacy) identifiers by store_item_uuid
  message StoreItemUuidList {
    // store item uuids
    repeated string store_item_uuids = 1;
  }
  // query by either the new store_id + msid or the legacy store_item_uuid
  oneof query {
    // list of (new) store_id + msid
    MsidStoreIdList store_id_msid_list = 1;
    // list of (legacy) store item uuids
    StoreItemUuidList store_item_uuid_list = 2;
  }
}

// response for GetStoreItemsIdentifiersRequest
message GetStoreItemsIdentifiersResponse {
  // store item identifiers
  message StoreItemIdentifier {
    // store item uuid
    string store_item_uuid = 1;
    // store id
    string store_id = 2;
    // merchant supplied id
    string merchant_supplied_id = 3;
  }
  // list of store item identifiers
  repeated StoreItemIdentifier store_item_identifiers = 1;
}

// substitution snapshot table schema
message SubstitutionSnapshotData {
  // cart uuid
  google.protobuf.StringValue cart_uuid = 1;
  // store id of original item
  google.protobuf.StringValue original_item_store_id = 2;
  // msid of original item
  google.protobuf.StringValue original_item_merchant_supplied_id = 3;
  // store id of substitution item
  google.protobuf.StringValue substitution_item_store_id = 4;
  // msid of substitution item
  google.protobuf.StringValue substitution_item_merchant_supplied_id = 5;
  // created by
  google.protobuf.StringValue created_by = 6;
  // created at
  google.protobuf.Timestamp created_at = 7;
  // store item data - should be the same as what we store in OrderItem
  OrderItemData.StoreItem store_item = 8;
  // updated by
  MutableString updated_by = 2001;
  //updated at
  MutableTimestamp updated_at = 2002;
}

//response of GetSubstitutionSnapshots
message GetSubstitutionSnapshotsResponse {
  // list of substitution snapshots
  repeated SubstitutionSnapshotData substitution_snapshot_data = 1;
}

//request of GetSubstitutionSnapshots
message GetSubstitutionSnapshotsRequest {
  // cart uuid - required
  google.protobuf.StringValue cart_uuid = 1;
}

// request for UpsertSubstitutionSnapshots rpc
message UpsertSubstitutionSnapshotsRequest {
  // list of substitution Snapshots
  repeated SubstitutionSnapshotData substitution_snapshot_data = 1;
}

// response for UpsertSubstitutionSnapshots rpc
message UpsertSubstitutionSnapshotsResponse {}

// request for GetStoreDirectoryAisleInfo rpc
message GetStoreDirectoryAisleInfoRequest {
  // store id
  repeated google.protobuf.StringValue store_ids = 1;
}

// response for GetStoreDirectoryAisleInfo rpc
message GetStoreDirectoryAisleInfoResponse {
  // store directory aisle info
  repeated StoreDirectoryAisleInfo store_directory_aisle_info_list = 1;
}

// request for UpsertStoreDirectoryAisleInfo rpc
message UpsertStoreDirectoryAisleInfoRequest {
  // store directory aisle info
  repeated StoreDirectoryAisleInfo store_directory_aisle_info_list = 1;
}

// response for UpsertStoreDirectoryAisleInfo rpc
message UpsertStoreDirectoryAisleInfoResponse {}

// fulfillment plan events context data
message FulfillmentPlanEventsContextData {
  // fulfillment intent id
  google.protobuf.StringValue fulfillment_intent_id = 1;
  // cx order uuid
  google.protobuf.StringValue order_uuid = 2;
  // cx cart uuid
  google.protobuf.StringValue cx_cart_uuid = 8;
  // parent consumer order uuid
  google.protobuf.StringValue parent_consumer_order_uuid = 10;
  // fulfillment plan events version
  google.protobuf.Int64Value order_version = 3;
  // created at
  google.protobuf.Timestamp created_at = 5;
  // updated_at
  MutableTimestamp updated_at = 6;
  // cx order context
  .doordash.retail.fulfillment.planning_service.v1.CxOrderContext cx_order_context = 7;
  // fp events context
  .doordash.retail.fulfillment.planning_service.v1.FulfillmentPlanEventContext fulfillment_plan_event_context = 9;
}

// store directory aisle info
message StoreDirectoryAisleInfo {
  // store id
  google.protobuf.StringValue store_id = 1;
  // store directory aisle info
  StoreDirectoryData data = 2;
  // created at timestamp
  google.protobuf.Timestamp created_at = 3;
  // updated at timestamp
  google.protobuf.Timestamp updated_at = 4;
}

// store directory data
message StoreDirectoryData {
  // store id
  google.protobuf.StringValue store_id = 1;
  // business_id
  google.protobuf.StringValue business_id = 2;
  // max aisle data records
  repeated MaxAisleData max_aisle_data = 3;
  // DEPRECATED single_aisle_scan_info in favor of aisle_data
  reserved 4;
  reserved "single_aisle_scan_info";
  // created at timestamp
  google.protobuf.Timestamp created_at = 5;
  // updated at timestamp
  google.protobuf.Timestamp updated_at = 6;
  // Aisle information data, unique to each aisle
  repeated AisleData aisle_data = 7;
  // List of supported barcode types like ean13, code39, interleaved_2_of_5
  repeated string supported_barcode_types = 8;
  // Link to merchant approval document if dashers are asked to present it
  google.protobuf.StringValue mx_approval_document_url = 9;
  // If the store doesn't have any aisle data, we can set this field to true to collect simple aisle data (number of aisles, walls, etc.)
  google.protobuf.BoolValue should_collect_simple_aisle_info = 10;
  // Default value if a scan task doesn't override
  google.protobuf.DoubleValue default_min_shelf_tag_detection_rate_per_photo = 11;
  // aisle metadata
  AisleMetadata aisle_metadata = 12;
}

// Store Directory Photo
message StoreDirectoryPhoto {
  // Title/description of the photo
  google.protobuf.StringValue title = 1;
  // URL pointing to the photo
  google.protobuf.StringValue url = 2;
  // Photo type
  SDPhotoType photo_type = 3;
  // Create at
  google.protobuf.Timestamp created_at = 4;
  // Dasher id
  google.protobuf.StringValue dasher = 5;
  // approved or not
  google.protobuf.BoolValue approved = 6;

  // Photo type
  enum SDPhotoType {
    // Unspecified
    SD_PHOTO_TYPE_UNSPECIFIED = 0;
    // OVERVIEW_PHOTO
    SD_PHOTO_TYPE_OVERVIEW_PHOTO = 1;
  }
}

// Aisle Metadata
message AisleMetadata {
  // Aisle type
  AisleType aisle_type = 1;
  // Aisle data
  oneof data {
    // Aisle Numbered Data
    AisleNumberedData numbered_data = 2;
  }
  // Aisle Numbered Data
  message AisleNumberedData {
    // Current max aisle
    google.protobuf.Int32Value current_max_aisle = 1;
  }
}

// Aisle Type
enum AisleType {
  // Default aisle type
  AISLE_TYPE_UNSPECIFIED = 0;
  // Numbered aisle type
  AISLE_TYPE_NUMBERED = 1;
  // Non-numbered aisle type
  AISLE_TYPE_NON_NUMBERED = 2;
  // is a wall
  AISLE_TYPE_WALL = 3;
  // is an island
  AISLE_TYPE_ISLAND = 4;
  // is end cap
  AISLE_TYPE_END_CAP = 5;
  // is checkout counter
  AISLE_TYPE_CHECKOUT_COUNTER = 6;
  // is numbered but prepopulated
  AISLE_TYPE_NUMBERED_PREPOPULATED = 7;
}

// Aisle Data
message AisleData {
  // aisle number
  google.protobuf.Int32Value aisle_number = 1;
  // aisle id
  google.protobuf.StringValue aisle_id = 2;
  // aisle name
  google.protobuf.StringValue aisle_name = 3;
  // List of scan datas
  repeated ScanData scan_data = 4;
  // How many items we're expecting to scan, to help calculate current progress during scan task
  google.protobuf.Int32Value expected_unique_items = 5;
  // How much of the expected items we need to scan to consider the task completed
  google.protobuf.DoubleValue expected_coverage_percentage = 6;
  // Text instructions to accompany the task
  google.protobuf.StringValue subtitle = 7;
  // List of sample photos as guides for the task
  repeated SamplePhoto sample_photos = 8;
  // When Dx takes a photo, we check what percentage of tags have a detectable barcode
  // If that is less than this value, Dx is prompted to retake photo
  google.protobuf.DoubleValue min_shelf_tag_detection_rate_per_photo = 9;
  // Aisle UUID
  google.protobuf.StringValue aisle_uuid = 10;
  // [DEPRECATED] If the aisle is non-numerical
  reserved 11;
  reserved "is_non_numerical_aisle";
  // Aisle type
  AisleType aisle_type = 12;
  // Description
  google.protobuf.StringValue description = 13;
  // Photos related to aisle
  repeated StoreDirectoryPhoto aisle_photos = 14;
  // If dasher marked aisle as not existant
  AisleNotFoundFeedback aisle_not_found_feedback = 15;

  // Sample photos to help Dx identify the aisle
  message SamplePhoto {
    // Title/description of the photo
    google.protobuf.StringValue title = 1;
    // URL pointing to the photo
    google.protobuf.StringValue url = 2;
  }
}

// request for AisleNotFoundFeedback
message AisleNotFoundFeedback {
  // records.
  repeated Records records = 1;
  // is aisle deactivate
  google.protobuf.BoolValue is_aisle_deactivate = 2;
  // Dasher records
  message Records {
    // dasher id
    google.protobuf.StringValue dasher_id = 1;
    // created at timestamp
    google.protobuf.Timestamp created_at = 2;
  }
}

// Represents when an aisle was scanned and by which Dx
message ScanData {
  // scanned at timestamp
  google.protobuf.Timestamp scanned_at = 1;
  // task id
  google.protobuf.StringValue task_id = 2;
  // dasher who scanned the aisle
  google.protobuf.StringValue dasher_id = 3;
}

// Max aisle data
message MaxAisleData {
  // dasher id who entered the data
  string dasher_id = 1;
  // max aisle value
  int32 max_aisle = 2;
  // created at timestamp
  google.protobuf.Timestamp created_at = 3;
  // task id
  string task_id = 4;
}

// Store aisle info
message SingleAisleScanInfo {
  // aisle id
  int32 aisle_number = 1;
  // aisle uuid
  string aisle_uuid = 2;
  // aisle name
  string aisle_name = 3;
  // dasher id who scanned the aisle
  string dasher_id = 4;
  // assigned at timestamp
  google.protobuf.Timestamp assigned_at = 5;
  // scanned at timestamp
  google.protobuf.Timestamp scanned_at = 6;
  // task id
  string task_id = 7;
  // scan task id
  string scan_task_id = 8;
}

// data from fulfillment_planner_signals_orders table
message FPSignalsOrderData {
  // store id
  google.protobuf.StringValue store_id = 1;
  // delivery id
  google.protobuf.StringValue delivery_id = 2;
  // order uuid
  string order_uuid = 3;
  // created at
  google.protobuf.Timestamp created_at = 4;
  // updated at
  MutableTimestamp updated_at = 5;
  // Pickup Location (in most cases this is Store location)
  .common.Location pickup_location = 6;
  // Drop off Location (in most cases this is Cx location)
  .common.Location dropoff_location = 7;
  // quoted delivery time
  google.protobuf.Timestamp quoted_delivery_time = 8;
  // start time of delivery window
  google.protobuf.Timestamp delivery_window_start_time = 9;
  // end time of delivery window
  google.protobuf.Timestamp delivery_window_end_time = 10;
  // delivery_option_type string
  string delivery_option_type = 11;
  // if this order is ASAP order
  bool is_asap = 12;
  // if this order is a consumer pick up
  bool is_consumer_pick_up = 13;
  // business id
  google.protobuf.Int64Value business_id = 14;
  // starting point id
  google.protobuf.Int64Value starting_point_id = 15;
  // submarket id
  google.protobuf.Int64Value submarket_id = 16;
  // is order cancelled
  google.protobuf.BoolValue is_cancelled = 17;
  // has driver finished picking up the order
  google.protobuf.BoolValue driver_picked_up = 18;
}

// Create fulfillment plans context provided by caller
message CreateFulfillmentPlansContext {
  // consumer id
  string consumer_id = 1;
  // submarket id of the store
  string store_submarket_id = 2;
  // business id
  string business_id = 3;
  // store id
  string store_id = 4;
}

// Retail product store item to save in DB during substitution
message RetailProductStoreItem {
  // identifier info
  IdentifierInfo identifier_info = 1;
  // catalog info
  CatalogInfo catalog_info = 2;
  // inventory info
  InventoryInfo inventory_info = 3;

  // Identifier info about item
  message IdentifierInfo {
    // store id
    google.protobuf.StringValue store_id = 1;
    // menu item id of item
    google.protobuf.StringValue menu_item_id = 2;
    // merchant supplied id of item
    google.protobuf.StringValue merchant_supplied_id = 3;
  }

  // Catalog info about item
  message CatalogInfo {
    // item name
    google.protobuf.StringValue item_name = 1;
    // image url
    google.protobuf.StringValue image_url = 2;
    // category 1 name
    google.protobuf.StringValue category_1_name = 3;
    // scan strategy
    .doordash.retail.serving.v1.ScanStrategy scan_strategy = 4;
    // upcs list
    repeated google.protobuf.StringValue upcs_list = 5;
    // price lookup code
    google.protobuf.StringValue price_lookup_code = 6;
    // brand information
    .doordash.retail.serving.v1.Brand brand_l1 = 7;
    // variant
    .doordash.retail.serving.v1.ProductVariant variant = 8;
    // price lookup codes in general attributes
    repeated google.protobuf.StringValue general_attribute_price_lookup_codes_list = 9;
  }

  // Inventory info about item
  message InventoryInfo {
    // stock level info list
    repeated .doordash.retail.serving.v1.StockLevelInfo stock_level_info_list = 1;
    // restriction type
    .common.restriction_rules.v1.RestrictedItemType restriction_type = 2;
    // purchase info
    .common.marketplace_purchase.v1.ItemPurchaseInfo purchase_info = 3;
  }
}

// Details about store map and item locations within the map
message StoreMapItemLocationDetails {
  // identifying key for store map item location details
  google.protobuf.StringValue record_key = 1;
  // maps the item sequence number to the location of the item
  map<string, ItemLocationDetails> item_sequence_number_to_location = 2;
  // optimal path
  repeated ItemCoordinates optimal_path = 3;
  // metadata for store map
  StoreMapMetadata store_map_metadata = 4;
}

// Location details of a single item
message ItemLocationDetails {
  // merchant supplied id for the item
  google.protobuf.StringValue merchant_supplied_id = 1;
  // coordinates of the item
  ItemCoordinates coordinates = 2;
  // whether the location for the item is approximate
  google.protobuf.BoolValue is_approximate = 3;
  // whether or not it was retrieved successfully
  google.protobuf.BoolValue is_success = 4;
}

// Coordinate for an item
message ItemCoordinates {
  // x coordinate
  google.protobuf.DoubleValue x = 1;
  // y coordinate
  google.protobuf.DoubleValue y = 2;
}

// Metadata for store map
message StoreMapMetadata {
  // store map svg url
  google.protobuf.StringValue store_map_url = 1;
  // store map representation format
  MapRepresentationFormat store_map_representation_format = 2;
  // Dimensions of the store image
  MapImageDimensions store_map_image_dimensions = 3;
  // Position of the origin (0,0) coordinate
  MapOriginPosition map_origin_position = 4;

  // Origin position on the Map
  enum MapOriginPosition {
    // UNSPECIFIED
    MAP_ORIGIN_POSITION_UNSPECIFIED = 0;
    // top-left
    MAP_ORIGIN_POSITION_TOP_LEFT = 1;
    // bottom-left
    MAP_ORIGIN_POSITION_BOTTOM_LEFT = 2;
    // top-right
    MAP_ORIGIN_POSITION_TOP_RIGHT = 3;
    // bottom-right
    MAP_ORIGIN_POSITION_BOTTOM_RIGHT = 4;
    // center
    MAP_ORIGIN_POSITION_CENTER = 5;
  }

  // representation format for the store map
  enum MapRepresentationFormat {
    // Unspecified
    MAP_REPRESENTATION_FORMAT_UNSPECIFIED = 0;
    // SVG
    MAP_REPRESENTATION_FORMAT_SVG = 1;
    // PNG
    MAP_REPRESENTATION_FORMAT_PNG = 2;
  }

  // Dimensions of the map image
  message MapImageDimensions {
    // height of the image
    google.protobuf.StringValue height = 1;
    // width of the image
    google.protobuf.StringValue width = 2;
  }
}

// object containing data and metadata on selected fulfillment plans
message SelectedFulfillmentPlansData {
  // Metadata
  // either order_uuid or cart_uuid (from versioned id)
  google.protobuf.StringValue identifier_id = 1;
  // version of the plan (from versioned id)
  google.protobuf.Int64Value identifier_version = 2;
  // created at
  google.protobuf.Timestamp created_at = 3;
  // updated_at
  MutableTimestamp updated_at = 4;
  //data for the selected FP
  .doordash.retail.fulfillment.planning_service.v1.SelectedFulfillmentPlan selected_fulfillment_plan = 5;
}

// manual exemptions data
message ShoppingMetricsExemptionData {
  // computed from (rule_name)
  google.protobuf.StringValue uuid = 1;
  // Rule name
  google.protobuf.StringValue rule_name = 2;
  // Exemption Level
  .doordash.retail.dasher.v3.ExemptionLevel exemption_type = 3;
  // If the exemption is enabled
  google.protobuf.BoolValue is_active = 4;
  // Start date of the exemption
  google.protobuf.Timestamp start_date = 5;
  // End date of the exemption
  google.protobuf.Timestamp end_date = 6;
  // Optional business id to be exempted
  google.protobuf.Int64Value business_id = 7;
  // Optional store id
  google.protobuf.Int64Value store_id = 8;
  // Optional delivery uuid
  google.protobuf.StringValue delivery_uuid = 9;
  // Optional dasher id
  google.protobuf.StringValue dasher_id = 10;
  // Optional item msid
  google.protobuf.StringValue merchant_supplied_item_id = 11;
  // Optional item id
  google.protobuf.StringValue item_uuid = 12;
  // If this rule applies to original items found metric
  google.protobuf.BoolValue exempt_original_items_found = 13;
  // If this rule applies to total items found metric
  google.protobuf.BoolValue exempt_total_items_found = 14;
  // If this rule applies to substitution satisfaction metric
  google.protobuf.BoolValue exempt_substitution_satisfaction = 15;
  // If this rule applies to quality issues metric
  google.protobuf.BoolValue exempt_quality_issues = 16;
  // If this rule applies to missing and incorrect metric
  google.protobuf.BoolValue exempt_missing_and_incorrect = 17;
  // Description of the exemption
  google.protobuf.StringValue description = 18;
  // created at
  google.protobuf.Timestamp created_at = 19;
  // updated_at
  MutableTimestamp updated_at = 20;
}
