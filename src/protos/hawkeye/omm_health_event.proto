syntax = "proto3";

package hawkeye.v1;

import "google/protobuf/timestamp.proto";
import "hawkeye/ingestion_service.proto";

option go_package = "github.com/doordash/services-protobuf/generated/hawkeye";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.hawkeye";

// Use Case denotes OMM event is meant for specified use case
// This will be used by repective consumers to filter out events
// Eventually will also be used in UI
enum UseCase {
  // Event use case is unspecified
  USE_CASE_UNSPECIFIED = 0;
  // Event is meant for RCS
  USE_CASE_RCS = 1;
  // Event is meant for DVRS
  USE_CASE_DVRS = 2;
  // Event is meant for automated incidents
  USE_CASE_AUTOMATED_INCIDENTS = 3;
  // Event is meant for catchall
  USE_CASE_CATCHALL = 4; // AKA OMM v1
  // Event is meant for instantaneous health check
  USE_CASE_INSTANTANEOUS_HEALTH = 5;
  // Event is meant for ArgoCD workflow deployment
  USE_CASE_ARGOCD_WORKFLOW = 6;
  // Event is meant for notifications
  USE_CASE_NOTIFICATIONS = 7;
  // Event is meant for triggering a custom webhook
  USE_CASE_WEBHOOK = 8;
}

//This event is created after an external event goes through OMM pipeline
message OMMEvent {
  //ID of event
  string id = 1;
  //Health of the service that the event refers to
  bool healthy = 2;
  //Timestamp event is created
  google.protobuf.Timestamp create_time = 3;
  // Details of the service that the event refers to
  ServiceDetails service_details = 4;
  //Checks for this event
  Checks checks = 5;
  //GCL event related to this event
  repeated GclEvent gcl_event = 6;
  //DV event related to this event
  repeated DvEvent dv_event = 7;
  //Use case of the event
  UseCase use_case = 8;
  //Custom info for the health event
  map<string, string> custom_info = 9;
  //Updated time of the event
  google.protobuf.Timestamp update_time = 10;
}

//All checks for the event (more to come)
message Checks {
  //SLO checks for the event
  repeated SloCheck slo_checks = 1;
}

//SLO check for the event
message SloCheck {
  //SLO burn
  repeated SloBurn slo_burn = 2;
}

//SLO burn
message SloBurn {
  //Endpoint of the SLO aka id - eg: portal-web-bff-ads-experience-update-ad-campaign-latency
  string endpoint = 1;
  //Percent of SLO
  double percent = 2;
  //Timestamp of event
  google.protobuf.Timestamp event_time = 3;
  //Name of the event
  string name = 4;
  //URL to the event
  string link = 5;
  //Cell (if known, ex - cell-001)
  string cell = 6;
  //SubEnvironment (if known, ex - canary/baseline)
  string sub_environment = 7;
  //SloName is the human readable name - eg: ads-experience-update-ad-campaign-latency
  string slo_name = 8;
  //SloUuid is the  unique UUID - eg: 1e945a52-f384-7d5b-4603-757222d00cb3
  string slo_uuid = 9;
  //App as indicated in SLO alert
  string app = 10;
  //App details as shown in asset-catalog
  AppDetails app_details = 11;
}

//GCL event
message GclEvent {
  //timestamp of the gcl event
  google.protobuf.Timestamp event_time = 1;
  //Message embedded in the GCL event
  string message = 2;
  //Service as indicated by the GCL event
  string service = 3;
  //Tag of the GCL event
  string tag = 4;
  //Value before event happens
  string value_before = 5;
  //Value after event happens
  string value_after = 6;
  //Entity causes/responsible for the event
  string created_by = 7;
  //Environment of the GCL event
  string environment = 8;
  //App as indicated by the GCL event
  string app = 9;
  // app details as shown in asset-catalog
  AppDetails app_details = 10;
  // URL to the event
  string url = 11;
}

//Dynamic value event
message DvEvent {
  //timestamp of the dynamic value event
  google.protobuf.Timestamp event_time = 1;
  //Message embedded in the DV event
  string message = 2;
  //Service that DV event belongs to
  string service = 3;
  //Tag of the DV event
  string tag = 4;
  //Value before event happens
  string value_before = 5;
  //Value after event happens
  string value_after = 6;
  //Entity causes/responsible for the event
  string created_by = 7;
  //Environment of the DV
  string environment = 8;
  // URL to the event
  string url = 9;
}

//OMM defined endpoints
service OMMService {
  //GetServiceHealth returns service health for a given service name
  rpc GetServiceHealth(GetServiceHealthRequest) returns (GetServiceHealthResponse);
}

//GetServiceHealthRequest is used to get instantaneous service health from OMM.
//Service name is a required input.
message GetServiceHealthRequest {
  //Service name to get health
  string service_name = 1;
}

//GetServiceHealthResponse returns instantaneous service health from OMM.
message GetServiceHealthResponse {
  //Service health returns health in form of OMMEvent payload
  OMMEvent service_health = 1;
}
