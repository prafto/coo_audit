syntax = "proto3";

package hawkeye.v1;

import "google/protobuf/timestamp.proto";

option go_package = "github.com/doordash/services-protobuf/generated/hawkeye";
option java_multiple_files = true;
option java_package = "com.doordash.rpc.hawkeye";

// IngestionService for Hawkeye
service IngestionService {
  // send one global event to hawkeye ingestion service. return request completion status.
  rpc SendGlobalEvent(SendGlobalEventRequest) returns (SendGlobalEventResponse);
}

// type of an event
enum EventType {
  // used when event type is unspecified
  EVENT_TYPE_UNSPECIFIED = 0;
  // alerts that are sent from vendors
  EVENT_TYPE_ALERT = 1;
  // global change events that are sent from GCL
  EVENT_TYPE_GLOBAL_CHANGE = 2;
}

// tier of a service/database
enum Tier {
  // used when tier is not specified or not applicable
  TIER_UNSPECIFIED = 0;
  // Tier 0
  TIER_0 = 1;
  // Tier 1
  TIER_1 = 2;
  // Tier 2
  TIER_2 = 3;
  // Tier 3
  TIER_3 = 4;
}

// status of an event
enum EventStatus {
  // used when event status is unspecified
  EVENT_STATUS_UNSPECIFIED = 0;
  // used for alerts - alert is firing
  EVENT_STATUS_FIRING = 1;
  // used for alerts - alert is resolved
  EVENT_STATUS_RESOLVED = 2;
}

// source of an event
enum EventSource {
  // used when event source is unspecified
  EVENT_SOURCE_UNSPECIFIED = 0;
  // event (typically an alert) is from Chronosphere
  EVENT_SOURCE_CHRONOSPHERE = 1;
  // event (typically an alert) is from Dataset (Scalyr)
  EVENT_SOURCE_DATASET = 2;
  // event (typically an alert) is from Lightstep
  EVENT_SOURCE_LIGHTSTEP = 3;
  // event is from Global Change Log
  EVENT_SOURCE_GCL = 4;
}

// severity of an event
enum EventSeverity {
  // used when event severity is unspecified
  EVENT_SEVERITY_UNSPECIFIED = 0;
  // used for alerts - alert severity is 'warning'
  EVENT_SEVERITY_WARNING = 1;
  // used for alerts - alert severity is 'critical'
  EVENT_SEVERITY_CRITICAL = 2;
}

// global event
message GlobalEvent {
  // type of the event
  EventType type = 1;
  // name of the event
  string name = 2;
  // microservice name of the event as seen in asset-catalog
  string service_name = 3;
  // service details as shown in asset-catalog
  ServiceDetails service_details = 4;
  // timestamp of the event, represented as seconds and fractions of seconds at nanosecond resolution in UTC Epoch time
  google.protobuf.Timestamp timestamp = 5;
  // produce time of the event
  google.protobuf.Timestamp produce_time = 6;
  // status of the event
  EventStatus status = 7;
  // source of the event
  EventSource source = 8;
  // severity of the event
  EventSeverity severity = 9;
  // escalation policy of the event (for a CS alert, this is its notification policy slug)
  string escalation_policy = 10;
  // event tags of owner, team, service...
  map<string, string> common_tags = 11;
  // JSON of any custom info
  string custom_info = 12;
  // description of the event
  string description = 13;
  // action labels of the event
  ActionLabels action_labels = 14;
  // scope of the event for correlation consideration
  EventScope event_scope = 15;
  // event link - eg: link to the alert in the vendor's UI, or link to the GCL event in dev console
  string link = 16;
  // app name inside the service
  string app_name = 17;
  // app details as shown in asset-catalog
  AppDetails app_details = 18;
}

// service and service owner group details enriched from catalog using service lookup
message ServiceDetails {
  // name of the service
  string name = 1;
  // tier of the service/database
  Tier tier = 2;
  // alias of the owner group of the service
  string owner_group = 3;
  // ddrn of the service
  string ddrn = 4;
  // aliases of the service
  repeated string alias = 5;
  // oncall group alias aka ddpd alias of the service
  string oncall_alias = 6;
  // team primary oncall at the time
  string oncall_primary = 7;
  // slack channel of the group
  string slack_channel = 8;
  // email of the group
  string email = 9;
  // lead of the group
  string lead = 10;
}

// app details enriched from catalog using app lookup
message AppDetails {
  // name of the app
  string name = 1;
  // alias of the app
  string alias = 2;
  // ddrn of the app
  string ddrn = 3;
}

// labels to trigger different actions on the event
message ActionLabels {
  // auto create incident for this event
  bool auto_create_incident = 1;
  // notify slack channel
  bool notify_slack_channel = 2;
  // trigger a webhook to an API/service/endpoint
  bool trigger_webhook = 3;
}

// scope of the event for correlation consideration
message EventScope {
  // event should be considered for monitoring during an active change - eg: FDACD auto deploy or rollout
  bool active_change = 1;
}

// request for SendGlobalEvent
message SendGlobalEventRequest {
  // the global event that this request wants to send
  GlobalEvent event = 1;
}

// response for SendGlobalEvent
message SendGlobalEventResponse {
  // indicates if the request has been successfully processed
  bool success = 1;
}
