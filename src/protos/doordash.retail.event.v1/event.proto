syntax = "proto3";

package doordash.retail.event.v1;

import "common/inventory.proto";
import "common/marketplace_purchase.proto";
import "common/money.proto";
import "common/restriction_rules.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

// This event tracks the raw merchant provided inventory data after Nexla processing
// One event to be generated every time Nexla process an item
message MerchantProvidedItemInventoryFeedEvent {
  // UUID, used to differentiate the same item processed by multiple requests in the same timewindow.
  // Also used to associate events for the same request together.
  string request_id = 1;
  // Item information
  RetailItem item_info = 2;
  // Date when the item is generated by the merchant.
  // Currently at day level of granularity.
  google.protobuf.Timestamp merchant_generated_at = 3;
  // Timestamp when nexla generated the item.
  google.protobuf.Timestamp nexla_generated_at = 4;
  // Timestamp when the item data is processed by the retail service.
  google.protobuf.Timestamp service_processed_at = 5;
  // Source of inventory
  string source = 6;
  // Job type indicating it is full or partial
  string job_type = 7;
}

// This event tracks the retail inventory feed updates at the item level.
// One event to be generated every time the feed is processed.
message ItemInventoryFeedUpdateEvent {
  // UUID of the inventory update request
  string request_id = 1;
  // Item information
  RetailItem item_info = 2;
  // Catalog information
  RetailCatalog catalog_info = 3;
  // Event
  ItemUpdateEvent event = 4;
  // Date when the item is generated by the merchant.
  // Currently at day level of granularity.
  google.protobuf.Timestamp merchant_generated_at = 6;
  // Timestamp when the event is processed
  google.protobuf.Timestamp service_processed_at = 7;
  // Source of inventory
  string source = 8;
  // Job type indicating it is full or partial
  string job_type = 9;
  // Dummy change to re-trigger schema registration process.
}

// Retail item data model
message RetailItem {
  // Deprecated 29 (restriction_type enum)
  reserved 29;
  reserved "restriction_type";

  // Merchant Name
  string merchant_name = 1;
  // Doordash business id
  int64 business_id = 2;
  // Doordash store id
  int64 store_id = 3;
  // Merchant supplied store id
  string merchant_supplied_store_id = 4;
  // Merchant supplid item id, usually SKU id
  string merchant_supplied_item_id = 5;
  // Name of the item
  string merchant_supplied_item_name = 6;
  // Merchant supplied category, for reference only, use catalog.l1_cateogry/l2_category as SOT
  string merchant_supplied_category = 7;
  // Price of the item, required for all items.
  money.MonetaryFields price = 8;
  // Measurement price of the item, required for weighted item.
  money.MonetaryFields measurement_price = 9;
  // Approximate weighted of the item, optional from merchant.
  // For weighted item only, fallback to catalog.approxiamte_sold_as_quantity when not available.
  double approximate_sold_as_quantity = 10;
  // Tax Rate
  double tax_rate = 11;
  // Is the item active or not
  // Can due to either item out of stock or item stop offering
  // Both case appears as item out of stock in DD platform.
  bool is_active = 12;
  // Is an alcoholic item or not
  bool is_alcohol = 13;
  // Is random weight, optional from merchant, for reference only
  bool is_random_weight = 14;
  // Optional UPC of an item provided by merchant inventory file.
  string upc = 15;
  // Optional bottle fee, could come from merchant inventory file or min bottle fee
  money.MonetaryFields bottle_deposit_fee = 16;
  // Non-discount price of the item
  money.MonetaryFields non_discount_price = 17;
  // Non-discount measurement price of the item
  money.MonetaryFields non_discount_measurement_price = 18;
  // Loyalty price of the item
  money.MonetaryFields loyalty_price = 19;
  // Loyalty measurement price of the item
  money.MonetaryFields loyalty_measurement_price = 20;
  // Overriden price of the item (if one exists), will be populated during EVENT_STATUS_PRICE_OVERRIDE_ACCEPTED
  money.MonetaryFields override_price = 21;
  // Overriden measurement price of the item (if one exists), will be populated during EVENT_STATUS_PRICE_OVERRIDE_ACCEPTED
  money.MonetaryFields override_measurement_price = 22;
  // Overriden non-discount price of the item (if one exists), will be populated during EVENT_STATUS_PRICE_OVERRIDE_ACCEPTED
  money.MonetaryFields override_non_discount_price = 23;
  // Overriden non-discount measurement price of the item (if one exists), will be populated during EVENT_STATUS_PRICE_OVERRIDE_ACCEPTED
  money.MonetaryFields override_non_discount_measurement_price = 24;
  // Overriden loyalty price of the item (if one exists), will be populated during EVENT_STATUS_PRICE_OVERRIDE_ACCEPTED
  money.MonetaryFields override_loyalty_price = 25;
  // Overriden loyalty measurement price of the item (if one exists), will be populated during EVENT_STATUS_PRICE_OVERRIDE_ACCEPTED
  money.MonetaryFields override_loyalty_measurement_price = 26;
  // Merchant supplied size_modifier after formatting: remove space, keep number and digit, keep only special character . *
  string formatted_size_modifier = 27;
  // Original item id in Nexla file.
  string original_merchant_supplied_item_id = 28;
  // The restriction type of the item (e.g. ALCOHOL or OTC)
  string restriction_type_name = 30;
  // Item promotion purchase information
  repeated common.inventory.v1.ItemPromotionInfo item_promotion_info = 31;
  // Pre inflated price sent from Mx.
  money.MonetaryFields in_feed_price = 32;
  // Pre inflated measurement price sent from Mx.
  money.MonetaryFields in_feed_measurement_price = 33;
  // Pre inflated loyalty price sent from Mx.
  money.MonetaryFields in_feed_loyalty_price = 34;
  // Pre inflated loyalty measurement price sent from Mx.
  money.MonetaryFields in_feed_loyalty_measurement_price = 35;
  // Inflation rate applied
  google.protobuf.DoubleValue inflation_rate = 36;
  reserved 37, 38;
  reserved "stock_level_info", "stock_level_information";
  // Stock level info
  repeated StockLevelInfo stock_level_inf = 39;
  // Optional ddSic
  string dd_sic = 40;
  reserved 41, 42;
  reserved "quantity_in_stock", "qty_in_stock";
  // Optional balance on hands
  google.protobuf.DoubleValue quantities_in_stock = 43;
  // restricted types with level
  repeated common.restriction_rules.v1.RestrictedTypeWLevel restricted_types_w_level = 44;
  // Experiment Inflation Rate
  repeated ExperimentInflationRate experiment_inflation_rate = 45;
  // Arbitration History (JSON)
  google.protobuf.StringValue arbitration_history_json = 46;
  // Experiment attributes
  repeated ItemExperimentAttribute experiment_attributes = 47;
  // last sold date
  google.protobuf.Timestamp last_sold_date = 48;
}

// Item experiment attribute
message ItemExperimentAttribute {
  // experiment name
  string experiment_name = 1;
  // treatment name
  string treatment_name = 2;
  // RetailItem
  RetailItem retail_item = 3;
}

// Stock level info
message StockLevelInfo {
  // Stock level
  string stock_level = 1;
  // Source of stock level info
  string source = 2;
  // Experiment
  google.protobuf.StringValue experiment = 3;
  // Expire at
  google.protobuf.Timestamp expire_at = 4;
  // Model id
  google.protobuf.StringValue model_id = 5;
  // Score
  google.protobuf.StringValue score = 6;
  // Start at
  google.protobuf.Timestamp start_at = 7;
}

// Experiment Inflation Rate
message ExperimentInflationRate {
  // Experiment name
  google.protobuf.StringValue experiment_name = 1;
  // Treatment name
  google.protobuf.StringValue treatment_name = 2;
  // Inflation rate
  google.protobuf.DoubleValue inflation_rate = 3;
}

// Retail catalog
message RetailCatalog {
  // Deprecated 12 (bottle_fee_eligible)
  reserved 12;
  reserved "bottle_fee_eligible";

  // Catalog name
  string name = 1;
  // Unit
  string unit = 2;
  // Purchase type
  common.marketplace_purchase.v1.PurchaseType purchase_type = 3;
  // L1 category
  string l1_category = 4;
  // L2 category
  string l2_category = 5;
  // Approximate Sold As Quantity, Decimal value
  google.protobuf.StringValue approximate_sold_as_quantity = 6;
  // Measurement Factor, Decimal value
  google.protobuf.StringValue measurement_factor = 7;
  // Measurement Unit
  string measurement_unit = 8;
  // Approximate Sold As Unit
  string approximate_sold_as_unit = 9;
  // Increment
  google.protobuf.StringValue increment = 10;
  // Is part of SNAP?
  google.protobuf.BoolValue belongs_to_snap = 11;
  // The restriction type of the item (e.g. ALCOHOL or OTC)
  string restriction_type_name = 13;
  // L3 category name
  string l3_category_name = 14;
  // L4 category name
  string l4_category_name = 15;
}

// Item Update Event
message ItemUpdateEvent {
  // Item update event status
  EventStatus status = 1;
  // Event detail, extra information
  string detail = 2;

  // Enum status
  enum EventStatus {
    // Unspecified event status
    EVENT_STATUS_UNSPECIFIED = 0;
    // Reject item because it failed Nexla data validation.
    EVENT_STATUS_FAIL_ITEM_DROPPED_NEXLA_VALIDATION_ERROR = 1;
    // Reject item because the no matching sku found from the catalog.
    EVENT_STATUS_FAIL_ITEM_DROPPED_ITEM_NOT_FOUND_IN_CATALOG = 2;
    // Reject item because it failed the regular hydration with the catalog data, i.e. item.name
    EVENT_STATUS_FAIL_ITEM_DROPPED_FAILED_REGULAR_HYDRATION_WITH_CATALOG = 3;
    // Reject item because it failed the weighted item information hydration with the catalog data
    EVENT_STATUS_FAIL_ITEM_DROPPED_FAILED_WI_HYDRATION_WITH_CATALOG = 4;
    // Reject item because it duplicates with other items by semantic during feed processing.
    EVENT_STATUS_FAIL_ITEM_DROPPED_DUPLICATION_BY_SEMANTIC_DURING_DECORATION = 5;
    // Mark item as inactive because of OOS prediction.
    EVENT_STATUS_FAIL_ITEM_DROPPED_PREDICTION_OUT_OF_STOCK = 6;
    // Reject item because it duplicates with other items during menu data processing.
    // This is for legacy pipeline only, as items are already deduped by the feed processor.
    EVENT_STATUS_FAIL_ITEM_DROPPED_DUPLICATION_DURING_MENU_PROCESSING = 7 [deprecated = true];
    // The item has been successfully processed and is now sent to the menu service for update.
    EVENT_STATUS_SUCCESS_ITEM_PROCESSED_SEND_TO_MENU_SERVICE_FOR_UPDATE = 8 [deprecated = true];
    // Reject item because it duplicates with other items by sku during feed processing.
    EVENT_STATUS_FAIL_ITEM_DROPPED_DUPLICATION_BY_SKU = 9;
    // Accept the item because it has been randomly selected to go into the holdout set, bypassing the OOS prediction.
    EVENT_STATUS_SUCCESS_ITEM_USED_FOR_HOLDOUT_SET = 10;
    // The item matches with the item dumped by ops for deactivation
    EVENT_STATUS_SUCCESS_ITEM_MATCHED_WITH_OPS_LIST = 11 [deprecated = true];
    // The item matches with the item dumped by dsml for deactivation
    EVENT_STATUS_SUCCESS_ITEM_MATCHED_WITH_DSML_LIST = 12 [deprecated = true];
    // Start the next section with a larger number to group the feed/menu status separately.
    // The item has been successfully processed by menu service
    EVENT_STATUS_SUCCESS_ITEM_MENU_UPDATE_SUCCESS = 1000;
    // The item failed to be updated by menu service
    EVENT_STATUS_FAIL_ITEM_MENU_UPDATE_FAIL = 1001;
    // Deactivate item because wi items were deactivated for this store/business
    EVENT_STATUS_WARN_ITEM_DEACTIVATED_WI_NOT_ALLOWED = 1002;
    // Deactivate item because alcoholic items were deactivated for this store
    EVENT_STATUS_WARN_ITEM_DEACTIVATED_ALCOHOL_NOT_ALLOWED = 1003;
    // Deactivate item because merchant requested
    EVENT_STATUS_WARN_ITEM_DEACTIVATED_BY_MERCHANT = 1004 [deprecated = true];
    // Deactivate item catalog is deactivated
    EVENT_STATUS_WARN_ITEM_DEACTIVATED_BY_CATALOG = 1005 [deprecated = true];
    // Deactivate item for the ops experimentation
    EVENT_STATUS_WARN_ITEM_DEACTIVATED_BY_OPS_EXPERIMENT = 1006 [deprecated = true];
    // This item is dropped as the entire store was dropped because item count drop rate high
    EVENT_STATUS_FAIL_ITEM_STORE_ITEM_COUNT_DROP_RATE_HIGH = 1007;
    // This item is dropped as the entire store was dropped because valid item count is low
    EVENT_STATUS_FAIL_ITEM_STORE_VALID_ITEM_COUNT_LOW = 1008;
    // Deactivate item for the dsml experimentation
    EVENT_STATUS_WARN_ITEM_DEACTIVATED_BY_DSML_EXPERIMENT = 1009 [deprecated = true];
    // Raw feed inventory failed in validation
    EVENT_STATUS_FAIL_RAW_INVENTORY_FAILED_INVALID_INVENTORY = 1010;
    // Raw feed inventory failed in unknown exception
    EVENT_STATUS_FAIL_RAW_INVENTORY_FAILED_UNKNOWN_EXCEPTION = 1011 [deprecated = true];
    // The item has been successfully hydrated
    EVENT_STATUS_SUCCESS_ITEM_HYDRATION_SUCCESS = 1012 [deprecated = true];
    // Reject item because it was not found in raw inventory
    EVENT_STATUS_FAIL_ITEM_DROPPED_FAILED_ITEM_NOT_FOUND_IN_RAW_INVENTORY = 1013 [deprecated = true];
    // Reject item because it failed the hydration with unknown exception
    EVENT_STATUS_FAIL_ITEM_DROPPED_FAILED_HYDRATION_UNKNOWN_EXCEPTION = 1014;
    // Reject item because it was failed in catalog validation step in hydration
    EVENT_STATUS_FAIL_ITEM_DROPPED_FAILED_CATALOG_VALIDATION = 1015;
    // Reject item because hydrated inventory failed to convert to menu item
    EVENT_STATUS_FAIL_ITEM_DROPPED_FAILED_HYDRATED_INVENTORY_CONVERT_TO_ITEM = 1016;
    // Reject item because hydrated inventory failed in validation
    EVENT_STATUS_FAIL_ITEM_DROPPED_FAILED_INVALID_HYDRATED_INVENTORY = 1017;
    // Item is found in Catalog, but is Inactive
    EVENT_STATUS_WARN_ITEM_DROPPED_INACTIVE_IN_CATALOG = 1018;
    // The entire store was dropped because for some items, price mutation exceeded the threshold
    EVENT_STATUS_WARN_ITEM_FAILED_STORE_ITEM_PRICE_MUTATION_EXCEEDS_THRESHOLD = 1019 [deprecated = true];
    // This item is dropped as its price mutation exceeds the threshold
    EVENT_STATUS_FAIL_ITEM_FAILED_PRICE_MUTATION_EXCEEDS_THRESHOLD = 1020;
    // This item is dropped due to error happened in price inflation decoration step
    EVENT_STATUS_FAIL_ITEM_DROPPED_PRICE_INFLATION_DECORATION_ERROR = 1021;
    // Price override was successfully persisted in raw_inventory_override table
    EVENT_STATUS_SUCCESS_PRICE_OVERRIDE_PERSISTED = 1022;
    // Validation failed on the inventory override input
    EVENT_STATUS_FAIL_PRICE_OVERRIDE_FAIL_VALIDATION = 1023;
    // Price override from non-Mx source successfully overrode the Mx price during arbitration
    EVENT_STATUS_PRICE_OVERRIDE_ACCEPTED = 1024;
    // Price override from non-Mx source was ignored
    EVENT_STATUS_WARN_PRICE_OVERRIDE_IGNORED = 1025;
    // Warn of if the item is being predicted as low in stock
    EVENT_STATUS_WARN_ITEM_STOCK_LEVEL_PREDICTION_LOW_IN_STOCK = 1026 [deprecated = true];
    // Reject item because item doesn't have highest price among same item_id
    EVENT_STATUS_FAIL_ITEM_DROPPED_DURING_MSID_DEDUP_NOT_HIGHEST_PRICE = 1027;
    // Reject item because new msid combination will be used, and waiting for new catalog creation
    EVENT_STATUS_FAIL_ITEM_DROPPED_DURING_MSID_DEDUP_USE_NEW_SKU = 1028;
    // Deactivate item because it was not part of a full menu update
    EVENT_STATUS_WARN_ITEM_DEACTIVATED_NOT_IN_FULL_MENU_UPDATE = 1029;
    // Invalid item
    EVENT_STATUS_FAIL_INVALID_ITEM = 1030 [deprecated = true];
    // MsId is invalid in catalog msid_valid_status table.
    EVENT_STATUS_FAIL_CATALOG_BLOCK_ITEM = 1031;
    // Additional raw historical feed returned and sent to hydration and menu processing
    EVENT_STATUS_SUCCESS_RAW_HISTORICAL_FEED_FETCHED = 1032 [deprecated = true];
    // The entire store was dropped because is_alcohol mutation exceeded the threshold
    EVENT_STATUS_FAIL_STORE_IS_ALCOHOL_MUTATION_EXCEEDS_THRESHOLD = 1033 [deprecated = true];
    // The item is_alcohol property has been changed since last inventory sync.
    EVENT_STATUS_WARN_ITEM_IS_ALCOHOL_MUTATED = 1034 [deprecated = true];
    // The entire store was dropped because for many items, price mutation exceeded the threshold, new name
    EVENT_STATUS_FAIL_ITEM_STORE_PRICE_MUTATIONS_EXCEED_STORE_THRESHOLD = 1035;
    // Additional raw historical feed returned and sent to hydration and menu processing, new name
    EVENT_STATUS_INFO_RAW_HISTORICAL_FEED_FETCHED = 1036;
    // The is_alcohol tag changed, thus drop item.
    EVENT_STATUS_FAIL_ITEM_IS_ALCOHOL_MUTATED = 1037;
    // Warn: the item price was outside of the baseline threshold but item was not dropped
    EVENT_STATUS_WARN_ITEM_PRICE_OUTSIDE_THRESHOLD_NOT_DROPPED = 1038;
    // info: anchor item picked up before hydration, no guarantee the anchor item will be in menu
    EVENT_STATUS_INFO_ANCHOR_ITEM_FETCHED = 1039;
    // Reject item because item levelguard rail is down
    EVENT_STATUS_FAIL_ITEM_PRICE_GUARDRAIL_DOWN = 1040;
    // Warn: the number of price inaccuracies exceeded the store threshold but the store was not dropped
    EVENT_STATUS_WARN_STORE_PRICE_INACCURACIES_EXCEED_STORE_THRESHOLD_NOT_DROPPED = 1041;
    // info: item level is_in_stock was overridden by quantity in stock
    EVENT_STATUS_INFO_ITEM_IS_IN_STOCK_OVERRIDDEN = 1042;
    // info: tax rate has been nulled out
    EVENT_STATUS_INFO_TAX_RATE_NULLIFIED = 1043;
    // info: boh has been recorded
    EVENT_STATUS_INFO_BALANCE_ON_HAND_RECORDED = 1044;
    // success: a suspension call was made on the item in RIS
    EVENT_STATUS_SUCCESS_ITEM_SUSPENDED = 1045 [deprecated = true];
    // success: an ususpension call was made on the item in RIS
    EVENT_STATUS_SUCCESS_ITEM_UNSUSPENDED = 1046 [deprecated = true];
    // info: a suspension call was made on the item in RIS
    EVENT_STATUS_INFO_ITEM_SUSPENDED = 1047;
    // info: an ususpension call was made on the item in RIS
    EVENT_STATUS_INFO_ITEM_UNSUSPENDED = 1048;
    // info: an item was inflated
    EVENT_STATUS_INFO_ITEM_INFLATED = 1049;
    // info: arbitration history was updated
    EVENT_STATUS_INFO_ARBITRATION_HISTORY_UPDATED = 1050;
    // info: arbitration history overrode inventory
    EVENT_STATUS_INFO_ARBITRATION_HISTORY_OVERRIDE_INVENTORY = 1051;
    // success: The item has been successfully process and call back from menu service
    EVENT_STATUS_SUCCESS_ITEM_MENU_CALL_BACK_SUCCESS = 1052 [deprecated = true];
    // fail: The item failed to process and call back from menu service
    EVENT_STATUS_FAIL_ITEM_MENU_CALL_BACK_FAIL = 1053 [deprecated = true];
    // info: The item has been successfully sent to menu.
    EVENT_STATUS_INFO_SENT_TO_MENU = 1054;
    // fail: The item failed to send to menu.
    EVENT_STATUS_FAIL_ITEM_SENT_TO_MENU_FAIL = 1055;
    // warn: The item availability was flipped to true and it is now badged.
    EVENT_STATUS_WARN_ITEM_SET_ACTIVE_AND_BADGED = 1056;
    // info: last sold at has been recorded
    EVENT_STATUS_INFO_LAST_SOLD_DATE_RECORDED = 1057;
  }
}

// Store level metrics event
message StoreLevelMetricsEvent {
  // Merchant Name
  string merchant_name = 1;
  // Doordash business id
  int64 business_id = 2;
  // Doordash store id
  int64 store_id = 3;
  // UUID of the request
  string request_id = 4;
  // Item count in this store, including the current and the baseline
  ItemCount item_count = 5;
  // Item count in a specific category, including the current and the baseline
  repeated ItemCountCategoryDistribution item_count_category_distribution = 6;
  // Price information in that store
  PriceInfo price_info = 7;
  // Price information in a specific category
  repeated PriceInfoCategoryDistribution price_info_category_distribution = 8;
  // the baseline information, for reference purpose, example value can be 20230315, L7D, L30D.
  string baseline = 9;
  // event status
  ItemUpdateEvent.EventStatus status = 10;
  // Source of inventory
  string source = 11;
  // Job type indicating it is full or partial
  string job_type = 12;
  // the timestamp when the event was sent at
  google.protobuf.Timestamp sent_at = 100;
}

//Item count in a specific category, including the current and the baseline
message ItemCountCategoryDistribution {
  // current active item count
  int32 current_active = 1;
  // current inactive item count
  int32 current_inactive = 2;
  // baseline active item count
  int32 baseline_active = 3;
  // baseline inactive item count
  int32 baseline_inactive = 4;
  // category name
  string category_name = 5;
  // category level
  string category_level = 6;
}

// Item count in this store, including the current and the baseline
message ItemCount {
  // current active item count
  int32 current_active = 1;
  // current inactive item count
  int32 current_inactive = 2;
  // baseline active item count
  int32 baseline_active = 3;
  // baseline inactive item count
  int32 baseline_inactive = 4;
}

// Price information in that store
message PriceInfo {
  // median price of the store in current menu request
  double current_median_price = 1;
  // median price of the store in baseline
  double baseline_median_price = 2;
  // number of items with error price
  int32 price_error_count = 3;
  // min price of current update
  double current_min_price = 4;
  // min price of baseline
  double baseline_min_price = 5;
  // max price of current update
  double current_max_price = 6;
  // max price of baseline
  double baseline_max_price = 7;
}

// Price information in a specific category
message PriceInfoCategoryDistribution {
  // median price of the store in current category
  double current_median_price = 1;
  // median price of the store in baseline
  double baseline_median_price = 2;
  // number of items with error price in this category.
  int32 price_error_count = 3;
  // category name
  string category_name = 4;
  // category level
  string category_level = 5;
  // min price of current update
  double current_min_price = 6;
  // min price of baseline
  double baseline_min_price = 7;
  // max price of current update
  double current_max_price = 8;
  // max price of baseline
  double baseline_max_price = 9;
}

// This event tracks retail catalog feed updates at the item level.
message RawCatalogFeedUpdateEvent {
  // UUID of the catalog update request
  string request_id = 1;
  // Merchant Name
  string merchant_name = 2;
  // Doordash business id
  int64 business_id = 3;
  // Merchant SKU
  string merchant_supplied_item_id = 4;
  // Merchant UPC
  string upc = 5;
  // Name of the item
  string consumer_facing_item_name = 6;
  // Item update event status
  EventStatus event_status = 7;
  // Event details, extra information
  string event_details = 8;
  // JSON object containing the raw catalog object
  string raw_catalog_object = 9;

  // Enum status
  enum EventStatus {
    // Unspecified event status
    EVENT_STATUS_UNSPECIFIED = 0;
    // Successfully processed raw catalog feed item
    EVENT_STATUS_SUCCESS_PROCESSED = 1;
    // Reject item because there was an issue during Nexla validation.
    EVENT_STATUS_FAIL_VALIDATION = 2;
  }
}

// This event tracks catalog feed job status.
message CatalogFeedJobUpdateEvent {
  // UUID of the catalog update request
  string request_id = 1;
  // Doordash business id
  int64 business_id = 2;
  // Source
  string source = 3;
  // Status
  string status = 4;
  // Message
  string message = 5;
  // Total item count
  int64 total_item_count = 6;
  // Total invalid item count
  int64 invalid_item_count = 7;
  // Timestamp when the event was sent at
  google.protobuf.Timestamp created_at = 8;
}

// This event tracks inventory feed job status.
message InventoryFeedJobUpdateEvent {
  // UUID of the inventory update request
  string request_id = 1;
  // Doordash business id
  int64 business_id = 2;
  // Doordash store id
  int64 store_id = 3;
  // Doordash merchant name
  string merchant_name = 4;
  // Source
  string source = 5;
  // Status
  string status = 6;
  // Message
  string message = 7;
  // Details
  string details = 8;
  // invalid record count
  int64 invalid_records_count = 9;
  // unknown sku records count
  int64 unknown_sku_records_count = 10;
  // Total raw item count
  int64 total_raw_item_count = 11;
  // Timestamp when the event was sent at
  google.protobuf.Timestamp created_at = 12;
  // Timestamp when the event was updated at
  google.protobuf.Timestamp updated_at = 13;
}
