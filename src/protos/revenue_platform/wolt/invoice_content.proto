syntax = "proto3";

package revenue_platform.wolt.v1;

import "google/protobuf/timestamp.proto";
import "revenue_platform/wolt/common.proto";

option java_multiple_files = true;

// Immutable data provided by the clients of invoicing-service.
message InvoiceContent {
  // Reference information for the invoice
  Reference reference = 1;

  // Type of the document
  DocumentType document_type = 2;

  // Fiscalization type
  FiscalizationType fiscalization_type = 3;

  // The method of issuing the invoice
  IssuingType issuing_type = 4;

  // Type of content the invoice contains
  ContentType content_type = 5;

  // Country in which the invoice was issued
  string country = 6;

  // Currency used in the invoice
  string currency = 7;

  // Language used in the invoice
  string language = 8;

  // Timezone when the invoice was issued
  string timezone = 9;

  // Original invoice ID
  string original_invoice_id = 10;

  // Supplier issuing the invoice
  Supplier supplier = 11;

  // Customer receiving the invoice
  Customer customer = 12;

  // Entity that is responsible for issuing the invoice
  Issuer issuer = 13;

  // Venue where the transaction took place
  Venue venue = 14;

  // Total amounts for the invoice (before taxes, etc.)
  TotalAmounts total = 15;

  // List of items included in the invoice
  repeated Item items = 16;

  // Grouping of items in the invoice
  repeated ItemGroup groups = 17;

  // Commissions
  repeated Commission commissions = 18;

  // Payment methods
  repeated PaymentMethod payment_methods = 19;

  // Issue Timestamp
  google.protobuf.Timestamp issuing_date = 20;

  // Delete Timestamp
  google.protobuf.Timestamp deletion_time = 21;

  // Oneof fields for different types of extra data based on invoice type
  oneof extra {
    // Required for purchase invoices
    PurchaseExtras purchase_extras = 22;

    // Required for Wolt sale invoices
    WoltSaleExtras wolt_sale_extras = 23;

    // Required for payout invoices
    PayoutExtras payout_extras = 28;
  }

  // Original supplier, if applicable
  Supplier original_supplier = 24;

  // Original customer, if applicable
  Customer original_customer = 25;

  // Internal type of the invoice
  InternalType internal_type = 29;

  // Reason for issuing a credit note
  string credit_note_reason = 33;

  // The date when the payment of the invoice is due
  google.protobuf.Timestamp due_date = 34;

  // Indicates if a credit note has been issued for correction purposes
  bool is_credit_note_for_correction = 35;

  // Indicates if an invoice is a VAT invoice or not
  bool is_vat_invoice = 38;

  // Which Wolt subsidiary this invoice relates to
  // WoltAgreementParty wolt_agreement_party = 40;

  // The business model
  BusinessModel business_model = 41;

  // Reserved field for future use
  reserved 39;

  // Reserved for region-specific data (if needed)
  reserved "region";
}

// Business model
enum BusinessModel {
  // Unspecified business model
  BUSINESS_MODEL_UNSPECIFIED = 0;

  // Marketplace business model
  BUSINESS_MODEL_MARKETPLACE = 1;

  // Reselling net business model
  BUSINESS_MODEL_RESELLING_NET = 2;

  // Reselling gross business model
  BUSINESS_MODEL_RESELLING_GROSS = 3;
}

// Document Type
enum DocumentType {
  // Unspecified document type
  DOCUMENT_TYPE_UNSPECIFIED = 0;

  // Invoice document type
  DOCUMENT_TYPE_INVOICE = 1;

  // Credit note document type
  DOCUMENT_TYPE_CREDIT_NOTE = 2;
}

// Fiscalization Type
enum FiscalizationType {
  // Unspecified fiscalization type
  FISCALIZATION_TYPE_UNSPECIFIED = 0;

  // Fiscalized type
  FISCALIZATION_TYPE_FISCALIZED = 1;

  // Non-fiscalized type
  FISCALIZATION_TYPE_NON_FISCALIZED = 2;
}

// Isssue Type
enum IssuingType {
  // Unspecified issuing type
  ISSUING_TYPE_UNSPECIFIED = 0;

  // Issuing on behalf
  ISSUING_TYPE_ON_BEHALF = 1;

  // Direct issuing
  ISSUING_TYPE_DIRECT = 2;
}

// Content Type
enum ContentType {
  // Unspecified content type
  CONTENT_TYPE_UNSPECIFIED = 0;

  // Delivery content type
  CONTENT_TYPE_DELIVERY = 1;

  // Purchase content type
  CONTENT_TYPE_PURCHASE = 2;

  // Purchase items content type
  CONTENT_TYPE_PURCHASE_ITEMS = 3;

  // Corporate invoice content type
  CONTENT_TYPE_CORPORATE_INVOICE = 4;

  // Deprecated: Use MERCHANT_INVOICE_GROSS and _NET instead
  CONTENT_TYPE_MERCHANT_INVOICE = 5 [deprecated = true];

  // Deprecated: Use WOLT_INVOICE_GROSS and _NET instead
  CONTENT_TYPE_WOLT_INVOICE = 6 [deprecated = true];

  // Merchant invoice gross content type
  CONTENT_TYPE_MERCHANT_INVOICE_GROSS = 7;

  // Merchant invoice net content type
  CONTENT_TYPE_MERCHANT_INVOICE_NET = 8;

  // Wolt invoice gross content type
  CONTENT_TYPE_WOLT_INVOICE_GROSS = 9;

  // Wolt invoice net content type
  CONTENT_TYPE_WOLT_INVOICE_NET = 10;

  // Courier VAT invoice content type
  CONTENT_TYPE_COURIER_VAT_INVOICE = 11;

  // Courier VAT-free invoice content type
  CONTENT_TYPE_COURIER_VAT_FREE_INVOICE = 12;

  // Post-purchase tip content type
  CONTENT_TYPE_POST_PURCHASE_TIP = 13;

  /**
   * A non-fiscalized invoice representing a single courier order.
   * A courier order is a representation of a courierâ€™s task. It can be a
   * single transaction (in Routemill parlance) or a delivery task, which
   * consists of multiple transactions (such as a pick-up and tip).
   */
  CONTENT_TYPE_COURIER_ORDER = 14;

  // Corporate payment note content type
  CONTENT_TYPE_CORPORATE_PAYMENT_NOTE = 15;

  // Corporate payment note VAT content type
  CONTENT_TYPE_CORPORATE_PAYMENT_NOTE_VAT = 16;

  // Payment confirmation content type
  CONTENT_TYPE_PAYMENT_CONFIRMATION = 17;

  // Top-up content type
  CONTENT_TYPE_TOPUP = 18;

  // Corporate subscription content type
  CONTENT_TYPE_CORPORATE_SUBSCRIPTION = 19;

  // Internal online offload content type
  CONTENT_TYPE_INTERNAL_ONLINE_OFFLOAD = 20;

  /**
   * Used when invoice contains only fees (e.g., service fee) separately
   * from basket items or delivery
   */
  CONTENT_TYPE_FEES = 21;
}

// Enum representing different item types.
enum ItemType {
  // Unspecified item type (default value)
  ITEM_TYPE_UNSPECIFIED = 0;

  // A product item
  ITEM_TYPE_PRODUCT = 1;

  // A gift card item
  ITEM_TYPE_GIFT_CARD = 2;

  // Delivery item
  ITEM_TYPE_DELIVERY = 3;

  // Discount item
  ITEM_TYPE_DISCOUNT = 4;

  // Refund item
  ITEM_TYPE_REFUND = 5;

  // Tips item
  ITEM_TYPE_TIPS = 6;

  // Commission item
  ITEM_TYPE_COMMISSION = 7;

  // Wolt sale item
  ITEM_TYPE_WOLT_SALE = 8;

  // Additional item (not part of standard item types)
  ITEM_TYPE_ADDITION = 9;

  // Deduction item
  ITEM_TYPE_DEDUCTION = 10;

  // Credit item
  ITEM_TYPE_CREDITS = 11;

  // Token item
  ITEM_TYPE_TOKENS = 12;

  // Surcharge for small orders
  ITEM_TYPE_SMALL_ORDER_SURCHARGE = 13;

  // Service fee item
  ITEM_TYPE_SERVICE_FEE = 14;

  // Fee related to corporate invoices
  ITEM_TYPE_CORPORATE_INVOICE_FEE = 15;

  // Reserved for weighted items
  ITEM_TYPE_RESERVED_FOR_WEIGHTED_ITEMS = 16;

  // Penalty applied to a merchant
  ITEM_TYPE_MERCHANT_PENALTY = 17;

  /**
   * Delivery by the merchant, not by Wolt.
   * Can be used in customer invoices or merchant payouts to Wolt.
   */
  ITEM_TYPE_SELF_DELIVERY = 18;

  // Surcharge for venue campaign
  ITEM_TYPE_VENUE_CAMPAIGN_SURCHARGE = 19;

  // Discount for venue campaign
  ITEM_TYPE_VENUE_CAMPAIGN_DISCOUNT = 20;

  // VAT for purchased payment note
  ITEM_TYPE_PAYMENT_NOTE_PURCHASE_VAT = 21;

  // Seller invoice payment note
  ITEM_TYPE_PAYMENT_NOTE_SELLER_INVOICE = 22;

  // Wolt loyalty points item
  ITEM_TYPE_WOLT_LOYALTY_POINTS = 23;

  // Adjustment for discount item
  ITEM_TYPE_DISCOUNT_ADJUSTMENT = 24;

  // Payment method item
  ITEM_TYPE_PAYMENT_METHOD = 25;

  // Merchant financing item
  ITEM_TYPE_MERCHANT_FINANCING = 26;

  // Venue campaign discount fee
  ITEM_TYPE_VENUE_CAMPAIGN_DISCOUNT_FEE = 27;

  // Subscription fee item
  ITEM_TYPE_SUBSCRIPTION_FEE = 28;

  // Fee for vehicle maintenance
  ITEM_TYPE_VEHICLE_MAINTENANCE_FEE = 29;

  // Corporate invoice discount
  ITEM_TYPE_CORPORATE_INVOICE_DISCOUNT = 30;

  // Subscription service fee discount
  ITEM_TYPE_SUBSCRIPTION_SERVICE_FEE_DISCOUNT = 31;

  // Acquisition bonus item
  ITEM_TYPE_ACQUISITION_BONUS = 32;

  // DPH bonus item
  ITEM_TYPE_DPH_BONUS = 33;

  // Peak activation bonus
  ITEM_TYPE_PEAK_ACTIVATION_BONUS = 34;

  // Zero delivery deduction item
  ITEM_TYPE_ZERO_DELIVERY_DEDUCTION = 35;

  // Internal online offload item
  ITEM_TYPE_INTERNAL_ONLINE_OFFLOAD = 36;

  // Delivery compensated by the merchant
  ITEM_TYPE_DELIVERY_COMPENSATED_BY_MERCHANT = 37;
}

// Enum representing different item subtypes.
enum ItemSubtype {
  // Unspecified subtype (default value)
  ITEM_SUBTYPE_UNSPECIFIED = 0;

  // Nighttime surcharge for venue campaigns
  ITEM_SUBTYPE_VENUE_CAMPAIGN_SURCHARGE_NIGHT_TIME_FEE = 1;

  // Service fee surcharge for venue campaigns
  ITEM_SUBTYPE_VENUE_CAMPAIGN_SURCHARGE_SERVICE_FEE = 2;

  // Surge fee for venue campaigns
  ITEM_SUBTYPE_VENUE_CAMPAIGN_SURCHARGE_SURGE_FEE = 3;

  // Envelope fee for venue campaigns
  ITEM_SUBTYPE_VENUE_CAMPAIGN_SURCHARGE_ENVELOPE_FEE = 4;

  // Bad weather fee for venue campaigns
  ITEM_SUBTYPE_VENUE_CAMPAIGN_SURCHARGE_BAD_WEATHER_FEE = 5;

  // Gift card top-up item
  ITEM_SUBTYPE_GIFT_CARD_TOPUP = 6;

  // Corporate invoice discount for subscription fee
  ITEM_SUBTYPE_CORPORATE_INVOICE_DISCOUNT_SUBSCRIPTION_FEE = 7;
}

// Enum representing different units of measure.
enum UnitType {
  // Unspecified unit (default value)
  UNIT_TYPE_UNSPECIFIED = 0;

  // Unit of measure is pieces
  UNIT_TYPE_PIECES = 1;

  // Unit of measure is grams
  UNIT_TYPE_GRAMS = 2;

  // Unit of measure is milliliters
  UNIT_TYPE_MILLILITERS = 3;
}

// Represents an item with various attributes and extras.
message Item {
  // Translatable name for the item
  TranslatableName name = 1;

  // Reference to the item
  Reference reference = 2;

  // Amounts associated with the item
  Amounts amounts = 3;

  // Amounts per unit of the item
  Amounts unit_amounts = 4;

  // VAT percentage applied to the item
  string vat_percentage = 5;

  // Number of units for the item
  int32 unit_count = 6;

  // Unit type for the item (e.g., PIECES, GRAMS)
  UnitType unit_type = 7;

  // Type of item (e.g., PRODUCT, COMMISSION)
  ItemType item_type = 8;

  // Group key for categorizing the item
  string group_key = 9;

  // Oneof fields for different types of extra data based on item type
  oneof extra {
    // Extras for product items
    ProductExtras product_extras = 10;

    // Extras for commission items
    CommissionExtras commission_extras = 11;

    // Extras for Wolt sale item
    WoltSaleItemExtras wolt_sale_item_extras = 13;

    // Corporate payment note extras
    CorporatePaymentNoteExtra corporate_payment_note_extra = 24;

    // Corporate payment note VAT extras
    CorporatePaymentNoteVatExtra corporate_payment_note_vat_extra = 25;

    // Deprecated and replaced with option_extras
    OptionExtra option_extra = 26 [deprecated = true];
  }

  // Substitution extras for the item
  SubstitutionExtras substitution_extras = 12;

  // List of substitution extras
  repeated SubstitutionExtras substitutions_extras = 20;

  // Unique ID for the item within a purchase
  string item_in_purchase_id = 14;

  // Secondary unit type for the item
  UnitType secondary_unit_type = 15;

  // Secondary unit count
  int32 secondary_unit_count = 16;

  // Exact unit count for the item
  string exact_unit_count = 17;

  // Localized name of the item
  LocalName local_name = 18;

  // Display unit for the item (e.g., "kg", "pcs")
  string display_unit = 21;

  // Subtype of the item (e.g., SURCHARGE, DISCOUNT)
  ItemSubtype item_subtype = 22;

  // Optional extras for the item
  OptionExtra option_extras = 27;

  // Time period for the item (if applicable)
  TimePeriod time_period = 28;

  /**
   * Amounts of discounts applied to this particular item.
   * - Positive values in invoices
   * - Negative values in credit notes
   * Will be missing if:
   * - No discounts are applied to the item
   * - The item itself is a discount item
   */
  Amounts discount_amounts = 32;

  // Additional group keys
  repeated string additional_group_keys = 33;
}

// Represents a time period with start and end dates.
message TimePeriod {
  // Start date of the period
  google.protobuf.Timestamp start_date = 1;

  // End date of the period
  google.protobuf.Timestamp end_date = 2;
}

// Additional data for corporate payment notes.
message CorporatePaymentNoteExtra {
  // Invoice number associated with the corporate payment note
  string invoice_number = 1;
}

// Additional VAT data for corporate payment notes.
message CorporatePaymentNoteVatExtra {
  // Purchase ID for the VAT
  string purchase_id = 1;

  // Issue date of the VAT
  google.protobuf.Timestamp issue_date = 2;
}

// Option extras for items, now deprecated in favor of option_extras.
message OptionExtra {
  // ID for the option extra
  string id = 1;

  // Translatable name for the option extra
  TranslatableName name = 2;
}

// Represents a group of items with a unique key and name.
message ItemGroup {
  // Unique identifier for the item group
  string key = 1;

  // Translatable name for the item group
  TranslatableName name = 2;

  // Payment methods at the item level
  repeated ItemLevelPaymentMethod item_level_payment_methods = 3;
}

// Represents a payment method at the item level.
message ItemLevelPaymentMethod {
  // Name of the payment method at the item level
  TranslatableName name = 1;

  // Amounts associated with the payment method
  MoneyCurrencyless amounts = 2;
}

// Represents a reference with an ID and type.
message Reference {
  // Unique identifier for the reference
  string id = 1;

  // Type of the reference (e.g., "invoice", "order")
  string type = 2;
}

// Represents a translatable name with optional variables.
message TranslatableName {
  // Translatable name value
  string value = 1;

  // Flag to indicate if translation is automatic
  bool auto_translate = 2;

  // Variables for contextual translation (e.g., placeholders)
  map<string, string> variables = 3;
}

// Represents a localized name with a language code.
message LocalName {
  // Localized name of the item
  string value = 1;

  // Language code for the local name (e.g., "en", "fr")
  string language = 2;
}

// Additional data for product items.
message ProductExtras {
  // Alcohol percentage for the product (if applicable)
  string alcohol_percentage = 1;
}

// Additional data for commission items.
message CommissionExtras {
  // Base amount for the commission
  MoneyCurrencyless base_amount = 1;

  // Relative cut for the commission (percentage, for example)
  string cut_relative = 2;

  // Absolute cut amount for the commission
  int32 cut_absolute = 3;

  // Source type for the commission (e.g., home delivery, takeaway)
  CommissionSourceType source_type = 4;
}

// Enum representing different commission source types.
enum CommissionSourceType {
  // Unspecified source type
  COMMISSION_SOURCE_TYPE_UNSPECIFIED = 0;

  // Home delivery commission
  COMMISSION_SOURCE_TYPE_HOMEDELIVERY = 1;

  // Takeaway commission
  COMMISSION_SOURCE_TYPE_TAKEAWAY = 2;

  // Eat-in commission
  COMMISSION_SOURCE_TYPE_EATIN = 3;

  // Subscription commission
  COMMISSION_SOURCE_TYPE_SUBSCRIPTION = 4;

  // Payment method SZEP commission
  COMMISSION_SOURCE_TYPE_PAYMENT_METHOD_SZEP = 5;

  // Payment method card commission
  COMMISSION_SOURCE_TYPE_PAYMENT_METHOD_CARD = 6;
}

// Represents extra information for Wolt sale items.
message WoltSaleItemExtras {
  // Tranche number for the sale item
  int32 tranche = 1;

  // External invoice ID for reference
  string external_invoice_id = 2;

  // Remaining amount for the sale item
  MoneyCurrencyless amount_left = 3;

  // Original total amount of the product sale (including VAT)
  MoneyCurrencyless original_amount = 4;

  // Type of Wolt sale (e.g., "regular", "special")
  WoltSaleType type = 5;
}

// Enum representing different payment method types.
enum PaymentMethodType {
  // Unspecified payment method
  PAYMENT_METHOD_TYPE_UNSPECIFIED = 0;

  // Payment made via money transfer
  PAYMENT_METHOD_TYPE_MONEY_TRANSFER = 1;

  // Payment made through payout netting
  PAYMENT_METHOD_TYPE_PAYOUT_NETTING = 2;

  // Payment made with credits
  PAYMENT_METHOD_TYPE_CREDITS = 3;

  // Payment made using tokens
  PAYMENT_METHOD_TYPE_TOKENS = 4;

  // Discount applied via Wolt reference delivery price
  PAYMENT_METHOD_TYPE_WOLT_REFERENCE_DELIVERY_PRICE_DISCOUNT = 5;

  // Discount applied via venue campaign
  PAYMENT_METHOD_TYPE_VENUE_CAMPAIGN_DISCOUNT = 6;

  // Payment made with Wolt loyalty points
  PAYMENT_METHOD_TYPE_WOLT_LOYALTY_POINTS = 7;

  // Refund payment method
  PAYMENT_METHOD_TYPE_REFUNDS = 8;

  // Subscription service fee discount
  PAYMENT_METHOD_TYPE_SUBSCRIPTION_SERVICE_FEE_DISCOUNT = 9;
}

// Represents a payment method with various attributes and extras.
message PaymentMethod {
  // Type of payment method
  PaymentMethodType type = 1;

  // Name of the payment method (e.g., "Credit Card", "PayPal")
  string type_name = 2;

  // Amount associated with this payment method
  MoneyCurrencyless amount = 3;

  // Oneof fields for different types of extra data based on payment method type
  oneof extra {
    // Required when type is PAYMENT_METHOD_TYPE_MONEY_TRANSFER
    MoneyTransferExtras money_transfer_extras = 4;

    // Required when type is PAYMENT_METHOD_TYPE_PAYOUT_NETTING
    PayoutNettingExtras payout_netting_extras = 5;
  }

  // Name to be displayed on the invoice (PDF)
  TranslatableName name = 8;
}

// Represents extra information for money transfer payment methods.
message MoneyTransferExtras {
  // Internal type of the payment method (e.g., "CIBUS", "APPLE_PAY")
  string type = 1;

  // Card number associated with the payment method (if applicable)
  string card_number = 2;

  // Name of the payment method (e.g., "MasterCard", "Apple Pay")
  string name = 3;

  // Corporate payment method extras, if applicable
  CorporatePaymentMethodExtras corporate_extras = 4;

  // Payment instructions for the transfer
  PaymentInstructions payment_instructions = 5;

  // Business-related information for the transfer
  string business_info = 6;

  // Unique identifier for the transaction
  string id = 7;

  // Retrieval reference number for the transaction
  string rrn = 8;

  // Timestamp when the payment was authorized
  google.protobuf.Timestamp payment_authorization_time = 9;

  // Acquirer information for the payment
  string acquirer = 10;
}

// Represents corporate payment method extras.
message CorporatePaymentMethodExtras {
  // Group details for the corporate payment method
  CorporatePaymentMethodGroup group = 1;
}

// Represents a group of corporate payment methods.
message CorporatePaymentMethodGroup {
  // Unique identifier for the payment method group
  string id = 1;

  // Name of the payment method group
  string name = 2;
}

// Represents refund confirmation extras for CIBUS.
message RefundConfirmationExtras {
  // List of items delivered in CIBUS refund confirmations
  repeated Item delivered_weighted_items = 1;
}

// Represents MobilePay refund extras.
message MobilePayRefundExtras {
  // List of items delivered
  repeated Item delivered_weighted_items = 1;

  // Items being refunded
  repeated Item refund_items = 2;

  // Groups of items being refunded
  repeated ItemGroup refund_item_groups = 3;

  // Total amounts of refunded items
  TotalAmounts refund_item_total = 5;

  // Total amounts in the original basket
  TotalAmounts original_basket_total = 6;

  // Items in the original basket
  repeated Item original_basket_items = 8;

  // Item groups in the original basket
  repeated ItemGroup original_basket_item_groups = 9;
}

// Represents payment instructions for a transaction.
message PaymentInstructions {
  // Due date for the payment
  google.protobuf.Timestamp due_date = 1;

  // Overdue interest percentage, if applicable
  string overdue_interest_percentage = 2;

  // Delay in days for the payment term
  int32 payment_term_delay_days = 3;

  // Bank account details for the recipient
  BankAccountDetails recipient_bank_account_details = 4;
}

// Represents bank account details for a recipient.
message BankAccountDetails {
  // BIC code for the recipient's bank
  string bic = 1;

  // IBAN code for the recipient's bank account
  string iban = 2;

  // Extra details for the local bank account
  repeated LocalBankAccountExtras local_bank_account_extras = 3;
}

// Represents extra details for a local bank account.
message LocalBankAccountExtras {
  // Display name for the bank account (e.g., account holder)
  string display_name = 1;

  // Value related to the bank account (e.g., account number)
  string value = 2;
}

// Represents payout netting extras.
message PayoutNettingExtras {
  // Whether the payout is recurring
  bool is_recurring = 1;

  // Maximum percentage for payout
  string max_payout_percentage = 2;

  // Minimum payout amount after deduction
  MoneyCurrencyless min_payout_amount_left_after_deduction = 3;

  // Minimum number of tranches required
  int32 min_tranches = 4;

  // Start date for the payout netting
  google.protobuf.Timestamp start_at = 5;
}

// Represents a supplier with various attributes.
message Supplier {
  // Supplier's name
  string name = 1;

  // Supplier reference details
  Reference reference = 2;

  // Supplier's address
  Address address = 3;

  // Supplier's tax ID
  string tax_id = 4;

  // Supplier's business ID
  string business_id = 5;

  // Supplier's domestic tax ID (if applicable)
  string domestic_tax_id = 6;

  // Personal name of the supplier (if applicable)
  string personal_name = 7;

  // Indicates if the supplier is a small tax payer
  bool is_small_tax_payer = 8;

  // Indicates if the supplier is VAT exempt
  bool is_vat_exempt = 9;

  // Withholding tax rate percentage (e.g., "12.30")
  string wht_percentage = 10;

  // Supplier's digital signature ID
  string digital_signature_id = 11;

  // Supplier's certificate code
  string certificate_code = 12;

  // Whether commission is taken from full VAT
  bool take_commission_from_full_vat = 13;

  // Indicates if the supplier is a foreign resident
  bool is_foreign_resident = 14;

  // Date when the contract was signed
  google.protobuf.Timestamp contract_signing_date = 15;

  // Supplier's contract number
  string contract_number = 16;
}

// Represents an issuer with various attributes.
message Issuer {
  // Issuer's name
  string name = 1;

  // Issuer reference details
  Reference reference = 2;

  // Issuer's address
  Address address = 3;

  // Issuer's business ID
  string business_id = 4;

  // Issuer's tax ID
  string tax_id = 5;
}

// Represents a customer with various attributes.
message Customer {
  // Type of customer (e.g., private user, company user)
  CustomerType type = 1;

  // Customer's name
  string name = 2;

  // Customer reference details
  Reference reference = 3;

  // Customer's address
  Address address = 4;

  // Customer's tax ID
  string tax_id = 5;

  // Customer's business ID
  string business_id = 6;

  // Customer's first name (if applicable)
  string first_name = 7;

  // Customer's last name (if applicable)
  string last_name = 8;

  // Date when the contract was signed
  google.protobuf.Timestamp contract_signing_date = 9;

  // Customer's contract number
  string contract_number = 10;

  // Domestic tax ID (if applicable, for countries like UZB)
  string domestic_tax_id = 11;
}

// Enum representing different customer types.
enum CustomerType {
  // Unspecified customer type
  CUSTOMER_TYPE_UNSPECIFIED = 0;

  // Private user customer type
  CUSTOMER_TYPE_PRIVATE_USER = 1;

  // Company user customer type
  CUSTOMER_TYPE_COMPANY_USER = 2;

  // Merchant customer type
  CUSTOMER_TYPE_MERCHANT = 3;

  // Wolt customer type
  CUSTOMER_TYPE_WOLT = 4;

  // Courier customer type
  CUSTOMER_TYPE_COURIER = 5;
}

// Represents an address with various attributes.
message Address {
  // Street address
  string street = 1;

  // Postal code
  string zip = 2;

  // City
  string city = 3;

  // Country
  string country = 4;
}

// Represents a venue with various attributes.
message Venue {
  // Venue name
  string name = 1;

  // Venue reference details
  Reference reference = 2;

  // Wolt market netsuite ID (for Wolt market venues)
  int32 wolt_market_netsuite_id = 4;

  // Venue's address
  Address address = 5;

  // Global location number for the venue
  string global_location_number = 6;

  // Brand logo image URL or identifier
  string brand_logo_image = 8;
}

// Represents total amounts with various attributes.
message PurchaseExtras {
  // Delivery address for the purchase
  Address delivery_address = 1;

  // Delivery method (e.g., "courier", "pickup")
  string delivery_method = 2;

  // Scheduled delivery time
  google.protobuf.Timestamp delivery_time = 3;

  // Customer comments related to the order
  string customer_comment = 4;

  // Whether to send an email receipt
  bool send_email_receipt = 5;

  // Email address of the user for receipt
  string user_email_address = 6;

  // Comments for corporate orders
  string corporate_order_comment = 7;

  // Type of the purchase (e.g., "one-time", "subscription")
  PurchaseType purchase_type = 8;

  // Extras for corporate purchases
  CorporatePurchaseExtras corporate_extras = 9;

  // Expiry date for credit usage
  string credit_expiry_date = 10;

  // Reserved percentage for weighted items
  string weighted_item_reserved_percentage = 12;

  // Refund confirmation extras
  RefundConfirmationExtras refund_confirmation_extras = 13;

  // Flag to hide VAT information
  bool hide_vat_info = 14;

  // Customer's tax ID for invoicing
  string customer_tax_id = 15;

  // MobilePay refund extras
  MobilePayRefundExtras mobile_pay_refund_extras = 17;

  // Flag indicating marketplace delivery
  bool is_marketplace_delivery = 18;

  // Additional email recipients for the receipt
  repeated string additional_email_recipients = 19;

  // Whether to take commission from full VAT
  bool take_commission_from_full_vat = 20;

  // Whether the customer is a Wolt Plus user
  bool is_wolt_plus_user = 21;

  // Total BCRS deposit amount
  TotalAmounts bcrs_deposit_total = 22;

  // Whether the delivery is Wolt Plus
  bool is_wolt_plus_delivery = 23;

  // Time the purchase was received
  google.protobuf.Timestamp received_at = 24;

  // Group order details
  GroupOrder group_order = 25;

  // SZEP commission percentage
  string szep_commission_percentage = 26;

  // Card commission percentage
  string card_commission_percentage = 27;

  // Cash to collect for the purchase
  MoneyCurrencyless cash_to_collect = 28;

  // Phone number of the user
  string user_phone_number = 29;
}

// Represents a total amount with various attributes.
message SubstitutionExtras {
  // Name of the substitution item
  TranslatableName name = 1;

  // List of options for substitution
  repeated TranslatableName options = 2;
}

// Wolt Sale Type
enum WoltSaleType {
  // Unspecified sale type
  WOLT_SALE_TYPE_UNSPECIFIED = 0;

  // iPad sale type
  WOLT_SALE_TYPE_IPAD = 1;

  // Printer sale type
  WOLT_SALE_TYPE_PRINTER = 2;

  // Add other sale types as necessary...

  // Samsung A04 sale type
  WOLT_SALE_TYPE_SAMSUNG_A04 = 23;

  // Sponsored listings sale type
  WOLT_SALE_TYPE_SPONSORED_LISTINGS = 24;
}

// Wolt Sale Extras
message WoltSaleExtras {
  // Type of the Wolt sale (e.g., iPad, printer, etc.)
  WoltSaleType type = 1;

  // Description of the Wolt sale
  string description = 2;

  // Serial number for the sale item (if applicable)
  string serial_number = 3;

  // Timestamp when the sale was created
  google.protobuf.Timestamp created_at = 4;
}

// Amounts for the purchase.
enum CommissionType {
  // Unspecified commission type
  COMMISSION_TYPE_UNSPECIFIED = 0;

  // Commission type based on individual items
  COMMISSION_TYPE_PER_ITEM = 1;

  // Commission type based on VAT group
  COMMISSION_TYPE_PER_VAT_GROUP = 2;

  // Commission type for self-delivery
  COMMISSION_TYPE_SELF_DELIVERY = 3;

  // Deprecated commission type (platform fee)
  COMMISSION_TYPE_PLATFORM_FEE = 4 [deprecated = true];

  // Commission type for transaction fees
  COMMISSION_TYPE_TRANSACTION_FEE = 5;
}

// Commission extras for the purchase.
message Commission {
  // Type of commission
  CommissionType type = 1;

  // Base amount for the commission
  MoneyCurrencyless base_amount = 2;

  // Percentage of the cut for the commission
  string cut_percentage = 3;

  // VAT percentage applied to the commission
  string vat_percentage = 4;

  // Approximate amounts calculated at payout time
  Amounts approximate_amounts = 5;

  // Reference for the item (required when type is COMMISSION_TYPE_PER_ITEM)
  Reference item_reference = 6;
}

// PurchaseType
enum PurchaseType {
  // Unspecified purchase type
  PURCHASE_TYPE_UNSPECIFIED = 0;

  // Regular purchase type
  PURCHASE_TYPE_PURCHASE = 1;

  // Gift card purchase type
  PURCHASE_TYPE_GIFT_CARD = 2;

  // Instant purchase type
  PURCHASE_TYPE_INSTANT_PURCHASE = 3;

  // DAAS (Device-as-a-Service) purchase type
  PURCHASE_TYPE_DAAS = 4;

  // Subscription-based purchase
  PURCHASE_TYPE_SUBSCRIPTION = 5;
}

// CorporatePurchaseExtras
message CorporatePurchaseExtras {
  // Group order details (deprecated)
  GroupOrder group_order = 1 [deprecated = true];
}

// GroupOrder
message GroupOrder {
  // Flag indicating if the host is paying
  bool is_host_paying = 1;

  // List of participants in the group order
  repeated GroupOrderParticipant participants = 2;
}

// GroupOrderParticipant
message GroupOrderParticipant {
  // Participant's first name
  string first_name = 1;

  // Participant's last name
  string last_name = 2;

  // Amounts associated with the participant
  GroupOrderParticipantAmounts amounts = 3;

  // Accounting comment for the participant
  string accounting_comment = 4;

  // Flag indicating if the participant is the host
  bool is_host = 5;

  // Group name associated with the order
  string group_name = 6;
}

// GroupOrderParticipantAmounts
message GroupOrderParticipantAmounts {
  // Final amount for the participant after adjustments
  MoneyCurrencyless end_amount = 1;

  // Amount for the items purchased
  MoneyCurrencyless items_amount = 2;

  // Delivery fee for the participant
  MoneyCurrencyless delivery_amount = 3;

  // Tip amount for the participant
  MoneyCurrencyless tips_amount = 4;

  // Credits used by the participant
  MoneyCurrencyless credits_amount = 5;

  // Delivery tokens used by the participant
  MoneyCurrencyless delivery_tokens_amount = 6;

  // Refund amount for the participant
  MoneyCurrencyless refunds_amount = 7;
}

// PayoutTimeframe
message PayoutTimeframe {
  // Start date for the payout timeframe
  google.protobuf.Timestamp start_date = 1;

  // End date for the payout timeframe
  google.protobuf.Timestamp end_date = 2;
}

// PayoutExtras
message PayoutExtras {
  // Timeframe for the payout
  PayoutTimeframe timeframe = 1;

  // Flag indicating reverse charge for the payout
  bool reverse_charge = 2;

  // List of items for invoice netting
  repeated Item invoice_netting_items = 3;

  // Due date for the payment to the creditor
  google.protobuf.Timestamp due_date = 4;

  // Flag indicating if this is a B2B payout
  bool is_b2b = 5;

  // Internal ID of the courier for the payout
  int32 courier_id = 6;

  // Employment type of the courier (e.g., employee, contractor)
  string employment_type = 7;

  // Delivery date associated with the payout
  google.protobuf.Timestamp delivery_date = 8;
}

// Internal type enum
enum InternalType {
  // Unspecified internal type
  INTERNAL_TYPE_UNSPECIFIED = 0;

  // DSM purchase for merchant user
  INTERNAL_TYPE_DSM_PURCHASE_MERC_USER = 1;

  // DSM delivery for Wolt merchant
  INTERNAL_TYPE_DSM_DELIVERY_WOLT_MERC = 2;

  // DSM purchase for Wolt user
  INTERNAL_TYPE_DSM_PURCHASE_WOLT_USER = 22;

  // DSU products for merchant user
  INTERNAL_TYPE_DSU_PRODUCTS_MERC_USER = 3;

  // DSU delivery for Wolt user
  INTERNAL_TYPE_DSU_DELIVERY_WOLT_USER = 4;

  // DSU purchase for Wolt user
  INTERNAL_TYPE_DSU_PURCHASE_WOLT_USER = 23;

  // P2P delivery for Wolt user
  INTERNAL_TYPE_P2P_DELIVERY_WOLT_USER = 37;

  // Reselling products for Wolt merchant
  INTERNAL_TYPE_RESELLING_PRODUCTS_MERC_WOLT = 5;

  // Reselling purchase for Wolt merchant
  INTERNAL_TYPE_RESELLING_PURCHASE_MERC_WOLT = 21;

  // Reselling purchase for Wolt user
  INTERNAL_TYPE_RESELLING_PURCHASE_WOLT_USER = 6;

  // Agency products for merchant user
  INTERNAL_TYPE_AGENCY_PRODUCTS_MERC_USER = 7;

  // Deprecated agency delivery for courier user
  INTERNAL_TYPE_AGENCY_DELIVERY_COUR_USER = 8 [deprecated = true];

  // Agency delivery for Wolt courier
  INTERNAL_TYPE_AGENCY_DELIVERY_COUR_WOLT = 28;

  // Agency delivery for Wolt user
  INTERNAL_TYPE_AGENCY_DELIVERY_WOLT_USER = 9;

  // Agency purchase for Wolt user
  INTERNAL_TYPE_AGENCY_PURCHASE_WOLT_USER = 24;

  // Merchant payout fees
  INTERNAL_TYPE_MERCHANT_PAYOUT_FEES = 10;

  // Merchant payout sales
  INTERNAL_TYPE_MERCHANT_PAYOUT_SALES = 11;

  // Courier payout fees
  INTERNAL_TYPE_COURIER_PAYOUT_FEES = 12;

  // Courier payout sales
  INTERNAL_TYPE_COURIER_PAYOUT_SALES = 13;

  // Wolt sale
  INTERNAL_TYPE_WOLT_SALE = 14;

  // Payout to merchant on Wolt platform
  INTERNAL_TYPE_PAYOUT_MERC_WOLT = 15;

  // Payout from Wolt to merchant
  INTERNAL_TYPE_PAYOUT_WOLT_MERC = 16;

  // Deprecated credit note
  INTERNAL_TYPE_CREDIT_NOTE = 17 [deprecated = true];

  // Corporate invoice
  INTERNAL_TYPE_CORPORATE_INVOICE = 18;

  // Corporate order confirmation
  INTERNAL_TYPE_CORPORATE_ORDER_CONFIRMATION = 25;

  // Corporate payment summary
  INTERNAL_TYPE_CORPORATE_PAYMENT_SUMMARY = 26;

  // Payout for courier with delivery fees and tips
  INTERNAL_TYPE_PAYOUT_COURIER_WOLT = 19;

  // Payout for fleet courier on Wolt platform
  INTERNAL_TYPE_PAYOUT_FLEET_COURIER_WOLT = 38;

  // Deprecated Cibus credit note
  INTERNAL_TYPE_CIBUS_CREDIT_NOTE = 20 [deprecated = true];

  // Courier order
  INTERNAL_TYPE_COURIER_ORDER = 27;

  // Corporate payment note
  INTERNAL_TYPE_CORPORATE_PAYMENT_NOTE = 29;

  // Corporate payment note VAT
  INTERNAL_TYPE_CORPORATE_PAYMENT_NOTE_VAT = 30;

  // Payment confirmation
  INTERNAL_TYPE_PAYMENT_CONFIRMATION = 31;

  // DSU delivery for Wolt merchant
  INTERNAL_TYPE_DSU_DELIVERY_WOLT_MERC = 32;

  // Reselling delivery for Wolt merchant
  INTERNAL_TYPE_RESELLING_DELIVERY_WOLT_MERC = 33;

  // Return confirmation from courier
  INTERNAL_TYPE_RETURN_CONFIRMATION_COURIER = 34;

  // Return confirmation from merchant
  INTERNAL_TYPE_RETURN_CONFIRMATION_MERCHANT = 35;

  // Reverse return for merchant
  INTERNAL_TYPE_RETURN_REVERSAL_MERCHANT = 36;
}
