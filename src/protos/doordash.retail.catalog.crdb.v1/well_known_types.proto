syntax = "proto3";

// buf:lint:ignore DIRECTORY_SAME_PACKAGE
package doordash.retail.catalog.crdb.v1;

import "common/common.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option go_package = "github.com/doordash/services-protobuf/generated/doordash/retail/catalog/crdb/v1";

/*
   This proto contains wrapped types that we commonly use for URPC attributes.
   All types that are sourced from an external source should be wrapped with
   an additional source field. Reference below for examples, should be
   straight-forward.
*/

// Source of an attribute,  e.g. manual upload tool
enum DataSource {
  // Invalid data source
  DATA_SOURCE_UNSPECIFIED = 0;
  // Manually set
  DATA_SOURCE_MANUAL = 1;
  // From salsify
  DATA_SOURCE_SALSIFY = 2;
  // From syndigo Marketplace
  DATA_SOURCE_SYNDIGO_MARKETPLACE = 3;
  // From syndigo DoorDash Owned
  DATA_SOURCE_SYNDIGO_DD_OWNED = 4;
  // From brand bank
  DATA_SOURCE_BRAND_BANK = 5;
  // From web scraping
  DATA_SOURCE_WEB = 6;
  // Manual procurement of catalogs - direct brand contact
  DATA_SOURCE_MANUAL_CATALOG_PROCUREMENT = 7;
  // Photoshoot by DD Ops team
  DATA_SOURCE_PHOTOSHOOT = 8;
  // From 1WorldSync
  DATA_SOURCE_1_WORLD_SYNC = 9;
  // From Alcohol UC
  DATA_SOURCE_ALCOHOL_UC = 10;
  // From Shutterstock
  DATA_SOURCE_SHUTTERSTOCK = 11;
  // From RNDC
  DATA_SOURCE_RNDC = 12;
  // From Nielsen
  DATA_SOURCE_NIELSEN = 13;
  // From MPC
  DATA_SOURCE_MPC = 14;
}

/* Internal types */

// BigDecimal representation in proto
message AttributedDecimal {
  // decimal precision given a decimal. ie decimal_places = 2 for 1.25
  google.protobuf.Int64Value decimal_places = 1;
  // unscale value of the decimal, ie. decimal is 1.25 then the unit_amount is 125
  google.protobuf.Int64Value unit_amount = 2;
  // required, from what source was it added
  DataSource source = 3;
}

// wrapper for an image attribute
message AttributedInternalImage {
  // optional, photo-service UUID
  google.protobuf.StringValue uuid = 1;
  // required, photo-service id
  google.protobuf.Int64Value id = 2;
  // optional, photo-service url
  google.protobuf.StringValue url = 3;
  // required, should url/uuid be backfilled
  google.protobuf.BoolValue need_backfill = 4;
  // required, from what source was it added
  DataSource source = 5;
}

// wrapper for an image attribute
message AttributedExternalImage {
  // required, photo-service id
  google.protobuf.StringValue doordash_photo_id = 1;
  // optional, photo-service UUID
  google.protobuf.StringValue doordash_photo_uuid = 2;
  // optional, photo-service url
  google.protobuf.StringValue doordash_cdn_url = 3;
  // required, external URL to source the image
  google.protobuf.StringValue cpg_url = 4;
  // optional, TODO: codelist
  google.protobuf.StringValue type_code = 5;
  // required, from what source was it added
  DataSource source = 6;
}

/* standard/external types */

// wrapper for an Int64Value
message AttributedInt64Value {
  // required, actual value
  google.protobuf.Int64Value value = 1;
  // required, from what source was it added
  DataSource source = 2;
}

// wrapper for a Float
message AttributedFloatValue {
  // required, actual value
  google.protobuf.FloatValue value = 1;
  // required, from what source was it added
  DataSource source = 2;
}

// wrapper for a Json Struct
message AttributedStruct {
  // required, actual value
  google.protobuf.Struct value = 1;
  // required, from what source was it added
  DataSource source = 2;
}

// wrapper for a bool
message AttributedBoolValue {
  // required, actual value
  google.protobuf.BoolValue value = 1;
  // required, from what source was it added
  DataSource source = 2;
}

// wrapper for a string
message AttributedStringValue {
  // required, actual value
  google.protobuf.StringValue value = 1;
  // required, from what source was it added
  DataSource source = 2;
}

// wrapper for a code value
message AttributedCodeValue {
  // required, actual code
  google.protobuf.StringValue code = 1;
  // required, from what source was it added
  DataSource source = 2;
}

// wrapper for timestamp
message AttributedTimeStamp {
  // required, actual value
  google.protobuf.Timestamp value = 1;
  // required, from what source was it added
  DataSource source = 2;
}

// wrapper for an uint4value
message AttributedUInt64Value {
  // required, actual value
  google.protobuf.UInt64Value value = 1;
  // required, from what source was it added
  DataSource source = 2;
}

/* unit typed fields
   e.g. a field can have multiple versions delineated via
   language, unit, etc
*/

// wrapper for a string with multiple locales
message LocalizedStringValue {
  // required, actual value
  google.protobuf.StringValue data = 1;
  // required, locale of the data, eg en-US
  google.protobuf.StringValue locale = 2;
  // required, from what source was it added
  DataSource source = 3;
}

// container storing multiple localized strings
message LocalizedStringValueContainer {
  // required, multiple localized values
  repeated LocalizedStringValue values = 1;
}

// wrapper for a float value that has multiple unit types
message MeasuredFloatValue {
  // required, actual value
  google.protobuf.FloatValue data = 1;
  // required, unit of the value e.g. kg
  google.protobuf.StringValue uom = 2;
  // required, from what source was it added
  DataSource source = 3;
}

// container storing multiple unit typed floats
message MeasuredFloatValueContainer {
  // required, multiple unit typed values
  repeated MeasuredFloatValue values = 1;
}

// Color Variant
message ColorVariant {
  // color name, free form string w/o validation
  AttributedStringValue color_name = 1;
  // color swatch image
  AttributedInternalImage color_swatch_image = 2;
  // The hex code for the product color (as a code with leading #, e.g. #FF5733).
  AttributedStringValue hex_code = 3;
  // The family of the color.
  ColorFamily color_family = 4;
  // The family of the color. multi-select
  repeated ColorFamily color_family_v2 = 5;
}

// These dietary tags represent various attributes and characteristics of food items or ingredients. They are used to
// provide information to consumers about the dietary properties, sourcing methods, and production practices associated
// with a particular food product.
// buf:lint:ignore ENUM_VALUE_PREFIX
enum DietaryTag {
  // Unspecified dietary tag.
  DIETARY_TAG_UNSPECIFIED = 0;
  // Indicates that the item is kosher, adhering to Jewish dietary laws.
  KOSHER = 1;
  // Indicates that the item is free from gluten, suitable for individuals with gluten intolerance or celiac disease.
  GLUTEN_FREE = 2;
  // Indicates that the item is free from dairy and dairy-derived ingredients.
  DAIRY_FREE = 3;
  // Indicates that the item is produced according to organic farming standards.
  ORGANIC = 4;
  // Indicates that the item contains no animal products or by-products.
  VEGAN = 5;
  // Indicates that the item is free from lactose, suitable for individuals with lactose intolerance.
  LACTOSE_FREE = 6;
  // Indicates that the item is free from soy and soy-derived ingredients.
  SOY_FREE = 7;
  // Indicates that the item is free from nuts and nut-derived ingredients.
  NUT_FREE = 8;
  // Indicates that the item contains peanuts or peanut-derived ingredients.
  CONTAINS_PEANUTS = 9;
  // Indicates that the item is suitable for a vegetarian diet, excluding meat and fish.
  VEGETARIAN = 10;
  // Indicates that the item is suitable for a ketogenic diet, typically low in carbohydrates and high in fats.
  KETO = 11;
  // Indicates that the item comes from animals raised on a grass-based diet.
  GRASS_FED = 12;
  // Indicates that the item complies with Islamic dietary laws.
  HALAL = 13;
  // Indicates that the item is sourced locally or raised locally.
  LOCALLY_RAISED = 14;
  // Indicates that the item has been aged under controlled conditions without moisture.
  DRY_AGED = 15;
  // Indicates that the item has been aged under controlled conditions with moisture.
  WET_AGED = 16;
  // Indicates that the item comes from animals allowed to roam freely.
  FREE_RANGE = 17;
  // Indicates that the item is produced without artificial additives or processing.
  NATURAL = 18;
  // Indicates that the item comes from animals raised without the use of hormones.
  HORMONE_FREE = 19;
  // Indicates that the item comes from animals raised without the use of antibiotics.
  ANTIBIOTIC_FREE = 20;
  // Indicates that the item comes from animals raised with consideration for their welfare.
  HUMANELY_RAISED = 21;
  // Indicates that the item comes from wild-caught seafood.
  WILD_CAUGHT = 22;
  // Indicates that the item comes from animals raised on pasture.
  PASTURE_RAISED = 23;
  // Indicates that the item comes from animals not confined to cages.
  CAFE_FREE = 24;
  // Indicates that the item has been chilled using air rather than water.
  AIR_CHILLED = 25;
  // Indicates that the item comes from traditional or historic breeds.
  HERITAGE_BREED = 26;
  // Indicates that the item comes from animals raised at a slower rate.
  SLOW_GROWTH = 27;
  // Indicates that the item is free from nitrates or nitrites.
  NITRATE_FREE = 28;
  // Indicates that the item comes from animals raised on a farm.
  FARM_RAISED = 29;
  // Indicates that the item is 100% Angus beef.
  ANGUS_100 = 30;
  // Indicates that the item is certified Angus beef.
  ANGUS_CERTIFIED = 31;
  // Indicates that the item is Fat Free
  FAT_FREE = 32;
  // Indicates that the item is with Reduced Fat
  REDUCED_FAT = 33;
  // Indicates that the item is with 58% Less Fat & 57% Less Sodium
  WITH_58_LESS_FAT_AND_57_LESS_SODIUM = 34;
  // Indicates that the item is with up to 10% salt
  UP_TO_10_SALT = 35;
  // Indicates that the item is with low cholesterol
  LOW_CHOLESTEROL = 36;
  // Indicates that the item is with reduced sodium
  REDUCED_SODIUM = 37;
  // Indicates that the item is lite
  LITE = 38;
  // Indicates that the item is Plant Based
  PLANT_BASED = 39;
  // Indicates that the item is with no sugar
  NO_SUGAR = 40;
  // Indicates that the item is with Lower Sodium
  LOWER_SODIUM = 41;
  // Indicates that the item is Meat Free
  MEAT_FREE = 42;
  // Indicates that the item is naturally flavored
  NATURALLY_FLAVORED = 43;
  // Indicates that the item is low calories
  LOW_CALORIES = 44;
  // Indicates that the item is high protein
  HIGH_PROTEIN = 45;
  // Indicates that the item is msc certified
  MSC_CERTIFIED = 46;
  // Indicates that the item is with-grain
  WITH_GRAIN = 47;
  // Indicates that the item is grain free
  GRAIN_FREE = 48;
  // Indicates that the item is non gmo
  NON_GMO = 49;
  // Indicates that the item is raw
  RAW = 50;
  // Indicates that the item is non-alcoholic
  NON_ALCOHOLIC = 51;
  // Indicates that the item is alcoholic
  ALCOHOLIC = 52;
  // Indicates that the item is sulfite free
  SULFITE_FREE = 53;
  // Indicates that the item is lean.
  DIETARY_TAG_LEAN = 54;
  // Indicates that the item is cholesterol free.
  CHOLESTEROL_FREE = 55;
  // Indicates that the item has no sugar added.
  NO_SUGAR_ADDED = 56;
  // Indicates that the item is low in calories.
  LOW_CALORIE = 57;
  // Indicates that the item is high in fiber.
  HIGH_FIBER = 58;
  // Indicates that the item is suitable for a paleo diet.
  PALEO = 59;
  // Indicates that the item is glatt kosher, adhering to a higher standard of kosher dietary laws.
  GLATT_KOSHER = 60;
  // Indicates that the item is 98% fat free.
  FAT_FREE_98 = 61;
  // Indicates that the item is sugar free.
  SUGAR_FREE = 62;
  // Indicates that the item is high in calcium.
  CALCIUM = 63;
  // Indicates that the item is high in omega-3 fatty acids.
  OMEGA_3 = 64;
  // Indicates that the item is low in fat.
  LOW_FAT = 65;
  // Indicates that the item is 97% fat free.
  FAT_FREE_97 = 66;
  // Indicates that the item is produced using biodynamic farming practices, which go beyond organic standards
  BIODYNAMIC = 67;
  // Indicates that the item (typically wine) has not been filtered before bottling
  UNFILTERED = 68;
  // Indicates that the item (typically wine) was fermented using naturally occurring yeasts
  NATIVE_YEAST = 69;
  // Indicates that the item (typically wine) was made with extended grape skin contact during fermentation
  SKIN_CONTACT = 70;
  // Indicates that the item (typically wine) was aged in oak barrels
  OAK = 71;
}

// dietary tag list
message DietaryTags {
  // list of dietary tag enum value e.g. Vegan, Organic etc
  repeated DietaryTag value = 1;
  // from what source was it added
  DataSource source = 2;
}

// restriction type enum
// buf:lint:ignore ENUM_VALUE_PREFIX
enum RestrictionType {
  reserved 43, 44, 45, 46;
  reserved "SENSITIVITY_LOW", "SENSITIVITY_MEDIUM", "SENSITIVITY_HIGH";
  // restriction type unspecified
  RESTRICTION_TYPE_UNSPECIFIED = 0;
  // item is over-the-counter medicines
  OTC = 1;
  // item is alcohol
  ALCOHOL = 2;
  // item is lottery
  LOTTERY = 3;
  // item is cannabis
  CANNABIS = 4;
  // item is CBD
  CBD = 5;
  // item is thc
  THC = 6;
  // item is heavy electronics
  ELECTRONICS_HEAVY = 7;
  // item is high value gift card
  GIFT_CARD_HVF = 8;
  // item is low value gift card
  GIFT_CARD_LVF = 9;
  // item is loop gift card
  GIFT_CARD_OL = 10;
  // item is variable value gift card
  GIFT_CARD_VV = 11;
  // item is lighter
  LIGHTER = 12;
  // item is High value scratch off lottery tickets
  LOTTERY_HVSO = 13;
  // item is Low value scratch off lottery tickets
  LOTTERY_LVSO = 14;
  // item is Numbers game lottery tickets
  LOTTERY_NG = 15;
  // Catch-all for household items that are not heavily regulated but flagged as 18+ by some Mx (e.g., sharpies/glue/paint/tire inflator/rubber sealant)
  MISC = 16;
  // item is birth control
  OTC_BIRTH_CONTROL = 17;
  // item is OTC subtype DEX (currently identified as OTC)
  OTC_DEX = 18;
  // item is OTC subtype NRT/Nicotine
  OTC_NRT = 19;
  // item is OTC subtype PSE
  OTC_PSE = 20;
  // item includes anything misc that is not in DEX and PSE, generally outside USA
  OTC_MISC = 21;
  // item is fragrance products
  FRAGRANCE = 22;
  // item is fireworks
  FIREWORKS = 23;
  // item is balloons
  BALLOONS = 24;
  // item is beauty products
  BEAUTY = 25;
  // item is furniture
  FURNITURE = 26;
  // item is heavy pet food
  PET_FOOD_HEAVY = 27;
  // item is baby formula
  BABY_FORMULA = 28;
  // items related to baby care, like baby safe cutlery and feeding equipment
  BABY_CARE = 29;
  // generic medical devices like touchless infrared thermometers
  MEDICAL_DEVICE = 30;
  // otc allergy medications
  OTC_ALLERGY = 31;
  // medicine for pain
  OTC_ANALGESICS = 32;
  // items for diarrhoea (U.K. spelling)
  OTC_ANTI_DIARRHOEA = 33;
  // items for cold and flu symptoms
  OTC_COLD_FLU = 34;
  // items for coughing (lozenges
  OTC_COUGH = 35;
  // ear drops and nasal cream
  OTC_EAR_NOSE = 36;
  // laxatives
  OTC_LAXATIVES = 37;
  // skin creams eg. anti-fungal and wart cream
  OTC_SKIN_TREATMENT = 38;
  // de-oderant, specialty shampoos etc...
  PERSONAL_CARE = 39;
  // protein powders
  SPORTS_NUTRITION = 40;
  // active ingredient in over the counter overdose treatments
  OTC_NALOXONE = 41;
  // Health sensitive.
  HEALTH_SENSITIVE = 42;
  // weapon like knives
  WEAPON = 47;
  // Nicotine pouches like ZYN
  NICOTINE_POUCH = 48;
}

// wrapper for restriction type with source
message AttributedRestrictionType {
  // the restriction type of the item
  RestrictionType value = 1;
  // from what source was it added
  DataSource source = 2;
}

// scan strategy
// buf:lint:ignore ENUM_VALUE_PREFIX
enum CatalogScanStrategy {
  // Scan strategy unspecified (no value)
  CATALOG_SCAN_STRATEGY_UNSPECIFIED = 0;
  // Single scan
  SINGLE_SCAN = 1;
  // Multi scan
  MULTI_SCAN = 2;
  // Skip scan
  SKIP_SCAN = 3;
}

// catalog package information
message CatalogPackageInformation {
  // required, package_type
  PackageType package_type = 1;
  // required, indicate whether this package is eligible for charging
  bool is_package_fee_eligible = 2;
  // optional in first phase
  PackageMaterial package_material = 3;
  // optional in first phase
  google.protobuf.Int32Value unit_count = 4;
}

// Represents the type of packaging for a product.
enum PackageType {
  // The packaging type is unspecified.
  PACKAGE_TYPE_UNSPECIFIED = 0;
  // The product is packaged in a bottle.
  PACKAGE_TYPE_BOTTLE = 1;
  // The product is part of a value pack offering.
  PACKAGE_TYPE_VALUE_PACK = 2;
  // The product is packaged in a family-size container.
  PACKAGE_TYPE_FAMILY_SIZE = 3;
  // The product is individually portioned.
  PACKAGE_TYPE_INDIVIDUAL_PORTION = 4;
  // The product is part of a mega pack offering.
  PACKAGE_TYPE_MEGA_PACK = 5;
  // The product is part of a multi pack offering.
  PACKAGE_TYPE_MULTI_PACK = 6;
  // The product is part of a small pack offering.
  PACKAGE_TYPE_SMALL_PACK = 7;
  // The product is part of a twin pack offering.
  PACKAGE_TYPE_TWIN_PACK = 8;
  // The product is part of an extreme value pack offering.
  PACKAGE_TYPE_EXTREME_VALUE_PACK = 9;
  // The product is part of a jumbo pack offering.
  PACKAGE_TYPE_JUMBO_PACK = 10;
  // The product is part of a party pack offering.
  PACKAGE_TYPE_PARTY_PACK = 11;
  // The product is part of a combo pack offering.
  PACKAGE_TYPE_COMBO_PACK = 12;
  // The product is part of a bulk pack offering.
  PACKAGE_TYPE_BULK_PACK = 13;
  // The product is part of a picnic pack offering.
  PACKAGE_TYPE_PICNIC_PACK = 14;
  // The product is part of a grill pack offering.
  PACKAGE_TYPE_GRILL_PACK = 15;
  // The product is packaged in a package.
  PACKAGE_TYPE_PACKAGE = 16;
  // The product is part of an economy pack offering.
  PACKAGE_TYPE_ECONOMY_PACK = 17;
  // The product is part of a saddle pack offering.
  PACKAGE_TYPE_SADDLE_PACK = 18;
  // The product is part of a family pack offering.
  PACKAGE_TYPE_FAMILY_PACK = 19;
  // The product is part of a club pack offering.
  PACKAGE_TYPE_CLUB_PACK = 20;
  // The product is packaged in a bag.
  PACKAGE_TYPE_BAG = 21;
  // The product is packaged in a bunch.
  PACKAGE_TYPE_BUNCH = 22;
  // The product is packaged in a can.
  PACKAGE_TYPE_CAN = 23;
  // The product is packaged in a carton.
  PACKAGE_TYPE_CARTON = 24;
  // The product is packaged in a juice box.
  PACKAGE_TYPE_JUICE_BOX = 25;
  // The product is packaged in a multi meal deal.
  PACKAGE_TYPE_MULTI_MEAL_DEAL = 26;
  // The product is packaged in a pouch.
  PACKAGE_TYPE_POUCH = 27;
  // The product is packaged in an appetizer platter.
  PACKAGE_TYPE_APPETIZER_PLATTER = 28;
  // The product is packaged in a basket.
  PACKAGE_TYPE_BASKET = 29;
  // The product is packaged in a bin.
  PACKAGE_TYPE_BIN = 30;
  // The product is packaged in a bowl.
  PACKAGE_TYPE_BOWL = 31;
  // The product is packaged in a box.
  PACKAGE_TYPE_BOX = 32;
  // The product is packaged in a brick pack.
  PACKAGE_TYPE_BRICK_PACK = 33;
  // The product is packaged in a bucket.
  PACKAGE_TYPE_BUCKET = 34;
  // The product is packaged in a case.
  PACKAGE_TYPE_CASE = 35;
  // The product is packaged in a catering tray.
  PACKAGE_TYPE_CATERING_TRAY = 36;
  // The product is packaged in a chat pack.
  PACKAGE_TYPE_CHAT_PACK = 37;
  // The product is packaged in a chill pack.
  PACKAGE_TYPE_CHILL_PACK = 38;
  // The product is packaged in a chub.
  PACKAGE_TYPE_CHUB = 39;
  // The product is packaged in clear wrap.
  PACKAGE_TYPE_CLEAR_WRAP = 40;
  // The product is packaged in a combo box.
  PACKAGE_TYPE_COMBO_BOX = 41;
  // The product is packaged in a cryovac.
  PACKAGE_TYPE_CRYOVAC = 42;
  // The product is packaged in a cup.
  PACKAGE_TYPE_CUP = 43;
  // The product is packaged in an eco tray pack.
  PACKAGE_TYPE_ECO_TRAY_PACK = 44;
  // The product is packaged in a euro box.
  PACKAGE_TYPE_EURO_BOX = 45;
  // The product is packaged in an extra value pack.
  PACKAGE_TYPE_EXTRA_VALUE_PACK = 46;
  // The product is packaged in an easy-open package.
  PACKAGE_TYPE_EZ_OPEN = 47;
  // The product is packaged in foil wrap.
  PACKAGE_TYPE_FOIL_WRAPPED = 48;
  // The product is packaged in a full-size container.
  PACKAGE_TYPE_FULL_SIZE = 49;
  // The product is packaged in a giant pack.
  PACKAGE_TYPE_GIANT_PACK = 50;
  // The product is individually bagged.
  PACKAGE_TYPE_INDIVIDUALLY_BAGGED = 51;
  // The product is individually vacuum packed.
  PACKAGE_TYPE_INDIVIDUALLY_VACUUM_PACKED = 52;
  // The product is individually wrapped.
  PACKAGE_TYPE_INDIVIDUALLY_WRAPPED = 53;
  // The product is packaged in a jar.
  PACKAGE_TYPE_JAR = 54;
  // The product is packaged in a jumbo tray.
  PACKAGE_TYPE_JUMBO_TRAY = 55;
  // The product is packaged in a kit.
  PACKAGE_TYPE_KIT = 56;
  // The product is packaged in lidstock.
  PACKAGE_TYPE_LIDSTOCK = 57;
  // The product is packaged in a market box.
  PACKAGE_TYPE_MARKET_BOX = 58;
  // The product is packaged in a mesh bag.
  PACKAGE_TYPE_MESH_BAG = 59;
  // The product is packaged in a packet.
  PACKAGE_TYPE_PACKET = 60;
  // The product is packaged in a party tray.
  PACKAGE_TYPE_PARTY_TRAY = 61;
  // The product is packaged in a perforated pack.
  PACKAGE_TYPE_PERF_PACK = 62;
  // The product is packaged in a pillow pack.
  PACKAGE_TYPE_PILLOW_PACK = 63;
  // The product is packaged in a platter.
  PACKAGE_TYPE_PLATTER = 64;
  // The product is packaged in pods.
  PACKAGE_TYPE_PODS = 65;
  // The product is potted.
  PACKAGE_TYPE_POTTED = 66;
  // The product is prepackaged.
  PACKAGE_TYPE_PREPACKAGED = 67;
  // The product is packaged in a prepacked bag.
  PACKAGE_TYPE_PREPACKED_BAG = 68;
  // The product is packaged in a prepacked box.
  PACKAGE_TYPE_PREPACKED_BOX = 69;
  // The product is packaged in a quad pack.
  PACKAGE_TYPE_QUAD_PACK = 70;
  // The product is packaged in a ready pack.
  PACKAGE_TYPE_READY_PACK = 71;
  // The product is packaged in a resealable package.
  PACKAGE_TYPE_RESEALABLE = 72;
  // The product is packaged in a retail pack.
  PACKAGE_TYPE_RETAIL_PACK = 73;
  // The product is packaged in a sack.
  PACKAGE_TYPE_SACK = 74;
  // The product is packaged in a shuttle pack.
  PACKAGE_TYPE_SHUTTLE_PACK = 75;
  // The product is packaged in a skin pack.
  PACKAGE_TYPE_SKIN_PACK = 76;
  // The product is packaged in a snack pack.
  PACKAGE_TYPE_SNACK_PACK = 77;
  // The product is packaged in a soft container.
  PACKAGE_TYPE_SOFT_CONTAINER = 78;
  // The product is packaged in a steamer bag.
  PACKAGE_TYPE_STEAMER_BAG = 79;
  // The product is packaged in a tin.
  PACKAGE_TYPE_TIN = 80;
  // The product is packaged in a to-go pack.
  PACKAGE_TYPE_TO_GO_PACK = 81;
  // The product is packaged in a tote.
  PACKAGE_TYPE_TOTE = 82;
  // The product is packaged in a tray.
  PACKAGE_TYPE_TRAY = 83;
  // The product is packaged in a trio tray.
  PACKAGE_TYPE_TRIO_TRAY = 84;
  // The product is packaged in a trio.
  PACKAGE_TYPE_TRIO = 85;
  // The product is packaged in a tub.
  PACKAGE_TYPE_TUB = 86;
  // The product is packaged in a tube.
  PACKAGE_TYPE_TUBE = 87;
  // The product is vacuum packed.
  PACKAGE_TYPE_VACUUM_PACKED = 88;
  // The product is packaged in a variety pack.
  PACKAGE_TYPE_VARIETY_PACK = 89;
  // The product is packaged in water.
  PACKAGE_TYPE_WATER_PACKED = 90;
  // The product is packaged in a wood box.
  PACKAGE_TYPE_WOOD_BOX = 91;
  // The product is wrapped.
  PACKAGE_TYPE_WRAPPED = 92;
  // The product is packaged in a zip bag.
  PACKAGE_TYPE_ZIP_BAG = 93;
  // The product is packaged in an application kit.
  PACKAGE_TYPE_APPLICATION_KIT = 94;
  // The product is packaged in a blind bag.
  PACKAGE_TYPE_BLIND_BAG = 95;
  // The product is packaged in a blister pack.
  PACKAGE_TYPE_BLISTER_PACK = 96;
  // The product is packaged in a box kit.
  PACKAGE_TYPE_BOX_KIT = 97;
  // The product is packaged in a deluxe pack.
  PACKAGE_TYPE_DELUXE_PACK = 98;
  // The product is packaged in a dopp kit.
  PACKAGE_TYPE_DOPP_KIT = 99;
  // The product is packaged in a dropper bottle.
  PACKAGE_TYPE_DROPPER_BOTTLE = 100;
  // The product is packaged in a flacon.
  PACKAGE_TYPE_FLACON = 101;
  // The product is packaged in a flip kit.
  PACKAGE_TYPE_FLIP_KIT = 102;
  // The product is packaged in a gift bag.
  PACKAGE_TYPE_GIFT_BAG = 103;
  // The product is packaged in a gift box.
  PACKAGE_TYPE_GIFT_BOX = 104;
  // The product is packaged in a glass bottle.
  PACKAGE_TYPE_GLASS_BOTTLE = 105;
  // The product is packaged in a holiday pack.
  PACKAGE_TYPE_HOLIDAY_PACK = 106;
  // The product is packaged in a mini set.
  PACKAGE_TYPE_MINI_SET = 107;
  // The product is packaged in new packaging.
  PACKAGE_TYPE_NEW_PACKAGING = 108;
  // The product is packaged in a pan palette.
  PACKAGE_TYPE_PAN_PALETTE = 109;
  // The product is packaged in a pocket palette.
  PACKAGE_TYPE_POCKET_PALETTE = 110;
  // The product is packaged in a purse pack.
  PACKAGE_TYPE_PURSE_PACK = 111;
  // The product is packaged in a refill pack.
  PACKAGE_TYPE_REFILL_PACK = 112;
  // The product is packaged in a single pack.
  PACKAGE_TYPE_SINGLE_PACK = 113;
  // The product is packaged in a travel duo.
  PACKAGE_TYPE_TRAVEL_DUO = 114;
  // The product is packaged in a travel pack.
  PACKAGE_TYPE_TRAVEL_PACK = 115;
  // The product is packaged in a wrapped cap.
  PACKAGE_TYPE_WRAPPED_CAP = 116;
  // The product is packaged in a gift pack.
  PACKAGE_TYPE_GIFT_PACK = 117;
  // The product is packaged in a bundle.
  PACKAGE_TYPE_BUNDLE = 118;
  // The product is packaged in a starter kit.
  PACKAGE_TYPE_STARTER_KIT = 119;
  // The product is packaged in a vial.
  PACKAGE_TYPE_VIAL = 120;
  // The product is packaged in a sachet.
  PACKAGE_TYPE_SACHET = 121;
  // The product is packaged in a cube.
  PACKAGE_TYPE_CUBE = 122;
  // The product is packaged in a sphere.
  PACKAGE_TYPE_SPHERE = 123;
  // The product is packaged in an egg.
  PACKAGE_TYPE_EGG = 124;
  // The product is packaged in a barrel.
  PACKAGE_TYPE_BARREL = 125;
  // The product is packaged in a big pack.
  PACKAGE_TYPE_BIG_PACK = 126;
  // The product is packaged in a caddy.
  PACKAGE_TYPE_CADDY = 127;
  // The product is packaged in a canister.
  PACKAGE_TYPE_CANISTER = 128;
  // The product is packaged in a cone.
  PACKAGE_TYPE_CONE = 129;
  // The product is packaged in a gable box.
  PACKAGE_TYPE_GABLE_BOX = 130;
  // The product is packaged in a lunch pack.
  PACKAGE_TYPE_LUNCH_PACK = 131;
  // The product is packaged in a sharing bag.
  PACKAGE_TYPE_SHARING_BAG = 132;
  // The product is packaged in a skinny pack.
  PACKAGE_TYPE_SKINNY_PACK = 133;
  // The product is packaged in a cool pack.
  PACKAGE_TYPE_COOL_PACK = 134;
  // The product is packaged in a fridge mate.
  PACKAGE_TYPE_FRIDGE_MATE = 135;
  // The product is packaged in a fridge pack.
  PACKAGE_TYPE_FRIDGE_PACK = 136;
  // The product is packaged in a bib.
  PACKAGE_TYPE_BIB = 137;
  // The product is packaged in a stick pack.
  PACKAGE_TYPE_STICK_PACK = 138;
  // The product is packaged in a tetra pack.
  PACKAGE_TYPE_TETRA_PACK = 139;
  // The product is packaged in tea bags.
  PACKAGE_TYPE_TEA_BAGS = 140;
  // The product is packaged in a euro tray.
  PACKAGE_TYPE_EURO_TRAY = 141;
  // The product is packaged in a stack pack.
  PACKAGE_TYPE_STACK_PACK = 142;
  // The product is packaged in a gift set.
  PACKAGE_TYPE_GIFT_SET = 143;
  // The product is packaged in a travel size container.
  PACKAGE_TYPE_TRAVEL_SIZE = 144;
  // The product is packaged in a collection.
  PACKAGE_TYPE_COLLECTION = 145;
}

// package material
enum PackageMaterial {
  // unspecified package material
  PACKAGE_MATERIAL_UNSPECIFIED = 0;
  // glass material
  PACKAGE_MATERIAL_GLASS = 1;
  // plastic material
  PACKAGE_MATERIAL_PLASTIC = 2;
}

// country code value information
message AttributedCountryCodeValue {
  // required, actual code
  common.CountryCode code = 1;
  // required, from what source was it added
  DataSource source = 2;
}

// representation of the barcode of an item
message Barcode {
  // string of code numbers - can have leading zeros
  string code = 1;
  // format of the barcode
  BarcodeFormat format = 2;
}

// formats of barcode
// buf:lint:ignore ENUM_VALUE_PREFIX
// buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
enum BarcodeFormat {
  // unspecified format
  BARCODE_FORMAT_UNSPECIFIED = 0;
  // UPCA
  UPCA = 1;
  // UPCE
  UPCE = 2;
  // EAN8
  EAN8 = 3;
  // EAN13
  EAN13 = 4;
  // GTIN14
  GTIN14 = 5;
  // ISBN10
  ISBN10 = 6;
  // ISBN13
  ISBN13 = 7;
  // PLU
  PLU = 8;
  // UNKNOWN
  UNKNOWN = 9;
}

// formats of item volume unit of measurements
// buf:lint:ignore ENUM_VALUE_PREFIX
enum ItemVolumeUOM {
  // unspecified format
  ITEM_VOLUME_UOM_UNSPECIFIED = 0;
  // GALLON
  GALLON = 1;
  // LITER
  LITER = 2;
  // MILLILITER
  MILLILITER = 3;
  // PINT
  PINT = 4;
  // QUARTER_OF_A_GALLON
  QUARTER_OF_A_GALLON = 5;
  // FLUID_OUNCES
  FLUID_OUNCES = 6;
}

// formats of item weight unit of measurements
// buf:lint:ignore ENUM_VALUE_PREFIX
enum ItemWeightUOM {
  // unspecified format
  ITEM_WEIGHT_UOM_UNSPECIFIED = 0;
  // GRAM
  GRAM = 1;
  // KILOGRAM
  KILOGRAM = 2;
  // MICROGRAM
  MICROGRAM = 3;
  // MILLIGRAM
  MILLIGRAM = 4;
  // OUNCE
  OUNCE = 5;
  // POUND
  POUND = 6;
}

// formats of item dimension unit of measurements
// buf:lint:ignore ENUM_VALUE_PREFIX
enum ItemDimensionUOM {
  // unspecified format
  ITEM_DIMENSION_UOM_UNSPECIFIED = 0;
  // MILLILITER
  MILLIMETER = 1;
  // CENTIMETER
  CENTIMETER = 2;
  // METER
  METER = 3;
  // INCH
  INCH = 4;
  // FOOT
  FOOT = 5;
  // YARD
  YARD = 6;
}

// formats of item count unit of measurements
// buf:lint:ignore ENUM_VALUE_PREFIX
enum ItemCountUOM {
  // unspecified format
  ITEM_COUNT_UOM_UNSPECIFIED = 0;
  // Each
  EACH = 1;
  // Dozen
  DOZEN = 2;
  // Pack
  PACK = 3;
  // Case
  CASE = 4;
}

// container storing item volume with uom enum
message AttributedItemVolumeContainer {
  // item volume provided provided by Mx/3rd party
  AttributedItemVolume item_volume = 1;
  // normalized item volume in ml based on item volume provided by Mx/3rd party, auto-generated
  google.protobuf.FloatValue item_volume_normalized_ml = 2;
}

// wrapper for item volume
message AttributedItemVolume {
  // required, actual valuez
  google.protobuf.FloatValue unit_amount = 1;
  // required, unit of measurement
  ItemVolumeUOM unit_uom = 2;
}

// container storing item weight with uom enum
message AttributedItemWeightContainer {
  // item weight provided by Mx/3rd party
  AttributedItemWeight item_weight = 1;
  // normalized item weight in g based on item weight provided by Mx/3rd party, auto-generated
  google.protobuf.FloatValue item_weight_normalized_g = 2;
}

// wrapper for item volume
message AttributedItemWeight {
  // required, actual value
  google.protobuf.FloatValue unit_amount = 1;
  // required, unit of measurement
  ItemWeightUOM unit_uom = 2;
}

// Cut Type for Meat & Fish
// buf:lint:ignore ENUM_VALUE_PREFIX
enum MeatCut {
  // unspecified cut type
  MEAT_CUT_UNSPECIFIED = 0;
  // Grinds
  GRINDS = 1;
  // Steaks
  STEAKS = 2;
  // Roasts
  ROASTS = 3;
  // Chops
  CHOPS = 4;
  // Burgers
  BURGERS = 5;
  // Sausages
  SAUSAGES = 6;
  // Other
  OTHER = 7;
}

// Grade Type for Meat & Fish
// buf:lint:ignore ENUM_VALUE_PREFIX
enum MeatGrade {
  // unspecified grade type
  MEAT_GRADE_UNSPECIFIED = 0;
  // USDA Prime
  USDA_PRIME = 1;
  // USDA Choice
  USDA_CHOICE = 2;
  // USDA Select
  USDA_SELECT = 3;
  // Standard/Commercial
  STANDARD_COMMERCIAL = 4;
  // Wagyu
  WAGYU = 5;
}

// dietary tag list
message MeatPreparations {
  // list of preparations enum value e.g. Vegan, Organic etc
  repeated MeatPreparation values = 1;
}

// Enumeration of meat preparation options describing various attributes and methods of preparing meat products.
// These options are used to provide detailed information about the specific preparation methods and characteristics
// of meat products, aiding in the selection and understanding of different meat offerings.
// buf:lint:ignore ENUM_VALUE_PREFIX
enum MeatPreparation {
  // Indicates that the specific type of bone and skin is unspecified.
  MEAT_BONE_SKIN_UNSPECIFIED = 0;
  // Indicates that the meat is prepared without bones.
  BONELESS = 1;
  // Indicates that the meat is prepared without skin.
  SKINLESS = 2;
  // Indicates that the meat is prepared with the skin intact.
  SKIN_ON = 3;
  // Indicates that the meat is prepared with bones included.
  BONE_IN = 4;
  // Indicates that the meat is prepared with the tail intact.
  TAIL_ON = 5;
  // Indicates that the meat has been deveined, typically referring to removing the veins in seafood.
  DEVEINED = 6;
  // Indicates that the meat has been peeled, typically referring to removing the outer skin or shell.
  PEELED = 7;
  // Indicates that the meat has been seasoned with spices or flavorings. This includes marinades.
  SEASONED = 8;
  // Indicates that the meat has been wrapped in bacon.
  BACON_WRAPPED = 9;
  // Indicates that the meat has been smoked, imparting a smoky flavor.
  SMOKED = 10;
  // Indicates that the meat has been cured in brine, often with spices.
  CORNED = 11;
  // Indicates that the meat has been skewered, typically for grilling or roasting.
  SKEWERED = 12;
  // Indicates that the meat has been filled or stuffed with other ingredients.
  STUFFED = 13;
  // Indicates that the meat has been slow-cooked, often in an underground pit.
  BARBACOA = 14;
  // Indicates that the meat has been cut into thick slices.
  THICK_CUT = 15;
  // Indicates that the meat has not been cured with nitrates or nitrites.
  UNCURED = 16;
  // Indicates that the meat has been fully cooked.
  COOKED = 17;
  // Indicates that the meat has been sliced from the center portion.
  CENTER_CUT = 18;
  // Indicates that the meat has been thinly sliced.
  THIN_SLICED = 19;
  // Indicates that the meat has been previously frozen.
  MEAT_PREVIOUSLY_FROZEN = 20;
}

// Fat Content for Meat & Fish
// buf:lint:ignore ENUM_VALUE_PREFIX
enum MeatFatContent {
  // unspecified fat content type
  MEAT_FAT_CONTENT_UNSPECIFIED = 0;
  // Lean
  LEAN = 1;
  // Extra Lean
  EXTRA_LEAN = 2;
  // 70% Lean
  LEAN_70 = 3;
  // 75% Lean
  LEAN_75 = 4;
  // 80% Lean
  LEAN_80 = 5;
  // 85% Lean
  LEAN_85 = 6;
  // 90% Lean
  LEAN_90 = 7;
  // 70% Lean / 30% Fat
  LEAN_70_FAT_30 = 8;
  // 71% Lean / 29% Fat
  LEAN_71_FAT_29 = 9;
  // 72% Lean / 28% Fat
  LEAN_72_FAT_28 = 10;
  // 73% Lean / 27% Fat
  LEAN_73_FAT_27 = 11;
  // 74% Lean / 26% Fat
  LEAN_74_FAT_26 = 12;
  // 75% Lean / 25% Fat
  LEAN_75_FAT_25 = 13;
  // 76% Lean / 24% Fat
  LEAN_76_FAT_24 = 14;
  // 77% Lean / 23% Fat
  LEAN_77_FAT_23 = 15;
  // 78% Lean / 22% Fat
  LEAN_78_FAT_22 = 16;
  // 79% Lean / 21% Fat
  LEAN_79_FAT_21 = 17;
  // 80% Lean / 20% Fat
  LEAN_80_FAT_20 = 18;
  // 81% Lean / 19% Fat
  LEAN_81_FAT_19 = 19;
  // 82% Lean / 18% Fat
  LEAN_82_FAT_18 = 20;
  // 83% Lean / 17% Fat
  LEAN_83_FAT_17 = 21;
  // 84% Lean / 16% Fat
  LEAN_84_FAT_16 = 22;
  // 85% Lean / 15% Fat
  LEAN_85_FAT_15 = 23;
  // 86% Lean / 14% Fat
  LEAN_86_FAT_14 = 24;
  // 87% Lean / 13% Fat
  LEAN_87_FAT_13 = 25;
  // 88% Lean / 12% Fat
  LEAN_88_FAT_12 = 26;
  // 89% Lean / 11% Fat
  LEAN_89_FAT_11 = 27;
  // 90% Lean / 10% Fat
  LEAN_90_FAT_10 = 28;
  // 91% Lean / 9% Fat
  LEAN_91_FAT_9 = 29;
  // 92% Lean / 8% Fat
  LEAN_92_FAT_8 = 30;
  // 93% Lean / 7% Fat
  LEAN_93_FAT_7 = 31;
  // 94% Lean / 6% Fat
  LEAN_94_FAT_6 = 32;
  // 95% Lean / 5% Fat
  LEAN_95_FAT_5 = 33;
  // 96% Lean / 4% Fat
  LEAN_96_FAT_4 = 34;
  // 97% Lean / 3% Fat
  LEAN_97_FAT_3 = 35;
  // 98% Lean / 2% Fat
  LEAN_98_FAT_2 = 36;
  // 99% Lean / 1% Fat
  LEAN_99_FAT_1 = 37;
  // 100% Lean / 0% Fat
  LEAN_100_FAT_0 = 38;
}

// Prepared State for Meat & Fish
// buf:lint:ignore ENUM_VALUE_PREFIX
enum MeatPreparedState {
  // unspecified prepared state type
  MEAT_PREPARED_STATE_UNSPECIFIED = 0;
  // Fresh
  FRESH = 1;
  // Frozen
  FROZEN = 2;
  // Previously Frozen
  PREVIOUSLY_FROZEN = 3;
}

// Enumeration of origin options for meat and fish products, specifying their geographical source or region of origin.
// These options help to provide information about where the meat or fish was sourced from, aiding in understanding
// its origin and potential characteristics.
// buf:lint:ignore ENUM_VALUE_PREFIX
enum MeatOrigin {
  // Indicates that the specific origin type is unspecified.
  MEAT_ORIGIN_UNSPECIFIED = 0;
  // Indicates that the meat or fish originates from the Atlantic Ocean or surrounding regions.
  ATLANTIC = 1;
  // Indicates that the meat or fish originates from the Pacific Ocean or surrounding regions.
  PACIFIC = 2;
  // Indicates that the meat or fish originates from Alaskan waters or surrounding regions.
  ALASKAN = 3;
  // Indicates that the meat originates from Angus cattle.
  ANGUS_ORIGIN = 4;
  // Indicates that the meat originates from Wagyu cattle.
  WAGYU_ORIGIN = 5;
}

// In Store Location for Meat & Fish
// buf:lint:ignore ENUM_VALUE_PREFIX
enum MeatLocation {
  // unspecified location type
  MEAT_LOCATION_UNSPECIFIED = 0;
  // Meat Counter
  MEAT_COUNTER = 1;
  // Seafood Counter
  SEAFOOD_COUNTER = 2;
  // Deli Counter
  DELI_COUNTER = 3;
  // Freezer
  FREEZER = 4;
  // Fridge
  FRIDGE = 5;
}

// Container for a list of occasions
message AttributedOccasionContainer {
  // list of occasions
  repeated Occasion occasions = 1;
}

// Occasions List
// buf:lint:ignore ENUM_VALUE_PREFIX
enum Occasion {
  // unspecified season type
  OCCASION_UNSPECIFIED = 0;
  // Superbowl
  SUPERBOWL = 1;
  // Valentine's Day
  VALENTINES_DAY = 2;
  // March Madness
  MARCH_MADNESS = 3;
  // Easter
  EASTER = 4;
  // Mother's Day
  MOTHERS_DAY = 5;
  // NBA Finals
  NBA_FINALS = 6;
  // Summer of DashPass
  SUMMER_OF_DASHPASS = 7;
  // Father's Day
  FATHERS_DAY = 8;
  // 4th of July
  FOURTH_OF_JULY = 9;
  // Summer Olympics
  SUMMER_OLYMPICS = 10;
  // Back to School / Back to College
  BACK_TO_SCHOOL = 11;
  // Fall Football
  FALL_FOOTBALL = 12;
  // Halloween
  HALLOWEEN = 13;
  // Thanksgiving
  THANKSGIVING = 14;
  // Hanukkah
  HANUKKAH = 15;
  // Christmas
  CHRISTMAS = 16;
  // New Years
  NEW_YEARS = 17;
  // St Patrick's Day
  ST_PATRICKS_DAY = 18;
  // Cinco de Mayo
  CINCO_DE_MAYO = 19;
  // Memorial Day
  MEMORIAL_DAY = 20;
  // Labor Day
  LABOR_DAY = 22;
  // Black Friday
  BLACK_FRIDAY = 23;
  // Wedding occasion
  WEDDING = 24;
  // Birthday occasion
  BIRTHDAY = 25;
  // Anniversary occasion
  ANNIVERSARY = 26;
  // Baby shower occasion
  BABY_SHOWER = 27;
  // Bachelor/Bachelorette occasion
  BACHELOR_BACHELORETTE = 28;
  // Tax day occasion
  TAX_DAY = 29;
  // Spring cleaning occasion
  SPRING_CLEANING = 30;
  // Graduation occasion
  GRADUATION = 31;
  // Casual occasion
  CASUAL = 32;
  // Outdoor occasion
  OUTDOOR = 33;
  // Dress occasion
  DRESS = 34;
  // Athleisure occasion
  ATHLEISURE = 35;
  // Work occasion
  WORK = 36;
  // Beach/Pool occasion
  BEACH_POOL = 37;
  // Fitness occasion
  FITNESS = 38;
  // Cold Weather occasion
  COLD_WEATHER = 39;
  // Travel occasion
  TRAVEL = 40;
  // Street occasion
  STREET = 41;
  // Gifts occasion
  GIFTS = 42;
  // Prom/Homecoming occasion
  PROM_HOMECOMING = 43;
  // Lifestyle occasion
  LIFESTYLE = 44;
  // Sport occasion
  SPORT = 45;
  // Evening occasion
  EVENING = 46;
}

// Enumeration of finish options describing the appearance or texture of cosmetics products.
// These options provide information about the visual or tactile qualities of the finish,
// aiding in understanding the overall appearance or texture of the cosmetics product.
enum Finish {
  // No finish specified for the product.
  FINISH_UNSPECIFIED = 0;
  // Indicates a radiant finish, characterized by a glowing or luminous appearance.
  FINISH_RADIANT = 1;
  // Indicates a shimmer finish, characterized by a soft, reflective sheen.
  FINISH_SHIMMER = 2;
  // Indicates a glitter finish, characterized by small, reflective particles that create a sparkling effect.
  FINISH_GLITTER = 3;
  // Indicates a metallic finish, characterized by a shiny, metallic appearance.
  FINISH_METALLIC = 4;
  // Indicates a high shine finish, characterized by a glossy or polished appearance.
  FINISH_HIGH_SHINE = 5;
  // Indicates a natural finish, characterized by a texture or appearance that mimics natural materials or surfaces.
  FINISH_NATURAL = 6;
  // Indicates a matte finish, characterized by a flat, non-reflective appearance.
  FINISH_MATTE = 7;
  // Indicates a satin finish, characterized by a soft, smooth sheen.
  FINISH_SATIN = 8;
  // Indicates a sheer finish, characterized by a light, translucent appearance.
  FINISH_SHEER = 9;
  // Indicates a dewy finish, characterized by a fresh, hydrated, and slightly glossy appearance.
  FINISH_DEWY = 10;
  // Indicates a gloss finish, characterized by a shiny and wet-looking appearance.
  FINISH_GLOSS = 11;
}

// Enumeration of coverage options describing the level of coverage provided by cosmetics products.
// These options indicate the extent to which the product conceals or evens out skin tone or imperfections.
enum Coverage {
  // No coverage specified for the product.
  COVERAGE_UNSPECIFIED = 0;
  // Indicates a sheer coverage, providing a lightweight and translucent finish.
  COVERAGE_SHEER = 1;
  // Indicates a light coverage, offering minimal to moderate coverage for a natural look.
  COVERAGE_LIGHT = 2;
  // Indicates a medium coverage, providing moderate to buildable coverage for a more even complexion.
  COVERAGE_MEDIUM = 3;
  // Indicates a full coverage, offering comprehensive coverage to conceal most imperfections and achieve a flawless finish.
  COVERAGE_FULL = 4;
  // Indicates buildable coverage, allowing the user to layer the product for customized coverage.
  COVERAGE_BUILDABLE = 5;
}

// Enumeration of skin type options describing different skin types for cosmetics products.
// These options indicate the specific type of skin for which the product is suitable or targeted.
enum SkinType {
  // No skin type specified for the product.
  SKIN_TYPE_UNSPECIFIED = 0;
  // Indicates an oily skin type, characterized by excess oil production and often associated with shine and blemishes.
  SKIN_TYPE_OILY = 1;
  // Indicates a sensitive skin type, prone to irritation or reactions to certain ingredients or environmental factors.
  SKIN_TYPE_SENSITIVE = 2;
  // Indicates a normal skin type, balanced with minimal oiliness and dryness, and typically free from major skin concerns.
  SKIN_TYPE_NORMAL = 3;
  // Indicates a combination skin type, characterized by a mix of oily and dry areas, often with different skincare needs in various zones.
  SKIN_TYPE_COMBINATION = 4;
  // Indicates a dry skin type, lacking moisture and often characterized by flakiness, tightness, or rough texture.
  SKIN_TYPE_DRY = 5;
  // Indicates a product suitable for all skin types.
  SKIN_TYPE_ALL = 6;
  // Indicates a mature skin type, often characterized by signs of aging such as wrinkles, fine lines, and loss of elasticity.
  SKIN_TYPE_MATURE = 7;
  // Indicates an acne-prone skin type, prone to breakouts and blemishes.
  SKIN_TYPE_ACNE_PRONE = 8;
}

// Enumeration of SPF (Sun Protection Factor) options describing the level of sun protection provided by skincare or cosmetics products.
// These options indicate the degree of protection against harmful UV (ultraviolet) radiation from the sun.
enum SPF {
  // No SPF specified for the product.
  SPF_UNSPECIFIED = 0;
  // Indicates low sun protection with SPF 4.
  SPF_4 = 1;
  // Indicates moderate sun protection with SPF 8.
  SPF_8 = 2;
  // Indicates moderate sun protection with SPF 15.
  SPF_15 = 3;
  // Indicates moderate sun protection with SPF 30.
  SPF_30 = 4;
  // Indicates high sun protection with SPF 45.
  SPF_45 = 5;
  // Indicates high sun protection with SPF 60.
  SPF_60 = 6;
  // Indicates very high sun protection with SPF 90.
  SPF_90 = 7;
  // Indicates very high sun protection with SPF 110.
  SPF_110 = 8;
  // Indicates sun protection with SPF above 30.
  SPF_ABOVE_30 = 9;
  // Indicates sun protection with SPF below 30.
  SPF_BELOW_30 = 10;
  // Indicates no sun protection.
  SPF_NO_SPF = 11;
}

// Enumeration of fragrance family options describing the scent profile of cosmetics products.
// These options indicate the dominant fragrance notes or olfactory characteristics of the product.
enum FragranceFamily {
  // No fragrance family specified for the product.
  FRAGRANCE_FAMILY_UNSPECIFIED = 0;
  // Indicates a fragrance-free product, devoid of any added scent or fragrance ingredients.
  FRAGRANCE_FAMILY_NO_FRAGRANCE = 1;
  // Indicates a warm and spicy fragrance family, characterized by rich, aromatic spices and warm notes.
  FRAGRANCE_FAMILY_WARM_AND_SPICY = 2;
  // Indicates a floral fragrance family, featuring the scent of various flowers, petals, and floral extracts.
  FRAGRANCE_FAMILY_FLORAL = 3;
  // Indicates a fresh fragrance family, known for its crisp, clean, and invigorating scent profile.
  FRAGRANCE_FAMILY_FRESH = 4;
  // Indicates a woody and earthy fragrance family, with notes reminiscent of forests, woods, and earthy elements.
  FRAGRANCE_FAMILY_WOODY_AND_EARTHY = 5;
  // Indicates a sweet fragrance family, characterized by sugary, candy-like, and dessert-inspired scents.
  FRAGRANCE_FAMILY_SWEET = 6;
  // Indicates a fruity and citrus fragrance family, featuring notes of fresh fruits, citrus peels, and juicy aromas.
  FRAGRANCE_FAMILY_FRUITY_AND_CITRUS = 7;
}

// Enumeration of fragrance type options describing the specific scent categories of cosmetics products.
// These options provide information about the dominant fragrance notes and olfactory characteristics of the product.
enum FragranceType {
  // No fragrance type specified for this product.
  FRAGRANCE_TYPE_UNSPECIFIED = 0;
  // Indicates warm and sweet gourmands, featuring rich, sweet, and indulgent scent notes.
  FRAGRANCE_TYPE_WARM_AND_SWEET_GOURMANDS = 1;
  // Indicates warm florals, characterized by floral notes with a warm and comforting undertone.
  FRAGRANCE_TYPE_WARM_FLORALS = 2;
  // Indicates classic florals, encompassing timeless floral fragrances with a traditional scent profile.
  FRAGRANCE_TYPE_CLASSIC_FLORALS = 3;
  // Indicates cool spices, featuring spicy notes with a cool, refreshing twist.
  FRAGRANCE_TYPE_COOL_SPICES = 4;
  // Indicates fruity florals, combining fruity notes with floral fragrances for a vibrant and refreshing scent.
  FRAGRANCE_TYPE_FRUITY_FLORALS = 5;
  // Indicates fresh aquatics, evoking the crisp and clean scent of water and aquatic elements.
  FRAGRANCE_TYPE_FRESH_AQUATICS = 6;
  // Indicates fresh citrus and fruits, highlighting citrus and fruity notes for a refreshing and invigorating scent.
  FRAGRANCE_TYPE_FRESH_CITRUS_AND_FRUITS = 7;
  // Indicates warm woods, featuring woody notes with a warm and comforting character.
  FRAGRANCE_TYPE_WARM_WOODS = 8;
  // Indicates warm and sheer fragrances, combining warm notes with a light and airy quality.
  FRAGRANCE_TYPE_WARM_AND_SHEER = 9;
  // Indicates fresh florals, characterized by light and airy floral notes for a fresh and uplifting scent.
  FRAGRANCE_TYPE_FRESH_FLORALS = 10;
  // Indicates woody spices, blending spicy and woody notes for a rich and aromatic fragrance.
  FRAGRANCE_TYPE_WOODY_SPICES = 11;
  // Indicates citrus and woods, combining citrus notes with woody undertones for a fresh and vibrant scent.
  FRAGRANCE_TYPE_CITRUS_AND_WOODS = 12;
  // Indicates earthy greens and herbs, featuring green and herbal notes reminiscent of nature.
  FRAGRANCE_TYPE_EARTHY_GREENS_AND_HERBS = 13;
  // Indicates fresh solar fragrances, evoking the warmth and radiance of the sun with fresh and luminous notes.
  FRAGRANCE_TYPE_FRESH_SOLAR = 14;
  // Indicates classic woods, encompassing timeless wood-based fragrances with a traditional scent profile.
  FRAGRANCE_TYPE_CLASSIC_WOODS = 15;
  // Indicates powdery florals, featuring floral notes with a soft and powdery texture for a delicate scent.
  FRAGRANCE_TYPE_POWDERY_FLORALS = 16;
}

// Enumeration of formulation options describing the different forms or types of cosmetics products.
// These options provide information about the specific formulation or delivery method of the product.
enum Formulation {
  // Indicates an unspecified formulation.
  FORMULATION_UNSPECIFIED = 0;
  // Indicates a spray formulation, typically delivered in aerosol or pump spray form.
  FORMULATION_SPRAY = 1;
  // Indicates a cream formulation, characterized by a smooth and creamy texture.
  FORMULATION_CREAM = 2;
  // Indicates a matte formulation, known for its non-shiny and velvety finish.
  FORMULATION_MATTE = 3;
  // Indicates a powder formulation, typically presented in a loose or pressed powder form.
  FORMULATION_POWDER = 4;
  // Indicates a liquid formulation, featuring a fluid consistency.
  FORMULATION_LIQUID = 5;
  // Indicates a rollerball formulation, delivered via a rollerball applicator for precise application.
  FORMULATION_ROLLERBALL = 6;
  // Indicates a travel spray formulation, designed for convenient and portable use during travel.
  FORMULATION_TRAVEL_SPRAY = 7;
  // Indicates an oil formulation, characterized by its oily or lubricating texture.
  FORMULATION_OIL = 8;
  // Indicates a candle formulation, typically used for home fragrance purposes.
  FORMULATION_CANDLE = 9;
  // Indicates a set formulation, comprising multiple products packaged together as a set or kit.
  FORMULATION_SET = 10;
  // Indicates a diffuser formulation, used to disperse fragrance into the air for ambient scenting.
  FORMULATION_DIFFUSER = 11;
  // Indicates an Eau de Parfum formulation, characterized by a higher concentration of fragrance oils for longer-lasting scent.
  FORMULATION_EAU_DE_PARFUM = 12;
  // Indicates an Eau de Toilette formulation, featuring a lighter concentration of fragrance oils for a more subtle scent.
  FORMULATION_EAU_DE_TOILETTE = 13;
  // Indicates a stick formulation, typically solid and in stick form.
  FORMULATION_STICK = 14;
  // Indicates a pencil formulation, typically solid and in pencil form.
  FORMULATION_PENCIL = 15;
  // Indicates a gloss formulation, characterized by a shiny and often slightly sticky texture.
  FORMULATION_GLOSS = 16;
  // Indicates a gel formulation, characterized by a smooth, semi-solid texture.
  FORMULATION_GEL = 17;
  // Indicates a balm formulation, typically solid and used for moisturizing or soothing.
  FORMULATION_BALM = 18;
  // Indicates a non-aerosol formulation, delivered via a non-aerosol method.
  FORMULATION_NON_AEROSOL = 19;
  // Indicates an aerosol formulation, delivered via an aerosol method.
  FORMULATION_AEROSOL = 20;
  // Indicates a stain formulation, typically used to impart color that lasts.
  FORMULATION_STAIN = 21;
  // Indicates a mousse formulation, characterized by a light, airy texture.
  FORMULATION_MOUSSE = 22;
  // Indicates a pomade formulation, typically used for styling and characterized by a waxy or creamy texture.
  FORMULATION_POMADE = 23;
  // Indicates a wax formulation, characterized by a solid and waxy texture.
  FORMULATION_WAX = 24;
  // Indicates a capsules formulation, typically used for supplements and characterized by a solid form enclosed in a capsule.
  FORMULATION_CAPSULES = 25;
  // Indicates a lotion formulation, characterized by a light, fluid consistency.
  FORMULATION_LOTION = 26;
  // Indicates a gummy formulation, typically used for supplements and characterized by a chewy texture.
  FORMULATION_GUMMY = 27;
  // Indicates a tablet formulation, typically used for supplements and characterized by a solid, compressed form.
  FORMULATION_TABLET = 28;
  // Indicates a softgel formulation, typically used for supplements and characterized by a soft, gel-like consistency.
  FORMULATION_SOFTGEL = 29;
  // Indicates a foam formulation, characterized by a light, airy texture.
  FORMULATION_FOAM = 30;
}

// Enumeration of hair type options describing different hair textures for hair care products.
// These options indicate the specific type of hair for which the product is suitable or targeted.
enum HairType {
  // Indicates an unspecified hair type.
  HAIR_TYPE_UNSPECIFIED = 0;
  // Indicates fine hair type, characterized by thin strands and often lacking volume.
  HAIR_TYPE_FINE_HAIR = 1;
  // Indicates medium hair type, featuring hair strands with a moderate thickness and texture.
  HAIR_TYPE_MEDIUM_HAIR = 2;
  // Indicates thick hair type, characterized by coarse and voluminous hair strands.
  HAIR_TYPE_THICK_HAIR = 3;
  // Indicates multi-cultural hair type, suitable for various hair textures often found in multi-cultural backgrounds.
  HAIR_TYPE_MULTI_CULTURAL = 4;
  // Indicates temporary hair type, suitable for temporary hair treatments or styles.
  HAIR_TYPE_TEMPORARY = 5;
}

// Enumeration of hair texture options describing different hair textures for hair care products.
// These options indicate the specific texture or pattern of the hair for which the product is suitable or targeted.
enum HairTexture {
  // Indicates an unspecified hair texture.
  HAIR_TEXTURE_UNSPECIFIED = 0;
  // Indicates wavy hair texture, characterized by hair strands with gentle waves.
  HAIR_TEXTURE_WAVY_HAIR = 1;
  // Indicates curly hair texture, featuring naturally curly or spiraled hair strands.
  HAIR_TEXTURE_CURLY_HAIR = 2;
  // Indicates straight hair texture, characterized by naturally straight hair strands.
  HAIR_TEXTURE_STRAIGHT_HAIR = 3;
  // Indicates coily hair texture, featuring tightly coiled or kinky hair strands.
  HAIR_TEXTURE_COILY_HAIR = 4;
}

// Enumeration of cosmetic ingredient options describing various ingredients commonly found in cosmetics products.
// These options provide information about specific ingredients present in the product, including their benefits or properties.
enum CosmeticIngredient {
  // Indicates an unspecified cosmetic ingredient.
  COSMETIC_INGREDIENT_UNSPECIFIED = 0;
  // Indicates a product that is free from parabens, which are preservatives commonly used in cosmetics.
  COSMETIC_INGREDIENT_PARABEN_FREE = 1;
  // Indicates a product that is free from sulfates, which are cleansing agents often found in shampoos and cleansers.
  COSMETIC_INGREDIENT_SULFATE_FREE = 2;
  // Indicates a product certified as "Clean at Sephora," meeting Sephora's standards for clean beauty.
  COSMETIC_INGREDIENT_CLEAN_AT_SEPHORA = 3;
  // Indicates a product that is cruelty-free, meaning it was not tested on animals during its production.
  COSMETIC_INGREDIENT_CRUELTY_FREE = 4;
  // Indicates a product containing peptides, which are amino acid chains known for their skincare benefits.
  COSMETIC_INGREDIENT_PEPTIDES = 5;
  // Indicates a product that is free from added fragrance or synthetic fragrances.
  COSMETIC_INGREDIENT_FRAGRANCE_FREE = 6;
  // Indicates a product that is free from animal-derived ingredients and suitable for vegans.
  COSMETIC_INGREDIENT_VEGAN_INGREDIENTS = 7;
  // Indicates a product that is free from oils, making it suitable for oily or acne-prone skin types.
  COSMETIC_INGREDIENT_OIL_FREE = 8;
  // Indicates a product containing hyaluronic acid, known for its hydrating and plumping properties.
  COSMETIC_INGREDIENT_HYALURONIC_ACID = 9;
  // Indicates a product that is free from silicones, which are commonly used in cosmetics as smoothing agents.
  COSMETIC_INGREDIENT_SILICONE_FREE = 10;
  // Indicates a product that is free from alcohol, making it suitable for sensitive or dry skin types.
  COSMETIC_INGREDIENT_ALCOHOL_FREE = 11;
  // Indicates a product containing vitamin C, known for its brightening and antioxidant properties.
  COSMETIC_INGREDIENT_VITAMIN_C = 12;
  // Indicates a product containing minerals, which may provide various benefits depending on the specific mineral.
  COSMETIC_INGREDIENT_MINERAL = 13;
  // Indicates a product containing antioxidants, which help to protect the skin from environmental damage.
  COSMETIC_INGREDIENT_ANTIOXIDANTS = 14;
  // Indicates a product containing niacinamide, known for its brightening and anti-inflammatory properties.
  COSMETIC_INGREDIENT_NIACINAMIDE = 15;
  // Indicates a product certified as "Clean Planet Positive," meeting clean beauty standards and sustainability criteria.
  COSMETIC_INGREDIENT_CLEAN_PLANET_POSITIVE = 16;
  // Indicates a product containing AHA (Alpha Hydroxy Acid) or glycolic acid, known for its exfoliating properties.
  COSMETIC_INGREDIENT_AHA_GLYCOLIC_ACID = 17;
  // Indicates a product containing squalane, a lightweight moisturizing ingredient derived from squalene.
  COSMETIC_INGREDIENT_SQUALANE = 18;
  // Indicates a product containing naturally derived ingredients, sourced from natural sources.
  COSMETIC_INGREDIENT_NATURALLY_DERIVED = 19;
  // Indicates a product containing zinc, known for its soothing and calming properties.
  COSMETIC_INGREDIENT_ZINC = 20;
  // Indicates a product containing hydroquinone, a skin-lightening agent often used to treat hyperpigmentation.
  COSMETIC_INGREDIENT_HYDROQUINONE = 21;
  // Indicates a product containing benzoyl peroxide, commonly used to treat acne and breakouts.
  COSMETIC_INGREDIENT_BENZOYL_PEROXIDE = 22;
  // Indicates a product containing salicylic acid, known for its exfoliating and acne-fighting properties.
  COSMETIC_INGREDIENT_SALICYLIC_ACID = 23;
  // Indicates a product containing sulfur, often used to treat acne and control excess oil production.
  COSMETIC_INGREDIENT_SULFUR = 24;
  // Indicates a product containing retinoid, a derivative of vitamin A known for its anti-aging and skin-renewing properties.
  COSMETIC_INGREDIENT_RETINOID = 25;
  // Indicates a product containing adaptogens, natural substances believed to help the body adapt to stress.
  COSMETIC_INGREDIENT_ADAPTOGENS = 26;
  // Indicates a product containing organic ingredients, grown without synthetic pesticides or fertilizers.
  COSMETIC_INGREDIENT_ORGANIC_INGREDIENTS = 27;
  // Indicates a product containing collagen, known for its skin-plumping and anti-aging properties.
  COSMETIC_INGREDIENT_COLLAGEN = 28;
  // Indicates a product that is non-comedogenic, meaning it does not clog pores.
  COSMETIC_INGREDIENT_NON_COMEDOGENIC = 29;
  // Indicates a product containing protein, known for its strengthening and reparative properties.
  COSMETIC_INGREDIENT_PROTEIN = 30;
  // Indicates a product containing biotin, known for its benefits to hair and nail health.
  COSMETIC_INGREDIENT_BIOTIN = 31;
  // Indicates a product containing keratin, known for its hair-strengthening properties.
  COSMETIC_INGREDIENT_KERATIN = 32;
  // Indicates a product containing silk, known for its smoothing and softening properties.
  COSMETIC_INGREDIENT_SILK = 33;
  // Indicates a product containing vitamin E, known for its antioxidant and moisturizing properties.
  COSMETIC_INGREDIENT_VITAMIN_E = 34;
  // Indicates a product containing shea butter, known for its moisturizing and nourishing properties.
  COSMETIC_INGREDIENT_SHEA_BUTTER = 35;
  // Indicates a product containing aloe, known for its soothing and healing properties.
  COSMETIC_INGREDIENT_ALOE = 36;
  // Indicates a product containing amino acids, known for their reparative and moisturizing properties.
  COSMETIC_INGREDIENT_AMINO_ACID = 37;
  // Indicates a product containing chamomile, known for its calming and anti-inflammatory properties.
  COSMETIC_INGREDIENT_CHAMOMILE = 38;
  // Indicates a product containing calcium, known for its strengthening properties.
  COSMETIC_INGREDIENT_CALCIUM = 39;
  // Indicates a product containing honey, known for its moisturizing and antibacterial properties.
  COSMETIC_INGREDIENT_HONEY = 40;
  // Indicates a product containing green tea, known for its antioxidant and anti-inflammatory properties.
  COSMETIC_INGREDIENT_GREEN_TEA = 41;
  // Indicates a product containing ginkgo biloba, known for its antioxidant properties.
  COSMETIC_INGREDIENT_GINKGO_BILOBA = 42;
  // Indicates a product containing jojoba oil, known for its moisturizing and balancing properties.
  COSMETIC_INGREDIENT_JOJOBA_OIL = 43;
  // Indicates a product containing olive oil, known for its moisturizing and nourishing properties.
  COSMETIC_INGREDIENT_OLIVE_OIL = 44;
  // Indicates a product containing vitamin B, known for its moisturizing and soothing properties.
  COSMETIC_INGREDIENT_VITAMIN_B = 45;
  // Indicates a product containing vitamin A, known for its anti-aging and skin-renewing properties.
  COSMETIC_INGREDIENT_VITAMIN_A = 46;
  // Indicates a product containing rice powder, known for its exfoliating and mattifying properties.
  COSMETIC_INGREDIENT_RICE_POWDER = 47;
  // Indicates a product containing castor oil, known for its moisturizing and conditioning properties.
  COSMETIC_INGREDIENT_CASTOR_OIL = 48;
  // Indicates a product containing ginseng, known for its revitalizing and anti-aging properties.
  COSMETIC_INGREDIENT_GINSENG = 49;
  // Indicates a product containing rosemary, known for its stimulating and antioxidant properties.
  COSMETIC_INGREDIENT_ROSEMARY = 50;
  // Indicates a product containing coconut, known for its moisturizing and nourishing properties.
  COSMETIC_INGREDIENT_COCONUT = 51;
  // Indicates a product containing tea tree oil, known for its antibacterial and anti-inflammatory properties.
  COSMETIC_INGREDIENT_TEA_TREE_OIL = 52;
  // Indicates a product containing kaolin clay, known for its cleansing and mattifying properties.
  COSMETIC_INGREDIENT_KAOLIN_CLAY = 53;
  // Indicates a product containing witch hazel, known for its astringent and anti-inflammatory properties.
  COSMETIC_INGREDIENT_WITCH_HAZEL = 54;
  // Indicates a product containing lavender, known for its calming and soothing properties.
  COSMETIC_INGREDIENT_LAVENDER = 55;
  // Indicates a product containing sugar, known for its exfoliating properties.
  COSMETIC_INGREDIENT_SUGAR = 56;
  // Indicates a product containing argan oil, known for its moisturizing and nourishing properties.
  COSMETIC_INGREDIENT_ARGAN_OIL = 57;
  // Indicates a product that is hypoallergenic, suitable for sensitive skin.
  COSMETIC_INGREDIENT_HYPOALLERGENIC = 58;
  // Indicates a product that is free from aluminum.
  COSMETIC_INGREDIENT_ALUMINUM_FREE = 59;
  // Indicates a product that is free from phthalates.
  COSMETIC_INGREDIENT_PHTHALATE_FREE = 60;
  // Indicates a product that is free from formaldehyde.
  COSMETIC_INGREDIENT_FORMALDEHYDE_FREE = 61;
  // Indicates a product that is free from gluten.
  COSMETIC_INGREDIENT_GLUTEN_FREE = 62;
  // Indicates a product that is vegan.
  COSMETIC_INGREDIENT_VEGAN = 63;
}

// Enumeration of concerns describing reasons that a given product might be used.
enum Concern {
  // Indicates an unspecified skincare concern.
  CONCERN_UNSPECIFIED = 0;
  // Indicates a concern related to dryness, characterized by lack of moisture in the skin.
  CONCERN_DRYNESS = 1;
  // Indicates a concern related to enlarged pores, often associated with oily or congested skin.
  CONCERN_PORES = 2;
  // Indicates a concern related to excess oiliness or sebum production in the skin.
  CONCERN_OILINESS = 3;
  // Indicates a concern related to redness or inflammation of the skin.
  CONCERN_REDNESS = 4;
  // Indicates a concern related to acne or blemishes, including pimples, blackheads, and whiteheads.
  CONCERN_ACNE_BLEMISHES = 5;
  // Indicates a concern related to dullness, characterized by lack of radiance or brightness in the skin.
  CONCERN_DULLNESS = 6;
  // Indicates a concern related to uneven texture of the skin, including rough or bumpy areas.
  CONCERN_UNEVEN_TEXTURE = 7;
  // Indicates a concern related to uneven skin tone, including hyperpigmentation or discoloration.
  CONCERN_UNEVEN_SKIN_TONE = 8;
  // Indicates a concern related to loss of firmness or elasticity in the skin.
  CONCERN_LOSS_OF_FIRMNESS_ELASTICITY = 9;
  // Indicates a concern related to fine lines or wrinkles, often associated with aging.
  CONCERN_FINE_LINES_WRINKLES = 10;
  // Indicates a concern related to mood support, helping to improve emotional well-being.
  CONCERN_MOOD_SUPPORT = 11;
  // Indicates a concern related to immunity, supporting the body's immune system.
  CONCERN_IMMUNITY = 12;
  // Indicates a concern related to joint health, supporting healthy joints and mobility.
  CONCERN_JOINT_HEALTH = 13;
  // Indicates a concern related to stress management, helping to reduce stress levels and promote relaxation.
  CONCERN_STRESS_MANAGEMENT = 14;
  // Indicates a concern related to sleep, promoting better sleep quality and duration.
  CONCERN_SLEEP = 15;
  // Indicates a concern related to eye health, supporting overall eye function and vision.
  CONCERN_EYE_HEALTH = 16;
  // Indicates a concern related to fever, helping to reduce fever symptoms and discomfort.
  CONCERN_FEVER = 17;
  // Indicates a concern related to gas, helping to relieve gas and bloating.
  CONCERN_GAS = 18;
  // Indicates a concern related to diarrhea, helping to relieve diarrhea symptoms and discomfort.
  CONCERN_DIARRHEA = 19;
  // Indicates a concern related to dark spots, addressing hyperpigmentation or discoloration.
  CONCERN_DARK_SPOTS = 20;
  // Indicates a concern related to anti-aging, addressing signs of aging such as wrinkles and fine lines.
  CONCERN_ANTI_AGING = 21;
  // Indicates a concern related to color protection, helping to maintain and protect hair color.
  CONCERN_COLOR_PROTECTION = 22;
  // Indicates a concern related to curl enhancing, helping to enhance and define curls.
  CONCERN_CURL_ENHANCING = 23;
  // Indicates a concern related to damaged hair, addressing and repairing hair damage.
  CONCERN_DAMAGED = 24;
  // Indicates a concern related to frizz, helping to control and reduce frizz.
  CONCERN_FRIZZ_FREE = 25;
  // Indicates a concern related to thinning hair, addressing and improving hair thickness.
  CONCERN_THINNING = 26;
  // Indicates a concern related to dry scalp, addressing dryness and flakiness of the scalp.
  CONCERN_DRY_SCALP = 27;
  // Indicates a concern related to shine, helping to enhance and add shine to hair.
  CONCERN_SHINE = 28;
  // Indicates a concern related to heat protection, helping to protect hair from heat damage.
  CONCERN_HEAT_PROTECTION = 29;
  // Indicates a concern related to straightening, helping to straighten and smooth hair.
  CONCERN_STRAIGHTENING = 30;
  // Indicates a concern related to cellulite, addressing and reducing the appearance of cellulite.
  CONCERN_CELLULITE = 31;
  // Indicates a concern related to scalp build-up, helping to remove and prevent scalp build-up.
  CONCERN_SCALP_BUILD_UP = 32;
  // Indicates a concern related to style and hold, helping to style and hold hair in place.
  CONCERN_STYLE_AND_HOLD = 33;
  // Indicates a concern related to dark circles, addressing and reducing the appearance of dark circles under the eyes.
  CONCERN_DARK_CIRCLES = 34;
  // Indicates a concern related to chip resistance, helping to make nail polish more resistant to chipping.
  CONCERN_CHIP_RESISTANT = 35;
  // Indicates a concern related to gray coverage, helping to cover and conceal gray hair.
  CONCERN_GRAY_COVERAGE = 36;
  // Indicates a concern related to color correcting, helping to correct and balance skin tone.
  CONCERN_COLOR_CORRECTING = 37;
  // Indicates a concern related to skin and coat health.
  CONCERN_SKIN_AND_COAT_HEALTH = 38;
  // Indicates a concern related to oral health.
  CONCERN_ORAL_HEALTH = 39;
  // Indicates a concern related to digestive health.
  CONCERN_DIGESTIVE_HEALTH = 40;
  // Indicates a concern related to bone health.
  CONCERN_BONE_HEALTH = 41;
  // Indicates a concern related to weight management.
  CONCERN_WEIGHT_MANAGEMENT = 42;
  // Indicates a concern related to pest repellent or prevention.
  CONCERN_PEST_REPELLENT_PREVENTION = 43;
  // Indicates a concern related to itch relief.
  CONCERN_ITCH_RELIEF = 44;
  // Indicates a concern related to pest elimination.
  CONCERN_PEST_ELIMINATION = 45;
  // Indicates a concern related to overall health.
  CONCERN_OVERALL_HEALTH = 46;
  // Indicates a concern related to hairball control.
  CONCERN_HAIRBALL_CONTROL = 47;
  // Indicates a concern related to brain health.
  CONCERN_BRAIN_HEALTH = 48;
  // Indicates a concern related to ear health.
  CONCERN_EAR_HEALTH = 49;
  // Indicates a concern related to urinary health.
  CONCERN_URINARY_HEALTH = 50;
  // Indicates a concern related to heart health.
  CONCERN_HEART_HEALTH = 51;
  // Indicates a concern related to bad breath.
  CONCERN_BAD_BREATH = 52;
  // Indicates a concern related to energy.
  CONCERN_ENERGY = 53;
  // Indicates a concern related to calming.
  CONCERN_CALMING = 54;
  // Indicates a concern related to allergy.
  CONCERN_ALLERGY = 55;
  // Indicates a concern related to pain relief.
  CONCERN_PAIN_RELIEF = 56;
  // Indicates a concern related to ear, nose, and throat health.
  CONCERN_EAR_NOSE_THROAT_HEALTH = 57;
  // Indicates a concern related to headache.
  CONCERN_HEADACHE = 58;
  // Indicates a concern related to motion sickness.
  CONCERN_MOTION_SICKNESS = 59;
  // Indicates a concern related to high blood pressure.
  CONCERN_HIGH_BLOOD_PRESSURE = 60;
  // Indicates a concern related to muscle ache.
  CONCERN_MUSCLE_ACHE = 61;
  // Indicates a concern related to nasal congestion.
  CONCERN_NASAL_CONGESTION = 62;
  // Indicates a concern related to nausea.
  CONCERN_NAUSEA = 63;
  // Indicates a concern related to sinus.
  CONCERN_SINUS = 64;
  // Indicates a concern related to sneezing.
  CONCERN_SNEEZING = 65;
  // Indicates a concern related to sore throat.
  CONCERN_SORE_THROAT = 66;
  // Indicates a concern related to stye.
  CONCERN_STYE = 67;
  // Indicates a concern related to diabetes support.
  CONCERN_DIABETES_SUPPORT = 68;
  // Indicates a concern related to brain and memory support.
  CONCERN_BRAIN_MEMORY_SUPPORT = 69;
  // Indicates a concern related to eczema.
  CONCERN_ECZEMA = 70;
  // Indicates a concern related to ingrown hairs.
  CONCERN_INGROWN_HAIRS = 71;
  // Indicates a concern related to itchy skin.
  CONCERN_ITCHY_SKIN = 72;
  // Indicates a concern related to keratosis pilaris.
  CONCERN_KERATOSIS_PILARIS = 73;
  // Indicates a concern related to psoriasis.
  CONCERN_PSORIASIS = 74;
  // Indicates a concern related to arthritis.
  CONCERN_ARTHRITIS = 75;
  // Indicates a concern related to pregnancy, fertility, and prenatal care.
  CONCERN_PREGNANCY_FERTILITY_PRENATAL_CARE = 76;
  // Indicates a concern related to scars.
  CONCERN_SCARS = 77;
  // Indicates a concern related to foot health.
  CONCERN_FOOT_HEALTH = 78;
  // Indicates a concern related to quitting smoking.
  CONCERN_QUIT_SMOKING = 79;
  // Indicates a concern related to bruises and burns.
  CONCERN_BRUISES_BURNS = 80;
  // Indicates a concern related to feminine health.
  CONCERN_FEMININE_HEALTH = 81;
  // Indicates a concern related to odor control.
  CONCERN_ODOR_CONTROL = 82;
  // Indicates a concern related to first aid.
  CONCERN_FIRST_AID = 83;
  // Indicates a concern related to cavity prevention in dental care.
  CONCERN_CAVITY_PREVENTION = 84;
  // Indicates a concern related to denture care and maintenance.
  CONCERN_DENTURE_CARE = 85;
  // Indicates a concern related to dry mouth symptoms and relief.
  CONCERN_DRY_MOUTH = 86;
  // Indicates a concern related to dental enamel protection and care.
  CONCERN_ENAMEL_CARE = 87;
  // Indicates a concern related to gingivitis treatment and prevention.
  CONCERN_GINGIVITIS = 88;
  // Indicates a concern related to gum health and maintenance.
  CONCERN_GUM_CARE = 89;
  // Indicates a concern related to plaque removal and prevention.
  CONCERN_PLAQUE = 90;
  // Indicates a concern related to sanitization and disinfection.
  CONCERN_SANITIZATION = 91;
  // Indicates a concern related to teeth whitening and brightening.
  CONCERN_TEETH_WHITENING = 92;
  // Indicates a concern related to general tooth care and maintenance.
  CONCERN_TOOTH_CARE = 93;
  // Indicates a concern related to tooth sensitivity treatment and relief.
  CONCERN_TOOTH_SENSITIVITY = 94;
  // Indicates a concern related to children's health and wellness.
  CONCERN_CHILDRENS_HEALTH = 95;
  // Indicates a concern related to constipation relief.
  CONCERN_CONSTIPATION = 96;
  // Indicates a concern related to cough relief and treatment.
  CONCERN_COUGH = 97;
  // Indicates a concern related to menstrual pain relief.
  CONCERN_MENSTRUAL_PAIN = 98;
  // Indicates a concern related to oral pain relief.
  CONCERN_ORAL_PAIN_RELIEF = 99;
  // Indicates a concern related to heartburn relief.
  CONCERN_HEARTBURN = 100;
  // Indicates a concern related to liver detoxification and support.
  CONCERN_LIVER_DETOX_AND_SUPPORT = 101;
}

// Enumeration of benefits describing the positive effects or features provided by products. These options provide
// information about specific benefits or advantages offered by the product.
enum Benefit {
  // Indicates an unspecified benefit.
  BENEFIT_UNSPECIFIED = 0;
  // Indicates a hydrating benefit, providing moisture to the skin or hair.
  BENEFIT_HYDRATING = 1;
  // Indicates a plumping benefit, giving volume and fullness to the skin or lips.
  BENEFIT_PLUMPING = 2;
  // Indicates a long-wearing benefit, offering extended wear time without fading or smudging.
  BENEFIT_LONG_WEARING = 3;
  // Indicates a volumizing benefit, adding volume and thickness to the hair or lashes.
  BENEFIT_VOLUMIZING = 4;
  // Indicates a curling benefit, enhancing and defining natural or styled curls.
  BENEFIT_CURLING = 5;
  // Indicates a waterproof benefit, providing resistance to water and moisture.
  BENEFIT_WATERPROOF = 6;
  // Indicates a water-resistant benefit, offering some resistance to water without being fully waterproof.
  BENEFIT_WATER_RESISTANT = 7;
  // Indicates a transfer-resistant benefit, reducing the likelihood of transferring onto other surfaces.
  BENEFIT_TRANSFER_RESISTANT = 8;
  // Indicates a transfer-proof benefit, preventing the product from transferring onto other surfaces.
  BENEFIT_TRANSFER_PROOF = 9;
  // Indicates a lengthening benefit, making lashes appear longer.
  BENEFIT_LENGTHENING = 10;
  // Indicates a blending benefit, enhancing the ability to blend the product seamlessly.
  BENEFIT_BLENDING = 11;
  // Indicates a contouring benefit, aiding in defining and shaping facial features.
  BENEFIT_CONTOURING = 12;
  // Indicates a highlighting benefit, adding light and radiance to specific areas.
  BENEFIT_HIGHLIGHTING = 13;
  // Indicates a strengthening benefit, improving the strength and resilience of hair or nails.
  BENEFIT_STRENGTHENING = 14;
  // Indicates a fast drying benefit, allowing the product to dry quickly.
  BENEFIT_FAST_DRYING = 15;
  // Indicates a medicated benefit, providing therapeutic effects or treatments.
  BENEFIT_MEDICATED = 16;
  // Indicates a disposable benefit, designed for single use and easy disposal.
  BENEFIT_DISPOSABLE = 17;
  // Indicates a dermatologist-tested benefit, tested and approved by dermatologists.
  BENEFIT_DERMATOLOGIST_TESTED = 18;
  // Indicates a sun protection benefit, providing protection against UV rays.
  BENEFIT_SUN_PROTECTION = 19;
  // Indicates a squeaks benefit, producing a squeaking sound.
  BENEFIT_SQUEAKS = 20;
  // Indicates an adjustable benefit, allowing customization or adjustment.
  BENEFIT_ADJUSTABLE = 21;
  // Indicates a reflective benefit, providing reflective properties for visibility.
  BENEFIT_REFLECTIVE = 22;
  // Indicates a portable benefit, designed for easy transport or mobility.
  BENEFIT_PORTABLE = 23;
  // Indicates a weather-resistant benefit, offering resistance to various weather conditions.
  BENEFIT_WEATHER_RESISTANT = 24;
}

// Enumeration of gender options describing the target gender for products.
// These options provide information about the intended demographic or target audience for the product,
// aiding in addressing individual preferences and needs based on gender identity.
enum Gender {
  // Indicates an unspecified gender.
  GENDER_UNSPECIFIED = 0;
  // Indicates a product targeted towards men.
  GENDER_MEN = 1;
  // Indicates a product targeted towards women.
  GENDER_WOMEN = 2;
  // Indicates a product suitable for all genders, regardless of gender identity.
  GENDER_UNISEX = 3;
}

// Enumeration of shopping preference options describing different preferences for purchasing products.
// These options provide information about specific shopping preferences or criteria that influence purchasing decisions.
enum ShoppingPreference {
  // Indicates an unspecified shopping preference.
  SHOPPING_PREFERENCE_UNSPECIFIED = 0;
  // Indicates a preference for purchasing products from black-owned businesses.
  SHOPPING_PREFERENCE_BLACK_OWNED = 1;
  // Indicates a preference for purchasing products from local businesses or sources.
  SHOPPING_PREFERENCE_LOCAL = 2;
  // Indicates a preference for purchasing affordable products at lower price points.
  SHOPPING_PREFERENCE_AFFORDABLE = 3;
  // Indicates a preference for purchasing luxury products known for their high quality and exclusivity.
  SHOPPING_PREFERENCE_LUXURY = 4;
  // Indicates a preference for purchasing premium products offering superior quality and features.
  SHOPPING_PREFERENCE_PREMIUM = 5;
  // Indicates a preference for purchasing limited edition products available in limited quantities for exclusivity.
  SHOPPING_PREFERENCE_LIMITED_EDITION = 6;
  // Indicates a preference for products only available at Sephora.
  SHOPPING_PREFERENCE_ONLY_AT_SEPHORA = 7;
  // Indicates a preference for environmentally conscious products.
  SHOPPING_PREFERENCE_PLANET_AWARE = 8;
  // Indicates a preference for products recognized by Allure magazine's "Best of Beauty" awards.
  SHOPPING_PREFERENCE_BEST_OF_ALLURE = 9;
  // Indicates a preference for products only available at Ulta.
  SHOPPING_PREFERENCE_ONLY_AT_ULTA = 10;
  // Indicates a preference for products containing recycled content.
  SHOPPING_PREFERENCE_CONTAINS_RECYCLED_CONTENT = 11;
  // Indicates a preference for recyclable products.
  SHOPPING_PREFERENCE_RECYCLABLE = 12;
  // Indicates a preference for products made from renewable resources.
  SHOPPING_PREFERENCE_RENEWABLE_RESOURCE = 13;
  // Indicates a preference for bio-based products.
  SHOPPING_PREFERENCE_BIO_BASED = 14;
  // Indicates a preference for plant-based products.
  SHOPPING_PREFERENCE_PLANT_BASED = 15;
  // Indicates a preference for compostable products.
  SHOPPING_PREFERENCE_COMPOSTABLE = 16;
  // Indicates a preference for products made from renewable materials.
  SHOPPING_PREFERENCE_RENEWABLE_MATERIAL = 17;
  // Indicates a preference for biodegradable products.
  SHOPPING_PREFERENCE_BIODEGRADABLE = 18;
}

// Describes the family of colors to which a product's appearance belongs.
enum ColorFamily {
  // Unspecified color family.
  COLOR_FAMILY_UNSPECIFIED = 0;
  // Black color family.
  COLOR_FAMILY_BLACK = 1;
  // Multi-color family, representing a combination of multiple colors.
  COLOR_FAMILY_MULTI = 2;
  // Pink color family.
  COLOR_FAMILY_PINK = 3;
  // Nude color family.
  COLOR_FAMILY_NUDE = 4;
  // Coral color family.
  COLOR_FAMILY_CORAL = 5;
  // White color family.
  COLOR_FAMILY_WHITE = 6;
  // Berry color family.
  COLOR_FAMILY_BERRY = 7;
  // Brown color family.
  COLOR_FAMILY_BROWN = 8;
  // Silver color family.
  COLOR_FAMILY_SILVER = 9;
  // Red color family.
  COLOR_FAMILY_RED = 10;
  // Gray color family.
  COLOR_FAMILY_GRAY = 11;
  // Gold color family.
  COLOR_FAMILY_GOLD = 12;
  // Green color family.
  COLOR_FAMILY_GREEN = 13;
  // Blue color family.
  COLOR_FAMILY_BLUE = 14;
  // Purple color family.
  COLOR_FAMILY_PURPLE = 15;
  // Clear color family, representing transparency or lack of color.
  COLOR_FAMILY_CLEAR = 16;
  // Orange color family.
  COLOR_FAMILY_ORANGE = 17;
  // Yellow color family.
  COLOR_FAMILY_YELLOW = 18;
}

// Enum representing different materials used in apparel and other products.
enum Material {
  // Unspecified material.
  MATERIAL_UNSPECIFIED = 0;
  // Polyester material.
  MATERIAL_POLYESTER = 1;
  // Velour material.
  MATERIAL_VELOUR = 2;
  // Fleece material.
  MATERIAL_FLEECE = 3;
  // Terry cloth material.
  MATERIAL_TERRY_CLOTH = 4;
  // Velvet material.
  MATERIAL_VELVET = 5;
  // Denim material.
  MATERIAL_DENIM = 6;
  // Tweed material.
  MATERIAL_TWEED = 7;
  // Chiffon material.
  MATERIAL_CHIFFON = 8;
  // Silk material.
  MATERIAL_SILK = 9;
  // Cotton material.
  MATERIAL_COTTON = 10;
  // Leather material.
  MATERIAL_LEATHER = 11;
  // Synthetic material.
  MATERIAL_SYNTHETIC = 12;
  // Wool material.
  MATERIAL_WOOL = 13;
  // Metal material.
  MATERIAL_METAL = 14;
  // Plastic material.
  MATERIAL_PLASTIC = 15;
  // Wood material.
  MATERIAL_WOOD = 16;
  // Wicker or rattan material.
  MATERIAL_WICKER_RATTAN = 17;
  // Ceramic material.
  MATERIAL_CERAMIC = 18;
  // Stone material.
  MATERIAL_STONE = 19;
  // Fabric material, unspecified type.
  MATERIAL_FABRIC = 20;
  // Resin material.
  MATERIAL_RESIN = 21;
  // Nylon material.
  MATERIAL_NYLON = 22;
  // Stainless steel material.
  MATERIAL_STAINLESS_STEEL = 23;
  // Silicone material.
  MATERIAL_SILICONE = 24;
  // Rubber material.
  MATERIAL_RUBBER = 25;
  // Iron material.
  MATERIAL_IRON = 26;
  // Polypropylene material.
  MATERIAL_POLYPROPYLENE = 27;
  // Polyurethane material.
  MATERIAL_POLYURETHANE = 28;
  // Microfiber material.
  MATERIAL_MICROFIBER = 29;
  // Neoprene material.
  MATERIAL_NEOPRENE = 30;
  // Clay material.
  MATERIAL_CLAY = 31;
  // Acrylic material.
  MATERIAL_ACRYLIC = 32;
  // Canvas material.
  MATERIAL_CANVAS = 33;
  // Latex material.
  MATERIAL_LATEX = 34;
  // PVC (Polyvinyl chloride) material.
  MATERIAL_PVC = 35;
  // Plywood material.
  MATERIAL_PLYWOOD = 36;
  // Mesh material.
  MATERIAL_MESH = 37;
  // Cardboard material.
  MATERIAL_CARDBOARD = 38;
  // Glass material.
  MATERIAL_GLASS = 39;
  // Polyethylene material.
  MATERIAL_POLYETHYLENE = 40;
  // Vinyl material.
  MATERIAL_VINYL = 41;
  // Memory foam material.
  MATERIAL_MEMORY_FOAM = 42;
  // Hardwood material.
  MATERIAL_HARDWOOD = 43;
  // PET (Polyethylene terephthalate) material.
  MATERIAL_PET = 44;
  // Stoneware material.
  MATERIAL_STONEWARE = 45;
  // HDPE (High-Density Polyethylene) material.
  MATERIAL_HDPE = 46;
  // Aluminum material.
  MATERIAL_ALUMINUM = 47;
  // Paper material.
  MATERIAL_PAPER = 48;
  // Bamboo material.
  MATERIAL_BAMBOO = 49;
  // Wire material.
  MATERIAL_WIRE = 50;
  // LDPE (Low-Density Polyethylene) material.
  MATERIAL_LDPE = 51;
  // Foam material.
  MATERIAL_FOAM = 52;
  // Sponge material.
  MATERIAL_SPONGE = 53;
  // Cork material.
  MATERIAL_CORK = 54;
  // Foil material.
  MATERIAL_FOIL = 55;
  // Steel material.
  MATERIAL_STEEL = 56;
  // ABS (Acrylonitrile Butadiene Styrene) material.
  MATERIAL_ABS = 57;
  // Recycled plastic material.
  MATERIAL_RECYCLED_PLASTIC = 58;
  // Pine wood material.
  MATERIAL_PINE = 59;
  // Rayon material.
  MATERIAL_RAYON = 60;
  // TPE (Thermoplastic Elastomer) material.
  MATERIAL_TPE = 61;
  // Spandex material.
  MATERIAL_SPANDEX = 62;
  // Carbon steel material.
  MATERIAL_CARBON_STEEL = 63;
  // Wood composite material.
  MATERIAL_WOOD_COMPOSITE = 64;
  // EVA (Ethylene Vinyl Acetate) material.
  MATERIAL_EVA = 65;
  // TPR (Thermoplastic Rubber) material.
  MATERIAL_TPR = 66;
  // Particle board material.
  MATERIAL_PARTICLE_BOARD = 67;
  // MDF (Medium-Density Fiberboard) material.
  MATERIAL_MDF = 68;
  // Elastic material.
  MATERIAL_ELASTIC = 69;
  // Graphite material.
  MATERIAL_GRAPHITE = 70;
  // Paperboard material.
  MATERIAL_PAPERBOARD = 71;
  // Cotton fiber material.
  MATERIAL_COTTON_FIBER = 72;
  // Satin material.
  MATERIAL_SATIN = 73;
  // Cardstock paper material.
  MATERIAL_CARDSTOCK_PAPER = 74;
  // Polymer Environmentally-Friendly Resin (PER) material.
  MATERIAL_PER = 75;
  // Birch wood material.
  MATERIAL_BIRCH = 76;
  // Organic cotton material.
  MATERIAL_ORGANIC_COTTON = 77;
  // PEVA (Polyethylene Vinyl Acetate) material.
  MATERIAL_PEVA = 78;
  // Linen material.
  MATERIAL_LINEN = 79;
  // Post-consumer recycled plastic material.
  MATERIAL_POST_CONSUMER_RECYCLED_PLASTIC = 80;
  // Wood laminate material.
  MATERIAL_WOOD_LAMINATE = 81;
  // Microsuede material.
  MATERIAL_MICROSUEDE = 82;
  // Tungsten material.
  MATERIAL_TUNGSTEN = 83;
  // Beechwood material.
  MATERIAL_BEECHWOOD = 84;
  // Rayon from bamboo material.
  MATERIAL_RAYON_FROM_BAMBOO = 85;
  // Tin material.
  MATERIAL_TIN = 86;
  // Steel alloy material.
  MATERIAL_STEEL_ALLOY = 87;
  // Nickel-free metal material.
  MATERIAL_NICKEL_FREE_METAL = 88;
  // Sterling silver material.
  MATERIAL_STERLING_SILVER = 89;
  // Gauze material.
  MATERIAL_GAUZE = 90;
  // Aluminum alloy material.
  MATERIAL_ALUMINUM_ALLOY = 91;
  // Faux leather material.
  MATERIAL_FAUX_LEATHER = 92;
  // Felt material.
  MATERIAL_FELT = 93;
  // Vegetable fiber material.
  MATERIAL_VEGETABLE_FIBER = 94;
  // Polyvinyl material.
  MATERIAL_POLYVINYL = 95;
  // Rubberwood material.
  MATERIAL_RUBBERWOOD = 96;
  // Polystyrene material.
  MATERIAL_POLYSTYRENE = 97;
  // Polycarbonate material.
  MATERIAL_POLYCARBONATE = 98;
  // Brass material.
  MATERIAL_BRASS = 99;
  // Viscose material.
  MATERIAL_VISCOSE = 100;
  // Gold plated material.
  MATERIAL_GOLD_PLATED = 101;
  // Gel material.
  MATERIAL_GEL = 102;
  // EPS (Expanded Polystyrene) material.
  MATERIAL_EPS = 103;
  // Melamine material.
  MATERIAL_MELAMINE = 104;
  // Steel laminate material.
  MATERIAL_STEEL_LAMINATE = 105;
  // Fiberglass material.
  MATERIAL_FIBERGLASS = 106;
  // Wood veneer material.
  MATERIAL_WOOD_VENEER = 107;
  // Elastane material.
  MATERIAL_ELASTANE = 108;
  // Polyisoprene material.
  MATERIAL_POLYISOPRENE = 109;
  // Novelty material.
  MATERIAL_NOVELTY = 110;
  // Lace material.
  MATERIAL_LACE = 111;
  // Crepe material.
  MATERIAL_CREPE = 112;
  // Embroidery material.
  MATERIAL_EMBROIDERY = 113;
  // Jersey material.
  MATERIAL_JERSEY = 114;
  // Sequin material.
  MATERIAL_SEQUIN = 115;
  // Scuba material.
  MATERIAL_SCUBA = 116;
  // Organza material.
  MATERIAL_ORGANZA = 117;
  // Tulle material.
  MATERIAL_TULLE = 118;
  // Beeswax material.
  MATERIAL_BEESWAX = 119;
  // Blended wax material.
  MATERIAL_BLENDED_WAX = 120;
  // Coconut wax material.
  MATERIAL_COCONUT_WAX = 121;
  // Gel wax material.
  MATERIAL_GEL_WAX = 122;
  // Palm wax material.
  MATERIAL_PALM_WAX = 123;
  // Paraffin wax material.
  MATERIAL_PARAFFIN_WAX = 124;
  // Rapeseed wax material.
  MATERIAL_RAPESEED_WAX = 125;
  // Soy wax material.
  MATERIAL_SOY_WAX = 126;
}

// Enum representing different widths of shoes.
enum ShoeWidth {
  // Unspecified shoe width.
  SHOE_WIDTH_UNSPECIFIED = 0;
  // Narrow shoe width.
  SHOE_WIDTH_NARROW = 1;
  // Standard or regular shoe width.
  SHOE_WIDTH_STANDARD = 2;
  // Wide shoe width.
  SHOE_WIDTH_WIDE = 3;
  // Extra wide shoe width.
  SHOE_WIDTH_EXTRA_WIDE = 4;
}

// Enum representing different sizes of shoes.
enum ShoeSize {
  // Unspecified shoe size.
  SHOE_SIZE_UNSPECIFIED = 0;
  // US shoe size 5.
  SHOE_SIZE_US_5 = 1;
  // US shoe size 5.5.
  SHOE_SIZE_US_5_5 = 2;
  // US shoe size 6.
  SHOE_SIZE_US_6 = 3;
  // US shoe size 6.5.
  SHOE_SIZE_US_6_5 = 4;
  // US shoe size 7.
  SHOE_SIZE_US_7 = 5;
  // US shoe size 7.5.
  SHOE_SIZE_US_7_5 = 6;
  // US shoe size 8.
  SHOE_SIZE_US_8 = 7;
  // US shoe size 8.5.
  SHOE_SIZE_US_8_5 = 8;
  // US shoe size 9.
  SHOE_SIZE_US_9 = 9;
  // US shoe size 9.5.
  SHOE_SIZE_US_9_5 = 10;
  // US shoe size 10.
  SHOE_SIZE_US_10 = 11;
  // US shoe size 10.5.
  SHOE_SIZE_US_10_5 = 12;
  // US shoe size 11.
  SHOE_SIZE_US_11 = 13;
  // US shoe size 11.5.
  SHOE_SIZE_US_11_5 = 14;
  // US shoe size 12.
  SHOE_SIZE_US_12 = 15;
  // US shoe size 12.5.
  SHOE_SIZE_US_12_5 = 16;
  // US shoe size 13.
  SHOE_SIZE_US_13 = 17;
  // US shoe size 13.5.
  SHOE_SIZE_US_13_5 = 18;
  // US shoe size 14.
  SHOE_SIZE_US_14 = 19;
  // US shoe size 14.5.
  SHOE_SIZE_US_14_5 = 20;
  // EU shoe size 35.
  SHOE_SIZE_EU_35 = 21;
  // EU shoe size 36.
  SHOE_SIZE_EU_36 = 22;
  // EU shoe size 37.
  SHOE_SIZE_EU_37 = 23;
  // EU shoe size 38.
  SHOE_SIZE_EU_38 = 24;
  // EU shoe size 39.
  SHOE_SIZE_EU_39 = 25;
  // EU shoe size 40.
  SHOE_SIZE_EU_40 = 26;
  // EU shoe size 41.
  SHOE_SIZE_EU_41 = 27;
  // EU shoe size 42.
  SHOE_SIZE_EU_42 = 28;
  // EU shoe size 43.
  SHOE_SIZE_EU_43 = 29;
  // EU shoe size 44.
  SHOE_SIZE_EU_44 = 30;
  // EU shoe size 45.
  SHOE_SIZE_EU_45 = 31;
  // EU shoe size 46.
  SHOE_SIZE_EU_46 = 32;
  // EU shoe size 47.
  SHOE_SIZE_EU_47 = 33;
  // EU shoe size 48.
  SHOE_SIZE_EU_48 = 34;
}

// Enum representing different size ranges for apparel.
enum ApparelSizeRange {
  // Unspecified size range.
  APPAREL_SIZE_RANGE_UNSPECIFIED = 0;
  // Extra extra extra small size range.
  APPAREL_SIZE_RANGE_XXXS = 1;
  // Extra extra small size range.
  APPAREL_SIZE_RANGE_XXS = 2;
  // Extra small size range.
  APPAREL_SIZE_RANGE_XS = 3;
  // Small size range.
  APPAREL_SIZE_RANGE_S = 4;
  // Medium size range.
  APPAREL_SIZE_RANGE_M = 5;
  // Large size range.
  APPAREL_SIZE_RANGE_L = 6;
  // Extra large size range.
  APPAREL_SIZE_RANGE_XL = 7;
  // Extra extra large size range.
  APPAREL_SIZE_RANGE_XXL = 8;
  // Extra extra extra large size range.
  APPAREL_SIZE_RANGE_XXXL = 9;
  // One size fits all
  APPAREL_SIZE_RANGE_ONE_SIZE = 10;
  // 1X size range
  APPAREL_SIZE_RANGE_1X = 11;
  // 2X size range
  APPAREL_SIZE_RANGE_2X = 12;
  // 3X size range
  APPAREL_SIZE_RANGE_3X = 13;
  // 4X size range
  APPAREL_SIZE_RANGE_4X = 14;
  // 5X size range
  APPAREL_SIZE_RANGE_5X = 15;
  // 6X size range
  APPAREL_SIZE_RANGE_6X = 16;
  // 7X size range
  APPAREL_SIZE_RANGE_7X = 17;
  // 8X size range
  APPAREL_SIZE_RANGE_8X = 18;
  // 9X size range
  APPAREL_SIZE_RANGE_9X = 19;
  // 10X size range
  APPAREL_SIZE_RANGE_10X = 20;
  // 2T size range
  APPAREL_SIZE_RANGE_2T = 21;
  // 3T size range
  APPAREL_SIZE_RANGE_3T = 22;
  // 4T size range
  APPAREL_SIZE_RANGE_4T = 23;
  // 5T size range
  APPAREL_SIZE_RANGE_5T = 24;
  // 6T size range
  APPAREL_SIZE_RANGE_6T = 25;
  // Preemie size range
  APPAREL_SIZE_RANGE_PREEMIE = 26;
  // Newborn size range
  APPAREL_SIZE_RANGE_NEWBORN = 27;
  // 0-3 Months size range
  APPAREL_SIZE_RANGE_0_3_MONTHS = 28;
  // 3-6 Months size range
  APPAREL_SIZE_RANGE_3_6_MONTHS = 29;
  // 6-9 Months size range
  APPAREL_SIZE_RANGE_6_9_MONTHS = 30;
  // 9-12 Months size range
  APPAREL_SIZE_RANGE_9_12_MONTHS = 31;
  // 12-18 Months size range
  APPAREL_SIZE_RANGE_12_18_MONTHS = 32;
  // 18-24 Months size range
  APPAREL_SIZE_RANGE_18_24_MONTHS = 33;
  // 0-6 Months size range
  APPAREL_SIZE_RANGE_0_6_MONTHS = 34;
  // 6-12 Months size range
  APPAREL_SIZE_RANGE_6_12_MONTHS = 35;
  // 12-24 Months size range
  APPAREL_SIZE_RANGE_12_24_MONTHS = 36;
  // Size 4
  APPAREL_SIZE_RANGE_4 = 37;
  // Size 5
  APPAREL_SIZE_RANGE_5 = 38;
  // Size 6
  APPAREL_SIZE_RANGE_6 = 39;
  // Size 7
  APPAREL_SIZE_RANGE_7 = 41;
  // Size 8
  APPAREL_SIZE_RANGE_8 = 42;
  // Size 10
  APPAREL_SIZE_RANGE_10 = 43;
  // Size 12
  APPAREL_SIZE_RANGE_12 = 44;
  // Size 14
  APPAREL_SIZE_RANGE_14 = 45;
  // Size 16
  APPAREL_SIZE_RANGE_16 = 46;
  // Size 18
  APPAREL_SIZE_RANGE_18 = 47;
}

// Enum representing different bra sizes.
enum BraSize {
  // Unspecified bra size.
  BRA_SIZE_UNSPECIFIED = 0;
  // Bra size 30A.
  BRA_SIZE_30A = 1;
  // Bra size 30B.
  BRA_SIZE_30B = 2;
  // Bra size 30C.
  BRA_SIZE_30C = 3;
  // Bra size 30D.
  BRA_SIZE_30D = 4;
  // Bra size 30DD.
  BRA_SIZE_30DD = 5;
  // Bra size 30E.
  BRA_SIZE_30E = 6;
  // Bra size 30F.
  BRA_SIZE_30F = 7;
  // Bra size 30G.
  BRA_SIZE_30G = 8;
  // Bra size 30H.
  BRA_SIZE_30H = 9;
  // Bra size 32A.
  BRA_SIZE_32A = 10;
  // Bra size 32B.
  BRA_SIZE_32B = 11;
  // Bra size 32C.
  BRA_SIZE_32C = 12;
  // Bra size 32D.
  BRA_SIZE_32D = 13;
  // Bra size 32DD.
  BRA_SIZE_32DD = 14;
  // Bra size 32E.
  BRA_SIZE_32E = 15;
  // Bra size 32F.
  BRA_SIZE_32F = 16;
  // Bra size 32G.
  BRA_SIZE_32G = 17;
  // Bra size 32H.
  BRA_SIZE_32H = 18;
  // Bra size 34A.
  BRA_SIZE_34A = 19;
  // Bra size 34B.
  BRA_SIZE_34B = 20;
  // Bra size 34C.
  BRA_SIZE_34C = 21;
  // Bra size 34D.
  BRA_SIZE_34D = 22;
  // Bra size 34DD.
  BRA_SIZE_34DD = 23;
  // Bra size 34E.
  BRA_SIZE_34E = 24;
  // Bra size 34F.
  BRA_SIZE_34F = 25;
  // Bra size 34G.
  BRA_SIZE_34G = 26;
  // Bra size 34H.
  BRA_SIZE_34H = 27;
  // Bra size 36A.
  BRA_SIZE_36A = 28;
  // Bra size 36B.
  BRA_SIZE_36B = 29;
  // Bra size 36C.
  BRA_SIZE_36C = 30;
  // Bra size 36D.
  BRA_SIZE_36D = 31;
  // Bra size 36DD.
  BRA_SIZE_36DD = 32;
  // Bra size 36E.
  BRA_SIZE_36E = 33;
  // Bra size 36F.
  BRA_SIZE_36F = 34;
  // Bra size 36G.
  BRA_SIZE_36G = 35;
  // Bra size 36H.
  BRA_SIZE_36H = 36;
  // Bra size 38A.
  BRA_SIZE_38A = 37;
  // Bra size 38B.
  BRA_SIZE_38B = 38;
  // Bra size 38C.
  BRA_SIZE_38C = 39;
  // Bra size 38D.
  BRA_SIZE_38D = 40;
  // Bra size 38DD.
  BRA_SIZE_38DD = 41;
  // Bra size 38E.
  BRA_SIZE_38E = 42;
  // Bra size 38F.
  BRA_SIZE_38F = 43;
  // Bra size 38G.
  BRA_SIZE_38G = 44;
  // Bra size 38H.
  BRA_SIZE_38H = 45;
  // Bra size 40A.
  BRA_SIZE_40A = 46;
  // Bra size 40B.
  BRA_SIZE_40B = 47;
  // Bra size 40C.
  BRA_SIZE_40C = 48;
  // Bra size 40D.
  BRA_SIZE_40D = 49;
  // Bra size 40DD.
  BRA_SIZE_40DD = 50;
  // Bra size 40E.
  BRA_SIZE_40E = 51;
  // Bra size 40F.
  BRA_SIZE_40F = 52;
  // Bra size 40G.
  BRA_SIZE_40G = 53;
  // Bra size 40H.
  BRA_SIZE_40H = 54;
  // Bra size 28D
  BRA_SIZE_28D = 55;
  // Bra size 28DD
  BRA_SIZE_28DD = 56;
  // Bra size 28DDD
  BRA_SIZE_28DDD = 57;
  // Bra size 28G
  BRA_SIZE_28G = 58;
  // Bra size 28H
  BRA_SIZE_28H = 59;
  // Bra size 28I
  BRA_SIZE_28I = 60;
  // Bra size 28J
  BRA_SIZE_28J = 61;
  // Bra size 30DDD
  BRA_SIZE_30DDD = 62;
  // Bra size 30I
  BRA_SIZE_30I = 63;
  // Bra size 30J
  BRA_SIZE_30J = 64;
  // Bra size 32DDD
  BRA_SIZE_32DDD = 65;
  // Bra size 32I
  BRA_SIZE_32I = 66;
  // Bra size 32J
  BRA_SIZE_32J = 67;
  // Bra size 34DDD
  BRA_SIZE_34DDD = 68;
  // Bra size 34I
  BRA_SIZE_34I = 69;
  // Bra size 34J
  BRA_SIZE_34J = 70;
  // Bra size 36DDD
  BRA_SIZE_36DDD = 71;
  // Bra size 36I
  BRA_SIZE_36I = 72;
  // Bra size 36J
  BRA_SIZE_36J = 73;
  // Bra size 38DDD
  BRA_SIZE_38DDD = 74;
  // Bra size 38I
  BRA_SIZE_38I = 75;
  // Bra size 40DDD
  BRA_SIZE_40DDD = 76;
  // Bra size 40I
  BRA_SIZE_40I = 77;
  // Bra size 42C
  BRA_SIZE_42C = 78;
  // Bra size 42D
  BRA_SIZE_42D = 79;
  // Bra size 42DD
  BRA_SIZE_42DD = 80;
  // Bra size 42DDD
  BRA_SIZE_42DDD = 81;
  // Bra size 42G
  BRA_SIZE_42G = 82;
  // Bra size 42H
  BRA_SIZE_42H = 83;
  // Bra size 44C
  BRA_SIZE_44C = 84;
  // Bra size 44D
  BRA_SIZE_44D = 85;
  // Bra size 44DD
  BRA_SIZE_44DD = 86;
  // Bra size 44DDD
  BRA_SIZE_44DDD = 87;
  // Bra size 44G
  BRA_SIZE_44G = 88;
  // Bra size 44H
  BRA_SIZE_44H = 89;
  // Bra size 46DD
  BRA_SIZE_46DD = 90;
  // Bra size 46DDD
  BRA_SIZE_46DDD = 91;
}

// Enum representing different types of flowers.
enum FlowerType {
  // Unspecified flower type.
  FLOWER_TYPE_UNSPECIFIED = 0;
  // Rose flower type.
  FLOWER_TYPE_ROSE = 1;
  // Lily flower type.
  FLOWER_TYPE_LILY = 2;
  // Tulip flower type.
  FLOWER_TYPE_TULIP = 3;
  // Sunflower flower type.
  FLOWER_TYPE_SUNFLOWER = 4;
  // Daisy flower type.
  FLOWER_TYPE_DAISY = 5;
  // Orchid flower type.
  FLOWER_TYPE_ORCHID = 6;
  // Carnation flower type.
  FLOWER_TYPE_CARNATION = 7;
  // Peony flower type.
  FLOWER_TYPE_PEONY = 8;
  // Hydrangea flower type.
  FLOWER_TYPE_HYDRANGEA = 9;
  // Daffodil flower type.
  FLOWER_TYPE_DAFFODIL = 10;
  // Gerbera flower type.
  FLOWER_TYPE_GERBERA = 11;
  // Chrysanthemum flower type.
  FLOWER_TYPE_CHRYSANTHEMUM = 12;
  // Freesia flower type.
  FLOWER_TYPE_FREESIA = 13;
  // Iris flower type.
  FLOWER_TYPE_IRIS = 14;
  // Lavender flower type.
  FLOWER_TYPE_LAVENDER = 15;
  // Snapdragon flower type.
  FLOWER_TYPE_SNAPDRAGON = 16;
  // Poppy flower type.
  FLOWER_TYPE_POPPY = 17;
  // Marigold flower type.
  FLOWER_TYPE_MARIGOLD = 18;
  // Zinnia flower type.
  FLOWER_TYPE_ZINNIA = 19;
}

// Enum representing different paper sizes.
enum PaperSize {
  // Unspecified paper size.
  PAPER_SIZE_UNSPECIFIED = 0;
  // US Letter paper size (8.5 x 11 inches).
  PAPER_SIZE_US_LETTER = 1;
  // US Legal paper size (8.5 x 14 inches).
  PAPER_SIZE_US_LEGAL = 2;
  // US Tabloid paper size (11 x 17 inches).
  PAPER_SIZE_US_TABLOID = 3;
  // A0 paper size (841 x 1189 millimeters).
  PAPER_SIZE_A0 = 4;
  // A1 paper size (594 x 841 millimeters).
  PAPER_SIZE_A1 = 5;
  // A2 paper size (420 x 594 millimeters).
  PAPER_SIZE_A2 = 6;
  // A3 paper size (297 x 420 millimeters).
  PAPER_SIZE_A3 = 7;
  // A4 paper size (210 x 297 millimeters).
  PAPER_SIZE_A4 = 8;
  // A5 paper size (148 x 210 millimeters).
  PAPER_SIZE_A5 = 9;
  // A6 paper size (105 x 148 millimeters).
  PAPER_SIZE_A6 = 10;
  // A7 paper size (74 x 105 millimeters).
  PAPER_SIZE_A7 = 11;
  // A8 paper size (52 x 74 millimeters).
  PAPER_SIZE_A8 = 12;
  // A9 paper size (37 x 52 millimeters).
  PAPER_SIZE_A9 = 13;
  // A10 paper size (26 x 37 millimeters).
  PAPER_SIZE_A10 = 14;
}

// Enum representing different types of watch bands.
enum BandType {
  // Unspecified watch band type.
  BAND_TYPE_UNSPECIFIED = 0;
  // Leather watch band type.
  BAND_TYPE_LEATHER = 1;
  // Metal watch band type.
  BAND_TYPE_METAL = 2;
  // Silicone watch band type.
  BAND_TYPE_SILICONE = 3;
  // Nylon watch band type.
  BAND_TYPE_NYLON = 4;
  // Rubber watch band type.
  BAND_TYPE_RUBBER = 5;
  // Stainless steel watch band type.
  BAND_TYPE_STAINLESS_STEEL = 6;
  // Mesh watch band type.
  BAND_TYPE_MESH = 7;
  // Ceramic watch band type.
  BAND_TYPE_CERAMIC = 8;
  // Resin watch band type.
  BAND_TYPE_RESIN = 9;
  // Fabric watch band type.
  BAND_TYPE_FABRIC = 10;
  // Canvas watch band type.
  BAND_TYPE_CANVAS = 11;
  // Wood watch band type.
  BAND_TYPE_WOOD = 12;
  // Rubber/Silicone Hybrid watch band type.
  BAND_TYPE_RUBBER_SILICONE_HYBRID = 13;
  // Plastic watch band type.
  BAND_TYPE_PLASTIC = 14;
}

// Message representing the screen resolution of a device.
message ScreenResolution {
  // Vertical pixel count of the screen.
  AttributedInt64Value vertical_pixels = 1;
  // Horizontal pixel count of the screen.
  AttributedInt64Value horizontal_pixels = 2;
}

// Enum representing different byte units for measuring data sizes.
enum ByteUnit {
  // Unspecified byte unit.
  BYTE_UNIT_UNSPECIFIED = 0;
  // Byte unit.
  BYTE_UNIT_BYTE = 1;
  // Kilobyte unit (1000 bytes).
  BYTE_UNIT_KILOBYTE = 2;
  // Megabyte unit (1,000,000 bytes).
  BYTE_UNIT_MEGABYTE = 3;
  // Gigabyte unit (1,000,000,000 bytes).
  BYTE_UNIT_GIGABYTE = 4;
  // Terabyte unit (1,000,000,000,000 bytes).
  BYTE_UNIT_TERABYTE = 5;
  // Petabyte unit (1,000,000,000,000,000 bytes).
  BYTE_UNIT_PETABYTE = 6;
  // Exabyte unit (1,000,000,000,000,000,000 bytes).
  BYTE_UNIT_EXABYTE = 7;
  // Kibibyte unit (1024 bytes).
  BYTE_UNIT_KIBIBYTE = 8;
  // Mebibyte unit (1,048,576 bytes).
  BYTE_UNIT_MEBIBYTE = 9;
  // Gibibyte unit (1,073,741,824 bytes).
  BYTE_UNIT_GIBIBYTE = 10;
  // Tebibyte unit (1,099,511,627,776 bytes).
  BYTE_UNIT_TEBIBYTE = 11;
  // Pebibyte unit (1,125,899,906,842,624 bytes).
  BYTE_UNIT_PEBIBYTE = 12;
  // Exbibyte unit (1,152,921,504,606,846,976 bytes).
  BYTE_UNIT_EXBIBYTE = 13;
}

// Message representing the storage size of an electronic device.
message ElectronicsStorageSize {
  // The numerical value of the storage size.
  // Example: 128 for 128 GB.
  AttributedInt64Value value = 1;
  // The unit of measurement for the storage size, such as bytes, kilobytes, megabytes, etc.
  ByteUnit unit = 2;
}

// Enum representing different units for frequency measurement.
enum FrequencyUnit {
  // Unspecified frequency unit.
  FREQUENCY_UNIT_UNSPECIFIED = 0;
  // Hertz (Hz) unit.
  FREQUENCY_UNIT_HERTZ = 1;
  // Kilohertz (kHz) unit.
  FREQUENCY_UNIT_KILOHERTZ = 2;
  // Gigahertz (GHz) unit.
  FREQUENCY_UNIT_GIGAHERTZ = 3;
  // Terahertz (THz) unit.
  FREQUENCY_UNIT_TERAHERTZ = 4;
}

// Message representing clock frequency of a device.
message ClockFrequency {
  // The numerical value of the clock frequency.
  AttributedFloatValue value = 1;
  // The unit of measurement for the clock frequency.
  FrequencyUnit unit = 2;
}

// Enum representing the condition of an item.
enum Condition {
  // Unspecified condition.
  CONDITION_UNSPECIFIED = 0;
  // New condition.
  CONDITION_NEW = 1;
  // Pre-owned condition.
  CONDITION_PRE_OWNED = 2;
  // Open box condition.
  CONDITION_OPEN_BOX = 3;
  // Refurbished condition.
  CONDITION_REFURBISHED = 4;
}

// Enum representing different rises for apparel.
enum ApparelRise {
  // Unspecified apparel rise.
  APPAREL_RISE_UNSPECIFIED = 0;
  // Low rise apparel.
  APPAREL_RISE_LOW = 1;
  // Medium rise apparel.
  APPAREL_RISE_MEDIUM = 2;
  // High rise apparel.
  APPAREL_RISE_HIGH = 3;
}

// Enum representing different lengths for apparel.
enum ApparelLength {
  // Unspecified apparel length.
  APPAREL_LENGTH_UNSPECIFIED = 0;
  // Short length apparel.
  APPAREL_LENGTH_SHORT = 1;
  // Regular length apparel.
  APPAREL_LENGTH_REGULAR = 2;
  // Long length apparel.
  APPAREL_LENGTH_LONG = 3;
  // Petite length apparel.
  APPAREL_LENGTH_PETITE = 4;
  // Tall length apparel.
  APPAREL_LENGTH_TALL = 5;
  // Straight fit apparel.
  APPAREL_LENGTH_STRAIGHT = 6;
  // Skinny fit apparel.
  APPAREL_LENGTH_SKINNY = 7;
  // High-low length apparel.
  APPAREL_LENGTH_HIGH_LOW = 8;
  // Midi length apparel.
  APPAREL_LENGTH_MIDI = 9;
  // Mini length apparel.
  APPAREL_LENGTH_MINI = 10;
  // Tea length apparel.
  APPAREL_LENGTH_TEA = 11;
}

// Enum representing different fits for apparel.
enum ApparelFit {
  // Unspecified apparel fit.
  APPAREL_FIT_UNSPECIFIED = 0;
  // Fitted: clothing that conforms closely to the contours of the body.
  APPAREL_FIT_FITTED = 1;
  // Structured: clothing with defined shapes and lines, often tailored.
  APPAREL_FIT_STRUCTURED = 2;
  // Loose: clothing that hangs away from the body, providing ample room.
  APPAREL_FIT_LOOSE = 3;
  // Tight: clothing that fits very closely or snugly to the body.
  APPAREL_FIT_TIGHT = 4;
  // Boyfriend: a style that emulates the loose, relaxed fit of men's clothing.
  APPAREL_FIT_BOYFRIEND = 5;
  // Baggy: clothing that is very loose and oversized, often with excess fabric.
  APPAREL_FIT_BAGGY = 6;
  // Deconstructed: clothing designed to look unfinished or partially disassembled.
  APPAREL_FIT_DECONSTRUCTED = 7;
  // Athletic: clothing designed for sports or physical activities, offering flexibility and movement.
  APPAREL_FIT_ATHLETIC = 8;
  // Slim: clothing with a close, body-hugging fit without being overly tight.
  APPAREL_FIT_SLIM = 9;
  // Boot cut: pants that are fitted through the thigh and flare out slightly from the knee to the ankle.
  APPAREL_FIT_BOOT_CUT = 10;
  // Straight leg: pants with a consistent width from the hip to the hem, creating a straight silhouette.
  APPAREL_FIT_STRAIGHT_LEG = 11;
  // Wide leg: pants with a relaxed fit through the thigh and a wide opening at the hem.
  APPAREL_FIT_WIDE_LEG = 12;
  // Skinny: pants that are tightly fitted throughout the leg, emphasizing a slim silhouette.
  APPAREL_FIT_SKINNY = 13;
}

// Enum representing different sizes for beds.
enum BedSize {
  // Unspecified bed size.
  BED_SIZE_UNSPECIFIED = 0;
  // Twin: a single-sized bed typically used for children or single sleepers.
  BED_SIZE_TWIN = 1;
  // Twin XL: a longer version of the twin bed, often used in college dormitories or guest rooms.
  BED_SIZE_TWIN_XL = 2;
  // Full: also known as a double bed, larger than a twin and suitable for single sleepers or couples who like to cuddle.
  BED_SIZE_FULL = 3;
  // Queen: a popular choice for couples, offering more space than a full but not as large as a king.
  BED_SIZE_QUEEN = 4;
  // King: the largest standard bed size, providing ample space for couples and those who like to spread out.
  BED_SIZE_KING = 5;
  // California King: longer and narrower than a standard king bed, ideal for taller individuals or those with narrower bedrooms.
  BED_SIZE_CALIFORNIA_KING = 6;
}

// Form in which a medication is provided.
enum MedicationForm {
  // Unspecified medication form.
  MEDICATION_FORM_UNSPECIFIED = 0;
  // Tablet form.
  MEDICATION_FORM_TABLET = 1;
  // Capsule form.
  MEDICATION_FORM_CAPSULE = 2;
  // Liquid form.
  MEDICATION_FORM_LIQUID = 3;
  // Cream form.
  MEDICATION_FORM_CREAM = 4;
  // Ointment form.
  MEDICATION_FORM_OINTMENT = 5;
  // Injection form.
  MEDICATION_FORM_INJECTION = 6;
  // Inhaler form.
  MEDICATION_FORM_INHALER = 7;
  // Suppository form.
  MEDICATION_FORM_SUPPOSITORY = 8;
  // Patch form.
  MEDICATION_FORM_PATCH = 9;
  // Spray form.
  MEDICATION_FORM_SPRAY = 10;
  // Drops form.
  MEDICATION_FORM_DROPS = 11;
  // Powder form.
  MEDICATION_FORM_POWDER = 12;
  // Gel form.
  MEDICATION_FORM_GEL = 13;
  // Lozenge form.
  MEDICATION_FORM_LOZENGE = 14;
  // Syrup form.
  MEDICATION_FORM_SYRUP = 15;
  // Suspension form.
  MEDICATION_FORM_SUSPENSION = 16;
  // Solution form.
  MEDICATION_FORM_SOLUTION = 17;
  // Aerosol form.
  MEDICATION_FORM_AEROSOL = 18;
  // Foam form.
  MEDICATION_FORM_FOAM = 19;
  // Jelly form.
  MEDICATION_FORM_JELLY = 20;
  // Gum form.
  MEDICATION_FORM_GUM = 21;
  // Strip form.
  MEDICATION_FORM_STRIP = 22;
  // Paste form.
  MEDICATION_FORM_PASTE = 23;
  // Solid form.
  MEDICATION_FORM_SOLID = 24;
  // Meltaway form.
  MEDICATION_FORM_MELTAWAY = 25;
  // Topical form.
  MEDICATION_FORM_TOPICAL = 26;
  // Pouch form.
  MEDICATION_FORM_POUCH = 27;
  // Pad form.
  MEDICATION_FORM_PAD = 28;
  // Chewable form.
  MEDICATION_FORM_CHEWABLE = 29;
  // Effervescent form.
  MEDICATION_FORM_EFFERVESCENT = 30;
  // Vaporizer form.
  MEDICATION_FORM_VAPORIZER = 31;
  // Roll-on form.
  MEDICATION_FORM_ROLL_ON = 32;
  // Mask form.
  MEDICATION_FORM_MASK = 33;
  // Wipe form.
  MEDICATION_FORM_WIPE = 34;
}

// Enumeration of alcohol's DrySweetnessLevel
// Sweetness / Dryness Level refers to the amount of residual sugar retained from the grapes
// during the fermentation process.
enum DrySweetnessLevel {
  // Indicates a level related to unspecified
  DRY_SWEETNESS_LEVEL_UNSPECIFIED = 0;
  // Indicates a level related to extra dry
  DRY_SWEETNESS_LEVEL_EXTRA_DRY = 1;
  // Indicates a level related to dry
  DRY_SWEETNESS_LEVEL_DRY = 2;
  // Indicates a level related to off dry
  DRY_SWEETNESS_LEVEL_OFF_DRY = 3;
  // Indicates a level related to semi sweet
  DRY_SWEETNESS_LEVEL_SEMI_SWEET = 4;
  // Indicates a level related to sweet
  DRY_SWEETNESS_LEVEL_SWEET = 5;
  // Indicates a level related to very sweet
  DRY_SWEETNESS_LEVEL_VERY_SWEET = 6;
}

// Enumeration of alcohol's FoodPairing
// Food pairing refers to food that pairs well with the alcoholic beverage.
enum FoodPairing {
  // Indicates a food pairing related to unspecified
  FOOD_PAIRING_UNSPECIFIED = 0;
  // Indicates a food pairing related to poultry
  FOOD_PAIRING_POULTRY = 1;
  // Indicates a food pairing related to fish
  FOOD_PAIRING_FISH = 2;
  // Indicates a food pairing related to shellfish
  FOOD_PAIRING_SHELLFISH = 3;
  // Indicates a food pairing related to soft cheese
  FOOD_PAIRING_SOFT_CHEESE = 4;
  // Indicates a food pairing related to hard cheese
  FOOD_PAIRING_HARD_CHEESE = 5;
  // Indicates a food pairing related to spicy
  FOOD_PAIRING_SPICY = 6;
  // Indicates a food pairing related to pork
  FOOD_PAIRING_PORK = 7;
  // Indicates a food pairing related to deserts
  FOOD_PAIRING_DESSERTS = 8;
  // Indicates a food pairing related to lamb
  FOOD_PAIRING_LAMB = 9;
  // Indicates a food pairing related to seafood
  FOOD_PAIRING_SEAFOOD = 10;
  // Indicates a food pairing related to chips
  FOOD_PAIRING_CHIPS = 11;
  // Indicates a food pairing related to pasta
  FOOD_PAIRING_PASTA = 12;
  // Indicates a food pairing related to vegetables
  FOOD_PAIRING_VEGETABLES = 13;
  // Indicates a food pairing related to beef
  FOOD_PAIRING_BEEF = 14;
}

// Enumeration of alcohol's body type
// Body refers to how the beverage feels in your mouth, including its weight, texture, and richness.
// Typically only applies to Wine and Spirits.
enum AlcoholBody {
  // Indicates a body related to unspecified
  ALCOHOL_BODY_UNSPECIFIED = 0;
  // Indicates a body related to light bodied
  ALCOHOL_BODY_LIGHT_BODIED = 1;
  // Indicates a body related to medium bodied
  ALCOHOL_BODY_MEDIUM_BODIED = 2;
  // Indicates a body related to full bodied
  ALCOHOL_BODY_FULL_BODIED = 3;
}

// Enumeration of alcohol's appellation
// An appellation of origin is a legally defined geographical area that indicates where a
// wine's grapes were grown and the wine's production requirements.
enum Appellation {
  // Indicates an appellation related to mendoza
  APPELLATION_UNSPECIFIED = 0;
  // Indicates an appellation related to south austrilia
  APPELLATION_SOUTH_AUSTRALIA = 1;
  // Indicates an appellation related to alsace
  APPELLATION_ALSACE = 2;
  // Indicates an appellation related to bordeaux
  APPELLATION_BORDEAUX = 3;
  // Indicates an appellation related to burgundy
  APPELLATION_BURGUNDY = 4;
  // Indicates an appellation related to champagne
  APPELLATION_CHAMPAGNE = 5;
  // Indicates an appellation related to mosel
  APPELLATION_MOSEL = 6;
  // Indicates an appellation related to lombardy
  APPELLATION_LOMBARDY = 7;
  // Indicates an appellation related to sicily
  APPELLATION_SICILY = 8;
  // Indicates an appellation related to veneto
  APPELLATION_VENETO = 9;
  // Indicates an appellation related to western cafe
  APPELLATION_WESTERN_CAPE = 10;
  // Indicates an appellation related to andalucia
  APPELLATION_ANDALUCIA = 11;
  // Indicates an appellation related to la rioja
  APPELLATION_LA_RIOJA = 12;
  // Indicates an appellation related to napa valley
  APPELLATION_NAPA_VALLEY = 13;
  // Indicates an appellation related to sonoma velley
  APPELLATION_SONOMA_VALLEY = 14;
  // Indicates an appellation related to Raso Robles
  APPELLATION_PASO_ROBLES = 15;
  // Indicates an appellation related to Alexander valley
  APPELLATION_ALEXANDER_VALLEY = 16;
  // Indicates an appellation related to amador county
  APPELLATION_AMADOR_COUNTY = 17;
  // Indicates an appellation related to anderson valley
  APPELLATION_ANDERSON_VALLEY = 18;
  // Indicates an appellation related to arroyo seco
  APPELLATION_ARROYO_SECO = 19;
  // Indicates an appellation related to atalas peak
  APPELLATION_ATLAS_PEAK = 20;
  // Indicates an appellation related to bergerac
  APPELLATION_BERGERAC = 21;
  // Indicates an appellation related to calistoga
  APPELLATION_CALISTOGA = 22;
  // Indicates an appellation related to chalk hill
  APPELLATION_CHALK_HILL = 23;
  // Indicates an appellation related to chehalem mountains
  APPELLATION_CHEHALEM_MOUNTAINS = 24;
  // Indicates an appellation related to mendoza
  APPELLATION_MENDOZA = 25;
  // Indicates an appellation related to Coombsville
  APPELLATION_COOMBSVILLE = 26;
  // Indicates an appellation related to Diamond Mountain
  APPELLATION_DIAMOND_MOUNTAIN = 27;
  // Indicates an appellation related to Dry Creek Valley
  APPELLATION_DRY_CREEK_VALLEY = 28;
  // Indicates an appellation related to Dundee Hills
  APPELLATION_DUNDEE_HILLS = 29;
  // Indicates an appellation related to Edna Valley
  APPELLATION_EDNA_VALLEY = 30;
  // Indicates an appellation related to El Dorado
  APPELLATION_EL_DORADO = 31;
  // Indicates an appellation related to Eola-Amity Hills
  APPELLATION_EOLA_AMITY_HILLS = 32;
  // Indicates an appellation related to Green Valley
  APPELLATION_GREEN_VALLEY = 33;
  // Indicates an appellation related to Horse Heaven Hills
  APPELLATION_HORSE_HEAVEN_HILLS = 34;
  // Indicates an appellation related to Howell Mountain
  APPELLATION_HOWELL_MOUNTAIN = 35;
  // Indicates an appellation related to Knights Valley
  APPELLATION_KNIGHTS_VALLEY = 36;
  // Indicates an appellation related to McMinnville
  APPELLATION_MCMINNVILLE = 37;
  // Indicates an appellation related to Oak Knoll
  APPELLATION_OAK_KNOLL = 38;
  // Indicates an appellation related to Oakville
  APPELLATION_OAKVILLE = 39;
  // Indicates an appellation related to Pessac-Leognan
  APPELLATION_PESSAC_LEOGNAN = 40;
  // Indicates an appellation related to Placer County
  APPELLATION_PLACER_COUNTY = 41;
  // Indicates an appellation related to Red Mountain
  APPELLATION_RED_MOUNTAIN = 42;
  // Indicates an appellation related to Ribbon Ridge
  APPELLATION_RIBBON_RIDGE = 43;
  // Indicates an appellation related to Russian River Valley
  APPELLATION_RUSSIAN_RIVER_VALLEY = 44;
  // Indicates an appellation related to Rutherford
  APPELLATION_RUTHERFORD = 45;
  // Indicates an appellation related to San Antonio Valley
  APPELLATION_SAN_ANTONIO_VALLEY = 46;
  // Indicates an appellation related to San Luis Obispo
  APPELLATION_SAN_LUIS_OBISPO = 47;
  // Indicates an appellation related to Santa Cruz Mountains
  APPELLATION_SANTA_CRUZ_MOUNTAINS = 48;
  // Indicates an appellation related to Santa Lucia Highlands
  APPELLATION_SANTA_LUCIA_HIGHLANDS = 49;
  // Indicates an appellation related to Santa Maria Valley
  APPELLATION_SANTA_MARIA_VALLEY = 50;
  // Indicates an appellation related to Santa Rita Hills
  APPELLATION_SANTA_RITA_HILLS = 51;
  // Indicates an appellation related to Santa Ynez
  APPELLATION_SANTA_YNEZ = 52;
  // Indicates an appellation related to Sonoma Coast
  APPELLATION_SONOMA_COAST = 53;
  // Indicates an appellation related to Sonoma Mountain
  APPELLATION_SONOMA_MOUNTAIN = 54;
  // Indicates an appellation related to Spring Mountain
  APPELLATION_SPRING_MOUNTAIN = 55;
  // Indicates an appellation related to Stags Leap District
  APPELLATION_STAGS_LEAP_DISTRICT = 56;
  // Indicates an appellation related to Wahluke Slope
  APPELLATION_WAHLUKE_SLOPE = 57;
  // Indicates an appellation related to Walla Walla
  APPELLATION_WALLA_WALLA = 58;
  // Indicates an appellation related to Yamhill-Carlton
  APPELLATION_YAMHILL_CARLTON = 59;
  // Indicates an appellation related to York Mountain
  APPELLATION_YORK_MOUNTAIN = 60;
}

// Enumeration of alcohol's tasting notes
// Tasting notes refers to the aromas and taste characteristics
// of the alcohol that include how it was aged (oak barrel), where it was grown, or, in wine specifically,
// when the grape was picked (younger vs older grape).
enum TastingNotes {
  // Indicates a tasting notes related to unspecified
  TASTING_NOTES_UNSPECIFIED = 0;
  // Indicates a tasting notes related to citrus
  TASTING_NOTES_CITRUS = 1;
  // Indicates a tasting notes related to pear
  TASTING_NOTES_PEAR = 2;
  // Indicates a tasting notes related to hoppy
  TASTING_NOTES_HOPPY = 3;
  // Indicates a tasting notes related to malty
  TASTING_NOTES_MALTY = 4;
  // Indicates a tasting notes related to oak
  TASTING_NOTES_OAK = 5;
  // Indicates a tasting notes related to smoke
  TASTING_NOTES_SMOKE = 6;
  // Indicates a tasting notes related to sour
  TASTING_NOTES_SOUR = 7;
  // Indicates a tasting notes related to spiced
  TASTING_NOTES_SPICED = 8;
  // Indicates a tasting notes related to toast
  TASTING_NOTES_TOAST = 9;
  // Indicates a tasting notes related to vanilla
  TASTING_NOTES_VANILLA = 10;
  // Indicates a tasting notes related to chocolate
  TASTING_NOTES_CHOCOLATE = 11;
  // Indicates a tasting notes related to honey
  TASTING_NOTES_HONEY = 12;
  // Indicates a tasting notes related to sweet
  TASTING_NOTES_SWEET = 13;
  // Indicates a tasting notes related to wood
  TASTING_NOTES_WOOD = 14;
  // Indicates a tasting notes related to nut
  TASTING_NOTES_NUT = 15;
  // Indicates a tasting notes related to berry
  TASTING_NOTES_BERRY = 16;
  // Indicates a tasting notes related to apple
  TASTING_NOTES_APPLE = 17;
  // Indicates a tasting notes related to earth
  TASTING_NOTES_EARTH = 18;
  // Indicates a tasting notes related to dry fruit
  TASTING_NOTES_DRY_FRUIT = 19;
  // Indicates a tasting notes related to coffee
  TASTING_NOTES_COFFEE = 20;
  // Indicates a tasting notes related to floral
  TASTING_NOTES_FLORAL = 21;
  // Indicates a tasting notes related to fruity
  TASTING_NOTES_FRUITY = 22;
  // Indicates a tasting notes related to caramel
  TASTING_NOTES_CARAMEL = 23;
}

// Enumeration of alcohol's region of origin
// Wine Region refers to the larger geographical area the wine is grown. Does not include city, state, or country.
enum RegionOfOrigin {
  // Indicates the region of UNSPECIFIED
  REGION_OF_ORIGIN_UNSPECIFIED = 0;
  // Indicates the region of Wyoming
  REGION_OF_ORIGIN_WYOMING = 1;
  // Indicates the region of Alaska
  REGION_OF_ORIGIN_ALASKA = 2;
  // Indicates the region of Algeria
  REGION_OF_ORIGIN_ALGERIA = 3;
  // Indicates the region of Argentina
  REGION_OF_ORIGIN_ARGENTINA = 4;
  // Indicates the region of Arizona
  REGION_OF_ORIGIN_ARIZONA = 5;
  // Indicates the region of Arkansas
  REGION_OF_ORIGIN_ARKANSAS = 6;
  // Indicates the region of Armenia
  REGION_OF_ORIGIN_ARMENIA = 7;
  // Indicates the region of Australia
  REGION_OF_ORIGIN_AUSTRALIA = 8;
  // Indicates the region of Austria
  REGION_OF_ORIGIN_AUSTRIA = 9;
  // Indicates the region of Brazil
  REGION_OF_ORIGIN_BRAZIL = 10;
  // Indicates the region of Bulgaria
  REGION_OF_ORIGIN_BULGARIA = 11;
  // Indicates the region of California
  REGION_OF_ORIGIN_CALIFORNIA = 12;
  // Indicates the region of Canada
  REGION_OF_ORIGIN_CANADA = 13;
  // Indicates the region of Chile
  REGION_OF_ORIGIN_CHILE = 14;
  // Indicates the region of China
  REGION_OF_ORIGIN_CHINA = 15;
  // Indicates the region of Colorado
  REGION_OF_ORIGIN_COLORADO = 16;
  // Indicates the region of Connecticut
  REGION_OF_ORIGIN_CONNECTICUT = 17;
  // Indicates the region of Croatia
  REGION_OF_ORIGIN_CROATIA = 18;
  // Indicates the region of Cyprus
  REGION_OF_ORIGIN_CYPRUS = 19;
  // Indicates the region of Czech republic
  REGION_OF_ORIGIN_CZECH_REPUBLIC = 20;
  // Indicates the region of Delaware
  REGION_OF_ORIGIN_DELAWARE = 21;
  // Indicates the region of Denmark
  REGION_OF_ORIGIN_DENMARK = 22;
  // Indicates the region of Ecuador
  REGION_OF_ORIGIN_ECUADOR = 23;
  // Indicates the region of England
  REGION_OF_ORIGIN_ENGLAND = 24;
  // Indicates the region of Finland
  REGION_OF_ORIGIN_FINLAND = 25;
  // Indicates the region of Florida
  REGION_OF_ORIGIN_FLORIDA = 26;
  // Indicates the region of France
  REGION_OF_ORIGIN_FRANCE = 27;
  // Indicates the region of Georgia Republic
  REGION_OF_ORIGIN_GEORGIA_REPUBLIC = 28;
  // Indicates the region of Georgia State
  REGION_OF_ORIGIN_GEORGIA_STATE = 29;
  // Indicates the region of Germany
  REGION_OF_ORIGIN_GERMANY = 30;
  // Indicates the region of Global
  REGION_OF_ORIGIN_GLOBAL = 31;
  // Indicates the region of Greece
  REGION_OF_ORIGIN_GREECE = 32;
  // Indicates the region of Hawaii
  REGION_OF_ORIGIN_HAWAII = 33;
  // Indicates the region of Hungary
  REGION_OF_ORIGIN_HUNGARY = 34;
  // Indicates the region of Idaho
  REGION_OF_ORIGIN_IDAHO = 35;
  // Indicates the region of Illinois
  REGION_OF_ORIGIN_ILLINOIS = 36;
  // Indicates the region of India
  REGION_OF_ORIGIN_INDIA = 37;
  // Indicates the region of Indiana
  REGION_OF_ORIGIN_INDIANA = 38;
  // Indicates the region of Iowa
  REGION_OF_ORIGIN_IOWA = 39;
  // Indicates the region of Ireland
  REGION_OF_ORIGIN_IRELAND = 40;
  // Indicates the region of Israel
  REGION_OF_ORIGIN_ISRAEL = 41;
  // Indicates the region of Italy
  REGION_OF_ORIGIN_ITALY = 42;
  // Indicates the region of Jamaica
  REGION_OF_ORIGIN_JAMAICA = 43;
  // Indicates the region of japan
  REGION_OF_ORIGIN_JAPAN = 44;
  // Indicates the region of Kansas
  REGION_OF_ORIGIN_KANSAS = 45;
  // Indicates the region of Kentucky
  REGION_OF_ORIGIN_KENTUCKY = 46;
  // Indicates the region of Korea
  REGION_OF_ORIGIN_KOREA = 47;
  // Indicates the region of Lebanon
  REGION_OF_ORIGIN_LEBANON = 48;
  // Indicates the region of Louisiana
  REGION_OF_ORIGIN_LOUISIANA = 50;
  // Indicates the region of Macedonia
  REGION_OF_ORIGIN_MACEDONIA = 51;
  // Indicates the region of Maine
  REGION_OF_ORIGIN_MAINE = 52;
  // Indicates the region of Maryland
  REGION_OF_ORIGIN_MARYLAND = 53;
  // Indicates the region of Massachusetts
  REGION_OF_ORIGIN_MASSACHUSETTS = 54;
  // Indicates the region of Mexico
  REGION_OF_ORIGIN_MEXICO = 55;
  // Indicates the region of Michigan
  REGION_OF_ORIGIN_MICHIGAN = 56;
  // Indicates the region of Minnesota
  REGION_OF_ORIGIN_MINNESOTA = 57;
  // Indicates the region of Mississippi
  REGION_OF_ORIGIN_MISSISSIPPI = 58;
  // Indicates the region of Missouri
  REGION_OF_ORIGIN_MISSOURI = 59;
  // Indicates the region of Moldova
  REGION_OF_ORIGIN_MOLDOVA = 60;
  // Indicates the region of Montana
  REGION_OF_ORIGIN_MONTANA = 61;
  // Indicates the region of Montenegro
  REGION_OF_ORIGIN_MONTENEGRO = 62;
  // Indicates the region of Morocco
  REGION_OF_ORIGIN_MOROCCO = 63;
  // Indicates the region of Nebraska
  REGION_OF_ORIGIN_NEBRASKA = 64;
  // Indicates the region of Netherlands
  REGION_OF_ORIGIN_NETHERLANDS = 65;
  // Indicates the region of Nevada
  REGION_OF_ORIGIN_NEVADA = 66;
  // Indicates the region of Hampshire
  REGION_OF_ORIGIN_NEW_HAMPSHIRE = 67;
  // Indicates the region of New Jersey
  REGION_OF_ORIGIN_NEW_JERSEY = 68;
  // Indicates the region of New Mexico
  REGION_OF_ORIGIN_NEW_MEXICO = 69;
  // Indicates the region of New York
  REGION_OF_ORIGIN_NEW_YORK = 70;
  // Indicates the region of New Zealand
  REGION_OF_ORIGIN_NEW_ZEALAND = 71;
  // Indicates the region of North Carolina
  REGION_OF_ORIGIN_NORTH_CAROLINA = 72;
  // Indicates the region of Ohio
  REGION_OF_ORIGIN_OHIO = 73;
  // Indicates the region of Oregon
  REGION_OF_ORIGIN_OREGON = 74;
  // Indicates the region of Pennsylvania
  REGION_OF_ORIGIN_PENNSYLVANIA = 75;
  // Indicates the region of Peru
  REGION_OF_ORIGIN_PERU = 76;
  // Indicates the region of Poland
  REGION_OF_ORIGIN_POLAND = 77;
  // Indicates the region of Portugal
  REGION_OF_ORIGIN_PORTUGAL = 78;
  // Indicates the region of Rhode Island
  REGION_OF_ORIGIN_RHODE_ISLAND = 79;
  // Indicates the region of Romania
  REGION_OF_ORIGIN_ROMANIA = 80;
  // Indicates the region of Russia
  REGION_OF_ORIGIN_RUSSIA = 81;
  // Indicates the region of Scotland
  REGION_OF_ORIGIN_SCOTLAND = 82;
  // Indicates the region of Serbia
  REGION_OF_ORIGIN_SERBIA = 83;
  // Indicates the region of Slovenia
  REGION_OF_ORIGIN_SLOVENIA = 84;
  // Indicates the region of South Africa
  REGION_OF_ORIGIN_SOUTH_AFRICA = 85;
  // Indicates the region of South Carolina
  REGION_OF_ORIGIN_SOUTH_CAROLINA = 86;
  // Indicates the region of South Dakota
  REGION_OF_ORIGIN_SOUTH_DAKOTA = 87;
  // Indicates the region of South Korea
  REGION_OF_ORIGIN_SOUTH_KOREA = 88;
  // Indicates the region of Spain
  REGION_OF_ORIGIN_SPAIN = 89;
  // Indicates the region of Switzerland
  REGION_OF_ORIGIN_SWITZERLAND = 90;
  // Indicates the region of Tennessee
  REGION_OF_ORIGIN_TENNESSEE = 91;
  // Indicates the region of Texas
  REGION_OF_ORIGIN_TEXAS = 92;
  // Indicates the region of Turkey
  REGION_OF_ORIGIN_TURKEY = 93;
  // Indicates the region of Ukraine
  REGION_OF_ORIGIN_UKRAINE = 94;
  // Indicates the region of United States
  REGION_OF_ORIGIN_UNITED_STATES = 95;
  // Indicates the region of Uruguay
  REGION_OF_ORIGIN_URUGUAY = 96;
  // Indicates the region of Venezuela
  REGION_OF_ORIGIN_VENEZUELA = 97;
  // Indicates the region of Virginia
  REGION_OF_ORIGIN_VIRGINIA = 98;
  // Indicates the region of Washington
  REGION_OF_ORIGIN_WASHINGTON = 99;
  // Indicates the region of Wisconsin
  REGION_OF_ORIGIN_WISCONSIN = 100;
  // Indicates the region of Alabama
  REGION_OF_ORIGIN_ALABAMA = 101;
}

// Enumeration of alcohol's wine style
// Indicates a combination of the color, taste, alcoholic strength and several other factors.
enum WineStyle {
  // Indicates the wine style related to UNSPECIFIED
  WINE_STYLE_UNSPECIFIED = 0;
  // Indicates the wine style related to crisp
  WINE_STYLE_CRISP = 1;
  // Indicates the wine style related to elegant
  WINE_STYLE_ELEGANT = 2;
  // Indicates the wine style related to fresh
  WINE_STYLE_FRESH = 3;
  // Indicates the wine style related to fruity
  WINE_STYLE_FRUITY = 4;
  // Indicates the wine style related to refined
  WINE_STYLE_REFINED = 5;
  // Indicates the wine style related to complex
  WINE_STYLE_COMPLEX = 6;
  // Indicates the wine style related to rich
  WINE_STYLE_RICH = 7;
  // Indicates the wine style related to bright
  WINE_STYLE_BRIGHT = 8;
  // Indicates the wine style related to smooth
  WINE_STYLE_SMOOTH = 9;
  // Indicates the wine style related to balanced
  WINE_STYLE_BALANCED = 10;
  // Indicates the wine style related to hoppy
  WINE_STYLE_HOPPY = 11;
  // Indicates the wine style related to light
  WINE_STYLE_LIGHT = 12;
  // Indicates the wine style related to bold
  WINE_STYLE_BOLD = 13;
}

// Enumeration of alcohol's varietal
// Varietal refers to a wine that is made from a single grape variety and bears the name of that grape.
// For a wine to be considered varietal, it has to contain at least 85% of the wine grape listed on its label
// (75% in the USA). If to contains two or more different grapes, it is a blended wine.
enum AlcoholVarietal {
  // Indicates the varietal related to UNSPECIFIED
  ALCOHOL_VARIETAL_UNSPECIFIED = 0;
  // Indicates the varietal related to Arneis
  ALCOHOL_VARIETAL_ARNEIS = 1;
  // Indicates the varietal related to Cabernet Sauvignon
  ALCOHOL_VARIETAL_CABERNET_SAUVIGNON = 2;
  // Indicates the varietal related to Chenin Blanc
  ALCOHOL_VARIETAL_CHENIN_BLANC = 3;
  // Indicates the varietal related to Grenache
  ALCOHOL_VARIETAL_GRENACHE = 4;
  // Indicates the varietal related to Mourvèdre
  ALCOHOL_VARIETAL_MOURVEDRE = 5;
  // Indicates the varietal related to Pinot Blanc
  ALCOHOL_VARIETAL_PINOT_BLANC = 6;
  // Indicates the varietal related to Riesling
  ALCOHOL_VARIETAL_RIESLING = 7;
  // Indicates the varietal related to Shiraz & Syrah
  ALCOHOL_VARIETAL_SHIRAZ_SYRAH = 8;
  // Indicates the varietal related to Zinfandel
  ALCOHOL_VARIETAL_ZINFANDEL = 9;
  // Indicates the varietal related to Barbera
  ALCOHOL_VARIETAL_BARBERA = 10;
  // Indicates the varietal related to Carignan
  ALCOHOL_VARIETAL_CARIGNAN = 11;
  // Indicates the varietal related to Dolcetto
  ALCOHOL_VARIETAL_DOLCETTO = 12;
  // Indicates the varietal related to Malbec
  ALCOHOL_VARIETAL_MALBEC = 13;
  // Indicates the varietal related to Muscat
  ALCOHOL_VARIETAL_MUSCAT = 14;
  // Indicates the varietal related to Pino Grigio
  ALCOHOL_VARIETAL_PINO_GRIGIO = 15;
  // Indicates the varietal related to Sangiovese
  ALCOHOL_VARIETAL_SANGIOVESE = 16;
  // Indicates the varietal related to Tempranillo
  ALCOHOL_VARIETAL_TEMPRANILLO = 17;
  // Indicates the varietal related to Brunello
  ALCOHOL_VARIETAL_BRUNELLO = 18;
  // Indicates the varietal related to Charbono
  ALCOHOL_VARIETAL_CHARBONO = 19;
  // Indicates the varietal related to Gamay
  ALCOHOL_VARIETAL_GAMAY = 20;
  // Indicates the varietal related to Marsanne
  ALCOHOL_VARIETAL_MARSANNE = 21;
  // Indicates the varietal related to Nebbiolo
  ALCOHOL_VARIETAL_NEBBIOLO = 22;
  // Indicates the varietal related to Pinor Noir
  ALCOHOL_VARIETAL_PINOR_NOIR = 23;
  // Indicates the varietal related to Sauvignon Blanc
  ALCOHOL_VARIETAL_SAUVIGNON_BLANC = 24;
  // Indicates the varietal related to Cabernet Franc
  ALCOHOL_VARIETAL_CABERNET_FRANC = 25;
  // Indicates the varietal related to Chardonnay
  ALCOHOL_VARIETAL_CHARDONNAY = 26;
  // Indicates the varietal related to Gewurztraminer
  ALCOHOL_VARIETAL_GEWURZTRAMINER = 27;
  // Indicates the varietal related to Merlot
  ALCOHOL_VARIETAL_MERLOT = 28;
  // Indicates the varietal related to Petite Sirah
  ALCOHOL_VARIETAL_PETITE_SIRAH = 29;
  // Indicates the varietal related to Primitivo
  ALCOHOL_VARIETAL_PRIMITIVO = 30;
  // Indicates the varietal related to Semillon
  ALCOHOL_VARIETAL_SEMILLON = 31;
  // Indicates the varietal related to Viognier
  ALCOHOL_VARIETAL_VIOGNIER = 32;
  // Indicates the varietal related to Prosecco
  ALCOHOL_VARIETAL_PROSECCO = 33;
  // Indicates the varietal related to Moscato
  ALCOHOL_VARIETAL_MOSCATO = 34;
  // Indicates the varietal related to Champagne
  ALCOHOL_VARIETAL_CHAMPAGNE = 35;
  // Indicates the varietal related to Sangria
  ALCOHOL_VARIETAL_SANGRIA = 36;
  // Indicates the varietal related to Red Blend
  ALCOHOL_VARIETAL_RED_BLEND = 37;
  // Indicates the varietal related to White Blend
  ALCOHOL_VARIETAL_WHITE_BLEND = 38;
  // Indicates the varietal related to Rose
  ALCOHOL_VARIETAL_ROSE = 39;
  // Indicates the varietal related to Rose Champagne
  ALCOHOL_VARIETAL_ROSE_CHAMPAGNE = 40;
  // Indicates the varietal related to Bordeaux
  ALCOHOL_VARIETAL_BORDEAUX = 41;
  // Indicates the varietal related to Chianti
  ALCOHOL_VARIETAL_CHIANTI = 42;
  // Indicates the varietal related to Sherry
  ALCOHOL_VARIETAL_SHERRY = 43;
  // Indicates the varietal related to Port
  ALCOHOL_VARIETAL_PORT = 44;
  // Indicates the varietal related to Dessert Wines
  ALCOHOL_VARIETAL_DESSERT_WINES = 45;
  // Indicates the varietal related to Other Reds
  ALCOHOL_VARIETAL_OTHER_REDS = 46;
  // Indicates the varietal related to Non-Alcoholic Wine
  ALCOHOL_VARIETAL_NON_ALCOHOLIC_WINE = 47;
  // Indicates the varietal related to Other Whites
  ALCOHOL_VARIETAL_OTHER_WHITES = 48;
  // Indicates the varietal related to Sparkling Wine
  ALCOHOL_VARIETAL_SPARKLING_WINE = 49;
  // Indicates the varietal related to Vermouth
  ALCOHOL_VARIETAL_VERMOUTH = 50;
}

// Enumeration of breed size options
// Breed or size of the animal the product is designed for
enum BreedSize {
  // Indicates the breed size unspecified
  BREED_SIZE_UNSPECIFIED = 0;
  // Indicates the breed size related to small
  BREED_SIZE_SMALL = 1;
  // Indicates the breed size related to medium
  BREED_SIZE_MEDIUM = 2;
  // Indicates the breed size related to large
  BREED_SIZE_LARGE = 3;
  // Indicates the breed size related to extra large
  BREED_SIZE_EXTRA_LARGE = 4;
  // Indicates the breed size related to all size
  BREED_SIZE_ALL_SIZES = 5;
}

// Enumeration of petlifestage options
// Indicates the lifestage the food is best suited for.
enum PetLifeStage {
  // Indicates the unspecified pet lifestage
  PET_LIFE_STAGE_UNSPECIFIED = 0;
  // Indicates the pet lifestage - all ages
  PET_LIFE_STAGE_ALL_AGES = 1;
  // Indicates the puppy pet lifestage
  PET_LIFE_STAGE_PUPPY = 2;
  // Indicates the 6 months pet lifestage
  PET_LIFE_STAGE_SIX_MONTHS_AND_UP = 3;
  // Indicates the kitten pet lifestage
  PET_LIFE_STAGE_KITTEN = 4;
  // Indicates the senior pet lifestage
  PET_LIFE_STAGE_SENIOR = 5;
}

// Enumeration of food type options
// Indicates whether the food is wet or dry
enum FoodType {
  //Indicates unspecified food type
  FOOD_TYPE_UNSPECIFIED = 0;
  //Indicates wet food type
  FOOD_TYPE_WET = 1;
  //Indicates dry food type
  FOOD_TYPE_DRY = 2;
}

// Enumeration of petfoodform options
// Indicate the item form or formulation of the food.
enum PetFoodForm {
  // Indicates unspecified food form
  PET_FOOD_FORM_UNSPECIFIED = 0;
  // Indicates freeze dried food form
  PET_FOOD_FORM_FREEZE_DRIED = 1;
  // Indicates dried food form
  PET_FOOD_FORM_DRIED = 2;
  // Indicates kibble food form
  PET_FOOD_FORM_KIBBLE = 3;
  // Indicates patties food form
  PET_FOOD_FORM_PATTIES = 4;
  // Indicates chunks food form
  PET_FOOD_FORM_CHUNKS = 5;
  // Indicates sauce food form
  PET_FOOD_FORM_SAUCE = 6;
  // Indicates ground food form
  PET_FOOD_FORM_GROUND = 7;
  // Indicates loose food form
  PET_FOOD_FORM_LOOSE = 8;
  // Indicates chopped food form
  PET_FOOD_FORM_CHOPPED = 9;
  // Indicates liquid food form
  PET_FOOD_FORM_LIQUID = 10;
  // Indicates pate food form
  PET_FOOD_FORM_PATE = 11;
  // Indicates shredded food form
  PET_FOOD_FORM_SHREDDED = 12;
  // Indicates loaf food form
  PET_FOOD_FORM_LOAF = 13;
  // Indicates cut food form
  PET_FOOD_FORM_CUT = 14;
  // Indicates pieces food form
  PET_FOOD_FORM_PIECES = 15;
  // Indicates powered food form
  PET_FOOD_FORM_POWDERED = 16;
  // Indicates cubed food form
  PET_FOOD_FORM_CUBED = 17;
  // Indicates minced food form
  PET_FOOD_FORM_MINCED = 18;
  // Indicates pellets food form
  PET_FOOD_FORM_PELLETS = 19;
  // Indicates soft chew food form
  PET_FOOD_FORM_SOFT_CHEW = 20;
  // Indicates flakes food form
  PET_FOOD_FORM_FLAKES = 21;
  // Indicates ball food form
  PET_FOOD_FORM_BALL = 22;
  // Indicates purred food form
  PET_FOOD_FORM_PUREED = 23;
  // Indicates stewed food form
  PET_FOOD_FORM_STEWED = 24;
  // Indicates paste food form
  PET_FOOD_FORM_PASTE = 25;
  // Indicates nuggets food form
  PET_FOOD_FORM_NUGGETS = 26;
  // Indicates tablet food form
  PET_FOOD_FORM_TABLET = 27;
  // Indicates filleted food form
  PET_FOOD_FORM_FILLETED = 28;
  // Indicates gel food form
  PET_FOOD_FORM_GEL = 29;
  // Indicates block food form
  PET_FOOD_FORM_BLOCK = 30;
  // Indicates topper food form
  PET_FOOD_FORM_TOPPER = 31;
  // Indicates diced food form
  PET_FOOD_FORM_DICED = 32;
}

// Enumeration of Pet toy features options
// Indicates the features of pets' toy
enum PetToyFeatures {
  // Indicates unspecified pet toy feature
  PET_TOY_FEATURES_UNSPECIFIED = 0;
  // Indicates pet toy feature related to bone
  PET_TOY_FEATURES_BONE = 1;
  // Indicates pet toy feature related to plush stuffed
  PET_TOY_FEATURES_PLUSH_STUFFED = 2;
  // Indicates pet toy feature related to ball
  PET_TOY_FEATURES_BALL = 3;
  // Indicates pet toy feature related to interactive
  PET_TOY_FEATURES_INTERACTIVE = 4;
  // Indicates pet toy feature related to treat maze
  PET_TOY_FEATURES_TREAT_MAZE = 5;
  // Indicates pet toy feature related to animal
  PET_TOY_FEATURES_ANIMAL = 6;
  // Indicates pet toy feature related to rope
  PET_TOY_FEATURES_ROPE = 7;
  // Indicates pet toy feature related to stick
  PET_TOY_FEATURES_STICK = 8;
  // Indicates pet toy feature related to teaser
  PET_TOY_FEATURES_TEASER = 9;
  // Indicates pet toy feature related to house
  PET_TOY_FEATURES_HOUSE = 10;
  // Indicates pet toy feature related to ring
  PET_TOY_FEATURES_RING = 11;
  // Indicates pet toy feature related to barbell
  PET_TOY_FEATURES_BARBELL = 12;
  // Indicates pet toy feature related to post
  PET_TOY_FEATURES_POST = 13;
  // Indicates pet toy feature related to wand
  PET_TOY_FEATURES_WAND = 14;
  // Indicates pet toy feature related to agility
  PET_TOY_FEATURES_AGILITY = 15;
  // Indicates pet toy feature related to pad
  PET_TOY_FEATURES_PAD = 16;
  // Indicates pet toy feature related to treat dispenser
  PET_TOY_FEATURES_TREAT_DISPENSER = 17;
  // Indicates pet toy feature related to disc
  PET_TOY_FEATURES_DISC = 18;
  // Indicates pet toy feature related to rattle
  PET_TOY_FEATURES_RATTLE = 19;
  // Indicates pet toy feature related to mechanical
  PET_TOY_FEATURES_MECHANICAL = 20;
  // Indicates pet toy feature related to ball launcher
  PET_TOY_FEATURES_BALL_LAUNCHER = 21;
  // Indicates pet toy feature related to bottle
  PET_TOY_FEATURES_BOTTLE = 22;
  // Indicates pet toy feature related to horseshoe
  PET_TOY_FEATURES_HORSESHOE = 23;
  // Indicates pet toy feature related to tired tower
  PET_TOY_FEATURES_TIERED_TOWER = 24;
  // Indicates pet toy feature related to launcher
  PET_TOY_FEATURES_LAUNCHER = 25;
  // Indicates pet toy feature related to durable
  PET_TOY_FEATURES_DURABLE = 26;
  // Indicates pet toy feature related to puzzle learning
  PET_TOY_FEATURES_PUZZLE_LEARNING = 27;
  // Indicates pet toy feature related to chewer
  PET_TOY_FEATURES_CHEWER = 28;
  // Indicates pet toy feature related to dental teething
  PET_TOY_FEATURES_DENTAL_TEETHING = 29;
  // Indicates pet toy feature related to food shahped
  PET_TOY_FEATURES_FOOD_SHAPED = 30;
}

// Enumeration of Pet types options
enum PetType {
  // Indicates the unspecified pet type
  PET_TYPE_UNSPECIFIED = 0;
  // Indicates the fish type
  PET_TYPE_FISH = 1;
  // Indicates the cat type
  PET_TYPE_CAT = 2;
  // Indicates the dog type
  PET_TYPE_DOG = 3;
  // Indicates the bird type
  PET_TYPE_BIRD = 4;
  // Indicates the small animal type
  PET_TYPE_SMALL_ANIMAL = 5;
  // Indicates the other type
  PET_TYPE_OTHER = 6;
  // Indicates the reptile type
  PET_TYPE_REPTILE = 7;
  // Indicates the lizard type
  PET_TYPE_LIZARD = 8;
  // Indicates the snake type
  PET_TYPE_SNAKE = 9;
  // Indicates the parrot type
  PET_TYPE_PARROT = 10;
  // Indicates the ferret type
  PET_TYPE_FERRET = 11;
  // Indicates the rabbit type
  PET_TYPE_RABBIT = 12;
  // Indicates the guinea pig type
  PET_TYPE_GUINEA_PIG = 13;
  // Indicates the mouse type
  PET_TYPE_MOUSE = 14;
  // Indicates the hamster type
  PET_TYPE_HAMSTER = 15;
  // Indicates the rat type
  PET_TYPE_RAT = 16;
  // Indicates the chipmunk type
  PET_TYPE_CHIPMUNK = 17;
  // Indicates the turtle type
  PET_TYPE_TURTLE = 18;
}

//Enumeration of the brush types referring to the specific kind of brush.
// Applies to both hair and makeup brushes
enum BrushType {
  // Indicates the UNSPECIFIED brush type
  BRUSH_TYPE_UNSPECIFIED = 0;
  // Indicates the Brush Type of Crease Brush
  BRUSH_TYPE_CREASE_BRUSH = 1;
  // Indicates the Brush Type of Concealer Brush
  BRUSH_TYPE_CONCEALER_BRUSH = 2;
  // Indicates the Brush Type of blush brush
  BRUSH_TYPE_BLUSH_BRUSH = 3;
  // Indicates the Brush Type of powder brush
  BRUSH_TYPE_POWDER_BRUSH = 4;
  // Indicates the Brush Type of shadow brush
  BRUSH_TYPE_SHADOW_BRUSH = 5;
  // Indicates the Brush Type of liner brush
  BRUSH_TYPE_LINER_BRUSH = 6;
  // Indicates the Brush Type of contour brush
  BRUSH_TYPE_CONTOUR_BRUSH = 7;
  // Indicates the Brush Type of highlighter brush
  BRUSH_TYPE_HIGHLIGHTER_BRUSH = 8;
  // Indicates the Brush Type of brow brush
  BRUSH_TYPE_BROW_BRUSH = 9;
  // Indicates the Brush Type of bronzer brush
  BRUSH_TYPE_BRONZER_BRUSH = 10;
  // Indicates the Brush Type of wellness tools and devices
  BRUSH_TYPE_WELLNESS_TOOLS_AND_DEVICES = 11;
  // Indicates the Brush Type of Foundation Brush
  BRUSH_TYPE_FOUNDATION_BRUSH = 12;
}
