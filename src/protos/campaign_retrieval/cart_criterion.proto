syntax = "proto3";

package campaign_retrieval.v1;

import "campaign_retrieval/common.proto";
import "common/bundle_order_info.proto";
import "common/common.proto";
import "common/dayparts.proto";
import "common/money.proto";
import "google/protobuf/wrappers.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.campaign.retrieval";

/**
 * A criterion that represents a cart-level condition.
 */
message CartCriterion {
  // Whether the criterion is negated. If true, the criterion will be satisfied if the condition is not met.
  google.protobuf.BoolValue is_negated = 1;

  // The type of the criterion.
  Type type = 2;

  // enum of cart criterion types to support polymorphism of the object
  enum Type {
    reserved 7;
    reserved "BUNDLE";

    // invalid default value of cart criterion type
    UNSPECIFIED = 0;

    // indicates that use of the minimum_subtotal field is required
    MINIMUM_SUBTOTAL = 1;

    // indicates that use of the fulfillment_types field is required
    FULFILLMENT_TYPE = 2;

    // indicates that use of the cart_flags field is required
    CART_FLAGS = 3;

    // indicates that use of the currency field is required
    // todo: do we actually need this? can currency alignment be baked into the platforms?
    CURRENCY = 4;

    // indicates that use of payment_method_details is required
    PAYMENT_METHOD = 5;

    // indicates that use of schedule_ahead_time_eligibility_details is required
    SCHEDULE_AHEAD = 6;

    // indicates that use of cart_criterion_order_item is required
    ITEM_EXISTS_IN_CART = 8;

    // indicates that use of items_in_cart_detail is required
    ITEM_NAME_EXISTS_IN_CART = 9;

    // indicates that use of the loyalty_points field is required
    LOYALTY_POINTS = 10;

    // indicates that use of the product field is required
    PRODUCT = 11;

    // indicates that use of the bundle_type field is required
    BUNDLE_TYPES = 12;

    // indicates that use of the fulfillment_scheduling field is required
    FULFILLMENT_SCHEDULING = 13;

    // indicates that use of the payment_method_details field is required
    PAYMENT_METHOD_DETAILS = 14;

    // indicates that use of the maximum_subtotal field is required
    MAXIMUM_SUBTOTAL = 15;
  }

  reserved 9;
  reserved "allowed_bundle_types";

  // oneof block to support polymorphism of cart criterion based on the cart criterion type
  oneof criterion {
    // minimum subtotal threshold used when type is MINIMUM_SUBTOTAL
    money.MonetaryFields minimum_subtotal = 3;

    // fulfillment types used when type is FULFILLMENT_TYPE
    FulfillmentTypes fulfillment_types = 4;

    // cart flags used when type is CART_FLAGS
    CartFlags cart_flags = 5;

    // currency used when type is CURRENCY
    google.protobuf.StringValue currency = 6;

    // used when type is PAYMENT_METHOD
    CartCriterionPaymentMethodDetails payment_method_details = 7;

    // used when type is SCHEDULE_AHEAD
    ScheduleAheadTimeEligibilityDetails schedule_ahead_time_eligibility_details = 8;

    // order item object when type is ITEM_EXISTS_IN_CART
    CartCriterionOrderItem cart_criterion_order_item = 10;

    // items keyword details when type is ITEM_NAME_EXISTS_IN_CART
    ItemsInCartDetail items_in_cart_detail = 11;

    // loyalty points used when type is LOYALTY_POINTS
    LoyaltyPoints loyalty_points = 12;

    // product used when type is PRODUCT
    Product product = 13;

    // bundle type used when type is BUNDLE_TYPE
    BundleTypes bundle_types = 14;

    // fulfillment scheduling used when type is FULFILLMENT_SCHEDULING
    FulfillmentScheduling fulfillment_scheduling = 15;

    // payment method details used when type is PAYMENT_METHOD_DETAILS
    PaymentMethodDetails payment_method = 16;

    // maximum subtotal threshold used when type is MAXIMUM_SUBTOTAL
    money.MonetaryFields maximum_subtotal = 17;
  }

  /*
   * wrapper object for a collection of fulfillment types
   */
  message FulfillmentTypes {
    // collection of fulfillment types
    repeated common.FulfillmentType types = 1;
  }

  /*
   * wrapper object for a collection of cart flags
   */
  // todo: there has to be better terminology or model here
  message CartFlags {
    // collection of cart flags
    repeated CartFlag flags = 1;

    // enum to define supported cart flags
    enum CartFlag {
      // invalid default value of cart flag
      UNSPECIFIED = 0;

      // cart is marked as having alcohol
      HAS_ALCOHOL = 1;

      // cart is marked as a group order
      IS_GROUP = 2;

      // cart is marked as a gift
      IS_GIFT = 3;

      // cart is marked as a first recurring order
      IS_FIRST_RECURRING = 4;

      // cart is marked as a subsequent recurring order
      IS_SUBSEQUENT_RECURRING = 5;

      // cart is marked as a lunchpass order
      IS_LUNCHPASS = 6;

      // cart is marked as a free same day delivery order
      IS_FREE_SAME_DAY_DELIVERY = 7;

      // cart is marked as a asap order
      IS_ASAP = 8;

      // cart is marked as a delivery order
      // DEPRECATED: use FulfillmentType.DELIVERY instead
      IS_DELIVERY = 9 [deprecated = true];

      // cart is marked as a pickup order
      // DEPRECATED: use FulfillmentType.PICKUP instead
      IS_PICKUP = 10 [deprecated = true];

      // cart is marked as a virtual order
      // DEPRECATED: use FulfillmentType.VIRTUAL instead
      IS_VIRTUAL_DELIVERY = 11 [deprecated = true];

      // cart is marked as a DashParty order
      IS_DASHPARTY = 12;

      // cart contains an order for someone else
      IS_SEND_TO_SOMEONE_ELSE = 13;
    }
  }

  /*
     wrapper for payment method details and bin block list
  */
  message CartCriterionPaymentMethodDetails {
    // if the user's payment method details match any (not all) of the list, then the criterion passes
    repeated CardPaymentMethodDetails payment_method_details = 1;

    // bin in the list should be blocked
    repeated google.protobuf.StringValue bin_blocklist = 2;
  }

  /*
     wrapper of brand and brand_product
  */
  message CardPaymentMethodDetails {
    // if brand_product is not populated, only brand field is checked
    google.protobuf.StringValue brand = 1;

    // brand_product field
    google.protobuf.StringValue brand_product = 2;

    // Needs to be in the format of "BINIIN-xxxx-DD"
    google.protobuf.StringValue bin = 3;

    // payment method id
    google.protobuf.StringValue payment_method_id = 4;
  }

  /*
     wrapper of information for schedule ahead type
  */
  message ScheduleAheadTimeEligibilityDetails {
    // list of day parts
    DayParts day_parts = 1;
  }

  /*
     wrapper of list of day parts with timezone
  */
  message DayParts {
    // indicate day part
    repeated dayparts.DayPart day_part = 1;

    // indicate timezone
    google.protobuf.StringValue timezone = 2;
  }

  // fulfillment scheduling used when type is FULFILLMENT_SCHEDULING
  message FulfillmentScheduling {
    // collection of fulfillment types
    repeated FulfillmentSchedulingTypes types = 1;

    // dayparts
    repeated dayparts.DayPart day_parts = 2;

    // fulfillment scheduling types
    enum FulfillmentSchedulingTypes {
      // unknown
      UNSPECIFIED = 0;
      // asap
      ASAP = 1;
      // scheduled
      SCHEDULED = 2;
    }
  }

  // bundle types used when type is BUNDLE_TYPES
  message BundleTypes {
    reserved 1;
    reserved "bundle_type";

    // set of bundle types that comprise the bundle type criterion
    repeated BundleType types = 2;

    // enum of bundle types
    enum BundleType {
      // unknown
      UNSPECIFIED = 0;
      // post-checkout
      POST_CHECKOUT = 1;

      // normal cart checkout path
      NON_BUNDLED_CHECKOUT = 2;
    }
  }

  /*
     wrapper of list of item criterion details
  */
  message ItemsInCartDetail {
    // list of item_promo_criterion_detail
    repeated ItemPromoCriterionDetail item_promo_criterion_detail = 1;
  }

  /*
     item promotion criterion detail
  */
  message ItemPromoCriterionDetail {
    // list of keywords that should be included
    repeated string include_keyword = 1;

    // list of keywords that should be excluded
    repeated string exclude_keyword = 2;
  }

  /*
     order item object for cart criteria
  */
  message CartCriterionOrderItem {
    // item type
    CartCriterionOrderItemType type = 1;

    /*
       enum of order item types
    */
    enum CartCriterionOrderItemType {
      // invalid type
      CART_CRITERION_ORDER_ITEM_TYPE_INVALID = 0;

      // unset
      CART_CRITERION_ORDER_ITEM_TYPE_UNSET = 1;

      // item type
      CART_CRITERION_ORDER_ITEM_TYPE_ITEM = 2;

      // TO BE USED FOR INITIAL CFA
      CART_CRITERION_ORDER_ITEM_TYPE_ITEM_EXTRA_OPTION = 3;
    }

    // For item promo setup with dd_sic or merchant_supplied_id, use product_ids instead.
    // set during configuration or null
    google.protobuf.StringValue audience_name = 2;

    // enables buy 3 get 1 free
    google.protobuf.Int32Value num_required_items = 3;

    /*
       oneof fields for order item
    */
    oneof value {
      // item id
      google.protobuf.StringValue item_id = 4;

      // item extra option id
      google.protobuf.StringValue item_extra_option_id = 5;

      // Required item collection. Replace audience_name. Attach product ids directly to the campaign.
      ProductIds product_ids = 6;

      // Required items with options.
      ProductIdsWpper required_product_ids = 9;
    }

    // Used to support mix and match case. i.e. Buy any 2 of (A, B) Get $1 off.
    // Default to PRODUCT_COLLECTION_TYPE_SINGLE_SKU
    ProductCollectionType product_collection_type = 7;

    // Enables minimum subtotal of items. i.e. Buy $X subtotal in group, get $Y off
    money.MonetaryFields minimum_item_subtotal = 8;
  }

  /*
     ProductIds object with ids and allow_names list
  */
  message ProductIds {
    // product id type
    common.ProductIdType type = 1;

    // list of product ids
    repeated string ids = 2;

    // allowed list
    repeated string allowed_names = 3;
  }

  /*
   * wrapper object for a collection of ProductIds
   */
  message ProductIdsWpper {
    // collection of ProductIds
    repeated ProductId ids = 1;
  }

  /**
   * Define the item collection patterns, which will qualify for the item promo.
   */
  enum ProductCollectionType {
    // unspecified type
    PRODUCT_COLLECTION_TYPE_UNSPECIFIED = 0;

    // unknown type
    PRODUCT_COLLECTION_TYPE_UNKNOWN = 1;

    // Single item meets the num_required_items criteria. i.e. Buy 2 Get $1 off.
    // 2A will qualify, (1A, 1B) will disqualify.
    PRODUCT_COLLECTION_TYPE_SINGLE_SKU = 2;

    // Mix and match case, i.e. Buy any 2 Get $1 off.
    // Both 2A and (1A, 1B) will qualify.
    PRODUCT_COLLECTION_TYPE_MULTI_SKU = 3;
  }

  // wrapper object for a loyalty program and points
  message LoyaltyPoints {
    // loyalty program id
    string program_id = 1;
    // number of points required
    google.protobuf.Int32Value points = 2;
    // offer id - this can be thought of as an external campaign id
    google.protobuf.StringValue offer_id = 3;
    // offer ids - this can be thought of as an external campaign id
    repeated string offer_ids = 4;
  }

  // payment method details used when type is PAYMENT_METHOD_DETAILS
  message PaymentMethodDetails {
    // if product is not populated, only brand field is checked
    repeated CardDetails card_details = 1;

    // list of BIN (Bank Identification Number) to block
    repeated google.protobuf.StringValue bin_blocklist = 2;

    // Payment method TYPE that was selected for the order
    // Used for payment method promotion project (i.e. Cash App Pay promotion)
    // https://docs.google.com/document/d/1NRhPssxPwA_rcafz30kFnEDmcD44CCPyKv5Ck6flVDA
    PaymentMethodType payment_method_type = 3;

    // enum of collection types
    enum PaymentMethodType {
      // unknown
      UNSPECIFIED = 0;
      // card
      CARD = 1;
      // paypal
      PAYPAL = 2;
      // venmo
      VENMO = 3;
      // afterpay
      AFTERPAY = 4;
      // apple pay
      APPLE_PAY = 5;
      // google pay
      GOOGLE_PAY = 6;
      // EBT
      EBT = 7;
      // cashapp
      CASHAPP = 8;
      // HSA/FSA
      HSA_FSA = 9;
    }

    // details about the card - e.g. brand = MasterCard / product = MCW
    message CardDetails {
      // name of the brand - e.g. MasterCard
      google.protobuf.StringValue brand = 1;
      // product within the brand - e.g. MCW (World Mastercard® Card)
      google.protobuf.StringValue product = 2;
    }
  }

  /**
   * A wrapper object to represent a product criterion.
   */
  message Product {
    // number of required items within the product_ids collection
    google.protobuf.Int32Value num_required_items = 1;

    // the required minimum subtotal of the items in the product_ids collection
    money.MonetaryFields minimum_item_subtotal = 2;

    // the type of collection that the product_ids field represents
    CollectionType collection_type = 3;

    // collection of product ids that the cart must satisfy
    repeated ProductId product_ids = 4;

    // audience name referencing the collection of items the criterion requires
    google.protobuf.StringValue audience_name = 5;

    // enum of collection types
    enum CollectionType {
      // invalid default value of collection type
      UNSPECIFIED = 0;

      // num_required_items must be of the same item within the product_ids collection
      SINGLE_SKU = 1;

      // num_required_items can be of different items from the product_ids collection
      MULTI_SKU = 2;
    }

    // enum of criterion item levels: denotes the level of the first layer
    // of products defined in the criterion or the level of audience name
    enum CriterionProductLevel {
      // invalid default type
      CART_ITEM_LEVEL_UNSPECIFIED = 0;
      // consider the first level of cart products as items
      ITEM = 1;
      // consider the first level of cart products as options
      OPTION = 2;
    }

    // Denotes the level of the items defined in the cart
    CriterionProductLevel criterion_product_level = 6;
  }
}
