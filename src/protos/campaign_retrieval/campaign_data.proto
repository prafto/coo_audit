syntax = "proto3";

package campaign_retrieval.v1;

import "campaign_retrieval/ad_group_data.proto";
import "campaign_retrieval/billing_settings.proto";
import "campaign_retrieval/budget_data.proto";
import "campaign_retrieval/frequency_cap.proto";
import "common/common.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.campaign.retrieval";

/**
 * The CampaignData has same structure as the campaign service model but with only necessary data fields
 * for the serving purpose, this will be the actual models that will be persisted during indexing and used
 * for hydration.
 */
message CampaignData {
  // the campaign id
  string id = 1;

  // active flag for the campaign to turn on/off serving
  google.protobuf.BoolValue is_active = 2;

  // start at timestamp
  google.protobuf.Timestamp start_at = 3;

  // end at timestamp
  google.protobuf.Timestamp end_at = 4;

  // budget configurations limiting the serving of the campaign
  BudgetData budgets = 5;

  // the actual list of ad group data used for serving
  repeated AdGroupData ad_groups = 6;

  // template id for the campaign
  google.protobuf.StringValue template_id = 7;

  // advertiser id in UUID format
  google.protobuf.StringValue advertiser_id = 8;

  // deduplication conditions to be used to remove self-competition
  //  DeduplicationCondition deduplication_conditions = 9; // moved to ad_group
  reserved 9;
  reserved "deduplication_conditions";

  // addition metadata for the campaign. this is non-essential information
  Metadata metadata = 10;

  // sets maximum number of interactions with the campaign over a given time window
  repeated FrequencyCap frequency_caps = 11;

  // Campaign metadata used for non-essential information
  message Metadata {
    // user who created the campaign
    common.Creator created_by = 1;

    // campaign creation timestamp
    google.protobuf.Timestamp created_at = 2;

    // source of the creation - e.g. ads manager / mx portal / billing / etc
    google.protobuf.StringValue created_by_source = 3;

    // user who updated the campaign
    common.Creator updated_by = 4;

    // campaign update timestamp
    google.protobuf.Timestamp updated_at = 5;

    // source of the update - e.g. ads manager / mx portal / billing / etc
    google.protobuf.StringValue updated_by_source = 6;
  }

  // Dedup condition used to remove self-competition between campaigns
  message DeduplicationCondition {
    // exact match strings to remove self-competition
    repeated google.protobuf.StringValue keys = 1;
  }

  // vertical of the campaign
  VerticalType vertical_type = 12;

  // Vertical tag of the campaign
  enum VerticalType {
    // unspecified vertical
    VERTICAL_TYPE_UNSPECIFIED = 0;
    // convenience
    CONVENIENCE = 1;
    // pickup
    PICKUP = 2;
    // new cx or activation
    NEW_CX_OR_ACTIVATION = 3;
    // engagement (deprecated)
    ENGAGEMENT = 4 [deprecated = true];
    // resurrection
    RESURRECTION = 5;
    // dashpass (deprecated)
    DASHPASS = 6 [deprecated = true];
    // drive
    DRIVE = 7;
    // enterprise promotions
    ENTERPRISE_PROMOTIONS = 8;
    // other strategy and ops
    OTHER_STRATEGY_AND_OPS = 9;
    // other new verticals
    OTHER_NEW_VERTICALS = 10;
    // mx funded
    MX_FUNDED = 11;
    // caviar
    CAVIAR = 12;
    // australia
    AUSTRALIA = 13;
    // canada
    CANADA = 14;
    // small experiments
    SMALL_EXPERIMENTS = 15;
    // new cx or acquisition
    NEW_CX_OR_ACQUISITION = 16;
    // alcohol
    ALCOHOL = 17;
    // pets
    PETS = 18;
    // dashmart
    DASHMART = 19;
    // gifting
    GIFTING = 20;
    // storefront
    STOREFRONT = 21;
    // partner marketing
    PARTNER_MARKETING = 22;
    // group orders
    GROUP_ORDERS = 23;
    // dashpass rotating awards (deprecated)
    DASHPASS_ROTATING_AWARDS = 24 [deprecated = true];
    // doordash for work
    DOORDASH_FOR_WORK = 25;
    // enterprise
    ENTERPRISE = 26;
    // grocery
    GROCERY = 27;
    // large orders
    LARGE_ORDERS = 28;
    // strategic markets (deprecated)
    STRATEGIC_MARKETS = 29 [deprecated = true];
    // premium
    PREMIUM = 30;
    // enterprise cpg
    ENTERPRISE_CPG = 31;
    // other mx (deprecated)
    OTHER_MX = 32 [deprecated = true];
    // dashpass cofunded
    DASHPASS_COFUNDED = 33;
    // enterprise cofunded (deprecated)
    ENTERPRISE_COFUNDED = 34 [deprecated = true];
    // self delivery
    SELF_DELIVERY = 35;
    // dashpass cofunded cpg
    DASHPASS_COFUNDED_CPG = 36;
    // ads midmarket rx
    ADS_MIDMARKET_RX = 37;
    // ads smb rx
    ADS_SMB_RX = 39;
    // funded new verticals
    FUNDED_NEW_VERTICALS = 40;
    // ship anywhere
    SHIP_ANYWHERE = 41;
    // flowers
    FLOWERS = 42;
    // homegoods
    HOMEGOODS = 43;
    // rx enterprise
    RX_ENTERPRISE = 44;
    // doordash kitchens
    DOORDASH_KITCHENS = 45;
    // rx midmarket
    RX_MIDMARKET = 46;
    // rx smb
    RX_SMB = 47;
    // other restaurants
    OTHER_RESTAURANTS = 48;
    // virtual brands
    VIRTUAL_BRANDS = 49;
    // other cofunded
    OTHER_COFUNDED = 50;
    // dashpass adoption
    DASHPASS_ADOPTION = 51;
    // dashpass retention
    DASHPASS_RETENTION = 52;
    // engagement active
    ENGAGEMENT_ACTIVE = 53;
    // engagement dormant
    ENGAGEMENT_DORMANT = 54;
    // dashpass cofunded nv
    DASHPASS_COFUNDED_NV = 55;
    // dashpass cofunded other
    DASHPASS_COFUNDED_OTHER = 56;
    // wolt
    WOLT = 57;
    // retail
    RETAIL = 58;
    // mx ingested
    MX_INGESTED = 59;
    // dashpass retention nudge only
    DASHPASS_RETENTION_NUDGE_ONLY = 60;
    // canada occasions
    CANADA_OCCASIONS = 61;
    // Mx 3rd party funded
    MX_3P_FUNDED = 62;
    // external deals aggregator, ibotta
    EXT_DEALS_AGGREGATOR_IBOTTA = 63;
    // Dashpass benefits
    DASHPASS_BENEFITS = 64;
    // Dashpass partnership
    DASHPASS_PARTNERSHIP = 65;
    // Multi-vertical
    MULTI_VERTICAL = 66;
  }

  // advertiser provided identifier for the campaign
  google.protobuf.StringValue external_id = 13;

  // billing model for the ad group
  BillingModel billing_model = 14;

  // Billing configuration specific to this campaign
  BillingSettings billing_settings = 15;

  // campaign name
  google.protobuf.StringValue name = 16;

  // campaign description
  google.protobuf.StringValue description = 17;

  //campaign state
  google.protobuf.StringValue state = 18;

  // Test Criteria
  TestCriteria test_criteria = 19;

  // Criteria that's used when campaign state = TEST
  message TestCriteria {
    // segment containing emails of users eligible for the test mode campaign. These users will be eligible regardless of campaign settings
    google.protobuf.StringValue segment_id = 1;

    // segment containing users testing the campaign that also need to match the campaign criteria
    google.protobuf.StringValue test_audience_segment_id = 2;
  }
}
