syntax = "proto3";

package campaign_retrieval.v1;

import "campaign_retrieval/cart_criterion.proto";
import "campaign_retrieval/common.proto";
import "campaign_retrieval/creative.proto";
import "campaign_retrieval/incentive.proto";
import "common/common.proto";
import "google/protobuf/wrappers.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.campaign.retrieval";

/**
 * Ad data fields needed for serving
 */
message AdData {
  // campaign_id in which the ad exists
  // string representation of a UUID
  google.protobuf.StringValue campaign_id = 1;

  // ad_group_id in which the ad exists
  // string representation of a UUID
  google.protobuf.StringValue ad_group_id = 2;

  // unique identifier for the ad
  // string representation of a UUID
  google.protobuf.StringValue id = 3;

  // the entity for which the creatives and incentives are configured
  Entity entity = 4;

  // representation of an Ad entity
  message Entity {
    // type of entity
    Type type = 1;

    // enum of entity types to support polymorphism of the object
    enum Type {
      // invalid default entity type
      UNSPECIFIED = 0;

      // does not require the use of ids
      STORE = 1;

      // indicates use of product_id in the ids block
      PRODUCT = 2;

      // indicates use of product_ids in the ids block
      COLLECTION = 3;

      // does not require the use of ids
      PROGRAM = 4;
    }

    // oneof block to support polymorphism of entity based on the entity type
    oneof ids {
      // set of product ids used when product or collection is the entity type
      ProductIds product_ids = 2;

      // set of merchant ids used when store is the entity type
      MerchantIds merchant_ids = 3;
    }

    // optional field that determines whether priority entities are required for a sponsored brand (collection entity)
    // to serve
    google.protobuf.BoolValue is_priority_entity_id_required = 4;
  }

  // set of creatives configured for the entity
  repeated Creative creatives = 5;

  // set of incentives configured for the entity
  repeated Incentive incentives = 6;

  // collection of cart criteria that must be satisfied for the incentives to be applied to the cart
  repeated CartCriterion cart_criteria = 7;

  // url for terms and conditions
  google.protobuf.StringValue terms_and_conditions_url = 8;

  // determines how the ad can be applied
  repeated AppliedByType applied_by = 9;

  // title override for the ad
  google.protobuf.StringValue title_override = 10;

  // placeholders for the title override
  repeated StringPlaceholder title_override_placeholders = 21;

  // description override for the ad
  google.protobuf.StringValue description_override = 11;

  // placeholders for the description override
  repeated StringPlaceholder description_override_placeholders = 22;

  // promotion codes
  repeated string codes = 15;

  // indicate if this ad is a benefit ad
  google.protobuf.BoolValue is_benefit = 16;

  // indicate if this ad is a loyalty ad
  google.protobuf.BoolValue is_loyalty = 17;

  // error message overrides to show to Cx
  repeated ErrorMessageOverride error_message_overrides = 18;

  // a list of terms and conditions to show
  repeated TermsAndConditions terms_and_conditions = 19;

  // indicate if this ad is stackable with other ads
  google.protobuf.BoolValue is_stackable = 20;
}

// terms and conditions - although this has contentId, this was intentionally not set as creative
// the serving platform can determine where the terms and condition should be shown based on the type
message TermsAndConditions {
  // content id for terms and conditions
  string content_id = 1;

  // type of terms and condition
  Type type = 2;

  // enum values for the types of terms and condition
  enum Type {
    // invalid default type
    UNSPECIFIED = 0;

    // terms and conditions are provided in the content for item details page
    ITEM_DETAILS = 1;
  }
}

// enum of applied by types
enum AppliedByType {
  // invalid default type
  UNSPECIFIED = 0;

  // must be claimed
  CLAIM = 1;

  // must enter code
  CODE = 2;

  // must click in wallet
  WALLET_CLICK = 3;

  // no action required
  AUTO = 4;
}

// Override message to show to users
// All of the keys must be accounted for
// https://github.com/doordash/web/blob/21dd68667f740bc4a070759f3971a9a065e6bac3/packages/app-admin/src/tools/CampaignManager/constants/CampaignDetails.ts#L68-L86
message ErrorMessageOverride {
  // error message key for the ad
  Key key = 1;

  // error message override for the ad
  string message = 2;

  // error message override key types
  enum Key {
    // unspecified message type
    UNSPECIFIED = 0;
    // not_applied
    UNSET = 1;
    // error message for max deliveries reached
    MAX_DELIVERIES_REACHED = 2;
    // error message for not valid
    NOT_VALID = 3;
    // error message for new customers only
    NEW_CUSTOMERS_ONLY = 4;
    // error message for not yet active
    NOT_YET_ACTIVE = 5;
    // error message for no longer active
    NO_LONGER_ACTIVE = 6;
    // error message for wrong city
    WRONG_CITY = 7;
    // error message for wrong items
    WRONG_ITEMS = 8;
    // error message for wrong second items
    WRONG_SECOND_ITEMS = 9;
    // error message for wrong cuisine
    WRONG_CUISINE = 10;
    // error message for wrong merchant
    WRONG_MERCHANT = 11;
    // error message for wrong currency
    WRONG_CURRENCY = 12;
    // error message for cart criterion minimum subtotal
    CART_CRITERION_MINIMUM_SUBTOTAL = 13;
    // error message for cart criterion pickup
    CART_CRITERION_PICKUP = 14;
    // error message for cart criterion group order
    CART_CRITERION_GROUP_ORDER = 15;
    // error message for cart criterion delivery
    CART_CRITERION_DELIVERY = 16;
    // error message for subscriber only
    SUBSCRIBER_ONLY = 17;
    // error message for consumer does not exist
    CONSUMER_DOES_NOT_EXIST = 18;
  }
}
