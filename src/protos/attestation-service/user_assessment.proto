syntax = "proto3";

package attestation_service.v1;

import "common/service_client_config.proto";
import "google/protobuf/wrappers.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.attestation";

// user assessment service is a service assessing user behavior on the client
service UserAssessmentService {
  // Timeout after 700 milliseconds.
  option (service_client.client_config).response_attempt_timeout_millis = 700;
  // Make a total 4 attempts (initial + three retries).
  option (service_client.client_config).retry_config.max_attempts = 4;
  // Add RESOURCE_EXHAUSTED to the set of retriable codes.
  option (service_client.client_config).retry_config.do_retry_grpc_code = 8;
  // Break the circuit if the error rate exceeds 80%.
  option (service_client.client_config).circuit_breaker_config.failure_rate_threshold = 0.8;
  // Ignore NOT_FOUND from circuit breaker error rate calculation.
  option (service_client.client_config).circuit_breaker_config.do_ignore_grpc_code = 5;

  // AssessBehavior returns user assessment result
  rpc AssessBehavior(AssessBehaviorRequest) returns (AssessBehaviorResponse);

  // GetAssessment returns the user assessment result with score
  rpc GetAssessment(GetAssessmentRequest) returns (GetAssessmentResponse);
}

// Request for AssessBehavior service
message AssessBehaviorRequest {
  // Unique token for each assessment
  string token = 1;
  // user id if logged in
  string user_id = 2;
  // consumer id if logged in
  string consumer_id = 3;
  // events trigger by the user such as card add
  string event_type = 4;
  // platform on which we are assessing the user
  UserAssessmentPlatform platform = 5;
  // device id of the client, optional.
  string device_id = 6;
  // session id of the client, optional.
  string session_id = 7;
  // client version of mobile apps
  string client_version = 8;
}

// Response for AssessBehavior service
message AssessBehaviorResponse {
  // Result for AssessBehavior service
  UserAssessmentVerdict result = 1;
  // unique id mapped to each assessment
  string user_assessment_id = 2;
}

// Result for AssessBehavior service
enum UserAssessmentVerdict {
  // could not conclude result
  USER_ASSESSMENT_VERDICT_UNSPECIFIED = 0;
  // result is bot
  USER_ASSESSMENT_VERDICT_BOT = 1;
  // result is human
  USER_ASSESSMENT_VERDICT_HUMAN = 2;
}

// platform on which we are assessing the user
enum UserAssessmentPlatform {
  // unspecified platform
  USER_ASSESSMENT_PLATFORM_UNSPECIFIED = 0;
  // android platform
  USER_ASSESSMENT_PLATFORM_ANDROID = 1;
  // ios platform
  USER_ASSESSMENT_PLATFORM_IOS = 2;
  // web platform
  USER_ASSESSMENT_PLATFORM_WEB = 3;
}

// Request for GetAssessment API
message GetAssessmentRequest {
  // unique id which mapped to the assessment
  string user_assessment_id = 1;
}

// Response for GetAssessment API
message GetAssessmentResponse {
  // Result for assessment
  UserAssessmentVerdict result = 1;
  // Score for assessment
  float score = 2;
  // Assessor for assessment
  UserAssessmentAssessor assessor = 3;
}

// Assessor which are assessing the request
enum UserAssessmentAssessor {
  // unspecified assessor
  USER_ASSESSMENT_ASSESSOR_UNSPECIFIED = 0;
  // recaptcha assessor
  USER_ASSESSMENT_ASSESSOR_RECAPTCHA = 1;
  // dd assessor
  USER_ASSESSMENT_ASSESSOR_DD = 2;
}
