syntax = "proto3";

package expense_provider_service.v1;

import "google/protobuf/timestamp.proto";

option go_package = "github.com/doordash/services-protobuf/generated/expense_provider_service/v1";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.expenseproviderservice";

// List of possible expense provider integrations
enum IntegrationType {
  // default
  INTEGRATION_TYPE_UNSPECIFIED = 0;
  // API integration (i.e. Concur)
  INTEGRATION_TYPE_API = 1;
  // Email forwarding integration
  INTEGRATION_TYPE_EMAIL = 2;
}

// List of possible expense providers
enum ExpenseProvider {
  // default
  EXPENSE_PROVIDER_UNSPECIFIED = 0;
  // SAP Concur
  EXPENSE_PROVIDER_CONCUR = 1;
  // Expensify
  EXPENSE_PROVIDER_EXPENSIFY = 2;
  // Emburse Enterprise aka ChromeRiver
  EXPENSE_PROVIDER_EMBURSE_ENTERPRISE = 3;
  // Emburse Professional aka Certify
  EXPENSE_PROVIDER_EMBURSE_PROFESSIONAL = 4;
  // Emburse Spend aka Emburse
  EXPENSE_PROVIDER_EMBURSE_SPEND = 5;
}

// Expense Provider Info
message ExpenseProviderInfo {
  // expense provider
  ExpenseProvider expense_provider = 1;
  // integration type of the expense provider
  IntegrationType integration_type = 2;
}

// available expense providers for the user
message AvailableExpenseProviders {
  // list of available expense provider infos
  repeated ExpenseProviderInfo expense_provider_infos = 1;
}

// the source of authorization request for the expense provider
enum AuthSource {
  // auth source unspecified
  AUTH_SOURCE_UNSPECIFIED = 0;
  // user manually triggered authorization request
  AUTH_SOURCE_MANUAL_TRIGGER = 1;
  // authorization request was triggered from business profile
  AUTH_SOURCE_BUSINESS_PROFILE = 2;
}

// State of a consumer's expense provider configuration
message ConsumerExpenseProvider {
  // Which expense provider has this consumer configured with?
  ExpenseProvider expense_provider = 1;
  /**
   * Useful for client to prompt user to re-authorize DoorDash with their
   *  expense provider in the event that this authorization has expired.
   */
  google.protobuf.Timestamp expires_at = 2;
}

// Expense Provider's Auth Info for the user.
message UserExpenseProviderAuthInfo {
  // user id
  string user_id = 1;

  // expense provider
  ExpenseProvider expense_provider = 2;

  // auth token/code expiration timestamp
  google.protobuf.Timestamp expires_at = 3;
}

// link status of the expense provider
enum ExpenseProviderLinkStatus {
  // auth status is unspecified
  EXPENSE_PROVIDER_LINK_STATUS_UNSPECIFIED = 0;
  // expense provider has been unlinked
  EXPENSE_PROVIDER_LINK_STATUS_UNLINKED = 1;
  // expense provider has been linked
  EXPENSE_PROVIDER_LINK_STATUS_LINKED = 2;
}

// Info required to initiate the auth flow with expense providers
// Concur
message ConcurAuthInitiationInfo {
  // For now, we only need the redirect path
  string redirect_uri = 1;

  // link status of concur
  ExpenseProviderLinkStatus expense_provider_link_status = 2;
}

// Authorization request messages for expense providers
// Concur
message ConcurAuthRequestInfo {
  // https://developer.concur.com/api-reference/authentication/apidoc.html#authorization-grant-
  string code = 1;
  // Concur URL with a subdomain (`us` or `emea`), backend needs to hit this endpoint.
  string geolocation = 2;
}

// https://developer.concur.com/api-reference/authentication/apidoc.html#password-grant-
message ConcurPasswordGrantRequestInfo {
  // This is 'id' in the front-end redirect query params
  string concur_user_id = 1;
  // This is 'request_token' in the front-end redirect query params
  string concur_request_token = 2;
}
