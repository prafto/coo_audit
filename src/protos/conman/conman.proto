syntax = "proto3";
package conman.v1;
option java_package = "com.doordash.rpc.conman";
option java_outer_classname = "Service";

import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";

// Service
// NOTE: Method names should follow VerbNoun convention
// Naming Guide: https://cloud.google.com/apis/design/naming_convention#method_name
service ConmanService {
  // Robots/Devices listen to this stream for new cloud commands
  rpc ReceiveServerEvents(ReceiveServerEventsRequest) returns (stream DeviceMessage);

  // Backends push new messages destined for robots/devices to this endpoint
  rpc SendMessageToDevice(DeviceMessage) returns (SendMessageToDeviceResponse);
}

// Resources
// NOTE: For resources, the suffix Response should not be included
message DeviceMessage {
  // globally unique identifier for the robot/device
  string device_id = 1;
  // time at which this message was sent by the backend
  // this is intended to be used by the conman for measuring lag in message delivery
  google.protobuf.Timestamp initiated_at = 2;
  // actual message body
  google.protobuf.Any message = 3;
}

// response result code for SendMessageToDevice requests from backend services
enum ResultCode {
  // unspecified result code by conman
  RESULT_CODE_UNSPECIFIED = 0;
  // message was successfully queued for delivery to devices, note - this doesn't guarantee delivery
  RESULT_CODE_QUEUED = 1;
  // device isn't connected to cloud, callers should retry later
  RESULT_CODE_DEVICE_NOT_CONNECTED = 2;
}

// Requests & Responses
// NOTE: Should be named after the method names with the suffix Request and Response
// https://cloud.google.com/apis/design/naming_convention#request_and_response_messages
message ReceiveServerEventsRequest {
  // globally unique identifier for the robot/device
  string device_id = 1;
}

// Whether the message was queued
message SendMessageToDeviceResponse {
  // result code for SendMessageToDevice request
  ResultCode result_code = 1;
}
