syntax = "proto3";

package labs_fleet_service.v1;

import "autonomous_delivery_platform/common.proto";
import "autonomous_partner_api/doordash_endpoints_common.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "robot/mission.proto";
import "robot/robot.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.labs_fleet_service.v1";

// The final state of the order of a mission
enum OrderTerminalStatus {
  // Unspecified
  ORDER_TERMINAL_STATUS_UNSPECIFIED = 0;
  // Order has been delivered to Cx
  ORDER_TERMINAL_STATUS_DELIVERED = 1;
  // Order has not been delivered to Cx
  ORDER_TERMINAL_STATUS_UNDELIVERED = 2;
  // There was an issue with the order wherein we cannot
  // determine whether it was delivered or not
  ORDER_TERMINAL_STATUS_ERROR = 3;
}

// The required action an LO/Runner need to execute to the order of a mission
enum OrderRequestedAction {
  // Unspecified
  ORDER_REQUESTED_ACTION_UNSPECIFIED = 0;
  // Order needs to be handed off by an LO
  ORDER_REQUESTED_ACTION_INTERNAL_HANDOFF = 1;
  // Order is to be disposed
  ORDER_REQUESTED_ACTION_DISPOSE = 2;
  // Order is to be returned to Mx
  ORDER_REQUESTED_ACTION_RETURN_TO_PICKUP = 3;
  // Order needs no action
  ORDER_REQUESTED_ACTION_NO_ACTION = 4;
}

// Mission information
message Mission {
  reserved 7;
  reserved "delivery_status";

  // UUID of mission
  string mission_id = 1;
  // Name of the merchant
  string merchant_name = 2;
  // Pickup location
  robot.v1.Location pickup_location = 3;
  // Dropoff location
  robot.v1.Location dropoff_location = 4;
  // First and last name initial of the consumer. e.g. John D.
  string consumer_name = 5;
  // Assigned robot id. e.g. badger-15
  string assigned_robot_id = 6;
  // When the mission was completed/failed
  google.protobuf.Timestamp completed_at = 9;
  // When the mission was created
  google.protobuf.Timestamp created_at = 10;
  // Order terminal status
  OrderTerminalStatus order_terminal_status = 11;
  // Order action requested
  OrderRequestedAction order_action_requested = 12;
  // Merchant id; can be used to deep-link into the store page
  string merchant_id = 13;
  // Delivery instructions
  string delivery_instruction = 14;
  // Estimated time to pick-up order at merchant
  google.protobuf.Timestamp pickup_at = 15;
  // Masked Cx phone number
  string consumer_phone_number = 16;
  // Delivery id
  google.protobuf.Int64Value delivery_id = 17;
  // The ADP delivery status
  autonomous_delivery_platform.v1.DeliveryStatus delivery_state = 18;
  // The ADP delivery status prior to the mission terminating
  autonomous_delivery_platform.v1.DeliveryStatus delivery_state_before_termination = 19;
}

// ListMissionsRequest is used to get a list of missions
message ListMissionsRequest {
  reserved 4;
  reserved "delivery_status";
  // Page size limit of the query
  int32 limit = 1;
  // Filters by assigned robot
  string assigned_robot_id = 2; // e.g. badger-1, badger-3
  // Filters by UUID of a mission
  string mission_id = 3;
}

// ListMissionsResponse is the response for a ListMissions query
message ListMissionsResponse {
  // List of missions
  repeated Mission missions = 1;
}

// GetMissionRequest is used to get a mission
message GetMissionRequest {
  // UUID of mission
  string mission_id = 1;
}

// GetMissionResponse is the response for a GetMission query
message GetMissionResponse {
  // Missions
  Mission mission = 1;
}

// TerminateDeliveryRequest is used to define the terminal state of a delivery
message TerminateDeliveryRequest {
  reserved 2;
  reserved "delivery_status";
  // UUID of mission
  string mission_id = 1;
  // Order terminal status
  OrderTerminalStatus order_terminal_status = 3;
}

// TerminateDeliveryResponse is the response for a TerminateDelivery query
message TerminateDeliveryResponse {
  // Missions
  Mission mission = 1;
}

// CancelMissionRequest is contains the cancellable mission info
message CancelMissionRequest {
  // UUID of mission
  string mission_id = 1;

  // Optional delivery failure for cancellation passed from operators in FC/RAC
  autonomous_partner_api.doordash_endpoints_common.DeliveryFailure delivery_failure = 2;
}

// Response to mission cancellation
message CancelMissionResponse {}

// Contains mission transition info; Only accepts transtion to/from
// READY/NOT_READY states
message TransitionMissionStateRequest {
  // Canonical id of the robot to transition
  string robot_id = 1;
  // The current state at the time of request - persisted to provide another
  // signal as to when to clear the transition intent as well as resolve races
  robot.v1.MissionState.State from_state = 2;
  // The desired state - persisted to provide another signal as
  // to when to clear the transition intent
  robot.v1.MissionState.State to_state = 3;
}

// Mission transition response
message TransitionMissionStateResponse {}
