syntax = "proto3";

// buf:lint:ignore DIRECTORY_SAME_PACKAGE
package dasher_homescreen_service.v1;

import "component-catalog.common/prism/tokens/color.proto";
import "doordash.api/annotations.proto";
import "doordash.api/client.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "lego.response/lego_response.proto";

option go_package = "github.com/doordash/services-protobuf/generated/dasher_homescreen_service/api/v1";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.dasher_homescreen_service.rpc.api";

// Homescreen Service is responsible for showing/refreshing/updating the dasher app homescreen to the dashers
service HomescreenService {
  option (doordash.api.service) = {
    name: "dasher-homescreen-service"
    url: "dasher-homescreen-service-api.service.prod.ddsd"
    port: 50051
    name_spaces: ["homescreen"]
    owner: {
      id: "supply-demand-mobilization"
      name: "supply-demand"
      slack_channel: "#supply-demand-service-core-eng-team"
      email_alias: "eng-supply-demand@doordash.com"
    }
    api_key_name: "DASHER_HOMESCREEN_SERVICE_API_KEY"
    target_products: [DX]
  };

  // Endpoint to get heatmap for all SP on dasher homescreen
  rpc GetHeatmap(GetHeatmapRequest) returns (GetHeatmapResponse) {
    option (google.api.http) = {get: "/homescreen/v1/get_heatmap"};
    option (doordash.api.endpoint) = {
      tier: T0
      lifecycle: DEV
      authorization: [DX_USER]
      target_products: [DX]
      inject_user_roles: true
    };
  }

  // Endpoint to get heatmap for specific SP on dasher homescreen
  rpc GetStartingPointHeatmap(GetStartingPointHeatmapRequest) returns (GetStartingPointHeatmapResponse) {
    option (google.api.http) = {get: "/homescreen/v1/get_sp_heatmap"};
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [DX_USER]
      target_products: [DX]
      inject_user_roles: true
    };
  }

  // Endpoint to get the dasher's homepage pill
  rpc GetEarningsPill(GetEarningsPillRequest) returns (GetEarningsPillResponse) {
    option (google.api.http) = {get: "/homescreen/v1/get_earnings_pill"};
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [DX_USER]
      target_products: [DX]
      inject_user_roles: true
    };
  }

  // Endpoint to get the dasher's homepage experiment flag
  rpc IsMonarchHomescreenEnabled(IsMonarchHomescreenEnabledRequest) returns (IsMonarchHomescreenEnabledResponse) {
    option (google.api.http) = {get: "/homescreen/v1/is_enabled"};
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [DX_USER]
      target_products: [DX]
      inject_user_roles: true
    };
  }
}

// Request to get heatmap for all SP on dasher homescreen
message GetHeatmapRequest {
  reserved 5;
  reserved "preferences";
  // The latitude of the dasher's current location
  google.protobuf.DoubleValue lat = 1 [(doordash.api.client.optional) = true];

  // The longitude of the dasher's current location
  google.protobuf.DoubleValue lng = 2 [(doordash.api.client.optional) = true];

  // The currently selected staring point id
  google.protobuf.StringValue selected_sp_id = 3 [(doordash.api.client.optional) = true];

  // Dasher id for the current user
  string dasher_id = 4 [(doordash.api.inject_id) = DX_ID];

  // Dasher selected vehicle type id
  google.protobuf.StringValue vehicle_type_id = 6 [(doordash.api.client.optional) = true];

  // Dasher selected earnings mode id
  google.protobuf.StringValue earnings_mode_id = 7 [(doordash.api.client.optional) = true];
}

// Response to get heatmap for all SP on dasher homescreen
message GetHeatmapResponse {
  reserved 4;
  reserved "default_selected_earnings_mode";
  // List of starting points
  repeated StartingPoint starting_points = 1;

  // The currently selected starting point id
  google.protobuf.StringValue default_selected_sp_id = 2;

  // earnings mode
  repeated EarningsModeSelector earnings_modes_info = 3;

  // default selected earnings mode
  EarningsModeId default_selected_earnings_mode_id = 5;

  // Poll frequency in milli secs
  google.protobuf.Int64Value poll_frequency_ms = 6;
}

// Starting point info
message StartingPoint {
  // The id of the starting point
  google.protobuf.StringValue id = 1;

  // The name of the starting point
  google.protobuf.StringValue name = 2;

  // Encoded polyline of the starting point
  repeated google.protobuf.StringValue polyline = 5;

  // Earnings mode info for starting point
  repeated EarningsMode earnings_modes = 6;
}

// Earnings mode id enum values
enum EarningsModeId {
  // Unrecognized earnings mode enum
  EARNINGS_MODE_ID_UNSPECIFIED = 0;
  // Order mode enum
  EARNINGS_MODE_ID_ORDER_MODE = 1;
  // Time mode earnings enum
  EARNINGS_MODE_ID_TIME_MODE = 2;
}

// Earnings mode info
message EarningsMode {
  // The id of the earnings mode
  EarningsModeId mode = 1;

  // Heatmap info for earnings mode
  Heatmap heatmap = 2;

  // Dash Panel info for earnings mode
  DashPanel dash_panel = 3;
}

// Heatmap info
message Heatmap {
  reserved 1;
  reserved "annotations";

  // Heatmap polygon color
  PolygonColor polygon_color = 2;

  // Heatmap annotation
  HeatmapAnnotation annotation = 3;
}

// Heatmap annotation info
message HeatmapAnnotation {
  reserved 2;
  reserved "color";

  // The icon id of the heatmap annotation
  google.protobuf.StringValue icon = 1;

  // The description of the heatmap annotation
  google.protobuf.StringValue primary_text = 3;

  // The description of the heatmap annotation
  google.protobuf.StringValue secondary_text = 4;

  // The latitude of the starting point centroid
  google.protobuf.DoubleValue lat = 5;

  // The longitude of the starting point centroid
  google.protobuf.DoubleValue lng = 6;

  // prism color for heatmap annotation bubble
  component_catalog.common.prism.tokens.v1.Color bubble_prism_color = 7;
}

// Polygon color info
message PolygonColor {
  reserved 1, 2;
  reserved "fill_color", "stroke_color";

  // prism color for polygon color
  component_catalog.common.prism.tokens.v1.Color fill_prism_color = 3;

  // prism color for polygon border color
  component_catalog.common.prism.tokens.v1.Color stroke_prism_color = 4;
}

// Dash Panel info
message DashPanel {
  // The hyderation id of the dash panel
  google.protobuf.StringValue hydration_id = 1 [(doordash.api.client.optional) = true];

  // The lego page of the dash panel
  lego.response.v1.LegoPageResponse lego_page = 2 [(doordash.api.client.optional) = true];
}

// Request to get heatmap for specific SP on dasher homescreen
message GetStartingPointHeatmapRequest {
  // The id of the starting point
  google.protobuf.StringValue sp_id = 1;

  // Dasher id for the current user
  string dasher_id = 2 [(doordash.api.inject_id) = DX_ID];

  // Hydration id for dash panel
  google.protobuf.StringValue hydration_id = 3 [(doordash.api.client.optional) = true];

  // The latitude of the dasher's current location
  google.protobuf.DoubleValue lat = 4 [(doordash.api.client.optional) = true];

  // The longitude of the dasher's current location
  google.protobuf.DoubleValue lng = 5 [(doordash.api.client.optional) = true];

  // Dasher selected vehicle type id
  google.protobuf.StringValue vehicle_type_id = 6 [(doordash.api.client.optional) = true];

  // Dasher selected earnings mode id
  google.protobuf.StringValue earnings_mode_id = 7 [(doordash.api.client.optional) = true];
}

// Response to get heatmap for specific SP on dasher homescreen
message GetStartingPointHeatmapResponse {
  // Dash Panel info for the starting point
  StartingPoint starting_point = 1;
}

// Request to get the dasher's homepage pill
message GetEarningsPillRequest {
  // Dasher id for the current user
  string dasher_id = 1 [(doordash.api.inject_id) = DX_ID];
}

// Response to get the dasher's homepage pill
message GetEarningsPillResponse {
  // Primary text
  repeated RollingText primary_text = 1;
  // secondary text
  google.protobuf.StringValue secondary_text = 2;
}

// Rolling text info
message RollingText {
  // The rolling text
  google.protobuf.StringValue text = 1;
  // The text type - rolling or not rolling
  RollingTypeId type = 2;
}

// Rolling text type enum values
enum RollingTypeId {
  // Unrecognized rolling type enum
  ROLLING_TYPE_ID_UNSPECIFIED = 0;
  // Rolling text enum
  ROLLING_TYPE_ID_ROLLING = 1;
  // Non-rolling text enum
  ROLLING_TYPE_ID_NON_ROLLING = 2;
}

// Earnings mode selector
message EarningsModeSelector {
  reserved 1;
  reserved "id";
  // The icon to display for earnings mode
  google.protobuf.StringValue icon = 2;

  // The description of the earnings mode
  google.protobuf.StringValue display_text = 3;

  // The earnings mode id
  EarningsModeId earnings_mode_id = 4;
}

// Request to check if monarch homescreen is enabled
message IsMonarchHomescreenEnabledRequest {
  // Dasher id for the current user
  google.protobuf.StringValue dasher_id = 1 [(doordash.api.inject_id) = DX_ID];
}

// Response to check if monarch homescreen is enabled
message IsMonarchHomescreenEnabledResponse {
  // Whether the monarch homescreen is enabled
  google.protobuf.BoolValue is_enabled = 1;
}
