syntax = "proto3";

package assets_service.v3;

import "assets_service.v3/attributes.proto";
import "assets_service.v3/catalog_metrics.proto";
import "assets_service.v3/domain.proto";
import "assets_service.v3/k8s_app.proto";
import "assets_service.v3/kubernetes_app.proto";
import "assets_service.v3/pull_request.proto";
import "assets_service.v3/resource.proto";
import "assets_service.v3/slo.proto";
import "assets_service.v3/software_asset.proto";
import "assets_service.v3/user_and_group.proto";
import "common/service_client_config.proto";

option go_package = "github.com/doordash/services-protobuf/generated/assets_service.v3";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.assetsservice.v3";

/*
 * Service Implementation: https://github.com/doordash/assets-service
 */
service V3AssetsService {
  // Example Hermes client config. The options not listed here use Hermes
  // default. The following applies for all RPCs in the service, if not
  // overridden on individual RPCs.

  // Timeout after 5 seconds.
  option (service_client.client_config).response_attempt_timeout_millis = 15000;
  // Make a total 4 attempts (initial + three retries).
  option (service_client.client_config).retry_config.max_attempts = 4;
  // Add RESOURCE_EXHAUSTED to the set of retryable codes.
  option (service_client.client_config).retry_config.do_retry_grpc_code = 8;
  // Break the circuit if the error rate exceeds 80%.
  option (service_client.client_config).circuit_breaker_config.failure_rate_threshold = 0.8;
  // Ignore NOT_FOUND from circuit breaker error rate calculation.
  option (service_client.client_config).circuit_breaker_config.do_ignore_grpc_code = 5;

  // Lists all Domains Doordash.
  rpc ListDomains(ListDomainsRequest) returns (ListDomainsResponse);
  // List users at doordash.
  rpc ListUsers(ListUsersRequest) returns (ListUsersResponse);
  // List groups at doordash.
  rpc ListGroups(ListGroupsRequest) returns (ListGroupsResponse);
  // Query for a group by its DDRN or alias.
  rpc GetGroup(GetGroupRequest) returns (GetGroupResponse);
  // Register an existing Google Group to Assets Service.
  rpc RegisterGroup(RegisterGroupRequest) returns (RegisterGroupResponse);
  // Unregister a group from Assets Service.
  rpc UnregisterGroup(UnregisterGroupRequest) returns (UnregisterGroupResponse);
  // Unregister a test group from Assets Service.
  rpc UnregisterTestGroupsOnly(UnregisterTestGroupsOnlyRequest) returns (UnregisterTestGroupsOnlyResponse);
  // Updates a group's metadata.
  rpc UpdateGroupMetadata(UpdateGroupMetadataRequest) returns (UpdateGroupMetadataResponse);
  // Query for a Google Group by its email.
  rpc GetGoogleGroup(GetGoogleGroupRequest) returns (GetGoogleGroupResponse);
  // Query for a user by its DDRN or alias.
  rpc GetUser(GetUserRequest) returns (GetUserResponse);
  // List Slack Channels at Doordash (Currently only returning Eng Support
  // Channels).

  // List SoftwareAssets
  rpc ListSoftwareAssets(ListSoftwareAssetsRequest) returns (ListSoftwareAssetsResponse);
  // Get SoftwareAsset
  rpc GetSoftwareAsset(GetSoftwareAssetRequest) returns (GetSoftwareAssetResponse);
  // Validate SoftwareAsset
  rpc ValidateSoftwareAsset(ValidateSoftwareAssetRequest) returns (ValidateSoftwareAssetResponse);
  // Register SoftwareAsset
  rpc RegisterSoftwareAsset(RegisterSoftwareAssetRequest) returns (RegisterSoftwareAssetResponse);
  // Unregister SoftwareAsset
  rpc UnregisterSoftwareAsset(UnregisterSoftwareAssetRequest) returns (UnregisterSoftwareAssetResponse);
  // Unregister Test SoftwareAssets
  rpc UnregisterSoftwareAssetTestsEntitiesOnly(UnregisterSoftwareAssetTestsEntitiesOnlyRequest) returns (UnregisterSoftwareAssetTestsEntitiesOnlyResponse);
  // Unregister Provisioning SoftwareAssets
  rpc UnregisterSoftwareAssetProvisioningEntitiesOnly(UnregisterSoftwareAssetProvisioningEntitiesOnlyRequest) returns (UnregisterSoftwareAssetProvisioningEntitiesOnlyResponse);
  // Update SoftwareAsset
  rpc UpdateSoftwareAsset(UpdateSoftwareAssetRequest) returns (UpdateSoftwareAssetResponse);
  // GetExpectedAttributesForSubtypes
  rpc GetExpectedAttributesForSubtypes(GetExpectedAttributesForSubtypesRequest) returns (GetExpectedAttributesForSubtypesResponse);
  // ListPullRequestReviewCountsByUser
  rpc ListPullRequestReviewCountsByUser(ListPullRequestReviewCountsByUserRequest) returns (ListPullRequestReviewCountsByUserResponse);
  // RegisterK8sApp - DEPRECATED, use RegisterKubernetesApp instead
  rpc RegisterK8sApp(RegisterK8sAppRequest) returns (RegisterK8sAppResponse) {
    option deprecated = true;
  }
  // GetK8sAppByAlias - DEPRECATED, use GetKubernetesAppByAlias instead
  rpc GetK8sAppByAlias(GetK8sAppByAliasRequest) returns (GetK8sAppByAliasResponse) {
    option deprecated = true;
  }
  // GetK8sAppByDdrn - DEPRECATED, use GetKubernetesAppByDdrn instead
  rpc GetK8sAppByDdrn(GetK8sAppByDdrnRequest) returns (GetK8sAppByDdrnResponse) {
    option deprecated = true;
  }
  // RegisterKubernetesApp
  rpc RegisterKubernetesApp(RegisterKubernetesAppRequest) returns (RegisterKubernetesAppResponse);
  // GetKubernetesAppByAlias
  rpc GetKubernetesAppByAlias(GetKubernetesAppByAliasRequest) returns (GetKubernetesAppByAliasResponse);
  // GetKubernetesAppByDdrn
  rpc GetKubernetesAppByDdrn(GetKubernetesAppByDdrnRequest) returns (GetKubernetesAppByDdrnResponse);
  // GetKubernetesAppByNamespaceAndAlias
  rpc GetKubernetesAppByNamespaceAndAlias(GetKubernetesAppByNamespaceAndAliasRequest) returns (GetKubernetesAppByNamespaceAndAliasResponse);
  // GetKubernetesAppByServiceAndApp returns a k8s app by service and app name (if present)
  rpc GetKubernetesAppByServiceAndApp(GetKubernetesAppByServiceAndAppRequest) returns (GetKubernetesAppByServiceAndAppResponse);
  // UpdateKubernetesApp
  rpc UpdateKubernetesApp(UpdateKubernetesAppRequest) returns (UpdateKubernetesAppResponse);
  // UnregisterKubernetesApp
  rpc UnregisterKubernetesApp(UnregisterKubernetesAppRequest) returns (UnregisterKubernetesAppResponse);
  // List all metrics for catalog metrics page
  rpc ListCatalogMetricSnapshots(ListCatalogMetricSnapshotsRequest) returns (ListCatalogMetricSnapshotsResponse);
  // List all issues for catalog metrics page
  rpc ListSoftwareAssetIssues(ListSoftwareAssetIssuesRequest) returns (ListSoftwareAssetIssuesResponse);
  // GetIssuesForSoftwareAsset will return a list of software asset issues for a given software asset.
  rpc GetIssuesForSoftwareAsset(GetIssuesForSoftwareAssetRequest) returns (GetIssuesForSoftwareAssetResponse);

  // ListSloSnapshots will return all SLO snapshots matching the requested filters
  rpc ListSloSnapshots(ListSloSnapshotsRequest) returns (ListSloSnapshotsResponse);
  // GetSLOSnapshotsSummary will return a summary for a list of groups in a time range
  rpc GetSloSnapshotsSummary(GetSloSnapshotsSummaryRequest) returns (GetSloSnapshotsSummaryResponse);
  // GetSloAdherence will return a summary for a list of groups in a time range
  rpc GetSloSnapshotsAdherence(GetSloSnapshotsAdherenceRequest) returns (GetSloSnapshotsAdherenceResponse);

  // GetResource retrieves a resource by its DDRN.
  rpc GetResource(GetResourceRequest) returns (GetResourceResponse);
  // ListResources retrieves a list of resources matching the requested filters.
  rpc ListResources(ListResourcesRequest) returns (ListResourcesResponse);
  // RegisterResource registers a new resource.
  rpc RegisterResource(RegisterResourceRequest) returns (RegisterResourceResponse);
  // DeleteResource deletes a resource.
  rpc DeleteResource(DeleteResourceRequest) returns (DeleteResourceResponse);
  // UpdateResource updates a resource.
  rpc UpdateResource(UpdateResourceRequest) returns (UpdateResourceResponse);
  // ListResourceTypes retrieves a list of resource types, each with information.
  rpc ListResourceTypes(ListResourceTypesRequest) returns (ListResourceTypesResponse);
}
