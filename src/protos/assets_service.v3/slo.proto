syntax = "proto3";

package assets_service.v3;

import "common/date.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/doordash/services-protobuf/generated/assets_service.v3";
option java_multiple_files = true;
option java_package = "com.doordash.rpc.assetsservice.v3";

// ListSloSnapshotsRequest is the request message for ListSloSnapshots.
message ListSloSnapshotsRequest {
  // the group ddrn to query SLO snapshots for
  string group_ddrn = 1;
  // filters to apply to the list of SLO snapshots
  ListSloSnapshotsFilters filters = 2;
  // the number of results to return per page
  int32 page_size = 3;
  // the page token to use for pagination
  string page_token = 4;
}

// ListSloSnapshotsFilters is the filters to apply to the list of SLO snapshots.
message ListSloSnapshotsFilters {
  // the SLO tier to filter by
  repeated SloTier tiers = 1;
  // the SLO category to filter by
  repeated SloLevel levels = 2;
  // DEPRECATED. the beginning of the date range to filter by. Format: YYYY-MM-DD
  string from_synced_at = 3;
  // DEPRECATED. the end of the time date to filter by.  Format: YYYY-MM-DD
  string to_synced_at = 4;
  // DEPRECATED. the beginning of the date range to filter by, inclusive.
  date.Date from = 5;
  // DEPRECATED. the end of the time date to filter by, inclusive
  date.Date to = 6;
  // the beginning of the timestamp range to filter by, inclusive.
  google.protobuf.Timestamp from_snapshotted_on_utc = 7;
  // the end of the timestamp range to filter by, inclusive.
  google.protobuf.Timestamp to_snapshotted_on_utc = 8;
}

// ListSloSnapshotsResponse is the response message for ListSloSnapshots.
message ListSloSnapshotsResponse {
  // the SLO snapshots history
  repeated SloHistory slo_history = 1;
  // the next page token to use for pagination
  string next_page_token = 2;
  // the total count of SLO histories matching the request filters
  int32 total_count = 3;
}

// SloHistory contains the definition and the list of snapshots
message SloHistory {
  // the SLO definition metadata for this set of snapshots
  SloDefinition slo_definition = 1;
  // ordered chronologically by synced_at, oldest to newest
  repeated SloSnapshot snapshots = 2;
}

// Each snapshot contains the snapshotted value and the time it was synced
message SloSnapshot {
  // a unique id for this SLO snapshot
  string snapshot_id = 1;
  // the date when the SLO snapshot was synced. Format: YYYY-MM-DD
  string synced_at = 2;
  // the value of the SLO snapshot, representing percentage remaining or burned
  double error_budget_one_day_bucket = 3;
  // indicates whether this SLO has healthy, warn or burn level
  SloLevel level = 4;
  // epoch timestamp in seconds
  google.protobuf.Timestamp snapshotted_on = 5;
}

// SloDefinition is the shared metadata across snapshots
message SloDefinition {
  // the uuid of the SLO definition
  string slo_uuid = 1;
  // the uuid of the SLO component
  string slo_component_uuid = 2;
  // the software asset ddrn
  string software_asset_ddrn = 3;
  // the display name for this SLO
  string display_name = 4;
  // the tier for this SLO
  SloTier tier = 5;
  // the software asset alias corresponding to the DDRN
  string software_asset_alias = 6;
}

// the category of the SLO
enum SloCategory {
  // Default value
  SLO_CATEGORY_UNSPECIFIED = 0;
  // an Availability SLO
  SLO_CATEGORY_AVAILABILITY = 1;
  // a Latency SLO
  SLO_CATEGORY_LATENCY = 2;
  // an SLO with type "other"
  SLO_CATEGORY_OTHER = 10;
}

// the type of the SLO
enum SloType {
  // Default value
  SLO_TYPE_UNSPECIFIED = 0;
  // A generic SLO
  SLO_TYPE_GENERIC = 1;
  // A GRPC slo
  SLO_TYPE_GRPC = 2;
  // A GRPC client SLO
  SLO_TYPE_GRPC_CLIENT = 3;
}

// The derived level of the SLO.
// The thresholds for these are defined in Assets Service
enum SloLevel {
  // Default value
  SLO_LEVEL_UNSPECIFIED = 0;
  // SLO with a "healthy" state.
  SLO_LEVEL_HEALTHY = 1;
  // SLO with a "warn" state.
  SLO_LEVEL_WARN = 2;
  // SLO with a "burn" state.
  SLO_LEVEL_BURN = 3;
}

// The tier of the SLO
enum SloTier {
  // Default value
  SLO_TIER_UNSPECIFIED = 0;
  // Tier Zero SLO. Highest tier.
  SLO_TIER_ZERO = 1;
  // Tier One SLO.
  SLO_TIER_ONE = 2;
  // Tier Two SLO.
  SLO_TIER_TWO = 3;
  // Tier Three SLO.
  SLO_TIER_THREE = 4;
}

// GetSLOSnapshotsSummaryRequest is the request message for GetSLOSnapshotsSummary.
message GetSloSnapshotsSummaryRequest {
  // the group ddrns to query the summary for
  repeated string group_ddrns = 1;
  // DEPRECATED. the start of the date range to query for, inclusive.
  date.Date from = 2;
  //  DEPRECATED. the end of the date range to query for, inclusive.
  date.Date to = 3;
  // the beginning of the timestamp range to filter by, inclusive.
  google.protobuf.Timestamp from_snapshotted_on_utc = 7;
  // the end of the timestamp range to filter by, inclusive.
  google.protobuf.Timestamp to_snapshotted_on_utc = 8;
}

// GetSLOSnapshotsSummaryResponse is the response message for GetSLOSnapshotsSummary.
message GetSloSnapshotsSummaryResponse {
  // the list of snapshot summaries
  repeated SnapshotSummary summaries = 1;
  // map of tier counts per level. Available keys: SLO_TIER_ZERO, SLO_TIER_ONE, SLO_TIER_TWO, SLO_TIER_THREE
  map<string, SloTierCountsPerLevel> tier_counts_per_level = 2;
}

// SloTierCountsPerLevel contains the count of SLOs per level for a given tier
message SloTierCountsPerLevel {
  // count of burned SLOs for this tier
  int32 burned_count = 1;
  // count of warned SLOs for this tier
  int32 warned_count = 2;
  // count of healthy SLOs for this tier
  int32 healthy_count = 3;
}

// SnapshotSummary contains data for a summary type in the given time range
message SnapshotSummary {
  // used to determine display title, e.g. "Teams with SLO burned"
  SummaryType type = 1;
  // the delta from the previous 7 days, negative, zero or positive number
  sint32 delta_from_prev_7d = 2;
  // the count for this SummaryType, greater than or equal to zero
  int32 count = 3;
}

// SummaryType enum is used to properly render the results in the UI
enum SummaryType {
  // Default value
  SUMMARY_TYPE_UNSPECIFIED = 0;
  // Teams with burned SLOs
  SUMMARY_TYPE_TEAMS_COUNT = 1;
  // Number of SLOs with burn level
  SUMMARY_TYPE_SLO_BURN_COUNT = 2;
  // Number of SLOs with warn level
  SUMMARY_TYPE_SLO_WARN_COUNT = 3;
  // Number of SLOs in total
  SUMMARY_TYPE_SLO_TOTAL_COUNT = 4;
  // Number of total T0 SLOs
  SUMMARY_TYPE_SLO_TIER_ZERO_TOTAL_COUNT = 5;
  // Number of total T1 SLOs
  SUMMARY_TYPE_SLO_TIER_ONE_TOTAL_COUNT = 6;
  // Number of total T2 SLOs
  SUMMARY_TYPE_SLO_TIER_TWO_TOTAL_COUNT = 7;
  // Number of total T3 SLOs
  SUMMARY_TYPE_SLO_TIER_THREE_TOTAL_COUNT = 8;
}

// GetSloAdherenceRequest is the request message for GetSloAdherence.
message GetSloSnapshotsAdherenceRequest {
  // the group ddrns to calculate SLO adherence for
  repeated string group_ddrns = 1;
  // filters to apply when calculating adherence
  GetSloSnapshotsAdherenceFilters filters = 2;
}

// GetSloAdherenceFilters is the filters to apply when calculating SLO adherence.
message GetSloSnapshotsAdherenceFilters {
  // the beginning of the date range to filter by, inclusive. Only month and year is considered, day is ignored.
  date.Date from = 1;
  // the end of the time date to filter by, inclusive. Only month and year is considered, day is ignored.
  date.Date to = 2;
  // the SLO tier to filter by
  repeated SloTier tiers = 3;
}

// GetSloAdherenceResponse is the response message for GetSloAdherence.
message GetSloSnapshotsAdherenceResponse {
  // adherence per tier. Keys represent months in the format "YYYY-MM"
  map<string, Adherence> adherence_over_time = 1;
}

// AdherenceHistory describes the adherence totals for a day
message Adherence {
  // epoch timestamp in seconds. represents the datetime of a single day that this adherence percentage is calculated from.
  google.protobuf.Timestamp snapshotted_on = 1;
  // represents the date of a single day that this adherence percentage is calculated from.
  string synced_at = 2;
  // totals per tier. Keys represent the SLO tiers: SLO_TIER_ZERO, SLO_TIER_ONE, SLO_TIER_TWO, SLO_TIER_THREE
  map<string, AdherenceTotals> tier_totals = 5;
}

// AdherenceTotals contains the total number of SLOs and the number of SLOs with budget less than 0
message AdherenceTotals {
  // the total number of 30D SLOs for the given filters
  int32 total_slo_thirty_day_budget_count = 3;
  // the number of SLOs with 30D budget less than 0 for the given filters
  int32 burned_slo_thirty_day_budget_count = 4;
  // 30d adherence expressed as the percentage of the total count that is not burned
  double adherence = 5;
}
