syntax = "proto3";

package assets_service.v3;

option go_package = "github.com/doordash/services-protobuf/generated/assets_service.v3";
option java_multiple_files = true;
option java_package = "com.doordash.rpc.assetsservice.v3";

/**
 * Register a k8s app to a software asset, and generate a DDRN.
 */
message RegisterKubernetesAppRequest {
  /* Required. The Alias for your Kubernetes App.
   * This is usually the same as the Kubernetes App name for most cases. */
  string alias = 1;
  // Software asset that the k8s app DDRN will be associated with
  oneof software_asset {
    // DDRN of the software asset
    string software_asset_ddrn = 2;
    // Alias of the software asset
    string software_asset_alias = 3;
  }
  // The Kubernetes namespace under which this app is deployed.
  string namespace = 4;
  // The environments in which this app is deployed.
  repeated string target_environments = 5;
  // Metadata for the k8s app
  AppMetadata metadata = 10;
}

/**
 * Response for registering a k8s app to a software asset.
 */
message RegisterKubernetesAppResponse {
  // The DDRN of the registered k8s app, e.g. ddrn::k8s-app::<UUID>
  string ddrn = 1;
}

/**
 * Get a k8s app by alias.
 */
message GetKubernetesAppByAliasRequest {
  // The Kubernetes app alias
  string alias = 1;

  // Required. Software asset that the k8s app is associated with.
  oneof software_asset {
    // DDRN of the software asset
    string software_asset_ddrn = 3;
    // Alias of the software asset
    string software_asset_alias = 4;
  }
}

/**
 * Response for getting a k8s app by alias
 */
message GetKubernetesAppByAliasResponse {
  // The Kubernetes app associated with the alias
  KubernetesApp app = 1;
}

/**
 * Get a k8s app by DDRN.
 */
message GetKubernetesAppByDdrnRequest {
  // The DDRN of the k8s app, e.g. ddrn::k8s-app::<UUID>
  string ddrn = 1;
}

/**
 * Response for getting a k8s app by DDRN
 */
message GetKubernetesAppByDdrnResponse {
  // The Kubernetes app associated with the alias
  KubernetesApp app = 1;
}

/**
 * Get a K8s app by namespace and alias.
 */
message GetKubernetesAppByNamespaceAndAliasRequest {
  // The namespace in which the app is deployed.
  string namespace = 1;
  // The alias of the app
  string alias = 2;
}

/**
 * Response for getting a k8s app by namespace and alias
 */
message GetKubernetesAppByNamespaceAndAliasResponse {
  // The Kubernetes app associated with the requested namespace & alias.
  KubernetesApp app = 1;
}

/**
 * Request for getting a k8s app by service name and app.
 */
message GetKubernetesAppByServiceAndAppRequest {
  // The service name
  string service_name = 1;
  // The name of the app (aka alias)
  string app = 2;
}

/**
 * Response for getting a k8s app by service and app (aka alias)
 */
message GetKubernetesAppByServiceAndAppResponse {
  // The Kubernetes app associated with the requested service & app.
  KubernetesApp app = 1;
}

/**
 * Kubernetes app model. Contains all metadata for a k8s app.
 */
message KubernetesApp {
  // Status for lifecycle stages
  enum Status {
    // Default status.
    STATUS_UNSPECIFIED = 0;
    // Indicates the app is registered.
    STATUS_REGISTERED_ACTIVE = 1;
    // Indicates the app has been archived and is no longer active.
    STATUS_ARCHIVED = 10;
  }
  // The DDRN of the k8s app, e.g. ddrn::k8s-app::<UUID>
  string ddrn = 1;
  // The alias of the k8s app. This is usually the same as the Kubernetes app name, but not always.
  string alias = 2;
  // The Software Asset that this Kubernetes App is registered to
  string software_asset_ddrn = 3;
  // The Kubernetes namespace under which this app is deployed.
  string namespace = 4;
  // The environments in which this app is deployed.
  repeated string target_environments = 5;
  // The Spinnaker app used to deploy this k8s app
  string spinnaker_app = 6;
  // The Kubernetes service label selector for this app
  string service = 7;
  // Metadata for the k8s app
  AppMetadata metadata = 10;
  // Status for UnregisterKubernetesApp
  Status status = 11;
}

// Application type
enum ApplicationType {
  // Service type unspecified
  APPLICATION_TYPE_UNSPECIFIED = 0;

  // Kotlin API application
  APPLICATION_TYPE_KOTLIN_API = 1;
}

/**
 * Metadata for a k8s app.
 */
message AppMetadata {
  // The type of the k8s app
  ApplicationType type = 1;
  // The description of the k8s app
  string description = 2;
}

/**
 * Update a k8s app by DDRN.
 */
message UpdateKubernetesAppRequest {
  // Metadata for the k8s app
  AppMetadata metadata = 1;
  // The DDRN of the k8s app, e.g. ddrn::k8s-app::<UUID>
  string ddrn = 2;
  // The Kubernetes app alias
  string alias = 3;
}

/**
 * Update a k8s app by DDRN.
 */
message UpdateKubernetesAppResponse {
  // The Kubernetes app
  KubernetesApp app = 1;
}

/**
 * Unregister a k8s app.
 */
message UnregisterKubernetesAppRequest {
  // The DDRN of the registered k8s app
  string ddrn = 1;
}

/**
 * Unregister a k8s app.
 */
message UnregisterKubernetesAppResponse {}
