syntax = "proto3";

// buf:lint:ignore DIRECTORY_SAME_PACKAGE
package pkg_shadow.v1;

import "common/common.proto";
import "common/service_client_config.proto";
import "doordash.retail.serving.v1/read_service.proto";
import "google/protobuf/wrappers.proto";
import "menu/menu_consumer_gateway.proto";
import "menu/menu_index_service.proto";
import "menu/menu_merchant_gateway.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.pkg_shadow";

// This is an example service for using Asgard server library in a Guice environment.
service PkgShadowService {
  // Example Hermes client config. The options not listed here use Hermes default.
  // The following applies for all RPCs in the service, if not overridden on individual RPCs.

  // shadow consumerGateway.getMenu
  rpc GetMenu(menuconsumergateway.GetMenuRequest) returns (menuconsumergateway.GetMenuResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 2000;
  }

  // shadow consumerGateway.getEntities
  rpc ShadowConsumerGatewayGetEntities(menuconsumergateway.GetEntitiesRequest) returns (menuconsumergateway.GetEntitiesResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 2000;
  }

  // shadow consumerGateway.getMenu
  rpc ShadowConsumerGatewayGetMenu(menuconsumergateway.GetMenuRequest) returns (menuconsumergateway.GetMenuResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 2000;
  }

  // shadow consumerGateway.getRetailEntities
  rpc ShadowConsumerGatewayGetRetailEntities(menuconsumergateway.GetEntitiesRequest) returns (menuconsumergateway.GetEntitiesResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 2000;
  }

  // shadow indexService.searchEntity
  rpc ShadowIndexServiceSearchEntity(menuindexservice.ESSearchEntityRequest) returns (menuindexservice.ESSearchEntityResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 2000;
  }

  // shadow merchantGateway.getEntities
  rpc ShadowMerchantGatewayGetEntities(menumerchantgateway.GetEntitiesRequest) returns (menumerchantgateway.GetEntitiesResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 2000;
  }

  // shadow merchantGateway.getMenu
  rpc ShadowMerchantGatewayGetMenu(menumerchantgateway.GetMenuRequest) returns (menumerchantgateway.GetMenuResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 2000;
  }

  // shadow merchantGateway.getMenuV2
  rpc ShadowMerchantGatewayGetMenuV2(menumerchantgateway.GetMenuRequest) returns (menumerchantgateway.GetMenuResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 2000;
  }

  // shadow merchantGateway.searchEntity
  rpc ShadowMerchantGatewaySearchEntity(menumerchantgateway.SearchEntityRequest) returns (menumerchantgateway.SearchEntityResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 2000;
  }

  // rpc for shadowing store data between PKG and menu data service
  rpc ShadowStore(ShadowStoreRequest) returns (ShadowStoreResponse) {}

  // rpc for shadowing merchant catalog data between pkg and catalog v2
  rpc GetMerchantCatalog(doordash.retail.serving.v1.GetMerchantCatalogRequest) returns (doordash.retail.serving.v1.GetMerchantCatalogResponse) {}

  // rpc for shadowing merchant catalog data by gtin14 barcode between pkg and catalog v2
  rpc GetMerchantCatalogByGtin14Barcode(doordash.retail.serving.v1.GetMerchantCatalogByGtin14BarcodeRequest) returns (doordash.retail.serving.v1.GetMerchantCatalogByGtin14BarcodeResponse) {}

  // rpc for shadowing merchant catalog data by plu code between pkg and catalog v2
  rpc GetMerchantCatalogsByPluCodes(doordash.retail.serving.v1.GetMerchantCatalogsByPluCodesRequest) returns (doordash.retail.serving.v1.GetMerchantCatalogsByPluCodesResponse) {}
}

// Request for the shadow menu DAG rpc
message ShadowStoreRequest {
  // Store ID to shadow
  string store_id = 1;
  // Shadow type
  string type = 2;
}

// Response for the shadow menu DAG rpc
message ShadowStoreResponse {
  // Whether or not the DAG was equivalent between PKG and menu data service for a store.
  bool are_dags_equal = 1;

  // Whether or not store menu existence is equivalent between PKG and menu data service for a store.
  bool is_store_menu_existence_equal = 2;
}
