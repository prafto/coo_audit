syntax = "proto3";

package campaign_service.v1;

import "campaign_service/ad.proto";
import "campaign_service/ad_group.proto";
import "campaign_service/campaign.proto";
import "campaign_service/cdc.proto";
import "campaign_service/common.proto";
import "campaign_service/common/deactivation_info.proto";
import "campaign_service/target.proto";
import "common/common.proto";
import "common/service_client_config.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.campaign";

// This is an example service for using Asgard server library in a Guice environment.
service CampaignService {
  // Example Hermes client config. The options not listed here use Hermes default.
  // The following applies for all RPCs in the service, if not overridden on individual RPCs.

  // Timeout after 700 milliseconds.
  option (service_client.client_config).response_attempt_timeout_millis = 700;
  // Make a total 4 attempts (initial + three retries).
  option (service_client.client_config).retry_config.max_attempts = 4;
  // Add RESOURCE_EXHAUSTED to the set of retriable codes.
  option (service_client.client_config).retry_config.do_retry_grpc_code = 8;
  // Break the circuit if the error rate exceeds 80%.
  option (service_client.client_config).circuit_breaker_config.failure_rate_threshold = 0.8;
  // Ignore NOT_FOUND from circuit breaker error rate calculation.
  option (service_client.client_config).circuit_breaker_config.do_ignore_grpc_code = 5;

  // Returns "Hello $name".
  rpc Hello(HelloRequest) returns (HelloResponse) {
    // This is an exceptionally slow RPC, so we will set its timeout to 2 seconds.
    option (service_client.client_method_config).response_attempt_timeout_millis = 2000;
  }

  /**
   * Create a new Campaign
   * by default the operation will be atomic which does not allow providing or creating child ad_groups.
   *
   * if the Prefer header contains 'return=representation' will allow for a composite operation which accepts
   * an entire campaign payload.
   */
  rpc CreateCampaign(CreateCampaignRequest) returns (CreateCampaignResponse) {}

  /**
   * Update an exiting Campaign
   * by default the operation will be atomic which does not allow providing or updating child ad_groups.
   *
   * if the Prefer header contains 'return=representation' will allow for a composite operation which accepts
   * an entire campaign payload.
   */
  rpc UpdateCampaign(UpdateCampaignRequest) returns (UpdateCampaignResponse) {}

  /**
   * Get a Campaign by Id
   * by default the operation will be atomic which will not fetch any child ad_groups if the campaign is found.
   *
   * if the Prefer header contains 'return=representation' will allow for a composite operation which returns
   * an entire campaign payload.
   */
  rpc GetCampaignById(GetCampaignByIdRequest) returns (GetCampaignByIdResponse) {}

  /**
   * Get a lightweight Campaign by Id
   * by default the operation will be atomic which will not fetch any child ad_groups if the campaign is found.
   */
  rpc GetCampaignByIdSimple(GetCampaignByIdSimpleRequest) returns (GetCampaignByIdSimpleResponse) {}

  /**
   * Get a list of Campaigns by query params
   * by default the operation will be atomic which will not fetch any child ad_groups for matching campaigns found.
   */
  rpc GetCampaigns(GetCampaignsRequest) returns (GetCampaignsResponse) {}

  /**
   * Create a new Ad Group
   * by default the operation will be atomic which does not allow providing or creating child ads.
   *
   * if the Prefer header contains 'return=representation' will allow for a composite operation which accepts
   * an entire ad group payload.
   */
  rpc CreateAdGroup(CreateAdGroupRequest) returns (CreateAdGroupResponse) {}

  /**
   * Update an exiting Ad Group
   * by default the operation will be atomic which does not allow providing or updating child ads.
   *
   * if the Prefer header contains 'return=representation' will allow for a composite operation which accepts
   * an entire ad group payload.)
   */
  rpc UpdateAdGroup(UpdateAdGroupRequest) returns (UpdateAdGroupResponse) {}

  /**
   * Get an Ad Group by Id
   * by default the operation will be atomic which will not fetch any child ads if the ad group is found.
   *
   * if the Prefer header contains 'return=representation' will allow for a composite operation which returns
   * an entire ad group payload.
   */
  rpc GetAdGroupById(GetAdGroupByIdRequest) returns (GetAdGroupByIdResponse) {}

  /**
   * Get a list of Ad Groups.
   */
  rpc GetAdGroups(GetAdGroupsRequest) returns (GetAdGroupsResponse) {}

  /**
   * Create a new Ad
   */
  rpc CreateAd(CreateAdRequest) returns (CreateAdResponse) {}

  /**
   * Update an exiting Ad
   */
  rpc UpdateAd(UpdateAdRequest) returns (UpdateAdResponse) {}

  /**
   * Get an Ad by Id
   */
  rpc GetAdById(GetAdByIdRequest) returns (GetAdByIdResponse) {}

  /**
   * Get a list of Ads by query params
   */
  rpc GetAds(GetAdsRequest) returns (GetAdsResponse) {}

  /**
   * Get campaign history by id
   * returns history as a list of composite campaigns
   *
   * this endpoint replaces the previous endpoint from the old campaign service
   * for new use cases of getting campaign history, we should consider using transactions instead
   */
  rpc GetCampaignHistoryById(GetCampaignHistoryByIdRequest) returns (GetCampaignHistoryByIdResponse) {}

  /**
   * Get campaign snapshot by id and timestamp
   * returns a snapshot of the campaign at the given time
   *
   * this endpoint replaces the previous getCampaignByIdAndTs endpoint from the old campaign service
   */
  rpc GetCampaignSnapshot(GetCampaignSnapshotRequest) returns (GetCampaignSnapshotResponse) {}

  /**
   * Deactivate a campaign by id
   *
   * this endpoint replaces the previous DeactivateCampaignV2 endpoint from the old campaign service
   */
  rpc DeactivateCampaign(DeactivateCampaignRequest) returns (DeactivateCampaignResponse) {}

  /**
   * Get billing model by ad group id
   */
  rpc GetBillingModelByAdGroupId(GetBillingModelByAdGroupIdRequest) returns (GetBillingModelByAdGroupIdResponse) {}

  /**
   * Get an Ad Group by Id
   * by default the operation will be atomic which will not fetch any child ads if the ad group is found.
   *
   * if the Prefer header contains 'return=representation' will allow for a composite operation which returns
   * an entire ad group payload.
   */
  rpc GetAdGroupByIdSimple(GetAdGroupByIdSimpleRequest) returns (GetAdGroupByIdSimpleResponse) {}

  /**
   * Get all ad groups for a given campaign with its campaign ID
   */
  rpc GetAdGroupsByCampaignIdSimple(GetAdGroupsByCampaignIdSimpleRequest) returns (GetAdGroupsByCampaignIdSimpleResponse) {}

  /**
   * Add merchant to a ad group target
   */
  rpc UpsertMerchantToTarget(UpsertMerchantToTargetRequest) returns (UpsertMerchantToTargetResponse) {}

  /**
   * Deactivate ad groups by billing line item id
   */
  rpc DeactivateAdGroupsByBillingLineItemId(DeactivateAdGroupsByBillingLineItemIdRequest) returns (DeactivateAdGroupsByBillingLineItemIdResponse) {}
}

// Request for CreateCampaign
message CreateCampaignRequest {
  // Campaign to create.
  Campaign campaign = 1;
}

// Response for CreateCampaign
message CreateCampaignResponse {
  // Created campaign.
  Campaign campaign = 1;
}

// Request for UpdateCampaign
message UpdateCampaignRequest {
  // Campaign to update.
  Campaign campaign = 1;
}

// Response for UpdateCampaign
message UpdateCampaignResponse {
  // Updated campaign.
  Campaign campaign = 1;
}

// Request for GetCampaignById
message GetCampaignByIdRequest {
  // Id of the campaign to get.
  string campaign_id = 1;

  // todo should a timestamp param be here?
}

// Response for GetCampaignById
message GetCampaignByIdResponse {
  // Campaign with the given id.
  Campaign campaign = 1;
}

// Request for GetCampaignByIdSimple
message GetCampaignByIdSimpleRequest {
  // Id of the campaign to get
  string campaign_id = 1;
}

// Response for GetCampaignByIdSimple
message GetCampaignByIdSimpleResponse {
  // Campaign with the given id
  Campaign campaign = 1;
}

// Request for GetCampaigns
message GetCampaignsRequest {
  // number of results to return
  uint32 limit = 1;
  // offset from beginning of list of results to return
  uint32 offset = 2;
  // must include the following values for their corresponding fields
  GetCampaignsFields include = 3;
  // must exclude the following values for their corresponding fields
  GetCampaignsFields exclude = 4;
}

// Fields to query by
message GetCampaignsFields {
  // campaign ids
  repeated string campaign_ids = 1;
  // external ids
  repeated string external_ids = 2;
  // template ids
  repeated string template_ids = 3;
  // advertiser ids
  repeated string advertiser_ids = 4;
  // start time
  google.protobuf.Timestamp start_at = 5;
  // end time
  google.protobuf.Timestamp end_at = 6;
  // is active
  google.protobuf.BoolValue is_active = 7;
  // ad group ids
  repeated string ad_group_ids = 8;
  // merchant ids
  MerchantIds merchant_ids = 9;
  // submarkets
  repeated string submarkets = 10;
  // experiences
  repeated .common.Experience experiences = 11;
  // placement
  repeated Target.PlacementTarget.Placement.Type placement_type = 12;
  // promotion codes
  repeated string codes = 13;
  // applied by type
  repeated string applied_by_type = 14;
  // created by email
  repeated string created_by_email = 15;
  // created by id
  repeated string created_by_id = 16;
}

// Response for GetCampaigns
message GetCampaignsResponse {
  // List of campaigns.
  repeated Campaign campaigns = 1;
}

// Request for CreateAdGroup
message CreateAdGroupRequest {
  // AdGroup to create.
  AdGroup ad_group = 2;
}

// Response for CreateAdGroup
message CreateAdGroupResponse {
  // Created ad_group.
  AdGroup ad_group = 1;
}

// Request for UpdateAdGroup
message UpdateAdGroupRequest {
  // AdGroup to update.
  AdGroup ad_group = 1;
}

// Response for UpdateAdGroup
message UpdateAdGroupResponse {
  // Updated ad_group.
  AdGroup ad_group = 1;
}

// Request for GetAdGroupById
message GetAdGroupByIdRequest {
  // Id of the ad_group to get.
  string ad_group_id = 1;
}

// Response for GetAdGroupById
message GetAdGroupByIdResponse {
  // AdGroup with the given id.
  AdGroup ad_group = 1;
}

// Request for GetAdGroups
message GetAdGroupsRequest {
  // supported query params
  // campaignIds
  // adGroupIds
  // advertiserId -> does this come from header or query param?
  // stores
  // products
  // template ids

  // number of results to return
  int32 limit = 1;

  // offset from beginning of list of results to return
  int32 offset = 2;
}

// Response for GetAdGroups
message GetAdGroupsResponse {
  // List of ad_groups.
  repeated AdGroup ad_groups = 1;
}

// Request for CreateAd
message CreateAdRequest {
  // Ad to create.
  Ad ad = 1;
}

// Response for CreateAd
message CreateAdResponse {
  // Created ad.
  Ad ad = 1;
}

// Request for UpdateAd
message UpdateAdRequest {
  // Ad to update.
  Ad ad = 1;
}

// Response for UpdateAd
message UpdateAdResponse {
  // Updated ad.
  Ad ad = 1;
}

// Request for GetAdById
message GetAdByIdRequest {
  // Id of the ad to get.
  string ad_id = 1;
}

// Response for GetAdById
message GetAdByIdResponse {
  // Ad with the given id.
  Ad ad = 1;
}

// Request for GetAds
message GetAdsRequest {
  // supported query params
  int32 limit = 1;

  // offset from beginning of list of results to return
  int32 offset = 2;
}

// Response for GetAds
message GetAdsResponse {
  // List of ads.
  repeated Ad ads = 1;
}

// Request for GetCampaignHistoryById
message GetCampaignHistoryByIdRequest {
  // Id of the campaign to get.
  string campaign_id = 1;

  // Number of results to return.
  int32 limit = 2;

  // Offset from beginning of list of results to return.
  int32 offset = 3;
}

// Response for GetCampaignHistoryById
message GetCampaignHistoryByIdResponse {
  // List of composite campaigns.
  repeated Campaign campaigns = 1;
}

// Request for GetCampaignSnapshot
message GetCampaignSnapshotRequest {
  // Id of the campaign to get.
  string campaign_id = 1;

  // Timestamp of the snapshot to get.
  google.protobuf.Timestamp timestamp = 2;
}

// Response for GetCampaignSnapshot
message GetCampaignSnapshotResponse {
  // Snapshot of the campaign at the given time.
  Campaign campaign = 1;
}

// Request for DeactivateCampaign
message DeactivateCampaignRequest {
  // Id of the campaign to get.
  string campaign_id = 1;

  // Reason to deactivate the campaign
  campaign_service.common.v1.DeactivationReason deactivation_reason = 2;
}

// Response for DeactivateCampaign
message DeactivateCampaignResponse {}

// Request for GetBillingModelByAdGroupId
message GetBillingModelByAdGroupIdRequest {
  // Id of the ad group to get.
  string ad_group_id = 1;
}

// Response for GetBillingModelByAdGroupId
message GetBillingModelByAdGroupIdResponse {
  // Billing model of the ad group.
  AdGroup.BillingModel billing_model = 1;
}

// Request for GetAdGroupByIdSimple
message GetAdGroupByIdSimpleRequest {
  // Id of the ad_group to get.
  string ad_group_id = 1;
}

// Response for GetAdGroupByIdSimple
message GetAdGroupByIdSimpleResponse {
  // AdGroup with the given id.
  AdGroup ad_group = 1;
}

// Request for GetAdGroupsByCampaignIdSimple
message GetAdGroupsByCampaignIdSimpleRequest {
  // Id of the campaign whose ad groups to get.
  string campaign_id = 1;
}

// Response for GetAdGroupsByCampaignIdSimple
message GetAdGroupsByCampaignIdSimpleResponse {
  // Ad groups corresponding with the given campaign ID
  repeated AdGroup ad_groups = 1;
}

// Request for UpsertMerchantToTarget
message UpsertMerchantToTargetRequest {
  // Name of the file the merchant was added from.
  google.protobuf.StringValue file_name = 1;
  // campaign id to upsert the merchant to/from.
  google.protobuf.StringValue campaign_id = 2;
  // ad group id to upsert the merchant to/from.
  google.protobuf.StringValue ad_group_id = 3;
  // Target id to upsert the merchant to/from.
  google.protobuf.StringValue target_id = 4;
  // Merchant id to upsert.
  Target.MerchantTarget.Merchant merchant = 5;
  // Transaction id to associate the operation with.
  google.protobuf.StringValue transaction_id = 6;
}

// Response for UpsertMerchantToTarget
message UpsertMerchantToTargetResponse {}

// Request for DeactivateAdGroupsByBillingLineItemId
message DeactivateAdGroupsByBillingLineItemIdRequest {
  // campaign id to deactivate ad groups for
  string campaign_id = 1;
  // billing line item id to deactivate ad groups for
  string billing_line_item_id = 2;
}

// Response for DeactivateAdGroupsByBillingLineItemId
message DeactivateAdGroupsByBillingLineItemIdResponse {}

// Request for Hello
message HelloRequest {
  // Name of person being greeted.
  string name = 1;
}

// Response for Hello
message HelloResponse {
  // Greeting message.
  string messages = 1;
}
