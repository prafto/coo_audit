syntax = "proto3";

package campaign_service.v1;

import "campaign_service/common.proto";
import "campaign_service/frequency_cap.proto";
import "common/common.proto";
import "common/dayparts.proto";
import "common/money.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/wrappers.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.campaign";

/**
 * Target object used for filtering and bid adjustment.
 */
message Target {
  reserved "merchant_flag_target"; // deprecated in favor of merchant_tag_target
  reserved 15; // deprecated in favor of merchant_tag_target

  // whether this target is used as a filter.
  // If true, the target must be satisfied to be served to the user.
  // If false, the target is only used to adjust the bid when the target is satisfied.
  google.protobuf.BoolValue as_filter = 1;

  // whether this target is negated.
  // If true, the configuration must not be met for the target to be satisfied.
  google.protobuf.BoolValue is_negated = 2;

  // the type of target
  Type type = 3;

  // enum of target types to support polymorphism
  enum Type {
    reserved "MERCHANT_FLAG"; // deprecated in favor of MERCHANT_TAG
    reserved 12; // deprecated in favor of MERCHANT_TAG

    // invalid default target type
    UNSPECIFIED = 0;
    // indicates usage of keyword_target in the target block
    KEYWORD = 1;

    // indicates usage of merchant_target in the target block
    MERCHANT = 2;

    // indicates usage of experience_target in the target block
    EXPERIENCE = 3;

    // indicates usage of channel_target in the target block
    CHANNEL = 4;

    // indicates usage of day_part_target in the target block
    DAY_PART = 5;

    // indicates usage of device_target in the target block
    DEVICE = 6;

    // indicates usage of consumer_audience_target in the target block
    CONSUMER_AUDIENCE = 7;

    // indicates usage of merchant_audience_target in the target block
    MERCHANT_AUDIENCE = 8;

    // indicates usage of placement_target in the target block
    PLACEMENT = 9;

    // indicates usage of consumer_merchant_interaction_target in the target block
    CONSUMER_MERCHANT_INTERACTION = 10;

    // indicates usage of consumer_segment_target in the target block
    CONSUMER_SEGMENT = 11;

    // indicates usage of consumer_geo_target in the target block
    CONSUMER_GEO = 13;

    // indicates usage of merchant_geo_target in the target block
    MERCHANT_GEO = 14;

    // indicates usage of consumer_loyalty_target in the target block
    CONSUMER_LOYALTY = 15;

    // indicates usage of merchant_tag_target in the target block
    MERCHANT_TAG = 16;

    // indicates usage of market_state_target in the target block
    MARKET_STATE = 17;

    // indicates usage of consumer_tokens_requirement in the target block
    CONSUMER_TOKENS_REQUIREMENT = 18;

    // indicates smart audience targeting
    CONSUMER_SMART_TARGETING = 19;
  }

  // oneof block to support polymorphism of target based on the target type
  oneof target {
    // keyword collection with bid modifiers
    KeywordTarget keyword_target = 4;

    // merchant collection with bid modifiers
    MerchantTarget merchant_target = 5;

    // experience collection with bid modifiers
    ExperienceTarget experience_target = 6;

    // channel collection with bid modifiers
    ChannelTarget channel_target = 7;

    // daypart collection with bid modifiers
    DayPartTarget day_part_target = 8;

    // consumer audience collection with bid modifiers
    AudienceTarget consumer_audience_target = 9;

    // merchant audience collection with bid modifiers
    AudienceTarget merchant_audience_target = 10;

    // placement collection with bid modifiers
    PlacementTarget placement_target = 11;

    // behavior targeting ids with bid modifiers
    ConsumerMerchantInteractionTarget consumer_merchant_interaction_target = 12;

    // consumer segments target with bid modifiers
    ConsumerSegmentTarget consumer_segment_target = 13;

    // devices target with bid modifiers
    DeviceTarget device_target = 14;

    // merchant geography target with bid modifiers
    GeographyTarget merchant_geography_target = 16;

    // consumer geography target with bid modifiers
    GeographyTarget consumer_geography_target = 17;

    // consumer loyalty target with bid modifiers
    ConsumerLoyaltyTarget consumer_loyalty_target = 18;

    // merchant tag target with bid modifiers
    MerchantTagTarget merchant_tag_target = 19;

    // market state target
    MarketStateTarget market_state_target = 20;

    // consumer tokens requirement target
    ConsumerTokensRequirementTarget consumer_tokens_requirement_target = 21;
  }

  /**
   * Bid modifier object used to adjust the bid when the target is satisfied.
   */
  message BidModifier {
    // the bid modifier can be either a coefficient or a monetary value
    oneof modifier {
      // multiplier of the base bid
      google.protobuf.DoubleValue coefficient = 1;

      // override the base bid with the specified monetary value
      money.MonetaryFields price = 4;
    }
  }

  /**
   * wrapper object to hold a collection of keywords and their bid modifiers.
   * if any keyword is matched, the bid modifier will be applied and the target satisfied
   */
  message KeywordTarget {
    // collection of keywords with bid modifiers
    repeated Keyword keywords = 1;

    // type of keyword target - could be automatically generated or manually set
    Type type = 2;

    // Keyword target type - could be automatically generated or manually set
    enum Type {
      // unspecified keyword target type
      UNSPECIFIED = 0;
      // Autogenerated
      AUTOGENERATED = 1;
      // Manual
      MANUAL = 2;
    }

    // pair of keyword and bid modifier
    message Keyword {
      // keyword text
      google.protobuf.StringValue keyword = 1;

      // optional bid modifier to apply when the keyword is matched
      BidModifier bid_modifier = 2;
    }
  }

  /**
   * wrapper object to hold a collection of merchants and their bid modifiers.
   * if any merchant is matched, the bid modifier will be applied and the target satisfied
   */
  message MerchantTarget {
    // collection of merchants with bid modifiers
    repeated Merchant merchants = 1;

    // pair of merchant and bid modifier
    message Merchant {
      // merchant id
      MerchantId merchant_id = 1;

      // optional bid modifier to apply when the merchant is matched
      BidModifier bid_modifier = 2;
    }
  }

  /**
   * wrapper object to hold a collection of experiences and their bid modifiers.
   * if any experience is matched, the bid modifier will be applied and the target satisfied
   */
  message ExperienceTarget {
    // collection of experiences with bid modifiers
    repeated Experience experiences = 1;

    // pair of experience and bid modifier
    message Experience {
      // experience value
      common.Experience experience = 1;

      // optional bid modifier to apply when the experience is matched
      BidModifier bid_modifier = 2;
    }
  }

  /**
   * wrapper object to hold a collection of channels and their bid modifiers.
   * if any channel is matched, the bid modifier will be applied and the target satisfied
   */
  message ChannelTarget {
    // collection of channels with bid modifiers
    repeated Channel channels = 1;

    // pair of channel and bid modifier
    message Channel {
      // channel value
      common.Channel channel = 1;

      // optional bid modifier to apply when the channel is matched
      BidModifier bid_modifier = 2;
    }
  }

  /**
   * wrapper object to hold a collection of day parts and their bid modifiers.
   * if any day part is matched, the bid modifier will be applied and the target satisfied
   */
  message DayPartTarget {
    // collection of day parts with bid modifiers
    repeated DayPart day_parts = 1;

    // optional timezone field
    google.protobuf.StringValue timezone = 2;

    // pair of day part and bid modifier
    message DayPart {
      // day part value
      dayparts.DayPart day_part = 1;

      // optional bid modifier to apply when the day part is matched
      BidModifier bid_modifier = 2;
    }
  }

  /**
   * wrapper object to hold a collection of devices and their bid modifiers.
   * if any device is matched, the bid modifier will be applied and the target satisfied
   */
  message DeviceTarget {
    // collection of devices with bid modifiers
    repeated Device devices = 1;

    // pair of device and bid modifier
    message Device {
      // device version
      Version version = 1;

      // version object to pair the platform with the semantic version
      message Version {
        // device type
        DeviceType type = 1;

        // enum of supported device types
        enum DeviceType {
          // invalid default device type
          UNSPECIFIED = 0;

          // ios device
          IOS = 2;

          // android device
          ANDROID = 3;

          // web device
          WEB = 4;
        }

        // optional minimum semantic version of the device
        common.SemanticVersion min_version = 2;

        // optional maximum semantic version of the device
        common.SemanticVersion max_version = 3;
      }

      // optional bid modifier to apply when the device is matched
      BidModifier bid_modifier = 2;
    }
  }

  /**
   * wrapper object to hold a collection of consumer audiences and their bid modifiers.
   * if any consumer audience is matched, the bid modifier will be applied and the target satisfied
   */
  message AudienceTarget {
    // collection of consumer audiences with bid modifiers
    repeated Audience audiences = 1;

    // pair of audience and bid modifier
    message Audience {
      // audience name text
      google.protobuf.StringValue audience_name = 1;

      // optional bid modifier to apply when the audience is matched
      BidModifier bid_modifier = 2;

      // audience type
      AudienceType audience_type = 3;
    }

    // list of audience types that are supported as a named tag
    enum AudienceType {
      // invalid default audience type
      UNSPECIFIED = 0;
      // audience type for existing consumer audience
      EXISTING_CONSUMERS = 1;
      // custom audience type
      CUSTOM = 2;
      // existing store consumers audience type
      EXISTING_STORE_CONSUMERS = 3;
      // lapsed audience type
      WINBACK = 4;
      // existing business consumers audience type
      EXISTING_BUSINESS_CONSUMERS = 5;
      // existing business group consumers audience type
      EXISTING_BUSINESS_GROUP_CONSUMERS = 6;
      // fmu
      FMU = 7;
      // cx and mx dashpass
      CX_AND_MX_DASHPASS = 8;
      // dashpass users
      DASHPASS = 9;
      // cx opted in for marketing push (serving will make call to SOT service, not audience, audience_name will be empty)
      CONSUMER_OPTED_IN_FOR_MARKETING_PUSH = 10;
      // cx eligible for partnership benefit
      PARTNERSHIP_BENEFIT = 11;
    }
  }

  /**
   * wrapper object to hold a collection of merchant audiences and their bid modifiers.
   * if any merchant audience is matched, the bid modifier will be applied and the target satisfied
   */
  message PlacementTarget {
    // collection of placements with bid modifiers
    repeated Placement placements = 1;

    // whether to autogenerate placements for the target
    Type type = 2;

    // sets maximum number of interactions with the placementTarget over a given time window
    repeated FrequencyCap frequency_caps = 3;

    // Placement type - could be automatically generated or manually set
    enum Type {
      // unspecified default placement type
      UNSPECIFIED = 0;
      // Automated
      AUTOGENERATED = 1;
      // Manual
      MANUAL = 2;
    }

    // pair of placement and bid modifier
    message Placement {
      // placement type
      Type type = 1;

      // enum of supported placement types
      enum Type {
        // invalid default placement type
        UNSPECIFIED = 0;
        // Carousel
        CAROUSEL = 1;
        // Pop up
        POP_UP = 2;
        // Feed
        FEED = 3;
        // Wallet
        WALLET = 4;
        // Dine in feed
        DINE_IN_FEED = 5;
        // Store page banner
        STORE_PAGE_BANNER = 6;
        // Item page banner
        ITEM_PAGE_BANNER = 7;
        // Post checkout page banner
        POST_CHECKOUT_PAGE_BANNER = 8;
        // Offers hub banner
        OFFERS_HUB_BANNER = 9;
        // Pickup tab banner
        PICKUP_TAB_BANNER = 10;
        // Order page banner
        ORDER_PAGE_BANNER = 11;
        // Post checkout details page banner
        POST_CHECKOUT_DETAILS_PAGE_BANNER = 12;
        // Store page reward banner
        STORE_PAGE_REWARD_BANNER = 13;
        // Dasher Dash summary banner
        DX_DASH_SUMMARY_BANNER = 14;
        // Home page banner
        HOME_PAGE_BANNER = 15;
        // Store item carousel
        STORE_ITEM_CAROUSEL = 16;
        // Home page announcement
        HOME_PAGE_ANNOUNCEMENT = 17;
        // Store page announcement
        STORE_PAGE_ANNOUNCEMENT = 18;
        // Cuisine filter
        CUISINE_FILTER = 19;
        // Keyword search
        KEYWORD_SEARCH = 20;
        // Home page item carousel
        HOME_PAGE_ITEM_CAROUSEL = 21;
        // Retail category item
        RETAIL_CATEGORY_ITEM = 22;
        // Retail collection item
        RETAIL_COLLECTION_ITEM = 23;
        // Retail search item
        RETAIL_SEARCH_ITEM = 24;
        // Post checkout page announcement
        POST_CHECKOUT_PAGE_ANNOUNCEMENT = 25;
        // Sponsored products search
        SPONSORED_PRODUCTS_SEARCH = 26;
        // Sponsored products collection
        SPONSORED_PRODUCTS_COLLECTION = 27;
        // Sponsored products category L1
        SPONSORED_PRODUCTS_CATEGORY_L1 = 28;
        // Sponsored products category L2
        SPONSORED_PRODUCTS_CATEGORY_L2 = 29;
        // Carousel with campaigns
        CAROUSEL_WITH_CAMPAIGNS = 30;
        // Store page sticky footer
        STORE_PAGE_STICKY_FOOTER = 31;
        // Notification hub
        NOTIFICATION_HUB = 32;
        // Retail collection
        RETAIL_COLLECTION = 33;
        // Item detail page
        ITEM_DETAIL_PAGE = 34;
        // Store page item badge
        STORE_PAGE_ITEM_BADGE = 35;
        // Home page immersive banner
        HOME_PAGE_IMMERSIVE_BANNER = 36;
        // Home page immersive header
        HOME_PAGE_IMMERSIVE_HEADER = 37;
        // Retail page immersive header
        RETAIL_PAGE_IMMERSIVE_HEADER = 38;
        // Grocery page immersive header
        GROCERY_PAGE_IMMERSIVE_HEADER = 39;
        // Address change announcement
        ADDRESS_CHANGE_ANNOUNCEMENT = 40;
        // Store badge
        STORE_BADGE = 41;
        // Wolt keyword search
        WOLT_KEYWORD_SEARCH = 42;
        // Wolt discovery
        WOLT_DISCOVERY = 43;
        // Home feed
        HOME_FEED = 44;
        // Sponsored brand store page
        SPONSORED_BRAND_STORE_PAGE = 45;
        // Sponsored brand store category L1
        SPONSORED_BRAND_STORE_CATEGORY_L1 = 46;
        // Sponsored brand collection see all
        SPONSORED_BRAND_COLLECTION_SEE_ALL = 47;
        // Home page benefit reminder
        HOME_PAGE_BENEFIT_REMINDER = 48;
        // Store page benefit reminder
        STORE_PAGE_BENEFIT_REMINDER = 49;
        // Vertical page benefit reminder
        VERTICAL_PAGE_BENEFIT_REMINDER = 50;
        // Reward page banner
        REWARD_PAGE_BANNER = 51;
        // Post checkout bundle header
        POSTCHECKOUT_BUNDLE_HEADER = 52;
        // Cart abandonment notification
        CART_ABANDONMENT_NOTIFICATION = 53;
        // placement for Sponsored Rx Item Ad on order cart carousel on checkout page
        ORDER_CART_CAROUSEL = 54;
        // placement type for pad collection ads
        PAD_CAROUSEL = 55;
        // placement type for sponsored brand on double dash (post checkout) for you page
        SPONSORED_BRAND_DOUBLE_DASH_FOR_YOU = 56;
        // placement type for the toast message of an action
        ACTION_TOAST_MESSAGE = 57;
        // Skipped creating PLACEMENT_TYPE_CAROUSEL_OR_FEED as since it's not to be created with the type
        // Sponsored products DoubleDash single store, collection
        SPONSORED_PRODUCTS_DOUBLE_DASH_STORE_COLLECTION = 58;
        // Sponsored products DoubleDash single store, category L1
        SPONSORED_PRODUCTS_DOUBLE_DASH_STORE_CATEGORY_L1 = 59;
        // Sponsored products DoubleDash single store, category L2
        SPONSORED_PRODUCTS_DOUBLE_DASH_STORE_CATEGORY_L2 = 60;
        // Sponsored products DoubleDash store search
        SPONSORED_PRODUCTS_DOUBLE_DASH_STORE_SEARCH = 61;
        // Sponsored brand DoubleDash store page
        SPONSORED_BRAND_DOUBLE_DASH_STORE_PAGE = 62;
        // Sponsored brand DoubleDash store category L1
        SPONSORED_BRAND_DOUBLE_DASH_STORE_CATEGORY_L1 = 63;
        // Sponsored brand DoubleDash collection see all
        SPONSORED_BRAND_DOUBLE_DASH_COLLECTION_SEE_ALL = 64;
        // post onboarding page
        POST_ONBOARDING = 65;
        // checkout page banner
        CHECKOUT_PAGE_BANNER = 66;
        // double dash post checkout banner
        DOUBLE_DASH_POST_CHECKOUT_BANNER = 67;
        // pre onboarding page
        PRE_ONBOARDING = 68;
        // Wolt Cart Recommendations
        WOLT_CART_RECOMMENDATIONS = 69;
        // Wolt Store Categories
        WOLT_STORE_CATEGORIES = 70;
        // Wolt Store Home Page Carousel
        WOLT_STORE_HOME_PAGE_CAROUSEL = 71;
        // Wolt Store Grid Category
        WOLT_STORE_GRID_CATEGORY = 72;
        // Wolt Store Search
        WOLT_STORE_SEARCH = 73;
        // placement type for sponsored products in global search surface
        SPONSORED_PRODUCTS_GLOBAL_SEARCH = 76;
        // placement type for teal box which encourages Cx to switch to partnership payment method
        CHECKOUT_PAGE_PARTNERSHIP_BANNER = 77;
        // placement type for item page sticky footer
        ITEM_PAGE_STICKY_FOOTER = 78;
        // placement type for cart page banner
        CART_PAGE_BANNER = 79;
      }

      // optional bid modifier to apply when the placement is matched
      BidModifier bid_modifier = 2;

      // optional category id for category placement types
      google.protobuf.StringValue category_id = 3;

      // optional vertical id for vertical landing page
      google.protobuf.StringValue vertical_id = 4;

      // landing page type
      LandingPageType landing_page_type = 5;

      // custom metadata for the placement
      google.protobuf.Struct metadata = 12;

      // enum of supported landing page types
      enum LandingPageType {
        // invalid default landing page type
        UNSPECIFIED_PAGE = 0;
        // cross-vertical homepage
        HOMEPAGE = 1;
        // cross-vertical vertical landing page
        VERTICAL_LANDING_PAGE = 2;
        // old homepage
        DEFAULT_HOMEPAGE = 3;
        // cross-vertical landing page for grocery, alcohol, and convenience
        GROCERY_TAB = 4;
        // post-checkout bundle bottom sheet page
        POSTCHECKOUT_BOTTOM_SHEET = 5;
        // cross-vertical landing page for retail
        RETAIL_TAB = 6;
        // DD's landing page concept doesn't apply to wolt
        WOLT_DEFAULT = 7;
        // pre-checkout bundle cart page
        PRECHECKOUT_BUNDLE_CART_PAGE = 8;
        // pre-checkout bundle item page
        PRECHECKOUT_BUNDLE_ITEM_PAGE = 9;
      }
    }
  }

  /**
   * wrapper object to hold a collection of consumer merchant interactions and their bid modifiers.
   * if any consumer merchant interaction is matched, the bid modifier will be applied and the target satisfied
   */
  message ConsumerMerchantInteractionTarget {
    // collection of consumer merchant interactions with bid modifiers
    // this refers to audience-services behavior targeting ids
    repeated ConsumerMerchantInteraction interaction_id = 1;

    // pair of consumer merchant interaction and bid modifier
    message ConsumerMerchantInteraction {
      // Refers to the behavior targeting id
      google.protobuf.StringValue interaction_id = 1;
      // optional bid modifier to apply when the targeting id is matched
      BidModifier bid_modifier = 2;
    }
  }

  /**
   * wrapper object to hold a collection of consumer segments and their bid modifiers.
   * if any consumer segment is matched, the bid modifier will be applied and the target satisfied
   */
  message ConsumerSegmentTarget {
    // collection of consumer segments with bid modifiers
    repeated ConsumerSegment segments = 1;

    // pair of consumer segment and bid modifier
    message ConsumerSegment {
      // consumer segment value
      google.protobuf.StringValue id = 1;

      // optional bid modifier to apply when the consumer segment is matched
      BidModifier bid_modifier = 2;
    }
  }

  // wrapper object to hold a collection of merchant geographies and their bid modifiers.
  message GeographyTarget {
    // collection of geographies with bid modifiers
    repeated Geography geographies = 1;

    // geography object to hold the type and value of the geography
    message Geography {
      // type of geography
      Type type = 1;

      // optional bid modifier to apply when the geography is matched
      BidModifier bid_modifier = 2;

      // oneof block to support polymorphism of geography based on the geography type
      oneof geography {
        // country code
        google.protobuf.StringValue country_code = 3;

        // submarket id
        google.protobuf.StringValue submarket_id = 4;

        // administrative area level 1
        google.protobuf.StringValue administrative_area_level_1 = 5;

        // district id
        google.protobuf.StringValue district_id = 6;

        // geo fence id
        google.protobuf.StringValue geo_fence_id = 7;
      }

      // type of geography
      enum Type {
        // invalid default geography type
        UNSPECIFIED = 0;
        // country
        COUNTRY = 1;
        // submarket
        SUBMARKET = 2;
        // administrative area level 1
        ADMINISTRATIVE_AREA_LEVEL_1 = 3;
        // district
        DISTRICT = 4;
        // geofence
        GEOFENCE = 5;
      }
    }
  }

  /**
   * wrapper object to hold a collection of consumer loyalty and their bid modifiers.
   * if any consumer loyalty interaction is matched, the bid modifier will be applied and the target satisfied
   */
  message ConsumerLoyaltyTarget {
    // collection of consumer loyalty with bid modifiers
    repeated ConsumerLoyalty consumer_loyalties = 1;

    // pair of consumer loyalty data and bid modifier
    message ConsumerLoyalty {
      // loyalty program id
      google.protobuf.StringValue program_id = 1;
      // optional bid modifier to apply when the targeting id is matched
      BidModifier bid_modifier = 2;
      // loyalty user state for the program
      ProgramConsumerState program_consumer_state = 3;
      // offer id - this can be thought of as an external campaign id
      google.protobuf.StringValue offer_id = 4;
    }

    // enum of consumer loyalty state
    enum ProgramConsumerState {
      // invalid default user state
      UNSPECIFIED = 0;
      // user has not started earning rewards
      NOT_STARTED_EARNING = 1;
      // user is earning rewards
      EARNING = 2;
      // user is close to earning rewards
      CLOSE_TO_EARNING = 3;
      // user has earned rewards
      EARNED = 4;
    }
  }

  /**
   * wrapper object to hold a collection of merchant tags and their bid modifiers.
   * if any merchant tag is matched, the bid modifier will be applied and the target satisfied
   */
  message MerchantTagTarget {
    // collection of merchant tags with bid modifiers
    repeated MerchantTag merchant_tags = 1;

    // pair of merchant tag and bid modifier
    message MerchantTag {
      // merchant tag type
      Type type = 1;

      // oneof block to support polymorphism of merchant tag based on the merchant tag type
      oneof tag {
        // business vertical
        google.protobuf.StringValue business_vertical_id = 2;
        // merchant is a DashPass merchant
        google.protobuf.BoolValue is_dashpass = 3;
        // merchant fulfills their own deliveries
        google.protobuf.BoolValue fulfills_own_deliveries = 4;
      }

      // optional bid modifier to apply when the merchant tag is matched
      BidModifier bid_modifier = 5;

      // enum of supported merchant tags
      enum Type {
        // invalid default merchant tag type
        UNSPECIFIED = 0;
        // indicates usage of business_vertical_id in the tag block
        BUSINESS_VERTICAL = 1;
        // indicates usage of is_dashpass in the tag block
        IS_DASHPASS = 2;
        // indicates usage of fulfills_own_deliveries in the tag block
        FULFILLS_OWN_DELIVERIES = 3;
      }
    }
  }

  /**
   * wrapper object to hold a collection of market states.
   * if any market state is matched, the target will be satisfied
   */
  message MarketStateTarget {
    // collection of market state with bid modifiers
    repeated MarketState market_states = 1;

    // market state
    message MarketState {
      // market state type
      Type type = 1;

      // enum of supported merchant tags
      enum Type {
        // invalid default market state type
        UNSPECIFIED = 0;
        // normal market state
        NORMAL = 1;
        // only pickup is available
        PICKUP_ONLY = 2;
        // complete shutdown
        SHUTDOWN = 3;
      }
    }
  }

  /**
   * wrapper object to hold a collection of consumer tokens requirements.
   */
  message ConsumerTokensRequirementTarget {
    // collection of consumer tokens requirement with bid modifiers
    repeated ConsumerTokensRequirement consumer_tokens_requirements = 1;

    // consumer tokens requirement
    message ConsumerTokensRequirement {
      // required token type
      google.protobuf.StringValue token_benefit_type = 1;

      // required token quantity
      google.protobuf.Int32Value quantity = 2;

      // optional bid modifier to apply when the consumer tokens requirement is satisfied
      BidModifier bid_modifier = 3;

      // token comparison operation
      TokenOperation operation = 4;

      // enum of supported operator types
      enum TokenOperation {
        // invalid default operator type
        UNSPECIFIED = 0;
        // equal
        EQUAL = 1;
      }
    }
  }
}
