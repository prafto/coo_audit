syntax = "proto3";

package campaign_service.v1;

import "campaign_service/ad.proto";
import "campaign_service/ad_group.proto";
import "campaign_service/campaign.proto";
import "campaign_service/cdc.proto";
import "campaign_service/common.proto";
import "campaign_service/common/deactivation_info.proto";
import "campaign_service/target.proto";
import "common/common.proto";
import "common/service_client_config.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.campaign";

// This is an example service for using Asgard server library in a Guice environment.
service DebugService {
  // Example Hermes client config. The options not listed here use Hermes default.
  // The following applies for all RPCs in the service, if not overridden on individual RPCs.

  // Timeout after 700 milliseconds.
  option (service_client.client_config).response_attempt_timeout_millis = 700;
  // Make a total 4 attempts (initial + three retries).
  option (service_client.client_config).retry_config.max_attempts = 4;
  // Add RESOURCE_EXHAUSTED to the set of retriable codes.
  option (service_client.client_config).retry_config.do_retry_grpc_code = 8;
  // Break the circuit if the error rate exceeds 80%.
  option (service_client.client_config).circuit_breaker_config.failure_rate_threshold = 0.8;
  // Ignore NOT_FOUND from circuit breaker error rate calculation.
  option (service_client.client_config).circuit_breaker_config.do_ignore_grpc_code = 5;

  /**
   * Roll back transaction, set the previous version of the entity to active and delete the lock.
   */
  rpc RollBackTransactionAndDeleteLock(RollBackTransactionAndDeleteLockRequest) returns (RollBackTransactionAndDeleteLockResponse) {}

  /**
   * Republish the CDC message for the campaign with the id provided.
   *
   * This will only work after the campaign has been created or updated and has been assigned an id.
   * Both newCampaign and prevCampaign fields in the message will be populated with the id's CURRENT campaign for both.
   * This means that these two fields will be the same.
   */
  rpc RepublishCampaignCDC(RepublishCampaignCDCRequest) returns (RepublishCampaignCDCResponse) {}
}

// Request for RollBackTransactionAndDeleteLock
message RollBackTransactionAndDeleteLockRequest {
  // transaction id to delete the lock for
  string transaction_id = 1;
}

// Response for RollBackTransactionAndDeleteLock
message RollBackTransactionAndDeleteLockResponse {}

// Request for RepublishCampaignCDC
message RepublishCampaignCDCRequest {
  // id of the campaign to republish
  string campaign_id = 1;
}

// Response for RepublishCampaignCDC
message RepublishCampaignCDCResponse {}
