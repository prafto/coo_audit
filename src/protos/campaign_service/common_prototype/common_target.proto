syntax = "proto3";

package campaign_service.common_prototype.v1;

import "campaign_service/common.proto";
import "campaign_service/common_prototype/common_incentive.proto";
import "common/common.proto";
import "common/dayparts.proto";
import "common/money.proto";
import "google/protobuf/wrappers.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.campaign";

/**
 * Target object used for filtering and bid adjustment.
 */
message Targets {
  // whether this target is used as a filter.
  // If true, the target must be satisfied to be served to the user.
  // If false, the target is only used to adjust the bid when the target is satisfied.
  google.protobuf.BoolValue as_filter = 1;

  // whether this target is negated.
  // If true, the configuration must not be met for the target to be satisfied.
  google.protobuf.BoolValue is_negated = 2;

  // the type of target
  Type type = 3;

  // enum of target types to support polymorphism
  enum Type {
    // invalid default target type
    TYPE_UNSPECIFIED = 0;
    // indicates usage of keyword_target in the target block
    TYPE_KEYWORD = 1;

    // indicates usage of merchant_target in the target block
    TYPE_MERCHANT = 2;

    // indicates usage of experience_target in the target block
    TYPE_EXPERIENCE = 3;

    // indicates usage of channel_target in the target block
    TYPE_CHANNEL = 4;

    // indicates usage of day_part_target in the target block
    TYPE_DAY_PART = 5;

    // indicates usage of device_target in the target block
    TYPE_DEVICE = 6;

    // indicates usage of consumer_audience_target in the target block
    TYPE_CONSUMER_AUDIENCE = 7;

    // indicates usage of merchant_audience_target in the target block
    TYPE_MERCHANT_AUDIENCE = 8;

    // indicates usage of placement_target in the target block
    TYPE_PLACEMENT = 9;

    // indicates usage of consumer_merchant_interaction_target in the target block
    TYPE_CONSUMER_MERCHANT_INTERACTION = 10;

    // indicates usage of consumer_segment_target in the target block
    TYPE_CONSUMER_SEGMENT = 11;
  }

  // oneof block to support polymorphism of target based on the target type
  oneof target {
    // keyword collection with bid modifiers
    KeywordTarget keyword_target = 4;

    // merchant collection with bid modifiers
    MerchantTarget merchant_target = 5;

    // experience collection with bid modifiers
    ExperienceTarget experience_target = 6;

    // channel collection with bid modifiers
    ChannelTarget channel_target = 7;

    // device collection with bid modifiers
    DayPartTarget day_part_target = 8;

    // device collection with bid modifiers
    AudienceTarget consumer_audience_target = 9;

    // device collection with bid modifiers
    AudienceTarget merchant_audience_target = 10;

    // device collection with bid modifiers
    PlacementTarget placement_target = 11;

    // behavior targeting ids with bid modifiers
    ConsumerMerchantInteractionTarget consumer_merchant_interaction_target = 12;

    // consumer segments with bid modifiers
    ConsumerSegmentTarget consumer_segment_target = 13;
  }

  /**
   * Bid modifier object used to adjust the bid when the target is satisfied.
   */
  message BidModifier {
    // the bid modifier can be either a coefficient or a monetary value
    oneof modifier {
      // multiplier of the base bid
      campaign_service.common_prototype.v1.PercentValue coefficient = 1;

      // override the base bid with the specified monetary value
      money.MonetaryFields price = 4;
    }
  }

  /**
   * wrapper object to hold a collection of keywords and their bid modifiers.
   * if any keyword is matched, the bid modifier will be applied and the target satisfied
   */
  message KeywordTarget {
    // collection of keywords with bid modifiers
    repeated Keyword keywords = 1;

    // type of keyword target - could be automatically generated or manually set
    Type type = 2;

    // Keyword target type - could be automatically generated or manually set
    enum Type {
      // unspecified keyword target type
      TYPE_UNSPECIFIED = 0;
      // Autogenerated
      TYPE_AUTOGENERATED = 1;
      // Manual
      TYPE_MANUAL = 2;
    }

    // pair of keyword and bid modifier
    message Keyword {
      // keyword text
      google.protobuf.StringValue keyword = 1;

      // optional bid modifier to apply when the keyword is matched
      BidModifier bid_modifier = 2;
    }
  }

  /**
   * wrapper object to hold a collection of merchants and their bid modifiers.
   * if any merchant is matched, the bid modifier will be applied and the target satisfied
   */
  message MerchantTarget {
    // collection of merchants with bid modifiers
    repeated Merchant merchants = 1;

    // pair of merchant and bid modifier
    message Merchant {
      // merchant id
      campaign_service.v1.MerchantId merchant_id = 1;

      // optional bid modifier to apply when the merchant is matched
      BidModifier bid_modifier = 2;
    }
  }

  /**
   * wrapper object to hold a collection of experiences and their bid modifiers.
   * if any experience is matched, the bid modifier will be applied and the target satisfied
   */
  message ExperienceTarget {
    // collection of experiences with bid modifiers
    repeated Experience experiences = 1;

    // pair of experience and bid modifier
    message Experience {
      // experience value
      common.Experience experience = 1;

      // optional bid modifier to apply when the experience is matched
      BidModifier bid_modifier = 2;
    }
  }

  /**
   * wrapper object to hold a collection of channels and their bid modifiers.
   * if any channel is matched, the bid modifier will be applied and the target satisfied
   */
  message ChannelTarget {
    // collection of channels with bid modifiers
    repeated Channel channels = 1;

    // pair of channel and bid modifier
    message Channel {
      // channel value
      common.Channel channel = 1;

      // optional bid modifier to apply when the channel is matched
      BidModifier bid_modifier = 2;
    }
  }

  /**
   * wrapper object to hold a collection of day parts and their bid modifiers.
   * if any day part is matched, the bid modifier will be applied and the target satisfied
   */
  message DayPartTarget {
    // collection of day parts with bid modifiers
    repeated DayPart day_parts = 1;

    // pair of day part and bid modifier
    message DayPart {
      // day part value
      dayparts.DayPart day_part = 1;

      // optional bid modifier to apply when the day part is matched
      BidModifier bid_modifier = 2;
    }
  }

  /**
   * wrapper object to hold a collection of devices and their bid modifiers.
   * if any device is matched, the bid modifier will be applied and the target satisfied
   */
  message DeviceTarget {
    // collection of devices with bid modifiers
    repeated Device devices = 1;

    // pair of device and bid modifier
    message Device {
      // device version
      Version version = 1;

      // version object to pair the platform with the semantic version
      message Version {
        // device type
        DeviceType type = 1;

        // enum of supported device types
        enum DeviceType {
          // invalid default device type
          DEVICE_TYPE_UNSPECIFIED = 0;

          // ios device
          DEVICE_TYPE_IOS = 2;

          // android device
          DEVICE_TYPE_ANDROID = 3;

          // web device
          DEVICE_TYPE_WEB = 4;
        }

        // optional minimum semantic version of the device
        common.SemanticVersion min_version = 2;

        // optional maximum semantic version of the device
        common.SemanticVersion max_version = 3;
      }

      // optional bid modifier to apply when the device is matched
      BidModifier bid_modifier = 2;
    }
  }

  /**
   * wrapper object to hold a collection of consumer audiences and their bid modifiers.
   * if any consumer audience is matched, the bid modifier will be applied and the target satisfied
   */
  message AudienceTarget {
    // collection of consumer audiences with bid modifiers
    repeated Audience audiences = 1;

    // pair of audience and bid modifier
    message Audience {
      // audience name text
      google.protobuf.StringValue audience_name = 1;

      // optional bid modifier to apply when the audience is matched
      BidModifier bid_modifier = 2;

      // audience type
      AudienceType audience_type = 3;
    }

    // list of audience types that are supported as a named tag
    enum AudienceType {
      // invalid default audience type
      AUDIENCE_TYPE_UNSPECIFIED = 0;
      // audience type for existing consumer audience
      AUDIENCE_TYPE_EXISTING_CONSUMERS = 1;
      // custom audience type
      AUDIENCE_TYPE_CUSTOM = 2;
      // existing store consumers audience type
      AUDIENCE_TYPE_EXISTING_STORE_CONSUMERS = 3;
      // lapsed audience type
      AUDIENCE_TYPE_WINBACK = 4;
      // existing business consumers audience type
      AUDIENCE_TYPE_EXISTING_BUSINESS_CONSUMERS = 5;
      // existing business group consumers audience type
      AUDIENCE_TYPE_EXISTING_BUSINESS_GROUP_CONSUMERS = 6;
      // fmu
      AUDIENCE_TYPE_FMU = 7;
      // cx and mx dashpass
      AUDIENCE_TYPE_CX_AND_MX_DASHPASS = 8;
      // dashpass users
      AUDIENCE_TYPE_DASHPASS = 9;
    }
  }

  /**
   * wrapper object to hold a collection of merchant audiences and their bid modifiers.
   * if any merchant audience is matched, the bid modifier will be applied and the target satisfied
   */
  message PlacementTarget {
    // collection of placements with bid modifiers
    repeated Placement placements = 1;

    // whether to autogenerate placements for the target
    Type type = 2;

    // Placement type - could be automatically generated or manually set
    enum Type {
      // unspecified default placement type
      TYPE_UNSPECIFIED = 0;
      // Automated
      TYPE_AUTOGENERATED = 1;
      // Manual
      TYPE_MANUAL = 2;
    }

    // pair of placement and bid modifier
    message Placement {
      // placement type
      Type type = 1;

      // enum of supported placement types
      enum Type {
        // invalid default placement type
        TYPE_UNSPECIFIED = 0;
        // Carousel
        TYPE_CAROUSEL = 1;
        // Pop up
        TYPE_POP_UP = 2;
        // Feed
        TYPE_FEED = 3;
        // Wallet
        TYPE_WALLET = 4;
        // Dine in feed
        TYPE_DINE_IN_FEED = 5;
        // Store page banner
        TYPE_STORE_PAGE_BANNER = 6;
        // Item page banner
        TYPE_ITEM_PAGE_BANNER = 7;
        // Post checkout page banner
        TYPE_POST_CHECKOUT_PAGE_BANNER = 8;
        // Offers hub banner
        TYPE_OFFERS_HUB_BANNER = 9;
        // Pickup tab banner
        TYPE_PICKUP_TAB_BANNER = 10;
        // Order page banner
        TYPE_ORDER_PAGE_BANNER = 11;
        // Post checkout details page banner
        TYPE_POST_CHECKOUT_DETAILS_PAGE_BANNER = 12;
        // Store page reward banner
        TYPE_STORE_PAGE_REWARD_BANNER = 13;
        // Dasher Dash summary banner
        TYPE_DX_DASH_SUMMARY_BANNER = 14;
        // Home page banner
        TYPE_HOME_PAGE_BANNER = 15;
        // Store item carousel
        TYPE_STORE_ITEM_CAROUSEL = 16;
        // Home page announcement
        TYPE_HOME_PAGE_ANNOUNCEMENT = 17;
        // Store page announcement
        TYPE_STORE_PAGE_ANNOUNCEMENT = 18;
        // Cuisine filter
        TYPE_CUISINE_FILTER = 19;
        // Keyword search
        TYPE_KEYWORD_SEARCH = 20;
        // Home page item carousel
        TYPE_HOME_PAGE_ITEM_CAROUSEL = 21;
        // Retail category item
        TYPE_RETAIL_CATEGORY_ITEM = 22;
        // Retail collection item
        TYPE_RETAIL_COLLECTION_ITEM = 23;
        // Retail search item
        TYPE_RETAIL_SEARCH_ITEM = 24;
        // Post checkout page announcement
        TYPE_POST_CHECKOUT_PAGE_ANNOUNCEMENT = 25;
        // Sponsored products search
        TYPE_SPONSORED_PRODUCTS_SEARCH = 26;
        // Sponsored products collection
        TYPE_SPONSORED_PRODUCTS_COLLECTION = 27;
        // Sponsored products category L1
        TYPE_SPONSORED_PRODUCTS_CATEGORY_L1 = 28;
        // Sponsored products category L2
        TYPE_SPONSORED_PRODUCTS_CATEGORY_L2 = 29;
        // Carousel with campaigns
        TYPE_CAROUSEL_WITH_CAMPAIGNS = 30;
        // Store page sticky footer
        TYPE_STORE_PAGE_STICKY_FOOTER = 31;
        // Notification hub
        TYPE_NOTIFICATION_HUB = 32;
        // Retail collection
        TYPE_RETAIL_COLLECTION = 33;
        // Item detail page
        TYPE_ITEM_DETAIL_PAGE = 34;
        // Store page item badge
        TYPE_STORE_PAGE_ITEM_BADGE = 35;
        // Home page immersive banner
        TYPE_HOME_PAGE_IMMERSIVE_BANNER = 36;
        // Home page immersive header
        TYPE_HOME_PAGE_IMMERSIVE_HEADER = 37;
        // Retail page immersive header
        TYPE_RETAIL_PAGE_IMMERSIVE_HEADER = 38;
        // Grocery page immersive header
        TYPE_GROCERY_PAGE_IMMERSIVE_HEADER = 39;
        // Address change announcement
        TYPE_ADDRESS_CHANGE_ANNOUNCEMENT = 40;
        // Store badge
        TYPE_STORE_BADGE = 41;
        // Wolt keyword search
        TYPE_WOLT_KEYWORD_SEARCH = 42;
        // Wolt discovery
        TYPE_WOLT_DISCOVERY = 43;
        // Home feed
        TYPE_HOME_FEED = 44;
        // Sponsored brand store page
        TYPE_SPONSORED_BRAND_STORE_PAGE = 45;
        // Sponsored brand store category L1
        TYPE_SPONSORED_BRAND_STORE_CATEGORY_L1 = 46;
        // Sponsored brand collection see all
        TYPE_SPONSORED_BRAND_COLLECTION_SEE_ALL = 47;
        // Home page benefit reminder
        TYPE_HOME_PAGE_BENEFIT_REMINDER = 48;
        // Store page benefit reminder
        TYPE_STORE_PAGE_BENEFIT_REMINDER = 49;
        // Vertical page benefit reminder
        TYPE_VERTICAL_PAGE_BENEFIT_REMINDER = 50;
        // Reward page banner
        TYPE_REWARD_PAGE_BANNER = 51;
        // Post checkout bundle header
        TYPE_POSTCHECKOUT_BUNDLE_HEADER = 52;
        // Cart abandonment notification
        TYPE_CART_ABANDONMENT_NOTIFICATION = 53;
        // placement for Sponsored Rx Item Ad on order cart carousel on checkout page
        TYPE_ORDER_CART_CAROUSEL = 54;
        // placement type for pad collection ads
        TYPE_PAD_CAROUSEL = 55;
        // placement type for the toast message of an action
        TYPE_ACTION_TOAST_MESSAGE = 56;
        // Skipped creating PLACEMENT_TYPE_CAROUSEL_OR_FEED as since it's not to be created with the type
        // placement type for Sponsored Products DoubleDash Store Collection
        TYPE_SPONSORED_PRODUCTS_DOUBLE_DASH_STORE_COLLECTION = 57;
        // placement type for Sponsored Products DoubleDash Store Category L1
        TYPE_SPONSORED_PRODUCTS_DOUBLE_DASH_STORE_CATEGORY_L1 = 58;
        // placement type for Sponsored Products DoubleDash Store Category L2
        TYPE_SPONSORED_PRODUCTS_DOUBLE_DASH_STORE_CATEGORY_L2 = 59;
        // placement type for Sponsored Products DoubleDash Store Search
        TYPE_SPONSORED_PRODUCTS_DOUBLE_DASH_STORE_SEARCH = 60;
        // placement type for Sponsored Brand DoubleDash Store Page
        TYPE_SPONSORED_BRAND_DOUBLE_DASH_STORE_PAGE = 61;
        // placement type for Sponsored Brand DoubleDash Store Category L1
        TYPE_SPONSORED_BRAND_DOUBLE_DASH_STORE_CATEGORY_L1 = 62;
        // placement type for Sponsored Brand DoubleDash Store Collection See All
        TYPE_SPONSORED_BRAND_DOUBLE_DASH_COLLECTION_SEE_ALL = 63;
      }

      // optional bid modifier to apply when the placement is matched
      BidModifier bid_modifier = 2;
    }
  }

  /**
   * wrapper object to hold a collection of consumer merchant interactions and their bid modifiers.
   * if any consumer merchant interaction is matched, the bid modifier will be applied and the target satisfied
   */
  message ConsumerMerchantInteractionTarget {
    // collection of consumer merchant interactions with bid modifiers
    // this refers to audience-services behavior targeting ids
    repeated ConsumerMerchantInteraction interaction_id = 1;

    // pair of consumer merchant interaction and bid modifier
    message ConsumerMerchantInteraction {
      // Refers to the behavior targeting id
      google.protobuf.StringValue interaction_id = 1;
      // optional bid modifier to apply when the targeting id is matched
      BidModifier bid_modifier = 2;
    }
  }

  /**
   * wrapper object to hold a collection of consumer segments and their bid modifiers.
   * if any consumer segment is matched, the bid modifier will be applied and the target satisfied
   */
  message ConsumerSegmentTarget {
    // collection of consumer segments with bid modifiers
    repeated ConsumerSegment segments = 1;

    // pair of consumer segment and bid modifier
    message ConsumerSegment {
      // consumer segment value
      google.protobuf.StringValue id = 1;

      // optional bid modifier to apply when the consumer segment is matched
      BidModifier bid_modifier = 2;
    }
  }
}
