syntax = "proto3";

// buf:lint:ignore DIRECTORY_SAME_PACKAGE
package dasher_comms_service.v1;

import "dasher_comms_service/common.proto";
import "doordash.api/annotations.proto";
import "doordash.api/client.proto";
import "doordash.api/field_validate.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_outer_classname = "InboxServiceProto";
option java_package = "com.doordash.rpc.dasher_comms_service";

//InboxService is in charge of surfacing inbox details and supported pages to the dasher
service InboxService {
  option (doordash.api.service) = {
    name: "dasher_comms_service"
    url: "dasher-comms-service-web.service.prod.ddsd"
    port: 50051
    name_spaces: ["dasher_comms_service"]
    api_key_name: "DASHER_COMMS_SERVICE_API_KEY"
    owner: {
      id: "dasher-comms-platform-team"
      name: "dasher_comms_service"
      slack_channel: "#eng-dasher-comms-service-notifications"
      email_alias: "eng-dasher-comms-platform@doordash.com"
    }
    target_products: [DX] /* Full list https://github.com/doordash/services-protobuf/blob/master/protos/doordash.api/common.proto */
  };

  //Get inbox details
  rpc GetInbox(GetInboxRequest) returns (GetInboxResponse) {
    option (google.api.http) = {get: "/dasher_comms_service/v1/in_app_inbox"};
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: PROD
      authorization: [DX_USER]
    };
  }

  //Get templated payload for display
  rpc GetTemplateScreen(GetTemplateScreenRequest) returns (GetTemplateScreenResponse) {
    option (google.api.http) = {get: "/dasher_comms_service/v1/in_app_screen"};
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: PROD
      authorization: [DX_USER]
    };
  }
}

// Int32Value
message Int32Value {
  // int32 value
  int32 value = 1;
}

// request payload to get list of inbox items
message GetInboxRequest {
  // dasher id for whom the inbox is being fetched
  string dasher_id = 1 [(doordash.api.validate.rules).missing_value = {action: FAIL}];

  // offset
  Int32Value start_index = 2 [(doordash.api.client.nullable) = true];

  // chunk_size
  Int32Value chunk_size = 3 [(doordash.api.client.nullable) = true];
}

// response payload of inbox item details
message GetInboxResponse {
  // list of inbox items
  repeated InboxDetails inbox_details = 1;
}

// Details for a single notification in the inbox
message InboxDetails {
  // title of the notification
  string title = 1 [(doordash.api.validate.rules).missing_value = {action: FAIL}];

  // description of the notification
  string description = 2 [(doordash.api.validate.rules).missing_value = {action: FAIL}];

  // footer of the notification
  string footer = 3 [(doordash.api.validate.rules).missing_value = {action: FAIL}];

  // icon of the notification
  string icon = 4 [(doordash.api.validate.rules).missing_value = {action: FAIL}];

  // notification id
  string notification_id = 5 [(doordash.api.validate.rules).missing_value = {action: FAIL}];

  // screen to navigate to when notification is clicked
  string screen_id = 6 [(doordash.api.validate.rules).missing_value = {action: FAIL}];

  // whether the message has been clicked
  bool is_read = 7 [deprecated = true];

  // contract violation webview url
  string content_url = 8;

  //config name for templated screens
  string config_name = 9;

  // notification status
  dasher_comms_service.v2.NotificationStatus notification_status = 10 [(doordash.api.validate.rules).missing_value = {action: FAIL}];

  // additional params to pass to the redirecting screen_id, optional field
  map<string, string> screen_id_params = 11;
}

// request payload of template screen display
message GetTemplateScreenRequest {
  // dasher id for whom the template screen is being fetched
  string dasher_id = 1;
  // notification id
  string notification_id = 2;
  // config name for templated screens
  string config_name = 3;
}

// response payload of template screen display
message GetTemplateScreenResponse {
  // lego response for display
  string body = 1;
}
