syntax = "proto3";

package drive_order_service.v1;

import "common/order.proto";
import "common/service_client_config.proto";
import "drive_order_service/common.proto";
import "drive_order_service/drive_order.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option go_package = "drive_order_service";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.drive_order_service";

// ParcelService exposes endpoints to manage a Parcel's extension data from drive order
service DriveParcelService {
  option (service_client.client_config).service_name = "drive-order-service";
  option (service_client.client_config).service_app = "web";
  option (service_client.client_config).response_attempt_timeout_millis = 1000;
  option (service_client.client_config).circuit_breaker_config.failure_rate_threshold = 1.0;

  // Create a Drive Parcel Midmile Info Entry in DB
  rpc CreateDriveParcelMidmileInfoEntry(CreateDriveParcelMidmileInfoEntryRequest) returns (CreateDriveParcelMidmileInfoEntryResponse);

  // Get a Drive Parcel Midmile Info Entry by Primary Key from DB
  rpc GetDriveParcelMidmileInfoEntry(GetDriveParcelMidmileInfoEntryRequest) returns (GetDriveParcelMidmileInfoEntryResponse);

  // Get a Drive Parcel Midmile Provider Tracking Id
  rpc GetMidmileProviderTrackingIdSequenceNum(GetMidmileProviderTrackingIdSequenceNumRequest) returns (GetMidmileProviderTrackingIdSequenceNumResponse);

  // Update the Status of the Drive Parcel Midmile Info Entry by Drive Order Id
  rpc UpdateDriveParcelMidmileInfoStatus(UpdateDriveParcelMidmileInfoStatusRequest) returns (UpdateDriveParcelMidmileInfoStatusResponse);

  // Update the Status of the Drive Parcel Midmile Info Entry by Tracking Id
  rpc UpdateDriveParcelMidmileInfoStatusByTrackingId(UpdateDriveParcelMidmileInfoStatusByTrackingIdRequest) returns (UpdateDriveParcelMidmileInfoStatusByTrackingIdResponse);

  // Get a parcel order by barcode
  rpc GetParcelOrderByBarcode(GetParcelOrderByBarcodeRequest) returns (GetParcelOrderByBarcodeResponse);

  // Get a Drive Parcel Midmile Info Entry by Primary Key from DB by trackingId
  rpc GetDriveParcelMidmileInfoEntryByTrackingId(GetDriveParcelMidmileInfoEntryByTrackingIdRequest) returns (GetDriveParcelMidmileInfoEntryByTrackingIdResponse);
}

// Contains information needed to GetParcelOrderByBarcodeRequest
message GetParcelOrderByBarcodeRequest {
  // barcode
  string barcode = 1;
}

// Response of GetParcelOrderByBarcode
message GetParcelOrderByBarcodeResponse {
  // Drive Order Entry in DB
  DriveOrderEntry drive_order_entry = 1;
}

// Contains information needed to create a new Drive Parcel Midmile Info Entry in DB
message CreateDriveParcelMidmileInfoEntryRequest {
  // Drive Parcel Midmile Info Entry in DB
  DriveParcelMidmileInfoEntry drive_parcel_midmile_info_entry = 1;
}

// Contains the result of creating a new Drive Parcel Midmile Info Entry in DB
message CreateDriveParcelMidmileInfoEntryResponse {
  // Drive Parcel Midmile Info Entry in DB
  DriveParcelMidmileInfoEntry drive_parcel_midmile_info_entry = 1;
}

// Contains drive order id needed to get the Drive Parcel Midmile Info Entry from DB
message GetDriveParcelMidmileInfoEntryRequest {
  // Drive Order ID
  int64 drive_order_id = 1;
}

// Contains the corresponding Drive Order Entry from DB
message GetDriveParcelMidmileInfoEntryResponse {
  // Drive Parcel Midmile Info Entry in DB
  DriveParcelMidmileInfoEntry drive_parcel_midmile_info_entry = 1;
  // Mapped Order Status of the order
  order.OrderStatus order_status = 2;
}

// Contains drive order id needed to get the Drive Parcel Midmile Info Entry from DB
message GetDriveParcelMidmileInfoEntryByTrackingIdRequest {
  // tracking number
  string tracking_id = 1;
}

// Contains the corresponding Drive Order Entry from DB
message GetDriveParcelMidmileInfoEntryByTrackingIdResponse {
  // Drive Parcel Midmile Info Entry in DB
  DriveParcelMidmileInfoEntry drive_parcel_midmile_info_entry = 1;
  // Mapped Order Status of the order
  order.OrderStatus order_status = 2;
}

// Contains the midmile provider name to fetch the tracking ID
message GetMidmileProviderTrackingIdSequenceNumRequest {
  // Midmile Provider
  MidmileProvider midmile_provider = 1;
}

// Contains tracking ID of a midmile provider
message GetMidmileProviderTrackingIdSequenceNumResponse {
  // The sequence number used to concatenate a tracking Id
  string tracking_id_sequence_num = 1;
}

// Contains info needed to update the status of the drive parcel midmile info based on drive order id
message UpdateDriveParcelMidmileInfoStatusRequest {
  // Drive Order ID
  int64 drive_order_id = 1;
  // Parcel Status
  string parcel_status = 2;
  // Parcel Status Details
  google.protobuf.StringValue parcel_status_details = 3;
  // Parcel Status Timestamp
  google.protobuf.Timestamp status_timestamp = 4;
  // location of the event
  DriveParcelMidmileInfoEntry.ParcelLocation parcel_location = 5;
}

// Contains info needed to update the status of the drive parcel midmile info based on tracking id
message UpdateDriveParcelMidmileInfoStatusByTrackingIdRequest {
  // Tracking Id
  string tracking_id = 1;
  // Midmile Provider
  MidmileProvider midmile_provider = 2;
  // Parcel Status
  string parcel_status = 3;
  // Parcel Status Details
  google.protobuf.StringValue parcel_status_details = 4;
  // Parcel Status Timestamp
  google.protobuf.Timestamp status_timestamp = 5;
  // location of the event
  DriveParcelMidmileInfoEntry.ParcelLocation parcel_location = 6;
  // pallet id of the package
  google.protobuf.StringValue pallet_id = 7;
}

// Contains the result of the update status
message UpdateDriveParcelMidmileInfoStatusByTrackingIdResponse {
  // Drive Parcel Midmile Info Entry in DB
  DriveParcelMidmileInfoEntry drive_parcel_midmile_info_entry = 1;
}

// Contains the result of the update status
message UpdateDriveParcelMidmileInfoStatusResponse {
  // Drive Parcel Midmile Info Entry in DB
  DriveParcelMidmileInfoEntry drive_parcel_midmile_info_entry = 1;
}

// Midmile Provider
enum MidmileProvider {
  // The default status that gets applied if this is not set. This is not expected to be used.
  MIDMILE_PROVIDER_UNSPECIFIED = 0;
  // Pandion
  MIDMILE_PROVIDER_PANDION = 1;
  // Maergo
  MIDMILE_PROVIDER_MAERGO = 2;
  // CH Robinson
  MIDMILE_PROVIDER_CH_ROBINSON = 3;
  // SmartKargo
  MIDMILE_PROVIDER_SMARTKARGO = 4;
  // Warp
  MIDMILE_PROVIDER_WARP = 5;
  // Staples
  MIDMILE_PROVIDER_STAPLES = 6;
}

// Drive Parcel Midmile Info Entry in DB
message DriveParcelMidmileInfoEntry {
  // Location Date for a parcel
  message ParcelLocation {
    // longitude position of the from where the status was emitted
    google.protobuf.DoubleValue longitude = 1;
    // latitude position of the from where the status was emitted
    google.protobuf.DoubleValue latitude = 2;
    // city from where the status was emitted
    google.protobuf.StringValue city_name = 3;
    // state from where the status was emitted
    google.protobuf.StringValue state = 4;
    // holds zipcode from where the status was emitted
    google.protobuf.StringValue postal_code = 5;
    // timezone from where the status was emitted
    google.protobuf.StringValue timezone = 6;
  }
  // Parcel Status Event
  message ParcelStatus {
    // Parcel Status
    string parcel_status = 1;
    // Status Timestamp from Webhooks Events Ingestion
    google.protobuf.Timestamp status_timestamp = 2;
    // location from where the event was emitted
    ParcelLocation location = 3;
    // Mapped Order Status of the order
    order.OrderStatus order_status = 4;
  }
  // Drive Order ID
  int64 drive_order_id = 1;
  // Origin Facility Id
  string origin_facility_id = 2;
  // Tracking Id
  google.protobuf.StringValue tracking_id = 3;
  // Parcel Status
  string parcel_status = 4;
  // Parcel Status Details
  google.protobuf.StringValue parcel_status_details = 5;
  // Midmile Provider
  MidmileProvider midmile_provider = 6;
  // Status Timestamp from Webhooks Events Ingestion
  google.protobuf.Timestamp status_timestamp = 7;
  // location from where the event was emitted
  ParcelLocation parcel_location = 8;
  // Event history list
  repeated ParcelStatus event_history = 9;
}
