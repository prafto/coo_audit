syntax = "proto3";

package drive_order_service.v1;

import "common/service_client_config.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option go_package = "drive_order_service";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.drive_order_service";

// DriveQuoteService exposes endpoints to manage a DriveQuote
service DriveQuoteService {
  option (service_client.client_config).service_name = "drive-order-service";
  option (service_client.client_config).service_app = "web";
  option (service_client.client_config).response_attempt_timeout_millis = 1000;
  option (service_client.client_config).circuit_breaker_config.failure_rate_threshold = 1.0;

  // Get a DriveQuoteEntry by Quote ID from DB
  rpc GetDriveQuoteEntry(GetDriveQuoteEntryRequest) returns (GetDriveQuoteEntryResponse);
  // Create a DriveQuoteEntry in DB
  rpc CreateDriveQuoteEntry(CreateDriveQuoteEntryRequest) returns (CreateDriveQuoteEntryResponse);
}

// Contains information needed to create a DriveQuoteEntry in DB
message CreateDriveQuoteEntryRequest {
  reserved 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11;
  reserved "delivery_time", "pickup_time", "delivery_fee", "order_value", "currency", "estimate_id", "expires_at", "has_quoted_pickup_time", "delivery_fee_subtotal", "delivery_fee_tax", "fee_info";
  // DriveQuoteEntry to put into DB
  DriveQuoteEntry drive_quote_entry = 12;
}

// Contains the result of creating a new drive quote entry in DB
message CreateDriveQuoteEntryResponse {
  // DriveQuoteEntry in DB
  DriveQuoteEntry drive_quote_entry = 1;
}

// Contains Quote ID needed to get the DriveQuoteEntry from DB
message GetDriveQuoteEntryRequest {
  // Quote ID
  string quote_id = 1;
}

// Contains the corresponding DriveQuoteEntry from DB
message GetDriveQuoteEntryResponse {
  // DriveQuoteEntry in DB
  DriveQuoteEntry drive_quote_entry = 1;
}

// DriveQuoteEntry in DB
message DriveQuoteEntry {
  reserved 4, 5;
  reserved "delivery_fee", "order_value";
  // Quote ID (UUID)
  string quote_id = 1;
  // Delivery Time
  google.protobuf.Timestamp delivery_time = 2;
  // Pickup Time
  google.protobuf.Timestamp pickup_time = 3;
  // Currency
  string currency = 6;
  // Estimated ID
  google.protobuf.StringValue estimate_id = 7;
  // Expired At
  google.protobuf.Timestamp expires_at = 8;
  // Has Quoted Pickup Time
  bool has_quoted_pickup_time = 9;
  // Delivery Fee Subtotal
  google.protobuf.Int64Value delivery_fee_subtotal = 10;
  // Delivery fee tax
  google.protobuf.Int64Value delivery_fee_tax = 11;
  // Fee Info
  FeeInfo fee_info = 12;
  // Created At
  google.protobuf.Timestamp created_at = 13;
  // Updated At
  google.protobuf.Timestamp updated_at = 14;
  // Delivery Fee V2.
  google.protobuf.DoubleValue delivery_fee_v2 = 15;
  // Order Value V2.
  google.protobuf.DoubleValue order_value_v2 = 16;
  // Financial Quote ID
  google.protobuf.StringValue financial_quote_id = 17;
}

// Fee Information
message FeeInfo {
  // R2C Distance in Meters
  google.protobuf.Int64Value r2c_distance_meters = 1;
  // Google Estimate
  google.protobuf.StringValue google_estimate = 2;
  // Promotion Subtotal
  google.protobuf.Int64Value promotion_subtotal = 3;
  // Promotion Tax
  google.protobuf.Int64Value promotion_tax = 4;
  // Promotion Total
  google.protobuf.Int64Value promotion_total = 5;
  // Promotion applies to regulatory fee
  google.protobuf.BoolValue promotion_applies_to_regulatory_fee = 6;
  // Promotion Id
  google.protobuf.StringValue promotion_id = 7;
  // Dasher Regulatory Fee
  int64 dasher_regulatory_fee = 8;
  // Dasher Regulatory Fee Tax
  int64 dasher_regulatory_fee_tax = 9;
  // Dasher Regulatory Fee Total
  int64 dasher_regulatory_fee_total = 10;
}
