syntax = "proto3";

package drive_order_service.v1;

import "common/service_client_config.proto";
import "drive_order_service/common.proto";
import "drive_order_service/drive_order.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option go_package = "drive_order_service";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.drive_order_service";

// GetDriveOrderService exposes endpoints to get a DriveOrder and Delivery data
service GetDriveOrderService {
  option (service_client.client_config).service_name = "drive-order-service";
  option (service_client.client_config).service_app = "web";
  option (service_client.client_config).response_attempt_timeout_millis = 1000;
  option (service_client.client_config).circuit_breaker_config.failure_rate_threshold = 1.0;

  // Get a DriveOrder by DoordashId
  rpc GetDriveOrder(GetDriveOrderRequest) returns (GetDriveOrderResponse);
  // Get a DriveOrder by External Delivery ID
  rpc GetDriveOrderByExternalDeliveryId(GetDriveOrderByExternalDeliveryIdRequest) returns (GetDriveOrderByExternalDeliveryIdResponse);
  // Get a DriveOrder by Url Code
  rpc GetDriveOrderByUrlCode(GetDriveOrderByUrlCodeRequest) returns (GetDriveOrderByUrlCodeResponse);
}

// Contains DoordashId needed to get the DriveOrder
message GetDriveOrderRequest {
  // DoordashId
  string doordash_id = 1;
  // DeveloperId
  int64 developer_id = 2;
}

// Contains the corresponding DriveOrder
message GetDriveOrderResponse {
  // DriveOrder
  DriveOrderData drive_order = 1;
}

// Contains ExternalDeliveryId needed to get the DriveOrder
message GetDriveOrderByExternalDeliveryIdRequest {
  // ExternalDeliveryId
  string external_delivery_id = 1;
  // DeveloperId
  int64 developer_id = 2;
}

// Contains the corresponding DriveOrder
message GetDriveOrderByExternalDeliveryIdResponse {
  // DriveOrder
  DriveOrderData drive_order = 1;
}

// Contains UrlCode needed to get the DriveOrder
message GetDriveOrderByUrlCodeRequest {
  // UrlCode
  string url_code = 1;
}

// Contains the corresponding DriveOrder
message GetDriveOrderByUrlCodeResponse {
  // DriveOrder
  DriveOrderData drive_order = 1;
}

// DriveOrder
message DriveOrderData {
  // Drive Order Entry
  DriveOrderEntry drive_order_entry = 1;
  // Delivery
  Delivery delivery = 2;
  // Return Delivery
  Delivery return_delivery = 3;
  // Delivery ETA
  DeliveryEta delivery_eta = 4;
  // Return Delivery ETA
  DeliveryEta return_delivery_eta = 5;
}

// Delivery
message Delivery {
  // Delivery ID
  int64 id = 1;
  // Delivery UUID
  string uuid = 2;
  // Actual Pickup Time
  google.protobuf.Timestamp actual_pickup_time = 3;
  // Actual Delivery Time
  google.protobuf.Timestamp actual_delivery_time = 4;
  // Batch ID
  google.protobuf.Int64Value batch_id = 5;
  // Cash On Delivery amount
  google.protobuf.Int64Value cash_on_delivery = 6;
  // Dasher Confirmed At Store Time
  google.protobuf.Timestamp dasher_confirmed_at_store_time = 7;
  // Dasher Confirmed At Consumer Time
  google.protobuf.Timestamp dasher_confirmed_at_consumer_time = 8;
  // only present if delivery is assigned
  Dasher dasher = 9;
  // Dasher Confirmed Time
  google.protobuf.Timestamp dasher_confirmed_time = 10;
  // Abandoned At Time
  google.protobuf.Timestamp abandoned_at = 11;
  // Cancelled At Time
  google.protobuf.Timestamp cancelled_at = 12;
  // Shift ID
  google.protobuf.Int64Value shift_id = 13;
  // Updated At
  google.protobuf.Timestamp updated_at = 14;

  // Dasher.  At least ID will be present if message is present.
  message Dasher {
    // dasher ID, expect to be positive
    int64 id = 1;
    // field not set if the value is null
    google.protobuf.StringValue first_name = 2;
    // field not set if the value is null
    google.protobuf.StringValue last_name = 3;
    // field not set if no subfields are present
    Vehicle vehicle = 4;
  }

  // Vehicle.  At least one field will be present if this is included in the Dasher
  message Vehicle {
    // e.g. Toyota
    google.protobuf.StringValue make = 1;
    // e.g. Corolla
    google.protobuf.StringValue model = 2;
    // e.g. 2019
    google.protobuf.StringValue year = 3;
    // e.g. car,bicycle.
    // Source of truth is https://sourcegraph.prod.build.doordash.red/github.com/doordash/dasher-service@05c50fd12c6612dd5228a6ae0a88ef38addc5dde/-/blob/src/main/kotlin/com/doordash/dasherservice/dasher/models/Vehicle.kt?subtree=true#L12-25
    google.protobuf.StringValue vehicle_type = 4;
  }
}

// DeliveryEta
message DeliveryEta {
  // Delivery ID
  int64 id = 1;
  // Delivery UUID
  string uuid = 2;
  // Estimated Pickup Time
  google.protobuf.Timestamp estimated_pickup_time = 3;
  // Estimated Delivery Time
  google.protobuf.Timestamp estimated_dropoff_time = 4;
  // Dasher Location
  Location dasher_location = 5;
}
