syntax = "proto3";
// buf:lint:ignore DIRECTORY_SAME_PACKAGE
package user_metadata.v1;

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.common";

// Enum to represent different user personas
enum Persona {
  // Not applicable or undefined persona
  PERSONA_UNSPECIFIED = 0;
  // Persona for regular consumers
  PERSONA_CONSUMER = 1;
  // Persona for merchants
  PERSONA_MERCHANT = 2;
  // Persona for delivery drivers (dashers)
  PERSONA_DASHER = 3;
}

// Enum to represent supported platforms for metadata
enum Platform {
  // Not applicable or undefined platform
  PLATFORM_UNSPECIFIED = 0;
  // Snowflake platform
  PLATFORM_SNOWFLAKE = 1;
  // Datalake platform
  PLATFORM_DATALAKE = 2;
}

// Structure to represent metadata about columns
message ColumnMetadata {
  // Name of the column
  string column_name = 1;
  // Position of the column within the table
  int32 ordinal_position = 2;
  // Indication if the column is nullable
  bool is_nullable = 3;
  // Data type of the column (e.g., 'STRING', 'INTEGER')
  string data_type = 4;
  // Optional comment or description for the column
  string comment = 5;
  // Optional maximum length for character columns; use 0 to denote 'not set'
  int32 character_maximum_length = 6;
  // Optional numeric precision for numeric columns; use 0 to denote 'not set'
  int32 numeric_precision = 7;
  // Optional numeric scale for numeric columns; use 0 to denote 'not set'
  int32 numeric_scale = 8;
  // Optional default value for the column
  string column_default = 9;
  // Indication if the column is an identity column (e.g., auto-increment)
  bool is_identity = 10;
}

// Structure to handle metadata specific to different platforms
message PlatformMetadata {
  // Required for DataLake, optional for others; name of the catalog
  string catalog = 7;
  // Required for all platforms, name of the database
  string database = 1;
  // Required for Snowflake, optional for others; name of the schema
  string schema = 2;
  // Name of the table; centrally managed here
  string table = 3;
  // Optional description of the table
  string table_description = 4;
  // List of FAQs related to the table or schema
  repeated string faqs = 5;
  // List of runbooks related to the table or schema
  repeated string runbooks = 6;
  // slack channels
  repeated string slack_channels = 8;
}

// Structure to handle ownership metadata
message OwnerMetadata {
  // Optional business owner; to be fetched from the server
  string business_owner = 1;
  // Optional technical owner; to be fetched from the server
  string technical_owner = 2;
}

// Structure to handle domain metadata
message DomainMetadata {
  // Optional domain name; to be fetched from the server
  string domain = 1;
  // Optional sub-domain name; to be fetched from the server
  string sub_domain = 2;
}

// Structure to handle team metadata
message TeamMetadata {
  // Optional name of the business team
  string business_vertical = 1;
  // Optional name of the technical team
  string technical_vertical = 2;
}
