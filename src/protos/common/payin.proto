syntax = "proto3";

package payin.v1;

import "google/protobuf/wrappers.proto";

option go_package = "github.com/doordash/services-protobuf/generated/common";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.common";

// PaymentContext represents information about the payment method currently being selected
// by the client. The idea of this is to provide a context for the payment method being used that can be
// trusted across all services.
message PaymentContext {
  // The ID of the Payment Method being used. This may be omitted in the cases of Apple Pay / Google Pay since a new
  // payment_method_id is created for every purchase.
  google.protobuf.StringValue payment_method_id = 1;

  // The type of the payment method being used.
  PaymentMethodType payment_method_type = 2;

  // The token representing the payment method, typically provided by the payment provider (e.g., Stripe Token).
  google.protobuf.StringValue payment_method_token = 3;

  // The brand of the payment method (e.g., Visa, MasterCard, Amex).
  // This is typically derived from the payment method data.
  google.protobuf.StringValue payment_method_brand = 4;

  // The platform where the cart payment was initiated (e.g., iOS, Android, Web).
  // Primarily used for analytics and platform-specific tracking.
  google.protobuf.StringValue submit_platform = 5;

  // The store identifier passed from the frontend, used mainly for analytics and
  // to associate payments with specific storefronts.
  google.protobuf.StringValue store_id = 6;

  // Information about the merchant where the payment is being made. e.g. merchant category
  MerchantInfo merchant_info = 7;

  // The token type of the payment method token.
  PaymentMethodTokenType payment_method_token_type = 8;

  // The timezone string of the device initiating the payment (e.g. America/Los_Angeles)
  google.protobuf.StringValue device_timezone = 9;
}

// Supported payment method types, @see also enum PaymentMethodType in payin_payment_method.proto
enum PaymentMethodType {
  // unknown
  PAYMENT_METHOD_TYPE_UNSPECIFIED = 0;
  // card
  PAYMENT_METHOD_TYPE_CARD = 1;
  // paypal
  PAYMENT_METHOD_TYPE_PAYPAL = 2;
  // venmo
  PAYMENT_METHOD_TYPE_VENMO = 3;
  // afterpay
  PAYMENT_METHOD_TYPE_AFTERPAY = 4;
  // apple pay
  PAYMENT_METHOD_TYPE_APPLE_PAY = 5;
  // google pay
  PAYMENT_METHOD_TYPE_GOOGLE_PAY = 6;
  // EBT
  PAYMENT_METHOD_TYPE_EBT = 7;
  // cashapp
  PAYMENT_METHOD_TYPE_CASHAPP = 8;
  // HSA/FSA
  PAYMENT_METHOD_TYPE_HSA_FSA = 9;
  // klarna
  PAYMENT_METHOD_TYPE_KLARNA = 10;
  // ach
  PAYMENT_METHOD_TYPE_ACH = 11;
}

// WalletType
enum WalletType {
  // unspecified
  WALLET_TYPE_UNSPECIFIED = 0;
  // google pay
  WALLET_TYPE_GOOGLE_PAY = 1;
  // apple pay
  WALLET_TYPE_APPLE_PAY = 2;
  // samsung pay
  WALLET_TYPE_SAMSUNG_PAY = 3;
  // amex
  WALLET_TYPE_AMEX_EXPRESS_CHECKOUT = 4;
  // masterpass
  WALLET_TYPE_MASTERPASS = 5;
  // visa checkout
  WALLET_TYPE_VISA_CHECKOUT = 6;
  // android pay
  WALLET_TYPE_ANDROID_PAY = 7;
}

// Wallet
message Wallet {
  // wallet type
  WalletType type = 1;
  // dynamic last 4
  google.protobuf.StringValue dynamic_last4 = 2;
}

// MerchantInfo represents information about the merchant where the payment is being made.
message MerchantInfo {
  // Merchant category e.g. grocery, convenience, flower etc.
  MerchantCategory merchant_category = 1;
}

// MerchantCategory represents the business lines used to determine the Merchant Category Code (MCC) for a payment transaction.
enum MerchantCategory {
  // unknown
  MERCHANT_CATEGORY_UNSPECIFIED = 0;
  // grocery
  MERCHANT_CATEGORY_GROCERY = 1;
  // convenience
  MERCHANT_CATEGORY_CONVENIENCE = 2;
}

// PaymentMethodTokenType defines the token types supported by the payments system.
enum PaymentMethodTokenType {
  // unknown
  PAYMENT_METHOD_TOKEN_TYPE_UNSPECIFIED = 0;
  // stripe reader id, which is used to identify the stripe card reader/terminal
  PAYMENT_METHOD_TOKEN_TYPE_STRIPE_READER_ID = 1;
  // stripe payment method id, it should starts with "pm_"
  PAYMENT_METHOD_TOKEN_TYPE_STRIPE_PAYMENT_METHOD_ID = 2;
}

/*
   Details on whether a payment is batched
*/
message PaymentBatchingDetails {
  // Whether the payment is batched yet or not (pending batching)
  google.protobuf.BoolValue is_batched = 1;

  // list of cart payments associated with this batched payment
  repeated CartPaymentBatchDetails batched_cart_payments = 2;
}

/*
   A list of cart payments related to a batched payment and associated details
*/
message CartPaymentBatchDetails {
  // Unique identifier of the cart payment
  google.protobuf.StringValue cart_payment_id = 1;

  // cart payment reference id
  google.protobuf.StringValue reference_id = 2;

  // cart payment reference id type
  google.protobuf.StringValue reference_type = 3;

  // Amount allocated to the associated cart payment out of this batched payment
  google.protobuf.Int64Value amount_allocated = 4;
}
