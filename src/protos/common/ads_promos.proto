syntax = "proto3";
package ads_promos.v1;

import "common/common.proto";
import "google/protobuf/wrappers.proto";

option go_package = "github.com/doordash/services-protobuf/generated/common";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.common";

// Used to query for specific store items
message StoreItemQuery {
  // restaurant item query
  RestaurantStoreItemQuery restaurant_item_query = 1;
  // retail item query
  RetailStoreItemQuery retail_item_query = 2;
}

// Used to query for specific restaurant store items
message RestaurantStoreItemQuery {
  // store id
  google.protobuf.StringValue store_id = 1;
  // menu id
  google.protobuf.StringValue menu_id = 2;
}

// Used to query for specific retail store items
message RetailStoreItemQuery {
  // store id
  google.protobuf.StringValue store_id = 1;
  // menu id
  google.protobuf.StringValue menu_id = 2;
  // collection id
  google.protobuf.StringValue collection_id = 3;
  // root category id
  google.protobuf.StringValue root_category_id = 4;
  // sub category id
  google.protobuf.StringValue sub_category_id = 5;
  // product group
  google.protobuf.StringValue product_group = 6;
  // search query
  google.protobuf.StringValue query = 7;
  // root category name
  google.protobuf.StringValue root_category_name = 8;
  // sub category name
  google.protobuf.StringValue sub_category_name = 9;
  // number of item ads limit feed passed in
  google.protobuf.Int32Value limit = 10;
  // business id
  google.protobuf.StringValue business_id = 11;
  // business vertical id
  google.protobuf.StringValue business_vertical_id = 12;
  // product id
  repeated google.protobuf.StringValue product_ids = 13;
  // product id type
  common.ProductIdType product_id_type = 14;
}

// MFS billing method that the event should use
enum BillingMethod {
  // unspecified billing method
  BILLING_METHOD_UNSPECIFIED = 0;
  // payout breakdown (intl uses this and US should adopt this in the near
  // future)
  BILLING_METHOD_PAYOUT_BREAKDOWN = 1;
  // store payment (us legacy flow. Should be deprecated once us moves over to
  // payout breakdown)
  BILLING_METHOD_STORE_PAYMENT = 2;
  // used to distinguish wolt case which DD will not handle the payout as of Q2
  // 2023
  BILLING_METHOD_WOLT = 3;
  // used for marketing fund
  BILLING_METHOD_MARKETING_FUND = 4;
  // invoicing
  BILLING_METHOD_INVOICING = 5;
}

// The container type representing a budget transaction in the new budget
// tracking system putting this definition in common so that both ads and promo
// use cases could use this
message BudgetTxn {
  // the txn type, represent a txn of CPA/CPC/CPM campaigns that supported by
  // the system
  string txn_type = 1;
  // the actual payload
  // i.e., for CPA/CPC, it's of BudgetTransaction (this resides in ads package
  // at the moment) for other use cases, could be a concrete proto of the
  // related txn type Note that for our current structure, we couldn't use a
  // concrete proto type because that requires moving those to a 'common'
  // package shared between ads & promo, otherwise we will have a circular
  // dependency The SpendTracker (the component which processes all input txn
  // messages in the new budget tracking system) will be responsible to
  // unpack/interpret the payload here
  bytes txn_payload = 2;
  // the txn event id, i.e., for BudgetTransaction it's the ad click event id
  google.protobuf.StringValue txn_event_id = 3;
}
