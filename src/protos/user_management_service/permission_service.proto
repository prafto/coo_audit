syntax = "proto3";

package user_management_service.v1;

import "common/organization_service.proto";
import "doordash.api/client.proto";
import "google/protobuf/wrappers.proto";
import "user_management_service/common/common.proto";
import "user_management_service/common/entity.proto";
import "user_management_service/common/permission.proto";
import "user_management_service/common/user_profile.proto";

option go_package = "user_management_service";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.user_management_service";

// Permission APIs under Permission Subservice
service PermissionService {
  // Determine whether a user profile has access to a set of permissions for a single model
  rpc CheckPermissionsAccess(CheckPermissionsAccessRequest) returns (CheckPermissionsAccessResponse);

  // Check which models a user has a permission granted for
  rpc CheckModelsAccess(CheckModelsAccessRequest) returns (CheckModelsAccessResponse);

  // Check if the user can edit a user profile
  rpc CheckCanEditUserProfile(CheckCanEditUserProfileRequest) returns (CheckCanEditUserProfileResponse);

  // Set a permission at the entity level
  rpc SetEntityLevelPermission(SetEntityLevelPermissionRequest) returns (SetEntityLevelPermissionResponse);
}

// Request for CheckPermissionsAccess
message CheckPermissionsAccessRequest {
  // Id of user profile (if omitted, user_id will be used to determine RBAC access)
  google.protobuf.StringValue user_profile_id = 1;
  // Set of permissions of which to determine access
  repeated common.Permission permissions = 2;
  // The model for which the permissions are for
  organization_service.v1.Model model = 3;
}

// Response for CheckPermissionsAccess
message CheckPermissionsAccessResponse {
  // Subset of provided permissions that the user profile has access to for that model
  repeated common.Permission granted_permissions = 1;
}

// Request for CheckModelsAccess
message CheckModelsAccessRequest {
  // Id of user profile (if omitted, user_id will be used to determine RBAC access)
  google.protobuf.StringValue user_profile_id = 1;
  // Permission to determine access of
  common.Permission permission = 2;
  // Model type of all provided models
  organization_service.v1.ModelType model_type = 3;
  // Model ids for which to determine user access
  repeated google.protobuf.Int64Value model_ids_to_check = 4;
}

// Response for CheckModelsAccess
message CheckModelsAccessResponse {
  // Subset of provided models that the user has access to
  repeated google.protobuf.Int64Value granted_model_ids = 1;
}

// Request for CheckCanEditUserProfile
message CheckCanEditUserProfileRequest {
  // Requested permission info to determine can edit user profile access
  message RequestedPermissionInfo {
    // optional value, this field will be empty when creating a new user
    google.protobuf.StringValue user_profile_id = 1;
    // optional value, only used when adding user/updating user role
    common.Role role = 2;
    // optional value, only used when modifying is_member_of_all_entities
    google.protobuf.BoolValue modify_all_entities = 3;
    // optional value, used for user profiles of connected entities
    organization_service.v1.Model model = 4;
    // optional value, list of storeIds we want to check if request has access to
    repeated google.protobuf.Int64Value store_ids = 14 [(doordash.api.client.optional) = true];
  }

  // Id of user profile
  google.protobuf.StringValue user_profile_id = 1;
  // Requested permission info to determine can edit user profile access
  RequestedPermissionInfo requested_permission_info = 2;
}

// Response for CheckCanEditUserProfile
message CheckCanEditUserProfileResponse {
  // Whether the user can edit the user profile
  google.protobuf.BoolValue can_edit = 1;
}

// Request for SetEntityLevelPermission
message SetEntityLevelPermissionRequest {
  // Permission to grant the entity
  common.Permission permission = 1;
  // Model to grant the entity to
  organization_service.v1.Model model = 2;
  // Status of the permission whether ACTIVE/INACTIVE
  common.ActiveStatus status = 3;
}

// Response for SetEntityLevelPermission
message SetEntityLevelPermissionResponse {
  // Permission to grant the entity
  common.Permission permission = 1;
  // Model to grant the entity to
  organization_service.v1.Model model = 2;
  // Status of the permission whether ACTIVE/INACTIVE
  common.ActiveStatus status = 3;
}
