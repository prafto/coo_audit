syntax = "proto3";

package athena_service.v1;

import "doordash.api/annotations.proto";
import "google/api/annotations.proto";
import "google/protobuf/wrappers.proto";
import "lego.response/lego_response.proto";

option go_package = "github.com/doordash/services-protobuf/generated/athena_service";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.athena_service";

// AthenaExperienceService provides contextual hints and guidance for delivery experiences.
// This service is responsible for delivering real-time, context-aware hints to improve
// user experience during deliveries.
service AthenaExperienceService {
  option (doordash.api.service) = {
    name: "athena-service"
    url: "athena-service-api.service.prod.ddsd"
    port: 50051
    name_spaces: ["athena-service"]
    // api_key_name should follow a format similar to
    api_key_name: "ATHENA-SERVICE-API-KEY"
    owner: {
      name: "delivery-excellence-ml"
      id: "chronosphere-collection-id"
      slack_channel: "#ex-project-delphi"
      email_alias: "delivery-quality-intelligence@doordash.com"
    }
    target_products: [
      CX,
      DX
    ]
  };
  // GetHints retrieves contextual hints for a specific delivery.
  // These hints can include guidance, warnings, or suggestions based on the delivery context.
  rpc GetHints(GetHintsRequest) returns (GetHintsResponse) {
    option (google.api.http) = {get: "/athena-service/v1/hints"};

    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [
        CX_USER,
        DX_USER
      ]
      role_based_authorization: {
        mode: ANY,
        roles: ["SECURITY-RAVEN-MANAGED-AUTHORIZATION"]
      }
      target_products: [
        CX,
        DX
      ]
    };
  }
}

// GetHintsRequest represents a request to retrieve hints for a specific delivery.
message GetHintsRequest {
  reserved 1;
  reserved "delivery_uuid";
  // Delivery UUID for which hints are requested
  google.protobuf.StringValue delivery_identifier = 2;
}

// GetHintsResponse contains the hint information and associated actions that should be
// presented to the user during a delivery.
message GetHintsResponse {
  // The title or header text of the hint
  google.protobuf.StringValue title = 1;

  // The main content or body text of the hint
  google.protobuf.StringValue content = 2;

  // Actions to be executed when the hint appears
  reserved 3;
  reserved "impression_tracing_attributes";

  // List of actions that can be taken in response to the hint
  repeated HintAction actions = 4;

  // Time in seconds after which the hint should automatically dismiss
  // If not set, the hint remains until manually dismissed
  google.protobuf.Int32Value auto_dismiss_timeout_seconds = 5;

  // Unique identifier for the hint
  string hint_id = 6;

  // More detailed hint. This will be used by the voice assistant to read aloud the hint.
  google.protobuf.StringValue descriptive_text = 7;

  // Should read aloud the hint text
  bool read_aloud = 8;

  // Actions to be executed when the hint appears
  repeated lego.response.v1.ActionResponse on_appear_actions = 9;

  // Disclaimer text to show - Eg: Generated by AI
  google.protobuf.StringValue disclaimer_text = 10;

  // HintAction represents an actionable button or interaction option presented with the hint
  message HintAction {
    // Display text for the action button
    string title = 1;

    reserved 2;
    reserved "action";

    // Type of action (primary or secondary) which affects its visual presentation
    ActionType action_type = 3;

    // Indicates if this action has an associated timer
    // Used for time-sensitive actions that may expire or change state
    bool has_timer = 4;

    // Lego actions to execute when the action is clicked
    repeated lego.response.v1.ActionResponse actions = 5;
  }

  // ActionType defines the visual hierarchy and importance of hint actions
  enum ActionType {
    // Default value, should not be used
    ACTION_TYPE_UNSPECIFIED = 0;

    // Primary action - the main or recommended action for the hint
    // Typically styled prominently
    ACTION_TYPE_PRIMARY = 1;

    // Secondary action - alternative or optional actions
    // Usually styled less prominently than primary actions
    ACTION_TYPE_SECONDARY = 2;
  }
}
