syntax = "proto3";

package crystalball.v1;

import "common/service_client_config.proto";
import "crystalball/argil_llm_connector.proto";
import "crystalball/ask_data_ai.proto";
import "crystalball/columbus_configs.proto";
import "crystalball/columbus_minions.proto";
import "crystalball/cost_attribution_api.proto";
import "crystalball/dash_chat_api.proto";
import "crystalball/fabricator_entity_config.proto";
import "crystalball/fabricator_feature_config.proto";
import "crystalball/fabricator_minions.proto";
import "crystalball/fabricator_source_config.proto";
import "crystalball/feaser.proto";
import "crystalball/feature_default_monitor.proto";
import "crystalball/feature_store.proto";
import "crystalball/llm_dolly_v2.proto";
import "crystalball/lucent_api.proto";
import "crystalball/octopus_predictor_config.proto";
import "crystalball/openai_api.proto";
import "crystalball/predictor_config.proto";
import "crystalball/scheduler.proto";
import "doordash.api/annotations.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.crystalball.v1";

// Backend Service for ML Workbench
service CrystalBallService {
  option (doordash.api.service) = {
    name: "crystalball service"
    url: "crystalball-web.service.prod.ddsd"
    port: 50051
    name_spaces: [
      "cost-attribution",
      "ml-observability"
    ]
    owner: {
      name: "ml-platform"
      id: "ml-platform-service-alerts"
      slack_channel: "#team-ml-platform"
      email_alias: "eng-ml-platform@doordash.com"
    }
    target_products: [INTERNAL]
  };
  // Get Service level costs
  rpc GetServiceLevelCosts(GetServiceLevelCostsRequest) returns (GetServiceLevelCostsResponse) {
    option (google.api.http) = {
      // {HttpMethod}: "{pathPattern}"
      get: "/cost-attribution/v1/get-service-level-costs"
    };

    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [NONE]
      target_products: [INTERNAL]
    };
  }
  // Get Model level costs
  rpc GetModelCosts(GetModelCostsRequest) returns (GetModelCostsResponse) {
    option (google.api.http) = {
      // {HttpMethod}: "{pathPattern}"
      get: "/cost-attribution/v1/get-model-costs"
    };

    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [NONE]
      target_products: [INTERNAL]
    };
  }
  // Get Fabricator detailed costs
  rpc GetFabricatorCosts(GetFabricatorCostsRequest) returns (GetFabricatorCostsResponse) {
    option (google.api.http) = {
      // {HttpMethod}: "{pathPattern}"
      get: "/cost-attribution/v1/get-fabricator-costs"
    };

    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [NONE]
      target_products: [INTERNAL]
    };
  }

  // List all data quality monitors
  rpc ListFeatureDefaultMonitors(ListFeatureDefaultMonitorsRequest) returns (ListFeatureDefaultMonitorsResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 10000;
    option (google.api.http) = {
      // {HttpMethod}: "{pathPattern}"
      get: "/ml-observability/v1/feature-default-monitors"
    };

    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [NONE]
      target_products: [INTERNAL]
    };
  }

  // Get specific FQM monitor from Arize
  rpc GetFeatureDefaultMonitor(GetFeatureDefaultMonitorRequest) returns (GetFeatureDefaultMonitorResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 10000;
    option (google.api.http) = {
      // {HttpMethod}: "{pathPattern}"
      get: "/ml-observability/v1/feature-default-monitors/{monitor_id}"
    };

    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [NONE]
      target_products: [INTERNAL]
    };
  }

  // Create Feature Default Monitor
  rpc CreateFeatureDefaultMonitor(CreateFeatureDefaultMonitorRequest) returns (CreateFeatureDefaultMonitorResponse) {
    option (google.api.http) = {
      // {HttpMethod}: "{pathPattern}"
      put: "/ml-observability/v1/feature-default-monitors/create",
      body: "*"
    };

    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [NONE]
      target_products: [INTERNAL]
    };
  }

  // Create Feature Default Monitor
  rpc UpdateFeatureDefaultMonitor(UpdateFeatureDefaultMonitorRequest) returns (UpdateFeatureDefaultMonitorResponse) {
    option (google.api.http) = {
      // {HttpMethod}: "{pathPattern}"
      post: "/ml-observability/v1/feature-default-monitor-update/{monitor_id}",
      body: "*"
    };

    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [NONE]
      target_products: [INTERNAL]
    };
  }

  // Get specific FQM monitor from Arize
  rpc DeleteFeatureDefaultMonitor(DeleteFeatureDefaultMonitorRequest) returns (DeleteFeatureDefaultMonitorResponse) {
    option (google.api.http) = {
      // {HttpMethod}: "{pathPattern}"
      post: "/ml-observability/v1/feature-default-monitor-delete/{monitor_id}",
      body: "*"
    };

    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [NONE]
      target_products: [INTERNAL]
    };
  }
}

// Backend Connector for Columbus via Configurator
service ColumbusConnector {
  // Columbus Connector
  // Get Predictor Configurations from SPS
  rpc GetColumbusPredictorConfig(GetColumbusPredictorConfigRequest) returns (GetColumbusPredictorConfigResponse);

  // Columbus Connector
  // Get Predictor Change Spec from Columbus
  rpc GetColumbusChangeSpec(GetColumbusChangeSpecRequest) returns (GetColumbusChangeSpecResponse);

  // Sync Columbus Predictor Config into Octopus
  rpc SyncColumbusPredictorConfigs(SyncColumbusPredictorConfigsRequest) returns (SyncColumbusPredictorConfigsResponse);

  // Create a Minions PR
  rpc CreateColumbusMinionsPR(CreateColumbusMinionsPRRequest) returns (CreateColumbusMinionsPRResponse);

  // Sync Columbus Predictor Config into Octopus
  rpc MergeColumbusMinionsPR(MergeColumbusMinionsPRRequest) returns (MergeColumbusMinionsPRResponse);

  // Sync Columbus Predictor Config into Octopus
  rpc CloseColumbusMinionsPR(CloseColumbusMinionsPRRequest) returns (CloseColumbusMinionsPRResponse);
}

// Backend Connector for Fabricator via Configurator
service FabricatorConnector {
  option (doordash.api.service) = {
    name: "FabricatorConnector service"
    url: "crystalball-web.service.prod.ddsd"
    port: 50051
    name_spaces: ["ml-fabricator"]
    owner: {
      name: "ml-platform"
      id: "ml-platform-service-alerts"
      slack_channel: "#team-ml-platform"
      email_alias: "eng-ml-platform@doordash.com"
    }
    target_products: [INTERNAL]
  };
  // Fabricator Connector
  // Get Fabricator Sources from Configurator
  rpc GetFabricatorSource(FabricatorConnectorGetFabricatorSourceRequest) returns (FabricatorConnectorGetFabricatorSourceResponse) {
    option (google.api.http) = {
      post: "/ml-fabricator/v1/fabricator-source"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [NONE]
      target_products: [INTERNAL]
    };
  }
  // Get Fabricator Features from Configurator
  rpc GetFabricatorFeature(FabricatorConnectorGetFabricatorFeatureRequest) returns (FabricatorConnectorGetFabricatorFeatureResponse) {
    option (google.api.http) = {
      post: "/ml-fabricator/v1/fabricator-feature"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [NONE]
      target_products: [INTERNAL]
    };
  }
  // Get Fabricator Entities from Configurator
  rpc GetFabricatorEntity(FabricatorConnectorGetFabricatorEntityRequest) returns (FabricatorConnectorGetFabricatorEntityResponse) {
    option (google.api.http) = {
      // {HttpMethod}: "{pathPattern}"
      get: "/ml-fabricator/v1/fabricator-entity"
    };
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [NONE]
      target_products: [INTERNAL]
    };
  }
  // Update Fabricator Source
  rpc UpdateFabricatorSource(FabricatorConnectorUpdateFabricatorSourceRequest) returns (FabricatorConnectorUpdateFabricatorSourceResponse) {
    option (google.api.http) = {
      post: "/ml-fabricator/v1/update-source"
      body: "*"
    };

    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [NONE]
      target_products: [INTERNAL]
    };
  }
  // Create a Minion PR to delete source and downstream features
  rpc CreateFabricatorSourceDeletionMinionsPR(CreateFabricatorSourceDeletionMinionsPRRequest) returns (CreateFabricatorSourceDeletionMinionsPRResponse) {
    option (google.api.http) = {
      post: "/ml-fabricator/v1/source-deletion"
      body: "*"
    };

    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [NONE]
      target_products: [INTERNAL]
    };
  }
  // deploy Riviera Job
  rpc DeployRivieraJob(DeployRivieraJobRequest) returns (DeployRivieraJobResponse) {
    option (google.api.http) = {
      post: "/ml-fabricator/v1/deploy-reviera-job"
      body: "*"
    };

    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [NONE]
      target_products: [INTERNAL]
    };
  }
}

// Backend Connector for SPS
service SPSConnector {
  option (doordash.api.service) = {
    name: "SPSConnector service"
    url: "crystalball-web.service.prod.ddsd"
    port: 50051
    name_spaces: ["sps-service"]
    owner: {
      name: "ml-platform"
      id: "ml-platform-service-alerts"
      slack_channel: "#team-ml-platform"
      email_alias: "eng-ml-platform@doordash.com"
    }
    target_products: [INTERNAL]
  };
  // SPS Connector
  // Get Predictor Configurations from SPS
  rpc GetPredictorConfig(SPSConnectorGetPredictorConfigRequest) returns (SPSConnectorGetPredictorConfigResponse) {
    option (google.api.http) = {
      post: "/sps-service/v1/get-predictor-config"
      body: "*"
    };

    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [NONE]
      target_products: [INTERNAL]
    };
  }

  // Sync SPS Predictor Config into Octopus
  rpc SyncSPSPredictorConfigs(SyncSPSPredictorConfigsRequest) returns (SyncSPSPredictorConfigsResponse) {
    option (google.api.http) = {
      post: "/sps-service/v1/sync-predictor-config"
      body: "*"
    };

    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [NONE]
      target_products: [INTERNAL]
    };
  }

  // Make Adhoc Prediction to SPS
  rpc GetAdhocPrediction(GetAdhocPredictionRequest) returns (GetAdhocPredictionResponse);
}

// Backend connector for Feaser
service FeaserConnector {
  // Feaser Connector
  // Get Feature Value from Feaser
  rpc GetFeatureValue(FeaserConnectorGetFeatureValueRequest) returns (FeaserConnectorGetFeatureValueResponse);
}

// Backend Connector for Feature Store
service FeatureStoreConnector {
  option (doordash.api.service) = {
    name: "feature-store-connector-service"
    url: "crystalball-web.service.prod.ddsd"
    port: 50051
    name_spaces: ["feature-store"]
    owner: {
      name: "ml-platform"
      id: "ml-platform-service-alerts"
      slack_channel: "#team-ml-platform"
      email_alias: "eng-ml-platform@doordash.com"
    }
    target_products: [INTERNAL]
  };
  // Get Feature Upload Status
  rpc GetFeatureUploadStatus(GetFeatureUploadStatusRequest) returns (GetFeatureUploadStatusResponse) {
    option (google.api.http) = {
      post: "/feature-store/v1/get-feature-upload-status"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [NONE]
      target_products: [INTERNAL]
    };
  }
  // Get Summary of Feature Upload Status
  rpc GetFeatureUploadStatusSummary(GetFeatureUploadStatusSummaryRequest) returns (GetFeatureUploadStatusSummaryResponse);
}

// Service to interact with Octopus service on user request
service SchedulerService {
  // Sync upstream service data to CRDB via Octopus
  rpc SyncToOctopus(SyncToOctopusRequest) returns (SyncToOctopusResponse);

  // Sync predictor config data collected from SPS + Columbus to CRDB via Octopus
  rpc SyncPredictorConfigsToOctopus(SyncPredictorConfigsToOctopusRequest) returns (SyncPredictorConfigsToOctopusResponse);
}

// Backend Connector for DollyV2 LLM
service LLMDollyConnector {
  // Get Response for Prompt
  rpc GetPrompt(LLMDollyConnectorGetPromptRequest) returns (LLMDollyConnectorGetPromptResponse);
}

// Backend Connector for Argil LLM
service ArgilLLMConnector {
  // Get Response for Prompt
  rpc GetPrompt(ArgilLLMConnectorGetPromptRequest) returns (ArgilLLMConnectorGetPromptResponse);
  // Upload Response for CSV: To Be Deprecated once we have a Lucent Connector
  rpc UploadFineTuningCSV(UploadFineTuningCSVRequest) returns (UploadFineTuningCSVResponse);
}

// Backend Connector for DollyV2 LLM
service OpenAIConnector {
  // Get Response for Prompt
  rpc GetPrompt(OpenAIConnectorGetPromptRequest) returns (OpenAIConnectorGetPromptResponse);

  // Get Response from OctoDB
  rpc GetPromptDB(OpenAIConnectorGetPromptDBRequest) returns (OpenAIConnectorGetPromptDBResponse);

  // Get Streamed Response for Prompt
  rpc StreamPrompt(OpenAIConnectorStreamPromptRequest) returns (stream OpenAIConnectorStreamPromptResponse);
}

// Backend connector for generic DashChat service
service DashChatConnector {
  // Generic Get Response for Prompt
  rpc GetPrompt(GetPromptRequest) returns (GetPromptResponse);
}

// Backend Connector for Lucent
service LucentAPIConnector {
  // Create Lucent cluster
  rpc CreateCluster(LucentAPIConnectorCreateClusterRequest) returns (LucentAPIConnectorCreateClusterResponse);

  // Get Lucent clusters from OctoDB
  rpc GetCluster(LucentAPIConnectorGetClusterRequest) returns (LucentAPIConnectorGetClusterResponse);

  // Terminate Lucent cluster
  rpc TerminateCluster(LucentAPIConnectorTerminateClusterRequest) returns (LucentAPIConnectorTerminateClusterResponse);

  // Update Lucent Cluster
  rpc UpdateCluster(LucentAPIConnectorUpdateClusterRequest) returns (LucentAPIConnectorUpdateClusterResponse);
}

// Backend Connector for AskDataAI
service AskDataAIConnector {
  // Get Response for Prompt
  rpc GetPrompt(AskDataAIConnectorGetPromptRequest) returns (AskDataAIConnectorGetPromptResponse);
}

// Backend connector for Predictor Configs and Model Configs
// TODO: Consolidate all Octopus Connectors in one
service PredictorConfigConnector {
  option (doordash.api.service) = {
    name: "predictor-config-connector-service"
    url: "crystalball-web.service.prod.ddsd"
    port: 50051
    name_spaces: ["predictor-config"]
    owner: {
      name: "ml-platform"
      id: "ml-platform-service-alerts"
      slack_channel: "#team-ml-platform"
      email_alias: "eng-ml-platform@doordash.com"
    }
    target_products: [INTERNAL]
  };
  // Get Octopus predictor config
  rpc GetOctopusPredictorConfig(GetOctopusPredictorConfigRequest) returns (GetOctopusPredictorConfigResponse) {
    option (google.api.http) = {
      post: "/predictor-config/v1/get-octopus-predictor-config"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [NONE]
      target_products: [INTERNAL]
    };
  }
  // Get Octopus Model Configs
  rpc GetOctopusModelConfig(GetOctopusModelConfigRequest) returns (GetOctopusModelConfigResponse) {
    option (google.api.http) = {
      post: "/predictor-config/v1/get-octopus-model-config"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [NONE]
      target_products: [INTERNAL]
    };
  }
  // Update Octopus Model Config
  rpc UpdateOctopusModelConfig(UpdateOctopusModelConfigRequest) returns (UpdateOctopusModelConfigResponse) {
    option (google.api.http) = {
      post: "/predictor-config/v1/update-octopus-model-config"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [NONE]
      target_products: [INTERNAL]
    };
  }
}
