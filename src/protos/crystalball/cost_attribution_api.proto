syntax = "proto3";

package crystalball.v1;

import "crystalball/common.proto";

option java_multiple_files = true;
option java_package = "com.doordash.crystalball.v1";

// GetServiceLevelCosts Request
message GetServiceLevelCostsRequest {
  // team name, all/ALL reserved for including all teams
  string team = 1;
  // start date, in format YYYY-MM-DD
  string start_date = 2;
  // end date, in format YYYY-MM-DD
  string end_date = 3;
}

// GetServiceLevelCosts Response
message GetServiceLevelCostsResponse {
  // team name, all/ALL reserved for including all teams. carried over from GetServiceLevelCostsRequest
  string team = 1;
  // start date, in format YYYY-MM-DD. carried over from GetServiceLevelCostsRequest
  string start_date = 2;
  // end date, in format YYYY-MM-DD. carried over from GetServiceLevelCostsRequest
  string end_date = 3;
  // result data
  repeated ServiceLevelCosts result_data = 4;
}

// service level costs
message ServiceLevelCosts {
  // date, in format YYYY-MM-DD
  string date = 1;
  // cost breakdown
  repeated CostByService cost_by_services = 2;
}

// cost breakdown by service
message CostByService {
  // service name
  MLPService service_name = 1;
  // costs in US dollars
  float cost = 2;
}

// GetModelCosts Request
message GetModelCostsRequest {
  // team name, all/ALL reserved for including all teams
  string team = 1;
  // start date, in format YYYY-MM-DD
  string start_date = 2;
  // end date, in format YYYY-MM-DD
  string end_date = 3;
  // model filters
  ModelFilterCondition filter_condition = 4;
}

// model filter condition
message ModelFilterCondition {
  // model type
  string model_type = 1;
  // limit, order by total cost desc
  int32 limit = 2;
  // mode id
  string model_id = 3;
}

//GetModelCosts Response
message GetModelCostsResponse {
  // team name, all/ALL reserved for including all teams. carried over from GetModelCostsRequest
  string team = 1;
  // start date, in format YYYY-MM-DD. carried over from GetModelCostsRequest
  string start_date = 2;
  // end date, in format YYYY-MM-DD. carried over from GetModelCostsRequest
  string end_date = 3;
  // model filters. carried over from GetModelCostsRequest
  ModelFilterCondition filter_condition = 4;
  // result data
  repeated ModelLevelCosts result_data = 5;
}

// model level costs
message ModelLevelCosts {
  // model name
  string model_id = 1;
  // cost breakdown
  repeated CostByService cost_by_services = 2;
}

// GetFabricatorCosts Request
message GetFabricatorCostsRequest {
  // team name, all/ALL reserved for including all teams
  string team = 1;
  // start date, in format YYYY-MM-DD
  string start_date = 2;
  // end date, in format YYYY-MM-DD
  string end_date = 3;
}

// GetFabricatorCosts Response
message GetFabricatorCostsResponse {
  // team name, all/ALL reserved for including all teams. carried over from GetFabricatorCostsRequest
  string team = 1;
  // start date, in format YYYY-MM-DD. carried over from GetFabricatorCostsRequest
  string start_date = 2;
  // end date, in format YYYY-MM-DD. carried over from GetFabricatorCostsRequest
  string end_date = 3;
  // result data
  repeated FabricatorLevelCosts result_data = 4;
}

// fabricator level costs
message FabricatorLevelCosts {
  // date, in format YYYY-MM-DD
  string date = 1;
  // cost breakdown
  repeated CostByFabricatorJobType cost_by_type = 2;
}

// cost breakdown by fabricator job type
message CostByFabricatorJobType {
  // fabricator job type
  FabricatorJobType job_type = 1;
  // costs in US dollars
  float cost = 2;
}
