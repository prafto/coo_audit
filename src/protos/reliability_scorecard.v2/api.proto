syntax = "proto3";

package reliability_scorecard.v2;

import "google/protobuf/timestamp.proto";
import "google/rpc/status.proto";
import "reliability_scorecard.v2/models.proto";

option go_package = "github.com/doordash/services-protobuf/generated/reliability_scorecard.v2";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.reliabilityscorecard.v2";

// Service Implementation: https://github.com/example/reliability-scorecard
// ReliabilityScorecardServiceV2 provides methods for self-service management of scorecard checks.
service ReliabilityScorecardV2Service {
  // Creates a new scorecard check.
  rpc CreateScorecardCheck(CreateScorecardCheckRequest) returns (CreateScorecardCheckResponse) {}

  // Retrieves a scorecard check by its ID.
  rpc GetScorecardCheck(GetScorecardCheckRequest) returns (GetScorecardCheckResponse) {}

  // Lists all scorecard checks.
  rpc ListScorecardChecks(ListScorecardChecksRequest) returns (ListScorecardChecksResponse) {}

  // Updates a scorecard check.
  rpc UpdateScorecardCheck(UpdateScorecardCheckRequest) returns (UpdateScorecardCheckResponse) {}

  // Get report for a scorecard check.
  rpc GetScorecardCheckReport(GetScorecardCheckReportRequest) returns (GetScorecardCheckReportResponse) {}
}

// Payload that contains all the information required to define a new check using CreateScorecardCheck.
message CreateScorecardCheckRequest {
  // [REQUIRED] A human-readable name for the check.
  // Display name must be unique across all checks.
  string display_name = 1;

  // [REQUIRED] DDRN of the team or org that owns this check and is responsible for its maintenance.
  // See https://doordash.atlassian.net/wiki/spaces/Eng/pages/3287646426/DoorDash+Resource+Name+DDRN
  string owner_ddrn = 2;

  // [REQUIRED] Provides the definition of the check containing parameters for evaluation and thresholds for determining pass/fail.
  CheckType check_type = 3;

  // [OPTIONAL] Allows check owners to apply checks to a subset of software assets.
  // *NOT* setting a filter will cause the check to evaluate *ALL* software assets.
  Filter filter = 4;

  // [OPTIONAL] Sets the initial status of the check.
  // By default, a check starts off in the `DISABLED` state. This allows check owners to "stage" the check before
  // releasing it.
  CheckStatus status = 5;

  // [OPTIONAL] A detailed summary of the check. It should be used to provide information on why the check is essential
  // and what software asset owners need to do to pass the check.
  string documentation = 10;
}

// Returns the newly created scorecard check.
message CreateScorecardCheckResponse {
  // Response returned for the create request.
  // On success, this will contain the newly created check. On failure, the `status` field will provide details of the error.
  oneof response {
    // The created scorecard check.
    ScorecardCheck check = 1;

    // The error message if the request failed.
    google.rpc.Status status = 2;
  }
}

// Request payload for retrieving a scorecard check by its unique id.
message GetScorecardCheckRequest {
  // The ID of the scorecard check to retrieve.
  string id = 1;
}

// Returns the requested scorecard check if available.
message GetScorecardCheckResponse {
  // The retrieved scorecard check if it exists.
  ScorecardCheck check = 1;
}

// Request payload for listing all scorecard checks.
message ListScorecardChecksRequest {
  // TODO: Add filtering options.
  // The number of items to return when paginating.
  uint32 page_size = 1;

  // The page token to use when paginating.
  string page_token = 2;
}

// List of currently available checks.
message ListScorecardChecksResponse {
  // The list of scorecard checks.
  repeated ScorecardCheck checks = 1;
}

// Request payload for updating a scorecard check.
message UpdateScorecardCheckRequest {
  // [REQUIRED] The ID of the scorecard check to update.
  string id = 1;

  // [REQUIRED] A human-readable name for the check.
  // Display name must be unique across all checks.
  string display_name = 2;

  // [REQUIRED] DDRN of the team or org that owns this check and is responsible for its maintenance.
  // See https://doordash.atlassian.net/wiki/spaces/Eng/pages/3287646426/DoorDash+Resource+Name+DDRN
  string owner_ddrn = 3;

  // [REQUIRED] Provides the definition of the check containing parameters for evaluation and thresholds for determining pass/fail.
  CheckType check_type = 4;

  // [OPTIONAL] Allows check owners to apply checks to a subset of software assets.
  // *NOT* setting a filter will cause the check to evaluate *ALL* software assets.
  Filter filter = 5;

  // [OPTIONAL] Sets the initial status of the check.
  // By default, a check starts off in the `DISABLED` state. This allows check owners to "stage" the check before
  // releasing it.
  CheckStatus status = 6;

  // [OPTIONAL] A detailed summary of the check. It should be used to provide information on why the check is essential
  // and what software asset owners need to do to pass the check.
  string documentation = 10;
}

// Returns the updated scorecard check.
message UpdateScorecardCheckResponse {
  // Response returned for the update request.
  // On success, this will contain the updated check. On failure, the `status` field will provide details of the error.
  oneof response {
    // The updated scorecard check.
    ScorecardCheck check = 1;

    // The error message if the request failed.
    google.rpc.Status status = 2;
  }
}

// Request payload for retrieving a scorecard check report.
message GetScorecardCheckReportRequest {
  // The ID of the scorecard check to retrieve the report for.
  string check_id = 1;
}

// Returns the requested scorecard check report if available.
message GetScorecardCheckReportResponse {
  // The retrieved scorecard check report if it exists.
  ScorecardCheckReport report = 1;
}
