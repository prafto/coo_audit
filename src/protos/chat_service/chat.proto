syntax = "proto3";

package delivery.experience.chat.api;

import "chat_service/chat_service.proto";
import "doordash.api/annotations.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_outer_classname = "chat";
option java_package = "com.doordash.rpc.chat.api";

service ChatService {
  // Set up this service to be exposed via Unified Gateway
  option (doordash.api.service) = {
    name: "chat-platform-chat-service"
    port: 50051
    name_spaces: ["chat"]
    api_key_name: "CHAT_SERVICE_API_KEY"
    owner: {
      name: "chat-platform"
      id: "chat-platform"
      slack_channel: "#ask-conversation-platform"
      email_alias: "team-conversation-platform@doordash.com"
    }
    target_products: [
      CX,
      DX,
      MX
    ]
  };

  rpc getConsumerChatUser(ConsumerChatUserRequest) returns (ChatUserResponse);

  rpc getDasherChatUser(DasherChatUserRequest) returns (ChatUserResponse);

  rpc checkDasherChatStatus(DasherChatStatusRequest) returns (DasherChatStatusResponse);

  rpc checkConsumerChatStatus(ConsumerChatStatusRequest) returns (ConsumerChatStatusResponse) {
    option (google.api.http) = {get: "/chat/v1/cx-dx-chat/cx-chat-status"};
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [CX_USER]
      target_products: [CX]
    };
  }

  // Create a new chat channel.
  rpc CreateChatChannel(CreateChatChannelRequest) returns (CreateChatChannelResponse);

  // Conduct safety moderation strategies
  rpc ExecuteSafetyModeration(ExecuteSafetyModerationRequest) returns (ExecuteSafetyModerationResponse);

  // Send chatbot message to the channel
  rpc SendChatBotMessage(SendChatBotMessageRequest) returns (SendChatBotMessageResponse);

  // Fetch chat user. This is the consolidated API for all use cases including cx-dx, cx-mx, support etc.
  // Once this is adopted, deprecate all existing  getConsumerChatUser, getDasherChatUser and GetSupportChatUser
  rpc GetChatUser(ChatUserRequest) returns (ChatUserResponse) {
    option (google.api.http) = {
      post: "/chat/v1/chat_user"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [
        CX_USER,
        DX_USER,
        MX_USER
      ]
      target_products: [
        CX,
        DX,
        MX
      ]
    };
  }

  // Fetch Cx-Mx chat channel status
  rpc GetCxMxChatChannel(CxMxChatChannelRequest) returns (CxMxChatChannelResponse) {
    option (google.api.http) = {get: "/chat/v1/cx-mx-chat/cx_mx_chat_channel"};
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [
        CX_USER,
        MX_USER
      ]
      target_products: [
        CX,
        MX
      ]
    };
  }

  // endpoint to receive recommendation for MxCx chat
  rpc StartCxMxChat(StartCxMxChatRequest) returns (StartCxMxChatResponse) {}

  // Execute chat action
  rpc ExecuteChatAction(ExecuteChatActionRequest) returns (ExecuteChatActionResponse);

  // Create a Dashbuddy chat session
  rpc CreateDashbuddySession(CreateDashbuddySessionRequest) returns (CreateDashbuddySessionResponse);

  // Forward message to chat channel on behalf of message routing platform
  rpc ForwardChatMessage(ForwardChatMessageRequest) returns (ForwardChatMessageResponse);
}
