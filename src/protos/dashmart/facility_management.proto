syntax = "proto3";

package dashmart.v1;

import "dashmart/common.proto";
import "dashmart/store_management.proto";
import "doordash.api/annotations.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option go_package = "dashmart_service";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.dashmart.v1";

// API's related to facility management in DashMart
service FacilityManagementService {
  // Unified gateway config
  option (doordash.api.service) = {
    port: 50051
    name: "dashmart-service-web"
    url: "dashmart-service-web.service.prod.ddsd"
    name_spaces: ["dashmart"]
    api_key_name: "DASHMART-API-KEY"
    owner: {
      name: "dashmart"
      id: "dashmart"
      slack_channel: "#dashmart-eng"
      email_alias: "dashmart-eng@doordash.com",
    }
    target_products: [INTERNAL]
  };

  // Get a list of operators information by facility ID
  rpc GetLocalOpsInfoForFacility(GetLocalOpsInfoForFacilityRequest) returns (GetLocalOpsInfoForFacilityResponse) {
    option (google.api.http) = {get: "/dashmart/v1/facilities/{facility_id}/local-ops-info"};
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: TEST
      authorization: [CX_USER]
      target_products: [INTERNAL]
    };
    option (doordash.api.forward_headers) = {
      forward: [
        {field: "DD-OBO-User-ID"},
        {field: "DD-User-Info"},
        {field: "facility-id"}]
    };
  }

  // Get a list of business ids, store names, and store ids
  rpc GetStoresInfoForFacility(GetStoresInfoForFacilityRequest) returns (GetStoresInfoForFacilityResponse) {
    option (google.api.http) = {get: "/dashmart/v1/facilities/{facility_id}/stores-info"};
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: TEST
      authorization: [CX_USER]
      target_products: [INTERNAL]
    };
    option (doordash.api.forward_headers) = {
      forward: [
        {field: "DD-OBO-User-ID"},
        {field: "DD-User-Info"},
        {field: "facility-id"}]
    };
  }

  // Edit the stores to facility mapping
  rpc EditStoresForFacility(EditStoresForFacilityRequest) returns (EditStoresForFacilityResponse) {
    option (google.api.http) = {
      put: "/dashmart/v1/facilities/{facility_id}/stores",
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: TEST
      authorization: [CX_USER]
      target_products: [INTERNAL]
    };
    option (doordash.api.forward_headers) = {
      forward: [
        {field: "DD-OBO-User-ID"},
        {field: "DD-User-Info"},
        {field: "facility-id"}]
    };
  }

  // Get a list of user roles
  rpc ListUserRoles(ListUserRolesRequest) returns (ListUserRolesResponse) {
    option (google.api.http) = {get: "/dashmart/v1/facilities/user-roles"};
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: TEST
      authorization: [CX_USER]
      target_products: [INTERNAL]
    };
    option (doordash.api.forward_headers) = {
      forward: [
        {field: "DD-OBO-User-ID"},
        {field: "DD-User-Info"},
        {field: "facility-id"}]
    };
  }

  // Get current facility information given facility id
  rpc GetFacilityById(GetFacilityByIdRequest) returns (GetFacilityByIdResponse) {
    option (google.api.http) = {get: "/dashmart/v1/facilities/{facility_id}"};
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: TEST
      authorization: [CX_USER]
      target_products: [INTERNAL]
    };
    option (doordash.api.forward_headers) = {
      forward: [
        {field: "DD-OBO-User-ID"},
        {field: "DD-User-Info"},
        {field: "facility-id"}]
    };
  }

  // Get current facility information by given facility code
  rpc GetFacilityByCode(GetFacilityByCodeRequest) returns (GetFacilityByCodeResponse) {
    option (google.api.http) = {get: "/dashmart/v1/facilities/code/{facility_code}"};
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: TEST
      authorization: [CX_USER]
      target_products: [INTERNAL]
    };
    option (doordash.api.forward_headers) = {
      forward: [
        {field: "DD-OBO-User-ID"},
        {field: "DD-User-Info"},
        {field: "facility-id"}]
    };
  }

  // Create new facility
  rpc CreateFacility(CreateFacilityRequest) returns (CreateFacilityResponse) {
    option (google.api.http) = {
      post: "/dashmart/v1/facilities",
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: TEST
      authorization: [CX_USER]
      target_products: [INTERNAL]
    };
    option (doordash.api.forward_headers) = {
      forward: [
        {field: "DD-OBO-User-ID"},
        {field: "DD-User-Info"},
        {field: "facility-id"}]
    };
  }

  // Edit existing facility
  rpc EditFacility(EditFacilityRequest) returns (EditFacilityResponse) {
    option (google.api.http) = {
      put: "/dashmart/v1/facilities",
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: TEST
      authorization: [CX_USER]
      target_products: [INTERNAL]
    };
    option (doordash.api.forward_headers) = {
      forward: [
        {field: "DD-OBO-User-ID"},
        {field: "DD-User-Info"},
        {field: "facility-id"}]
    };
  }

  // Retrieve all active facilities
  rpc GetAllActiveFacilities(GetAllActiveFacilitiesRequest) returns (GetAllActiveFacilitiesResponse) {
    option (google.api.http) = {get: "/dashmart/v1/facilities"};
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: TEST
      authorization: [CX_USER]
      target_products: [INTERNAL]
    };
    option (doordash.api.forward_headers) = {
      forward: [
        {field: "DD-OBO-User-ID"},
        {field: "DD-User-Info"},
        {field: "facility-id"}]
    };
  }
}

// Operator information object
message LocalOpsInfo {
  // Operator role
  string role = 1;
  // User info
  UserInfo user_info = 2;
}

// Request to the GetLocalOpsInfoForFacility API
message GetLocalOpsInfoForFacilityRequest {
  // Facility ID where we want operator information
  int32 facility_id = 1;
}

// Response to the GetLocalOpsInfoForFacility API
message GetLocalOpsInfoForFacilityResponse {
  // List of operators and their information
  repeated LocalOpsInfo local_ops_info = 1;
}

// Business information object
message BusinessInfo {
  // Business id
  string business_id = 1;
  // Business name
  string business_name = 2;
}

// Store information object
message StoreInfo {
  // Store id
  string store_id = 1;
  // Store name
  string store_name = 2;
  // Business information
  BusinessInfo business_info = 3;
  // Store temporary deactivation info, null if activated.
  StoreDeactivationInfo store_deactivation_info = 4;
}

// Request to the GetStoresForFacility API
message GetStoresInfoForFacilityRequest {
  // Facility ID where we want store information
  int32 facility_id = 1;
}

// Response to the GetStoresForFacility API
message GetStoresInfoForFacilityResponse {
  // List of stores and their information
  repeated StoreInfo store_info = 1;
}

// Request to the EditStoresForFacility API
message EditStoresForFacilityRequest {
  // Facility ID we are editing
  int32 facility_id = 1;
  // List of stores to edit
  repeated string store_ids = 2;
}

// Response to the EditStoresForFacility API
message EditStoresForFacilityResponse {}

// Role object
message Role {
  // Role id
  string role_id = 1;
  // Role name
  string role_name = 2;
}

// Request to the ListUserRoles API
message ListUserRolesRequest {}

// Response to the ListUserRoles API
message ListUserRolesResponse {
  // list of all role objects
  repeated Role role = 1;
}

// Request to the GetFacilityById API
message GetFacilityByIdRequest {
  // Facility ID where we want facility information
  int32 facility_id = 1;
}

// Facilities object
message FacilityV2 {
  // [Required] Facility id
  int32 facility_id = 1;
  // [Required] Facility code
  string facility_code = 2;
  // [Required] Facility city
  string city = 3;
  // [Required] Facility state
  string state_province = 4;
  // [Required] Facility zip code
  string zipcode = 5;
  // [Required] Facility country
  string country = 6;
  // [Required] Facility submarket id
  string submarket_id = 7;
  // [Required] Facility starting point
  int32 starting_point_id = 8;
  // [Required] Facility district id
  int32 district_id = 9;
  // [Required] Facility timezone
  string timezone = 10;
  // [Required] Facility active status
  bool is_active = 11;
  // [Optional] Facility creation time
  google.protobuf.Timestamp created_dttm = 12;
  // [Optional] Facility last updated time
  google.protobuf.Timestamp last_updated_dttm = 13;
  // [Required] Facility mx code
  string mx_code = 14;
  // [Required] Facility market id
  int32 market_id = 15;
  // [Required] Facility type
  repeated string facility_types = 16;
}

// Facility operation information object
message FacilityOperationInfo {
  reserved 8, 9;
  reserved "operating_hour_start_time", "operating_hour_end_time";
  // [Required] Facility id
  int32 facility_id = 1;
  // [Optional] Store email address
  string store_email_address = 2;
  // [Optional] Store phone number
  string store_phone_number = 3;
  // [Optional] Store back up numbers
  repeated string backup_phone_numbers = 4;
  // [Optional] Facility max truck size
  string max_truck_size = 5;
  // [Optional] Facility receiving hour start time
  int32 receiving_hour_start_time = 6;
  // [Optional] Facility receiving hour end time
  int32 receiving_hour_end_time = 7;
  // [Optional] Requires lift gate
  bool lift_gate_required = 10;
  // [Optional] Facility delivery instructions
  string delivery_instructions = 11;
}

// Response to the GetFacilityById API
message GetFacilityByIdResponse {
  // Facility info
  FacilityV2 facility = 1;
  // Facility operation info
  FacilityOperationInfo facility_operation_info = 2;
}

// Request to the GetFacilityByCode API
message GetFacilityByCodeRequest {
  // Facility Code where we want facility information. Example SEA-1
  string facility_code = 1;
}

// Response to the GetFacilityByCode API
message GetFacilityByCodeResponse {
  // Facility info
  FacilityV2 facility = 1;
}

// Request to the CreateFacility API
message CreateFacilityRequest {
  // [Required] Facility Info
  FacilityV2 facility = 1;
  // [Required] facility operational info
  FacilityOperationInfo facility_operation_info = 2;
  // [Optional] reason for why facility is being created
  google.protobuf.StringValue activity_reason = 3;
  // [Required] We are only adding the address field because we will maintain
  // both facilities (v1) and facilities_v2. Once we have migrated off of
  // facilities (v1) this field can be removed.
  string address = 4;
}

// Response to the CreateFacility API
message CreateFacilityResponse {}

// Request to the EditFacility API
message EditFacilityRequest {
  reserved 4;
  reserved "address";
  // [Required] Facility Info
  FacilityV2 facility = 1;
  // [Required] facility operational info
  FacilityOperationInfo facility_operation_info = 2;
  // [Optional] reason for why facility is being edited
  google.protobuf.StringValue activity_reason = 3;
}

// Response to the EditFacility API
message EditFacilityResponse {}

// Request to the GetAllActiveFacilities API
message GetAllActiveFacilitiesRequest {
  // [Optional] Country of the facilities. If no country is given will return all active facilities across all countries.
  google.protobuf.StringValue country = 1;
}

// Response to the GetAllActiveFacilities API
message GetAllActiveFacilitiesResponse {
  // List of active facilities
  repeated FacilityV2 facilities = 1;
}
