syntax = "proto3";

package dashmart.v1;

import "dashmart/common.proto";
import "dashmart/dashmart.proto";
import "dashmart/master_data_management.proto";
import "doordash.api/annotations.proto";
import "google/api/annotations.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option go_package = "dashmart_service";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.dashmart.v1";

// API's related to master data management in DashMart
service SkuManagementService {
  // Get the catalog's L2 categories for the given country
  rpc GetL2Categories(GetL2CategoriesRequest) returns (GetL2CategoriesResponse);
  // Get the default catalog's L1 and L2 categories for the given country
  rpc GetL1AndL2Categories(GetL1AndL2CategoriesRequest) returns (GetL1AndL2CategoriesResponse);
  // Get the catalog's l1 category name and collection given the country and l2 category name
  rpc GetCatalogInfoForL2AndCountry(GetCatalogInfoForL2AndCountryRequest) returns (GetCatalogInfoForL2AndCountryResponse);
  // Get the dashmart business ids given the country
  rpc GetBusinessIds(GetBusinessIdsRequest) returns (GetBusinessIdsResponse);
  // Get the allowed units for the given country
  rpc GetAllowedUnits(GetAllowedUnitsRequest) returns (GetAllowedUnitsResponse);
  // Search for a sku by ddid
  rpc GetSkuByDdId(GetSkuByDdIdRequest) returns (GetSkuByDdIdResponse);
  // Search for a sku by name
  rpc SearchSkuByName(SearchSkuByNameRequest) returns (SearchSkuByNameResponse);
  // Get the allowed menu categories for the given country
  rpc GetAllowedMenuCategories(GetAllowedMenuCategoriesRequest) returns (GetAllowedMenuCategoriesResponse);
  // Get the allowed photo sources for the given country
  rpc GetAllowedPhotoSources(GetAllowedPhotoSourcesRequest) returns (GetAllowedPhotoSourcesResponse);
  // Get the allowed description sources for the given country
  rpc GetAllowedDescriptionSources(GetAllowedDescriptionSourcesRequest) returns (GetAllowedDescriptionSourcesResponse);
  // Create new sku
  rpc CreateSku(CreateSkuRequest) returns (CreateSkuResponse);
  // Modify existing sku
  rpc ModifySku(ModifySkuRequest) returns (ModifySkuResponse);
  // Get the list of valid reasons to suppress a SKU
  rpc GetSkuSuppressionReasons(GetSkuSuppressionReasonsRequest) returns (GetSkuSuppressionReasonsResponse);
  // Upsert the regional price of a sku (regional price)
  rpc UpsertRegionalPrice(UpsertRegionalPriceRequest) returns (UpsertRegionalPriceResponse);
  // Upsert the discounted price of a sku (strikethrough price)
  rpc UpsertDiscountedPrice(UpsertDiscountedPriceRequest) returns (UpsertDiscountedPriceResponse);
  // Delete the discounted price of a sku (strikethrough price)
  rpc DeleteDiscountedPrice(DeleteDiscountedPriceRequest) returns (DeleteDiscountedPriceResponse);
  // Set the price of a sku for a particular facility
  rpc SetSkuPriceForFacility(SetSkuPriceForFacilityRequest) returns (SetSkuPriceForFacilityResponse);
  // Get partially filled information from URPC given the DDISC
  rpc GetSkuInfoFromUrpc(GetSkuInfoFromUrpcRequest) returns (GetSkuInfoFromUrpcResponse);
  // Update the base price of a sku
  rpc UpdateSkuPrice(UpdateSkuPriceRequest) returns (UpdateSkuPriceResponse);
  // Get Merchant Codes
  rpc GetMerchantCodes(GetMerchantCodesRequest) returns (GetMerchantCodesResponse);
  // Create MxCode for consigned vendor
  rpc CreateMxCode(CreateMxCodeRequest) returns (CreateMxCodeResponse);
  // Link a SKU to a set of businesses
  rpc LinkSkuToBusiness(LinkSkuToBusinessRequest) returns (LinkSkuToBusinessResponse);
  // Unlink a SKU from a business
  rpc UnlinkSkuFromBusiness(UnlinkSkuFromBusinessRequest) returns (UnlinkSkuFromBusinessResponse);
  // Upsert the discounted sku's sellable inventory
  rpc UpsertSkuAutomatedMarkdownSellableInventory(UpsertSkuAutomatedMarkdownSellableInventoryRequest) returns (UpsertSkuAutomatedMarkdownSellableInventoryResponse);
  // Get the discounted sku's sellable inventory
  rpc GetSkuAutomatedMarkdownSellableInventory(GetSkuAutomatedMarkdownSellableInventoryRequest) returns (GetSkuAutomatedMarkdownSellableInventoryResponse);
}

// Request for the GetL2Categories endpoint
message GetL2CategoriesRequest {
  // Three letter code for the country
  string country = 1;
  // Optional business id. If provided, will return the l2s for that business.
  // If null, will return the default l2 options.
  google.protobuf.StringValue business_id = 2;
}

// Response for the GetL2Categories endpoint
message GetL2CategoriesResponse {
  // List of the L2 categories for the given country
  repeated string l2_categories = 1;
}

// Request for the GetL1AndL2Categories endpoint
message GetL1AndL2CategoriesRequest {
  // Three letter code for the country
  string country = 1;
}

// Response for the GetL1AndL2Categories endpoint
message GetL1AndL2CategoriesResponse {
  // List of the L1 categories for the given country
  repeated L1Category l1_categories = 1;
}

// L1 category with associated L2 categories
message L1Category {
  // L1 category name
  string l1_category = 1;
  // L2 category names
  repeated string l2_categories = 2;
}

// Request for the GetCatalogInfoForL2AndCountry endpoint
message GetCatalogInfoForL2AndCountryRequest {
  // Three letter code for the country
  string country = 1;
  // Name of the L2 category on the catalog
  string l2_category = 2;
  // Optional business id. If provided, will return the l2s for that business.
  // If null, will return the default l2 options.
  google.protobuf.StringValue business_id = 3;
}

// Response for the GetCatalogInfoForL2AndCountry endpoint
message GetCatalogInfoForL2AndCountryResponse {
  // Name of the L1 category on the catalog
  string l1_category = 1;
  // Name of the collection on the catalog
  string collection = 2;
}

// Request for the GetBusinessIds endpoint
message GetBusinessIdsRequest {
  // Three letter code for the country
  string country = 1;
}

// Response for the GetBusinessIds endpoint
message GetBusinessIdsResponse {
  // List of businesses that are allowed for that country within the dashmart ecosystem
  repeated Business business = 1;
}

// Request for the GetAllowedUnits endpoint
message GetAllowedUnitsRequest {
  // Three letter code for the country
  string country = 1;
}

// Response for the GetAllowedUnits endpoint
message GetAllowedUnitsResponse {
  // Allowed units for the requested country
  repeated string allowed_units = 1;
}

// Sku object
message Sku {
  reserved 7, 30, 44;
  reserved "expiration_detail";

  // ddid. It's mandatory, but we allow it null if item is being created (createSku)
  // For the ModifySku endpoint, this is mandatory
  google.protobuf.StringValue ddid = 1;
  // [Optional] Brand name
  google.protobuf.StringValue brand_name = 2;
  // Name of the item on the menu
  string menu_name = 3;
  // [Optional] Item description
  google.protobuf.StringValue description = 4;
  // Name of the category on which the item should belong for the menu
  string product_category_name = 5;
  // Tag of the main photo for the item uploaded to photo-service
  int64 photo_tag = 6;
  // Unit
  string unit = 8;
  // Temperature of ths sku for storage
  dashmart.v1.Temperature temperature = 9;
  // Initial price that we want to set for the item
  int64 initial_sale_price_in_cents = 10;
  // Optional suppression of the ddid. There's a two stage process: we suppress an item when we no longer want to buy it,
  // but we still want to allow selling it to sell it down to 0. After a period, we will remove it from all `business_ids`
  // which will deactivate it on all menus / catalogs / etc.
  dashmart.v1.Suppression suppression = 11;
  // UserId who created this item
  string created_by = 12;
  // Timstamp in UTC of when the item got created. If item is being created, this can be null
  google.protobuf.Timestamp created_at = 13;
  // Name of the L2 category on the catalog
  string l2_category = 14;
  // Name of the L3 item group on the catalog
  string l3_item_group = 15;
  // Name of the L4 variant on the catalog
  string l4_variant = 16;
  // Name of the l4 size on the catalog
  string l4_size = 17;
  // [Optional] Search keywords
  google.protobuf.StringValue search_keywords = 18;
  // [Optional] Search override
  google.protobuf.StringValue search_override = 19;
  // [Optional] Length of the SKU in cm
  google.protobuf.Int64Value length_in_cm = 20;
  // [Optional] Width of the SKU in cm
  google.protobuf.Int64Value width_in_cm = 21;
  // [Optional] Depth of the SKU in cm
  google.protobuf.Int64Value depth_in_cm = 22;
  // [Optional] Weight of the SKU in grams
  google.protobuf.Int64Value weight_in_grams = 23;
  // [Optional] Volume of the SKU in cm3
  google.protobuf.Int64Value volume_in_cm3 = 24;
  // Non-main photo tags that were uploaded for
  repeated string auxiliary_photo_tags = 25;
  // [Optional] Sku metadata. Its a JSON format, though currently not enforced
  google.protobuf.StringValue metadata = 26;
  // If this is true, it will be set as SNAP enabled in the catalog
  bool is_nutrition_program_enabled = 27;
  // Three letter code for the country
  string country = 28;
  // MX Code
  string mx_code = 29;
  // [Optional] Source for the item description
  google.protobuf.StringValue description_source = 31;
  // [Optional] Source for the item photo
  google.protobuf.StringValue photo_source = 32;
  // [Optional] If this was marked as a duplicate, which DDID. If not, this is null
  google.protobuf.StringValue duplicate_of = 33;
  // All UPC codes that we have associated with this item
  repeated string upcs = 34;
  // [TO BE DEPRECATED] Which business Ids we should enable this SKU on. Limited to the ones allowed on the country
  repeated string business_ids = 35;
  // Whether this SKU can be taken reasonably with a bike
  bool is_bike_friendly = 39;
  // Size of the sku, with decimal
  double size_of_unit = 40;
  // Unit of measure as we sell the SKU
  UnitOfMeasure sell_uom = 41;
  // [Optional] This is basically the ID of the SKU in URPC
  google.protobuf.StringValue ddsic = 42;
  // Businesses associated with the SKU, with optional l2 override
  repeated BusinessAssociationForSku businesses_associated = 43;
  // the days that an item should be shown in the expiration management UI before it expires
  int32 days_before_expiration_to_pull = 45;
  // the detail includes expiration type
  ProductQualityAndExpirationDetail product_quality_and_expiration_detail = 46;
  // [Optional] Information regarding the components of this SKU. If this parameter is null, the SKU is not a bundle.
  SkuBundleInfo bundle_component_info = 47;
  // [Optional] Information regarding how this SKU converts into children. If this parameter is null, the SKU is not a parent.
  SkuConversionInfo conversion_info = 48;
  // [Optional] Information regarding whether the sku is a consumable, if this parameter is null, the sku is not a cosnumable
  SkuConsumableInfo consumable_info = 49;
}

// Association between a Sku and a Business
message BusinessAssociationForSku {
  // business_id that this association refers to
  string business_id = 1;
  // [Optional] Override for the default l2 category which is the key into the taxonomy
  google.protobuf.StringValue l2_category_override = 2;
}

// Request for the GetSkuByDdId endpoint
message GetSkuByDdIdRequest {
  // Id of the SKU to get
  string ddid = 1;
  // is_consigned flag. True if searching for consigned inventory, otherwise false.
  // Null if searching for both consigned and owned inventory
  google.protobuf.BoolValue is_consigned = 2;
}

// Response for the GetSkuByDdId endpoint
message GetSkuByDdIdResponse {
  // Requested SKU
  Sku sku = 1;
}

// Request for the SearchSkuByName endpoint
message SearchSkuByNameRequest {
  // Term to search by
  string search_term = 1;
  // is_consigned flag. True if searching for consigned inventory, otherwise false.
  // Null if searching for both consigned and owned inventory
  google.protobuf.BoolValue is_consigned = 2;
}

// Response for the SearchSkuByName endpoint
message SearchSkuByNameResponse {
  // List of SKUs that match the search term. Max 3
  repeated Sku skus = 1;
}

// Request for the GetAllowedMenuCategories endpoint
message GetAllowedMenuCategoriesRequest {
  // Three letter code for the country
  string country = 1;
}

// Response for the GetAllowedMenuCategories endpoint
message GetAllowedMenuCategoriesResponse {
  // Names of the menu product categories allowed for the requested country
  repeated string allowed_product_category_names = 1;
}

// Request for the GetAllowedPhotoSources endpoint
message GetAllowedPhotoSourcesRequest {
  // Three letter code for the country
  string country = 1;
}

// Response for the GetAllowedPhotoSources endpoint
message GetAllowedPhotoSourcesResponse {
  // Allowed photo sources for the requested country
  repeated string allowed_photo_sources = 1;
}

// Request for the GetAllowedDescriptionSources endpoint
message GetAllowedDescriptionSourcesRequest {
  // Three letter code for the country
  string country = 1;
}

// Response for the GetAllowedDescriptionSources endpoint
message GetAllowedDescriptionSourcesResponse {
  // Allowed description sources for the requested country
  repeated string allowed_description_sources = 1;
}

// Request for the CreataeSku endpoint
message CreateSkuRequest {
  // SKU to be created
  Sku sku = 1;
  //[Optional] Reasoning for why sku creation is taking place
  google.protobuf.StringValue transaction_reason = 2;
}

// Response for the CreataeSku endpoint
message CreateSkuResponse {
  // ddid
  string ddid = 1;
  // [To be deprecated] Business IDs where we failed to add the SKU to the catalog
  repeated string failed_business_ids = 2;
  // Error that we got from the catalog when writing the SKU
  repeated CatalogError catalog_errors = 3;
}

// Request for the ModifySku endpoint
message ModifySkuRequest {
  // SKU to be modified. Will be determined by its ddid.
  Sku sku = 1;
  //[Optional] Reasoning for why modification is taking place
  google.protobuf.StringValue transaction_reason = 2;
}

// Response for the ModifySku endpoint
message ModifySkuResponse {
  // [To be deprecated] Business IDs where we failed to add, modify, and/or remove the SKU from the catalog
  repeated string failed_business_ids = 1;
  // Error that we got from the catalog when writing the SKU
  repeated CatalogError catalog_errors = 2;
}

// Errors when writing a SKU to the catalog
message CatalogError {
  // Business ID for which we failed to write the SKU
  string failed_business_id = 1;
  // Error message that we got from the catalog.
  string error_message = 2;
}

// Request for the GetSkuSuppressionReasons endpoint
message GetSkuSuppressionReasonsRequest {}

// Response for the GetSkuSuppressionReasons endpoint
message GetSkuSuppressionReasonsResponse {
  // List of valid reasons for Sku Supression
  repeated string reasons = 1;
}

// Request for the UpsertRegionalPrice endpoint
message UpsertRegionalPriceRequest {
  // [Required] Id of the sku of which to set the price
  string ddid = 1;
  // [Required] Id of the facility on which we set the price
  int32 facility_id = 2;
  // [Required] Price that we want the item to have in all the stores associated with the facility
  int32 price_in_cents = 3;
  // [Required] reason for applying regional price. Valid reasons can be found in sku_price_reasons table
  string reason = 4;
  // [Optional] Experimental prices
  repeated PricingExperimentOverride pricing_experiment_overrides = 5;
}

// Response for the UpsertRegionalPrice endpoint
message UpsertRegionalPriceResponse {}

// Request for the UpsertDiscountedPrice endpoint
message UpsertDiscountedPriceRequest {
  // [Required] Id of the sku of which to set the price
  string ddid = 1;
  // [Required] Id of the facility on which we set the price
  int32 facility_id = 2;
  // [Required] Can represent both discount percentage (1-99) inclusive OR the fixed discountedPrice. Value is dependent on the Discount Rule.
  int32 markdown_value = 3;
  // [Optional] Stp/regional price priority. Int between 0-99 with 0 being highest priority, 99 being lowest.
  google.protobuf.Int32Value priority = 4;
  // [Required] Represents the type of markdown
  DiscountRule rule = 5;
  // [Optional] reason for applying strike through price. Valid reasons can be found in sku_price_reasons table
  string strikethrough_price_reason = 6;
  // [Optional] Ids of custom discount collections for automated markdowns
  repeated string store_page_collection_ids = 7;
  // [Optional] Index of sku in automated markdown collection. Sort index determines order of sku in a collection.
  google.protobuf.StringValue collection_sort_index = 8;
  // [Optional] discount sellable quantity is the quantity we intend to sell on a discount.
  google.protobuf.Int32Value discount_sellable_qty = 9;
}

// Response for the UpsertDiscountedPrice endpoint
message UpsertDiscountedPriceResponse {}

// Types of Discount Rules
enum DiscountRule {
  // Unspecified discount rule
  DISCOUNT_RULE_UNSPECIFIED = 0;
  // Discount percentage
  DISCOUNT_RULE_DISCOUNT_PERCENTAGE = 1;
  // Fixed discounted price
  DISCOUNT_RULE_FIXED_DISCOUNTED_PRICE = 2;
}

// Request for the DeleteDiscountedPrice endpoint
message DeleteDiscountedPriceRequest {
  // [Required] Id of the sku of which to set the price
  string ddid = 1;
  // [Required] Id of the facility on which we set the price
  int32 facility_id = 2;
}

// Response for the DeleteDiscountedPrice endpoint
message DeleteDiscountedPriceResponse {}

// TODO: deprecate this endpoint
// Request for the SetSkuPriceForFacility endpoint
message SetSkuPriceForFacilityRequest {
  // [Required] Id of the sku of which to set the price
  string ddid = 1;
  // [Required] Id of the facility on which we set the price
  int32 facility_id = 2;
  // [Required] Price that we want the item to have in all the stores associated with the facility
  int32 price_in_cents = 3;
  // [Optional] Strikethrough pricing that we want to set for the item in the facility.
  // If you pass it as null we will remove strikethrough pricing.
  google.protobuf.Int32Value strikethrough_price_in_cents = 4;
  // [Optional] Stp/regional price priority. Int between 0-99 with 0 being highest priority, 99 being lowest.
  // High priority prices can override lower priority prices but not vice-versa. Default value is 99.
  google.protobuf.Int32Value priority = 5;
  // [Required] reason for applying regional and/or strikethrough price. Valid reasons can be found in sku_price_reasons table
  string reason = 6;
  // [Optional] Ids of custom discount collections for automated markdowns
  repeated string store_page_collection_ids = 7;
  // [Optional] Index of sku in automated markdown collection. Sort index determines order of sku in a collection.
  // Sort index is the same for a particular sku on the facility level.
  google.protobuf.StringValue collection_sort_index = 8;
  // [Optional] discount sellable quantity is the quantity we intend to sell on a discount.
  google.protobuf.Int32Value discount_sellable_qty = 9;
}

// Response for the SetSkuPriceForFacility endpoint
message SetSkuPriceForFacilityResponse {}

// Request for the GetSkuAutomatedMarkdownSellableInventory endpoint.
message GetSkuAutomatedMarkdownSellableInventoryRequest {
  // [Required] Id of the facility
  int32 facility_id = 1;
  // [Required] Id of the sku with discount
  string ddid = 2;
}

// Response for the GetSkuAutomatedMarkdownSellableInventory endpoint.
message GetSkuAutomatedMarkdownSellableInventoryResponse {
  // Existing automated markdown sellable inventory
  AutomatedMarkdownSellableInventory discount_inventory_info = 1;
}

// Request for the UpsertSkuAutomatedMarkdownSellableInventory endpoint.
message UpsertSkuAutomatedMarkdownSellableInventoryRequest {
  // [Required] new automated markdown sellable inventory
  AutomatedMarkdownSellableInventory discount_inventory_info = 1;
}

// Response for the UpsertSkuAutomatedMarkdownSellableInventory endpoint
message UpsertSkuAutomatedMarkdownSellableInventoryResponse {}

// AutomatedMarkdownSellableInventory object
message AutomatedMarkdownSellableInventory {
  // [Required] Id of the facility
  int32 facility_id = 1;
  // [Required] Id of the sku with discount
  string ddid = 2;
  // [Required] Quantity we intend to sell of the discounted sku.
  int32 discount_sellable_qty = 3;
  // [Optional] Ids of custom discount collections for automated markdowns
  repeated string store_page_collection_ids = 4;
  // [Optional] Index of sku in collection. Sort index determines order of sku in a collection.
  google.protobuf.StringValue collection_sort_index = 5;
}

// Request for the GetSkuInfoFromUrpc endpoint
message GetSkuInfoFromUrpcRequest {
  // ddsic to search by
  string ddsic = 1;
}

// Response for the GetSkuInfoFromUrpc endpoint
message GetSkuInfoFromUrpcResponse {
  // Partially populated sku
  Sku partial_sku = 1;
  // FieldMask to indicate which fields are trustworthy
  google.protobuf.FieldMask mask = 2;
}

// Request for the UpdateSkuPrice endpoint
message UpdateSkuPriceRequest {
  // ddid to update
  string ddid = 1;
  // Old price in cents
  int64 old_price_in_cents = 2;
  // New price in cents
  int64 new_price_in_cents = 3;
}

// Response for the UpdateSkuPrice endpoint
message UpdateSkuPriceResponse {
  // Percentage of change. Can be a positive or negative number.
  double change_percentage = 1;
}

// Request for the GetMerchantCodes endpoint
message GetMerchantCodesRequest {
  // Three letter code for the country
  string country = 1;
}

// Returns a list of MX_CODE associated with the given country,
// including DD MX_CODE for US and LCL for Canada. DD and LCL will have is_consigned = false in the MxCode message.
// Other MxCode will have is_consigned = true
message GetMerchantCodesResponse {
  // list of mx code
  repeated MxCode mx_codes = 1;
}

// Request for the CreateMxCode endpoint
message CreateMxCodeRequest {
  // new mxcode that will be created
  string mx_code = 1;
  // vendor id associated with new mxcode
  string vendor_id = 2;
}

// Response for the CreateMxCode endpoint
message CreateMxCodeResponse {}

// Request for the LinkSkuToBusiness endpoint
message LinkSkuToBusinessRequest {
  // ddid to link
  string ddid = 1;
  // business to link to to, with optional taxonomy override
  BusinessAssociationForSku business_association = 2;
}

// Response for the LinkSkuToBusiness endpoint
message LinkSkuToBusinessResponse {}

// Request for the UnlinkSkuFromBusiness endpoint
message UnlinkSkuFromBusinessRequest {
  // ddid to unlink
  string ddid = 1;
  // from business
  string business_id = 2;
}

// Response for the UnlinkSkuFromBusiness endpoint
message UnlinkSkuFromBusinessResponse {}

// Information pertating whether a SKU is a bundle build out of several components
message SkuBundleInfo {
  // Components that build the bundle
  repeated SkuComponentInfo components = 1;
}

// List of components of a particular SKU
message SkuComponentInfo {
  // [Required] ddid of the component
  string component_ddid = 1;
  // [Required] quantity of the component
  int64 quantity = 2;
}

// list of children that the parent converts into
message SkuConversionInfo {
  // Children that the parent converts into
  repeated ChildSkuInfo children = 1;
  // [Required] type of SKU conversion, enum string: BREAK_PACK, TRANSFORM_TEMPERATURE, EXPIRING_SOON, COMBINE_BUNDLE
  string conversion_type = 2;
}

// Information pertating whether a SKU is a
message ChildSkuInfo {
  // [Required] ddid of the child
  string child_ddid = 1;
  // [Required] quantity of how of child the parent converts into
  int64 quantity = 2;
}

// What type of consumable a sku is
enum SkuConsumableInfo {
  // Unspecified consumable info
  SKU_CONSUMABLE_INFO_UNSPECIFIED = 0;
  // Sku is a shopping bag
  SKU_CONSUMABLE_INFO_BAG = 1;
  // Sku is a sticker
  SKU_CONSUMABLE_INFO_STICKER = 2;
}
