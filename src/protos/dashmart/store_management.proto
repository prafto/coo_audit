syntax = "proto3";

package dashmart.v1;

import "common/code.proto";
import "dashmart/common.proto";
import "doordash.api/annotations.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option go_package = "dashmart_service";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.dashmart.v1";

// API's related to facility management in DashMart
service StoreManagementService {
  // Unified gateway config, comment out if using kreya for local testing
  option (doordash.api.service) = {
    port: 50051
    name: "dashmart-service-web"
    url: "dashmart-service-web.service.prod.ddsd"
    name_spaces: ["dashmart"]
    api_key_name: "DASHMART-API-KEY"
    owner: {
      name: "dashmart"
      id: "dashmart"
      slack_channel: "#dashmart-eng"
      email_alias: "dashmart-eng@doordash.com",
    }
  };
  // Get store temporary deactivation reasons
  rpc GetStoreDeactivationReasons(GetStoreDeactivationReasonsRequest) returns (GetStoreDeactivationReasonsResponse) {
    option (google.api.http) = {get: "/dashmart/v1/store_management/deactivation_reasons"};
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: TEST
      authorization: [DD_EMPLOYEE]
      target_products: [INTERNAL]
    };
  }
  // Temporarily deactivate stores
  rpc DeactivateStores(DeactivateStoresRequest) returns (DeactivateStoresResponse) {
    option (google.api.http) = {
      post: "/dashmart/v1/store_management/deactivate_stores",
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: TEST
      authorization: [DD_EMPLOYEE]
      target_products: [INTERNAL]
    };
  }
  // Temporarily activate stores
  rpc ActivateStores(ActivateStoresRequest) returns (ActivateStoresResponse) {
    option (google.api.http) = {
      post: "/dashmart/v1/store_management/activate_stores",
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: TEST
      authorization: [DD_EMPLOYEE]
      target_products: [INTERNAL]
    };
  }
}

// Store temporary deactivation reason
// See more details here, https://docs.google.com/spreadsheets/d/16io5Ci9d8o5M7a_4R7vMhOscRDXEOFldH72aTI7A2zg/edit?gid=811598007#gid=811598007
message StoreDeactivationReason {
  // Dashmart specific deactivate reason code
  string code = 1;
  // Dashmart specific deactivate reason display name, example Closure>>Incorrect Store Hours
  string display_name = 2;
}

// Store temporary deactivation info
message StoreDeactivationInfo {
  // Store temperory deactivation reason
  StoreDeactivationReason reason = 1;
  // Store deactivation notes
  string notes = 2;
}

// Request of get store temporary deactivation reasons
message GetStoreDeactivationReasonsRequest {}

// Response of get store temporary deactivation reasons
message GetStoreDeactivationReasonsResponse {
  // Store temporary deactivation reasons
  repeated StoreDeactivationReason reasons = 1;
}

// Request of temporarily deactivate stores
message DeactivateStoresRequest {
  // [Required] Temporarily deactivate stores request
  repeated string store_ids = 1;
  // [Required] Dashmart specific deactivate reason code
  string reason_code = 2;
  // [Optional] Store deactivation notes
  string notes = 3;
}

// Result of store update
message StoreUpdateResult {
  // Store id
  string store_id = 1;
  // Status code indicating the result of the operation
  code.Code code = 2;
  // [Optional] Populated if success is false
  string error_message = 3;
}

// Response of temporarily deactivate stores
message DeactivateStoresResponse {
  // Deactivation results of stores
  repeated StoreUpdateResult results = 1;
}

// Request of temporarily activate stores
message ActivateStoresRequest {
  // [Required] Store ids
  repeated string store_ids = 1;
}

// Response of temporarily activate stores
message ActivateStoresResponse {
  // Activation results of stores
  repeated StoreUpdateResult results = 1;
}
