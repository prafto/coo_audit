syntax = "proto3";

package dashmart.v1;

import "common/date.proto";
import "dashmart/common.proto";
import "doordash.api/annotations.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option go_package = "dashmart_service";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.dashmart.v1";

// APIs for dashmart service
service DashmartService {
  // Unified gateway config, comment out if using kreya for local testing
  option (doordash.api.service) = {
    port: 50051
    name: "dashmart-service-web"
    url: "dashmart-service-web.service.prod.ddsd"
    name_spaces: ["dashmart"]
    api_key_name: "DASHMART-API-KEY"
    owner: {
      name: "dashmart"
      id: "dashmart"
      slack_channel: "#dashmart-eng"
      email_alias: "dashmart-eng@doordash.com",
    }
  };
  // List all countries
  rpc ListCountries(ListCountriesRequest) returns (ListCountriesResponse);
  // List all facilities
  rpc ListFacilities(ListFacilitiesRequest) returns (ListFacilitiesResponse);
  // List all UOMs (units of measurement)
  rpc ListUoms(ListUomsRequest) returns (ListUomsResponse) {
    option deprecated = true;
  }
  // Look up an item by UPC
  rpc GetItemByUpc(GetItemByUpcRequest) returns (GetItemByUpcResponse);
  // Look up an item by item id
  rpc GetItemById(GetItemByIdRequest) returns (GetItemByIdResponse);
  // Look up block type by facility id and item id
  rpc GetBlockTypeByFacilityAndDdid(GetBlockTypeByFacilityAndDdidRequest) returns (GetBlockTypeByFacilityAndDdidResponse) {
    option (google.api.http) = {get: "/dashmart/v1/facility/{facility_id}/item/{ddid}/block_type"};
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: TEST
      authorization: [DD_EMPLOYEE]
      target_products: [INTERNAL]
    };
  }
  // Search for an item by item name
  rpc SearchItemsByName(SearchItemsByNameRequest) returns (SearchItemsByNameResponse);
  // Look up an item by UPC for receiving tool
  rpc GetItemByUpcForReceiving(GetItemByUpcForReceivingRequest) returns (GetItemByUpcForReceivingResponse);
  // Look up an item by item id for receiving tool
  rpc GetItemByIdForReceiving(GetItemByIdForReceivingRequest) returns (GetItemByIdForReceivingResponse);
  // Search for an item by item name for receiving tool
  rpc SearchItemsByNameForReceiving(SearchItemsByNameForReceivingRequest) returns (SearchItemsByNameForReceivingResponse);
  // Search for an item by item name and Po number
  rpc SearchItemsByNameWithPo(SearchItemsByNameWithPoRequest) returns (SearchItemsByNameWithPoResponse);
  // Update quantities after receiving an order
  rpc ReceiveOrder(ReceiveOrderRequest) returns (ReceiveOrderResponse) {
    option (google.api.http) = {
      post: "/dashmart/v1/receive_order",
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: TEST
      authorization: [DD_EMPLOYEE]
      target_products: [INTERNAL]
    };
    option (doordash.api.forward_headers) = {
      forward: [
        {field: "DD-OBO-User-ID"},
        {field: "tool_type"},
        {field: "facility-id"}]
    };
  }
  // Create new item
  rpc CreateItem(CreateItemRequest) returns (CreateItemResponse) {
    option deprecated = true;
  }
  // Create an exception in the receiving workflow
  rpc CreateReceivingException(CreateReceivingExceptionRequest) returns (CreateReceivingExceptionResponse);
  // Update an existing exception's status
  rpc UpdateReceivingExceptionStatus(UpdateReceivingExceptionStatusRequest) returns (UpdateReceivingExceptionStatusResponse);
  // Get exceptions
  rpc GetReceivingExceptions(GetReceivingExceptionsRequest) returns (GetReceivingExceptionsResponse);
  // Upload the list of item count tasks that need to happen.
  rpc SetItemCountTaskList(SetItemCountTaskListRequest) returns (SetItemCountTaskListResponse);
  // Get all vendors for a given facility
  rpc GetVendorsByFacilityId(GetVendorsByFacilityIdRequest) returns (GetVendorsByFacilityIdResponse);
  // Get all orders for a given vendor
  rpc GetOrdersForVendorAndFacility(GetOrdersForVendorAndFacilityRequest) returns (GetOrdersForVendorAndFacilityResponse);
  // Get credit requests
  rpc GetCreditRequestsForFacility(GetCreditRequestsForFacilityRequest) returns (GetCreditRequestsForFacilityResponse);
  // Mark credit request as completed or deleted
  rpc UpdateCreditRequestStatus(UpdateCreditRequestStatusRequest) returns (UpdateCreditRequestStatusResponse);
  // Search purchase orders
  rpc SearchPurchaseOrders(SearchPurchaseOrdersRequest) returns (SearchPurchaseOrdersResponse);
  // Get items associated with the given purchase order
  rpc GetPurchaseOrderItems(GetPurchaseOrderItemsRequest) returns (GetPurchaseOrderItemsResponse);
  // Check whether an item is deactivated in a facility
  rpc IsItemDeactivated(IsItemDeactivatedRequest) returns (IsItemDeactivatedResponse);
  // Get all the stores associated with a facility
  rpc GetStoresForFacility(GetStoresForFacilityRequest) returns (GetStoresForFacilityResponse) {
    option deprecated = true;
  }
  // Get all the items that are deactivated in any store associated with a particular facility
  rpc GetDeactivatedItemsPerStore(GetDeactivatedItemsPerStoreRequest) returns (GetDeactivatedItemsPerStoreResponse);
  // Update inventory information when putting item away to the bin
  rpc PutAwayItem(PutAwayItemRequest) returns (PutAwayItemResponse) {
    option deprecated = true;
  }
  // Get item locations for sales order
  rpc GetItemLocationsForSalesOrder(GetItemLocationsForSalesOrderRequest) returns (GetItemLocationsForSalesOrderResponse) {
    option deprecated = true;
  }
  // Pick item from bin
  rpc PickItemFromBin(PickItemFromBinRequest) returns (PickItemFromBinResponse) {
    option deprecated = true;
  }
  // [TO BE DEPRECATED]
  // Get credit request receiving session for the given facility
  rpc GetCrReceivingSessionsForFacility(GetCrReceivingSessionsForFacilityRequest) returns (GetCrReceivingSessionsForFacilityResponse);
  // [TO BE DEPRECATED]
  //  Get credit request items for the given receiving session
  rpc GetCrItemsForReceivingSession(GetCrItemsForReceivingSessionRequest) returns (GetCrItemsForReceivingSessionResponse);
  // List a list of credit request reasons
  rpc ListCreditRequestReasons(ListCreditRequestReasonsRequest) returns (ListCreditRequestReasonsResponse);
  // Get list of inventory adjustment reasons
  rpc GetInventoryAdjustmentReasons(GetInventoryAdjustmentReasonsRequest) returns (GetInventoryAdjustmentReasonsResponse);
  // Registers an Employee to a facility
  rpc RegisterEmployeeToFacility(RegisterEmployeeToFacilityRequest) returns (RegisterEmployeeToFacilityResponse);
  // Get Pos with credit request for a facility
  rpc GetPosWithCreditRequestsForFacility(GetPosWithCreditRequestsForFacilityRequest) returns (GetPosWithCreditRequestsForFacilityResponse);
  // Get the credit request items for a po
  rpc GetCreditRequestItemsForPo(GetCreditRequestItemsForPoRequest) returns (GetCreditRequestItemsForPoResponse);
  // Get a list of product quality and expiration details
  rpc ListProductQualityAndExpirationDetails(ListProductQualityAndExpirationDetailsRequest) returns (ListProductQualityAndExpirationDetailsResponse);
  // Resets an assigned order on the DMC app
  rpc ResetOrder(ResetOrderRequest) returns (ResetOrderResponse);
  // Hides an assigned order on the DMC app
  rpc HideOrder(HideOrderRequest) returns (HideOrderResponse);
  // Evaluate if an SKU is eligible for receiving
  rpc EvaluateSkuEligibilityForReceiving(EvaluateSkuEligibilityForReceivingRequest) returns (EvaluateSkuEligibilityForReceivingResponse);
  // Provide instructions for packaging of order
  rpc GetPackingInfo(GetPackingInfoRequest) returns (GetPackingInfoResponse) {
    option (google.api.http) = {
      post: "/dashmart/v1/packing-info",
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: TEST
      authorization: [CX_USER]
      role_based_authorization: {
        mode: ANY,
        roles: ["perm_dashmart_internal_tool"]
      }
      target_products: [CX]
    };
    option (doordash.api.forward_headers) = {
      forward: [
        {field: "DD-OBO-User-ID"}]
    };
  }
}

// Request to list all countries
message ListCountriesRequest {}

// Request to list all facilities
message ListFacilitiesRequest {}

// List of all countries
message ListCountriesResponse {
  // list of all countries
  repeated string country = 1;
}

// List of all facilities
message ListFacilitiesResponse {
  // list of facilities
  repeated Facility facilities = 1;
}

// Facility Info
message Facility {
  // facility id
  int32 facility_id = 1;
  // facility code
  string facility_code = 2;
  // merchant code (eg. DD, LCL)
  string mx_code = 3;
  // timezone of the facility
  string timezone = 4;
  // state/province of the facility
  string state_province = 5;
  // market id
  int32 market_id = 6;
}

// Request to list all UOMs
message ListUomsRequest {
  option deprecated = true;
}

// List of all UOMs
message ListUomsResponse {
  option deprecated = true;
  // list of uoms
  repeated Uom uoms = 1;
}

// UOM info
message Uom {
  option deprecated = true;
  // uom code
  string uom_code = 1;
  // uom description
  string uom_description = 2;
}

// Get item by UPC request
message GetItemByUpcRequest {
  reserved 3;
  reserved "vendor_id";

  // upc
  string upc = 1;
  // is_consigned flag. True if searching for consigned inventory, otherwise false.
  // Null if searching for both consigned and owned inventory
  google.protobuf.BoolValue is_consigned = 2;
}

// Get item by ID request
message GetItemByIdRequest {
  reserved 3;
  reserved "vendor_id";

  // id
  string id = 1;
  // is_consigned flag. True if searching for consigned inventory, otherwise false.
  // Null if searching for both consigned and owned inventory
  google.protobuf.BoolValue is_consigned = 2;
}

// Get block type by facility id and ddid request
message GetBlockTypeByFacilityAndDdidRequest {
  // facility id
  int32 facility_id = 1;
  // ddid
  string ddid = 2;
}

// Get item by item name request
message SearchItemsByNameRequest {
  reserved 3;
  reserved "vendor_id";

  // Term to search for in the item name
  string search_term = 1;
  // is_consigned flag. True if searching for consigned inventory, otherwise false.
  // Null if searching for both consigned and owned inventory
  google.protobuf.BoolValue is_consigned = 2;
}

// Get item by upc response
message GetItemByUpcResponse {
  // Item info
  Item item = 1;
}

// Get item by id response
message GetItemByIdResponse {
  // Item info
  Item item = 1;
}

// Get block type by facility id and ddid response
message GetBlockTypeByFacilityAndDdidResponse {
  // facility id
  int32 facility_id = 1;
  // ddid
  string ddid = 2;
  // The inventory block type information
  string inventory_block_type = 3;
}

// Get item by name response
message SearchItemsByNameResponse {
  // Item info
  repeated Item items = 1;
}

// Get item by UPC request
message GetItemByUpcForReceivingRequest {
  // upc
  string upc = 1;
  // is_consigned flag. True if searching for consigned inventory, otherwise false.
  // Null if searching for both consigned and owned inventory
  google.protobuf.BoolValue is_consigned = 2;
  // vendor name
  string vendor_name = 3;
}

// Get item by ID for receiving tool request
message GetItemByIdForReceivingRequest {
  // id
  string id = 1;
  // is_consigned flag. True if searching for consigned inventory, otherwise false.
  // Null if searching for both consigned and owned inventory
  google.protobuf.BoolValue is_consigned = 2;
  // vendor name
  string vendor_name = 3;
}

// Get item by item name for receiving tool request
message SearchItemsByNameForReceivingRequest {
  // Term to search for in the item name
  string search_term = 1;
  // is_consigned flag. True if searching for consigned inventory, otherwise false.
  // Null if searching for both consigned and owned inventory
  google.protobuf.BoolValue is_consigned = 2;
  // vendor name
  string vendor_name = 3;
}

// Get item by upc for receiving tool response
message GetItemByUpcForReceivingResponse {
  // Item for receiving tool
  ItemForReceiving item_for_receiving = 1;
}

// Get item by id for receiving tool response
message GetItemByIdForReceivingResponse {
  // Item for receiving tool
  ItemForReceiving item_for_receiving = 1;
}

// Get item(s) by name for receiving tool response
message SearchItemsByNameForReceivingResponse {
  // A list of items for receiving tool
  repeated ItemForReceiving items_for_receiving = 1;
}

// Get item by item name with po request
message SearchItemsByNameWithPoRequest {
  // Term to search for in the item name
  string search_term = 1;
  // purchase order number to search for items
  string po_nbr = 2;
}

// Get item by name with po response
message SearchItemsByNameWithPoResponse {
  // Item info
  repeated ItemInPo items = 1;
}

// Item info in Po
message ItemInPo {
  // Item info
  Item item = 1;
  // whether the item is in po
  bool is_in_po = 2;
}

//expiration type enum
enum ExpirationType {
  // Unknown expiration type
  EXPIRATION_TYPE_UNSPECIFIED = 0;
  // regular date
  EXPIRATION_TYPE_REGULAR_DATE = 1;
  // julian date code
  EXPIRATION_TYPE_JULIAN_DATE_CODE = 2;
  // ripeness level
  EXPIRATION_TYPE_RIPENESS_LEVEL = 3;
  // does not expire
  EXPIRATION_TYPE_DOES_NOT_EXPIRE = 4;
}

// product quality and expiration detail
message ProductQualityAndExpirationDetail {
  reserved 3;
  reserved "expiration_type_id";

  // expiration type for the sku
  ExpirationType expiration_type = 1;
  // if the expiration type is ripeness level, this field requires to specify
  google.protobuf.StringValue item_type = 2;
  // the list of ripeness level for the item type
  repeated RipenessLevel ripeness_levels = 4;
  // expiration type id string for the expiration type
  string expiration_type_id_string = 5;
}

// Item info
message Item {
  reserved 7, 10, 14;
  reserved "food_attributes", "expiration_detail", "vendor_specified_shelf_life";
  // item id
  string id = 1;
  // [TO BE DEPRECATED] item upc
  string upc = 2;
  // item name
  string menu_name = 3;
  // category - l2 category name, want to replace with ItemCategory
  string category_name = 4;
  // temperature - want to remove and have be a part of ItemCategory
  string temp = 5;
  // Item Category
  enum Category {
    // Unspecified
    CATEGORY_UNSPECIFIED = 0;
    // For Food
    CATEGORY_FOOD = 1;
  }
  // Category
  Category category = 6;
  // photo image url
  string photo_image_url = 8;
  // sellable unit of measure associated with this DDID (item ID)
  UnitOfMeasure sellable_uom = 9;
  // mx code
  MxCode mx_code = 11;
  // product quality and expiration detail object including expiration type and item ripeness type
  ProductQualityAndExpirationDetail product_quality_and_expiration_detail = 12;
  // [OPTIONAL] dashmart specified shelf life which associated with item id
  google.protobuf.Int32Value dashmart_specified_shelf_life = 13;
  // category id - l2 category id
  string category_id = 15;
  // a set of upcs
  repeated string upcs = 16;
}

// Item For Receiving Tool
message ItemForReceiving {
  // item
  Item item = 1;
  // vendor specified shelf life
  int32 vendor_specified_shelf_life = 2;
}

// Food Item info
message FoodAttributes {
  option deprecated = true;
  // Item required temperature
  string temp = 1;
}

// Receive Order request
message ReceiveOrderRequest {
  // received order
  ReceivedOrder order = 1;
  // user receiving the order
  string user_id = 2;
}

// Received Order Info
message ReceivedOrder {
  reserved 4;
  reserved "app_name";

  // facility id
  int32 facility_id = 1;
  // po number
  string po_nbr = 2;
  // list of received items
  repeated ReceivedItem items = 3;
}

// Represent a unit of measure "CS/6 would be type=UOM_TYPE_CASE, quantity=6. EA would be type=UOM_TYPE_EACH, quantity=1"
message UnitOfMeasure {
  // Types of UOM we support
  enum UomType {
    // unspecified
    UOM_TYPE_UNSPECIFIED = 0;
    // eaches
    UOM_TYPE_EACH = 1;
    // cases
    UOM_TYPE_CASE = 2;
  }
  // type of our uom
  UomType type = 1;
  // number of eaches contained in the above type. If above is "eaches", this must be 1.
  int32 quantity = 2;
}

// Received Item info
message ReceivedItem {
  reserved 5, 10;
  reserved "qty_uom", "purchase_uom_override";

  // item id
  string id = 1;
  // item upc
  string upc = 2;
  // item name
  string name = 3;
  // quantity received
  int32 quantity = 4;
  // expiration date
  date.Date expiration = 6;
  // receiving time stamp
  google.protobuf.Timestamp time_stamp = 7;
  // id for the item in the distributor's system [optional]
  string distributor_item_id_override = 8;
  // Details for the optional credit request [optional]
  CreditRequest credit_request = 9;
  // destination bin display name
  string destination_bin_display_name = 11;
}

// Bundle of information related to a credit request
message CreditRequest {
  reserved 5;
  reserved "reason";

  // whether the operator wants to request a credit
  bool request_credit_and_suppress_from_menu = 1;
  // whether the operator requests to not order this again
  bool do_not_order = 2;
  // How much credit are we requesting from the vendor
  int32 quantity = 3;
  // unit of measure in which we are requesting the credit
  UnitOfMeasure uom = 4;
  // reason why this credit request was issued
  CreditRequestReason cr_reason = 6;
}

// Status of a credit request item
enum CreditRequestItemStatus {
  // Unknown reason
  CREDIT_REQUEST_ITEM_STATUS_UNSPECIFIED = 0;
  // The credit request is pending
  CREDIT_REQUEST_ITEM_STATUS_PENDING = 1;
  // The credit request got completed
  CREDIT_REQUEST_ITEM_STATUS_COMPLETED = 2;
  // The credit request got cancelled
  CREDIT_REQUEST_ITEM_STATUS_CANCELLED = 3;
  // THe credit request was associated with an exception that has since been cleared.
  CREDIT_REQUEST_ITEM_STATUS_EXCEPTION_CLEARED = 4;
  // The credit request needs a photo as evidence
  CREDIT_REQUEST_ITEM_STATUS_NEEDS_PHOTO = 5;
  // The credit request is expired
  CREDIT_REQUEST_ITEM_STATUS_EXPIRED = 6;
  // The credit request is pending vendor decision
  CREDIT_REQUEST_ITEM_STATUS_PENDING_VENDOR_DECISION = 7;
}

// Status of a credit request
enum CreditRequestStatus {
  // Unknown reason
  CREDIT_REQUEST_STATUS_UNSPECIFIED = 0;
  // The credit request is waiting for info
  CREDIT_REQUEST_STATUS_WAITING_FOR_INFO = 1;
  // The credit request is ready to send
  CREDIT_REQUEST_STATUS_READY_TO_SEND = 2;
  // The credit request is sent to vendor
  CREDIT_REQUEST_STATUS_SENT_TO_VENDOR = 3;
  // The credit request is expired
  CREDIT_REQUEST_STATUS_EXPIRED = 4;
  // The credit request is completed
  CREDIT_REQUEST_STATUS_COMPLETED = 5;
}

// Received Order Response
message ReceiveOrderResponse {
  // True if items were reactivated successfully, otherwise false
  bool reactivated_items_successfully = 1;
}

// Add a new item to the catalog
message CreateItemRequest {
  option deprecated = true;
  // item upc
  string item_upc = 1;
  // item id
  string item_id = 2;
  // menu name
  string menu_name = 3;
  // distributor item id
  string distributor_item_id = 4;
  // brand name
  string brand_name = 5;
  // item description
  string item_description = 6;
  // item size
  double item_size = 7;
  // item unit
  string item_unit = 8;
  // item temp
  string item_temp = 9;
  // creator id
  string creator_id = 10;
  // facility id
  int32 facility_id = 11;
  // category name
  string category_name = 12;
}

// Create item response
message CreateItemResponse {
  option deprecated = true;
}

// Exception info
message ReceivingException {
  reserved 5;
  reserved 9;
  // exception ID
  string exception_id = 1;
  // user who created the exception
  string user_id = 2;
  // facility where this exception was created
  int32 facility_id = 3;
  // received item
  ReceivedItem item = 4;
  // exception status types
  enum Status {
    // Unspecified
    STATUS_UNSPECIFIED = 0;
    // Pending exception
    STATUS_PENDING = 1;
    // Exception marked as completed and associated item was not in catalog
    STATUS_COMPLETED_EXCEPTION = 2;
    // Exception marked as completed and associated item was found in catalog
    STATUS_COMPLETED_NONEXCEPTION = 3;
  }
  // exception status
  Status status = 6;
  // timestamp of exception creation
  google.protobuf.Timestamp created_at = 7;
  // purchase order number
  string po_nbr = 8;
}

// Create exception request
message CreateReceivingExceptionRequest {
  reserved 4;
  // user who created this request
  string user_id = 1;
  // facility where this request came from
  int32 facility_id = 2;
  // item that is an exception
  ReceivedItem item = 3;
  // po number
  string po_nbr = 5;
}

// Create exception response
message CreateReceivingExceptionResponse {}

// Update exception status request
message UpdateReceivingExceptionStatusRequest {
  // ID of exception to be updated
  string exception_id = 1;
  // exception status to update the exception to
  ReceivingException.Status status = 2;
  // user updating the receiving exception
  string user_id = 3;
}

// Update exception status response
message UpdateReceivingExceptionStatusResponse {}

// Get exceptions request
message GetReceivingExceptionsRequest {
  // facility to get exceptions for
  int32 facility_id = 1;
  // status to get exceptions for
  ReceivingException.Status status = 2;
}

// Get exceptions response
message GetReceivingExceptionsResponse {
  // exceptions
  repeated ReceivingException exceptions = 1;
}

// Purchase order info
message PurchaseOrder {
  // purchase order number
  string po_nbr = 1;
  // [TO BE DEPRECATED] USE VENDOR INFO INSTEAD
  // vendor associated with the provided product number
  string vendor = 2;
  // facility that expected the product order. String of the form 'USA : PHX-1'
  string facility = 3;
  // date when the order was placed
  date.Date order_placed_date = 4;
  // delivery date. If the order was delivered then the actual date. If not, the expected one.
  date.Date order_due_date = 5;
  // buyer's name
  string buyers_name = 6;
  // purchase order statuses
  enum Status {
    // unspecified
    STATUS_UNSPECIFIED = 0;
    // pending supervisor approval
    STATUS_PENDING_SUPERVISOR_APPROVAL = 1;
    // pending receipt
    STATUS_PENDING_RECEIPT = 2;
    // rejected by supervisor
    STATUS_REJECTED_BY_SUPERVISOR = 3;
    // partially received
    STATUS_PARTIALLY_RECEIVED = 4;
    // pending billing partially received
    STATUS_PENDING_BILLING_PARTIALLY_RECEIVED = 5;
    // pending bill
    STATUS_PENDING_BILL = 6;
    // fully billed
    STATUS_FULLY_BILLED = 7;
    // closed
    STATUS_CLOSED = 8;
  }
  // status of the purchase order
  Status status = 7;
  // receiving info of the purchase order
  ReceivingInfo receiving_info = 8;
  // vendor info
  Vendor vendor_info = 9;
}

// receiving info
message ReceivingInfo {
  // the earliest receiving session start time
  google.protobuf.Timestamp receiving_start_time = 1;
  // status of receiving session that is associated to the PO to be updated to
  ReceivingSessionStatus receiving_session_status = 2;
  // receiving_session_id
  google.protobuf.StringValue receiving_session_id = 3;
}

// Individual task to be listed
message UploadItemCountTask {
  reserved 4;
  reserved "reason";

  // item to count
  string item_id = 1;
  // facility in which to count
  int32 facility_id = 2;
  // date on which the count is requested
  date.Date date_requested = 3;
  // reason for the count
  string item_count_task_reason_id = 5;
}

// Request to the SetItemCountTask api
message SetItemCountTaskListRequest {
  // List of tasks to be uploaded.
  repeated UploadItemCountTask tasks = 1;
}

// Response to the SetItemCountTask api
message SetItemCountTaskListResponse {}

// Vendor info
message Vendor {
  // vendor name
  string vendor_name = 1;
  // vendor id created by IMS
  string vendor_id = 2;
  // vendor internal id created by NS
  int32 vendor_internal_id = 3;
  // vendor's mx_code
  MxCode mx_code = 4;
  // whether the vendor includes the unfinished POs
  google.protobuf.BoolValue has_unfinished_pos = 5;
}

// Request for the GetVendorsByFacilityId api
message GetVendorsByFacilityIdRequest {
  // facility id
  int32 facility_id = 1;
}

// Response for the GetVendorsByFacilityId api
message GetVendorsByFacilityIdResponse {
  // List of vendors for given facility
  repeated Vendor vendors = 1;
}

// Request for the GetOrdersForVendorAndFacility api
message GetOrdersForVendorAndFacilityRequest {
  // vendor info
  string vendor_name = 1;
  // facility id
  int32 facility_id = 2;
  // search date range
  date.DateRange date_range = 3;
}

// Response for the GetOrdersForVendorAndFacility api
message GetOrdersForVendorAndFacilityResponse {
  // orders for given vendor
  repeated PurchaseOrder orders = 1;
}

// Request for the GetCreditRequestsForFacility API
message GetCreditRequestsForFacilityRequest {
  reserved 2;
  reserved "status";
  // facility for which to get the credit request list
  int32 facility_id = 1;
  // status of credit request item to query
  CreditRequestItemStatus item_status = 3;
  // The flag to represent if the api only return the credit requests that are associated with receiving exception
  bool only_show_receiving_exception_request = 4;
}

// Response for the GetCreditRequestsForFacility API
message GetCreditRequestsForFacilityResponse {
  // credit requests
  repeated CreditRequestListItem credit_requests = 1;
}

// All the information required to act on a credit request
message CreditRequestListItem {
  reserved 11;
  reserved "credit_request_reason";

  // Id of the credit request
  string credit_request_id = 1;
  // Purchase order number of the receipt/exception used
  string po_nbr = 2;
  // UPC of the item for which we're requesting credit
  string upc = 3;
  // Id of the item for which we're requesting credit
  string item_id = 4;
  // Name of the item for which we're requesting credit
  string menu_name = 5;
  // Date when the credit request was created
  date.Date date_created = 6;
  // Vendor to whom we're requesting
  Vendor vendor = 7;
  // Item id in the distributor's system
  string distributor_item_id = 8;
  // How much quantity we're requesting back
  int32 credit_request_quantity = 9;
  // Credit request of how much
  UnitOfMeasure credit_request_uom = 10;
  // Whether the request can be completed or not. If the backend responds "false", the "Mark as completed" should be greyed out.
  bool can_be_completed = 12;
  // The status of the credit request item
  CreditRequestItemStatus credit_request_item_status = 13;
  // The item product photo url
  string item_product_photo_url = 14;
  // The uploaded photo url for the credit request item as CR evidence
  string cr_evidence_photo_url = 15;
  // The created time of credit request item
  google.protobuf.Timestamp created_time = 16;
  // The list of credit request item edit option
  repeated CreditRequestItemEditOption credit_request_edit_option = 17;
  // Reason for requesting the credit
  CreditRequestReason cr_reason = 18;
  // Vendor's unit of measure for this item
  UnitOfMeasure vendor_uom = 19;
  // How much quantity we're requesting back in vendor uom
  int32 vendor_quantity = 20;
  // [optional] The sent time for the credit request item
  google.protobuf.Timestamp sent_email_time = 21;
  // [optional] The sent user info for the credit request item
  UserInfo sent_email_user = 22;
}

// Request for UpdateCreditRequestStatus API
message UpdateCreditRequestStatusRequest {
  reserved 2;
  reserved "status";
  // Id for the credit request to update
  string credit_request_id = 1;
  // status of credit request item to update
  CreditRequestItemStatus item_status = 3;
  // edit option of credit request item to update
  CreditRequestItemEditOption credit_request_item_edit_option = 4;
}

// Response for UpdateCreditRequestStatus API
message UpdateCreditRequestStatusResponse {}

// Request for SearchPurchaseOrders API
message SearchPurchaseOrdersRequest {
  // facility ID of facility associated with purchase orders to search for
  int32 facility_id = 1;
  // purchase order number
  string po_nbr = 2;
  // name of vendor of purchase orders to search for
  string vendor_name = 3;
  // transaction date
  date.Date transaction_date = 4;
  // expected delivery date
  date.Date expected_delivery_date = 5;
  // transaction date range
  date.DateRange transaction_date_range = 6;
  // expected delivery date range
  date.DateRange expected_delivery_date_range = 7;
}

// Response for SearchPurchaseOrders API
message SearchPurchaseOrdersResponse {
  // purchase orders
  repeated PurchaseOrder purchase_orders = 1;
}

// Request for GetPurchaseOrderItems API
message GetPurchaseOrderItemsRequest {
  // PO number
  string po_nbr = 1;
}

// Response for GetPurchaseOrderItems API
message GetPurchaseOrderItemsResponse {
  // Purchase order items
  repeated PurchaseOrderItem purchase_order_items = 1;
  // quantity of total fully received items
  int32 total_fully_received_items = 2;
  // quantity of total expected items
  int32 total_expected_items = 3;
}

// ripeness level
message RipenessLevel {
  reserved 1;
  reserved 'display_string';

  // days to use to calculate expiration date for the ripeness level id
  int32 days_before_expiring = 2;
  // ripeness level display name
  string display_name = 3;
}

// Request for the ListProductQualityAndExpirationDetails API
message ListProductQualityAndExpirationDetailsRequest {
  // specify if the ripeness level data are included in the response
  bool including_ripeness_level = 1;
}

// Response for the ListProductQualityAndExpirationDetails API
message ListProductQualityAndExpirationDetailsResponse {
  // the list of expiration details
  repeated ProductQualityAndExpirationDetail product_quality_and_expiration_details = 1;
}

// Item-level details in a purchase order
message PurchaseOrderItem {
  reserved 2, 3, 6;
  reserved 'received_uom', 'order_quantity', 'order_uom';

  // Item
  Item item = 1;
  // Item ID from the Distributor
  string distributor_id = 4;
  // Quantity of this item that was received against this PO. 0 if not received
  int32 received_quantity = 5;
  // Lowest expiration date from all received instances of this item against this PO. Null if not received (or no expiration provided)
  date.Date expiration = 7;
  // whether the item is on po
  bool is_on_po = 8;
  // Expected quantity based on sellable UoM. -1 if unknown.
  int32 expected_quantity = 9;
  // Quantity of this item that was created for credit request against this PO. 0 if not created
  int32 credit_request_quantity = 10;
}

// Item level details for an adjustment request
message AdjustmentItem {
  reserved 4, 5;
  reserved "reason", "bin_display_name";
  // item id
  string item_id = 1;
  // adjusted quantity
  int32 adjusted_quantity = 2;
  // adjusted quantity uom
  UnitOfMeasure uom = 3;
  // adjustment reason string
  string adjustment_reason = 6;
}

// Request for IsItemDeactivated API
message IsItemDeactivatedRequest {
  // check all the items associated with this facility
  int32 facility_id = 1;
  // for whether this item is deactivated
  string item_id = 2;
}

// Response for IsItemDeactivated API
message IsItemDeactivatedResponse {
  reserved 1;
  reserved "item_is_deactivated";
  // a list of item menu statuses with store id and associated status
  repeated StateInStores state_in_stores = 2;
}

// Request for GetStoresForFacility
message GetStoresForFacilityRequest {
  option deprecated = true;
  // facility for which we want all associated stores
  int32 facility_id = 1;
}

// Message that represents a store that's associated to a particular facility.
message Store {
  option deprecated = true;
  // id of the store
  string store_id = 1;
}

// Response for GetStoresForFacility
message GetStoresForFacilityResponse {
  option deprecated = true;
  // stores associated with requested facility
  repeated Store stores = 1;
}

// Request for GetDeactivatedItemsPerStore
message GetDeactivatedItemsPerStoreRequest {
  // facility for which we'll get all deactivated items in all associated stores
  int32 facility_id = 1;
}

// Response for GetDeactivatedItemsPerStore
message GetDeactivatedItemsPerStoreResponse {
  // deactivated items
  repeated ItemsStateInStore deactivated_items = 1;
}

// State of a particular item in several stores
message ItemsStateInStore {
  // id of the item
  string item_id = 1;
  // name of the item
  string item_name = 2;
  // state of the item
  repeated StateInStores state_in_stores = 3;
}

// State of an item in a store
message StateInStores {
  // store
  string store_id = 1;
  // options for the reason of the adjustment
  enum MenuItemState {
    // Unspecified
    MENU_ITEM_STATE_UNSPECIFIED = 0;
    // The item is present in the store, and it's active
    MENU_ITEM_STATE_ACTIVATED = 1;
    // The item is present in the store and it's deactivated
    MENU_ITEM_STATE_DEACTIVATED = 2;
    // Unspecified
    MENU_ITEM_STATE_NOT_IN_STORE = 3;
    // Unknown
    MENU_ITEM_STATE_UNKNOWN = 4;
  }
  // state
  MenuItemState menu_item_state = 2;
  // optional store name
  google.protobuf.StringValue store_name = 3;
}

// Request for putAwayItem API
message PutAwayItemRequest {
  option deprecated = true;
  // facility id
  int32 facility_id = 1;
  // item location detail
  ItemLocationDetail item_location_detail = 2;
}

// Item location information
message ItemLocation {
  option deprecated = true;
  // bin location
  string bin_location = 1;
}

// Response for putAwayItem API
message PutAwayItemResponse {
  option deprecated = true;
}

// Request for getItemLocationsForSalesOrder API
message GetItemLocationsForSalesOrderRequest {
  option deprecated = true;
  // facility id
  int32 facility_id = 1;
  // sales order items
  repeated SalesOrderItem sales_order_items = 2;
}

// Item level details for a sales order
message SalesOrderItem {
  option deprecated = true;
  // item id
  string item_id = 1;
  // quantity
  int32 quantity = 2;
}

// Response for getItemLocationsForSalesOrder API
message GetItemLocationsForSalesOrderResponse {
  option deprecated = true;
  // item bin details
  repeated ItemLocationDetail item_location_details = 1;
}

// Location detail for an item
message ItemLocationDetail {
  option deprecated = true;
  // item id
  string item_id = 1;
  // item location
  ItemLocation item_location = 2;
  // quantity
  int32 quantity = 3;
}

// Request for pickItemFromBin API
message PickItemFromBinRequest {
  option deprecated = true;
  // facility id
  int32 facility_id = 1;
  // item bin detail
  ItemLocationDetail item_location_detail = 2;
}

// Response for pickItemFromBin API
message PickItemFromBinResponse {
  option deprecated = true;
}

// Get credit request receiving session for the given facility request
message GetCrReceivingSessionsForFacilityRequest {
  // facility id
  int32 facility_id = 1;

  // [optional] date range, default from now to past 2 weeks
  date.DateRange date_range = 2;
}

// Get credit request receiving session for the given facility response
message GetCrReceivingSessionsForFacilityResponse {
  // a list of receiving sessions
  repeated ReceivingSession sessions = 1;
}

// Credit request receiving session
message ReceivingSession {
  // receiving session id
  string receiving_session_id = 1;

  // facility id
  int32 facility_id = 2;

  // receiving start time
  google.protobuf.Timestamp receiving_start_time = 3;

  // [optional] receiving end time
  google.protobuf.Timestamp receiving_end_time = 4;

  // send deadline
  google.protobuf.Timestamp send_deadline = 5;

  // po number
  string po_nbr = 6;

  // vendor
  Vendor vendor = 7;

  // total count of credit request items
  int32 credit_request_items_total_count = 8;

  // credit request status
  CreditRequestStatus status = 9;

  // [optional] sent email time
  google.protobuf.Timestamp sent_email_time = 10;

  // [optional] sent email user
  UserInfo sent_email_user = 11;
}

//  Get credit request items for the given receiving session request
message GetCrItemsForReceivingSessionRequest {
  // Receiving session id
  string receiving_session_id = 1;
}

//  Get credit request items for the given receiving session response
message GetCrItemsForReceivingSessionResponse {
  reserved 4;
  // A list of credit request items
  repeated CreditRequestListItem credit_request_item = 1;
  // The number of tasks that are in above list and haven't uploaded photo
  int32 missing_uploaded_photo_count = 2;
  // The total number of credit request items in above list
  int32 total_credit_request_item_count = 3;
  // a boolean flag to notify the users can send email
  bool can_send_email = 5;
}

// Edit option of a credit request item
enum CreditRequestItemEditOption {
  // Unknown option
  CREDIT_REQUEST_ITEM_EDIT_OPTION_UNSPECIFIED = 0;
  // The credit request can be deleted
  CREDIT_REQUEST_ITEM_EDIT_OPTION_DELETE = 1;
  // [TO BE DEPRECATED] The credit request can be marked as left facility(completed)
  CREDIT_REQUEST_ITEM_EDIT_OPTION_ITEM_LEFT_FACILITY = 2;
  // item is given to vendor
  CREDIT_REQUEST_ITEM_EDIT_OPTION_GIVEN_TO_VENDOR = 3;
  // item is donated to charity
  CREDIT_REQUEST_ITEM_EDIT_OPTION_DONATED_TO_CHARITY = 4;
  // item is thrown away
  CREDIT_REQUEST_ITEM_EDIT_OPTION_THROWN_AWAY = 5;
  // item is added to inventory
  CREDIT_REQUEST_ITEM_EDIT_OPTION_ADDED_TO_INVENTORY = 6;
}

// Request to list a list of credit request reasons
message ListCreditRequestReasonsRequest {}

// Response of a list of credit request reasons
message ListCreditRequestReasonsResponse {
  // a list of credit request reasons
  repeated CreditRequestReason cr_reasons = 1;
}

// The reason of credit request
message CreditRequestReason {
  // enum string, i.e. NOT_ON_PO
  string enum_string = 1;
  // display string, i.e. Not on PO
  string display_string = 2;
  // description string, i.e. The item scanned is not what we ordered on our original Purchase Order.
  string description_string = 3;
}

// Request inventory adjustment reasons
message GetInventoryAdjustmentReasonsRequest {}

// Response inventory adjustment reasons
message GetInventoryAdjustmentReasonsResponse {
  // list of inventory adjustment reasons
  repeated InventoryAdjustmentReason inventory_adjustment_reasons = 1;
}

// The reason for the inventory adjustment
message InventoryAdjustmentReason {
  // reason id for the inventory adjustment reason
  string reason_id = 1;
  // reason, i.e. "(-) Bundle"
  string localized_display_string = 2;
  // inventory adjustment reason sign i.e. LOSS/GAIN
  InventoryAdjustmentReasonSign sign = 3;
}

// Sign for the inventory adjustment reason i.e. LOSS/GAIN
enum InventoryAdjustmentReasonSign {
  // inventory adjustment reason Unspecified
  INVENTORY_ADJUSTMENT_REASON_SIGN_UNSPECIFIED = 0;
  // inventory adjustment reason Loss
  INVENTORY_ADJUSTMENT_REASON_SIGN_LOSS = 1;
  // inventory adjustment reason Gain
  INVENTORY_ADJUSTMENT_REASON_SIGN_SIGN_GAIN = 2;
}

// Request for RegisterEmployeeToFacility
message RegisterEmployeeToFacilityRequest {
  reserved 2;
  // user email of employee being onboarded
  string user_email = 1;
  // Valid roles that can be assigned to employee
  enum Role {
    // Role unspecified
    ROLE_UNSPECIFIED = 0;
    // Shopper Role
    ROLE_SHOPPER = 1;
    // Supervisor Role
    ROLE_SUPERVISOR = 2;
    // No role (Offboarding an employee)
    ROLE_NONE = 3;
  }
  // role that should be assigned to employee
  Role role = 3;
  // facility id that employee is onboarding to
  int32 facility_id = 4;
  // Role id
  string role_id = 5;
}

// Response for RegisterEmployeeToFacility
message RegisterEmployeeToFacilityResponse {
  // store ids that employee was succesfully onboarded to
  repeated string store_id = 1;
}

// Request for GetPosWithCreditRequestsForFacility
message GetPosWithCreditRequestsForFacilityRequest {
  // facility id
  int32 facility_id = 1;
  // The credit request statuses for the request
  repeated CreditRequestStatus statuses = 2;
  // [optional] date range, default from now to past 2 weeks
  date.DateRange date_range = 3;
}

// Response for GetPosWithCreditRequestsForFacility
message GetPosWithCreditRequestsForFacilityResponse {
  // Pos that are associated with any credit request
  repeated PoWithCreditRequests pos_with_credit_requests = 1;
}

// Po with Credit request
message PoWithCreditRequests {
  // Po number
  string po_nbr = 1;
  // receiving sessions start time for the PO
  google.protobuf.Timestamp receiving_start_time = 2;
  // receiving sessions end time for the PO
  google.protobuf.Timestamp receiving_end_time = 3;
  // [Optional] send_deadline
  google.protobuf.Timestamp send_deadline = 4;
  // vendor info
  Vendor vendor = 5;
  // the total number of the credit request items under the PO with the status
  int32 credit_request_items_total_count = 6;
}

// Request for GetCreditRequestItemsForPoRequest
message GetCreditRequestItemsForPoRequest {
  // po number
  string po_nbr = 1;
  // The credit request item statuses for the request
  repeated CreditRequestItemStatus item_statuses = 2;
}

// Response for GetCreditRequestItemsForPoRequest
message GetCreditRequestItemsForPoResponse {
  // A list of credit request items
  repeated CreditRequestListItem credit_request_item = 1;
  // [Optional] a boolean flag to represent if the users can send email, if it is null, the sendEmail button in FE wont show up
  google.protobuf.BoolValue can_send_email = 2;
}

// Status of a receiving session
enum ReceivingSessionStatus {
  // Unknown reason
  RECEIVING_SESSION_STATUS_UNSPECIFIED = 0;
  // The PO is in transition, not delivered yet
  RECEIVING_SESSION_STATUS_PENDING_DELIVERY = 1;
  // The PO is delivered and the receiving session should be created
  RECEIVING_SESSION_STATUS_DELIVERED = 2;
  // The PO is start receiving session should be created
  RECEIVING_SESSION_STATUS_STARTED = 3;
  // The PO is completed and the receiving session should be closed
  RECEIVING_SESSION_STATUS_FINISHED = 4;
}

// Request for the ResetOrder API
message ResetOrderRequest {
  // Delivery UUID of the order to reset
  string delivery_uuid = 1;
}

// Response for the ResetOrder API
message ResetOrderResponse {}

// Request for the HideOrder API
message HideOrderRequest {
  // Delivery UUID of the order to hide
  string delivery_uuid = 1;
}

// Response for the HideOrder API
message HideOrderResponse {}

// Evaluate if an SKU is eligible for receiving Request
message EvaluateSkuEligibilityForReceivingRequest {
  // Ddid of the sku
  string ddid = 1;
  // Expiration date of the new sku
  date.Date expiration_date = 2;
}

// Evaluate if an SKU is eligible for receiving Response
message EvaluateSkuEligibilityForReceivingResponse {
  // whether the item bin is eligible for the next operation
  bool is_eligible = 1;
  // [Optional] the reason why the bin item is not eligible for
  google.protobuf.StringValue reason = 2;
}

// Provide instructions for packaging of order
message GetPackingInfoRequest {
  // store id of order
  string store_id = 1;
  // deliver uuid of order
  string delivery_uuid = 2;
}

// Provide list of instructions for packaging of order
message GetPackingInfoResponse {
  // list of instructions for packaging of order - could include packing, staging, etc.
  repeated PackingInfoInstruction instructions = 1;
}

// One componenet of instructions - could be packing, staging, etc.
message PackingInfoInstruction {
  // title of instructions
  string title = 1;
  // text containing instructions
  string text = 2;
  // photo to be displayed
  string photo_url = 3;
}
