syntax = "proto3";

package dashmart.v1;

import "dashmart/master_data_management.proto";

option go_package = "dashmart_service";
option java_multiple_files = true;
option java_package = "com.doordash.rpc.dashmart.v1";

// API's related to cadence workflow in DashMart
service CadenceWorkflowService {
  // Start mdm csv config consumption workflow
  rpc StartMdmCsvConfigConsumptionWorkflow(StartMdmCsvConfigConsumptionWorkflowRequest) returns (StartMdmCsvConfigConsumptionWorkflowResponse);
  // Get current running status of mdm csv config consumption workflow
  rpc GetStatusForMdmCsvConfigConsumptionWorkflow(GetStatusForMdmCsvConfigConsumptionWorkflowRequest) returns (GetStatusForMdmCsvConfigConsumptionWorkflowResponse);
  // Start Replen Output Workflow
  rpc StartReplenishmentOutputWorkflow(StartReplenishmentOutputWorkflowRequest) returns (StartReplenishmentOutputWorkflowResponse);
  // Get current running status of Replen Output Workflow
  rpc GetStatusForReplenishmentOutputWorkflow(GetStatusForReplenishmentOutputWorkflowRequest) returns (GetStatusForReplenishmentOutputWorkflowResponse);
  // Start Generate full site cycle count task workflow
  rpc StartGenerateFullSiteCycleCountTaskWorkflow(StartGenerateFullSiteCycleCountTaskWorkflowRequest) returns (StartGenerateFullSiteCycleCountTaskWorkflowResponse);
  // Send email for credit request
  rpc SendEmailForCreditRequest(SendEmailForCreditRequestRequest) returns (SendEmailForCreditRequestResponse);
  // Given list of facility ids perform full menu sync for each facility
  rpc StartFullMenuSyncForFacilities(StartFullMenuSyncForFacilitiesRequest) returns (StartFullMenuSyncForFacilitiesResponse);
}

// CSV type
enum MdmCsvType {
  reserved 1, 4, 5;
  reserved "MDM_CSV_TYPE_ITEM_VENDOR_FACILITY_CONFIG", "MDM_CSV_TYPE_ITEM_VENDOR_FACILITY_UPDATE_CONFIG", "MDM_CSV_TYPE_VENDOR_ROUTES";
  // Unknown type
  MDM_CSV_TYPE_UNSPECIFIED = 0;
  // Item_facility config
  MDM_CSV_TYPE_ITEM_FACILITY_CONFIG = 2;
  // Item_vendor_suppression config
  MDM_CSV_TYPE_ITEM_VENDOR_SUPPRESSION_CONFIG = 3;
  // New IVF creation workflow
  MDM_CSV_TYPE_CREATE_ITEM_VENDOR_FACILITY_CONFIGS = 6;
  // New IF creation workflow
  MDM_CSV_TYPE_CREATE_ITEM_FACILITY_CONFIGS = 7;
  // New VR creation workflow
  MDM_CSV_TYPE_CREATE_VENDOR_ROUTES = 8;
  // New IVS creation workflow
  MDM_CSV_TYPE_CREATE_ITEM_VENDOR_SUPPRESSION_CONFIGS = 9;
  // New IVF partial update
  MDM_CSV_TYPE_ITEM_VENDOR_FACILITY_UPDATE = 10;
  // IF partial update
  MDM_CSV_TYPE_ITEM_FACILITY_UPDATE = 11;
  // VR partial update
  MDM_CSV_TYPE_VENDOR_ROUTES_UPDATE = 12;
  // IVS partial update
  MDM_CSV_TYPE_ITEM_VENDOR_SUPPRESSION_UPDATE = 13;
}

//Request for StartMdmCsvConfigConsumptionWorkflow
message StartMdmCsvConfigConsumptionWorkflowRequest {
  //Bucket name which store CSV file in S3
  string csv_bucket_name = 1;
  // CSV key name in S3
  string csv_key_name = 2;
  // CSV type
  MdmCsvType csv_type = 3;
  // Location
  string aws_region = 4;
  // audit detail for MDM field update
  MdmChangeAuditDetail audit_detail = 5;
}

//Request for StartReplenishmentOutputWorkflow
message StartReplenishmentOutputWorkflowRequest {}

//Response for StartReplenishmentOutputWorkflow
message StartReplenishmentOutputWorkflowResponse {
  // Run id
  string run_id = 1;
}

//Response for StartMdmCsvConfigConsumptionWorkflow
message StartMdmCsvConfigConsumptionWorkflowResponse {
  // Run id
  string run_id = 1;
}

// Request for GetStatusForMdmCsvConfigConsumptionWorkflow
message GetStatusForMdmCsvConfigConsumptionWorkflowRequest {
  // CSV type
  MdmCsvType csv_type = 1;
  // Run id
  string run_id = 2;
}

// Workflow running status
enum WorkflowStatus {
  // Unknown status
  WORKFLOW_STATUS_UNSPECIFIED = 0;
  // Initialized
  WORKFLOW_STATUS_INIT = 1;
  // Downloading
  WORKFLOW_STATUS_DOWNLOADING = 2;
  // Error when downloading
  WORKFLOW_STATUS_ERROR_DOWNLOADING = 3;
  // Executing
  WORKFLOW_STATUS_EXECUTION = 4;
  // Error when executing
  WORKFLOW_STATUS_ERROR_EXECUTION = 5;
  // Uploading
  WORKFLOW_STATUS_UPLOADING = 6;
  // Error when uploading
  WORKFLOW_STATUS_ERROR_UPLOADING = 7;
  // Workflow completed
  WORKFLOW_STATUS_COMPLETED = 8;
}

// Response for GetStatusForMdmCsvConfigConsumptionWorkflow
message GetStatusForMdmCsvConfigConsumptionWorkflowResponse {
  // Workflow status
  WorkflowStatus status = 1;
  // Complete percentage, this will be a 0-100 integer.
  int32 percentage = 2;
  // Exception message that contains the reason for CSV upload failure.
  // Empty for every status except error statuses.
  string error_message = 3;
}

// Request for GetStatusForReplenishmentOutputWorkflow
message GetStatusForReplenishmentOutputWorkflowRequest {
  // Run id
  string run_id = 1;
}

// Response for GetStatusForReplenishmentOutputWorkflow
message GetStatusForReplenishmentOutputWorkflowResponse {
  // Workflow status
  WorkflowStatus status = 1;
  // Complete percentage, this will be a 0-100 integer.
  int32 percentage = 2;
  // Exception message that contains the reason for replen output failure.
  // Empty for every status except error statuses.
  string error_message = 3;
}

// Request for StartGenerateFullSiteCycleCountTaskWorkflowRequest
message StartGenerateFullSiteCycleCountTaskWorkflowRequest {
  // facility id
  int32 facility_id = 1;
}

// Response for StartGenerateFullSiteCycleCountTaskWorkflowResponse
message StartGenerateFullSiteCycleCountTaskWorkflowResponse {
  // run id
  string run_id = 1;
}

// Request to send email for credit request
message SendEmailForCreditRequestRequest {
  // Purchase Order number
  string po_nbr = 1;

  // when is_preview is true, email will be sent to user, not vendor.
  bool is_preview = 2;
}

// Response from sending email for credit request
message SendEmailForCreditRequestResponse {
  // run id
  string run_id = 1;
}

// Mapping of facility id to run id
message FacilityIdToRunId {
  // facility id
  int32 facility_id = 1;
  // runId of workflow
  string run_id = 2;
}

// Request for full menu sync for facilities
message StartFullMenuSyncForFacilitiesRequest {
  // list of facility id
  repeated int32 facility_ids = 1;
}

// Response from full menu sync for all facilities
message StartFullMenuSyncForFacilitiesResponse {
  // return facilityId to runId mapping for each facility id
  repeated FacilityIdToRunId facility_id_to_run_id = 1;
}
