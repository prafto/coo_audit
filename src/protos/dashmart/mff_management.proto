syntax = "proto3";

package dashmart.v1;

import "dashmart/facility_management.proto";
import "doordash.api/annotations.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option go_package = "dashmart_service";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.dashmart.v1";

// APIs related to mff management in DashMart
service MffManagementService {
  // Unified gateway config, comment out if using kreya for local testing
  option (doordash.api.service) = {
    port: 50051
    name: "dashmart-service-web"
    url: "dashmart-service-web.service.prod.ddsd"
    name_spaces: ["dashmart"]
    api_key_name: "DASHMART-API-KEY"
    owner: {
      name: "dashmart"
      id: "dashmart"
      slack_channel: "#dashmart-eng"
      email_alias: "dashmart-eng@doordash.com",
    }
    target_products: [INTERNAL]
  };

  /* MFF FACILITY MANAGEMENT */
  // Create a new MFF facility
  rpc CreateMffFacility(CreateMffFacilityRequest) returns (CreateMffFacilityResponse);
  // Edit an existing MFF facility
  rpc EditMffFacility(EditMffFacilityRequest) returns (EditMffFacilityResponse);
  // Get a list of MFF facilities
  rpc GetMffFacilities(GetMffFacilitiesRequest) returns (GetMffFacilitiesResponse);

  /* MFF SCHEDULE MANAGEMENT */
  // Get a specific MFF schedule
  rpc GetSpecificMffSchedule(GetSpecificMffScheduleRequest) returns (GetSpecificMffScheduleResponse) {
    option (google.api.http) = {get: "/dashmart/v1/mff_schedule"};
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: TEST
      authorization: [DD_EMPLOYEE]
      target_products: [INTERNAL]
    };
  }
  // Get all MFF schedules for a facility
  rpc GetAllMffSchedulesForFacility(GetAllMffSchedulesForFacilityRequest) returns (GetAllMffSchedulesForFacilityResponse);
  // Create a new MFF schedule
  rpc CreateMffSchedule(CreateMffScheduleRequest) returns (CreateMffScheduleResponse) {
    option (google.api.http) = {
      post: "/dashmart/v1/mff_schedule/create",
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: TEST
      authorization: [DD_EMPLOYEE]
      target_products: [INTERNAL]
    };
  }
  // Update an existing MFF schedule
  rpc UpdateMffSchedule(UpdateMffScheduleRequest) returns (UpdateMffScheduleResponse) {
    option (google.api.http) = {
      post: "/dashmart/v1/mff_schedule/update",
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: TEST
      authorization: [DD_EMPLOYEE]
      target_products: [INTERNAL]
    };
  }
  // Delete an existing MFF schedule
  rpc DeleteMffSchedule(DeleteMffScheduleRequest) returns (DeleteMffScheduleResponse) {
    option (google.api.http) = {
      post: "/dashmart/v1/mff_schedule/delete",
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: TEST
      authorization: [DD_EMPLOYEE]
      target_products: [INTERNAL]
    };
  }

  /* MFF ORDER MANAGEMENT */
  // Get MFF orders
  rpc GetMffOrders(GetMffOrdersRequest) returns (GetMffOrdersResponse) {
    option (google.api.http) = {get: "/dashmart/v1/mff_orders"};
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: TEST
      authorization: [DD_EMPLOYEE]
      target_products: [INTERNAL]
    };
  }
  // Start MFF by facility ids
  rpc StartMffByFacilityIds(StartMffByFacilityIdsRequest) returns (StartMffByFacilityIdsResponse) {
    option (google.api.http) = {
      post: "/dashmart/v1/mff_order/start_mff_by_facility_ids",
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: TEST
      authorization: [DD_EMPLOYEE]
      target_products: [INTERNAL]
    };
  }
  // Get MFF Order Status
  rpc ListMffStatus(ListMffStatusRequest) returns (ListMffStatusResponse) {
    option (google.api.http) = {get: "/dashmart/v1/mff_orders/statuses_list"};
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: TEST
      authorization: [DD_EMPLOYEE]
      target_products: [INTERNAL]
    };
  }

  // Cancel MFF Order
  rpc CancelMffOrder(CancelMffOrderRequest) returns (CancelMffOrderResponse) {
    option (google.api.http) = {
      post: "/dashmart/v1/mff_order/cancel",
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: TEST
      authorization: [DD_EMPLOYEE]
      target_products: [INTERNAL]
    };
  }

  /* MFF PO MANAGEMENT */
  // Create MFF PO
  rpc CreateMffPo(CreateMffPoRequest) returns (CreateMffPoResponse) {
    option (google.api.http) = {
      post: "/dashmart/v1/mff_order/create_mff_po",
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: TEST
      authorization: [DD_EMPLOYEE]
      target_products: [INTERNAL]
    };
  }
}

// Mff Facility info object
message MffFacilityInfo {
  // consumer_id is the id of the consumer who creates the mff order
  string consumer_id = 1;
  // facility_id is the id of the facility
  int32 facility_id = 2;
  // address_id for particular address in doordash
  int64 address_id = 3;
}

// Mff Schedule info object
message MffScheduleInfo {
  // facility_id is the id of the DashMart facility
  int32 facility_id = 1;
  // store_id of the 3p store we are ordering from
  string store_id = 2;
  // scheduled_at_local_time is the expected local time to receive the order
  string scheduled_at_local_time = 3;
  // is_enabled is a flag to enable ordering for this facility/store combo
  bool is_enabled = 4;
}

// Request for creating a new MFF facility
message CreateMffFacilityRequest {
  // MffFacilityInfo object
  MffFacilityInfo mff_facility = 1;
}

// Response for creating a new MFF facility
message CreateMffFacilityResponse {}

// Request for editing an existing MFF facility
message EditMffFacilityRequest {
  // MffFacilityInfo object
  MffFacilityInfo mff_facility = 1;
}

// Response for editing an existing MFF facility
message EditMffFacilityResponse {}

// Request for getting a list of MFF facilities
message GetMffFacilitiesRequest {}

// Response for getting a list of MFF facilities
message GetMffFacilitiesResponse {
  // List of MffFacilityInfo objects
  repeated MffFacilityInfo mff_facilities = 1;
}

// Request for getting a specific MFF schedule
message GetSpecificMffScheduleRequest {
  // facility_id of the dashmart we want the schedule for
  int32 facility_id = 1;
  // store_id of the 3p store we want the schedule for
  string store_id = 2;
}

// Response for getting a specific MFF schedule
message GetSpecificMffScheduleResponse {
  // MffScheduleInfo object
  MffScheduleInfo mff_schedule = 1;
}

// Request for getting all MFF schedules for a facility
message GetAllMffSchedulesForFacilityRequest {
  // List of facility ids
  repeated int32 facility_ids = 2;
}

// Response for getting all MFF schedules for a facility
message GetAllMffSchedulesForFacilityResponse {
  // List of MffScheduleInfo objects
  repeated MffScheduleInfo mff_schedules = 1;
}

// Request for creating a new MFF schedule
message CreateMffScheduleRequest {
  // MffScheduleInfo object
  MffScheduleInfo mff_schedule = 1;
}

// Response for creating a new MFF schedule
message CreateMffScheduleResponse {}

// Request for updating an existing MFF schedule
message UpdateMffScheduleRequest {
  // MffScheduleInfo object
  MffScheduleInfo mff_schedule = 1;
}

// Response for updating an existing MFF schedule
message UpdateMffScheduleResponse {}

// Request for deleting an existing MFF schedule
message DeleteMffScheduleRequest {
  // facility_id of the dashmart we want to delete the schedule for
  int32 facility_id = 1;
  // store_id of the 3p store we want to delete the schedule for
  string store_id = 2;
}

// Response for deleting an existing MFF schedule
message DeleteMffScheduleResponse {}

// Request for getting MFF orders
message GetMffOrdersRequest {
  reserved 3;
  reserved "pagination_id";
  // facility_id of the dashmart we want to get the orders for
  google.protobuf.Int32Value facility_id = 1;
  // status of the orders we want to get
  google.protobuf.StringValue mff_status = 2;
  // Pagination timestamp
  google.protobuf.Timestamp pagination_timestamp = 4;
  // Page size
  int32 page_size = 5;
}

// MFF order info object
message MffOrderInfo {
  // facility
  dashmart.v1.FacilityV2 facility = 1;
  //mff order id
  string mff_order_id = 2;
  // order uuid
  google.protobuf.StringValue order_uuid = 3;
  // mff po id
  google.protobuf.StringValue mff_po_id = 4;
  // mff status
  string mff_status = 5;
  // mff error message
  google.protobuf.StringValue mff_error_message = 6;
  // mff delivery id
  google.protobuf.StringValue mff_delivery_id = 7;
  // mff created at
  google.protobuf.Timestamp mff_created_at = 8;
  // mff cascade count
  int32 mff_cascade_count = 9;
  // po number associated with order
  google.protobuf.StringValue mff_po_number = 10;
}

// Response for getting MFF orders
message GetMffOrdersResponse {
  // List of MffOrderInfo objects
  repeated MffOrderInfo mff_orders = 1;
  // Pagination timestamp
  google.protobuf.Timestamp pagination_timestamp = 2;
}

// Request for starting MFF workflow
message StartMffByFacilityIdsRequest {
  // List of facility ids
  repeated int32 facility_ids = 1;
  // List of FBD order UUID: the order UUID of the DashMart order
  repeated string order_uuids = 2;
  // Denotes how the MFF WF was triggered
  TriggerSource trigger_source = 3;
}

// Response for starting MFF by facility ids
message StartMffByFacilityIdsResponse {
  // workflow run id
  string workflow_run_id = 1;
}

// TODO: Add link to valid values
// Trigger source for MFF workflow
message TriggerSource {
  // denotes how the MFF WF was triggered
  string trigger_source = 1;
}

// Request for getting MFF order status
message ListMffStatusRequest {}

// Response for getting MFF order status
message ListMffStatusResponse {
  // mff order status
  repeated string mff_order_statuses = 1;
}

// Request for canceling MFF order
message CancelMffOrderRequest {
  // mff order uuid
  string order_uuid = 1;
}

// Response for canceling MFF order
message CancelMffOrderResponse {}

// Request for creating MFF PO by order uuid
message CreateMffPoRequest {
  // order_uuid id
  string order_uuid = 1;
}

// Response for creating MFF PO by delivery id
message CreateMffPoResponse {}
