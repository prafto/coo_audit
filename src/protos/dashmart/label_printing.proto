syntax = "proto3";

package dashmart.v1;

import "doordash.api/annotations.proto";
import "google/api/annotations.proto";

option go_package = "dashmart_service";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.dashmart.v1";

// API's related to printing labels in DashMart
service LabelPrintingService {
  // Unified gateway config, comment out if using kreya for local testing
  option (doordash.api.service) = {
    port: 50051
    name: "dashmart-service-web"
    url: "dashmart-service-web.service.prod.ddsd"
    name_spaces: ["dashmart"]
    api_key_name: "DASHMART-API-KEY"
    owner: {
      name: "dashmart"
      id: "dashmart"
      slack_channel: "#dashmart-eng"
      email_alias: "dashmart-eng@doordash.com",
    }
    target_products: [INTERNAL]
  };

  // Initial test of an API to print the label on the packages
  rpc PrintOrderLabelForPackagePieces(PrintOrderLabelForPackagePiecesRequest) returns (PrintOrderLabelForPackagePiecesResponse) {
    option (google.api.http) = {
      post: "/dashmart/v1/label/order",
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: TEST
      authorization: [CX_USER]
      target_products: [INTERNAL]
    };
  }
}

// Request for the PrintOrderLabelForPackagePieces endpoint
message PrintOrderLabelForPackagePiecesRequest {
  // Delivery UUID of the order to print
  string delivery_uuid = 1;
  // Information about the number and types of pieces that have been used
  PackagePieceInfo package_pieces_info = 2;
}

// Response for the PrintOrderLabelForPackagePieces endpoint
message PrintOrderLabelForPackagePiecesResponse {
  // ZPL string to print the labels. Backend may decide to send a string per label or a single string for all labels.
  repeated string zpl_labels = 1;
}

// Information about pieces of
message PackagePieceInfo {
  // Number of ambient pieces
  int32 count_ambient_pieces = 1;
  // Number of refrigerated pieces
  int32 count_refrigerated_pieces = 2;
}
