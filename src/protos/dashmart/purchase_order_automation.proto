syntax = "proto3";

package dashmart.v1;

import "common/date.proto";
import "dashmart/dashmart.proto";
import "google/protobuf/timestamp.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.dashmart.v1";
option go_package = "dashmart_service";

// API's related to po automation in DashMart
service PurchaseOrderAutomationService {
  // Get purchase orders by facility, vendor, country, po status and po created date
  rpc GetPurchaseOrdersReplenishment (GetPurchaseOrdersReplenishmentRequest) returns (GetPurchaseOrdersReplenishmentResponse);
  // Get purchase order items by po id
  rpc GetPurchaseOrderItemsReplenishmentByPoId (GetPurchaseOrderItemsReplenishmentByPoIdRequest) returns (GetPurchaseOrderItemsReplenishmentByPoIdResponse);
  // Create new purchase order by facility, vendor and rank
  rpc CreatePurchaseOrdersReplenishment (CreatePurchaseOrdersReplenishmentRequest) returns (CreatePurchaseOrdersReplenishmentResponse);
  // Update purchase order status by po number
  rpc UpdatePurchaseOrderReplenishmentStatus (UpdatePurchaseOrderReplenishmentStatusRequest) returns (UpdatePurchaseOrderReplenishmentStatusResponse);
  // Update purchase order item
  rpc UpdatePurchaseOrderItemReplenishment (UpdatePurchaseOrderItemReplenishmentRequest) returns (UpdatePurchaseOrderItemReplenishmentResponse);
  // Get purchase order in Netsuite format
  rpc GetPurchaseOrderInNetSuiteFormat (GetPurchaseOrderInNetSuiteFormatRequest) returns (GetPurchaseOrderInNetSuiteFormatResponse);
  // List all valid purchase order replenishment statuses
  rpc ListValidPurchaseOrderReplenishmentStatuses (ListValidPurchaseOrderReplenishmentStatusesRequest) returns (ListValidPurchaseOrderReplenishmentStatusesResponse);
  // Get Ingested purchase order in Netsuite format
  rpc GetIngestedPurchaseOrderInNetsuiteFormat (GetIngestedPurchaseOrderInNetsuiteFormatRequest) returns (GetIngestedPurchaseOrderInNetsuiteFormatResponse);
  // Get last update time for ReplenTable
  rpc GetLastUpdateTimeForReplenTable (GetLastUpdateTimeForReplenTableRequest) returns (GetLastUpdateTimeForReplenTableResponse);
}

// Request for the GetIngestedPurchaseOrderInNetsuiteFormat API
message GetIngestedPurchaseOrderInNetsuiteFormatRequest {
  // purchase order id, UUID
  string po_id = 1;
}

// Response for the GetIngestedPurchaseOrderInNetsuiteFormat API
message GetIngestedPurchaseOrderInNetsuiteFormatResponse {
  // purchase order num
  string order_id = 1;
  // vendor id
  string vendor_id = 2;
  // department id
  string department_id = 3;
  // subsidiary id
  string subsidiary_id = 4;
  // purchase contract id
  string purchase_contract_id = 5;
  // transaction date
  string tran_date = 6;
  // delivery date
  string due_date = 7;
  // buyer Id
  string buyer_id = 8;
  // facility id
  string location = 9;
  // po items
  repeated IngestedPurchaseOrderItem items = 10;
}

// Ingested purchase order item in netsuite format
message IngestedPurchaseOrderItem {
  // item id
  string item_id = 1;
  // qty
  int32 qty = 2;
  // line id
  int32 line = 3;
}

// Request for GetPurchaseOrdersReplenishment
message GetPurchaseOrdersReplenishmentRequest {
  reserved 9;
  reserved "status_details";
  // facilities
  repeated int32 facility_ids = 1;
  // vendors
  repeated string vendor_ids = 2;
  // countries
  repeated string countries = 3;
  // purchase order statuses
  repeated PurchaseOrderReplenishmentStatus statuses = 4;
  // created dates
  date.DateRange created_dates = 5;
  // buyers name
  string buyers_name = 6;
  // Pagination token, this is based on po id
  string pagination = 7;
  // Page size
  int32 page_size = 8;
}

// Purchase order replenishment info
message PurchaseOrderReplenishment {
  reserved 9;
  reserved "status";
  // purchase order number in string, like POxxxx
  string po_nbr = 1;
  // buyers name
  string buyers_name = 2;
  // vendor
  dashmart.v1.Vendor vendor = 3;
  // facility
  dashmart.v1.Facility facility = 4;
  // timestamp of creation
  google.protobuf.Timestamp created_at = 5;
  // order date
  date.Date order_date = 6;
  // delivery date
  date.Date delivery_date = 7;
  // country
  string country = 8;
  // rank
  int32 rank = 10;
  // po id, this is an UUID
  string po_id = 11;
  // status detail of the purchase order
  PurchaseOrderReplenishmentStatusDetail status_detail = 12;
  // po total cost
  double total_cost = 13;
}

// Purchase order replenishment statuses
enum PurchaseOrderReplenishmentStatus {
  // unspecified
  PURCHASE_ORDER_REPLENISHMENT_STATUS_UNSPECIFIED = 0;
  // pending review
  PURCHASE_ORDER_REPLENISHMENT_STATUS_PENDING_REVIEW = 1;
  // review completed
  PURCHASE_ORDER_REPLENISHMENT_STATUS_REVIEW_COMPLETED = 2;
  // csv downloaded
  PURCHASE_ORDER_REPLENISHMENT_STATUS_CSV_DOWNLOADED = 3;
  // pending re-review
  PURCHASE_ORDER_REPLENISHMENT_STATUS_PENDING_RE_REVIEW = 4;
  // manually created
  PURCHASE_ORDER_REPLENISHMENT_STATUS_MANUALLY_CREATED = 5;
  // missed
  PURCHASE_ORDER_REPLENISHMENT_STATUS_MISSED = 6;
  // placed
  PURCHASE_ORDER_REPLENISHMENT_STATUS_PLACED = 7;
  // canceled
  PURCHASE_ORDER_REPLENISHMENT_STATUS_CANCELED = 8;
  // skipped
  PURCHASE_ORDER_REPLENISHMENT_STATUS_SKIPPED = 9;
}

// Purchase order replenishment reasons for statuses
enum PurchaseOrderReplenishmentStatusReason {
  // unspecified
  PURCHASE_ORDER_REPLENISHMENT_STATUS_REASON_UNSPECIFIED = 0;
  // no reason
  PURCHASE_ORDER_REPLENISHMENT_STATUS_REASON_NO_REASON = 1;
  // Placed - ordered late
  PURCHASE_ORDER_REPLENISHMENT_STATUS_REASON_PLACED_ORDERED_LATE = 2;
  // Placed - using filler skus
  PURCHASE_ORDER_REPLENISHMENT_STATUS_REASON_PLACED_USING_FILLER_SKUS = 3;
  // Canceled - vendor driven
  PURCHASE_ORDER_REPLENISHMENT_STATUS_REASON_CANCELED_VENDOR_DRIVEN = 4;
  // Canceled - DD driven
  PURCHASE_ORDER_REPLENISHMENT_STATUS_REASON_CANCELED_DD_DRIVEN = 5;
  // Skipped - A/P issues
  PURCHASE_ORDER_REPLENISHMENT_STATUS_REASON_SKIPPED_A_P_ISSUES = 6;
  // Skipped - below order min
  PURCHASE_ORDER_REPLENISHMENT_STATUS_REASON_SKIPPED_BELOW_ORDER_MIN = 7;
  // Skipped - do not need
  PURCHASE_ORDER_REPLENISHMENT_STATUS_REASON_SKIPPED_DO_NOT_NEED = 8;
  // Skipped - do not order weekly
  PURCHASE_ORDER_REPLENISHMENT_STATUS_REASON_SKIPPED_DO_NOT_ORDER_WEEKLY = 9;
  // Skipped - Inactive Vendor
  PURCHASE_ORDER_REPLENISHMENT_STATUS_REASON_SKIPPED_INACTIVE_VENDOR = 10;
  // Skipped - Not in Tableau/Replen
  PURCHASE_ORDER_REPLENISHMENT_STATUS_REASON_SKIPPED_NO_OUTPUT_GENERATED = 11;
  // Skipped - other
  PURCHASE_ORDER_REPLENISHMENT_STATUS_REASON_SKIPPED_OTHER = 12;
  // Skipped - prior order not delivered
  PURCHASE_ORDER_REPLENISHMENT_STATUS_REASON_SKIPPED_PRIOR_ORDER_NOT_DELIVERED = 13;
  // Skipped - space constraints
  PURCHASE_ORDER_REPLENISHMENT_STATUS_REASON_SKIPPED_SPACE_CONSTRAINTS = 14;
  // Skipped - supplier scheduling
  PURCHASE_ORDER_REPLENISHMENT_STATUS_REASON_SKIPPED_SUPPLIER_SCHEDULING = 15;
  // Skipped - site closure
  PURCHASE_ORDER_REPLENISHMENT_STATUS_REASON_SKIPPED_SITE_CLOSURE = 16;
}

// Purchase order replenishment status detail info
message PurchaseOrderReplenishmentStatusDetail {
  // purchase order replenishment status
  PurchaseOrderReplenishmentStatus status = 1;
  // purchase order replenishment reason for status
  PurchaseOrderReplenishmentStatusReason reason = 2;
  // purchase order replenishment note for reason
  string note = 3;
}

// Response for GetPurchaseOrdersReplenishmentResponse
message GetPurchaseOrdersReplenishmentResponse {
  // List of purchase orders
  repeated PurchaseOrderReplenishment purchase_orders = 1;
  // pagination token, this is based on po id
  string pagination = 2;
}

// Request for GetPurchaseOrderItemsReplenishmentByPoId
message GetPurchaseOrderItemsReplenishmentByPoIdRequest {
  // purchase order id
  string po_id = 1;
  // Pagination token, this is based on po_item_dtl_id
  string pagination = 2;
  // Page size
  int32 page_size = 3;
}

// Response for GetPurchaseOrderItemsReplenishmentByPoId
message GetPurchaseOrderItemsReplenishmentByPoIdResponse {
  // purchase order item details
  repeated PurchaseOrderItemReplenishment purchase_order_items = 1;
  // pagination token, this is based on po_item_dtl_id
  string pagination = 2;
}

// Item details in a purchase order replenishment
message PurchaseOrderItemReplenishment {
  reserved 16;
  reserved "total_cost";
  // item
  dashmart.v1.Item item = 1;
  // vendor
  dashmart.v1.Vendor vendor = 2;
  // facility
  dashmart.v1.Facility facility = 3;
  // Unit of measure of this item in the purchase order
  dashmart.v1.UnitOfMeasure uom = 4;
  // vendor sku
  string vendor_sku = 5;
  // quantity
  int32 quantity = 6;
  // purchase price per uom
  double purchase_price_per_uom = 7;
  // rank
  int32 rank = 8;
  // forecast sales
  double forecast_sales = 9;
  // units in flight, analogous to forecast_receipts in replen output table
  double units_in_flight = 10;
  // item id from the distributor
  string distributor_item_id = 11;
  // timestamp of creation
  google.protobuf.Timestamp created_at = 12;
  // order date
  date.Date order_date = 13;
  // delivery date
  date.Date delivery_date = 14;
  // po item detail id, this is an UUID
  string po_item_dtl_id = 15;
  // transaction date
  date.Date transaction_date = 17;
}

// Purchase order created type
enum PurchaseOrderType {
  // unspecified
  PURCHASE_ORDER_TYPE_UNSPECIFIED = 0;
  // manual purchase order
  PURCHASE_ORDER_TYPE_MANUAL = 1;
  // purchase order created from replen output
  PURCHASE_ORDER_TYPE_REPLENISHMENT_GENERATED = 2;
}

// Request for CreatePurchaseOrdersReplenishment
// This API tries to create Purchase orders for all the facilities and vendors.
// It returns the list of successfully created Purchase order numbers
// and error message of failed Purchase orders. 
message CreatePurchaseOrdersReplenishmentRequest {
  // list of facilities
  repeated int32 facility_ids = 1;
  // list of vendors, but we limit to only one vendor in the first stage
  repeated string vendor_ids = 2;
  // rank for the vendor
  int32 rank = 3;
  // first and last name of the buyer(First Name Last Name)
  string buyers_name = 4;
  // order date
  date.Date order_date = 5;
  // delivery date
  date.Date delivery_date = 6;
  // purchase order type
  PurchaseOrderType purchase_order_type = 7;
  // purchase order status note
  string status_note = 8;
}

// Contains details about the failed purchase order creation
message CreatePurchaseOrderFailure {
  // facility id
  int32 facility_id = 1;
  // vendor id
  string vendor_id = 2;
  // rank of the vendor
  int32 rank = 3;
  // details about the failure
  string error_reason = 4;
}

// Response for CreatePurchaseOrdersReplenishment
message CreatePurchaseOrdersReplenishmentResponse {
  // list of created purchase order numbers
  repeated string po_nbrs = 1;
  // list of purchase orders that we failed to create
  repeated CreatePurchaseOrderFailure create_po_failures = 2;
}

// Request for the UpdatePurchaseOrderStatus API
message UpdatePurchaseOrderReplenishmentStatusRequest {
  reserved 1;
  reserved "status";
  // purchase order id
  string po_id = 2;
  // status detail of the purchase order
  PurchaseOrderReplenishmentStatusDetail status_detail = 3;
}

// Response for the UpdatePurchaseOrderStatus API
message UpdatePurchaseOrderReplenishmentStatusResponse {}

// Contains input details about the update of the purchase order item
message UpdatePurchaseOrderItemReplenishmentInput {
  reserved 1;
  reserved "po_id";
  // po item detail id, UUID, search PO item table to update item
  string po_item_dtl_id = 2;
  // quantity, PO item table update
  int32 quantity = 3;
}

// Request for the UpdatePurchaseOrderItemReplenishment API
message UpdatePurchaseOrderItemReplenishmentRequest {
  // list of updates of purchase order items
  repeated UpdatePurchaseOrderItemReplenishmentInput update_po_item_input = 1;
  // purchase order id, UUID, search PO table to validate status
  string po_id = 2;
}

// Response for the UpdatePurchaseOrderItemReplenishment API
message UpdatePurchaseOrderItemReplenishmentResponse {
  // po updated total cost
  double updated_total_cost = 1;
}

// Request for the GetPurchaseOrderInNetSuiteFormat API
message GetPurchaseOrderInNetSuiteFormatRequest {
  // purchase order id, UUID
  string po_id = 1;
}

// Response for GetPurchaseOrderInNetSuiteFormat API
message GetPurchaseOrderInNetSuiteFormatResponse {
  // purchase order data rows in NetSuite format
  repeated NetSuitePurchaseOrderRowData row_data_list = 1;
}

// NetSuite format purchase order row data
message NetSuitePurchaseOrderRowData {
  // purchase order number in string, like POxxxx
  string external_id = 1;
  // vendor's name
  string vendor_name = 2;
  // with format 'Purchase Contract #xxx'
  string purchase_contract = 3;
  // 'duedate' for NetSuite
  string delivery_date = 4;
  // 'trandate' for NetSuite
  string order_date = 5;
  // purchase order number in string, like POxxxx
  string transaction_id = 6;
  // subsidiary
  string subsidiary = 7;
  // 'Marketplace'
  string department = 8;
  // class
  string class = 9;
  // '600 Ops & Support : 630 New Business S&O : 632 New Business Verticals'
  string custom_segment = 10;
  // COUNTRY: facility_code
  string location = 11;
  // transaction requester
  string custbody_nsts_gaw_tran_requester = 12;
  // DD id
  string purchase_item_line_item_id = 13;
  // final cs quantity
  string purchase_item_line_quantity = 14;
  // concat of uom "/" pack
  string purchase_item_line_units = 15;
  // pack * price
  string purchase_item_line_rate = 16;
  // null
  string to_be_emailed = 17;
  // null
  string email = 18;
  // "Ready" *** ONLY for EDI vendors
  string integration_status = 19;
}

// Request for the ListValidPurchaseOrderReplenishmentStatuses API
message ListValidPurchaseOrderReplenishmentStatusesRequest {
  // purchase order status details
  PurchaseOrderReplenishmentStatusDetail status_detail = 1;
}

// Response for the ListValidPurchaseOrderReplenishmentStatuses API
message ListValidPurchaseOrderReplenishmentStatusesResponse {
  // a list of purchase order status details
  repeated PurchaseOrderReplenishmentStatusDetail status_detail = 1;
}

// Request for the getLastUpdateTimeForReplenTable
message GetLastUpdateTimeForReplenTableRequest {}

// Response for the getLastUpdateTimeForReplenTable
message GetLastUpdateTimeForReplenTableResponse {
  // timestamp of last update
  google.protobuf.Timestamp last_updated_at = 1;
}

