syntax = "proto3";

package dashmart.v1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option go_package = "dashmart_service";
option java_multiple_files = true;
option java_package = "com.doordash.rpc.dashmart.v1";

// Iguazu event to populate blt_completed_cycle table in Snowflake
message BLTCompletedCycleCountEvent {
  // ID of the completed cycle count
  string completed_count_id = 1;
  // Item ID
  string item_id = 2;
  // Facility ID
  int32 facility_id = 3;
  // Bin ID
  string bin_id = 4;
  // Date the cycle count was requested
  google.protobuf.Timestamp date_requested = 5;
  // Date the cycle count was submitted
  google.protobuf.Timestamp date_counted = 6;
  // Counted quantity of item
  int32 quantity = 7;
  // Expiration date of item
  google.protobuf.Timestamp expiration_date = 8;
  // ID of user that submitted the cycle count
  string user_id = 9;
  // Status of the cycle count
  string status = 10;
  // Reason for cycle count
  string reason = 11;
  // Expected OH count prior to count
  int32 expected_count = 12;
  // ID of inventory adjustment created from this cycle count
  string inverntory_adjustment_id = 13;
}

// Iguazu event to populate blt_assigned_cycle_table in Snowflake
message BLTAssignedCycleCountEvent {
  // Item ID
  string item_id = 1;
  // Facility ID
  int32 facility_id = 2;
  // Bin ID
  string bin_id = 3;
  // Date the cycle count was requested
  google.protobuf.Timestamp date_requested = 4;
  // Reason for cycle count
  string reason = 5;
}

// Iguazu event to populate the exception_receiving table in Snowflake
message ReceivingExceptionEvent {
  // ID of the receiving exception
  string exception_recv_id = 1;
  // Facility ID
  int32 facility_id = 2;
  // Purchase order number
  string po_nbr = 3;
  // UPC of the item
  string item_upc = 4;
  // Item name
  string item_name = 5;
  // Quantity received in the purchase order
  int32 received_quantity = 6;
  // Unit of measurement of the quantity received
  string qty_uom = 7;
  // User ID of the user who first received the receiving exception
  string created_userid = 8;
  // Timestamp when the receiving exception was created
  google.protobuf.Timestamp created_dttm = 9;
  // User ID of the user who last updated the receiving exception
  string last_updated_userid = 10;
  // Timestamp of when the receiving exception was last updated
  google.protobuf.Timestamp last_updated_dttm = 11;
  // Expiration date of the item received
  google.protobuf.Timestamp expiration = 12;
  // Status of the receiving exception
  string status = 13;
}

// Item-level details of DashMart's receiving workflow
message ReceivingUnitDetailEvent {
  // ID of the associated receiving unit
  int64 receiving_unit_id = 1;
  // ID of this receiving unit detail event
  int64 receiving_unit_dtl_id = 2;
  // DDID of the received item
  string item_id = 3;
  // Number of units of the item received
  int32 received_quantity = 4;
  // Units of measurement of the received quantity
  string qty_uom = 5;
  // User ID of the user who received the item
  string created_userid = 6;
  // Timestamp when the item was received
  google.protobuf.Timestamp created_dttm = 7;
  // User ID of the user who last updated this receiving event
  string last_updated_userid = 8;
  // Timestamp of when this receiving event was last updated
  google.protobuf.Timestamp last_updated_dttm = 9;
  // Expiration date of the item received
  google.protobuf.Timestamp expiration = 10;
}

// Order-level information of DashMart's receiving workflow
message ReceivingUnitEvent {
  // ID of the receiving unit
  int64 receiving_unit_id = 1;
  // Label of the receiving unit
  string receiving_unit_label = 2;
  // Facility ID
  int32 facility_id = 3;
  // Purchase order number
  string po_nbr = 4;
  // User ID of the user who received the item
  string created_userid = 5;
  // Timestamp when the item was received
  google.protobuf.Timestamp created_dttm = 6;
  // User ID of the user who last updated this receiving event
  string last_updated_userid = 7;
  // Timestamp of when this receiving event was last updated
  google.protobuf.Timestamp last_updated_dttm = 8;
}

// Client side event when customer change facility in DashMart IMS app
message ReceivingChangeFacilityEvent {
  // Facility ID
  int32 id = 1;
  // Facility Code
  string name = 2;
}

// Client Side event when customer landing on MDM pages
message ReceivingDashmartMDMViewEvent {
  // User id of the user who visited the page
  int32 user_id = 1;
  // Area of the application where user landed
  string area = 2;
}

// Client Side event to track csv file uploaded from MDM pages
message ReceivingDashmartMDMCsvUploadEvent {
  // User id of the user who uploaded csv file
  int32 user_id = 1;
  // Area of the application where user uploaded csv
  string area = 2;
  // filename of the file what user uploaded
  string filename = 3;
  // file size of the file what user uploaded
  int32 file_size = 4;
}

// Client Side event to track edit submission by customer
message ReceivingDashmartMDMConfigEditSubmitEvent {
  // User id of the user who submit edit
  int32 user_id = 1;
  // Area of the application where user submit edit
  string area = 2;
  // config id of submitted config
  string config_id = 3;
  // status of edit, "progress | done | error"
  string status = 4;
}

// Client Side event to track search item search change events
message ReceivingDashmartItemSearchFilterChangeEvent {
  // User id of the user who used item search
  int32 user_id = 1;
  // Area of the application where user used item search
  string area = 2;
  // value for upc | ddid or selected name
  string value = 3;
  // search term what used during item search search
  string search_term = 4;
  // type of the search upc | ddid | name
  string type = 5;
}

// Client Side event to track search single dropdown change events
message ReceivingDashmartSearchFilterSingleChangeEvent {
  // User id of the user who change filter value
  int32 user_id = 1;
  // Area of the application where user changed the filter value
  string area = 2;
  // filter name. For example, facility, vendor, rank, etc.
  string filter_name = 3;
  // search term what used during value search
  string search_term = 4;
  // selected value in the filter
  string selected_value = 5;
}

// Client Side event to track delete submit by customer
message ReceivingDashmartMDMConfigDeleteSubmitEvent {
  // User id of the user who submit delete
  int32 user_id = 1;
  // Area of the application where user submit delete
  string area = 2;
  // config id of deleted config
  string config_id = 3;
  // status of delete, "progress | done | error"
  string status = 4;
}

// Client Side event when customer landing on Replenishment pages
message ReceivingDashmartReplenishmentViewEvent {
  // User id of the user who visited the page
  int32 user_id = 1;
  // Area of the application where user landed
  string area = 2;
}

// Client side event to track when user clicked on Create New PO button
// from the main page
message ReceivingDashmartReplenishmentCreatePOButtonClickEvent {
  // User id of the user who planning to create a PO
  int32 user_id = 1;
  // Area of the application where user planning to create a PO
  string area = 2;
  // country for what PO is going to be created
  string country = 3;
}

// Client side event to track what value user select in the form
message ReceivingDashmartReplenishmentCreatePOFormChangeEvent {
  // User id of the user who changing PO form
  int32 user_id = 1;
  // Area of the application where user chaning PO form
  string area = 2;
  // form field type. For example, MFC, Vendor, Rank, etc.
  string field_label = 3;
  // new form value base on type
  string field_value = 4;
}

// Client side event to track what values user submit to create a new PO
message ReceivingDashmartReplenishmentCreatePOSubmitEvent {
  // User id of the user who submit create po
  int32 user_id = 1;
  // Area of the application where user created po
  string area = 2;
  // created po numbers separated by comma
  string created_pos = 3;
  // status of create po, "progress | done | error"
  string status = 4;
}

// Client side event to track PO status change
message ReceivingDashmartReplenishmentPOStatusChangeEvent {
  // User id of the user who changed PO status
  int32 user_id = 1;
  // Area of the application where po was changed
  string area = 2;
  // po id
  string po_id = 3;
  // new status for PO
  string status = 4;
  // reason for change status
  string reason = 5;
  // note why po is changed
  string note = 6;
}

// Client side event to track PO Download action
message ReceivingDashmartReplenishmentPODownloadEvent {
  // User id of the user who downloading po
  int32 user_id = 1;
  // Area of the application where po is downloaded
  string area = 2;
  // po id
  string po_id = 3;
  // po download status
  string status = 4;
}

// Client side event to track PO filter for created dates
message ReceivingDashmartReplenishmentPOCreateDateFilterChangeEvent {
  // User id of the user who using create date filter
  int32 user_id = 1;
  // Area of the application where po is downloaded
  string area = 2;
  // created date from value
  string date_from = 3;
  // created date to value
  string date_to = 4;
}

// Client side event to track PO filter for buyer name
message ReceivingDashmartReplenishmentPOOwnerFilterChangeEvent {
  // User id of the user who using owner filter
  int32 user_id = 1;
  // Area of the application where filter is used
  string area = 2;
  // owner value will represent filter value
  string owner_value = 3;
}

// Web event to track custom expiration component usage
message CustomExpirationComponentUsageEvent {
  // User id of the user who using the component
  int32 user_id = 1;
  // Area of the application where filter is used(expiration component can be used in receving/cycle_count/expiration_management)
  string area = 2;
  // type of the date used (normal/julian)
  string type = 3;
  // duration of expiry used(in case of julian date what expiry duration was selected, empty in case of normal date)
  string duration = 4;
}

// Web event to track create/edit event for SKU catalog
message CreateOrEditSkuCatalogEvent {
  // type of action create create or edit
  string type = 1;
  // ddid of sku item
  string ddid = 2;
  // country what user selected
  string country = 3;
}

// Web event to track search ddid in SKU catalog
message SearchSkuInfoEvent {
  // type of the search, for example byDDID, byName
  string type = 1;
  // search term
  string search_term = 2;
  // country what user selected
  string country = 3;
}

// Web event to track view for all the pages
message DashmartInternalToolViewEvent {
  // page url
  string page = 1;
  // query string of the page
  string query_string = 2;
  // selected country if part of mdm tool
  string country = 3;
  // selected facility code if part of ims tool
  string facility_code = 4;
  // selected facility id if part of ims tool
  int32 facility_id = 5;
}

// Standard Assortment Tab Switch View
message DashmartStandardAssortmentTabViewSwitchEvent {
  // selected country
  string county = 1;
  // tab id
  string tab_id = 2;
}

// Add or Edit Assortment SKU
message DashmartStandardAssortmentActionEvent {
  // Capture in one table all the actions, such as: Create/Edit/Delete
  // it will be easy to query without joining each table
  string action_type = 1;
  // selected country
  string country = 2;
}

// Web event to track Bin Tool usage
message DashmartBinToolEvent {
  reserved 3;
  reserved "values";
  // User id of the user who visited the page
  string user_id = 1;
  // Area of the application where user landed
  string area = 2;
  // The type of bin tool used for
  string type = 4;
  // Selected facility id if part of ims tool
  int32 facility_id = 5;
  // The input of bin tool
  string input = 6;
}

// Web event to track when the new expiration is used in receiving
message DashmartExpirationAddOrEditEvent {
  // User id of the user who using owner filter
  int32 user_id = 1;
  // type of the date (normal/julian/ripeness) the item had originally
  string original_expiration_type_id = 2;
  // type of the date (normal/julian/ripeness) chosen during edit
  string new_expiration_type_id = 3;
  // Area of the application where filter is used(expiration component can be used in receving/expiration_management)
  string area = 4;
  // The DDID of the item
  string item_id = 5;
  // Quantity of item
  int32 quantity = 6;
  // New expiration date of item
  string new_expiration_date = 7;
  // Purchase order number
  string po_id = 8;
}

// Client side event to track when user used the SHift+enter hotkey and on which page
message DashmartShiftEnterHotKeyPressEvent {
  // User id of the user
  int32 user_id = 1;
  // Area of the application where hot key pressed
  string area = 2;
}

// Client side event to track when user submitted a credit request
message DashmartCreditRequestEvent {
  // User id of the user who using owner filter
  int32 user_id = 1;
  // Area of the application where credit request was requested
  string area = 2;
  // Quantity of items requested for credit
  int32 requested_quantity = 3;
  // Quantity of items received
  string received_quantity = 4;
  // The credit request reason
  string reason = 5;
  // Whether the credit request was automatic or not or edited
  string type = 6;
  // The DDID of the item
  string item_id = 7;
  // Purchase order number
  string po_number = 8;
}

// Client side event to track mff item availability
message DashmartMffCartOrderEvent {
  // Item availaibility for facility id
  int32 facility_id = 1;
  // Product type id from shopping list
  string product_type_id = 2;
  // Merchant store id
  int32 store_id = 3;
  // Merchant menu id
  int32 menu_id = 4;
  // Is item a substitute
  bool is_substitute = 5;
  // Dashmart ddid
  string ddid = 6;
  // Merchant item id
  string menu_item_id = 7;
  // Availability status of the item, "available | unavailable"
  string availability_status = 8;
}

// Client side event to track mff product item without quantity
message DashmartMffItemWithoutQuantityEvent {
  // Facility id of the item
  int32 facility_id = 1;
  // Product type id from shopping list
  string product_type_id = 2;
}

// Client side event to track unexpected mapping of mff items
message DashmartMffUnexpectedMappingEvent {
  //facility id for mapping issue
  int32 facility_id = 1;
  // Merchant store id
  int32 store_id = 2;
  // Merchant supplied item id
  string msid = 3;
  // Dashmart ddid(s)
  repeated string ddid = 4;
  // reason for unexpected mapping: "none | many"
  string unexpected_reason = 5;
}

// Client side event to track mff order subtotal low or high
message DashmartMffOrderSubtotalLowOrHighEvent {
  // Facility id of the order
  int32 facility_id = 1;
  // Cart uuid of the order
  string cart_uuid = 2;
  // Subtotal of the order
  float subtotal = 3;
  // Subtotal status of the order, "low | high"
  string subtotal_status = 4;
}

// Client side event to track receiving duplicated tabs
message DashmartReceivingDuplicatedTabsEvent {
  // po nbr for duplicated tab
  string po_nbr = 1;
  // facility id for duplicated tab
  int32 facility_id = 2;
}

// Client side event to track all actions for dashmart web internal common actions
message DashmartWebInternalCommonActions {
  // internal event name
  string internal_event_name = 1;
  // area of the webstite, mdm, ims, etc
  string web_area = 2;
  // json properties of the event
  google.protobuf.StringValue event_json_properties = 3;
}

// Event to track the task management session changes
message TaskManagementSessionEvent {
  // unique task session id to represent each task session
  string task_session_id = 1;
  // facility id of the facility that the task session belongs to
  int32 facility_id = 2;
  // user id of the user who executes the task
  string task_owner_user_id = 3;
  // task type id for the task that user is checking in
  string task_type_id = 4;
  // task type name for the task that user is checking in
  string task_type_name = 5;
  // check in time of the task session
  google.protobuf.Timestamp check_in_time = 6;
  // user id of the user who checks in the task
  string check_in_user_id = 7;
  // check out time of the task session
  google.protobuf.Timestamp check_out_time = 8;
  // user id of the user who checks out the task
  string check_out_user_id = 9;
  // currently 2 types: check-in or manual check out
  string event_type = 10;
}
