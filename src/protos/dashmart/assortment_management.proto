syntax = "proto3";

package dashmart.v1;

import "common/date.proto";
import "dashmart/dashmart.proto";
import "doordash.api/annotations.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option go_package = "dashmart_service";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.dashmart.v1";

// APIs related to assortment management in DashMart
service AssortmentManagementService {
  // Unified gateway config, comment out if using kreya for local testing
  option (doordash.api.service) = {
    port: 50051
    name: "dashmart-service-web"
    url: "dashmart-service-web.service.prod.ddsd"
    name_spaces: ["dashmart"]
    api_key_name: "DASHMART-API-KEY"
    owner: {
      name: "dashmart"
      id: "dashmart"
      slack_channel: "#dashmart-eng"
      email_alias: "dashmart-eng@doordash.com",
    }
  };
  // Get SKUs in assortment management
  rpc GetAssortmentSkus(GetAssortmentSkusRequest) returns (GetAssortmentSkusResponse) {
    option (google.api.http) = {get: "/dashmart/v1/assortment_management/assortment_skus"};
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: TEST
      authorization: [DD_EMPLOYEE]
      target_products: [INTERNAL]
    };
  }
  // Delete SKU from assortment management
  rpc DeleteAssortmentSku(DeleteAssortmentSkuRequest) returns (DeleteAssortmentSkuResponse) {
    option (google.api.http) = {
      delete: "/dashmart/v1/assortment_management/assortment_skus/{ddid}",
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: TEST
      authorization: [DD_EMPLOYEE]
      target_products: [INTERNAL]
    };
  }
  // Search assortments by name
  rpc SearchAssortmentsByName(SearchAssortmentsByNameRequest) returns (SearchAssortmentsByNameResponse);
  // Search product types by name
  rpc SearchProductTypesByName(SearchProductTypesByNameRequest) returns (SearchProductTypesByNameResponse);
  // Search product types by name
  rpc GetAssortmentsForProductTypes(GetAssortmentsForProductTypesRequest) returns (GetAssortmentsForProductTypesResponse);
  // Get product types
  rpc GetProductTypes(GetProductTypesRequest) returns (GetProductTypesResponse);
  // Get assortments
  rpc GetAssortments(GetAssortmentsRequest) returns (GetAssortmentsResponse);
  // Upsert an assortment sku and create product type if needed
  rpc UpsertAssortmentSku(UpsertAssortmentSkuRequest) returns (UpsertAssortmentSkuResponse) {
    option (google.api.http) = {
      put: "/dashmart/v1/assortment_management/assortment_skus",
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: TEST
      authorization: [DD_EMPLOYEE]
      target_products: [INTERNAL]
    };
  }
  // Get a product type by ID
  rpc GetProductTypeById(GetProductTypeByIdRequest) returns (GetProductTypeByIdResponse) {
    option (google.api.http) = {get: "/dashmart/v1/assortment_management/product_types/{product_type_id}"};
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: TEST
      authorization: [DD_EMPLOYEE]
      target_products: [INTERNAL]
    };
  }
  // Upsert a product type
  rpc UpsertProductType(UpsertProductTypeRequest) returns (UpsertProductTypeResponse) {
    option (google.api.http) = {
      put: "/dashmart/v1/assortment_management/product_types",
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: TEST
      authorization: [DD_EMPLOYEE]
      target_products: [INTERNAL]
    };
  }
  // Get a assortment by ID
  rpc GetAssortmentById(GetAssortmentByIdRequest) returns (GetAssortmentByIdResponse);
  // Delete an assortment
  rpc DeleteAssortment(DeleteAssortmentRequest) returns (DeleteAssortmentResponse);
  // Get facilities by country
  rpc GetFacilitiesByCountry(GetFacilitiesByCountryRequest) returns (GetFacilitiesByCountryResponse);
  // Upsert an assortment
  rpc UpsertAssortment(UpsertAssortmentRequest) returns (UpsertAssortmentResponse);
}

// Assortment object
message AssortmentSku {
  // DDID
  string ddid = 1;
  // SKU name
  string sku_name = 2;
  // SKU photo image URL
  string photo_image_url = 3;
  // Product type ID
  string product_type_id = 4 [deprecated = true];
  // Product type name
  string product_type_name = 5 [deprecated = true];
  // SKU rank in the product type (we currently have the constraint of a 1 to 1 relationship for skus and product types
  // so it is ok to have the rank at the SKU level here)
  int32 rank = 6 [deprecated = true];
}

// Product type object
message ProductType {
  // Product type ID (StringValue since we don't require ID for create)
  google.protobuf.StringValue product_type_id = 1;
  // Product type name
  string product_type_name = 2;
  // Three letter code for the country
  string country = 3;
  // Brand constraint
  google.protobuf.StringValue brand = 4;
  // Active date range
  date.DateRange date_range = 5;
  // Sku Count
  int64 sku_count = 6;
  // Is substitutable
  bool is_substitutable = 7;
}

// Assortment object
message Assortment {
  // Assortment ID (StringValue since we don't require ID for create)
  google.protobuf.StringValue assortment_id = 1;
  // Assortment name
  string assortment_name = 2;
  // Three letter code for the country
  string country = 3;
  // Whether the assortment is in all facilities
  bool in_all_facilities = 4;
}

// Just DDID and rank object
message DdidAndRank {
  // DDID
  string ddid = 1;
  // SKU rank in the product type
  int32 rank = 2;
}

// Just DDID and product type ID and name
message DdidAndProductTypeIdAndName {
  // DDID
  string ddid = 1;
  // Product type ID
  string product_type_id = 2;
  // Product type name
  string product_type_name = 3;
}

// Assortment list element object
message AssortmentListElement {
  // Assortment object
  Assortment assortment = 1;
  // Number of product types associated with the assortment
  int32 product_type_count = 2;
  // Number of facilities associated with the assortment
  int32 facility_count = 3;
}

// Request for the GetAssortmentSkus endpoint
message GetAssortmentSkusRequest {
  // Three letter code for the country
  string country = 1;
  // Pagination token
  string pagination_token = 2;
  // Page size
  int32 page_size = 3;
  // List of facility ids
  repeated int32 facility_ids = 4;
  // List of L2 categories
  repeated string l2_categories = 5;
  // List of assortment IDs
  repeated string assortment_ids = 6;
  // List of product type IDs
  repeated string product_type_ids = 7;
  // List of DDIDs
  repeated string ddids = 8;
  // Term to use to filter by SKU name
  google.protobuf.StringValue sku_search_term = 9;
  // Term to use to filter by product type name
  google.protobuf.StringValue product_type_search_term = 10;
}

// Response for the GetAssortmentSkus endpoint
message GetAssortmentSkusResponse {
  // List of SKUs specified by the given filters
  repeated AssortmentSku assortment_skus = 1;
  // Pagination token
  string pagination_token = 2;
  // List of DDID and product type ID and name
  repeated DdidAndProductTypeIdAndName ddid_and_product_types = 3;
}

// Request for the SearchAssortmentsByName endpoint
message SearchAssortmentsByNameRequest {
  // Three letter code for the country
  string country = 1;
  // Term to search by
  string search_term = 2;
}

// Response for the SearchAssortmentsByName endpoint
message SearchAssortmentsByNameResponse {
  // List of assortments
  repeated Assortment assortments = 1;
}

// Request for the SearchProductTypesByName endpoint
message SearchProductTypesByNameRequest {
  // Three letter code for the country
  string country = 1;
  // Term to search by
  string search_term = 2;
}

// Response for the SearchProductTypesByName endpoint
message SearchProductTypesByNameResponse {
  // List of product type
  repeated ProductType product_types = 1;
}

// Request for the DeleteAssortmentSku endpoint
message DeleteAssortmentSkuRequest {
  // DDID
  string ddid = 1;
}

// Response for the DeleteAssortmentSku endpoint
message DeleteAssortmentSkuResponse {}

// Request for the GetAssortmentsForProductTypes endpoint
message GetAssortmentsForProductTypesRequest {
  // Product type IDs to use to get the assortments
  repeated string product_type_ids = 1;
}

// Response for the GetAssortmentsForProductTypes endpoint
message GetAssortmentsForProductTypesResponse {
  // List of assortments
  repeated Assortment assortments = 1;
}

// Request for the GetProductTypes endpoint
message GetProductTypesRequest {
  // Three letter code for the country
  string country = 1;
  // Pagination token
  google.protobuf.StringValue pagination_token = 2;
  // Page size
  int32 page_size = 3;
}

// Response for the GetProductTypes endpoint
message GetProductTypesResponse {
  // List of product type
  repeated ProductType product_types = 1;
  // Pagination token
  string pagination_token = 2;
}

// Request for the GetAssortments endpoint
message GetAssortmentsRequest {
  // Three letter code for the country
  string country = 1;
  // Pagination token
  google.protobuf.StringValue pagination_token = 2;
  // Page size
  int32 page_size = 3;
}

// Response for the GetAssortments endpoint
message GetAssortmentsResponse {
  // List of assortments list elements
  repeated AssortmentListElement assortment_list_elements = 1;
  // Pagination token
  string pagination_token = 2;
}

// Request for the UpsertAssortmentSku endpoint
message UpsertAssortmentSkuRequest {
  // Three letter code for the country
  string country = 1;
  // DDID
  string ddid = 2;
  // Product type ID
  google.protobuf.StringValue product_type_id = 3 [deprecated = true];
  // List of assortment IDs associated with the product type
  repeated string assortment_ids = 4 [deprecated = true];
  // List of product type IDs to add the SKU to
  repeated string product_type_ids = 5;
}

// Response for the UpsertAssortmentSku endpoint
message UpsertAssortmentSkuResponse {}

// Request for the GetProductTypeById endpoint
message GetProductTypeByIdRequest {
  // Product type ID
  string product_type_id = 1;
}

// Response for the GetProductTypeById endpoint
message GetProductTypeByIdResponse {
  // Product type
  ProductType product_type = 1;
  // List of assortments associated with the product type
  repeated Assortment assortments = 2;
  // List of skus associated with the product type
  repeated AssortmentSku assortment_skus = 3;
  // List of DDIDs and ranks
  repeated DdidAndRank ddid_and_ranks = 4;
}

// Request for the UpsertProductType endpoint
message UpsertProductTypeRequest {
  // Product type
  ProductType product_type = 1;
  // List of assortment IDs associated with the product type
  repeated string assortment_ids = 2;
  // List of skus associated with the product type
  repeated DdidAndRank ddid_and_ranks = 3;
}

// Response for the UpsertProductType endpoint
message UpsertProductTypeResponse {}

// Request for the GetAssortmentById endpoint
message GetAssortmentByIdRequest {
  // Assortment ID
  string assortment_id = 1;
}

// Response for the GetAssortmentById endpoint
message GetAssortmentByIdResponse {
  // Assortment
  Assortment assortment = 1;
  // List of facility IDs associated with the assortment
  repeated Facility facilities = 2;
  // List of states associated with the assortment
  repeated string states = 3;
  // List of product types associated with the assortment
  repeated ProductType product_types = 4;
}

// Request for the DeleteAssortment endpoint
message DeleteAssortmentRequest {
  // Assortment ID
  string assortment_id = 1;
}

// Response for the DeleteAssortment endpoint
message DeleteAssortmentResponse {}

// Request for the GetFacilitiesByCountry endpoint
message GetFacilitiesByCountryRequest {
  // Country
  string country = 1;
}

// Response for the GetFacilitiesByCountry endpoint
message GetFacilitiesByCountryResponse {
  // Facilities
  repeated Facility facilities = 1;
}

// Request for the UpsertAssortment endpoint
message UpsertAssortmentRequest {
  // Assortment
  Assortment assortment = 1;
  // Facility IDs to associate with the assortment
  repeated int32 facility_ids = 2;
  // States to associate with the assortment
  repeated string states = 3;
  // Product type IDs to associate with the assortment
  repeated string product_type_ids_to_add = 4;
  // Product type IDs to disassociate with the assortment
  repeated string product_type_ids_to_remove = 5;
}

// Response for the UpsertAssortment endpoint
message UpsertAssortmentResponse {}
