syntax = "proto3";

package autonomous_delivery_platform.v1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_outer_classname = "Common";
option java_package = "com.doordash.rpc.autonomous_delivery_platform.v1";

// Type of establishment entities
enum EntityType {
  // Unknown type
  ENTITY_TYPE_UNSPECIFIED = 0;
  // Business entity
  ENTITY_TYPE_BUSINESS = 1;
  // Store entity
  ENTITY_TYPE_STORE = 2;
}

// Entity representing establishment levels.
message Entity {
  // Type of the entity
  EntityType type = 1;
  // ID of the entity
  int64 entity_id = 2;
}

// AV type
enum AvType {
  // Unspecified type
  AV_TYPE_UNSPECIFIED = 0;
  // Drone AV type
  AV_TYPE_DRONE = 1;
  // Sidewalk Robot
  AV_TYPE_SIDEWALK_ROBOT = 2;
  // Autonomous vehicle type
  AV_TYPE_AUTONOMOUS_VEHICLE = 3;
}

// Cart details
message CartPackageDetails {
  // Total weight of the cart in grams
  repeated Packages packages = 1;
}

// Cart packages
message Packages {
  reserved 4;
  reserved "package_id";
  // Total weight of the package in grams
  google.protobuf.Int32Value total_weight_grams = 1;
  // Volume of the order in centimeters
  Volume volume = 2;
  // Quantity of item in the order
  google.protobuf.Int32Value item_quantity = 3;
}

// Volume
message Volume {
  // Height in centimeters
  int64 height_cm = 1;
  // Width in centimeters
  int64 width_cm = 2;
  // Length in centimeters
  int64 length_cm = 3;
}

// Merchant details
message MerchantDetails {
  reserved 1;
  reserved "merchant_id";
  // Merchant Id
  string id = 4;
  // Merchant Name
  string merchant_name = 2;
  // Merchant Address
  CommonAddress merchant_address = 3;
}

// Customer details
message CustomerDetails {
  reserved 1, 4, 5, 6;
  reserved "customer_id", "customer_name", "handoff_instruction", "phone_number";
  // Customer Id
  string id = 7;
  // Customer Postal Address
  CommonAddress customer_address = 2;
  // Coordinate of the customer drop off location
  Coordinate coordinate = 3;
}

// Common Address
message CommonAddress {
  // Printable address
  google.protobuf.StringValue printable_address = 1;
  // Street address
  google.protobuf.StringValue street = 2;
  // City
  google.protobuf.StringValue city = 3;
  // Subpremise
  google.protobuf.StringValue subpremise = 4;
  // State
  google.protobuf.StringValue state = 5;
  // Zipcode
  google.protobuf.StringValue zip_code = 6;
  // Coordinate
  Coordinate coordinate = 7;
  // Country code
  google.protobuf.StringValue country_code = 8;
  // Timezone
  google.protobuf.StringValue timezone = 9;
}

// Provider details
message ProviderDetails {
  // Provider
  Provider provider = 1;
  // vehicle type
  AvType vehicle_type = 2;
  // Estimated duration
  google.protobuf.Int32Value estimated_duration = 3;
  // Estimated Pick up time
  google.protobuf.Timestamp estimated_pickup_time = 4;
  // Estimated drop off time
  google.protobuf.Timestamp estimated_dropoff_time = 5;
}

// Order details
message OrderDetails {
  reserved "order_id";
  reserved 1;
  // Pick up instructions
  google.protobuf.StringValue pick_up_instructions = 2;
  // Delivery id
  string delivery_id = 3;
  // External order id that is shown on a receipt
  string display_reference_text = 4;
}

// Vehicle provider identifier
enum Provider {
  // Undefined
  PROVIDER_UNSPECIFIED = 0;
  // Coco
  PROVIDER_COCO = 1;
  // Manna
  PROVIDER_MANNA = 2;
  // Cityhopper
  PROVIDER_CITYHOPPER = 3;
  // Internal testing
  PROVIDER_TEST = 4;
  // Coco EU
  PROVIDER_COCO_EU = 5;
  // Wing
  PROVIDER_WING = 6;
  // Flytrex
  PROVIDER_FLYTREX = 7;
  // Starship EU
  PROVIDER_STARSHIP_EU = 8;
  // Drone TEST provider
  PROVIDER_DRONE_TEST = 9;
  // DOORDASH_AIR
  PROVIDER_DOORDASH_AIR = 10;
  // Serve
  PROVIDER_SERVE = 11;
}

// Delivery status sent from vehicle
enum DeliveryStatus {
  // Unspecified
  DELIVERY_STATUS_UNSPECIFIED = 0;
  // Available
  DELIVERY_STATUS_AVAILABLE = 1;
  // Unable to accept temporarily
  DELIVERY_STATUS_UNABLE_TO_ACCEPT_TEMPORARILY = 2;
  // Heading to loading location
  DELIVERY_STATUS_HEADING_TO_LOADING_LOCATION = 3;
  // Waiting for loading
  DELIVERY_STATUS_WAITING_FOR_LOAD = 4;
  // Heading to dropoff location
  DELIVERY_STATUS_HEADING_TO_DROPOFF_LOCATION = 5;
  // Waiting for dropoff
  DELIVERY_STATUS_WAITING_FOR_DROPOFF = 6;
  // Completed
  DELIVERY_STATUS_DELIVERY_COMPLETED = 7;
  // Internal handoff initiated due to failure
  DELIVERY_STATUS_INTERNAL_HANDOFF = 8;
  // Failed vehicle waiting for instruction
  DELIVERY_STATUS_DELIVERY_FAILED = 9;
  // Terminal delivery failure leading to cancellation
  DELIVERY_STATUS_UNDELIVERABLE = 10;
  // Waiting for previously assigned deliveries to be completed.
  // Once the previous deliveries are complete, this delivery will
  // become active.
  DELIVERY_STATUS_FULFILLING_PREV_ORDER = 11;
}

// Contain information about delivery failure
message DeliveryFailure {
  // Standard delivery failure reasons
  enum DeliveryFailureReason {
    // Unspecified
    DELIVERY_FAILURE_REASON_UNSPECIFIED = 0;
    // Obstruction on road
    DELIVERY_FAILURE_REASON_OBSTRUCTION_ON_ROAD = 1;
    // Vehicle hardware failure
    DELIVERY_FAILURE_REASON_HARDWARE_FAILURE = 2;
    // Ineligible address
    DELIVERY_FAILURE_REASON_INELIGIBLE_ADDRESS = 3;
    // Weather
    DELIVERY_FAILURE_REASON_WEATHER = 4;
    // Loading failure
    DELIVERY_FAILURE_REASON_LOADING_FAILURE = 5;
    // Dropoff failure
    DELIVERY_FAILURE_REASON_DROPOFF_FAILURE = 6;
    // Consumer opt out of AV delivery
    DELIVERY_FAILURE_REASON_CONSUMER_OPT_OUT = 7;
    // Misc
    DELIVERY_FAILURE_REASON_MISC = 8;
  }
  // Delivery failure reason category
  DeliveryFailureReason delivery_failure_reason = 1;
  // Additional freeform string field to provide information about failure
  google.protobuf.StringValue addition_info = 2;
  // Air fleet delivery failure fields TODO: use oneof provider specific field in the versioning api doc
  AirFleetDeliveryFailureFields air_fleet_failure_fields = 3;
}

// Air fleet delivery failure fields
message AirFleetDeliveryFailureFields {
  // Action ADP needs to take
  enum Action {
    // UNSPECIFIED
    ACTION_UNSPECIFIED = 0;
    // Reassign the order to dasher
    ACTION_REASSIGN = 1;
    // Cancel the order
    ACTION_CANCEL = 2;
  }
  // Action ADP needs to take
  Action action = 1;
}

// Coordinate with latitude and longitude
message Coordinate {
  // Latitude
  string lat = 1;
  // Longitude
  string lng = 2;
}

// Provider details
message OrdersProviderDetails {
  // Delivery id of the order
  int64 delivery_id = 1;
  // Provider
  Provider provider = 2;
  // vehicle type
  AvType vehicle_type = 3;
  // icon image CDN url
  google.protobuf.StringValue icon_url = 4;
  // Estimated Pick up time
  google.protobuf.Timestamp estimated_pickup_time = 5;
  // Vehicle arrival at pickup time, null if vehicle hasn't arrived yet
  google.protobuf.Timestamp vehicle_arrived_at = 6;
}

// Contains information about consumer
message Consumer {
  // First and last name initial of the consumer e.g. John D. for John Doe
  string consumer_name = 1;
  // A postal address for delivery location
  string address = 2;
  // Latitude of the dropoff location
  double latitude = 3;
  // Longitude of the dropoff location
  double longitude = 4;
  // Handoff instruction provided by the consumer
  string handoff_instruction = 5;
  // Masked Cx phone number
  string phone_number = 6;
}

// Location
message Location {
  // Location latitude
  double latitude = 1;
  // Location longitude
  double longitude = 2;
}

// Reasons for rejection
enum RejectionReason {
  // Unknown reason
  REJECTION_REASON_UNSPECIFIED = 0;
  // Outside operation hours
  REJECTION_REASON_OUTSIDE_OPERATING_HOURS = 1;
  // Weather
  REJECTION_REASON_WEATHER = 2;
  // Operations pause
  REJECTION_REASON_OPERATIONS_PAUSE = 3;
  // Cart items incompatible
  REJECTION_REASON_CART_ITEMS_INCOMPATIBLE = 4;
  // Cart weight incompatible
  REJECTION_REASON_CART_WEIGHT_INCOMPATIBLE = 5;
  // Cart volume incompatible
  REJECTION_REASON_CART_VOLUME_INCOMPATIBLE = 6;
  // Vehicle unavailable
  REJECTION_REASON_VEHICLE_UNAVAILABLE = 7;
  // Operator unavailable
  REJECTION_REASON_OPERATOR_UNAVAILABLE = 8;
  // Unable route to pickup
  REJECTION_REASON_UNABLE_ROUTE_TO_PICKUP = 9;
  // Unable route to dropoff
  REJECTION_REASON_UNABLE_ROUTE_TO_DROPOFF = 10;
  // Distance not supported
  REJECTION_REASON_DISTANCE_NOT_SUPPORTED = 11;
  // Hardware issue
  REJECTION_REASON_HARDWARE_ISSUE = 12;
  // Software issue
  REJECTION_REASON_SOFTWARE_ISSUE = 13;
  // Integration issue
  REJECTION_REASON_INTEGRATION_ISSUE = 14;
  // Merchant disallowed
  REJECTION_REASON_MERCHANT_DISALLOWED = 15;
  // Pickup time cannot be met
  REJECTION_REASON_PICKUP_TIME_CANNOT_BE_MET = 16;
  // Dropoff time cannot be met
  REJECTION_REASON_DROPOFF_TIME_CANNOT_BE_MET = 17;
  // Other
  REJECTION_REASON_OTHER = 18;
}

// Cart object
message Object {
  // Object/Option Id
  string id = 1;
  // Weight of the object in grams
  double weight_grams = 2;
  // Volume of the object in centimeters
  Volume volume = 3;
  // Quantity of object
  int64 quantity = 4;
}

// CartItem contains meta information about items in a cart.
message CartItem {
  // Integer ID of the item
  string item_id = 1;
  // Number of items in the cart
  int32 quantity = 2;
  // Name of the item (nullable)
  google.protobuf.StringValue name = 3;
  // Merchant supplied item id (nullable)
  google.protobuf.StringValue merchant_supplied_item_id = 4;
  // nested item options detail
  repeated NestedOption nested_options = 5;
}

// ItemOption contains meta information about option selected for an item
message NestedOption {
  // Unique ID of the option
  string option_id = 1;
  // Quantity of the option
  int32 quantity = 2;
  // Name of the option item (nullable)
  google.protobuf.StringValue name = 3;
  // Merchant supplied item id for the option item (nullable)
  google.protobuf.StringValue merchant_supplied_item_id = 4;
  // nested options detail
  repeated NestedOption nested_options = 5;
}
