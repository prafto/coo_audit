syntax = "proto3";

import "common/money.proto";
import "common/service_client_config.proto";
import "geo-intelligence/region.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/wrappers.proto";

option go_package = "github.com/doordash/services-protobuf/generated/geo_intelligence";
option java_generic_services = true;
option java_multiple_files = true;
option java_outer_classname = "GeospatialGasStation";
option java_package = "geo.intelligence.gas_station.proto";

// gas station service
service GasStationService {
  option (service_client.client_config).service_name = "geo-intelligence";
  option (service_client.client_config).service_app = "web";

  // get gas stations for a specific location and radius
  rpc GetGasStations(GetGasStationsRequest) returns (GetGasStationsResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 10000;
    option (service_client.client_method_config).retry_config.max_attempts = 2;
    option (service_client.client_method_config).circuit_breaker_config.failure_rate_threshold = 0.2;
    option (service_client.client_method_config).circuit_breaker_config.minimum_request_threshold = 50;
    option (service_client.client_method_config).circuit_breaker_config.counter_sliding_window_millis = 60000;
    option (service_client.client_method_config).circuit_breaker_config.circuit_open_window_millis = 30000;
  }
}

// request
message GetGasStationsRequest {
  // lat and lng of dasher's location
  Coordinate location = 1;

  // searching radius
  Distance radius = 2;

  // if station buckets are included in the response
  google.protobuf.BoolValue include_station_buckets = 3;

  // if return cash price when available
  google.protobuf.BoolValue include_cash = 4;

  // correlation id of request
  google.protobuf.StringValue correlation_id = 5;

  // lat and lng of exploring location when in exploring mode
  Coordinate exploring_location = 6;
}

// response
message GetGasStationsResponse {
  // lowest price of gas stations in search radius
  money.MonetaryFields lowest_price = 1;

  // highest price of gas stations in search radius
  money.MonetaryFields highest_price = 2;

  // diff of highest and lowest price of gas stations in search radius
  money.MonetaryFields diff_price = 3;

  // recommended gas station in search radius
  GasStation recommended_station = 4;

  // Optional: gas stations bucket array in search radius
  repeated GasStationBucket buckets = 5;
}

// gas station bucket type
message GasStationBucket {
  // radius of the bucket e.g. within 5 miles or 2 km
  Distance radius = 1;

  // gas stations list
  repeated GasStation stations = 2;
}

// gas station type
message GasStation {
  // id of gas station
  google.protobuf.StringValue id = 1;

  // name of gas station
  google.protobuf.StringValue name = 2;

  // lat and lng of gas station
  Coordinate location = 3;

  // price of gas station
  money.MonetaryFields display_price = 4;

  // if this price is cash
  google.protobuf.BoolValue is_cash = 6;

  // saving price of this station compared to highest price
  money.MonetaryFields saving_price = 7;

  // distance to the current location
  Distance distance = 8;

  // time to travel from current location in seconds
  google.protobuf.Duration duration = 9;

  // poly lines from current location
  google.protobuf.StringValue encoded_polyline = 10;

  // opening hours of gas station
  google.protobuf.StringValue opening_hours = 11;

  // amenities of gas stations
  repeated google.protobuf.StringValue amenities = 12;

  // route legs from current location
  repeated RouteLeg route_legs = 13;

  // address string of gas station
  google.protobuf.StringValue address = 14;

  // address object of gas station
  GasStationAddress station_address = 15;
}

// Route Leg
message RouteLeg {
  // origin of the leg
  Coordinate start_location = 1;

  // destination of the leg
  Coordinate end_location = 2;
}

// Distance unit
enum DistanceUnit {
  // unspecified distance unit
  UNSPECIFIED_DISTANCE_UNIT = 0;

  // distance in miles
  DISTANCE_UNIT_MILES = 1;

  // distance in KM
  DISTANCE_UNIT_KM = 2;
}

// Distance
message Distance {
  // value of distance
  google.protobuf.DoubleValue value = 1;

  // unit of distance
  DistanceUnit unit = 2;
}

// Gas station address
message GasStationAddress {
  // first line of gas station address
  google.protobuf.StringValue address_first = 1;

  // second line of gas station address
  google.protobuf.StringValue address_second = 2;

  // locality of gas station address
  google.protobuf.StringValue locality = 3;

  // administrative area of gas station address
  google.protobuf.StringValue administrative_area = 4;

  // country of gas station address
  google.protobuf.StringValue country = 5;

  // postal code of gas station address
  google.protobuf.StringValue postal_code = 6;
}
