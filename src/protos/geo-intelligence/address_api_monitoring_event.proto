syntax = "proto3";

package geo_intelligence.v1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option go_package = "github.com/doordash/services-protobuf/generated/geo_intelligence";
option java_generic_services = true;
option java_multiple_files = true;
option java_outer_classname = "AddressApiMonitoringEvents";
option java_package = "geo_intelligence.address.api.monitoring.proto";

// Event to monitor autocomplete API calls to vendor
// For every address returned from Autocomplete, there will be a different event published.
message AddressAutocompleteEvent {
  // A combination of service provider, data provider and version of algorithm used to generate the response
  // Example:
  // 1. LEGACY
  // 2. NECTAR
  // 3. PRECISELY
  // 4. NECTAR_ML
  // 5. NECTAR_ML_HYBRID_DATA
  string request_vendor = 1;
  // json form of the request
  string grpc_request = 2;
  // json form of the response
  string grpc_response = 3;
  // id to join autocomplete addresses returned together in the same response
  // note that this field is populated with the request uuid and is joinable to request_uuid in
  // SavedAddressAutocompleteEvent and InterpolatedAddressAutocompleteEvent
  string response_uuid = 4;
  // is the response for a shadow
  double is_shadow = 5;
  // number of addresses in response
  int32 response_count = 6;
  // NOTE: values below are nullable if response count is 0
  // source id of the address in response
  google.protobuf.StringValue response_source_id = 7;
  // formatted address in response
  google.protobuf.StringValue formatted_address = 8;
  // latitude of the address in response
  google.protobuf.DoubleValue response_lat = 9;
  // longitude of the address in response
  google.protobuf.DoubleValue response_lng = 10;
  // grpc context json as string
  google.protobuf.StringValue grpc_context = 11;
}

// Event to monitor reverse geocoding API calls to vendor
// For every address returned from Reverse Geocoding, there will be a different event published.
// The whole set of events can be assembled by using their common correlated UUID.
message AddressReverseGeocodingEvent {
  // the latitude input used to construct the reverse geocoding request
  double request_lat = 1;
  // the longitude input used to construct the reverse geocoding request
  double request_lng = 2;
  // the request body represented in JSON form
  string raw_request_body = 3;
  // the context in which this request was sent, can be:
  // 1. AUTOCOMPLETE
  // 2. REVERSE-GEOCODING
  // 3. GEOCODING
  string request_context = 4;
  // UUID used to track other requests (to Precisely or other vendors) made alongside this request
  // For example, if we geocode multiple autocomplete results returned autocomplete provider, all the geocode
  // requests AND the autocomplete request will have the same correlation uuid
  string request_correlation_uuid = 5;
  // the vendor of this request, options are:
  // 1. LEGACY
  // 2. PRECISELY
  string request_vendor = 6;
  // the country code used in the request; empty string if omitted
  string request_country = 7;

  // TRUE if vendor returned a result for the request, and FALSE if not
  bool response_result_found = 8;
  // If vendor returned a result, then this field is the address string from the response; otherwise, it's empty string
  string response_formatted_address = 9;
  // If vendor returned a result, then this field is the latitude from the response; otherwise, it's 0
  double response_lat = 10;
  // If vendor returned a result, then this field is the longitude from the response; otherwise, it's 0
  double response_lng = 11;
  // Location type, indicating exactness of match;
  // see https://docs.precisely.com/docs/sftw/ggs/5.0/en/webhelp/GeoAddressingSDKDeveloperGuide/GlobalGeocodingGuide/source/ResultCodes/OA_location_codes.html
  // legacy codes are a bit different and only available for geocoding results
  string response_location_type = 12;
  // vendor response in JSON format
  string raw_response = 13;

  // timestamp of this event
  google.protobuf.Timestamp event_timestamp = 14;

  // TRUE is this result was used to construct the api response, false otherwise
  bool result_used_for_api_response = 15;
}

// Event to monitor geocoding API calls to vendor
message AddressGeocodingEvent {
  // the one-line address input used to construct the geocoding request
  string request_address_input = 1;
  // the request body represented in JSON form
  string raw_request_body = 2;
  // the context in which this request was sent, can be:
  // 1. AUTOCOMPLETE
  // 2. REVERSE-GEOCODING
  // 3. GEOCODING
  string request_context = 3;
  // UUID used to track other requests (to Precisely or other vendors) made alongside this request
  // For example, if we geocode multiple autocomplete results returned autocomplete provider, all the geocode
  // requests AND the autocomplete request will have the same correlation uuid
  string request_correlation_uuid = 4;
  // if set, then the request has been made including the place name.
  bool request_include_place_details = 5;
  // the vendor of this request, options are:
  // 1. LEGACY
  // 2. PRECISELY
  string request_vendor = 6;
  // the country code used in the request; empty string if omitted
  string request_country = 7;

  // TRUE if vendor returned a result for the request, and FALSE if not
  bool response_result_found = 8;
  // If vendor returned a result, then this field is the address string from the response; otherwise, it's empty string
  string response_formatted_address = 9;
  // If vendor returned a result, then this field is the latitude from the response; otherwise, it's 0
  double response_lat = 10;
  // If vendor returned a result, then this field is the longitude from the response; otherwise, it's 0
  double response_lng = 11;
  // Location type, indicating exactness of match;
  // see https://docs.precisely.com/docs/sftw/ggs/5.0/en/webhelp/GeoAddressingSDKDeveloperGuide/GlobalGeocodingGuide/source/ResultCodes/OA_location_codes.html
  // legacy codes are a bit different and only available for geocoding results
  string response_location_type = 12;
  // vendor response in JSON format
  string raw_response = 13;

  // timestamp of this event
  google.protobuf.Timestamp event_timestamp = 14;

  // TRUE is this result was used to construct the api response, false otherwise
  bool result_used_for_api_response = 15;

  // TRUE is this result was enhanced with address improvements, false otherwise
  bool has_address_enhancement = 16;
  // the address enhancement object used to enhance this result; empty string if omitted
  string address_enhancement_json = 17;

  // the country code of the address in the response; empty string if omitted or there is no address
  string response_country = 18;
}

// Event to record returning predicted pins in API responses by overwriting canonical lat/lng value.
message PredictPinEvent {
  // address id
  google.protobuf.StringValue address_id = 1;
  // pb key (precisely id for an address) if it exists
  google.protobuf.StringValue pb_key = 2 [deprecated = true];
  // poi id (id for a point of interest) if it exists
  google.protobuf.StringValue poi_id = 3 [deprecated = true];
  // original lat
  google.protobuf.DoubleValue original_lat = 4;
  // original lng
  google.protobuf.DoubleValue original_lng = 5;
  // predicted lat from address enhancement service
  google.protobuf.DoubleValue predict_pin_lat = 6;
  // predicted lng from address enhancement service
  google.protobuf.DoubleValue predict_pin_lng = 7;
  // predict_pin_version in address_v2 table; doordash_vintage from address enhancement service
  google.protobuf.StringValue predict_pin_version = 8;
  // data source - either legacy / precisely
  google.protobuf.StringValue predict_pin_data_source = 9;
  // predict pin type - pbkey -> predict pin or address_id -> predict pin
  google.protobuf.StringValue predict_pin_type = 10;
  // source place id (pbkey / poi id / google place id / etc)
  google.protobuf.StringValue source_place_id = 11;
  // the context in which the event was logged from, can be:
  // 1. GET_ADDRESS_BY_ID
  // 2. GET_OR_CREATE_WITH_FORMATTED_ADDRESS
  google.protobuf.StringValue request_context = 12;
  // correlation id for event, eg, can be delivery_correlation_id
  google.protobuf.StringValue request_context_id = 13;
}

// Event to record returning predicted pins based on formatted address in API responses by overwriting the canonical lat/lng value.
message FormattedAddressToPredictPinEvent {
  // formatted address used to lookup the predicted pin
  google.protobuf.StringValue formatted_address = 1;
  // address id
  google.protobuf.StringValue address_id = 2;
  // original lat
  google.protobuf.DoubleValue original_lat = 3;
  // original lng
  google.protobuf.DoubleValue original_lng = 4;
  // predicted lat from address enhancement service
  google.protobuf.DoubleValue predict_pin_lat = 5;
  // predicted lng from address enhancement service
  google.protobuf.DoubleValue predict_pin_lng = 6;
  // doordash_vintage from address enhancement service
  google.protobuf.StringValue doordash_vintage = 7;
  // delivery_correlation_id
  google.protobuf.StringValue delivery_correlation_id = 8;
}

// Event to record the saved addresses selected for a user in autocomplete
message SavedAddressAutocompleteEvent {
  // A combination of service provider, data provider and version of algorithm used to generate the response
  // Example:
  // 1. NECTAR_GEO
  // 2. NECTAR_ARGO
  google.protobuf.StringValue request_vendor = 1;
  // json form of the request
  google.protobuf.StringValue grpc_request = 2;
  // list of saved address ids retrieved
  repeated google.protobuf.StringValue candidate_address_ids = 3;
  // address ids selected to serve
  repeated google.protobuf.StringValue selected_address_ids = 4;
  // id to join other autocomplete events: response_uuid in AddressAutocompleteEvent and
  // request_uuid in InterpolatedAddressAutocompleteEvent
  google.protobuf.StringValue request_uuid = 5;
  // grpc context json as string
  google.protobuf.StringValue grpc_context = 6;
}

// Event to record interpolated addresses served to user
message InterpolatedAddressAutocompleteEvent {
  // A combination of service provider, data provider and version of algorithm used to generate the response
  // Example:
  // 1. LEGACY
  // 2. NECTAR
  // 3. PRECISELY
  // 4. NECTAR_ML
  // 5. NECTAR_ML_HYBRID_DATA
  string request_vendor = 1;
  // json form of the request
  string grpc_request = 2;
  // json form of the response
  string grpc_response = 3;
  // id to join other autocomplete events: response_uuid in AddressAutocompleteEvent and
  // request_uuid in SavedAddressAutocompleteEvent
  string request_uuid = 4;
  // is the response for a shadow call
  double is_shadow = 5;
  // number of addresses in response
  int32 response_count = 6;
  // NOTE: values below are nullable if response count is 0
  // source id of the address in response
  google.protobuf.StringValue response_source_id = 7;
  // formatted address in response
  google.protobuf.StringValue formatted_address = 8;
  // latitude of the address in response
  google.protobuf.DoubleValue response_lat = 9;
  // longitude of the address in response
  google.protobuf.DoubleValue response_lng = 10;
  // grpc context json as string
  google.protobuf.StringValue grpc_context = 11;
  // type of interpolation used to generate address
  google.protobuf.StringValue interpolation_type = 12;
  // reason interpolation failed
  google.protobuf.StringValue failure_reason = 13;
  // source_place_id of the addresses used for interpolation
  repeated string derivation_source_place_ids = 14;
}

// Record POIs that have been added to our source
message PointOfInterestAddedEvent {
  // request: poi name
  google.protobuf.StringValue request_name = 1;
  // request: source place id
  google.protobuf.StringValue request_address_source_place_id = 2;
  // request: tenant
  google.protobuf.StringValue request_tenant = 3;
  // request: requesting user
  google.protobuf.StringValue request_requesting_user_id = 4;
  // request: request reason
  google.protobuf.StringValue request_request_reason = 5;
  // response: poi id
  google.protobuf.StringValue response_poi_id = 6;
  // correlation id
  google.protobuf.StringValue correlation_id = 7;
  // request: extra search terms requested
  repeated string request_extra_search_terms = 8;
  // request: overture category
  google.protobuf.StringValue request_overture_category = 9;
  // request: location override
  google.protobuf.StringValue request_location_override = 10;
  // request: custom display street address
  google.protobuf.StringValue request_custom_display_street_address = 11;
}

// Record address points that have been added to our source
message AddressPointAddedEvent {
  reserved 1;
  reserved "request_street_num";
  // request: street name
  google.protobuf.StringValue request_street_name = 2;
  // request: street address
  google.protobuf.StringValue request_street_address = 3;
  // request: locality
  google.protobuf.StringValue request_locality = 4;
  // request: admin level 1
  google.protobuf.StringValue request_admin_level_1 = 5;
  // request: postal code
  google.protobuf.StringValue request_postal_code = 6;
  // request: country
  google.protobuf.StringValue request_country = 7;
  // request: subpremise
  google.protobuf.StringValue request_subpremise = 8;
  // request: latitude
  google.protobuf.DoubleValue request_lat = 9;
  // request: longitude
  google.protobuf.DoubleValue request_lng = 10;
  // request: formatted address
  google.protobuf.StringValue request_formatted_address = 11;
  // request: tenant
  google.protobuf.StringValue request_tenant = 12;
  // request: requesting user
  google.protobuf.StringValue request_requesting_user_id = 13;
  // request: request reason
  google.protobuf.StringValue request_request_reason = 14;
  // request: skip validation
  google.protobuf.BoolValue request_skip_validation = 15;
  // response: source place id
  google.protobuf.StringValue response_source_place_id = 16;
  // correlation id
  google.protobuf.StringValue correlation_id = 17;
  // request: extra search terms
  repeated string request_extra_search_terms = 18;
  // request: parent source place ID
  google.protobuf.StringValue request_parent_source_place_id = 19;
  // request: street number
  google.protobuf.Int32Value request_street_number = 20;
}

// Record source addresses that have been deactivated
message SourceAddressDeactivatedEvent {
  // request: source place id
  google.protobuf.StringValue request_source_place_id = 1;
  // request: tenant
  google.protobuf.StringValue request_tenant = 2;
  // request: requesting user
  google.protobuf.StringValue request_requesting_user_id = 3;
  // request: request reason
  google.protobuf.StringValue request_request_reason = 4;
  // correlation id
  google.protobuf.StringValue correlation_id = 5;
}

// Record raw geo web API requests/responses
message GeoWebApiEvent {
  // name of the GRPC service
  string service_name = 1;
  // name of the GRPC method
  string method_name = 2;
  // the request bodies represented in JSON form
  repeated string raw_requests = 3;
  // the response body represented in JSON form
  repeated string raw_responses = 4;
  // the headers of the request
  string headers = 5;
  // the trailers of the request
  string trailers = 6;
  // timestamp of this event
  google.protobuf.Timestamp occurred_at = 7;
  // status code of the call
  string status_code = 8;
  // status description of the call
  google.protobuf.StringValue status_description = 9;
  // error message of the call
  google.protobuf.StringValue error_message = 10;
  // correlation id of the request
  google.protobuf.StringValue correlation_id = 11;
}
