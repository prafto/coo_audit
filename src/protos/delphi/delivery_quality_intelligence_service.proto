syntax = "proto3";

package delphi.v1;

import "google/protobuf/api.proto";

option go_package = "github.com/doordash/services-protobuf/generated/delphi/api/v1";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.delphi.rpc.api";

// Delivery Quality Intelligence Service
service DeliveryQualityIntelligenceService {
  // Get the defect predictions for all the possible routes of a delivery
  rpc GetRouteDefectPredictionLookups(GetRouteDefectPredictionLookupsRequest) returns (GetRouteDefectPredictionLookupsResponse);
}

// Request to get route defect predictions for a batch of deliveries
message GetRouteDefectPredictionLookupsRequest {
  // The batch of delivery_ids and corresponding ids for the deliveries that need defect assessments
  repeated PredictionIdentifier prediction_ids = 1;
  // The maximum number of defect predictions that can be returned for each delivery
  int64 max_number_of_predictions_per_delivery = 2;
  // delivery_ids and corresponding ids for the delivery
  message PredictionIdentifier {
    // delivery id
    int64 delivery_id = 1;
    // store id
    int64 store_id = 2;
    // consumer id
    int64 consumer_id = 3;
    // address id
    int64 address_id = 4;
    // min original item price
    int64 min_original_item_price = 5;
    // max original item price
    int64 max_original_item_price = 6;
    // flf
    double flf = 7;
    // model id
    string model_id = 8;
    // the types of defects that need predictions
    repeated DefectType defect_types = 9;
  }
}

// Response with defect predictions for the batch of deliveries
message GetRouteDefectPredictionLookupsResponse {
  // Predictions for each of the deliveries
  repeated RouteDefectPredictionLookup lookup = 1;
  // All of the defect predictions for 1 delivery
  message RouteDefectPredictionLookup {
    // The delivery_id
    int64 delivery_id = 1;
    // Maps the feature bucket ID to the prediction - the range of predictions is [0, 255] so it can fit into a byte
    map<int32, int32> feature_bucket_sum_to_prediction = 2;
    // The id of the feature bucket key required to select the feature bucket
    int32 feature_bucket_getter_id = 3;
  }
}

// DEFECT TYPE
enum DefectType {
  // UNSPECIFIED
  DEFECT_TYPE_UNSPECIFIED = 0;
  // Cxl
  DEFECT_TYPE_CANCELLATION = 1;
  // WOD
  DEFECT_TYPE_WRONG_ORDER_DELIVERED = 2;
  // ND
  DEFECT_TYPE_NEVER_DELIVERED = 3;
  // M&I
  DEFECT_TYPE_MISSING_INCORRECT = 4;
  // Lateness
  DEFECT_TYPE_LATENESS = 5;
  // PFQ
  DEFECT_TYPE_POOR_FOOD_QUALITY = 6;
}
