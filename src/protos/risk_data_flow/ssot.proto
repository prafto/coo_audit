syntax = "proto3";

package risk_data_flow.v1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "risk_data_flow/common.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.riskdataflow";

/**
 * User id protobuf
 */
message UserId {
  // user id value
  string user_id = 1;
}

/**
 * Request for GetTimeline.
 *
 * The client passes in a given entity id (and type)
 * time window, event type and this should return
 * the corresponding timeline events. Note that these
 * will not be full RiskEvent, but will contain
 * RiskEvent ids and event time that can be used in a
 * further query to get the full RiskEvent data.
 *
 * Pagination is used in this API, currently we only
 * return max 100 events per page.
 *
 */
message GetTimelineRequest {
  // Entity id (can be Cx, Dx, card...)
  // contains entity type and entity id value
  risk_data_flow.v1.Identifier entity_id = 1;
  // Start of timeframe to retrieve events
  google.protobuf.Timestamp start_time = 2;
  // End of timeframe to retrieve events
  google.protobuf.Timestamp end_time = 3;
  // List of event type, only one event type is supported
  repeated google.protobuf.StringValue event_type = 4;
  // [Deprecated] In favor of pagination_key
  google.protobuf.StringValue last_returned_event_id = 5 [deprecated = true];

  // Enum to specify what order event time sorting should be
  // We could choose from UNSPECIFIED, ASC or DESC. UNSPECIFIED will default to DESC sorting by event times.
  enum EventTimeSortOrder {
    // Default value: No sorting needed
    EVENT_TIME_SORT_ORDER_UNSPECIFIED = 0;
    // Sorting in ascending order
    EVENT_TIME_SORT_ORDER_ASC = 1;
    // Sorting in descending order
    EVENT_TIME_SORT_ORDER_DESC = 2;
  }

  // Enum value to enable sorting by event time.
  EventTimeSortOrder event_time_sort_order = 6;
  // Optional: Limit value to return certain number of events only,
  // if null or greater than 100 call, default to first page.
  google.protobuf.Int32Value limit = 7;
  // Optional: Last returned event identifiers for pagination.
  // This value is used for pagination. If null,
  // the first page will be returned
  CompositeKey pagination_key = 8;
}

/**
 * Timeline event, which is an "abbreviated"
 * version of the RiskEvent: it contains only
 * the type, time and id of a RiskEvent.
 */
message TimelineEvent {
  // RiskEvent type: CHECKOUT, LOGIN, ...
  google.protobuf.StringValue event_type = 1;
  // RiskEvent id
  google.protobuf.StringValue event_id = 2;
  // RiskEvent timestamp
  google.protobuf.Timestamp event_time = 3;
}

/**
 * All the RiskEvents on an entity timeline
 * of events, corresponding to a GetTimelineRequest.
 *
 * The maximum number of timeline events is 100 per
 * response. Pagination is used in this API via pagination_key.
 *
 */
message GetTimelineResponse {
  // list of timeline event objects
  repeated risk_data_flow.v1.TimelineEvent events = 1;
  // [Deprecated] In favor of pagination_key
  google.protobuf.StringValue last_returned_event_id = 2 [deprecated = true];
  // Last returned event identifiers for pagination.
  // This value is used for pagination. If null,
  // the no more pages to be fetched
  CompositeKey pagination_key = 3;
}

/**
 * Given a list of event ids, return the full raw events
 */
message GetEventsRequest {
  // list of event ids
  repeated google.protobuf.StringValue event_ids = 1;
  // [Deprecated] no pagination supported
  google.protobuf.StringValue last_returned_event_id = 2 [deprecated = true];
  // Optional: Flag to enable fetching entire event blob
  bool should_fetch_event_data = 3;
}

/**
 * List of event with no specific order.
 *
 */
message GetEventsResponse {
  // List of RiskEvent objects
  repeated RiskEvent risk_events = 1;
  // [Deprecated] no pagination supported
  google.protobuf.StringValue last_returned_event_id = 2 [deprecated = true];
}

/**
 * Request for GetTimelineEvents.
 * It's the same as GetTimelineRequest but also can contains full risk event.
 */
message GetTimelineEventsRequest {
  // Entity id (can be Cx, Dx, card...)
  // contains entity type and entity id value
  risk_data_flow.v1.Identifier entity_id = 1;
  // Start of timeframe to retrieve events
  google.protobuf.Timestamp start_time = 2;
  // End of timeframe to retrieve events
  google.protobuf.Timestamp end_time = 3;
  // List of event type, only one event type is supported
  repeated google.protobuf.StringValue event_types = 4;
  // [Deprecated] In favor of pagination_key
  google.protobuf.StringValue last_returned_event_id = 5 [deprecated = true];
  // Enum to specify what order event time sorting should be
  // We could choose from UNSPECIFIED, ASC or DESC. UNSPECIFIED will default to DESC sorting by event times.
  enum EventTimeSortOrder {
    // Default value: No sorting needed
    EVENT_TIME_SORT_ORDER_UNSPECIFIED = 0;
    // Sorting in ascending order
    EVENT_TIME_SORT_ORDER_ASC = 1;
    // Sorting in descending order
    EVENT_TIME_SORT_ORDER_DESC = 2;
  }

  // Enum to enable sorting by event time.
  EventTimeSortOrder event_time_sort_order = 6;
  // Optional: Limit value to return certain number of events only,
  // if null or greater than 100 call, default to first page
  google.protobuf.Int32Value limit = 7;
  // Optional: Flag to enable fetching entire event blob
  bool should_fetch_event_data = 8;
  // Optional: Last returned event identifiers for pagination.
  // This value is used for pagination. If null,
  // the first page will be returned
  CompositeKey pagination_key = 9;
}

/**
 * All the RiskEvents on an entity timeline
 * of events, corresponding to a GetTimelineEventsRequest.
 *
 * The maximum number of timeline events is 100 per
 * response. Pagination is used in this API via pagination_key.
 *
 */
message GetTimelineEventsResponse {
  // list of risk events
  repeated RiskEvent risk_events = 1;
  // [Deprecated] In favor of pagination_key
  google.protobuf.StringValue last_returned_event_id = 2 [deprecated = true];
  // Last returned event identifiers for pagination.
  // This value is used for pagination. If null,
  // no more pages
  CompositeKey pagination_key = 3;
}

/**
 * Request for GetTimelineEventsPaginatedByTime.
 */
message GetTimelineEventsPaginatedByTimeRequest {
  option deprecated = true;
  // Entity id (can be Cx, Dx, card...)
  // contains entity type and entity id value
  risk_data_flow.v1.Identifier entity_id = 1;
  // Start of timeframe to retrieve events. Inclusive
  google.protobuf.Timestamp start_time = 2;
  // End of timeframe to retrieve events. Inclusive
  google.protobuf.Timestamp end_time = 3;
  // List of event type, only one event type is supported
  repeated google.protobuf.StringValue event_types = 4;
  // Optional: Last returned event id. This
  // Value is used for pagination. If null,
  // the first page will be returned
  CompositeKey last_returned_composite_key = 5;

  // Enum to specify what order event time sorting should be
  // We could choose from UNSPECIFIED, ASC or DESC. UNSPECIFIED will disable sorting by event times.
  enum EventTimeSortOrder {
    // Default value: No sorting. This should not be used but required by protobuf
    EVENT_TIME_SORT_ORDER_UNSPECIFIED = 0;
    // Sorting in ascending order
    EVENT_TIME_SORT_ORDER_ASC = 1;
    // Sorting in descending order
    EVENT_TIME_SORT_ORDER_DESC = 2;
  }

  // Enum to specify how to sort by event time. This is a required and
  // UNSPECIFIED should not be used
  EventTimeSortOrder event_time_sort_order = 6;
  // Optional: Number of events per page
  // If not specified, it will default to 100
  // The value should be between 1 to 200 to avoid flooding CRDB with large queries.
  // Otherwise INVALID_REQUEST code will be returned
  google.protobuf.Int32Value page_size = 7;
}

/**
 * All the RiskEvents on an entity timeline
 * of events, corresponding to a GetTimelineEventsPaginatedByTimeRequest.
 *
 * The maximum number of timeline events is 100 per
 * response. Pagination is used in this API via last_returned_composite_key.
 *
 */
message GetTimelineEventsPaginatedByTimeResponse {
  option deprecated = true;
  // list of risk events
  repeated RiskEvent risk_events = 1;
  // Last returned composite key. This
  // value is used for pagination.
  // If this value is empty or null,
  // that means the query has reached
  // the last page
  CompositeKey last_returned_composite_key = 2;
}

/**
 * Composite (event_time, event_id) key used for pagination
 * in GetTimelineEventsPaginatedByTime API
 */
message CompositeKey {
  // event id
  google.protobuf.StringValue event_id = 1;
  // event time
  google.protobuf.Timestamp event_time = 2;
  // event time
  google.protobuf.StringValue event_type = 3;
  // identifier type
  google.protobuf.StringValue identifier_type = 4;
  // identifier value
  google.protobuf.StringValue identifier_value = 5;
}

/**
 * A RiskEvent for SSOT/entity timelines,
 * as seen by Fraud workstation.
 *
 * The event id is part of the timeline
 * of each entity that has an identifier
 * in this event.
 *
 * NOTE this is not exactly the same event
 * *format* as we store in the rest of SSOT
 * (see risk_event.proto), but it is exactly
 * the same data.
 */
message RiskEvent {
  // Event id
  google.protobuf.StringValue event_id = 1;
  // Event type (CHECKOUT, LOGIN, ...)
  // This should be same as event.payloadCase
  google.protobuf.StringValue event_type = 2;
  // This is event context
  // Adds IP, device details and other details
  // that may not be in the event itself
  google.protobuf.StringValue event_context = 3;
  // Event timestamp
  google.protobuf.Timestamp event_time = 4;
  // All the entity identifiers that are
  // extracted by timeline for this event
  repeated Identifier identifiers = 5;
  // PII data fields
  google.protobuf.StringValue data_fields = 6;
  // The non-PII event data in Json format
  google.protobuf.StringValue event_data = 7;
}

/**
 *  Request to get consumer last known entities
 */
message GetConsumerLastKnownEntitiesRequest {
  // consumer id. Keeping this for backward compatibility.
  // Will remove this in next version
  google.protobuf.StringValue consumer_id = 1;
  // List of consumer ids
  repeated google.protobuf.StringValue consumer_ids = 2;
}

/**
 * Response to get consumer last known entities
 */
message GetConsumerLastKnownEntitiesResponse {
  // Object for consumer last known entities. Separating
  // it to an object to make it easier for future extendability.
  // (e.g changing it to a list of last known entities)
  // Keeping it for backward compatibility. Will remove it in next version
  ConsumerLastKnownEntities consumer_last_known_entities = 1;
  // List of consumer last known entities
  repeated ConsumerLastKnownEntities consumer_last_known_entities_list = 2;
}

/**
 * Object containing consumer last known entities
 * This should match the DB schema for consumer_last_known_entities
 */
message ConsumerLastKnownEntities {
  reserved 9;
  // consumer id. This is the primary key
  google.protobuf.StringValue consumer_id = 1;
  // user id
  google.protobuf.StringValue user_id = 2;
  // delivery id
  google.protobuf.StringValue delivery_id = 3;
  // time of the last known entity
  google.protobuf.Timestamp updated_at = 4;
  // address id
  google.protobuf.StringValue address_id = 5;
  // card fingerprint
  google.protobuf.StringValue card_fingerprint = 6;
  // device id
  google.protobuf.StringValue device_id = 7;
  // phone number
  google.protobuf.StringValue phone_number = 8;
  // platform type
  google.protobuf.StringValue platform_type = 10;
  // device type
  google.protobuf.StringValue device_type = 11;
  // first time we see a delivery to this Cx
  google.protobuf.Timestamp created_at = 12;
}
