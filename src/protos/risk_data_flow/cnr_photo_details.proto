syntax = "proto3";
package risk_data_flow.v1;

import "google/protobuf/timestamp.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.riskdataflow";

/**
 * Request for UpsertCnrPhotoDetails API
 */
message UpsertCnrPhotoDetailsRequest {
  // delivery_id
  string delivery_id = 1;
  // consumer_id
  string consumer_id = 2;
  // user_id
  string user_id = 3;
  // problem_type - CNR request type (e.g. poor_food_quality, missing_and_incorrect, wrong_order_delivered, etc.)
  string problem_type = 4;
  // sub_problem_type - CNR problem type (e.g. item_missing, temperature_issue, etc.))
  string sub_problem_type = 5;
  // photo_purpose
  PhotoPurpose photo_purpose = 6;
  // order_item_id - optionally, the id that the photos are linked to
  int64 order_item_id = 7;
  // description
  string description = 8;
  // photo_proof_source
  PhotoProofSource photo_proof_source = 9;
  // The id of the stored cnr photo details object
  int64 id = 10;
}

/**
 * Response for UpsertCnrPhotoDetails API
 */
message UpsertCnrPhotoDetailsResponse {
  // id - the id of the stored cnr photo details object
  int64 id = 1;
}

/**
 * Request for UpsertCnrPhotoLinks API
 */
message UpsertCnrPhotoLinksRequest {
  // cnr_photo_details_id - the id of the parent cnr photo details object
  int64 cnr_photo_details_id = 1;
  // photo_uuid
  string photo_uuid = 2;
  // photo_url
  string photo_url = 3;
  // file_name
  string file_name = 4;
  // photo_expire_at
  google.protobuf.Timestamp photo_expire_at = 5;
  // photo_analysis_status
  PhotoAnalysisStatus photo_analysis_status = 6;
  // photo_analysis_response - direct string response of google vision API
  string photo_analysis_response = 7;
  // The id of the stored cnr photo link object
  int64 id = 8;
  // model_results - the results of the model
  repeated CnrPhotoModelResult model_results = 9;
  // additional_metadata - JSON string representation of EXIF metadata on the photo.
  string additional_metadata = 10;
  // photo_origin - where the photo was uploaded from
  PhotoOrigin photo_origin = 11;
}

/**
 * Response for UpsertCnrPhotoLinks API
 */
message UpsertCnrPhotoLinksResponse {
  // id - the id of the stored cnr photo links object
  int64 id = 1;
}

/**
 * Request for UpdateCnrPhotoLinksModelResults API
 */
message UpdateCnrPhotoLinksModelResultsRequest {
  // id - the id of the stored cnr photo links object
  int64 id = 1;

  // model_results - the results of the model
  repeated CnrPhotoModelResult model_results = 2;
}

/**
 * Response for UpdateCnrPhotoLinksModelResults API
 */
message UpdateCnrPhotoLinksModelResultsResponse {}

/**
 * Request for GetCnrPhotoDetailsAPI
 */
message GetCnrPhotoDetailsRequest {
  // delivery_id
  string delivery_id = 1;
  // problem_type - CNR request type (e.g. poor_food_quality, missing_and_incorrect, wrong_order_delivered, etc.)
  string problem_type = 2;
  // sub_problem_type - CNR problem type (e.g. item_missing, temperature_issue, etc.))
  string sub_problem_type = 3;
  // order_item_id - optionally, the id that the photos are linked to
  int64 order_item_id = 4;
}

/**
 * Response for GetCnrPhotoDetailsAPI API
 */
message GetCnrPhotoDetailsResponse {
  // cnr_photo_details
  repeated StoredCnrPhotoDetails cnr_photo_details = 1;
}

/**
 * Request for GetCnrPhotoLinks API
 */
message GetCnrPhotoLinksRequest {
  // cnr_photo_details_id_list, list allows for batch fetching of photo links
  repeated int64 cnr_photo_details_id_list = 1;
}

/**
 * Response for GetCnrPhotoLinks API
 */
message GetCnrPhotoLinksResponse {
  // cnr_photo_link
  repeated StoredCnrPhotoLink cnr_photo_link = 1;
}

/**
 * Stored cnr photo details object
 */
message StoredCnrPhotoDetails {
  // id - the id of the stored cnr photo details object
  int64 id = 1;
  // delivery_id
  string delivery_id = 2;
  // consumer_id
  string consumer_id = 3;
  // user_id
  string user_id = 4;
  // problem_type - CNR request type (e.g. poor_food_quality, missing_and_incorrect, wrong_order_delivered, etc.)
  string problem_type = 5;
  // sub_problem_type - CNR problem type (e.g. item_missing, temperature_issue, etc.))
  string sub_problem_type = 6;
  // photo_purpose
  PhotoPurpose photo_purpose = 7;
  // order_item_id - optionally, the id that the photos are linked to
  int64 order_item_id = 8;
  // description
  string description = 9;
  // photo_proof_source
  PhotoProofSource photo_proof_source = 10;
  // created_at
  google.protobuf.Timestamp created_at = 11;
  // updated_at
  google.protobuf.Timestamp updated_at = 12;
}

/**
 * Stored cnr photo link object
 */
message StoredCnrPhotoLink {
  // id - the id of the stored cnr photo link object
  int64 id = 1;
  // cnr_photo_details_id - the id of the parent cnr photo details object
  int64 cnr_photo_details_id = 2;
  // photo_uuid
  string photo_uuid = 3;
  // photo_url
  string photo_url = 4;
  // file_name
  string file_name = 5;
  // created_at
  google.protobuf.Timestamp created_at = 6;
  // updated_at
  google.protobuf.Timestamp updated_at = 7;
  // photo_expire_at
  google.protobuf.Timestamp photo_expire_at = 8;
  // is_photo_expired
  bool is_photo_expired = 9;
  // photo_analysis_status
  PhotoAnalysisStatus photo_analysis_status = 10;
  // photo_analysis_response - direct string response of google vision API
  string photo_analysis_response = 11;
  // model_results - the results of the model
  repeated CnrPhotoModelResult model_results = 12;
  // photo_origin - where the photo was uploaded from
  PhotoOrigin photo_origin = 13;
  // additional_metadata - JSON string representation of EXIF metadata on the photo.
  string additional_metadata = 14;
}

/**
 * Model result for a C&R photo
 */
message CnrPhotoModelResult {
  // model_type - the model type
  ModelType model_type = 1;

  // prediction - the result of the model
  ModelPrediction prediction = 2;

  // confidence - the confidence of the model
  double confidence = 3;

  // evaluated_at - the time the model was evaluated
  google.protobuf.Timestamp evaluated_at = 4;

  // additional_details - additional details about the model parameters/result
  string additional_details = 5;

  // status - the status of the model
  ModelStatus status = 6;
}

/**
 * Model type
 */
enum ModelType {
  // MODEL_TYPE_UNSPECIFIED - Unspecified model type
  MODEL_TYPE_UNSPECIFIED = 0;
  // MODEL_TYPE_DUPLICATE_PHOTO - duplicate photo model
  MODEL_TYPE_DUPLICATE_PHOTO = 1;
}

/**
 * Model prediction
 */
enum ModelPrediction {
  // MODEL_PREDICTION_UNSPECIFIED - Unspecified model prediction
  MODEL_PREDICTION_UNSPECIFIED = 0;
  // MODEL_PREDICTION_DUPLICATE - duplicate model prediction
  MODEL_PREDICTION_DUPLICATE = 1;
  // MODEL_PREDICTION_NON_DUPLICATE - non-duplicate model prediction
  MODEL_PREDICTION_NON_DUPLICATE = 2;
}

/**
 * Model status
 */
enum ModelStatus {
  // MODEL_STATUS_UNSPECIFIED - Unspecified model status
  MODEL_STATUS_UNSPECIFIED = 0;
  // MODEL_STATUS_IN_PROGRESS - model is in progress
  MODEL_STATUS_IN_PROGRESS = 1;
  // MODEL_STATUS_COMPLETED - model is completed
  MODEL_STATUS_COMPLETED = 2;
  // MODEL_STATUS_FAILED - model failed
  MODEL_STATUS_FAILED = 3;
}

/**
 * Photo purpose - What the photo is depicting
 */
enum PhotoPurpose {
  // PHOTO_PURPOSE_UNSPECIFIED - Unspecified photo purpose
  PHOTO_PURPOSE_UNSPECIFIED = 0;
  // PHOTO_PURPOSE_RECEIPT_PHOTO - photo is of receipt
  PHOTO_PURPOSE_RECEIPT_PHOTO = 1;
  // PHOTO_PURPOSE_ORDER_ITEM_PHOTO - photo is of order
  PHOTO_PURPOSE_ORDER_PHOTO = 3;
  // PHOTO_PURPOSE_RETURN_RECEIPT_PHOTO - photo is of return receipt
  PHOTO_PURPOSE_RETURN_RECEIPT_PHOTO = 4;
}

/**
 * Photo proof source - Where the photo came from
 */
enum PhotoProofSource {
  // PHOTO_PROOF_SOURCE_UNSPECIFIED - Unspecified photo proof source
  PHOTO_PROOF_SOURCE_UNSPECIFIED = 0;
  // PHOTO_PROOF_SOURCE_SELF_HELP - photo is from self help flow
  PHOTO_PROOF_SOURCE_SELF_HELP = 1;
  // PHOTO_PROOF_SOURCE_CHAT_BOT - photo is from chat bot (deprecated)
  PHOTO_PROOF_SOURCE_CHAT_BOT = 2;
  // PHOTO_PROOF_SOURCE_SELF_HELP_APPEAL - photo is from self help appeal flow
  PHOTO_PROOF_SOURCE_SELF_HELP_APPEAL = 3;
  // PHOTO_PROOF_SOURCE_CHAT - photo is from chat
  PHOTO_PROOF_SOURCE_CHAT = 4;
}

/**
 * Photo analysis status - Google vision API status
 */
enum PhotoAnalysisStatus {
  // PHOTO_ANALYSIS_STATUS_UNSPECIFIED - Unspecified photo analysis status
  PHOTO_ANALYSIS_STATUS_UNSPECIFIED = 0;
  // PHOTO_ANALYSIS_STATUS_IN_PROGRESS - photo analysis is in progress
  PHOTO_ANALYSIS_STATUS_IN_PROGRESS = 1;
  // PHOTO_ANALYSIS_STATUS_COMPLETED - photo analysis is completed
  PHOTO_ANALYSIS_STATUS_COMPLETED = 2;
  // PHOTO_ANALYSIS_STATUS_FAILED - photo analysis failed
  PHOTO_ANALYSIS_STATUS_FAILED = 3;
}

/**
 * Photo origin - Where the photo was uploaded from
 */
enum PhotoOrigin {
  // UNKNOWN
  // buf:lint:ignore ENUM_VALUE_PREFIX
  // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
  UNKNOWN = 0;
  // buf:lint:ignore ENUM_VALUE_PREFIX
  // GALLERY
  GALLERY = 1;
  // LIVE_CAMERA
  // buf:lint:ignore ENUM_VALUE_PREFIX
  LIVE_CAMERA = 2;
}
