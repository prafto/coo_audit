syntax = "proto3";

package risk_data_flow.v1;

import "common/service_client_config.proto";
import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "risk_data_flow/legacy_risk_crdb_entities.proto";
import "risk_data_flow/legacy_risk_entity_types.proto";
import "risk_data_flow/telesign_phone_info.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.riskdataflow";

/**
 * A generic service for fetching legacy risk entity infos from fraud postgres db to simplify patronus migration.
 */
service LegacyRiskEntityService {
  // Timeout after 500 milliseconds.
  option (service_client.client_config).response_attempt_timeout_millis = 500;
  // Make a total 4 attempts (initial + three retries).
  option (service_client.client_config).retry_config.max_attempts = 4;
  // Add RESOURCE_EXHAUSTED to the set of retriable codes.
  option (service_client.client_config).retry_config.do_retry_grpc_code = 8;
  // Break the circuit if the error rate exceeds 80%.
  option (service_client.client_config).circuit_breaker_config.failure_rate_threshold = 0.8;
  // Ignore NOT_FOUND from circuit breaker error rate calculation.
  option (service_client.client_config).circuit_breaker_config.do_ignore_grpc_code = 5;

  // Return a list of entities given the identifier
  rpc GetLegacyRiskEntities(GetLegacyRiskEntitiesRequest) returns (GetLegacyRiskEntitiesResponse);

  // Return an entity given the identifier
  rpc GetLegacyRiskEntity(GetLegacyRiskEntityRequest) returns (GetLegacyRiskEntityResponse);

  // Return the latest entity given the identifier
  rpc GetLegacyLatestRiskEntity(GetLegacyLatestRiskEntityRequest) returns (GetLegacyLatestRiskEntityResponse);

  // Return the count of entities for a given identifier
  rpc GetLegacyRiskEntityCount(GetLegacyRiskEntityCountRequest) returns (GetLegacyRiskEntityCountResponse);

  // legacy method for remaining three crdb tables
  rpc GetFraudSignalLegacy(GetFraudSignalLegacyRequest) returns (GetFraudSignalLegacyResponse);
}

// Entity identifiers
message EntityIdentifier {
  // identifiers
  oneof identifier {
    // CardChallengeStateIdentifier
    CardChallengeStateIdentifier card_challenge_state_identifier = 1;
  }
}

// GetLegacyRiskEntitiesRequest
message GetLegacyRiskEntitiesRequest {
  // entities identifier
  EntityIdentifier identifier = 1;
}

// GetLegacyRiskEntitiesResponse
message GetLegacyRiskEntitiesResponse {
  // entity list
  oneof entities {
    // card_challenge_states
    CardChallengeStates card_challenge_states = 1;
  }
}

// GetLegacyRiskEntityRequest
message GetLegacyRiskEntityRequest {
  // identifier
  oneof identifier {
    // Telesign phone info
    TelesignPhoneInfoEntityIdentifier telesign_phone_info_identifier = 1;
    // Riskified status
    RiskifiedStatusEntityIdentifier riskified_status_identifier = 2;
    // Signifyd status
    SignifydStatusEntityIdentifier signfyd_status_identifier = 3;
    // Sift Cx order
    SiftCxOrderStateEntityIdentifier sift_cx_order_state_identifier = 4;
    // Global holdout
    GlobalHoldoutHistoryEntityIdentifier global_holdout_history_identifier = 5;
    // Sticky card challenge user state
    StickyCardChallengeUserStateEntityIdentifier sticky_card_challenge_user_state_identifier = 6;
    // Sticky card challenge fingerprint state
    StickyCardChallengeFingerprintStateEntityIdentifier sticky_card_challenge_fingerprint_state_identifier = 7;
    // Ccard challenge state
    CardChallengeStateEntityIdentifier consumer_card_challenge_state_identifier = 8;
  }
}

// GetLegacyRiskEntityResponse
message GetLegacyRiskEntityResponse {
  // entity
  oneof entity {
    // Telesign phone info
    TelesignPhoneInfo telesign_phone_info = 1;
    // Riskified status
    RiskifiedStatus riskified_status = 2;
    // Signify status
    SignifydStatus signifyd_status = 3;
    // Sift Cx order state
    SiftCxOrderState sift_cx_order_state = 4;
    // Global holdout history
    GlobalHoldoutHistory global_holdout_history = 5;
    // Sticky card challenge user state
    StickyCardChallengeUserState sticky_card_challenge_user_state = 6;
    // Sticky card challenge fingerprint state
    StickyCardChallengeFingerprintState sticky_card_challenge_fingerprint_state = 7;
    // Consumer card challenge state
    CardChallengeState card_challenge_state = 8;
  }
}

// GetLegacyRiskEntityRequest
message GetLegacyLatestRiskEntityRequest {
  // identifier
  oneof identifier {
    // Riskified status
    RiskifiedStatusLatestEntityIdentifier riskified_status_identifier = 1;
    // Signifyd status
    SignifydStatusLatestEntityIdentifier signifyd_status_identifier = 2;
    // Sift cx order state
    SiftCxOrderStateLatestEntityIdentifier sift_cx_order_identifier = 3;
  }
}

// GetLegacyRiskEntityResponse
message GetLegacyLatestRiskEntityResponse {
  // entity list
  oneof entity {
    // Riskified status
    RiskifiedStatus riskified_status = 1;
    // Signifyd status
    SignifydStatus signifyd_status = 2;
    // Sift Cx order state
    SiftCxOrderState sift_cx_order_state = 3;
  }
}

// GetLegacyRiskEntityCountRequest
message GetLegacyRiskEntityCountRequest {
  // identifier
  oneof identifier {
    // 3D secure status entity identifier
    ThreeDSecureStatusEntityCountIdentifier threed_secure_status_identifier = 1;
  }
}

// GetLegacyRiskEntityCountResponse
message GetLegacyRiskEntityCountResponse {
  // entity count
  int32 count = 1;
}
