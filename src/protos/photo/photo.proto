syntax = "proto3";

package photo;

import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option go_package = "photo";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.photo.grpc";

enum ApprovalStatuses {
  PENDING = 0;
  APPROVED = 1;
  REJECTED = 2;
  AI_APPROVED = 3;
}

enum ImageFileExtension {
  PNG = 0;
  JPG = 1;
  JPEG = 2;
  CR2 = 3;
  NEF = 4;
  TIFF = 5;
  GIF = 6;
  SVG = 7;
  HEIC = 8;
}

message Photo {
  string photo_uuid = 1;
  string photo_image_file = 2;
  string photo_key = 3;
  int64 accepted_at = 4;
  int64 rejected_at = 5;
  int64 created_at = 6;
  int64 updated_at = 7;
  int64 origin_photo_id = 8;
  string source = 9;
  string location = 10;
  string original_content_hash = 11;
  PhotoMeta meta = 12;
  int64 auto_rejected_at = 13;
  int64 expires_at = 14;
  int64 ai_approved_at = 15;
  string business_id = 16;
  string photo_name = 17;
}

message PhotoVariant {
  string parent_photo_uuid = 1;
  string photo_uuid = 2;
  google.protobuf.Int64Value created_at = 3;
  google.protobuf.Int64Value updated_at = 4;
}

message PhotoMeta {
  // IMPORTANT: We had a previous incident due to improper usage of non-primitive type fields
  // (like messages and repeated fields) during data updates.  When adding any *new* non-primitive
  // field, you *MUST* specify the update strategy in mergeMetadata() function in photo-service:
  // e.g., append, replace, merge, etc.  Primitive types (int, string, bool, etc.) are implicitly replaced on update.
  string original_photo_uuid = 1;
  google.protobuf.Int32Value width = 2;
  google.protobuf.Int32Value height = 3;
  google.protobuf.FloatValue file_size_mb = 4;
  bool is_enhanced = 5;
  SalientRect salient_rect = 6;
  string validation_code = 7;
  int64 validation_timestamp = 8;
  bool is_variant = 9;
  google.protobuf.Int64Value auto_linked_at = 10;
  google.protobuf.Int64Value auto_approved_at = 11;
  repeated photo.RescueType rescue_types = 12;
}

message PhotoAssignment {
  string business_id = 1;
  string store_id = 2;
  string entity_id = 3;
  string entity_type = 4;
  string photo_type = 5;
  string photo_uuid = 6;
  int64 created_at = 7;
  int64 updated_at = 8;
  PhotoAssignmentMeta meta = 9;
}

message PhotoAssignmentMeta {}

message PhotoEntity {
  Photo photo_metadata = 1;
  string photo_image_url = 2;
  string photo_status = 3;
  string name = 4;
}

message PhotoJob {
  string job_id = 1;
  string job_type = 2;
  string job_payload = 3;
  string business_id = 4;
  string status = 5;
  int64 created_at = 6;
  int64 updated_at = 7;
  PhotoJobMeta meta = 8;
}

message PhotoJobEntity {
  string job_id = 1;
  string business_id = 2;
  string entity_id = 3;
  int64 created_at = 4;
  string entity_type = 5; // unused
}

message PhotoJobMeta {}

message PhotoShoot {
  string photo_shoot_uuid = 1;
  string address_id = 2;
  string created_by_id = 3;
  string submarket_id = 4;
  string contact_email = 5;
  string contact_name = 6;
  string contact_phone = 7;
  string note = 8;
  string business_id = 9;
  string business_group_id = 10;
  int64 origin_photo_shoot_id = 11;
  int64 created_at = 12;
  int64 updated_at = 13;
}

message PhotoShootTask {
  string photo_shoot_task_uuid = 1;
  string name = 2;
  string description = 3;
  string photo_shoot_uuid = 4;
  int64 origin_photo_shoot_id = 5;
  string photo_uuid = 6;
  int64 origin_photo_id = 7;
  int64 origin_photo_shoot_task_id = 8;
  int64 created_at = 9;
  int64 updated_at = 10;
}

message PhotoFeedback {
  string photo_feedback_id = 1;
  string photo_uuid = 2;
  string comments = 3;
  string created_by_id = 4;
  int64 created_at = 5;
  int64 origin_photo_id = 6;
}

enum SortBy {
  PHOTO_NAME = 0;
}

enum SortDirection {
  ASC = 0;
  DESC = 1;
}

enum BusinessPhotoType {
  HEADER = 0;
  LOGO = 1;
  CRM = 2;
}

enum KioskPhotoType {
  KIOSK_BANNER = 0;
  KIOSK_BACKGROUND = 1;
}

enum BusinessPhotoRejectionReason {
  API_CALL_FAILED = 0;
  FACE_FAILURE_DETECTION = 1;
  NO_ALLOW_LIST_LABELS = 2;
  BLOCK_LIST_LABELS_DETECTION = 3;
  BLOCK_LOCALIZED_OBJECT_DETECTION = 4;
  SAFE_SEARCH_FAILURE_DETECTION = 5;
  TEXT_DETECTION = 6;
}

enum KioskPhotoRejectionReason {
  KIOSK_API_CALL_FAILED = 0;
  KIOSK_BLOCK_LIST_LABELS_DETECTION = 1;
}

enum MenuPhotoRejectionReason {
  BLURRY = 0;
  BACKGROUND = 1;
  FRAMING = 2;
  PHOTOSHOP = 3;
}

enum AutoReviewMenuPhotoUseCase {
  POS = 0;
  MENU_EDITOR = 1;
}

message PhotoSummary {
  PhotoEntity photo_entity = 1;
  PhotoShootTask photo_shoot_task = 2;
  repeated PhotoFeedback photo_feebacks = 3;
}

message PhotoModeration {
  string photo_uuid = 1;
  repeated PhotoQuality photo_qualities = 2;
}

message PhotoQuality {
  string feature = 1;
  string model_name = 2;
  double score = 3;
  int64 created_at = 5;
  int64 updated_at = 6;
  PhotoQualityMeta meta = 7;
}

// Photo quality meta data saved in the photo_quality table
message PhotoQualityMeta {
  AIModerationInsights ai_moderation_insights = 1;
}

// AI moderation results from GPT models
message AIModerationInsights {
  // Decision made by GPT models, either APPROVE or REJECT
  google.protobuf.StringValue decision = 1;
  // A list of detected violations by GPT models
  repeated AIDetectedViolation violations = 2;
}

// Detected violation by GPT models
message AIDetectedViolation {
  // Type of violation detected
  google.protobuf.StringValue criteria = 1;
  // Explanation of the violation
  google.protobuf.StringValue explanation = 2;
}

message UGCPhotosForMenuDisplaySubmission {
  string photo_uuid = 1;
  string business_id = 2;
  string entity_id = 3;
  string entity_type = 4;
  string store_id = 5;
  string menu_id = 6;
}

enum GoogleVisionFeatureType {
  SAFE_SEARCH_DETECTION = 0;
  FACE_DETECTION = 1;
  LABEL_DETECTION = 2;
  DOCUMENT_TEXT_DETECTION = 3;
  OBJECT_LOCALIZATION = 4;
}

message SalientRect {
  int32 top = 1;
  int32 left = 2;
  int32 width = 3;
  int32 height = 4;
}

/**
 * Supported rescue types
 */
enum RescueType {
  // Unspecified
  RESCUE_TYPE_UNSPECIFIED = 0;
  // Open AI outpainting rescue
  RESCUE_TYPE_OPENAI_OUTPAINT = 1;
  // Photoroom background rescue
  RESCUE_TYPE_PHOTOROOM_BACKGROUND = 2;
  // Photoroom blurry rescue
  RESCUE_TYPE_PHOTOROOM_BLURRY = 3;
  // Photoroom dark light rescue
  RESCUE_TYPE_PHOTOROOM_LIGHTING_DARK = 4;
  // Photoroom bright light rescue
  RESCUE_TYPE_PHOTOROOM_LIGHTING_BRIGHT = 5;
  // Photoroom overlay fix
  RESCUE_TYPE_PHOTOROOM_OVERLAY = 6;
  // Claid blurry fix
  RESCUE_TYPE_CLAID_BLURRY = 7;
  // MANUAL AI ENHANCEMENTS
  RESCUE_TYPE_MANUAL = 8;
  // Glamour images
  RESCUE_TYPE_GLAMOUR = 9;
}

// Client making the approval/rejection request
enum Client {
  // Client is unspecified
  CLIENT_UNSPECIFIED = 0;
  // Client is FlashMod
  CLIENT_FLASHMOD = 1;
}
