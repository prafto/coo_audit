syntax = "proto3";

package photointernalgateway.v1;

option go_package = "photointernalgateway";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.photointernalgateway.grpc";

// PhotoInternalService is the internal service for photo-service.
// It is primarily used to execute scripts and backfills.
service PhotoInternalService {
  // ExecuteScript executes a script on one entity.
  rpc ExecuteScript(ExecuteScriptRequest) returns (ExecuteScriptResponse);
  // ExecuteBackfill executes a backfill on multiple entities or all entities within a time range.
  rpc ExecuteBackfill(ExecuteBackfillRequest) returns (ExecuteBackfillResponse);
}

/**
 * Request to execute a script on one entity
 */
message ExecuteScriptRequest {
  // script_name is the name of the script to execute.
  string script_name = 1;

  // entity_id is the id of the entity that the script is operating on. It can be photo_uuid, original_photo_id, etc.
  // The id specified will be dependent on the script.
  string entity_id = 2;
}

/**
 * Response of ExecuteScript.
 */
message ExecuteScriptResponse {
  // Status code enum.
  enum ExecuteScriptStatus {
    // Unspecified.
    EXECUTE_SCRIPT_STATUS_UNSPECIFIED = 0;
    // The script was not found.
    EXECUTE_SCRIPT_STATUS_NOT_FOUND = 1;
    // The script executed successfully.
    EXECUTE_SCRIPT_STATUS_SUCCESS = 2;
    // The script executed with failure.
    EXECUTE_SCRIPT_STATUS_FAILED = 3;
  }

  // Status code.
  ExecuteScriptStatus status = 1;

  // message is the additional details for the script execution.
  string message = 2;
}

/**
 * Request to execute a backfill on multiple entities or all entities within a time range.
 * Note: Not all fields are required, it depends on the script and what you want to backfill.
 */
message ExecuteBackfillRequest {
  // script_name is the name of the backfill script to execute.
  string script_name = 1;

  // entity_ids is the list of entity ids that the backfill is operating on.
  // It can be photo_uuid, original_photo_id, etc.
  repeated string entity_ids = 2;

  // is_all_entities is a flag to indicate if the backfill should operate on all entities.
  // Use in conjunction with start_time_millis and end_time_millis. Otherwise it will start processing from
  // a server side default time to time of execution.
  bool is_all_entities = 3;

  // start_time_millis is the start time of the backfill. It is used in conjunction with is_all_entities.
  int64 start_time_millis = 4;

  // end_time_millis is the end time of the backfill. It is used in conjunction with is_all_entities.
  int64 end_time_millis = 5;
}

/**
 * Response of ExecuteBackfill.
 */
message ExecuteBackfillResponse {
  // ID of the workflow.
  string workflow_id = 1;

  // ID of the run;
  string run_id = 2;
}
