syntax = "proto3";

package flashmodgateway.v1;

import "common/service_client_config.proto";
import "doordash.api/annotations.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "photo/photo.proto";

option go_package = "flashmodgateway";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.flashmodgateway.grpc";

/**
 * FlashMod Service
 */
service FlashModService {
  option (doordash.api.service) = {
    url: "photo-service-flashmod.service.prod.ddsd"
    name: "FlashModService"
    port: 50051
    name_spaces: ["photo"]
    api_key_name: "PHOTO-SERVICE-API-KEY"
    owner: {
      id: "photo-service-platform"
      name: "photo"
      slack_channel: "#ask-photo-eng"
      email_alias: "core-mx-menu-eng@doordash.com"
    }
    target_products: [MX]
  };

  // API to upsert moderation assignments
  rpc UpsertModerationAssignments(UpsertModerationAssignmentsRequest) returns (UpsertModerationAssignmentsResponse);
  // API to update moderation assignments
  rpc UpdateModerationAssignments(UpdateModerationAssignmentsRequest) returns (UpdateModerationAssignmentsResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 5000;
    option (google.api.http) = {
      post: "/photo/v1/update_moderation_assignments"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: PROD
      authorization: [
        MX_USER,
        DD_EMPLOYEE
      ]
    };
    option (doordash.api.inject_headers) = {
      inject: [
        {field: "platform"},
        {field: "is_guest"},
        {field: "is_employee"}]
    };
  }
  // API to get moderation assignments by entity UUID
  rpc GetModerationAssignmentByEntityUuid(GetModerationAssignmentByEntityUuidRequest) returns (GetModerationAssignmentByEntityUuidResponse);
  // API to assign moderation tasks to a moderator
  rpc GetModerationTasks(GetModerationTasksRequest) returns (GetModerationTasksResponse);
  // API to approve an entity
  rpc ApproveEntity(ApproveEntityRequest) returns (ApproveEntityResponse);
  // API to reject an entity
  rpc RejectEntity(RejectEntityRequest) returns (RejectEntityResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 5000;
    option (google.api.http) = {
      post: "/photo/v1/reject_entity"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: PROD
      authorization: [
        MX_USER,
        DD_EMPLOYEE
      ]
    };
    option (doordash.api.inject_headers) = {
      inject: [
        {field: "platform"},
        {field: "is_guest"},
        {field: "is_employee"}]
    };
  }
  // API to get moderation tasks by expiration time within a range
  rpc GetModerationTasksByExpirationTimeRange(GetModerationTasksByExpirationTimeRangeRequest) returns (GetModerationTasksByExpirationTimeRangeResponse);
  // API to get the next moderation task
  rpc GetNextModerationTask(GetNextModerationTaskRequest) returns (GetNextModerationTaskResponse);
  // API to delete moderation assignments
  rpc DeleteModerationAssignments(DeleteModerationAssignmentsRequest) returns (DeleteModerationAssignmentsResponse);
  // API to start email notification workflow
  rpc StartEmailNotificationWorkflow(StartEmailNotificationWorkflowRequest) returns (StartEmailNotificationWorkflowResponse);
}

// UpsertModerationAssignmentsRequest
message UpsertModerationAssignmentsRequest {
  // Moderation assignments
  repeated ModerationAssignment moderation_assignments = 1;
}

// UpsertModerationAssignmentsResponse
message UpsertModerationAssignmentsResponse {}

// UpdateModerationAssignmentsRequest
message UpdateModerationAssignmentsRequest {
  // Moderation assignments
  repeated ModerationAssignment moderation_assignments = 1;
}

// UpdateModerationAssignmentsResponse
message UpdateModerationAssignmentsResponse {}

// GetModerationAssignmentByEntityUuidRequest
message GetModerationAssignmentByEntityUuidRequest {
  // Entity UUID
  google.protobuf.StringValue entity_uuid = 1;
}

// GetModerationAssignmentByEntityUuidResponse
message GetModerationAssignmentByEntityUuidResponse {
  // Moderation assignment
  ModerationAssignment moderation_assignment = 1;
}

// GetModerationTasksRequest
message GetModerationTasksRequest {
  // Moderator ID
  google.protobuf.Int64Value moderator_id = 1;
  // List of use cases
  repeated UseCase use_cases = 2;
}

// GetModerationTasksResponse
message GetModerationTasksResponse {
  // List of entity UUIDs
  repeated google.protobuf.StringValue entity_uuids = 1;
}

// ApproveEntityRequest
message ApproveEntityRequest {
  // Entity UUID
  google.protobuf.StringValue entity_uuid = 1;
  // Moderator ID
  google.protobuf.Int64Value moderator_id = 2;
  // Client making approval request
  photo.Client client = 3;
}

// ApproveEntityResponse
message ApproveEntityResponse {
  // Entity UUID
  google.protobuf.StringValue entity_uuid = 1;
}

// RejectEntityRequest
message RejectEntityRequest {
  // Entity UUID
  google.protobuf.StringValue entity_uuid = 1;
  // Moderator ID
  google.protobuf.Int64Value moderator_id = 2;
  // Client making reject request
  photo.Client client = 3;
}

// RejectEntityResponse
message RejectEntityResponse {
  // Entity UUID
  google.protobuf.StringValue entity_uuid = 1;
}

// GetModerationTasksByExpirationTimeRangeRequest
message GetModerationTasksByExpirationTimeRangeRequest {
  // Start time
  google.protobuf.Int64Value start_time = 1;
  // End time
  google.protobuf.Int64Value end_time = 2;
}

// GetModerationTasksByExpirationTimeRangeResponse
message GetModerationTasksByExpirationTimeRangeResponse {
  // List of moderation assignments
  repeated ModerationAssignment moderation_assignments = 1;
}

// GetNextModerationTaskRequest
message GetNextModerationTaskRequest {
  // Moderator ID
  google.protobuf.Int64Value moderator_id = 1;
  // List of use cases
  repeated UseCase use_cases = 2;
}

// GetNextModerationTaskResponse
message GetNextModerationTaskResponse {
  // Entity UUID
  google.protobuf.StringValue entity_uuid = 1;
}

// DeleteModerationAssignmentsRequest
message DeleteModerationAssignmentsRequest {
  // Entity UUIDs
  repeated google.protobuf.StringValue entity_uuids = 1;
}

// DeleteModerationAssignmentsResponse
message DeleteModerationAssignmentsResponse {}

// StartEmailNotificationWorkflowRequest
message StartEmailNotificationWorkflowRequest {
  // Menu ID to email list
  repeated MenuIdToEmail menu_id_to_email = 1;
}

// StartEmailNotificationWorkflowResponse
message StartEmailNotificationWorkflowResponse {
  // Workflow ID
  string workflow_id = 1;
}

// ModerationAssignment
message ModerationAssignment {
  // Entity UUID
  string entity_uuid = 1;
  // Entity type
  EntityType entity_type = 2;
  // Moderation use case
  UseCase use_case = 3;
  // Business ID
  string business_id = 4;
  // Priority
  int64 priority = 5;
  // Moderation status
  Status status = 6;
  // Assigned to
  google.protobuf.Int64Value assigned_to = 7;
  // Moderation result
  Result moderation_result = 8;
  // Remoderation
  bool remoderation = 9;
  // Assigned at timestamp in epoch milliseconds UTC
  google.protobuf.Int64Value assigned_at = 10;
  // Moderated at timestamp in epoch milliseconds UTC
  google.protobuf.Int64Value moderated_at = 11;
  // Created at timestamp in epoch milliseconds UTC
  google.protobuf.Int64Value created_at = 12;
  // Updated at timestamp in epoch milliseconds UTC
  google.protobuf.Int64Value updated_at = 13;
  // Expires at timestamp in epoch milliseconds UTC
  google.protobuf.Int64Value expires_at = 14;
}

// EntityType
enum EntityType {
  // EntityType is unspecified
  ENTITY_TYPE_UNSPECIFIED = 0;
  // EntityType is Photo
  ENTITY_TYPE_PHOTO = 1;
}

// UseCase
enum UseCase {
  // UseCase is unspecified
  USE_CASE_UNSPECIFIED = 0;
  // UseCase is POS
  USE_CASE_POS = 1;
  // UseCase is UGC
  USE_CASE_UGC = 2;
  // UseCase is YELP
  USE_CASE_YELP = 3;
  // UseCase is SSME
  USE_CASE_SSME = 4;
}

// Status
enum Status {
  // Status is unspecified
  STATUS_UNSPECIFIED = 0;
  // Status is PENDING
  STATUS_PENDING = 1;
  // Status is ASSIGNED
  STATUS_ASSIGNED = 2;
  // Status is MODERATED
  STATUS_MODERATED = 3;
  // Status is COMPLETED
  STATUS_COMPLETED = 4;
  // Status is Processing, mainly for async photo rescues
  STATUS_PROCESSING = 5;
}

// Result
enum Result {
  // Result is unspecified
  RESULT_UNSPECIFIED = 0;
  // Result is APPROVED
  RESULT_APPROVED = 1;
  // Result is REJECTED
  RESULT_REJECTED = 2;
}

// MenuIdToEmail
message MenuIdToEmail {
  // Menu ID
  string menu_id = 1;
  // Email
  string email = 2;
}
