syntax = "proto3";

package robot.v1;

import "autonomous_partner_api/partner_endpoints_common.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "robot/mission.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.robot.v1";

// RobotInfo contains the current robot state
message RobotInfo {
  // Canonical id of the robot
  string canonical_id = 1;
  // The time of last checkin is updated everytime the RobotCheckin is called
  // regardless of whether any of the fields are updated
  google.protobuf.Timestamp last_checkin_at = 2;
  // [DEPRECATED] Use location_status field
  double latitude = 3 [deprecated = true];
  // [DEPRECATED] Use location_status field
  double longitude = 4 [deprecated = true];
  // [DEPRECATED] Use help_request_status field
  bool needs_assistance = 5 [deprecated = true];
  // The mission that the robot is on
  string mission_id = 6;
  // The robot code's git sha
  string git_sha = 7;
  // The name of the robot code's git branch
  string git_branch = 8;
  // The run id of the robot (generated by launch_robot Jenkins job)
  int32 run_id = 9;
  // [DEPRECATED] Use vehicle_state.battery_pct field
  int32 battery_pct = 10 [deprecated = true];
  // The id of the operator connected to the robot
  string operator_canonical_id = 11;
  // The state of the connection
  ConnectionState connection_state = 12;
  // The public ip address of the robot.
  string robot_ip = 13;
  // Vehicle state
  VehicleState vehicle_state = 14;
  // Whether robot requires help
  HelpRequestStatus help_request_status = 15;
  // Recent diagnostics
  DiagnosticsSummaries diagnostics_summaries = 16;
  // Location status
  LocationStatus location_status = 17;
  // Mission state
  MissionState mission_state = 18;
  // Mission directive id
  string mission_directive_id = 19;
  // Route directive info
  RouteDirective route_directive = 20;
  // Status of the route that the robot is currently on
  RouteStatus route_status = 21;
  // Operating site id
  string operating_site_id = 22;
  // Name of the map used by the robot
  string hd_map_name = 23;
  // Version of the map used by the robot
  string hd_map_version = 24;
  // The mode of the robot (e.g real vs simulated)
  RobotMode robot_mode = 25;
  // Version of ra protocol supported by the robot, for more detail see:
  // https://docs.google.com/document/d/1ptRcuqkOrqjjeruURgLfMqaG_gMdwihVMaVrGUxBD3o
  string ra_protocol_version = 26;
  // Robot configuration
  RobotConfig robot_config = 27;
  // Operation area
  OperationArea operation_area = 28;
  // Whether the robot is in nolo mode
  bool is_nolo = 29;
  // The list of pending mission ids
  repeated string pending_mission_ids = 30;
  // Whether the robot has delivery queuing paused - superseded by
  // `deliveries_paused`
  bool delivery_queuing_paused = 31 [deprecated = true];
  // The desired route type for the robot by the operator
  RouteDirective.RouteType desired_route_type = 32;
  // Whether the robot has deliveries paused
  bool deliveries_paused = 33;
  // Settings set on the Robot
  OnRobotSettings on_robot_settings = 34;
}

// ConnectionState is the remote-assist connection state of a robot
enum ConnectionState {
  // Unspecified
  CONNECTION_STATE_UNSPECIFIED = 0;
  // No active connection
  CONNECTION_STATE_IDLE = 1;
  // A connection is active
  CONNECTION_STATE_ACTIVE = 2;
}

// Vehicle states; 0th enum index is IDLE instead of
// Reference:
// https://github.com/doordash/cityhopper/blob/develop/ai/common/proto/vehicle_state.proto#L36
// UNSPECIFIED omitted to align with Robot's enum
// buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
enum VCUState {
  // Robot is idle
  VCU_STATE_IDLE = 0;
  // Robot requires controls
  VCU_STATE_CTRL_REQ = 1;
  // Robot is in remote assist
  VCU_STATE_TELEOP = 2;
  // Robot is in autonomy
  VCU_STATE_AUTONOMY = 3;
  // Robot is in override (e.g local operator override)
  VCU_STATE_OVERRIDE = 4;
  // Robot is in safestop
  VCU_STATE_SAFESTOP = 5;
  // Robot is in e-stop
  VCU_STATE_ESTOP = 6;
  // Robot has fault
  VCU_STATE_FAULT = 7;
}

// The type of mission we're operating
message MissionType {
  // Enum representing the type of mission we're operating.
  // This describes the mission and can be used as a metric filter
  // for the different types.
  enum Type {
    // Unspecified
    TYPE_UNSPECIFIED = 0;
    // This mission involves a real, phyiscal store that a robot will
    // need to physically load the order from.
    TYPE_REAL_STORE = 1;
    // This mission involves a virtual test store that has been used to
    // create a delivery for testing.
    TYPE_TEST_STORE = 2;
    // This mission does not involve a real nor virtual DD test store.
    // Instead, only the pickup and dropoff locations are being supplied.
    // An example if this is FleetConsole initiated missions.
    TYPE_NO_STORE = 3;
  }
  // The type of mission
  Type mission_type = 1;
}

// Robot mode determines whether it's a real or simulated robot
message RobotMode {
  // Enum of possible robot modes
  enum Mode {
    // Unspecified
    MODE_UNSPECIFIED = 0;
    // Represents a simulated Robot
    MODE_SIMULATION = 1;
    // Represents a real Robot
    MODE_REAL = 2;
    // Represents a real Robot used for testing
    MODE_REAL_TEST = 3;
    // Represents a short-lived robot used for load and integration tests
    MODE_EPHEMERAL = 4;
  }
  // The mode of the robot
  Mode mode = 1;
}

// Specifies the current state of the robot's cargo hatch
// Reference:
// https://github.com/doordash/cityhopper/blob/develop/vcu_gateway/proto/cargo_hatch_state.proto#L24
message CargoHatchState {
  // Enum representing the state of a cargo hatch
  // UNSPECIFIED omitted to align with Robot's enum
  // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
  enum HatchState {
    // The cargo is closed and locked
    HATCH_STATE_CLOSED_LOCKED = 0;
    // The cargo is closed but unlocked
    HATCH_STATE_CLOSED_UNLOCKED = 1;
    // The cargo is moving
    HATCH_STATE_MOVING = 2;
    // The cargo is open
    HATCH_STATE_OPEN = 3;
    // The cargo is opening but stalled
    HATCH_STATE_OPENING_STALLED = 4;
    // The cargo is closing but stalled
    HATCH_STATE_CLOSING_STALLED = 5;
  }
  // The hatch state enum
  HatchState hatch_state = 1;
}

// OnRobotSettings contains
message OnRobotSettings {
  // Enum representing the boot type the robot is in
  enum BootType {
    // Unspecified
    BOOT_TYPE_UNSPECIFIED = 0;
    // The robot is in a pre-launch state
    BOOT_TYPE_PRE_LAUNCH = 1;
  }

  // Enum representing the type of the robot platform
  enum PlatformType {
    // Unspecified
    PLATFORM_TYPE_UNSPECIFIED = 0;
    // The robot is a badger
    PLATFORM_TYPE_BADGER = 1;
    // The robot is a cheetah
    PLATFORM_TYPE_CHEETAH = 2;
  }

  // The boot type of the robot
  BootType boot_type = 1;
  // The platform type of the robot
  PlatformType platform_type = 2;
}

// Vehicle state contains the info about the VCU state, battery and hatch state
message VehicleState {
  // When the last VCU status update was set
  google.protobuf.Timestamp updated_at = 1;
  // State of the robot's VCU
  VCUState vcu_state = 2;
  // Battery percentage of the robot
  int32 battery_pct = 3;
  // The hatch state of the robot.
  CargoHatchState cargo_hatch_state = 4;
}

// Latitude and longitude coordinates
message LatitudeLongitude {
  // Latitude coordinate
  double latitude = 1;
  // Longitude coordinate
  double longitude = 2;
}

// A LatLong with an associated name
message Location {
  // The street address of the location
  string street_address = 1;
  // LatLong coordinates
  LatitudeLongitude lat_lon = 2;
  // A user-friendly label describing the location.
  string label = 3;
  // A list of annotated lat/lng points to route to at a merchant location.
  // Note: This is only populated for merchant locations.
  autonomous_partner_api.partner_endpoints_common.MerchantMetadata merchant_metadata = 4;
}

// Updates to robot location
message LocationStatus {
  // Client-side timestamp when the location was last updated
  google.protobuf.Timestamp updated_at = 1;
  // Robot last known latitude position
  double latitude = 2;
  // Robot last known longitude position
  double longitude = 3;
}

// Summary of active diagnostics in the robot
message DiagnosticsSummary {
  reserved 2;
  reserved "events";

  // Diagnostic event information
  message DiagnosticsEvent {
    // Client-side timestamp when last time when the diagnostic event was fired
    google.protobuf.Timestamp timestamp = 1;
    // Name or code of the diagnostic event
    string name = 2;
    // Description of the diagnostics; useful for stack shutdowns
    // This field may not be populated at all times to reduce bandwidth
    // consumption
    string description = 3;
  }

  // Name of component
  string component_name = 1;
  // The list of diagnostic events
  repeated DiagnosticsEvent diagnostic_events = 3;
}

// Updates to diagnostics summary
message DiagnosticsSummaries {
  // Client-side timestamp when the last diagnostic summary was updated
  google.protobuf.Timestamp updated_at = 1;
  // Set of the recent diagnostics from robot components
  repeated DiagnosticsSummary summary = 2;
}

// Updates to whether the robot requires remote assistance
message HelpRequestStatus {
  // Whether the robot needs remote assistance
  // TODO(mattjfan): Deprecate, and just check if help_requests is non-empty
  // instead
  bool help_requested = 1;
  // Client-side timestamp when the help request status updated
  google.protobuf.Timestamp updated_at = 2;
  // Client-side timestamp when the help request started being active
  google.protobuf.Timestamp started_at = 3;
  // Individual help request info
  message HelpRequest {
    // The earliest estimated time when robot requires assistance
    google.protobuf.Timestamp eta = 1;
    // The urgency of the help request. See README in cityhopper repo
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    enum Urgency {
      // Robot motion is not blocked on user input
      URGENCY_ANY_TIME = 0;
      // Robot motion blocked on user input, not blocking traffic/pedestrians
      URGENCY_NOT_TIME_SENSITIVE = 42;
      // Robot motion blocked on user input, blocking traffic/pedestrians
      URGENCY_TIME_SENSITIVE = 85;
      // ASAP assistance required
      URGENCY_IMMEDIATE = 127;
    }
    // The urgency of the help request
    Urgency urgency = 2;
    // String representing reason for help request
    string reason = 3;
  }
  // The list of active help requests
  repeated HelpRequest help_requests = 4;
}

// Connection information used by the Robot to connect to the Operator.
message ConnectionInterface {
  // The name of the interface the Robot is connecting to.
  enum InterfaceName {
    // Unspecified
    INTERFACE_NAME_UNSPECIFIED = 0;
    // Data transport
    INTERFACE_NAME_DATA = 1;
    // Camera transport
    INTERFACE_NAME_CAMERA = 2;
    // Heartbeat transport
    INTERFACE_NAME_HEARTBEAT = 3;
  }
  // The destination(operator workstation) ip_address of the operator
  // workstation.
  int32 ip_address = 1;
  // The destination(operator workstation) port for the interface being
  // connected to.
  int32 port = 2;
  // The name of the interface the ip_address and port map to.
  InterfaceName name = 3;
}

// RouteDirective defines a destination point(s) for the robot to route to
// while it's not actively on a mission.
message RouteDirective {
  // The type of route this route directive is for.
  enum RouteType {
    // Unspecified
    ROUTE_TYPE_UNSPECIFIED = 0;
    // Battery swap location
    ROUTE_TYPE_BATTERY_SWAP = 1;
    // Home base location
    ROUTE_TYPE_HOME_BASE = 2;
    // Idle location to wait for deliveries
    ROUTE_TYPE_IDLE_LOCATION = 3;
    // Manual P2P Routes
    ROUTE_TYPE_P2P_EXPLORATION = 4;
    // Auto P2P Routes
    ROUTE_TYPE_AUTO_P2P_EXPLORATION = 5;
  }

  // reserved fields - previously deprecated
  reserved 1;
  reserved "destination_latlons";

  // Destination lat/lon(s) for the robot to route to
  repeated Location destinations = 2;
  // The type of route this route directive is for.
  RouteType route_type = 3;
}

// Contains information about the route that the robot is currently on if any
message RouteStatus {
  // Estimtated remaining time to the robot's current destination
  google.protobuf.Duration estimated_duration_to_current_destination = 1;
  // Estimated remaining time to the robot's final destination
  // While on route to pickup, this will be the sum of the remaining time to the
  // pickup location + that of the dropoff location
  // If there is only 1 routing point/leg, this will contain the same value as
  // the estimated_duration_to_current_destination.
  google.protobuf.Duration estimated_duration_to_final_destination = 2;
  // An encoded string representing the sparse lat/longs for the current route.
  // The route points have been encoded using Google's Encoded Polyline
  // Algorithm Format.
  // https://developers.google.com/maps/documentation/utilities/polylinealgorithm
  // These can be used to display the current route the robot is on.
  string encoded_current_route = 3;
  // The mission id that the route status is for if any. Otherwise, an empty
  // string. This is used to allow LFS to identify if the route status is for
  // the current mission.
  string mission_id = 4;
}

// Robot configuration contains robot settings that are not directly published
// by the robot
message RobotConfig {
  // Refers the robot's vehicle config id as defined in Partner Portal
  google.protobuf.StringValue vehicle_config_id = 1;
  // Free-form string tags associated with a robot; used to tag robots with
  // operation area selector tags
  repeated string tags = 2;
  // The robot's associated dispatch locations used for fleet dispatch. Dispatch
  // locations are represented by map features in the labs map service.
  repeated string dispatch_location_map_feature_ids = 3;
}

// An operation area is assigned to a robot by LFS based on location and other
// robot states. Every delivery assignment will have an operation area attached,
// which is used by LFS to find eligible robots with the same operation area.
// Operation areas are defined in ADP where AV eligible orders are bucketed into
// operation areas using several criterias like merchants, customer and
// geofence.
message OperationArea {
  // UUID of operation area
  string uuid = 1;
  // Name of operation area
  string name = 2;
}
