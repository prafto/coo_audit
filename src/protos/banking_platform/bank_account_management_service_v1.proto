syntax = "proto3";

package banking_platform.v1;

import "banking_platform/banking_v1.proto";
import "common/money.proto";
import "common/service_client_config.proto";
import "doordash.api/annotations.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option go_package = "github.com/doordash/services-protobuf/generated/banking_platform/api/v1";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.banking_platform.rpc.api.v1";

// Banking Account Management Service
service BankingAccountManagementV1Service {
  option (doordash.api.service) = {
    name: "banking-platform"
    url: "banking-platform-api.service.prod.ddsd"
    port: 50051
    name_spaces: ["banking-platform"]
    api_key_name: "BANKING_PLATFORM_API_KEY"
    owner: {
      name: "banking-platform"
      id: "opex_dx-financials"
      slack_channel: "#ask-eng-payout"
      email_alias: "dx-financials-eng@doordash.com"
    }
    target_products: [
      DX,
      CX
    ]
  };

  // Timeout after 5 mins.
  option (service_client.client_config).response_attempt_timeout_millis = 300000;

  // get all transactions for a bank account in given time range
  rpc GetAccountTransactions(GetAccountTransactionsRequest) returns (GetAccountTransactionsResponse) {
    option (google.api.http) = {get: "/banking-platform/v1/account/{banking_account_id}/transactions"};
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [
        DX_USER,
        CX_USER
      ]
      target_products: [
        DX,
        CX
      ]
    };
  }
}

// Get account transaction request
message GetAccountTransactionsRequest {
  // entity id used for banking
  BankingUser banking_user = 1;
  // bank account id, resolve from path parameter
  google.protobuf.StringValue banking_account_id = 2;
  // banking provider, resolve from query parameter
  BankingProvider banking_provider = 3;
  // start date, resolve from query parameter
  google.protobuf.Timestamp start_date = 4;
  // end date, resolve from query parameter
  google.protobuf.Timestamp end_date = 5;
}

// account transaction response
message GetAccountTransactionsResponse {
  // transactions
  repeated AccountTransaction transactions = 1;
}

// Account transaction
message AccountTransaction {
  // display date
  google.protobuf.Timestamp transaction_date = 1;
  // statement descriptor
  google.protobuf.StringValue statement_descriptor = 2;
  // category
  BankingTransactionCategory category = 3;
  // amount
  money.MonetaryFields amount = 4;
  // status
  BankingTransactionStatus status = 5;
  // transaction id
  google.protobuf.StringValue id = 6;
  // mcc category
  google.protobuf.StringValue mcc_category = 7;
  // rewards earned
  money.MonetaryFields rewards_earned = 8;
  //details about the transaction
  TransactionDetails details = 9;
}

// details about the transaction
message TransactionDetails {
  // transaction order
  TransactionOrder transaction_order = 9;
  // active hold
  google.protobuf.BoolValue active_hold = 10;
}

//Banking transaction category
enum BankingTransactionCategory {
  // unspecified
  BANKING_TRANSACTION_CATEGORY_UNSPECIFIED = 0;
  // pos
  BANKING_TRANSACTION_CATEGORY_POS = 1;
  // bill pay
  BANKING_TRANSACTION_CATEGORY_BILL_PAY = 2;
  // ach
  BANKING_TRANSACTION_CATEGORY_ACH = 3;
  // ach reverse
  BANKING_TRANSACTION_CATEGORY_ACH_REVERSE = 4;
  // goal transfer
  BANKING_TRANSACTION_CATEGORY_GOAL_TRANSFER = 5;
  // payout
  BANKING_TRANSACTION_CATEGORY_PAYOUT = 6;
  // reissue card
  BANKING_TRANSACTION_CATEGORY_REISSUE_CARD = 7;
  // rewards credit
  BANKING_TRANSACTION_CATEGORY_REWARDS_CREDIT = 8;
  // cash withdrawal
  BANKING_TRANSACTION_CATEGORY_CASH_WITHDRAWAL = 9;
  // prepaid activation and load
  BANKING_TRANSACTION_CATEGORY_PREPAID_ACTIVATION_AND_LOAD = 10;
  // load money onto card
  BANKING_TRANSACTION_CATEGORY_LOAD_MONEY_ONTO_CARD = 11;
  // card replacement fee
  BANKING_TRANSACTION_CATEGORY_CARD_REPLACEMENT_FEE = 12;
  // card replacement fee reversal
  BANKING_TRANSACTION_CATEGORY_CARD_PLACEMENT_FEE_REVERSAL = 13;
  // dormancy fee
  BANKING_TRANSACTION_CATEGORY_DORMANCY_FEE = 14;
  // dormancy fee reversal
  BANKING_TRANSACTION_CATEGORY_DORMANCY_FEE_REVERSAL = 15;
  // card to card transfers
  BANKING_TRANSACTION_CATEGORY_CARD_TO_CARD_TRANSFER = 16;
  // rewards transaction
  BANKING_TRANSACTION_CATEGORY_REWARDS_TRANSACTION = 17;
}

//transaction status
enum BankingTransactionStatus {
  // unspecified
  BANKING_TRANSACTION_STATUS_UNSPECIFIED = 0;
  // posted
  BANKING_TRANSACTION_STATUS_POSTED = 1;
  // pending
  BANKING_TRANSACTION_STATUS_PENDING = 2;
}

// transaction order
message TransactionOrder {
  // transaction order to e.g. transfer to
  TransactionOrderDetail transaction_order_to = 1;
  // transaction order from e.g. transfer from
  TransactionOrderDetail transaction_order_from = 2;
}

// message for transaction order detail
message TransactionOrderDetail {
  // last 4 digit of transaction account
  google.protobuf.StringValue account_last4 = 1;
  // account title e.g. crimson
  google.protobuf.StringValue account_title = 2;
  // account type e.g. checking
  google.protobuf.StringValue account_type = 3;
}
