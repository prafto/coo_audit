syntax = "proto3";

package merchant_data_service_organization_service.v1;

import "common/organization_service.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_outer_classname = "OrganizationServiceProto";
option java_package = "com.doordash.rpc.merchant_data_service_organization_service";

// Organization Sub-service
service OrganizationService {
  // Get an entity
  rpc GetEntity(GetEntityRequest) returns (GetEntityResponse) {}
  // Get the descendants of an entity
  rpc GetOrganization(GetOrganizationRequest) returns (GetOrganizationResponse) {}
  // Get the descendants of an entity
  rpc GetChildren(GetChildrenRequest) returns (GetChildrenResponse) {}
  // Get the Ancestors of an entity
  rpc GetAncestors(GetAncestorsRequest) returns (GetAncestorsResponse) {}
  // Create an organization
  rpc CreateOrganization(CreateOrganizationRequest) returns (CreateOrganizationResponse) {}
  // Create an organization from an existing business group
  rpc CreateOrganizationFromExistingBusinessGroup(CreateOrganizationFromExistingBusinessGroupRequest) returns (CreateOrganizationFromExistingBusinessGroupResponse) {}
  // Create an organization
  rpc UpdateOrganizationByOrganizationId(UpdateOrganizationByOrganizationIdRequest) returns (UpdateOrganizationByOrganizationIdResponse) {}
  // Create organization link
  rpc CreateOrganizationLink(CreateOrganizationLinkRequest) returns (CreateOrganizationLinkResponse) {}
  // Update organization link
  rpc UpdateOrganizationLink(UpdateOrganizationLinkRequest) returns (UpdateOrganizationLinkResponse) {}
  // List all organizations
  rpc ListOrganizations(ListOrganizationsRequest) returns (ListOrganizationsResponse) {}
}

// Entity
message Entity {
  // Entity id
  int64 id = 1;
  // Entity type
  organization_service.v1.EntityType type = 2;
  // Entity Name
  google.protobuf.StringValue name = 3;
}

// Request for GetEntity
message GetEntityRequest {
  // Entity id
  // Required
  google.protobuf.Int64Value id = 1;
  // Entity type
  // Required
  organization_service.v1.EntityType entity_type = 2;
}

// Response for GetEntity
message GetEntityResponse {
  // Entity
  Entity entity = 1;
}

// Organization
message Organization {
  // Organization id
  int64 id = 1;
  // Organization type
  organization_service.v1.OrganizationType type = 2;
  // Organization Name
  google.protobuf.StringValue name = 3;
  // SalesforceId
  google.protobuf.StringValue salesforce_id = 4;
  // NetsuiteId
  google.protobuf.StringValue netsuite_id = 5;
  // Organization status
  organization_service.v1.OrganizationStatus status = 6;
  // last updated time
  google.protobuf.Timestamp updated_at = 7;
  // Parent model.
  organization_service.v1.Model parent_model = 8;
}

// Request for GetOrganization
message GetOrganizationRequest {
  // Organization id
  // Required
  google.protobuf.Int64Value id = 1;
}

// Response for GetOrganization
message GetOrganizationResponse {
  // Organization
  Organization organization = 1;
}

// Request for GetChildren
message GetChildrenRequest {
  // Entity id
  // Required
  google.protobuf.Int64Value id = 1;
  // Entity type
  // Required
  organization_service.v1.EntityType entity_type = 2;
  // Number of records, default 25
  google.protobuf.Int32Value limit = 3;
  // cursor to point where to pick the list from
  google.protobuf.StringValue cursor = 4;
}

// Entity with array of children
message GetChildrenResponse {
  // Entity
  Entity entity = 1;
  // Number of records, default 25
  google.protobuf.Int32Value limit = 2;
  // cursor to point where to pick the list from
  google.protobuf.StringValue cursor = 3;
  // children of entity
  repeated Entity children = 4;
}

// Request for GetAncestors
message GetAncestorsRequest {
  // id of entity
  // Required
  google.protobuf.Int64Value id = 1;
  // Entity type
  // Required
  organization_service.v1.EntityType entity_type = 2;
}

// Entity with parents
message ParentedEntity {
  // Entity id
  Entity entity = 1;
  // recursion to allow nested parents
  repeated ParentedEntity parents = 2;
}

// Entity with array of parents
message GetAncestorsResponse {
  // ParentedEntity, in nested form
  ParentedEntity parented_entity = 1;
}

// Request for CreateOrganization
message CreateOrganizationRequest {
  // Name of organization
  // Required
  google.protobuf.StringValue name = 1;
  // Organization type
  // Required
  organization_service.v1.OrganizationType organization_type = 3;
  // required_parent_id if the parent_id is required e-g. creating franchise require business_id as parent
  google.protobuf.Int64Value required_parent_id = 4;
  // Parent entity type (if required)
  organization_service.v1.EntityType required_parent_entity_type = 5;
  // SalesforceId
  google.protobuf.StringValue salesforce_id = 6;
  // NetsuiteId
  google.protobuf.StringValue netsuite_id = 7;
  // Status
  // Required
  google.protobuf.StringValue status = 8;
}

// Request for CreateOrganizationFromExistingBusinessGroup
message CreateOrganizationFromExistingBusinessGroupRequest {
  // Id of existing business group
  // Required
  google.protobuf.StringValue business_group_id = 1;
}

// Response for CreateOrganizationFromExistingBusinessGroup
message CreateOrganizationFromExistingBusinessGroupResponse {
  // Organization
  Organization organization = 1;
}

// Response for CreateOrganization
message CreateOrganizationResponse {
  // Organization
  Organization organization = 1;
}

// Request for UpdateOrganizationByOrganizationId
message UpdateOrganizationByOrganizationIdRequest {
  // Required
  Organization organization = 1;
  /*
   *  FieldMask provides an option to do partial update:
   *  Service use the items in field mask to update only
   *  party of an object
   *  If field mask is null/empty, service will do partial update
   *  and fields with null value will be ignored.
   */
  google.protobuf.FieldMask update_mask = 2;
}

// Response for UpdateOrganizationByOrganizationId
message UpdateOrganizationByOrganizationIdResponse {
  // Entity
  Organization organization = 1;
}

// Message to represent connected entities
message OrganizationLink {
  // id (UUID)
  string id = 1;
  // id of parent organization entity
  int64 organization_id = 2;
  // id of child entity
  int64 child_id = 3;
  // child entity type
  organization_service.v1.EntityType child_entity_type = 4;
  // organization link status
  organization_service.v1.OrganizationLinkStatus status = 5;
}

// Request for CreateOrganizationLink
message CreateOrganizationLinkRequest {
  // id of parent organization entity
  // Required
  int64 organization_id = 1;
  // id of child entity
  // Required
  int64 child_id = 2;
  // child entity type
  // Required
  organization_service.v1.EntityType child_entity_type = 3;
  // organization link status
  // Required
  organization_service.v1.OrganizationLinkStatus status = 4;
}

// Response of CreateOrganizationLink
message CreateOrganizationLinkResponse {
  // organization link
  OrganizationLink organization_link = 1;
}

// Request for UpdateOrganizationLink
message UpdateOrganizationLinkRequest {
  // organization link
  OrganizationLink organization_link = 1;
}

// Response of UpdateOrganizationLink
message UpdateOrganizationLinkResponse {
  // organization link
  OrganizationLink organization_link = 1;
}

// Request for ListOrganizations
message ListOrganizationsRequest {
  // cursor to point where to pick the list from
  google.protobuf.StringValue cursor = 1;
  // Limit for paginated response, default 25
  google.protobuf.Int32Value limit = 2;
}

// Response of ListOrganizations
message ListOrganizationsResponse {
  // cursor to point where to pick the list from
  google.protobuf.StringValue cursor = 1;
  // Limit for paginated response
  google.protobuf.Int32Value limit = 2;
  // List of organizations
  repeated Organization organizations = 3;
}
