syntax = "proto3";
package doordash.notification_atc.v1;

import "common/service_client_config.proto";
import "comms-service/common.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "growth/common/common.proto";
import "notification_atc/common.proto";
import "postal_service/localization.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.notification_atc";

// Service definition of notification air traffic control
service NotificationAirTrafficControlService {
  // endpoint for hello function in notification air traffic control
  rpc Hello(HelloRequest) returns (HelloResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 500;
    option (service_client.client_method_config).retry_config.initial_wait_millis = 200;
    option (service_client.client_method_config).circuit_breaker_config.failure_rate_threshold = 0.25;
  }

  // Endpoint for sending single notification to Growth service
  rpc SendNotification(SendNotificationRequest) returns (SendNotificationResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 500;
    option (service_client.client_method_config).retry_config.initial_wait_millis = 200;
    option (service_client.client_method_config).circuit_breaker_config.failure_rate_threshold = 0.25;
  }

  // Endpoint for sending single notification to notification air traffic control service
  rpc SendNotificationV2(SendNotificationV2Request) returns (SendNotificationV2Response) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 500;
    option (service_client.client_method_config).retry_config.initial_wait_millis = 200;
    option (service_client.client_method_config).circuit_breaker_config.failure_rate_threshold = 0.25;
  }

  // Endpoint for sending multiple notifications to Growth service, suggested batch size is 10 now, will update later
  rpc SendBatchNotifications(SendBatchNotificationsRequest) returns (SendBatchNotificationsResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 1000;
    option (service_client.client_method_config).retry_config.initial_wait_millis = 500;
    option (service_client.client_method_config).circuit_breaker_config.failure_rate_threshold = 0.25;
  }

  // Endpoint for sending multiple notifications to notification air traffic control service, suggested batch size is 10 now, will update later
  rpc SendBatchNotificationsV2(SendBatchNotificationsV2Request) returns (SendBatchNotificationsV2Response) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 1000;
    option (service_client.client_method_config).retry_config.initial_wait_millis = 500;
    option (service_client.client_method_config).circuit_breaker_config.failure_rate_threshold = 0.25;
  }

  // Endpoint for utilization test
  rpc UtilizationTest(UtilizationTestRequest) returns (UtilizationTestResponse);

  // Endpoint for debug send notification v2 used for sandbox
  rpc DebugSendNotificationV2(DebugSendNotificationV2Request) returns (DebugSendNotificationV2Response);
}

// Hello endpoint request
message HelloRequest {
  // string for hello request
  google.protobuf.StringValue hello_request_message = 1;
}

// Hello endpoint response
message HelloResponse {
  // string for hello response
  google.protobuf.StringValue hello_response_message = 1;
}

// SendNotification endpoint request
message SendNotificationRequest {
  // random and unique notification_request_id
  google.protobuf.StringValue notification_request_id = 1;
  // user_entity_id
  google.protobuf.StringValue user_entity_id = 2;
  // user_entity_type(ie., Cx, Dx)
  UserEntityType user_entity_type = 3;
  // program Id
  google.protobuf.StringValue program_id = 4;
  // program name
  google.protobuf.StringValue program_name = 5;
  // program experiment variant
  google.protobuf.StringValue program_experiment_variant = 6;
  // send timestamp
  google.protobuf.Timestamp send_at = 7;
  // scheduled time based on the time_zone below (ie., "17.5" stands for local time 17:30 PM)
  google.protobuf.DoubleValue scheduled_at = 8;
  // send now (ie., immediate send to bypass prioritization)
  google.protobuf.BoolValue send_now = 9;
  // source (ie., Iterable, FPN, Journey)
  SourceType source = 10;
  // channel (ie., Hub, Push, Email), Hub and Push may comes together as one notif request
  repeated ChannelType channels = 11;
  // message_channel (ie., Push Marketing)
  google.protobuf.StringValue message_channel = 12;
  // message_type (ie., Push Reminder, Push Recommendation)
  doordash_comms_service.MessageType message_type = 13;
  // user timeZone (ie., American/Los Angeles
  google.protobuf.StringValue time_zone = 14;
  // user locale (ie., en_US)
  google.protobuf.StringValue locale = 15;
  // notification contents
  NotificationContents contents = 16;
  // user email used by iterable for frequency cap(adhoc notifications needed)
  google.protobuf.StringValue email = 17;
  // expiresAt indicates when notification should be dropped from priority queue for non-realtime
  google.protobuf.Timestamp expires_at = 18;
  // message_type, will deprecate message_type field
  NotificationMessageType notification_message_type = 19;
  // notification audience Type
  .growth.common.v1.NotificationAudienceType notification_audience_type = 20;
  // metadata: this is optional and only needed for Mx role_id now, can add other metadata fields for other tenant.
  Metadata metadata = 21;
  // notification metadata
  NotificationMetadata notification_metadata = 22;
  // additional properties map reserved for sandbox debug endpoint
  map<string, string> properties = 23;
}

// SendNotificationV2 endpoint request
message SendNotificationV2Request {
  // these are deleted values, do not reuse
  reserved 8;
  // these are deleted fields, do not reuse
  reserved "email_config";

  // notification_campaign_id as primary key in templating service
  google.protobuf.StringValue notification_campaign_id = 1;
  // user_entity_id
  google.protobuf.StringValue user_entity_id = 2;
  // receive request timestamp
  google.protobuf.Timestamp receive_at = 3;
  // template fields for push, hub, email
  google.protobuf.Struct template_fields = 4;
  // NP will call the templating service to get the default value if this field is null
  google.protobuf.DoubleValue scheduled_at = 5;
  // expiresAt indicates when notification should be dropped from priority queue for non-real time
  // NP will call the templating service to get the default value if this field is null.
  google.protobuf.Timestamp expires_at = 6;
  // this is optional if time zone and locale can be obtained from UPSS
  UserConfig user_config = 7;
  // this is optional and can add other metadata fields like role_id, shift_id, content_id for other tenant.
  google.protobuf.Struct context = 9;
  // specific notification config for push, email, hub, sms, etc.
  NotificationConfig notification_config = 10;
  // additional properties map reserved for sandbox debug endpoint
  map<string, string> properties = 11;
}

// SendNotifications endpoint request
message SendBatchNotificationsRequest {
  // repeated SendNotificationRequest
  repeated SendNotificationRequest notification_requests = 1;
}

// SendNotificationsV2 endpoint request
message SendBatchNotificationsV2Request {
  // repeated SendNotificationRequest
  repeated SendNotificationV2Request notification_requests = 1;
}

// DebugSendNotificationV2 endpoint request
message DebugSendNotificationV2Request {
  // notification_campaign_id as primary key in templating service
  google.protobuf.StringValue notification_campaign_id = 1;
  // user_entity_id
  google.protobuf.StringValue user_entity_id = 2;
  // receive request timestamp
  google.protobuf.Timestamp receive_at = 3;
  // template fields for push, hub, email
  google.protobuf.Struct template_fields = 4;
  // NP will call the templating service to get the default value if this field is null.
  google.protobuf.DoubleValue scheduled_at = 5;
  // expiresAt indicates when notification should be dropped from priority queue for non-real time
  // NP will call the templating service to get the default value if this field is null.
  google.protobuf.Timestamp expires_at = 6;
  // this is optional if time zone and locale can be obtained from UPSS
  UserConfig user_config = 7;
  // this is optional and can add other metadata fields like role_id, shift_id, content_id for other tenant.
  google.protobuf.Struct context = 8;
  // specific notification config for push, email, hub, sms, etc.
  NotificationConfig notification_config = 9;

  /*
     customized properties for sandbox debug endpoint so that developer has the control to trigger different flow inside ATC.
     Since these can change based on the request of ongoing projects, it is made to a free-formed map to remain flexibility.
     Example properties include:
     - send_now: if set to true, the request will bypass journey scheduler and produced to the next kafka queue directly
     - schedule_fast: if set to true, will speed up the scheduling with journey, this property will schedule the notification
         in the next 5 minutes through journey, instead of the original upcoming 11AM. This would be overriden by send_now.
     - routing_context: can only be set by the sandbox instance to store the routing context passed for the request
  */
  map<string, string> properties = 10;
}

// notification contents
message NotificationContents {
  // repeated NotificationContent
  repeated NotificationContent contents = 1;
}

// content of notification
message NotificationContent {
  // content can be push, email, sms
  oneof content {
    // the content of push notification
    PushNotificationContent push_content = 1;
    // the content of hub notification
    HubNotificationContent hub_content = 2;
    // the content of email notification
    EmailNotificationContent email_content = 3;
  }
}

// UtilizationTest endpoint request
message UtilizationTestRequest {
  // consumer id
  google.protobuf.StringValue consumer_id = 1;
}

// UtilizationTest endpoint response
message UtilizationTestResponse {}

// the content of push notification
message PushNotificationContent {
  // title
  google.protobuf.StringValue title = 1;
  // body
  google.protobuf.StringValue body = 2;
  // deeplink
  google.protobuf.StringValue deeplink = 3;
  // imageURL
  google.protobuf.StringValue image_url = 4;
  // data_fields (if title and/or body is template string with placeholder fields)
  map<string, string> data_fields = 5;
  // schematized placeholders (if title and body are not given)
  postal_service.v1.Placeholders placeholders = 6;
  // push content template id in postal-service (if Placeholders is presented)
  google.protobuf.StringValue configuration_id = 7;
  // silent Push (Note: silent push currently only works well for iOS Devices)
  google.protobuf.BoolValue silent_push = 8;
  // expiresAt indicates when notification should be dropped if too long in processing
  google.protobuf.Timestamp expires_at = 9;
  // template_fields for V2 notification
  google.protobuf.Struct template_fields = 10;
  // unique notification_uuid for 1 to 1 mapping with a notification content, used for tracking, optional
  google.protobuf.StringValue notification_uuid = 11;
}

// the content of hub notification
message HubNotificationContent {
  // description
  google.protobuf.StringValue description = 1;
  // data_fields (if description is template string with placeholder fields)
  map<string, string> data_fields = 2;
  // schematized placeholders (if description is not given)
  postal_service.v1.Placeholders placeholders = 3;
  // hub content template id in growth-service (if Placeholders is presented)
  google.protobuf.StringValue configuration_id = 4;
  // custom map of data that source can send (optional)
  google.protobuf.Struct custom = 5;
  // Children data for hub content (contains hub carousel related info and optional)
  repeated google.protobuf.Struct children = 6;
  // expiresAt indicates when notification should be dropped if too long in processing
  google.protobuf.Timestamp expires_at = 7;
  // unique notification_uuid for 1 to 1 mapping with a notification content, used for tracking, optional
  google.protobuf.StringValue notification_uuid = 8;
}

// the content of email notification
message EmailNotificationContent {
  // email campaign id
  google.protobuf.StringValue template_id = 1;
  // data fields
  map<string, string> data_fields = 2;
  // expiresAt indicates when notification should be dropped if too long in processing
  google.protobuf.Timestamp expires_at = 3;
  // list of customer email addresses
  repeated google.protobuf.StringValue recipients_to = 4;
  // list of cc email addresses
  repeated google.protobuf.StringValue recipients_cc = 5;
  // list of bcc email addresses
  repeated google.protobuf.StringValue recipients_bcc = 6;
  // template_fields for V2 notification
  google.protobuf.Struct template_fields = 7;
  // unique notification_uuid for 1 to 1 mapping with a notification content, used for tracking, optional
  google.protobuf.StringValue notification_uuid = 8;
}

// the metadata of User Entity used for notification sending or last mile check
message UserMetadata {
  // user locale (eg, en_US)
  google.protobuf.StringValue locale = 1;
  // user timeZone (eg, American/Los Angeles)
  google.protobuf.StringValue time_zone = 2;
}

// the source of notification, ie., Iterable, EP, Journey
enum SourceType {
  // unspecified source
  SOURCE_TYPE_UNSPECIFIED = 0;
  // source is Iterable
  SOURCE_TYPE_ITERABLE = 1;
  // source is FPN
  SOURCE_TYPE_FPN = 2;
  // source is Journey Workflow
  SOURCE_TYPE_JOURNEY_WORKFLOW = 3;
}

// the type of channel
enum ChannelType {
  // unspecified channel
  CHANNEL_TYPE_UNSPECIFIED = 0;
  // channel type is push
  CHANNEL_TYPE_PUSH = 1;
  // channel type is notification hub
  CHANNEL_TYPE_HUB = 2;
  // channel type is email
  CHANNEL_TYPE_EMAIL = 3;
  // channel type is sms
  CHANNEL_TYPE_SMS = 4;
}

// the Type of User Entity
enum UserEntityType {
  // unspecified entity type
  USER_ENTITY_TYPE_UNSPECIFIED = 0;
  // Consumer
  USER_ENTITY_TYPE_CONSUMER = 1;
  // Dasher
  USER_ENTITY_TYPE_DASHER = 2;
  // Merchant
  USER_ENTITY_TYPE_MERCHANT = 3;
}

// Use metadata to include the role ids from Mx
message Metadata {
  // Mx role id is included.
  repeated google.protobuf.Int32Value role_id = 1;
  // Dx shift id
  google.protobuf.Int32Value shift_id = 2;
  // Dx content id (a.k.a delivery id)
  google.protobuf.Int32Value content_id = 3;
  // Dx content id, int64 for longer delivery ids
  google.protobuf.Int64Value content_id_v2 = 4;
  // Dx shift id with int64 support
  google.protobuf.Int64Value shift_id_v2 = 5;
}

// Notification metadata to include campaign name and feature flags
message NotificationMetadata {
  // campaign name
  google.protobuf.StringValue campaign_name = 1;

  /* Interim feature flags used to control the rollout stages.
     Once features are 100% enabled, these flags will not be required.
     Since they are temporary flags, a free-formed map helps to simplify client-server sync.
     Example flags include:
     - should_use_offline_ranker_v0:
       if true, use offline ranker. If false, process those notifs with is_candidate=false in PQ
     - should_use_notification_ranker_v2:
       if true, use sibyl ranker.
     - is_candidate
     - should_check_freshness
     - should_check_store_openness
     - should_check_store_radius
     - should_check_promo
  */
  map<string, google.protobuf.BoolValue> feature_flags = 2;

  // Following are fields needed to save the notification history.
  // store id.
  google.protobuf.StringValue store_id = 3;
  // Notification content source, Eg, top10, TSN, offerHub, etc.
  google.protobuf.StringValue content_source = 4;
  // For MxP notification, promotion type is needed in notification history.
  google.protobuf.StringValue promotion_type = 5;
  // passed from FPN to ATC for UPSS.
  google.protobuf.StringValue notification_template_id = 6;
}

// UserConfig is used to include data related to user, like: user time zone and locale
message UserConfig {
  // these are deleted values, do not reuse
  reserved 2;
  // these are deleted fields, do not reuse
  reserved "locale";

  // user timeZone (ie., American/Los Angeles)
  // NP will call UPSS to get the default value if this field is null
  google.protobuf.StringValue time_zone = 1;
  // user locale (eg, en_US)
  // NP will call UPSS to get the default value if this field is null
  google.protobuf.StringValue locale_string = 3;
}

// NotificationConfig is one of email config, push config, etc.
message NotificationConfig {
  // config for different channels
  oneof config {
    // email notification config. We can add more config for other channels in the future.
    EmailConfig email_config = 1;
    // push notification config.
    PushConfig push_config = 2;
  }
}

// EmailConfig is used to include data related to email, like: recipients_to
message EmailConfig {
  // these are deleted values, do not reuse
  reserved 1;
  // these are deleted fields, do not reuse
  reserved "recipients_to";

  // recipients_to
  google.protobuf.StringValue recipient = 2;
}

// PushConfig is used to include data related to push, like: ProgramName
message PushConfig {
  // these values are deprecated. we do not pass push configs in the request. retrieve from templating service instead
  reserved 1;
  // these values are deprecated. we do not pass push configs in the request. retrieve from templating service instead
  reserved "program_name";
  // these values are deprecated. we do not pass push configs in the request. retrieve from templating service instead
  reserved 2;
  // these values are deprecated. we do not pass push configs in the request. retrieve from templating service instead
  reserved "feature_flags";
  // these values are deprecated. we do not pass push configs in the request. retrieve from templating service instead
  reserved 3;
  // these values are deprecated. we do not pass push configs in the request. retrieve from templating service instead
  reserved "content_source";
  // these values are deprecated. we do not pass push configs in the request. retrieve from templating service instead
  reserved 4;
  // these values are deprecated. we do not pass push configs in the request. retrieve from templating service instead
  reserved "promotion_type";
}

// SendNotification endpoint response
message SendNotificationResponse {
  // Unique Notification uuid to track successfully processed/sent notification.
  string notification_uuid = 1;
}

// SendNotificationV2 endpoint response
message SendNotificationV2Response {
  // notification_uuid is deprecated, do not use
  reserved 1;
  reserved "notification_uuid";

  // uuid to track successfully ingested notification request.
  string notification_request_uuid = 2;
}

// SendNotifications endpoint response
message SendBatchNotificationsResponse {
  // Unique Notification UUIDs to track all successfully processed/sent notifications.
  repeated string notification_uuids = 1;
}

// SendNotificationsV2 endpoint response
message SendBatchNotificationsV2Response {
  // notification_uuids are deprecated, do not use
  reserved 1;
  reserved "notification_uuids";

  // Unique Notification uuid to track successfully processed/sent notification requests.
  repeated string notification_request_uuids = 2;
}

// DebugSendNotificationV2 endpoint response
message DebugSendNotificationV2Response {
  // Unique Notification uuid to track successfully processed/sent notification.
  string notification_uuid = 1;
}
