syntax = "proto3";

package log_router.v1;

import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";

option go_package = "github.com/doordash/services-protobuf/generated/log_router";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.log_router";

// LogRouter service endpoints
service LogRouterService {
  // Get all sampling decisions
  rpc GetSamplingDecisions(GetSamplingDecisionsRequest) returns (GetSamplingDecisionsResponse);
}

// Phase of sampling
enum Phase {
  // Unspecified
  PHASE_UNSPECIFIED = 0;
  // Pre Sampling
  PHASE_PRE_SAMPLING = 1;
  // Post Sampling
  PHASE_POST_SAMPLING = 2;
}

// Client requesting the sampling decisions
enum Client {
  // Unspecified
  CLIENT_UNSPECIFIED = 0;
  // Scalyr pipeline client
  CLIENT_SCALYR = 1;
  // Odin pipeline client
  CLIENT_ODIN = 2;
}

// LogUsageRecord to track usage at app and phase level
message LogUsageRecord {
  // Policy key
  string policy_key = 1;
  // Scalyr logging-group
  string logging_group = 2;
  // k8s namespace
  string namespace = 3;
  // k8s service
  string service = 4;
  // k8s app
  string app = 5;
  // Sampling phase
  Phase phase = 6;
  // log usage bytes
  float seen_bytes = 7;
}

// Request to query LogRouter for all sampling decisions
message GetSamplingDecisionsRequest {
  // GetSamplingDecisionsRequest is empty
  google.protobuf.Empty empty = 1;
  // Client info
  Client client = 2;
}

// LogRouter Response to list all sampling decisions
message GetSamplingDecisionsResponse {
  // List of sampling decisions
  repeated SamplingDecision sampling_decisions = 1;
}

// Request proto emitted to track log usage
message LogUsageRequest {
  // List of log usage records
  repeated LogUsageRecord records = 1;
}

// SamplingDecision is to replicate what exists today as a json. More advanced version of this message will be
// implemented later which can support non-k8s workload sampling, pre and post kafka sampling decisions
message SamplingDecision {
  // Policy key generated based on the attributes
  string policy_key = 1;
  // UUID to represent the sampling decision used to retrieve a specific sampling decision
  string policy_id = 2;
  // Scalyr logging-group
  string logging_group = 3;
  // k8s namespace
  string namespace = 4;
  // k8s service
  string service = 5;
  // k8s app
  string app = 6;
  // sampling percentage indicated % of logs shipped
  // 0 indicates all logs are dropped
  // 100 indicates all logs are shipped
  float sampling_percentage = 7;
  // sampling enforced
  bool sampling_enforced = 8;
}
