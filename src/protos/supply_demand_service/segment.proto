syntax = "proto3";

// buf:lint:ignore DIRECTORY_SAME_PACKAGE
// buf:lint:ignore PACKAGE_VERSION_SUFFIX
package supply_demand_service;

import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option java_multiple_files = true;
option java_package = "com.doordash.rpc.supply_demand_service";

message SupplyDemandDataSegment {
  google.protobuf.Timestamp created_at = 1;
  int32 starting_point_id = 2;
  int32 num_outstanding_deliveries = 3;
  int32 num_unassigned_deliveries = 4;
  int32 num_active_shifts = 5;
  int32 num_busy_shifts = 6;
  int32 num_idle_shifts = 7;
  double flf = 8;
  double smoothed_flf = 9;
  double regularized_flf = 10;
  double flf_slope = 11;
  string horizon = 12;
  bool is_killed = 13;
  reserved 14;
  //percentage of caps filled by vehicle_type_id
  map<int32, double> percentage_caps_filled_by_vehicle_type_id = 15;
  //dynamic limits by vechile type_id
  map<int32, int32> dynamic_limits_by_vehicle_type_id = 16;
  // number of active shifts by vechile type_id
  map<int32, double> active_shifts_by_vehicle_type_id = 17;
  // active dash now shifts count
  int32 active_dash_now_shifts = 18;
  // active scheduled shifts count
  int32 active_scheduled_shifts = 19;
  string heatmap_busyness = 20;
  // free form json to store StartingPointStatusV2 flags
  string starting_point_status = 21;
  // num_active_shifts with edge cases to match the real-time utilization definition
  int32 num_active_shifts_v2 = 22;
}

message SupplyQualityData {
  int64 delivery_id = 1;
  int32 version_id = 2;
  double score = 3;
}

// Log of how undersupplied a submarket is
message SupplyState {
  int32 submarket_id = 1;
  string supply_state = 2;
  string variant = 3;
}

message HotspotIguazu {
  int64 created_at = 1;
  int32 starting_point_id = 2;
  string title = 3;
  string description = 4;
  double lat = 5;
  double lng = 6;
  double weight = 7;
  int64 next_refresh_at = 8;
  double eps = 9;
  double min_points = 10;
  string metadata = 11;
  string top_store_ids = 12;
  string hex_addresses = 13;
  string polylines = 14;
  string uuid = 15;
}

// Log notifications sent from SDS
message NotificationIguazu {
  int32 starting_point_id = 1;
  string dasher_id = 2;
  string notification_template = 3;
  string notification_parameters = 4;
  string metadata = 5;
}

// Log of an increase or decrease to a District's delivery radius
message DistrictRadiusAdjustment {
  int32 submarket_id = 1;
  int64 district_id = 2;
  int64 old_radius = 3;
  int64 new_radius = 4;
  string variant = 5;
}

message MMTIguazu {
  google.protobuf.Timestamp created_at = 1;
  google.protobuf.StringValue starting_point_id = 2;
  google.protobuf.DoubleValue ideal_flf = 3;
  google.protobuf.DoubleValue max_flf = 4;
  google.protobuf.DoubleValue warning_flf = 5;
  google.protobuf.DoubleValue dangerous_flf = 6;
  google.protobuf.DoubleValue critical_flf = 7;
}

message ShiftCreateEventSegment {
  // the id of the shift
  int64 shift_id = 1;
  // the id of the dasher
  int64 dasher_id = 2;
  // (DEPRECATED - Use dash_scheduled_start_time instead )
  google.protobuf.Timestamp scheduled_start_time = 3 [deprecated = true];
  // (DEPRECATED - Use dash_scheduled_ending_time instead )
  google.protobuf.Timestamp scheduled_end_time = 4 [deprecated = true];
  // the time when this shift will start
  string dash_scheduled_start_time = 5;
  // the time when this shift will end
  string dash_scheduled_ending_time = 6;
}

message ShiftCheckinEventSegment {
  // the id of the shift
  int64 shift_id = 1;
  // the id of the dasher
  int64 dasher_id = 2;
  // (DEPRECATED - Use dash_checkin_time instead )
  google.protobuf.Timestamp checkin_time = 3 [deprecated = true];
  // the time when the dasher checked in to the shift
  string dash_checkin_time = 4;
}

message ShiftUpdateEventSegment {
  // the id of the shift
  int64 shift_id = 1;
  // the id of the dasher
  int64 dasher_id = 2;
  // (DEPRECATED - Use dash_scheduled_start_time instead )
  google.protobuf.Timestamp scheduled_start_time = 3 [deprecated = true];
  // (DEPRECATED - Use dash_scheduled_ending_time instead )
  google.protobuf.Timestamp scheduled_end_time = 4 [deprecated = true];
  // the time when this shift will start
  string dash_scheduled_start_time = 5;
  // the time when this shift will end
  string dash_scheduled_ending_time = 6;
}

message ShiftCancelEventSegment {
  // the id of the shift
  int64 shift_id = 1;
  // the id of the dasher
  int64 dasher_id = 2;
  // (DEPRECATED - Use dash_cancel_time instead )
  google.protobuf.Timestamp cancel_time = 3 [deprecated = true];
  // the time when this shift was cancelled
  string dash_cancel_time = 4;
}

// Event logged for each active Dasher in a Starting Point when the SP is shutdown
message DasherShutdownComms {
  // The id of the dasher
  int64 dasher_id = 1;
  // The email address of the dasher
  string dasher_email = 2;
  // The time when the shutdown will start
  string shutdown_start_time = 3;
  // The time when the shutdown will finish
  string shutdown_end_time = 4;
  // The reason the shutdown is happening
  string shutdown_reason = 5;
  // The submarket where the shutdown is taking place
  int32 submarket_id = 6;
  // The specific starting point that is being shut down
  int32 starting_point_id = 7;
  // Timezone for the shutdown SP
  string timezone = 8;
  // The name of the starting point that is being shut down
  string starting_point_name = 9;
  // duplicates dasher_email field. Needed because Iterable requires an exact match of
  // the field name 'email' as a primary key
  string email = 10;
}

// Event logged for each active Dasher in a Starting Point when the SP is re-opened after a shutdown
message DasherReopenComms {
  // the id of the dasher
  int64 dasher_id = 1;
  // the email address of the dasher
  string dasher_email = 2;
  // The time when the shutdown will start
  string shutdown_start_time = 3;
  // The time when the shutdown will finish
  string shutdown_end_time = 4;
  // The reason the shutdown is happening
  string shutdown_reason = 5;
  // The submarket where the shutdown is taking place
  int32 submarket_id = 6;
  // The specific starting point that is being shut down
  int32 starting_point_id = 7;
  // Timezone for the shutdown SP
  string timezone = 8;
  // The name of the starting point that is being shut down
  string starting_point_name = 9;
  // duplicates dasher_email field. Needed because Iterable requires an exact match of
  // the field name 'email' as a primary key
  string email = 10;
}

// Event logged for each active Merchant in a Starting Point when the SP is shutdown
message MerchantShutdownComms {
  // the id of the store
  int64 store_id = 1;
  // the email address of the store
  string store_email = 2;
  // The time when the shutdown will start
  string shutdown_start_time = 3;
  // The time when the shutdown will finish
  string shutdown_end_time = 4;
  // The reason the shutdown is happening
  string shutdown_reason = 5;
  // The submarket where the shutdown is taking place
  int32 submarket_id = 6;
  // The specific starting point that is being shut down
  int32 starting_point_id = 7;
  // Zip codes that may be affected by the shutdown
  string affected_zip_codes = 8;
  // ID of the drive store (if it is a drive store, otherwise empty)
  string drive_store_id = 9;
  // If true, pickup is still enabled during this shutdown (making this a partial shutdown)
  bool is_pickup_enabled = 10;
  // Timezone for the shutdown SP
  string timezone = 11;
  // The name of the starting point that is being shut down
  string starting_point_name = 12;
  // duplicates store_email field. Needed because Iterable requires an exact match of
  // the field name 'email' as a primary key
  string email = 13;
  // external store id of the store
  string external_store_id = 14;
  // business Id
  int64 business_id = 15;
  // business name
  string business_name = 16;
}

// Event logged for each active Merchant in a Starting Point when the SP is shutdown
message MerchantGroupShutdownComms {
  // business Id
  int64 business_id = 1;
  // ids of the stores that are included in shutdown
  repeated int64 store_ids = 2;
  // The time when the shutdown will start
  string shutdown_start_time = 3;
  // The time when the shutdown will finish
  string shutdown_end_time = 4;
  // The reason the shutdown is happening
  string shutdown_reason = 5;
  // submarkets where the shutdown is taking place
  repeated int32 submarket_ids = 6;
  // starting points that are being shut down
  repeated int32 starting_point_ids = 7;
  // Zip codes that may be affected by the shutdown
  string affected_zip_codes = 8;
  // IDs of the drive stores (if there are any drive stores, otherwise empty)
  repeated string drive_store_ids = 9;
  // If true, pickup is still enabled during this shutdown (making this a partial shutdown)
  bool is_pickup_enabled = 10;
  // Timezone for the shutdown SP
  string timezone = 11;
  // Names of the starting points that are being shut down
  repeated string starting_point_names = 12;
  // duplicates store_email field. Needed because Iterable requires an exact match of
  // the field name 'email' as a primary key
  string email = 13;
  // external store ids of the store
  repeated string external_store_ids = 14;
  // business name
  string business_name = 15;
  // external store ids string as array is not supported in Iterable
  // The data is expected as a single comma-separated string without '[', ']', '""'
  string external_store_id = 16;
}

// Event logged for each active Merchant in a Starting Point when the SP is re-opened after a shutdown
message MerchantReopenComms {
  // the id of the store
  int64 store_id = 1;
  // the email address of the store
  string store_email = 2;
  // The time when the shutdown will start
  string shutdown_start_time = 3;
  // The time when the shutdown will finish
  string shutdown_end_time = 4;
  // The reason the shutdown is happening
  string shutdown_reason = 5;
  // The submarket where the shutdown is taking place
  int32 submarket_id = 6;
  // The specific starting point that is being shut down
  int32 starting_point_id = 7;
  // Zip codes that may be affected by the shutdown
  string affected_zip_codes = 8;
  // ID of the drive store (if it is a drive store, otherwise empty)
  string drive_store_id = 9;
  // If true, pickup is still enabled during this shutdown (making this a partial shutdown)
  bool is_pickup_enabled = 10;
  // Timezone for the shutdown SP
  string timezone = 11;
  // The name of the starting point that is being shut down
  string starting_point_name = 12;
  // duplicates store_email field. Needed because Iterable requires an exact match of
  // the field name 'email' as a primary key
  string email = 13;
  // external store id of the store
  string external_store_id = 14;
  // business Id
  int64 business_id = 15;
  // business name
  string business_name = 16;
}

// Event logged for each active Merchant in a Starting Point when the SP is shutdown
message MerchantGroupReopenComms {
  // business Id
  int64 business_id = 1;
  // ids of the stores that are included in shutdown
  repeated int64 store_ids = 2;
  // The time when the shutdown will start
  string shutdown_start_time = 3;
  // The time when the shutdown will finish
  string shutdown_end_time = 4;
  // The reason the shutdown is happening
  string shutdown_reason = 5;
  // submarkets where the shutdown is taking place
  repeated int32 submarket_ids = 6;
  // starting points that are being shut down
  repeated int32 starting_point_ids = 7;
  // Zip codes that may be affected by the shutdown
  string affected_zip_codes = 8;
  // IDs of the drive stores (if there are any drive stores, otherwise empty)
  repeated string drive_store_ids = 9;
  // If true, pickup is still enabled during this shutdown (making this a partial shutdown)
  bool is_pickup_enabled = 10;
  // Timezone for the shutdown SP
  string timezone = 11;
  // Names of the starting points that are being shut down
  repeated string starting_point_names = 12;
  // duplicates store_email field. Needed because Iterable requires an exact match of
  // the field name 'email' as a primary key
  string email = 13;
  // external store ids of the store
  repeated string external_store_ids = 14;
  // business name
  string business_name = 15;
  // external store ids string as array is not supported in Iterable
  // The data is expected as a single comma-separated string without '[', ']', '""'
  string external_store_id = 16;
}

// Event logged for each active Dasher in a Starting Point when an already active SP shutdown is modified
message DasherModifyShutdownComms {
  // The id of the dasher
  int64 dasher_id = 1;
  // The email address of the dasher
  string dasher_email = 2;
  // The time when the shutdown will start
  string shutdown_start_time = 3;
  // The time when the shutdown will finish
  string shutdown_end_time = 4;
  // The reason the shutdown is happening
  string shutdown_reason = 5;
  // The submarket where the shutdown is taking place
  int32 submarket_id = 6;
  // The specific starting point that is being shut down
  int32 starting_point_id = 7;
  // Timezone for the shutdown SP
  string timezone = 8;
  // The name of the starting point that is being shut down
  string starting_point_name = 9;
  // duplicates dasher_email field. Needed because Iterable requires an exact match of
  // the field name 'email' as a primary key
  string email = 10;
}

// Event logged for each active Merchant in a Starting Point when an already active SP shutdown is modified
message MerchantModifyShutdownComms {
  // the id of the store
  int64 store_id = 1;
  // the email address of the store
  string store_email = 2;
  // The time when the shutdown will start
  string shutdown_start_time = 3;
  // The time when the shutdown will finish
  string shutdown_end_time = 4;
  // The reason the shutdown is happening
  string shutdown_reason = 5;
  // The submarket where the shutdown is taking place
  int32 submarket_id = 6;
  // The specific starting point that is being shut down
  int32 starting_point_id = 7;
  // Zip codes that may be affected by the shutdown
  string affected_zip_codes = 8;
  // ID of the drive store (if it is a drive store, otherwise empty)
  string drive_store_id = 9;
  // If true, pickup is still enabled during this shutdown (making this a partial shutdown)
  bool is_pickup_enabled = 10;
  // Timezone for the shutdown SP
  string timezone = 11;
  // The name of the starting point that is being shut down
  string starting_point_name = 12;
  // duplicates store_email field. Needed because Iterable requires an exact match of
  // the field name 'email' as a primary key
  string email = 13;
}

// Event logged for each active Dasher in a Starting Point when there is a potential upcoming SP shutdown
message DasherProactiveShutdownComms {
  // The id of the dasher
  int64 dasher_id = 1;
  // The email address of the dasher
  string dasher_email = 2;
  // The time when the shutdown will start
  string shutdown_start_time = 3;
  // The time when the shutdown will finish
  string shutdown_end_time = 4;
  // The reason the shutdown is happening
  string comm_reason = 5;
  // The submarket where the shutdown is taking place
  int32 submarket_id = 6;
  // The specific starting point that is being shut down
  int32 starting_point_id = 7;
  // Timezone for the shutdown SP
  string timezone = 8;
  // The name of the starting point that is being shut down
  string starting_point_name = 9;
  // The audience comms should go to
  string comm_audience = 10;
  // duplicates dasher_email field. Needed because Iterable requires an exact match of
  // the field name 'email' as a primary key
  string email = 11;
}

// Event logged for each active Merchant in a Starting Point when there is a potential upcoming SP shutdown
message MerchantProactiveShutdownComms {
  // the id of the store
  int64 store_id = 1;
  // the email address of the store
  string store_email = 2;
  // The time when the shutdown will start
  string shutdown_start_time = 3;
  // The time when the shutdown will finish
  string shutdown_end_time = 4;
  // The reason the shutdown is happening
  string comm_reason = 5;
  // The submarket where the shutdown is taking place
  int32 submarket_id = 6;
  // The specific starting point that is being shut down
  int32 starting_point_id = 7;
  // Zip codes that may be affected by the shutdown
  string affected_zip_codes = 8;
  // ID of the drive store (if it is a drive store, otherwise empty)
  string drive_store_id = 9;
  // If true, pickup is still enabled during this shutdown (making this a partial shutdown)
  bool is_pickup_enabled = 10;
  // Timezone for the shutdown SP
  string timezone = 11;
  // The name of the starting point that is being shut down
  string starting_point_name = 12;
  // The audience comms should go to
  string comm_audience = 13;
  // duplicates store_email field. Needed because Iterable requires an exact match of
  // the field name 'email' as a primary key
  string email = 14;
}

// Dasher challenge progress model for Iguazu client
message ChallengeProgressIguazu {
  // ID of the challenge progress
  int32 id = 1;
  // ID of dasher
  int64 dasher_id = 2;
  // ID of the challenge
  int32 challenge_id = 3;
  // Completion shown at timestamp
  google.protobuf.Timestamp completion_shown_at = 4;
  // Completed at timestamp
  google.protobuf.Timestamp completed_at = 5;
  // DasherJob ID
  int32 job_id = 6;
}

// Dasher challenge rule progress model for Iguazu client
message RuleProgressIguazu {
  // ID of the challenge rule progress
  int32 id = 1;
  // ID of dasher
  int64 dasher_id = 2;
  // ID of the challenge
  int32 challenge_id = 3;
  // ID of the challenge progress
  int32 progress_id = 4;
  // Rule type
  string rule_type = 5;
  // operator
  string operator = 6;
  // Progress metadata
  string progress_metadata = 7;
  // Goal
  double goal = 8;
  // Current progress
  double progress = 9;
  // Completed at timestamp
  google.protobuf.Timestamp completed_at = 10;
}

message DasherInsightsLogEvent {
  // when the event was created
  google.protobuf.Timestamp created_at = 1;
  // sp id for the insights
  google.protobuf.Int32Value starting_point_id = 2;
  // free form json string of insights data
  google.protobuf.StringValue insights_data = 3;
}

message UtilGapBasedHeatmapBusyness {
  // when the data is calculated
  google.protobuf.Timestamp created_at = 1;
  // sp id
  int32 starting_point_id = 2;
  // predicted current window utilization gap
  double current_window_util_gap = 3;
  // predicted next window utilization gap
  double next_window_util_gap = 4;
  // old busyness calculated from FLF
  string flf_busyness = 5;
  // new busyness calculated from util gap
  string util_gap_busyness = 6;
}
