syntax = "proto3";

// buf:lint:ignore DIRECTORY_SAME_PACKAGE
// buf:lint:ignore PACKAGE_VERSION_SUFFIX
package supply_demand_service.incentive;

import "common/common.proto";
import "common/money.proto";
import "common/service_client_config.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "supply_demand_service/common.proto";
import "supply_demand_service/supply_demand_service.proto";

option java_generic_services = true;
option java_multiple_files = true;
// buf:lint:ignore PACKAGE_SAME_JAVA_PACKAGE
option java_package = "com.doordash.rpc.supply_demand_service";

// RPCs defined to handle dasher incentives
service DasherIncentiveService {
  option (service_client.client_config).service_name = "supply-demand-service";
  option (service_client.client_config).service_app = "incentive-web";
  option (service_client.client_config).response_attempt_timeout_millis = 2500;

  // Get all incentives available for each delivery
  rpc GetDasherIncentivesForDelivery(GetDasherIncentivesForDeliveryRequest) returns (GetDasherIncentivesForDeliveryResponse);

  // Get all incentives available for a potential dasher-delivery assignment
  rpc GetDasherIncentivesForAssignment(GetDasherIncentivesForAssignmentRequest) returns (GetDasherIncentivesForAssignmentResponse);

  // Get detailed incentives available for starting points
  rpc GetDetailedDasherIncentives(GetDetailedDasherIncentivesRequest) returns (GetDetailedDasherIncentivesResponse);

  // Get incentive progress for a specific incentive
  rpc GetIncentiveProgress(GetIncentiveProgressRequest) returns (GetIncentiveProgressResponse);

  // Get total incentives applicable for current shift + delivery context
  rpc GetIncentivesForOnshiftDasher(GetIncentivesForOnshiftDasherRequest) returns (GetIncentivesForOnshiftDasherResponse);

  // Get all incentives applicable when for a dasher
  rpc GetActiveDasherIncentives(GetActiveDasherIncentivesRequest) returns (GetActiveDasherIncentivesResponse);

  // Get all incentives in a starting point
  rpc GetStartingPointIncentives(GetStartingPointIncentivesRequest) returns (GetStartingPointIncentivesResponse);

  // Get incentives count applicable when for a dasher
  rpc GetActiveDasherIncentivesCount(GetActiveDasherIncentivesCountRequest) returns (GetActiveDasherIncentivesCountResponse);

  // Is dasher eligible for new incentives
  rpc IsDasherEligibleForNewIncentives(IsDasherEligibleForNewIncentivesRequest) returns (IsDasherEligibleForNewIncentivesResponse);

  // Get education details for an incentive
  rpc GetDasherIncentivesEducation(GetDasherIncentivesEducationRequest) returns (GetDasherIncentivesEducationResponse);

  // Fetches all current and upcoming incentinves, in the dasherâ€™s default SP and all adjacent SPs
  rpc GetUpcomingIncentivesForDasher(GetUpcomingIncentivesForDasherRequest) returns (GetUpcomingIncentivesForDasherResponse);

  //Update incentive progress for applicable incentives
  rpc UpdateIncentiveProgress(UpdateIncentiveProgressRequest) returns (UpdateIncentiveProgressResponse);

  //Update multiple dasher incentives
  rpc CreateIncentives(CreateIncentivesRequest) returns (CreateIncentivesResponse);

  //Update multiple dasher incentives
  rpc UpdateIncentives(UpdateIncentivesRequest) returns (UpdateIncentivesResponse);

  //Deactivate multiple dasher incentives
  rpc DeactivateIncentives(DeactivateIncentivesRequest) returns (DeactivateIncentivesResponse);

  //Activate multiple dasher incentives
  rpc ActivateIncentives(ActivateIncentivesRequest) returns (ActivateIncentivesResponse);

  //Get incentives by Id
  rpc GetIncentivesById(GetIncentivesByIdRequest) returns (GetIncentivesByIdResponse);

  //List incentives
  rpc ListIncentives(ListIncentivesRequest) returns (ListIncentivesResponse);

  //Create Dasher job for incentives
  rpc CreateDasherJob(CreateDasherJobRequest) returns (CreateDasherJobResponse);

  //Get tags for dasher
  rpc GetTagsForDasher(GetTagsForDasherRequest) returns (GetTagsForDasherResponse);

  //Get dashers for tag
  rpc GetDashersForTag(GetDashersForTagRequest) returns (stream GetDashersForTagResponse);

  //Get dashers for tag and SP
  rpc GetDashersForSpTag(GetDashersForSpTagRequest) returns (stream GetDashersForSpTagResponse);

  //Get dasher ids only for tag and SP
  // The endpoint is created as the endpoint GetDashersForSpTag is closing the stream before the client receives the complete list
  rpc GetDasherIdsForSpTag(GetDasherIdsForSpTagRequest) returns (GetDasherIdsForSpTagResponse);

  //Is tag applicable for dasher
  rpc IsDasherTagged(IsDasherTaggedRequest) returns (IsDasherTaggedResponse);

  //Updates ttl for cache on the front-end
  rpc UpdateCacheTTLForFrontEnd(UpdateCacheTTLForFrontEndRequest) returns (UpdateCacheTTLForFrontEndResponse);

  // Get TTL for cache on the front-end
  rpc GetCacheTTLForFrontEnd(GetCacheTTLForFrontEndRequest) returns (GetCacheTTLForFrontEndResponse);
}

// Core message for dasher incentives; Used for creating and updating
message DasherIncentive {
  // ID for the incentive
  google.protobuf.StringValue id = 1;
  // Name of the incentive
  google.protobuf.StringValue name = 2;
  // Short Description of the incentive
  google.protobuf.StringValue description = 3;
  // creator/id of the incentive
  common.Creator created_by = 4;
  google.protobuf.Timestamp created_at = 5;
  common.Creator updated_by = 6;
  google.protobuf.Timestamp updated_at = 7;
  google.protobuf.BoolValue is_active = 8;
  // campaign active interval
  ActiveInterval active_interval = 9;
  // reason for deactivation
  DeactivationInfo deactivation_info = 10;
  // Incentive Type
  IncentiveType incentive_type = 11;
  // Incentive value if the incentive is completed
  IncentiveValue incentive_value = 12;
  // Incentive Limitation
  Limitation limitation = 13;
  // eligibility based on dasher specific attributes
  DasherCriterion dasher_eligibility_criteria = 14;
  // Eligible market ID
  google.protobuf.Int32Value market_id = 15;
  // Eligible submarket IDs
  repeated google.protobuf.Int32Value submarket_ids = 16;
  // Eligible starting point IDs
  repeated google.protobuf.Int32Value starting_point_ids = 17;
  // dasher eligibility based on delivery specific attributes
  FulfillmentCriterion fulfillment_eligibility_criteria = 18;
  // requirements/rules for the incentive to be paid to the dasher
  IncentiveConstraint incentive_constraint = 19;
  // Education text for the incentive
  google.protobuf.StringValue dasher_education_details = 20;
  // notification to dasher
  NotificationInfo notification_info = 21;
  //payout type
  PayOutInfo pay_out_info = 22;
  // metadata for the incentive
  map<string, string> metadata = 23;
}

/* Message for eligible incentives incentives; mapped to existing pay-campaigns + challenges for backward compatibility */
message DasherEligibleIncentive {
  // ID for the incentive
  google.protobuf.StringValue id = 1;
  // Name of the incentive
  google.protobuf.StringValue name = 2;
  // Short Description of the incentive
  google.protobuf.StringValue description = 3;
  // Incentive Type
  IncentiveType incentive_type = 4;
  // Incentive value if the incentive is completed
  IncentiveValue incentive_value = 5;
  ActiveInterval active_interval = 6;
  // Display information for incentives on dasher-app
  message DisplayInfo {
    google.protobuf.StringValue activation_time_local = 1;
    google.protobuf.StringValue active_until_time_local = 2;
    google.protobuf.StringValue incentive_type = 3;
    map<string, string> display_style = 4;
  }
  DisplayInfo display_info = 7;
  map<string, string> metadata = 8;
  DasherIncentiveProgress incentive_progress = 9;

  google.protobuf.StringValue dasher_cohort_tag = 10;
  google.protobuf.StringValue experiment_bucket = 11;
  // requirements/rules for the incentive to be paid to the dasher
  IncentiveConstraint incentive_constraint = 12;
}

// buf:lint:ignore ENUM_VALUE_PREFIX
// Incentive Type
enum IncentiveType {
  // Invalid IncentiveType
  INCENTIVE_TYPE_UNSPECIFIED = 0;
  // enum type for peak pay reactive
  INCENTIVE_TYPE_MONETARY_PEAK_PAY_REACTIVE = 1;
  // enum type for peak pay other
  INCENTIVE_TYPE_MONETARY_PEAK_PAY_OTHER = 2;
  // enum type for challenge
  INCENTIVE_TYPE_MONETARY_CHALLENGE = 3;
  // enum type for streak
  INCENTIVE_TYPE_MONETARY_STREAK = 4;
  // enum type for base pay additive boost
  INCENTIVE_TYPE_MONETARY_BASE_PAY_BOOST_ADDITIVE = 5;
  // enum type for peak pay proactive
  INCENTIVE_TYPE_MONETARY_PEAK_PAY_PROACTIVE = 6;
  // enum type for reward high pay order level 3
  REWARD_HPO_PLATINUM = 7;
  // enum type for reward high pay order level 2
  REWARD_HPO_GOLD = 8;
  // enum type for reward high pay order level 1
  REWARD_HPO_SILVER = 9;
  // enum type for reward large order priority
  REWARD_LARGE_ORDER_PRIORITY = 10;
  // enum type for reward dash now
  REWARD_DASH_NOW_ALWAYS = 11;
  // enum type for reward vip dasher support
  REWARD_VIP_SUPPORT = 12;
  // enum type for reward early access scheduling
  REWARD_EARLY_ACCESS_SCHEDULE = 13;
  // enum for referral bonus
  INCENTIVE_TYPE_REFERRAL_BONUS = 14;
  // enum type for reward dasher direct gas cashback for non-tiers
  REWARD_DASHER_DIRECT_GAS_NON_TIER = 15;
  // enum type for reward dasher direct gas cashback for tiered dashers
  REWARD_DASHER_DIRECT_GAS_TIER = 16;
  // enum type for reward time mode preferred access
  REWARD_TIME_MODE_PREFERRED_ACCESS = 17;
  // enum type for dynamic peak pay
  INCENTIVE_TYPE_MONETARY_PEAK_PAY_DYNAMIC = 18;
  // enum type for segment peak pay
  INCENTIVE_TYPE_MONETARY_PEAK_PAY_SEGMENT = 19;
  // enum type for reward for percent off of order
  REWARD_CX_FOR_DX_PLATINUM = 20;
  // enum type for priority access
  REWARD_PRIORITY_ACCESS = 21;
  // enum type for aggregate pay
  REWARD_AGGREGATE_PAY = 22;
  // enum type for bonus paid to new dashers for retention
  INCENTIVE_TYPE_MONETARY_NEW_DASHER_LEARNING_BONUS = 23;
  // enum type for bonus paid to existing dashers for retention
  INCENTIVE_TYPE_MONETARY_EXISTING_DX_BONUS = 24;
  // enum type for peak pay granted for weather reasons
  INCENTIVE_TYPE_MONETARY_PEAK_PAY_WEATHER = 25;
  // enum type for priority access for level 1 (level can be dx tier etc.) in  supply relevant (over/under etc.) submarkets
  REWARD_PRIORITY_ACCESS_SUPPLY_LEVEL_1 = 26;
  // enum type for priority access for level 2 (level can be dx tier etc.) in supply relevant (over/under etc.) submarkets
  REWARD_PRIORITY_ACCESS_SUPPLY_LEVEL_2 = 27;
  // enum type for peak pay scaled by effort
  INCENTIVE_TYPE_MONETARY_PEAK_PAY_EFFORT = 28;
  // enum for campaign target which provides promo code
  INCENTIVE_TYPE_PUNCH_CARD_PROMO = 29;
}

// Monetary/Non-monetary value of the incentive
message IncentiveValue {
  // The value to apply to incentive used
  oneof value {
    // Specific value if incentive type is PEAK_PAY/CHALLENGE/STREAK/BASE_PAY_BOOST_ADDITIVE/REFERRAL_BONUS
    money.MonetaryFields monetary = 1;
    int32 points = 2;
    // cx promo target for INCENTIVE_TYPE_PUNCH_CARD_PROMO
    // when a campaign is created from campaign manager, you can associate a promo code and a target tag with the campaign.
    // If a user is assigned with that target, they will then be associated with a campaign and also get the promo code.
    string cx_promo_target = 3;
  }
}

// Dasher eligibility criterion
message DasherCriterion {
  // type for dasher restrictions
  DasherCriterionType type = 1;
  // enumerate DasherCriterionType
  enum DasherCriterionType {
    // invalid DasherCriterionType
    DASHER_CRITERION_TYPE_UNSPECIFIED = 0;
    // unset DasherCriterionType
    DASHER_CRITERION_TYPE_UNSET = 1;
    // DasherCriterionType for new dashers
    DASHER_CRITERION_TYPE_NEW_DASHERS = 2;
    // DasherCriterionType for churned dashers
    DASHER_CRITERION_TYPE_CHURNED_DASHERS = 3;
    // DasherCriterionType for allow list
    DASHER_CRITERION_TYPE_ALLOWLIST = 4;
    // DasherCriterionType for exisiting dashers
    DASHER_CRITERION_TYPE_EXISTING = 5;
    // DasherCriterionType for segments
    DASHER_CRITERION_TYPE_SEGMENT = 6;
  }
  // (optional) repeated field if allowlist is used
  repeated google.protobuf.Int64Value allow_list_dasher_ids = 2;
}

// Delivery eligibility criterion
message FulfillmentCriterion {
  // FulfillmentCriterion type
  FulfillmentCriterionType type = 1;
  // enumerate DeliveryCriterion
  enum FulfillmentCriterionType {
    // unspecified
    FULFILLMENT_CRITERION_TYPE_UNSPECIFIED = 0;
    // DeliveryCriterionType not set
    FULFILLMENT_CRITERION_TYPE_UNSET = 1;
    // DeliveryCriterionType set to drive
    FULFILLMENT_CRITERION_TYPE_DRIVE = 2;
    // DeliveryCriterionType set to dash mart
    FULFILLMENT_CRITERION_TYPE_DASHMART = 3;
  }
  // metadata for criterion
  map<string, string> metadata = 2;
}

// list if rules for dashers to be completed
message IncentiveConstraint {
  repeated IncentiveRule rules = 1;
}

// specify rules for the dashers to be completed
message IncentiveRule {
  // rule-types for incentive completion
  RuleType type = 1;
  // enumerate rule_types
  enum RuleType {
    // invalid rule types
    RULE_TYPE_UNSPECIFIED = 0;
    // rule type of num of deliveries
    RULE_TYPE_MINIMUM_NUM_OF_DELIVERIES = 1;
    // rule type for minimum miles
    RULE_TYPE_MINIMUM_MILES = 2;
    // rule type of lifetime num deliveries
    RULE_TYPE_MAXIMUM_NUM_LIFETIME_DELIVERIES = 3;
    // rule type of days since dx oriented at min
    RULE_TYPE_MINIMUM_DAYS_SINCE_ORIENTED_AT = 4;
    // rule type of days since dx oriented at max
    RULE_TYPE_MAXIMUM_DAYS_SINCE_ORIENTED_AT = 5;
    // rule type of max num deliveries since static date
    RULE_TYPE_MINIMUM_NUM_DELIVERIES_SINCE_STATIC_DATE = 6;
    // rule type of min num deliveries since static date
    RULE_TYPE_MAXIMUM_NUM_DELIVERIES_SINCE_STATIC_DATE = 7;
    // rule type of experiment bucket
    RULE_TYPE_EXPERIMENT_BUCKET = 8;
    // rule type of segment
    RULE_TYPE_SEGMENT = 9;
    // rule type punch cards
    RULE_TYPE_PUNCH_CARD_CHALLENGE = 15;
  }
  // target for each rules type
  oneof target {
    // minimum number of deliveries required for completing incentive
    google.protobuf.Int32Value num_deliveries = 2;
    // minimum miles required for completing incentive
    google.protobuf.Int32Value num_miles = 3;
    // maximum number of lifetime deliveries done by Dx to be eligible for incentive
    google.protobuf.Int32Value max_num_lifetime_deliveries = 4;
    // minimum number of days since Dx oriented at to be eligible for incentive
    google.protobuf.Int32Value days_since_oriented_at_min = 5;
    // minimum number of days since Dx oriented at to be eligible for incentive
    google.protobuf.Int32Value days_since_oriented_at_max = 6;
    // minimum number of deliveries done by Dx since static date to be eligible for incentive
    google.protobuf.Int32Value min_num_deliveries_since_static_date = 9;
    // minimum number of deliveries done by Dx since static date to be eligible for incentive
    google.protobuf.Int32Value max_num_deliveries_since_static_date = 10;
    // experiment bucket dx needs to be in to eligible for incentive
    google.protobuf.StringValue experiment_bucket = 11;
    // dasher and delivery (if either is specified) need to both be in the segment
    SupplySegment segment = 12;
    // punch card challenge requirements
    PunchCardTargets punch_card_targets = 21;
  }
  // Short description for the rule
  string display_text = 7;
  // Progress for this rule
  IncentiveRuleProgress rule_progress = 8;
}

// punch card challenge targets
message PunchCardTargets {
  // store ids for the challenge
  repeated google.protobuf.StringValue store_ids = 1;
  // tiers challenge is active for
  repeated google.protobuf.StringValue tiers_eligible = 2;
}

// deactivation reasons
message DeactivationInfo {
  // enumerate DeactivationReason
  enum DeactivationReason {
    // invalid reason
    DEACTIVATION_REASON_UNSPECIFIED = 0;
    // unset reason
    DEACTIVATION_REASON_UNSET = 1;
    // ops deactivated
    DEACTIVATION_REASON_MANUAL = 2;
    // deactivation due to caps reached
    DEACTIVATION_REASON_BUDGET_CAP_REACHED = 3;
    // other reason
    DEACTIVATION_REASON_OTHER = 4;
  }
  // reason for deactivation
  DeactivationReason reason_for_deactivation = 1;
  // id of the deactivation
  common.Creator deactivated_by = 2;
  // additional reason details
  google.protobuf.StringValue deactivated_reason_details = 3;
}

// limitations on applicability on the incentives
message Limitation {
  // limitation type
  LimitationType type = 1;
  // enumerate limitation
  enum LimitationType {
    // invalid limitation type
    LIMITATION_TYPE_UNSPECIFIED = 0;
    // unset limitation type
    LIMITATION_TYPE_UNSET = 1;
    // limitation on budget
    LIMITATION_TYPE_BUDGET = 2;
  }
  // limitation value
  oneof value {
    // LIMITATION on budget
    Budget budget = 4;
  }
}

// activation interval
message ActiveInterval {
  // start time for the active interval
  google.protobuf.Timestamp start_time = 1;
  // end time for the active interval
  google.protobuf.Timestamp end_time = 2;
}

// budget restriction
message Budget {
  //  Monetary amount per period
  money.MonetaryFields amount_per_period = 1;
  // daily restriction
  money.MonetaryFields daily = 2;
  // budget for the campaign over its lifetime
  money.MonetaryFields lifetime = 3;
}

// details when notification to be sent
message NotificationInfo {
  NotificationType type = 1;
  enum NotificationType {
    NOTIFICATION_TYPE_UNSPECIFIED = 0;
    NOTIFICATION_TYPE_UNSET = 1;
    NOTIFICATION_TYPE_SEND_AFTER_INCENTIVE_UPLOAD = 2;
    NOTIFICATION_TYPE_SEND_AT_LOCAL_TIME = 3;
  }
  // if NOTIFICATION_TYPE_SEND_AT_LOCAL_TIME set to local time
  google.protobuf.StringValue local_time_for_notification = 4;
}

// details on how dasher is expected to see payout
message PayOutInfo {
  PayOutType type = 1;
  enum PayOutType {
    PAY_OUT_TYPE_UNSPECIFIED = 0;
    PAY_OUT_TYPE_UNSET = 1;
    PAY_OUT_TYPE_PER_DELIVERY = 2;
    PAY_OUT_TYPE_LAST_DELIVERY = 3;
    PAY_OUT_TYPE_WEEKLY = 4;
  }
}

// List of incentives eligible for a dasher
message DasherActiveUpcomingCampaign {
  //list of incentives/discounts available for specific dasher
  repeated DasherIncentive incentives = 1;
}

// message for new incentives nux
message NewIncentiveNux {
  google.protobuf.StringValue title = 1;
  google.protobuf.StringValue description = 2;
}

// details on how dasher is expected to see payout
message ShiftTypeInfo {
  // type
  ShiftType type = 1;
  // type
  enum ShiftType {
    // Unspecified type
    SHIFT_TYPE_UNSPECIFIED = 0;
    // offer mode type
    SHIFT_TYPE_OFFER_MODE = 1;
    // time mode type
    SHIFT_TYPE_TIME_MODE = 2;
  }
}

// context to be passed to incentive
message DeliveryContext {
  // delivery id
  google.protobuf.Int64Value delivery_id = 1;
  // base pay for the delivery
  google.protobuf.Int32Value base_pay = 2;
  // total miles to be driven by dasher
  google.protobuf.Int32Value total_miles = 3;
  // shift type for incentive
  ShiftTypeInfo shift_type = 4;
}

// Incentive request for delivery
message GetDasherIncentivesForDeliveryRequest {
  // starting point for the dasher shift
  int32 starting_point_id = 1;
  // current time
  uint64 active_time_epoch = 2;
  // dasher id
  google.protobuf.Int64Value dasher_id = 3;
  // location of the dasher
  common.Location location = 4;
  // delivery context
  DeliveryContext delivery_context = 5;
}

// Get incentives for on shift dashers
message GetIncentivesForOnshiftDasherRequest {
  // dasher id
  google.protobuf.Int64Value dasher_id = 1;
  // delivery context
  DeliveryContext delivery_context = 2;
  // Request translated text for display
  google.protobuf.BoolValue enable_display_text = 3;
  // starting point of the shift
  google.protobuf.Int32Value starting_point_id = 4;
  // shift id
  google.protobuf.Int64Value shift_id = 5;
}

// Incentive request for assignment
message GetDasherIncentivesForAssignmentRequest {
  // starting point for the dasher shift
  int32 starting_point_id = 1;
  // dasher id
  google.protobuf.Int64Value dasher_id = 2;
  // delivery context
  DeliveryContext delivery_context = 3;
  // current epoch time
  uint64 active_time_epoch = 4;
  // filter for desired incentive types
  repeated IncentiveType incentive_type_filter = 5;
}

// Response for detailed dasher incentives
message GetDetailedDasherIncentivesRequest {
  // starting point id for each incentives are requested
  int32 starting_point_id = 1;
  // current epoch time
  uint64 active_time_epoch = 2;
  // dasher id
  google.protobuf.Int64Value dasher_id = 3;
}

// Response for the dasher incentives
message GetDasherIncentivesForDeliveryResponse {
  // list of dasher incentives
  StartingPointIncentives starting_point_incentives = 1;
}

// Dasher incentive response for a potential assignment
message GetDasherIncentivesForAssignmentResponse {
  // list of dasher incentives
  StartingPointIncentives starting_point_incentives = 1;
}

// Get incentives for on shift dashers
message GetIncentivesForOnshiftDasherResponse {
  // list of dasher incentives for on shift starting point
  StartingPointIncentives starting_point_incentives = 1;
  // Display information for dasher app sheet
  message DisplayText {
    google.protobuf.StringValue title = 1;
    google.protobuf.StringValue sub_title = 2;
    map<string, string> display_style = 3;
  }
  DisplayText display_text = 2;
  repeated IncentiveRuleProgress rule_progress_info = 3;
  NewIncentiveNux new_incentive_nux = 4;
}

// Incentive request for all active incentives
message GetActiveDasherIncentivesRequest {
  // starting point for the dasher shift
  int32 starting_point_id = 1;
  // dasher id
  google.protobuf.Int64Value dasher_id = 2;
  // delivery context
  DeliveryContext delivery_context = 3;
  // shift id
  google.protobuf.Int64Value shift_id = 4;
}

// Get all active incentives
message GetActiveDasherIncentivesResponse {
  StartingPointIncentives starting_point_incentives = 1;
  // Display information for dasher app sheet
  message DisplayText {
    google.protobuf.StringValue title = 1;
    google.protobuf.StringValue sub_title = 2;
  }
  DisplayText display_text = 2;
  repeated IncentiveRuleProgress rule_progress_info = 3;
  NewIncentiveNux new_incentive_nux = 4;
  // ttl cache mins on frontend
  google.protobuf.Int64Value cache_ttl_mins = 5;
}

// Incentive request for assignment
message GetStartingPointIncentivesRequest {
  // starting point for the dasher shift
  int32 starting_point_id = 1;
  // active time of incentives
  uint64 active_time_epoch = 2;
  // marks the end of the time-range in which to select incentives from
  uint64 active_end_time_epoch = 3;
  // filter for desired incentive types
  repeated IncentiveType incentive_type_filter = 4;
  // filter for experiment bucket
}

// Incentive request for assignment
message GetStartingPointIncentivesResponse {
  StartingPointIncentives starting_point_incentives = 1;
}

// Request to determine if new incentives should be enabled
message IsDasherEligibleForNewIncentivesRequest {
  // dasher id
  google.protobuf.Int64Value dasher_id = 1;
}

// Response if new incentives should be enabled
message IsDasherEligibleForNewIncentivesResponse {
  google.protobuf.BoolValue enable_new_incentives = 1;
}

// Incentive request for all active incentives
message GetActiveDasherIncentivesCountRequest {
  // starting point for the dasher shift
  repeated StartingPointInfo starting_points_info = 1;
  // dasher id
  google.protobuf.Int64Value dasher_id = 2;
}

// StartingPointInfo contains either spid or lat/lng
message StartingPointInfo {
  google.protobuf.Int32Value starting_point_id = 1;
  google.protobuf.DoubleValue lat = 2;
  google.protobuf.DoubleValue lng = 3;
}

// Get incentives for all active incentives
message GetActiveDasherIncentivesCountResponse {
  repeated DasherIncentivesCount dasher_incentives_counts = 1;
}

// incentive count for each sp
message DasherIncentivesCount {
  string starting_point_id = 1;
  string incentive_count = 2;
}

// Response for the dasher incentives
message GetDetailedDasherIncentivesResponse {
  repeated DasherIncentive incentives = 1;
}

// Request for upcoming incentives
message GetUpcomingIncentivesForDasherRequest {
  reserved 8;
  reserved "ignore_filter";
  google.protobuf.Int64Value dasher_id = 1;
  // location of the dasher
  common.Location location = 2;
  google.protobuf.StringValue time_frame_type = 3;
  google.protobuf.StringValue incentive_type = 4;
  google.protobuf.StringValue dash_type = 5;
  google.protobuf.StringValue starting_point_type = 6;
  // shift id
  google.protobuf.Int64Value shift_id = 7;
  google.protobuf.BoolValue include_filter = 9;
  google.protobuf.StringValue no_incentives_display_text = 10;
  repeated FilterSelected filter_selected = 11;
}

// Filter selected by dashers proto schema
message FilterSelected {
  // Filter id for the option selected for viewing subset of incentives.
  // For example it can be "starting_point_type", "dash_type", "incentive_type" etc.
  string filter_id = 1;
  // Option id for the option selected for the filter.
  // For example it can be "peak_pay" or "learning_bonus_peak_pay" etc when filter id is "incentive_type".
  // The value depends on the backend sent response and options available for dasher.
  string option_id = 2;
}

// No incentive display info for upcoming incentives
message NoIncentiveDisplayInfo {
  // text
  string no_incentives_display_text = 1;
  // reset button text
  string reset_filter_text = 2;
}

// Response for upcoming incentives for each startingpoint
message GetUpcomingIncentivesForDasherResponse {
  reserved 2;
  reserved "drop_down_choice_selection_options";
  // map of starting point name to incentives
  map<string, StartingPointIncentives> starting_point_incentives = 1;
  // Display text for promos tab
  message DisplayText {
    google.protobuf.StringValue title = 1;
    google.protobuf.StringValue sub_title = 2;
    map<string, string> display_style = 3;
  }
  DisplayText display_text = 3;
  NewIncentiveNux new_incentive_nux = 4;
  // List of choices
  repeated DropDownSelectionChoice drop_down_selection_choice = 5;
  // list starting point incentives so order is preserved
  repeated StartingPointIncentivesOrdered starting_point_incentives_ordered = 6;
  // no incentives display text
  NoIncentiveDisplayInfo no_incentives_display_info = 7;
}

// Message for drop down selection in UpcomingIncentivesForDasherResponse
message DropDownSelectionChoice {
  string filter_id = 1;
  string title = 2;
  string choice_selection = 3;
  // Options for drop down
  message Option {
    string option_id = 1;
    string display_value = 2;
  }
  repeated Option options = 4;
  string default_selection = 5;
  string icon = 6;
}

// Request for incentives education details
message GetDasherIncentivesEducationRequest {
  // ID for the incentive
  google.protobuf.StringValue incentive_id = 1;
  google.protobuf.StringValue incentive_type = 2;
  google.protobuf.Int64Value dasher_id = 3;
  google.protobuf.Int32Value vehicle_type_id = 4;
}

// Reponse for incentives education details
message GetDasherIncentivesEducationResponse {
  reserved 3, 6;
  reserved "progress_details";
  reserved "display_style";
  google.protobuf.StringValue title = 1;
  google.protobuf.StringValue sub_title = 2;
  google.protobuf.StringValue dasher_education_details = 4;
  google.protobuf.BoolValue enable_schedule_button = 5;
  repeated IncentiveRuleProgress rule_progress_info = 7;
  google.protobuf.StringValue schedule_button_description = 8;
  map<string, string> description = 9;
  google.protobuf.BoolValue is_active = 10;
  ErrorDescription error_description = 11;
  // dasher and delivery (if either is specified) need to both be in the segment
  SupplySegment segment = 12;
}

// Error description for error shown from education sheet
message ErrorDescription {
  // error title details
  google.protobuf.StringValue title = 1;
  // error description details
  google.protobuf.StringValue description = 2;
  // error button text details
  google.protobuf.StringValue error_button_text = 3;
}

// A list of incentives available in a starting point
message StartingPointIncentives {
  StartingPoint starting_point = 1;
  repeated DasherEligibleIncentive incentives = 2;
  common.Location starting_point_location = 3;
}

// A list of incentives available in a specific group where group is generally a starting point name or `general` for incentives eligible in multiple areas
message StartingPointIncentivesOrdered {
  google.protobuf.StringValue group_name = 1;
  StartingPoint starting_point = 2;
  repeated DasherEligibleIncentive incentives = 3;
  common.Location starting_point_location = 4;
}

// Request for an individual incentive progress
message GetIncentiveProgressRequest {
  // ID for the dasher
  google.protobuf.StringValue dasher_id = 1;

  // ID for the incentive
  google.protobuf.StringValue incentive_id = 2;
}

// Progress of a single rule of an incentive
message IncentiveRuleProgress {
  // Current progress completed so far
  double current = 1;

  // Goal to reach
  double goal = 2;

  // Short description
  string display_text = 3;

  // Incentive Id
  string incentive_id = 4;
}

// Progress for a dasher incentive, with all its rules
message DasherIncentiveProgress {
  // ID for the Incentive
  google.protobuf.StringValue id = 1;

  // Name for the incentive
  string name = 2;

  // progress of the rules
  repeated IncentiveRule rule_progress = 3;

  // Timestamp this incentive completes
  google.protobuf.Timestamp completed_at = 4;

  // Timestamp when incentive is shown to dasher/used when pay out is not per delivery
  google.protobuf.Timestamp completion_shown_at = 5;

  // metadata associated with incentive
  map<string, string> metadata = 6;

  // Id for the incentive progress
  google.protobuf.StringValue progress_id = 7;
}

// Response for GetIncentiveProgress
message GetIncentiveProgressResponse {
  // Incentive progress
  DasherIncentiveProgress incentive_progress = 1;
}

// PatchRequest
message PatchRequest {
  google.protobuf.Struct data = 1;
  google.protobuf.StringValue id = 2;
}

// Patch request for a Incentive progress's fields
message UpdateIncentiveProgressRequest {
  reserved 1, 2, 3;
  reserved "id";
  reserved "dasher_id";
  reserved "completion_shown_at";

  // Additional data informs about field to update
  repeated PatchRequest patch_requests = 4;
  IncentiveType type = 5;
}

// Response for PatchIncentiveProgress
message UpdateIncentiveProgressResponse {
  repeated google.protobuf.StringValue ids = 1;
}

// CRUD
// Request for CreateIncentive
message CreateIncentivesRequest {
  // Zero or more DasherIncentive messages
  repeated DasherIncentive incentive = 1;
}

// Response for CreateIncentive
message CreateIncentivesResponse {
  // Zero or more incentive IDs
  repeated google.protobuf.StringValue ids = 1;
}

// Request for UpdateIncentive
message UpdateIncentivesRequest {
  reserved 1;
  reserved "incentive";
  repeated PatchRequest patch_requests = 2;
  IncentiveType type = 3;
}

// Response for UpdateIncentive
message UpdateIncentivesResponse {
  repeated google.protobuf.StringValue ids = 1;
}

// Activation request
message ActivateIncentivesRequest {
  repeated google.protobuf.StringValue ids = 1;
}

// Activation response
message ActivateIncentivesResponse {
  repeated google.protobuf.StringValue ids = 1;
}

// DeActivation request
message DeactivateIncentivesRequest {
  repeated google.protobuf.StringValue ids = 1;
  DeactivationInfo deactivation_info = 2;
  IncentiveType type = 3;
}

// DeActivation response
message DeactivateIncentivesResponse {
  repeated google.protobuf.StringValue ids = 1;
}

// GetIncentivesById request
message GetIncentivesByIdRequest {
  repeated google.protobuf.StringValue ids = 1;
}

// GetIncentivesById response
message GetIncentivesByIdResponse {
  repeated DasherEligibleIncentive incentives = 1;
}

// ListIncentives request
message ListIncentivesRequest {
  // Total limit of challenges to be listed
  google.protobuf.Int32Value limit = 1;
}

// ListIncentives response
message ListIncentivesResponse {
  repeated DasherIncentive incentives = 1;
}

// GetTagsForDasher Request
message GetTagsForDasherRequest {
  // ID for the dasher
  google.protobuf.Int64Value dasher_id = 1;
}

// Tag for each dasher
message Tag {
  //tag name
  google.protobuf.StringValue tag_name = 1;
  // Timestamp this tag expires
  google.protobuf.Timestamp active_until = 2;
}

// GetTagsForDasher Response
message GetTagsForDasherResponse {
  // ID for the dasher
  repeated Tag dasher_tag = 1;
}

// GetDashersForTag Request
message GetDashersForTagRequest {
  // tag name
  google.protobuf.StringValue tag_name = 1;
  // day when tag was applied
  google.protobuf.Timestamp tag_applied_ts = 2;
}

// Dasher Tag proto for each dasher
message DasherTag {
  //dasher id
  google.protobuf.Int64Value dasher_id = 1;
  // Timestamp this tag expires
  google.protobuf.Timestamp active_until = 2;
}

// GetDashersForTag Response
message GetDashersForTagResponse {
  DasherTag dasher_ids = 1;
}

// GetDashersForSpTagRequest Request
message GetDashersForSpTagRequest {
  //tag name
  google.protobuf.StringValue tag_name = 1;
  //sp id
  google.protobuf.Int64Value starting_point_id = 2;
  // day when tag was applied
  google.protobuf.Timestamp tag_applied_ts = 3;
}

// GetDashersForTag Response
message GetDashersForSpTagResponse {
  DasherTag dasher_ids = 1;
}

// GetDasherIdsForSpTagRequest Request
message GetDasherIdsForSpTagRequest {
  //tag name
  google.protobuf.StringValue tag_name = 1;
  //sp id
  google.protobuf.Int64Value starting_point_id = 2;
  // day when tag was applied
  google.protobuf.Timestamp tag_applied_ts = 3;
}

// GetDasherIdsForSpTagResponse Response
message GetDasherIdsForSpTagResponse {
  repeated google.protobuf.Int64Value dasher_id = 1;
}

// IsDasherTagged Request
message IsDasherTaggedRequest {
  // dasher id
  google.protobuf.Int64Value dasher_id = 1;
  // tag name
  google.protobuf.StringValue tag_name = 2;
  // day when tag was applied
  google.protobuf.Timestamp tag_applied_ts = 3;
}

// IsDasherTagged Response
message IsDasherTaggedResponse {
  // is dasher tagged
  google.protobuf.BoolValue is_tagged = 1;
}

// CreateDasherJobRequest request
message CreateDasherJobRequest {
  google.protobuf.Int64Value dasher_id = 1;
  google.protobuf.Int32Value reward_amount = 2;
  google.protobuf.StringValue reason = 3;
  google.protobuf.StringValue description = 4;
  google.protobuf.StringValue current_iso = 5;
}

// CreateDasherJobRequest response
message CreateDasherJobResponse {
  google.protobuf.Int32Value id = 1;
}

// UpdateCacheTTLForFrontEnd request
message UpdateCacheTTLForFrontEndRequest {
  // The starting point to update the cache ttl
  google.protobuf.Int64Value starting_point_id = 1;

  // The ttl that the cache needs to be updated to
  google.protobuf.Int64Value cache_ttl_mins = 2;

  // The ttl for the value
  google.protobuf.Int64Value cache_ttl_mins_for_redis = 3;
}

// UpdateCacheTTLForFrontEnd response
message UpdateCacheTTLForFrontEndResponse {
  // The starting point with updated ttl
  google.protobuf.Int64Value starting_point_id = 1;
}

// GetCacheTTLForFrontEnd response
message GetCacheTTLForFrontEndRequest {
  // The starting point with updated ttl
  google.protobuf.Int64Value starting_point_id = 1;
}

// GetCacheTTLForFrontEnd response
message GetCacheTTLForFrontEndResponse {
  // The ttl value from the starting_point
  google.protobuf.Int64Value cache_ttl_mins = 1;
}
