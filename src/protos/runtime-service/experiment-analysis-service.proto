syntax = "proto3";
package doordash.runtime.v1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "runtime-service/common.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_outer_classname = "ExperimentAnalysisServiceApi";
option java_package = "com.doordash.rpc.experiment_analysis.v1";

service ExperimentAnalysisService {
  rpc GetDashboard(GetDashboardRequest) returns (GetDashboardResponse);
  rpc GetAnalysesByMetric(GetAnalysesByMetricRequest) returns (GetAnalysesByMetricResponse);
  rpc GetExperimentAnalysis(GetExperimentAnalysisRequest) returns (GetExperimentAnalysisResponse);
  rpc AddExperimentAnalysis(AddExperimentAnalysisRequest) returns (AddExperimentAnalysisResponse);
  rpc UpdateExperimentAnalysis(UpdateExperimentAnalysisRequest) returns (UpdateExperimentAnalysisResponse);
  rpc AnalyzeExperiment(AnalyzeExperimentRequest) returns (AnalyzeExperimentResponse);
  rpc GetAnalysisResults(GetAnalysisResultsRequest) returns (GetAnalysisResultsResponse);
  rpc GetMetricHistoryResults(GetMetricHistoryResultsRequest) returns (GetMetricHistoryResultsResponse);
  rpc GetHistoryResults(GetHistoryResultsRequest) returns (GetHistoryResultsResponse);
  rpc AddSql(AddSqlRequest) returns (AddSqlResponse);
  rpc GetSqlHistory(GetSqlHistoryRequest) returns (GetSqlHistoryResponse);
  rpc GetSqlTemplate(GetSqlTemplateRequest) returns (GetSqlTemplateResponse);
  rpc ArchiveAnalysis(ArchiveAnalysisRequest) returns (ArchiveAnalysisResponse);
  rpc UnarchiveAnalysis(UnarchiveAnalysisRequest) returns (UnarchiveAnalysisResponse);
  rpc GetExperimentUsers(GetExperimentUsersRequest) returns (GetExperimentUsersResponse);
  rpc GetAnalysisProgress(GetAnalysisProgressRequest) returns (GetAnalysisProgressResponse);
  rpc AddAnalysisHealthCheck(AddAnalysisHealthCheckRequest) returns (AddAnalysisHealthCheckResponse);
  rpc AddDiffInDiffAnalysis(AddDiffInDiffAnalysisRequest) returns (AddDiffInDiffAnalysisResponse);
  rpc GetDiffInDiffAnalysis(GetDiffInDiffAnalysisRequest) returns (GetDiffInDiffAnalysisResponse);
  rpc GetDiffInDiffAnalysisResult(GetDiffInDiffAnalysisResultRequest) returns (GetDiffInDiffAnalysisResultResponse);
  rpc GetHealthCheck(GetHealthCheckRequest) returns (GetHealthCheckResponse);
  rpc GetRolloutAnalysisResult(GetRolloutAnalysisResultRequest) returns (GetRolloutAnalysisResultResponse);
  rpc GetAnalysisVersionHistory(GetAnalysisVersionHistoryRequest) returns (GetAnalysisVersionHistoryResponse);
  rpc AddJobStatus(AddJobStatusRequest) returns (AddJobStatusResponse);
  rpc ResolveAnalysisMetricPack(ResolveAnalysisMetricPackRequest) returns (ResolveAnalysisMetricPackResponse);
  rpc GetSourceComputeStatus(GetSourceComputeStatusRequest) returns (GetSourceComputeStatusResponse);
  rpc ComputeBusinessImpact(ComputeBusinessImpactRequest) returns (ComputeBusinessImpactResponse);
}

enum SqlType {
  UNKNOWN_SQL_TYPE = 0;
  CUSTOM_ANALYSIS = 1;
  CUSTOM_EXPOSURE = 2;
}

message SqlResult {
  // UUID for the Sql
  google.protobuf.StringValue id = 1;
  // Generic key that defines an analysis_id, exposure_id.
  string entity_id = 2;
  // The exact Sql string provided by the user
  string sql_text = 3;
  // A json string with jinja parameters
  google.protobuf.StringValue jinja_parameters = 4;
  // The type of Sql. Primarily used for filtering on the usecase the Sql is used for
  SqlType sql_type = 5;
  // Identifier that marks if the Sql is the last edit for an analysis
  google.protobuf.BoolValue is_latest = 6;
  // Who made the change to the Sql. This will be the name of the user from identity service
  string created_by = 7;
  // When the Sql was created. No updated_at field is needed because internals apply append only operations.
  google.protobuf.Timestamp created_at = 8;
}

message GetSqlHistoryRequest {
  // Optional filters that get toggled
  message ToggleFilters {
    // return only last modified sql
    bool show_latest = 1;
    // Optional sql type filter
    SqlType sql_type = 2;
  }
  // return the sql for a specific entity_id (anlaysis_id, template_id, )
  string entity_id = 1;
  ToggleFilters toggle_filters = 2;
  // The page number
  google.protobuf.Int32Value page_number = 3;
  // How many sql edits should be returned
  google.protobuf.Int32Value page_size = 4;
}

message GetSqlHistoryResponse {
  repeated SqlResult sql_results = 1;
  // the offset of the page number, in case we want ot reduce the impact of bulk requests
  int32 page_number = 2;
  // number of Sql results that will be returned
  int32 page_size = 3;
  // total edits that will be processed by the end of the request
  int32 total_edits = 4;
}

message AddSqlRequest {
  // adds a Sql edit to the backend. Note that google.protobuf.* are optional and don't need to be provided
  SqlResult sql_result = 1;
}

message AddSqlResponse {
  // UUID of the Sql that was added
  string id = 1;
  // Entity UUID of the Sql. Often times this will be an analysis_id
  string entity_id = 2;
}

message GetSqlTemplateRequest {
  //  the sql file name for the Sql template
  string template_name = 1;
}

message GetSqlTemplateResponse {
  //  The raw Sql text for the filename
  string sql_text = 1;
}

enum ResultStatus {
  UNKNOWN_STATUS = 0;
  NEW = 1;
  IN_PROGRESS = 2;
  SUCCESS = 3;
  ERROR = 4;
}

enum JobType {
  UNKNOWN_JOBTYPE = 0;
  ADHOC_ANALYSIS = 1;
  STANDARD_ANALYSIS = 2;
  METRIC_ANALYSIS = 3;
  PREPROCESS_ANALYSIS = 4;
  DIMENSION_ANALYSIS = 5;
  EXPOSURES_LOADER = 6;
  PRE_EXPERIMENT_BIAS_ANALYSIS = 7;
  SAMPLE_SIZE_STATS = 8;
  DIFF_IN_DIFF_ANALYSIS = 9;
  EVENT_SOURCE = 10;
  SAMPLE_SIZE_EXPOSURES_LOADER = 11;
}

enum MetricOperation {
  NO_OP = 0;
  INSERT = 1;
  UPDATE = 2;
  DELETE = 3;
}

message ExperimentAnalysis {
  reserved 16, 17;
  reserved "target_sample_size", "target_metric_name";

  string experiment_name = 1;
  ExperimentType experiment_type = 2;
  google.protobuf.Timestamp start_date = 3;
  google.protobuf.Timestamp end_date = 4;
  string sql_name = 5;
  string dashab_config = 6;
  string analysis_name = 8;
  google.protobuf.StringValue sql_params = 9 [deprecated = true];
  string description = 10;
  repeated int32 experiment_versions = 11;
  AnalysisType type = 12;
  map<string, int32> variation_splits = 13;
  string control_label = 14;
  string last_executed_sql = 15;
  string experiment_id = 18;
  repeated string segments = 19;
  string cron_schedule = 20;
  repeated string information_rates = 21;
  bool is_default_analysis = 22;
  repeated SqlResult sql_results = 23;
  AnalysisReportType report_type = 24;
  repeated string exposure_dates = 25;
  repeated string metric_dates = 26;
  // This is a global analysis override parameter that will be used to override the default cuped windows for all metrics in the analysis. Default is 1-7, 8-14.
  repeated string cuped_windows = 27;
  // Specifies if we want to disable dilution check for an analysis
  bool is_enable_dilution_check = 28;
  // This is an array of dynamic value revision numbers or ranges used to sync an analysis with the experiment. It is used to know which exposure data to use.
  repeated string dv_revisions = 30;
  // This is an identifier that specifies who manages changes to the analysis configuration
  ManagedBy managed_by = 31;
}

message AnalysisVersion {
  // UUID in analysis_version table for tracking changes made to an analysis config
  string id = 1;
  // Version number of this analysis version
  google.protobuf.Int32Value version_number = 2;
  // List of analysis config changes made in this version
  repeated string analysis_changes = 3;
  // JSON string containing changes made to metrics for this version
  string metric_changes = 4;
  ExperimentAnalysisDetails analysis_details = 5;
  // Text description of changes made, supplied by user or by DV in UpdateExperimentAnalysis
  string change_description = 6;
}

message AnalysisMetricDetails {
  string id = 1;
  string metric_id = 2;
  string metric_name = 3;
  MetricAggregateFunc aggregate_func = 4;
  google.protobuf.Timestamp created_at = 5;
  google.protobuf.Timestamp updated_at = 6;
  MetricLabel metric_label = 7;
  repeated MetricName covariates = 8;
  google.protobuf.Int32Value cuped_num_days = 9 [deprecated = true];
  repeated Dimension dimensions = 10; // TODO: deprecate once packed_dimensions is used
  repeated int32 cuped_lags = 11 [deprecated = true];
  repeated double quantiles = 12;
  repeated Covariate covariates_v2 = 13;
  repeated string cuped_windows = 14;
  repeated PackedDimensions packed_dimensions = 15;
  // used for filtering metrics in adhoc analyses or metrics in a metric pack
  repeated string metric_filter = 16;
  // keep incomplete exposures. used to disable filtering of incomplete exposures that don't have a full window of data
  bool include_non_fully_baked_cohort = 17 [deprecated = true];
  string parent_metric_pack_id = 18;
  string parent_metric_pack_name = 19;
  string timestamp_column = 20;
  WindowMetricNonFullyBakedCohortOption window_metric_non_fully_baked_cohort_option = 21;
  bool keep_events_after_experiment_end_date = 22;
}

message ExperimentAnalysisDetails {
  ExperimentAnalysis experiment_analysis = 1;
  google.protobuf.Timestamp created_at = 2;
  google.protobuf.Timestamp updated_at = 3;
  ResultStatus result_status = 4;
  string created_by = 5;
  string updated_by = 6;
  string dashab_error = 7;
  string id = 8;
  repeated AnalysisMetricDetails metrics = 9;
  string archived_at = 10;
  AnalysisStatus status = 11;
  repeated MetricPackName metric_packs = 12;
  repeated MetricDimensions metric_dimensions = 13;
}

message ExperimentUser {
  string id = 1;
  string user_id = 2;
  string name = 3;
  string email = 4;
}

message MetricName {
  string id = 1;
  string name = 2;
  MetricLabel metric_label = 3 [deprecated = true];
  repeated MetricName covariates = 4;
  int32 window = 5;
}

// Covariate
message Covariate {
  // Covariate Type
  enum CovariateType {
    // COVARIATE_TYPE_UNSPECIFIED
    COVARIATE_TYPE_UNSPECIFIED = 0;
    // COVARIATE_TYPE_METRIC
    COVARIATE_TYPE_METRIC = 1;
    // COVARIATE_TYPE_FORECAST
    COVARIATE_TYPE_FORECAST = 2;
  }
  // id
  string id = 1;
  // name
  string name = 2;
  // covariate_type
  CovariateType covariate_type = 3;
}

message MetricPackName {
  string id = 1;
  string name = 2;
}

message AnalysisName {
  string id = 1;
  string name = 2;
  string archived_at = 3;
  ManagedBy managed_by = 4;
}

message TestResults {
  google.protobuf.BoolValue does_flicker_exists = 1;
  google.protobuf.BoolValue are_buckets_imbalanced = 2;
}

message LogMessages {
  repeated string errors = 1;
  repeated string warnings = 2;
}

message MetricResults {
  string id = 1;
  string metric_name = 2;
  string experiment_group = 3;
  MetricAggregateFunc aggregate_func = 4;
  string variation = 5;
  StatsResults stats_results = 6;
  bool is_control = 7;
  google.protobuf.Timestamp created_at = 8;
}

message VariationResult {
  string variation = 1;
  oneof result {
    ControlStatsResults control_stat_result = 2;
    StatsResults treatment_stat_result = 3;
  }
}

message MetricAnalysisResults {
  string metric_name = 1;
  string experiment_group = 2;
  MetricAggregateFunc aggregate_func = 3;
  VariationResult control_result = 4;
  repeated VariationResult treatment_results = 5;
  MetricLabel metric_label = 6;
  string metric_pack_id = 7;
  string metric_pack_name = 8;
  google.protobuf.Timestamp computed_at = 9;
  string metric_id = 10;
  MetricName metric_info = 11;
  MetricMoveDirection desired_direction = 12;
  // This field stores the name of all the covariates used for a metric. An empty array means that the analysis did not use any covariates.
  repeated string covariates = 13;
}

message ExposureCounts {
  string experiment_group_label = 1;
  int64 expected_exposures = 2;
  int64 actual_exposures = 3;
}

message ImbalanceResults {
  string attribute = 1;
  string attribute_value = 2;
  string p_value = 3;
  string p_value_adj = 4;
  repeated ExposureCounts exposure_counts = 5;
}

message AnalysisHealthChecks {
  string analysis_id = 1;
  TestResult imbalance_result = 2;
  TestResult flicker_result = 3;
  LogMessages messages = 4;
  google.protobuf.Timestamp created_at = 5;
  repeated ImbalanceResults imbalance_results = 6;
  TestResult dilution_result = 7;
}

message AnalysisResults {
  string id = 1;
  string analysis_id = 2;
  TestResult imbalance_result = 3;
  TestResult flicker_result = 4;
  LogMessages messages = 5;
  google.protobuf.Timestamp created_at = 7;
  repeated MetricAnalysisResults metric_analysis_results = 8;
  repeated ImbalanceResults imbalance_results = 9;
  repeated AnalysisMetricDetails metric_details = 10;
}

message MetricHistoryResults {
  StatsResults stats_results = 1;
  bool is_control = 2;
  google.protobuf.Timestamp updated_at = 3;
}

message VariationResultDataPoint {
  oneof result {
    ControlStatsResults control_stat_result = 1;
    StatsResults treatment_stat_result = 2;
  }
  google.protobuf.Timestamp date_stamp = 3;
}

message VariationResultDateSeries {
  string variation = 1;
  repeated VariationResultDataPoint data_points = 2;
}

message GetDashboardRequest {
  enum Field {
    FIELD_UNSPECIFIED = 0;
    NAME = 1;
    OWNER = 2;
    CREATED_AT = 3;
    UPDATED_AT = 4;
    ANALYSIS_TYPE = 5;
    ACTIVE_DATE = 6;
  }

  message FieldFilter {
    Field field = 1;
    string value = 2;
  }

  message ToggleFilters {
    bool show_my_analyses_only = 1;
    bool show_archived_analyses = 2;
    bool show_in_progress_analyses = 3;
    bool show_default_analysis_status = 4;
  }

  message Order {
    Field field = 1;
    OrderDirection direction = 2;
  }

  google.protobuf.StringValue analysis_name_filter = 1 [deprecated = true];
  google.protobuf.Int32Value page_number = 2;
  google.protobuf.Int32Value page_size = 3;
  google.protobuf.StringValue experiment_name = 4;
  bool archived_filter = 5 [deprecated = true];
  Order order = 6;
  repeated FieldFilter filters = 7;
  ToggleFilters toggles = 8;
}

message GetDashboardResponse {
  repeated ExperimentAnalysisDetails experiments_analysis_details = 1;
  int32 page_number = 2;
  int32 page_size = 3;
  int32 total_experiments = 4;
  int32 total_pages = 5;
}

message GetAnalysesByMetricRequest {
  string metric_name = 1;
  google.protobuf.Timestamp active_date = 2;
}

message GetAnalysesByMetricResponse {
  repeated ExperimentAnalysisDetails experiment_analysis_details = 1;
}

message GetExperimentUsersRequest {
  google.protobuf.StringValue name_filter = 1;
  google.protobuf.Int32Value page_number = 2;
  google.protobuf.Int32Value page_size = 3;
}

message GetExperimentUsersResponse {
  repeated ExperimentUser users = 1;
  int32 page_number = 2;
  int32 page_size = 3;
  int32 total_users = 4;
  int32 total_pages = 5;
}

message GetExperimentAnalysisRequest {
  string analysis_id = 1;
  string analysis_name = 2;
  bool include_hidden = 3;
}

message GetExperimentAnalysisResponse {
  ExperimentAnalysisDetails experiment_analysis_details = 1;
}

message AddExperimentAnalysisRequest {
  ExperimentAnalysis experiment_analysis = 1;
  repeated MetricName metrics = 2 [deprecated = true];
  repeated MetricPackName metric_packs = 3;
  repeated MetricDimensions metric_dimensions = 4;
  repeated AddAnalysisMetric analysis_metrics = 5;
}

message AddExperimentAnalysisResponse {
  ExperimentAnalysisDetails experiment_analysis_details = 1;
}

message UpdateAnalysisMetric {
  MetricOperation metric_operation = 1;
  google.protobuf.StringValue id = 2;
  string metric_id = 3;
  MetricAggregateFunc aggregate_func = 4;
  MetricLabel metric_label = 5;
  repeated MetricName covariates = 6;
  google.protobuf.Int32Value cuped_num_days = 7 [deprecated = true];
  repeated int32 cuped_lags = 8 [deprecated = true];
  repeated double quantiles = 9;
  repeated Covariate covariates_v2 = 10;
  repeated string cuped_windows = 11;
  // used for filtering metrics in adhoc analyses or metrics in a metric pack
  repeated string metric_filter = 12;
  // keep incomplete exposures. used to disable filtering of incomplete exposures that don't have a full window of data
  bool include_non_fully_baked_cohort = 13 [deprecated = true];
  string parent_metric_pack_id = 14;
  string timestamp_column = 15;
  WindowMetricNonFullyBakedCohortOption window_metric_non_fully_baked_cohort_option = 16;
  bool keep_events_after_experiment_end_date = 17;
}

message AddAnalysisMetric {
  MetricName metric = 1;
  MetricLabel metric_label = 2;
  repeated MetricName covariates = 3;
  google.protobuf.Int32Value cuped_num_days = 4 [deprecated = true];
  MetricDimensions metric_dimensions = 5;
  repeated int32 cuped_lags = 6 [deprecated = true];
  repeated double quantiles = 7;
  repeated Covariate covariates_v2 = 8;
  repeated string cuped_windows = 9;
  // used for filtering metrics in adhoc analyses or metrics in a metric pack
  repeated string metric_filter = 10;
  // keep incomplete exposures. used to disable filtering of incomplete exposures that don't have a full window of data
  bool include_non_fully_baked_cohort = 11 [deprecated = true];
  string parent_metric_pack_id = 12;
  string timestamp_column = 13;
  WindowMetricNonFullyBakedCohortOption window_metric_non_fully_baked_cohort_option = 14;
  bool keep_events_after_experiment_end_date = 15;
}

message AddAnalysisHealthCheckRequest {
  AnalysisHealthChecks analysis_healthcheck_results = 1;
}

message AddAnalysisHealthCheckResponse {
  string analysis_id = 1;
}

message UpdateAnalysisMetricPack {
  MetricOperation metric_operation = 1;
  string metric_pack_id = 2;
}

message UpdateExperimentAnalysisRequest {
  ExperimentAnalysis experiment_analysis = 1;
  string analysis_id = 2;
  repeated UpdateAnalysisMetric metrics = 3;
  repeated UpdateAnalysisMetricPack metric_packs = 4;
  repeated MetricDimensions metric_dimensions = 5;
  string change_description = 6;
  bool use_simplified_update = 7;
}

message UpdateExperimentAnalysisResponse {
  ExperimentAnalysisDetails experiment_analysis_details = 1;
}

message AnalyzeExperimentRequest {
  string analysis_id = 1;
}

message AnalyzeExperimentResponse {
  bool isSuccess = 1;
}

message ArchiveAnalysisRequest {
  string analysis_id = 1;
}

message ArchiveAnalysisResponse {
  string analysis_id = 1;
}

message UnarchiveAnalysisRequest {
  string analysis_id = 1;
}

message UnarchiveAnalysisResponse {
  string analysis_id = 1;
}

message GetAnalysisResultsRequest {
  reserved 7;
  reserved "has_dimension_filter";

  string analysis_id = 1;
  JobType analysis_result_type = 2;
  repeated MetricLabel label_filter = 3;
  google.protobuf.Int32Value page_number = 4;
  google.protobuf.Int32Value page_size = 5;
  repeated string metric_name_filter = 6;
  repeated bool dimension_filter = 8;
  OrderDirection p_value_filter = 9;
}

message GetAnalysisResultsResponse {
  reserved 4, 5, 6;
  reserved "total_experiments", "total_pages", "total_results";
  AnalysisResults analysis_results = 1;
  int32 page_number = 2;
  int32 page_size = 3;
  int32 total_metrics = 7;
}

message GetHistoryResultsRequest {
  string analysis_id = 1;
  string metric_name = 2;
  string experiment_group = 3;
  MetricAggregateFunc aggregate_func = 4;
}

message GetHistoryResultsResponse {
  VariationResultDateSeries control_result = 1;
  repeated VariationResultDateSeries treatment_results = 2;
}

message GetMetricHistoryResultsRequest {
  string analysis_id = 1;
  string metric_name = 2;
  string experiment_group = 3;
  MetricAggregateFunc aggregate_func = 4;
  string variation = 5;
}

message GetMetricHistoryResultsResponse {
  repeated MetricHistoryResults metric_results = 1;
}

message AnalysisSqlStats {
  string query_id = 1;
  string latency = 2;
  string n_rows = 3;
  google.protobuf.Timestamp start_time = 5;
  string query_string = 6;
  string query_name = 7;
  string error_msg = 8;
}

message JobDetails {
  string status = 1;
  string query_id = 2;
  google.protobuf.Timestamp sql_start_time = 3;
  string sql_latency = 4;
  string n_rows = 5;
  string data_size = 6;
  google.protobuf.Timestamp analysis_start_time = 7;
  string analysis_latency = 8;
  string queue_position = 9;
  string error_msg = 10;
  LogMessages dashab_logs = 11;
  string all_data_sql = 12;
  string notebook_url = 13;
  AnalysisSqlStats quantile_sql_stats_part_1 = 14;
  AnalysisSqlStats quantile_sql_stats_part_2 = 15;
  google.protobuf.Timestamp quantile_analysis_start_time = 16;
  string quantile_notebook_url = 17;
  JobSkipReason skip_reason = 18;
  string skip_message = 19;
  google.protobuf.Timestamp skip_time = 20;
}

message ETLJobDetails {
  string run_id = 1;
  string status = 2;
  google.protobuf.Timestamp start_time = 3;
  google.protobuf.Timestamp end_time = 4;
  string query_url = 5;
  google.protobuf.Int32Value n_rows = 6;
  string error_msg = 7;
  repeated AnalysisSqlStats all_queries = 8;
  JobSkipReason skip_reason = 9;
  string skip_message = 10;
  google.protobuf.Timestamp skip_time = 11;
}

message MetricAnalysisJob {
  string analysis_id = 1;
  string metric_id = 2;
  JobDetails job_details = 3;
}

message DimensionAnalysisJob {
  string analysis_id = 1;
  string metric_id = 2;
  string dimension_id = 3; // TODO: Deprecate once switch over to cross dimension
  JobDetails job_details = 4;
  string packed_dimensions_id = 5;
}

message ExposuresLoaderJob {
  string analysis_id = 1;
  ETLJobDetails job_details = 2;
}

message AnalysisJob {
  string status = 1;
  string metric_id = 2;
  string query_id = 3;
  google.protobuf.Timestamp sql_start_time = 4;
  string sql_latency = 5;
  string n_rows = 6;
  string data_size = 7;
  google.protobuf.Timestamp analysis_start_time = 8;
  string analysis_latency = 9;
  string queue_position = 10;
  string error_msg = 11;
  LogMessages dashab_logs = 12;
  string analysis_id = 13;
  JobDetails job_details = 14;
}

message GetAnalysisProgressRequest {
  string analysis_id = 1;
  JobType job_type = 2;
  google.protobuf.StringValue metric_id = 3;
  google.protobuf.StringValue dimension_id = 4;
  google.protobuf.StringValue packed_dimensions_id = 5;
}

message GetAnalysisProgressResponse {
  string status = 1;
  string query_id = 2;
  google.protobuf.Timestamp sql_start_time = 3;
  string sql_latency = 4;
  string n_rows = 5;
  string data_size = 6;
  google.protobuf.Timestamp analysis_start_time = 7;
  string analysis_latency = 8;
  string queue_position = 9;
  repeated AnalysisJob jobs = 10;
  repeated Job curie_jobs = 14;

  message Job {
    oneof job {
      AnalysisJob analysis_job = 11;
      MetricAnalysisJob metric_analysis_job = 12;
      DimensionAnalysisJob dimension_analysis_job = 13;
      ExposuresLoaderJob exposures_loader_job = 14;
    }
  }
}

message DiffInDiffAnalysis {
  string id = 1;
  string analysis_name = 2;

  string bucket_key = 3;
  repeated string candidate_control_unit_ids = 4;
  repeated string treatment_unit_ids = 5;
  int32 match_unit_size = 6;

  google.protobuf.Timestamp matching_start_date = 7;
  google.protobuf.Timestamp matching_end_date = 8;

  google.protobuf.Timestamp experiment_start_date = 9;
  google.protobuf.Timestamp experiment_end_date = 10;

  repeated DiffInDiffMetricDetails diffInDiffMetricDetailsList = 11;
}

message DiffInDiffMetricDetails {
  string metric_id = 1;
  string entity_unit = 2;
}

message AddDiffInDiffAnalysisRequest {
  DiffInDiffAnalysis diff_in_diff_analysis = 1;
}

message AddDiffInDiffAnalysisResponse {
  string analysis_id = 1;
}

message GetDiffInDiffAnalysisRequest {
  string analysis_id = 1;
}

message GetDiffInDiffAnalysisResponse {
  DiffInDiffAnalysis diff_in_diff_analysis = 1;
}

message GetDiffInDiffAnalysisResultRequest {
  string analysis_id = 1;
}

message GetDiffInDiffAnalysisResultResponse {
  string matching_result = 1; // JSON string
  AnalysisResults analysis_results = 2;
  string plot_data = 3; // JSON string
}

message GetHealthCheckRequest {
  // allow us to get the healthcheck for one or more analyses
  repeated string analysis_ids = 1;
  bool include_summary_only = 2;
  // if true, only include core guardrail metrics in the results
  bool include_core_guardrail_only = 3;
}

message GetHealthCheckResponse {
  // the healthcheck results for the analyses
  repeated HealthCheck health_check = 1;
  // returns a summary object for the analyses
  repeated HealthCheckSummary health_check_summary = 2;
}

enum HealthCheckType {
  UNKNOWN_HEALTHCHECK_TYPE = 0;
  FLICKER_HEALTHCHECK = 1;
  IMBALANCE_HEALTHCHECK = 2;
  PRE_EXP_BIAS_HEALTHCHECK = 3;
  CONFIGURATION_HEALTHCHECK = 4;
  DASH_AB_HEALTHCHECK = 5;
  PIPELINE_HEALTHCHECK = 6;
  MULTIPLE_HYPOTHESIS_GUARDRAIL_HEALTHCHECK = 7;
  DILUTION_HEALTHCHECK = 8;
  ROLLOUT_HEALTHCHECK = 9;
}

enum HealthCheckStatus {
  STATUS_UNKNOWN = 0;
  STATUS_INFO = 1;
  STATUS_WARNING = 2;
  STATUS_ERROR = 3;
  STATUS_PASSED = 4;
}

message HealthCheck {
  string analysis_id = 1;
  // Optional entity id maps that can be used to associate a healthcheck to a metric id or a dimension id or metric and dimension id
  map<string, EntityType> entity_id_map = 2;
  // error type corresponding to different healthcheck failures
  HealthCheckType healthcheck_type = 3;
  // status of the healthcheck; error, warning, passed, info, unknown.
  HealthCheckStatus status = 4;
  // healthcheck code that can be associated with a markdown with debug instructions on web
  string healthcheck_code = 5;
  // The health check message generated by the backend. This should be shown to the user.
  string message = 6;
  // Arbitrary json with data related to the healthcheck message.
  string data = 7;
  // The timestamp of the results the healthcheck uses
  google.protobuf.Timestamp result_timestamp = 8;
}

message HealthCheckSummary {
  string analysis_id = 1;
  // error type corresponding to different healthcheck failures
  HealthCheckStatus flicker_healthcheck_status = 2;
  HealthCheckStatus imbalance_healthcheck_status = 3;
  HealthCheckStatus pre_exp_bias_healthcheck_status = 4;
  HealthCheckStatus configuration_healthcheck_status = 5;
  HealthCheckStatus pipeline_healthcheck_status = 6;
  HealthCheckStatus mht_healthcheck_status = 7;
  // the timestamp of the healtcheck result (the oldest timestamp of all statues)
  google.protobuf.Timestamp oldest_result_timestamp = 8;
  // healthcheck status for experiment dilution
  HealthCheckStatus dilution_healthcheck_status = 9;
  // healthcheck status for metrics aware rollout
  HealthCheckStatus rollout_healthcheck_status = 10;
}

message GetRolloutAnalysisResultRequest {
  string analysis_id = 1;
}

message GetRolloutAnalysisResultResponse {
  reserved 4, 5;
  reserved "dv_id", "dv_name";
  string analysis_id = 1;
  repeated RolloutAnalysisResult results = 2;
  // the current DV rollout percentage when the rollout analysis is ran
  string current_rollout_percentage = 3;
}

enum GuardrailStatus {
  INCONCLUSIVE = 0;
  HEALTHY = 1;
  WARN = 2;
  CRITICAL = 3;
  NOT_APPLICABLE = 4;
}

message GuardrailMetricResult {
  // optional - empty if dimension result
  string metric_result_id = 1;

  string metric_id = 2;
  string metric_name = 3;

  // optional - empty if metric result
  string dimension_result_id = 4;
  string dimension_id = 5;
  string dimension_cut = 6;
  string dimension_name = 7;

  string rel_treatment_effect = 8;
  string abs_treatment_effect = 9;
  string p_value = 10;
  MetricDirectionality desired_directionality = 11;
  ToleranceThreshold tolerance_threshold = 12;
  google.protobuf.Timestamp created_at = 13;

  // from source metric or dimension result
  MetricLabel label = 14;
  google.protobuf.Int32Value sample_size = 15;
}

message RolloutAnalysisResult {
  string treatment_variant = 1;
  google.protobuf.Timestamp created_at = 2;
  // result of rollout analysis
  GuardrailStatus guardrail_status = 3;
  // health check message to be shown to user
  string message = 4;
  HealthCheckSummary health_check_summary = 5;
  // detailed results for each metric
  repeated GuardrailMetricResult metric_results = 6;
}

message AddJobStatusRequest {
  string id = 1 [deprecated = true];

  // This represents the job type (e.g., load exposure job, event source job)
  JobType job_type = 2;
  // This represents the job status (e.g., success, error, started)
  string job_status = 3;
  // This represents the job name (e.g., dimension_deliveries)
  string job_name = 4;
  // When did the job start
  google.protobuf.Timestamp start_time = 5;
  // When did the job complete
  google.protobuf.Timestamp end_time = 6;
  // Error messages associated if the job (if any)
  string error_msg = 7;
  // This is a json payload with job related metadata
  string job_logs = 8;
  // This represents the run_id
  string run_id = 9;
  // This represents the job type of downstream job (e.g., metric, dimension, or pre-experiment bias analysis)
  JobType dependency_job_type = 10;
}

message AddJobStatusResponse {
  string id = 1;
}

message GetAnalysisVersionHistoryRequest {
  string analysis_id = 1;
  google.protobuf.Int32Value page_number = 2;
  google.protobuf.Int32Value page_size = 3;
}

message GetAnalysisVersionHistoryResponse {
  // This returns the history of analysis configuration versions
  repeated AnalysisVersion analysis_versions = 1;
  google.protobuf.Int32Value page_number = 2;
  google.protobuf.Int32Value page_size = 3;
  google.protobuf.Int32Value total_versions = 4;
}

message ResolveAnalysisMetricPackRequest {
  string analysis_id = 1;
  repeated string metric_pack_ids = 2;
  repeated AnalysisMetricDetails individual_metric_details = 3;
}

message ResolveAnalysisMetricPackResponse {
  repeated MetricPackName metric_packs = 1;
  repeated AnalysisMetricDetails individual_metric_details = 2;
  repeated AnalysisConfigObject search_bar_objects = 3;
  repeated ConfigOverride config_overrides = 4;
}

message AnalysisConfigObject {
  string id = 1;
  string name = 2;
  AnalysisConfigObjectType type = 3;
}

enum AnalysisConfigObjectType {
  UNKNOWN_OBJECT_TYPE = 0;
  INDIVIDUAL_METRIC = 1;
  METRIC_PACK_METRIC = 2;
  METRIC_PACK = 3;
  CORE_GUARDRAIL_METRIC = 4;
  CORE_GUARDRAIL_METRIC_PACK = 5;
}

enum OverrideType {
  UNKNOWN_OVERRIDE_TYPE = 0;
  INDIVIDUAL_METRIC_TO_METRIC_PACK_METRIC = 1;
  METRIC_PACK_METRIC_TO_METRIC_PACK_METRIC = 2;
  INDIVIDUAL_METRIC_TO_CORE_GUARDRAIL_PACK_METRIC = 3;
  METRIC_PACK_METRIC_TO_CORE_GUARDRAIL_PACK_METRIC = 4;
}

message ConfigOverride {
  AnalysisConfigObject overrider = 1;
  AnalysisConfigObject overridden = 2;
  OverrideType override_type = 3;
}

message GetSourceComputeStatusRequest {
  string metric_id = 1;
  google.protobuf.Timestamp start_date = 2;
  google.protobuf.Timestamp end_date = 3;
}

message GetSourceComputeStatusResponse {
  message SourceJobStatus {
    google.protobuf.Timestamp partition_date = 1;
    string job_status = 2;
    string job_url = 3;
    google.protobuf.Timestamp latest_run_time = 4;
  }

  message SourceJobHistory {
    string source_id = 1;
    string source_name = 2;
    repeated SourceJobStatus status = 3;
  }

  repeated SourceJobHistory status = 1;
}

message ComputeBusinessImpactRequest {
  string metric_id = 1;
  string formula_set_id = 2;
  float coverage = 3;
  string winning_variant = 4;
  string analysis_id = 5;
}

message ComputeBusinessImpactResponse {
  string in_experiment_impact = 1;
  string annualized_impact = 2;
}
