syntax = "proto3";
package doordash.runtime.v1;

import "doordash.api/annotations.proto";
//import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "runtime-service/common.proto";
import "runtime-service/experiment-analysis-service.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_outer_classname = "ExperimentMetricsServiceApi";
option java_package = "com.doordash.rpc.experiment_metrics.v1";

service ExperimentMetricsService {
  //  option (doordash.api.service) = {
  //    name: "runtime-service-web"
  //    port: 50051
  //    name_spaces: ["experiment-metrics"]
  //    api_key_name: "RUNTIME_SERVICE_API_KEY"
  //    owner: {
  //      id: "app-decision-systems"
  //      name: "app-decision-systems"
  //      slack_channel: "#team-decision-systems"
  //      email_alias: "team-decision-systems@doordash.com"
  //    }
  //    target_products: [CX]
  //  };

  // APIs for Curie Experiment
  // common index page API for different product type (e.g. experiment, sample size etc)
  rpc GetExperimentList(GetExperimentListRequest) returns (GetExperimentListResponse);
  rpc GetExperimentNames(GetExperimentNamesRequest) returns (GetExperimentNamesResponse);
  rpc GetExperimentConfig(GetExperimentConfigRequest) returns (GetExperimentConfigResponse);
  rpc AddExperimentConfig(AddExperimentConfigRequest) returns (AddExperimentConfigResponse);
  rpc UpdateExperimentConfig(UpdateExperimentConfigRequest) returns (UpdateExperimentConfigResponse);
  rpc GetExperimentMetricResults(GetExperimentMetricsResultsRequest) returns (GetExperimentMetricsResultsResponse);
  rpc ArchiveExperiment(ArchiveExperimentRequest) returns (ArchiveExperimentResponse);
  rpc UnarchiveExperiment(UnarchiveExperimentRequest) returns (UnarchiveExperimentResponse);
  // Fetch history timeseries results for a particular metric or dimension in an analysis
  rpc GetResultTimeSeries(GetResultTimeSeriesRequest) returns (GetResultTimeSeriesResponse);

  rpc GetMetricNames(GetMetricNamesRequest) returns (GetMetricNamesResponse);
  rpc GetMetricDetails(GetMetricDetailsRequest) returns (GetMetricDetailsResponse);
  rpc AddMetricDetails(AddMetricDetailsRequest) returns (AddMetricDetailsResponse);
  rpc AddMetricSource(AddMetricSourceRequest) returns (AddMetricSourceResponse);
  rpc GetEventSource(GetEventSourceRequest) returns (GetEventSourceResponse);
  rpc GetEventSourceList(GetEventSourceListRequest) returns (GetEventSourceListResponse);
  rpc GetEventAggregates(GetEventAggregatesRequest) returns (GetEventAggregatesResponse);
  rpc AddEventSource(AddEventSourceRequest) returns (AddEventSourceResponse);
  rpc GetEventDetails(GetEventDetailsRequest) returns (GetEventDetailsResponse);
  rpc AddEventDetails(AddEventDetailsRequest) returns (AddEventDetailsResponse);
  rpc TriggerMetricAnalysis(TriggerMetricAnalysisRequest) returns (TriggerMetricAnalysisResponse);
  rpc TriggerAnalysis(TriggerAnalysisRequest) returns (TriggerAnalysisResponse);
  // Trigger an operation that either lists job status, cancels all running jobs, or starts a job for an event source.
  rpc TriggerEventSourceJobOperation(TriggerEventSourceJobOperationRequest) returns (TriggerEventSourceJobOperationResponse);

  rpc GetMetricPack(GetMetricPackRequest) returns (GetMetricPackResponse);
  rpc GetMetricPackList(GetMetricPackListRequest) returns (GetMetricPackListResponse);
  rpc GetAllMetricPacks(GetAllMetricPacksRequest) returns (GetAllMetricPacksResponse);
  rpc AddMetricPack(AddMetricPackRequest) returns (AddMetricPackResponse);
  rpc UpdateMetricPack(UpdateMetricPackRequest) returns (UpdateMetricPackResponse);
  rpc ApproveMetricPack(ApproveMetricPackRequest) returns (ApproveMetricPackResponse);
  rpc RejectMetricPack(RejectMetricPackRequest) returns (RejectMetricPackResponse);

  rpc GetMetricStats(GetMetricStatsRequest) returns (GetMetricStatsResponse);
  rpc CalculateSampleSize(CalculateSampleSizeRequest) returns (CalculateSampleSizeResponse);
  rpc CalculateMDE(CalculateMDERequest) returns (CalculateMDEResponse);

  // APIs for Dimension Analysis
  rpc GetDimensionDetails(GetDimensionDetailsRequest) returns (GetDimensionDetailsResponse);
  rpc AddDimensionDetails(AddDimensionDetailsRequest) returns (AddDimensionDetailsResponse);
  rpc UpdateDimensionDetails(UpdateDimensionDetailsRequest) returns (UpdateDimensionDetailsResponse);
  rpc GetDimensionsApplicableForAnalysis(GetDimensionsApplicableForAnalysisRequest) returns (GetDimensionsApplicableForAnalysisResponse);
  rpc GetDimensionsApplicableForMetric(GetDimensionsApplicableForMetricRequest) returns (GetDimensionsApplicableForMetricResponse);
  rpc AddAnalysisDimensions(AddAnalysisDimensionsRequest) returns (AddAnalysisDimensionsResponse);
  rpc GetAnalysisDimensions(GetAnalysisDimensionsRequest) returns (GetAnalysisDimensionsResponse);
  rpc AnalyzeDimension(AnalyzeDimensionRequest) returns (AnalyzeDimensionResponse);
  rpc GetDimensionResults(GetDimensionResultsRequest) returns (GetDimensionResultsResponse);
  rpc AddDimensionResults(AddDimensionResultsRequest) returns (AddDimensionResultsResponse);

  rpc GetAnalysisMetricsInfo(GetAnalysisMetricsInfoRequest) returns (GetAnalysisMetricsInfoResponse);
  rpc GetReferencedAnalysisDimensions(GetReferencedAnalysisDimensionsRequest) returns (GetReferencedAnalysisDimensionsResponse);
  rpc GetAllAnalysisMetrics(GetAllAnalysisMetricsRequest) returns (GetAllAnalysisMetricsResponse);

  rpc AnalyzePreExperimentBias(AnalyzePreExperimentBiasRequest) returns (AnalyzePreExperimentBiasResponse);

  // APIs for Metric Explorer
  rpc ListTreatmentEffects(ListTreatmentEffectsRequest) returns (ListTreatmentEffectsResponse);

  rpc GetTreatmentEffectSummary(GetTreatmentEffectSummaryRequest) returns (GetTreatmentEffectSummaryResponse) {
    //    option (google.api.http) = {get: "/experiment-metrics/v1/get-treatment-effect"};
    //    option (doordash.api.endpoint) = {
    //      tier: T2
    //      lifecycle: DEV
    //      authorization: [DD_EMPLOYEE]
    //    };
  }

  // APIs for Sample Size Calculator v2
  rpc GetSampleSizeAnalysis(GetSampleSizeAnalysisRequest) returns (GetSampleSizeAnalysisResponse);
  rpc AddSampleSizeAnalysis(AddSampleSizeAnalysisRequest) returns (AddSampleSizeAnalysisResponse);
  rpc UpdateSampleSizeAnalysis(UpdateSampleSizeAnalysisRequest) returns (UpdateSampleSizeAnalysisResponse);
  rpc ComputeSampleSizes(ComputeSampleSizesRequest) returns (ComputeSampleSizesResponse);
  rpc SaveSampleSizeStats(SaveSampleSizeStatsRequest) returns (SaveSampleSizeStatsResponse);
  rpc GetLatestSampleSizeAnalysisResults(GetLatestSampleSizeAnalysisResultsRequest) returns (GetLatestSampleSizeAnalysisResultsResponse);
  rpc AnalyzeSampleSizeStats(AnalyzeSampleSizeStatsRequest) returns (AnalyzeSampleSizeStatsResponse);

  // APIs for notifications and alerts
  rpc AddNotificationSubscription(AddNotificationSubscriptionRequest) returns (AddNotificationSubscriptionResponse);
  rpc GetNotificationSubscription(GetNotificationSubscriptionRequest) returns (GetNotificationSubscriptionResponse);
  rpc DeleteNotificationSubscription(DeleteNotificationSubscriptionRequest) returns (DeleteNotificationSubscriptionResponse);
  rpc AddNotificationText(AddNotificationTextRequest) returns (AddNotificationTextResponse);

  // API for lifecycle management
  rpc AddLifecycleMetadata(AddLifecycleMetadataRequest) returns (AddLifecycleMetadataResponse);
  rpc GetLifecycleMetadata(GetLifecycleMetadataRequest) returns (GetLifecycleMetadataResponse);
}

message ExperimentDetails {
  string id = 1;
  string name = 2;
  ExperimentType type = 3;
  string randomization_level = 4;
  string randomization_unit = 5;
  map<string, int32> variation_splits = 6;
  string control_label = 7;
  google.protobuf.Timestamp created_at = 8;
  google.protobuf.Timestamp updated_at = 9;
  string created_by = 10;
  string updated_by = 11;
  string default_analysis_id = 12;
  string custom_exposure_table = 13;
  string archived_at = 14;
  AnalysisStatus default_analysis_status = 15;
  string lifecycle_status = 16;
  string dv_reference_name = 17;
  PlatformType platform = 18;
}

message ExperimentName {
  string experiment_id = 1;
  string experiment_name = 2;
}

message MetricDetails {
  string id = 1;
  string name = 2;
  string description = 3;
  google.protobuf.Timestamp created_at = 4;
  google.protobuf.Timestamp updated_at = 5;
  string created_by = 6;
  string updated_by = 7;
  repeated string entity_units = 8;
  string numerator_aggregation = 9;
  string denominator_aggregation = 10;
  string numerator_event_id = 11;
  string denominator_event_id = 12;
  repeated string owners = 13;
  MetricMoveDirection desired_direction = 14;
  repeated MetricName covariates = 15;
  bool include_all_entities = 16;
  string denominator_type = 17;
  EventDetails numerator_event = 18;
  EventDetails denominator_event = 19;
  int32 window = 20;
  MetricName parent_metric = 21;
  repeated MetricName derived_metrics = 22;
  bool dimension_global_denominator = 23;
}

message MetricSource {
  string id = 1;
  string name = 2;
  string sql = 3;
  string unit = 4;
  google.protobuf.Timestamp created_at = 5;
  google.protobuf.Timestamp updated_at = 6;
}

message EventSource {
  string id = 1;
  string name = 2;
  string description = 3;
  string sql = 4;
  google.protobuf.Timestamp created_at = 5;
  google.protobuf.Timestamp updated_at = 6;
  repeated string owners = 7;
  repeated string entity_units = 8;
  string created_by = 9;
  string updated_by = 10;
  repeated string dependencies = 11;
  int32 lookback_period = 12;
  string schedule = 13;
}

message EventSourceName {
  string id = 1;
  string name = 2;
}

message EventDetails {
  string id = 1;
  string source_id = 2;
  string name = 3;
  string description = 4;
  google.protobuf.Timestamp created_at = 5;
  google.protobuf.Timestamp updated_at = 6;
  string created_by = 7;
  string updated_by = 8;
}

message DimensionDetails {
  string id = 1;
  string source_id = 2;
  string name = 3;
  string description = 4;
  google.protobuf.Timestamp created_at = 5;
  google.protobuf.Timestamp updated_at = 6;
  string created_by = 7;
  string updated_by = 8;
}

message DimensionCutResults {
  string dimension_cut = 1;
  MetricAnalysisResults dimension_results = 2;
  MetricLabel metric_label = 3;
}

message MetricDimensionResults {
  string metric_id = 1;
  string metric_name = 2;
  string dimension_id = 3;
  string dimension_name = 4;
  LogMessages messages = 5;
  repeated DimensionCutResults dimension_cuts_results = 6;
  google.protobuf.Timestamp created_at = 7;
  MetricMoveDirection desired_direction = 8;
  string packed_dimensions_id = 9;
  repeated string dimension_ids = 10;
}

message AnalysisDimensionsResults {
  string analysis_id = 1;
  google.protobuf.Timestamp created_at = 2 [deprecated = true];
  repeated MetricDimensionResults metrics_dimensions_results = 3;
}

message MetricPack {
  string id = 1;
  string name = 2;
  google.protobuf.Timestamp created_at = 3;
  google.protobuf.Timestamp updated_at = 4;
  string created_by = 5;
  string updated_by = 6;
  MetricPackVersion current_version = 7;
  MetricPackVersion pending_version = 8;
  google.protobuf.Timestamp archived_at = 9;
  repeated ExperimentUser owners = 11;
}

message MetricPackSummary {
  string id = 1;
  string name = 2;
  google.protobuf.Timestamp created_at = 3;
  google.protobuf.Timestamp updated_at = 4;
  string created_by = 5;
  string updated_by = 6;
  string current_version_id = 7;
  string pending_version_id = 8;
  google.protobuf.Timestamp archived_at = 9;
  repeated ExperimentUser owners = 11;
}

message MetricPackVersion {
  string id = 1;
  string metric_pack_id = 2;
  string description = 3;
  google.protobuf.Timestamp created_at = 4;
  string created_by = 5;
  repeated PackedMetric packed_metrics = 7;
}

message PackedMetric {
  string id = 1;
  string metric_pack_version_id = 2;
  string metric_id = 3;
  MetricLabel metric_label = 4;
  string metric_name = 5;
  repeated MetricName covariates = 6; //TODO[Mohan] deprecate after covariates_v2 is actively used
  repeated Dimension dimensions = 7; //TODO deprecate after packed_dimensions is actively used
  google.protobuf.Int32Value cuped_num_days = 8 [deprecated = true];
  repeated int32 cuped_lags = 9 [deprecated = true];
  repeated double quantiles = 10;
  repeated Covariate covariates_v2 = 11;
  repeated string cuped_windows = 12;
  repeated PackedDimensions packed_dimensions = 13;
  // used for filtering metrics in adhoc analyses or metrics in a metric pack
  repeated string metric_filter = 14;
  // keep incomplete exposures. used to disable filtering of incomplete exposures that don't have a full window of data
  bool include_non_fully_baked_cohort = 15 [deprecated = true];
  // Alternative Timestamp Column (default = event_ts)
  string timestamp_column = 16;
  string parent_metric_pack_id = 17;
  WindowMetricNonFullyBakedCohortOption window_metric_non_fully_baked_cohort_option = 18;
  bool keep_events_after_experiment_end_date = 19;
}

message LabeledMetric {
  string metric_id = 1;
  MetricLabel metric_label = 2;
  repeated LabeledMetric covariates = 3; //TODO[Mohan] deprecate after covariates_v2 is actively used
  repeated Dimension dimensions = 4; //TODO deprecate after packed_dimensions is actively used
  google.protobuf.Int32Value cuped_num_days = 5 [deprecated = true];
  repeated int32 cuped_lags = 6 [deprecated = true];
  repeated double quantiles = 7;
  repeated Covariate covariates_v2 = 8;
  repeated string cuped_windows = 9;
  repeated PackedDimensions packed_dimensions = 10;
  // used for filtering metrics in adhoc analyses or metrics in a metric pack
  repeated string metric_filter = 11;
  // keep incomplete exposures. used to disable filtering of incomplete exposures that don't have a full window of data
  bool include_non_fully_baked_cohort = 12 [deprecated = true];
  // Alternative Timestamp Column (default = event_ts)
  string timestamp_column = 13;
  string parent_metric_pack_id = 14;
  WindowMetricNonFullyBakedCohortOption window_metric_non_fully_baked_cohort_option = 15;
  bool keep_events_after_experiment_end_date = 16;
}

message TreatmentEffectAnalysisDetails {
  string experiment_name = 1;
  string analysis_name = 2;
  string analysis_id = 3;
  string created_by = 4;
  google.protobuf.Timestamp start_date = 5; // TODO[Eric]: Deprecate when exposure/metric start date used
  google.protobuf.Timestamp end_date = 6; // TODO[Eric]: Deprecate when exposure/metric start date used
  string experiment_id = 7;
  string entity_unit = 8;
  string lifecycle_status = 9;
  repeated string exposure_dates = 10;
  repeated string metric_dates = 11;
  // Flag that indicates if the metric comes from a healthy analysis (from flicker and imbalance perspective)
  HealthCheckSummary healthcheck_status = 12;
  // report time (official, rollout, etc)
  AnalysisReportType report_type = 13;
}

message TreatmentEffectResult {
  string analysis_metric_results_id = 1;
  google.protobuf.Timestamp created_at = 2;
  string p_value = 3;
  string avg_treatment_effect = 4;
  string rel_treatment_effect = 5;
  string variation_name = 6;
  repeated string confidence_interval = 7;
  google.protobuf.Int64Value sample_size = 8;
  repeated string rel_confidence_interval = 9;
  string metric_name = 10;
  string seq_p_value = 11;
  // the aboslute global impact of the change (e.g., if local impact for ASAP is 10s, the global impact could be 2s)
  string absolute_global_lift = 12;
  // the relative global impact of the change (e.g., if local impact for ASAP is 1%, the global impact could be 0.2%)
  string relative_global_lift = 13;
  // Percent of metric event that is covered by the experiment (e.g., 55% for gov metic, would mean that this experiment affects 55% of revenue)
  string coverage = 14;
}

message TreatmentEffectDetails {
  TreatmentEffectAnalysisDetails analysis = 1;
  TreatmentEffectResult result = 2;
}

message GetMetricPackRequest {
  string id = 1;
}

message GetMetricPackResponse {
  MetricPack metric_pack = 1;
}

message AddMetricPackRequest {
  string description = 1;
  repeated string owner_ids = 5;
  repeated LabeledMetric labeled_metrics = 3;
  string name = 4;
}

message AddMetricPackResponse {
  MetricPack metric_pack = 1;
}

message UpdateMetricPackRequest {
  string metric_pack_id = 1;
  string description = 2;
  repeated LabeledMetric labeled_metrics = 3;
}

message UpdateMetricPackResponse {
  MetricPack metric_pack = 1;
}

message ApproveMetricPackRequest {
  string metric_pack_id = 1;
}

message ApproveMetricPackResponse {
  string metric_pack_id = 2;
}

message RejectMetricPackRequest {
  string metric_pack_id = 1;
}

message RejectMetricPackResponse {
  string metric_pack_id = 2;
}

message GetMetricPackListRequest {
  enum Field {
    FIELD_UNSPECIFIED = 0;
    NAME = 1;
    OWNER = 2;
    CREATED_AT = 3;
  }
  message FieldFilter {
    Field field = 1;
    string value = 2;
  }
  google.protobuf.Int32Value page_number = 1;
  google.protobuf.Int32Value page_size = 2;
  repeated FieldFilter filters = 3;
}

message GetAllMetricPacksRequest {}

message GetMetricPackListResponse {
  repeated MetricPackSummary metric_pack_summaries = 1;
  int32 page_number = 2;
  int32 page_size = 3;
  int32 total_metric_packs = 4;
  int32 total_pages = 5;
}

message GetAllMetricPacksResponse {
  repeated MetricPackName metric_packs = 1;
}

message AddEventSourceRequest {
  string name = 1;
  string description = 2;
  string sql = 3;
  repeated string entity_units = 4;
  repeated string owners = 5;
  repeated string dependencies = 6;
  int32 lookback_period = 7;
  string schedule = 8;
}

message AddEventSourceResponse {
  string id = 1;
}

message GetEventSourceListRequest {
  google.protobuf.StringValue source_name_filter = 1;
  google.protobuf.Int32Value page_number = 2;
  google.protobuf.Int32Value page_size = 3;
}

message GetEventSourceListResponse {
  repeated EventSource event_sources = 1;
  Paging paging = 2;
}

message GetEventSourceRequest {
  // Unique identifier to identify an event source by either name or id
  oneof identifier {
    string id = 1;
    string name = 2;
  }
}

message GetEventSourceResponse {
  EventSource event_source = 1;
  repeated EventDetails events = 2;
  repeated DimensionDetails dimensions = 3;
}

message AddEventDetailsRequest {
  string source_id = 1;
  string name = 2;
  string description = 3;
}

message AddEventDetailsResponse {
  string id = 1;
}

message GetEventDetailsRequest {
  // Unique identifier to identify an event by either name or id
  oneof identifier {
    string id = 1;
    string name = 2;
  }
}

message GetEventDetailsResponse {
  EventDetails event_details = 1;
}

message EventAggregate {
  string aggregate_func = 1;
  string entity_unit = 2;
  repeated string metric_names = 3;
}

message GetEventAggregatesRequest {
  string event_id = 1;
}

message GetEventAggregatesResponse {
  string event_id = 1;
  repeated EventAggregate aggregates = 2;
}

message MetricTreatmentResults {
  string id = 1;
  string experiment_metric_id = 2;
  string variation_name = 3;
  MetricAggregateFunc aggregate_func = 4;
  StatsResults stats_results = 5;
  google.protobuf.Timestamp updated_at = 6;
}

message ExperimentMetricsResults {
  AnalysisMetricDetails experiment_metric_details = 1;
  repeated MetricTreatmentResults treatment_results = 2;
}

message AnalysisMetric {
  string id = 1;
  MetricDetails metric_details = 2;
  repeated MetricDetails covariate_details = 3;
  google.protobuf.Int32Value cuped_num_days = 4 [deprecated = true];
  repeated Dimension dimensions = 5; //TODO deprecate after packed_dimensions is actively used
  repeated int32 cuped_lags = 6 [deprecated = true];
  repeated double quantiles = 7;
  repeated Covariate covariates_v2 = 8;
  repeated string cuped_windows = 9;
  repeated PackedDimensions packed_dimensions = 10;
  // used for filtering metrics in adhoc analyses or metrics in a metric pack
  repeated string metric_filter = 11;
  // keep incomplete exposures. used to disable filtering of incomplete exposures that don't have a full window of data
  bool include_non_fully_baked_cohort = 12 [deprecated = true];
  string parent_metric_pack_id = 13;
  string timestamp_column = 14;
  WindowMetricNonFullyBakedCohortOption window_metric_non_fully_baked_cohort_option = 15;
  bool keep_events_after_experiment_end_date = 16;
}

message AnalysisMetricsInfo {
  ExperimentDetails experiment_details = 1;
  repeated AnalysisMetric metrics = 2;
  ExperimentAnalysis experiment_analysis = 3;
  SampleSizeAnalysis sample_size_analysis = 4;
}

message GetMetricSourceRequest {
  string id = 1;
}

message GetMetricSourceResponse {
  MetricSource metric_source = 1;
}

message AddMetricSourceRequest {
  string name = 1;
  string sql = 2;
  string unit = 3;
}

message AddMetricSourceResponse {
  string source_id = 1;
}

message GetMetricDetailsRequest {
  // Unique identifier to identify a metric by either name or id
  oneof identifier {
    string id = 1;
    string name = 2;
  }
}

message GetMetricDetailsResponse {
  MetricDetails metric_details = 1;
}

message AddMetricDetailsRequest {
  string name = 1;
  string description = 2;
  repeated string entity_units = 3;
  string numerator_aggregation = 4;
  string denominator_aggregation = 5;
  string numerator_event_id = 6;
  string denominator_event_id = 7;
  repeated string owners = 8;
  MetricMoveDirection desired_direction = 9;
  repeated string covariate_ids = 10;
  repeated int32 windows = 11;
  bool dimension_global_denominator = 12;
}

message AddMetricDetailsResponse {
  string metric_id = 1;
}

message GetExperimentListRequest {
  enum Field {
    FIELD_UNSPECIFIED = 0;
    NAME = 1;
    OWNER = 2;
    CREATED_AT = 3;
    UPDATED_AT = 4;
    PLATFORM = 5;
  }

  message FieldFilter {
    Field field = 1;
    string value = 2;
    bool is_exact_match = 3;
  }

  message ToggleFilters {
    bool show_my_experiments_only = 1;
    bool show_archived_experiments = 2;
  }

  message Order {
    Field field = 1;
    OrderDirection direction = 2;
  }

  google.protobuf.StringValue exp_name_filter = 1;
  google.protobuf.Int32Value page_number = 2;
  google.protobuf.Int32Value page_size = 3;
  bool archived_filter = 4;
  Order order = 5;
  repeated FieldFilter filters = 6;
  ToggleFilters toggles = 7;
  ProductType type = 8;
}

message GetExperimentListResponse {
  message ListEntity {
    // entity object for different product type
    oneof result {
      ExperimentDetails experiment_details = 1;
      SampleSizeAnalysis sample_size_analysis = 2;
      DiffInDiffAnalysis diff_in_diff_analysis = 3;
    }
  }

  // TODO(caixia): deprecate after using results field for experiment analysis
  repeated ExperimentDetails experiment_details = 1;
  int32 page_number = 2;
  int32 page_size = 3;
  int32 total_experiments = 4;
  int32 total_pages = 5;
  repeated ListEntity results = 6;
}

message GetExperimentConfigRequest {
  string id = 1;
}

message GetExperimentConfigResponse {
  ExperimentDetails experiment_details = 1;
  repeated AnalysisName analyses = 2;
}

message AddExperimentConfigRequest {
  string name = 1;
  ExperimentType type = 2;
  string randomization_level = 3;
  string randomization_unit = 4;
  ExperimentAnalysis analysis = 5;
  repeated MetricName metrics = 6 [deprecated = true];
  string custom_exposure_table = 7;
  repeated MetricPackName metric_packs = 8;
  repeated MetricDimensions metric_dimensions = 9;
  repeated AddAnalysisMetric analysis_metrics = 10;
  string dv_reference_name = 11;
  PlatformType platform = 12;
}

message AddExperimentConfigResponse {
  string experiment_id = 1;
  string analysis_id = 2;
}

message UpdateExperimentConfigRequest {
  string id = 1;
  string name = 2;
  ExperimentType type = 3;
  string randomization_level = 4;
  string randomization_unit = 5;
  string default_analysis_id = 6;
  string custom_exposure_table = 7;
  string dv_reference_name = 8;
  PlatformType platform = 9;
}

message UpdateExperimentConfigResponse {
  string experiment_id = 1;
}

message GetExperimentMetricsResultsRequest {
  string experiment_id = 1;
}

message GetExperimentMetricsResultsResponse {
  repeated ExperimentMetricsResults metric_results = 1;
}

message ArchiveExperimentRequest {
  string experiment_id = 1;
}

message UnarchiveExperimentRequest {
  string experiment_id = 1;
}

message ArchiveExperimentResponse {
  string experiment_id = 1;
}

message UnarchiveExperimentResponse {
  string experiment_id = 1;
}

message GetExperimentNamesRequest {
  google.protobuf.StringValue exp_name_filter = 1;
  google.protobuf.Int32Value page_number = 2;
  google.protobuf.Int32Value page_size = 3;
}

message GetExperimentNamesResponse {
  repeated ExperimentName experiment_names = 1;
  int32 page_number = 2;
  int32 page_size = 3;
  int32 total_experiments = 4;
  int32 total_pages = 5;
}

message GetMetricStatsRequest {
  string metric_id = 1;
  repeated string covariate_ids = 2;
  google.protobuf.Int32Value cuped_num_days = 3 [deprecated = true];
  repeated int32 cuped_lags = 4 [deprecated = true];
  repeated string cuped_windows = 5;
  // used for filtering metrics in adhoc analyses or metrics in a metric pack
  repeated string metric_filter = 6;
  // keep incomplete exposures. used to disable filtering of incomplete exposures that don't have a full window of data
  bool include_non_fully_baked_cohort = 7 [deprecated = true];
  WindowMetricNonFullyBakedCohortOption window_metric_non_fully_baked_cohort_option = 8;
  bool keep_events_after_experiment_end_date = 9;
}

message GetMetricStatsResponse {
  string metric_value = 1;
  string standard_deviation = 2;
  string entity_unit = 3;
}

message CalculateSampleSizeRequest {
  string standard_deviation = 1;
  string absolute_mde = 2;
}

message CalculateSampleSizeResponse {
  string sample_size_per_group = 1;
}

message CalculateMDERequest {
  string standard_deviation = 1;
  string sample_size_per_group = 2;
}

message CalculateMDEResponse {
  string absolute_mde = 1;
}

message GetMetricNamesRequest {
  google.protobuf.StringValue metric_name_filter = 1;
  google.protobuf.Int32Value page_number = 2;
  google.protobuf.Int32Value page_size = 3;
}

message GetMetricNamesResponse {
  repeated MetricName metric_names = 1;
  int32 page_number = 2;
  int32 page_size = 3;
  int32 total_metrics = 4;
  int32 total_pages = 5;
}

message TriggerMetricAnalysisRequest {
  string analysis_name = 1;
  string metric_name = 2;
}

message TriggerMetricAnalysisResponse {
  bool is_success = 1;
}

message TriggerAnalysisRequest {
  enum JobOperation {
    START = 0;
    STOP = 1;
    RESTART = 2;
  }

  // Unique identifier to identify an analysis by either name or id
  oneof analysis_identifier {
    string analysis_name = 1;
    string analysis_id = 2;
  }
  JobType job_type = 3;
  string metric_name = 4;
  string dimension_id = 5;
  SourceType source_type = 6;
  string packed_dimensions_id = 7;
  JobOperation job_operation = 8;
}

message TriggerAnalysisResponse {
  bool is_success = 1;
}

message GetDimensionDetailsRequest {
  // Unique identifier to identify an event by either name or id
  oneof identifier {
    string id = 1;
    string name = 2;
  }
}

message GetDimensionDetailsResponse {
  DimensionDetails dimension_details = 1;
}

message AddDimensionDetailsRequest {
  string source_id = 1;
  string name = 2;
  string description = 3;
  string created_by = 4;
}

message AddDimensionDetailsResponse {
  string id = 1;
}

message UpdateDimensionDetailsRequest {
  string name = 1;
  string source_id = 2;
  string description = 3;
  string updated_by = 4;
}

message UpdateDimensionDetailsResponse {
  string id = 1;
}

message GetDimensionsApplicableForAnalysisRequest {
  string analysis_id = 1;
}

message GetDimensionsApplicableForAnalysisResponse {
  repeated MetricDimensions metric_dimensions = 1;
}

message GetDimensionsApplicableForMetricRequest {
  string metric_id = 1;
}

message GetDimensionsApplicableForMetricResponse {
  MetricDimensions metric_dimensions = 1;
}

message AddAnalysisDimensionsRequest {
  string analysis_id = 1;
  repeated MetricDimensions metric_dimensions = 2;
}

message AddAnalysisDimensionsResponse {
  string analysis_id = 1;
}

message GetAnalysisDimensionsRequest {
  string analysis_id = 1;
}

message GetAnalysisDimensionsResponse {
  repeated MetricDimensions metric_dimensions = 1;
}

message AnalyzeDimensionRequest {
  string analysis_id = 1;
}

message AnalyzeDimensionResponse {
  string analysis_id = 1;
}

message AnalyzePreExperimentBiasRequest {
  string analysis_id = 1;
}

message AnalyzePreExperimentBiasResponse {
  string analysis_id = 1;
}

message GetDimensionResultsRequest {
  string analysis_id = 1;
  google.protobuf.StringValue metric_id = 2;
  repeated MetricLabel label_filter = 3;
}

message GetDimensionResultsResponse {
  AnalysisDimensionsResults analysis_dimensions_results = 1;
}

message AddDimensionResultsRequest {
  AnalysisDimensionsResults analysis_dimensions_results = 1;
}

message AddDimensionResultsResponse {
  string analysis_id = 1;
}

message GetAnalysisMetricsInfoRequest {
  string analysis_id = 1;
  string metric_id = 2;
  ProductType type = 3;
}

message GetAnalysisMetricsInfoResponse {
  AnalysisMetricsInfo analysis_metrics_info = 1;
}

message GetReferencedAnalysisDimensionsRequest {
  // Unique identifier to identify an event by either name or id
  oneof identifier {
    string dimension_id = 1;
    string dimension_name = 2;
  }
}

message GetReferencedAnalysisDimensionsResponse {
  repeated Dimension dimensions = 1;
}

message GetAllAnalysisMetricsRequest {
  string analysis_id = 1;
}

message GetAllAnalysisMetricsResponse {
  repeated AnalysisMetricDetails metrics = 1;
}

message ListTreatmentEffectsRequest {
  enum Direction {
    DIRECTION_UNSPECIFIED = 0;
    ASC = 1;
    DESC = 2;
  }

  enum OrderByField {
    ORDER_FIELD_UNSPECIFIED = 0;
    ORDER_FIELD_P_VALUE = 1;
    ORDER_FIELD_AVG_TREATMENT_EFFECT = 2;
    ORDER_FIELD_RELATIVE_GLOBAL_LIFT = 3;
  }

  message Order {
    OrderByField field = 1;
    Direction direction = 2;
  }

  string metric_name = 1; // TODO(yixin): plan to deprecate and use metric_names
  google.protobuf.Int32Value page_size = 2;
  google.protobuf.Int32Value page_number = 3;
  repeated TreatmentEffectFilter filters = 4;
  repeated Order orders = 5;
  repeated string metric_names = 6;
}

message ListTreatmentEffectsResponse {
  repeated TreatmentEffectDetails treatment_effect_details = 1;
  int32 page_size = 2;
  int32 page_number = 3;
  int32 total_pages = 4;
  int32 total_items = 5;
}

message GetTreatmentEffectSummaryRequest {
  string metric_name = 1; // plan to deprecate and use metric_names
  repeated TreatmentEffectFilter filters = 2;
  repeated string metric_names = 3;
}

message GetTreatmentEffectSummaryResponse {
  int32 total_experiments_count = 1;
  repeated string entity_units = 2;
}

message SampleSizeAnalysis {
  string id = 1;
  string name = 2;
  repeated string metric_pack_ids = 3;
  repeated AnalysisMetricDetails metrics = 4;
  google.protobuf.StringValue exposure_point_event_id = 5;
  google.protobuf.StringValue custom_exposure = 6;
  string bucket_key = 7;
  string description = 8;
  google.protobuf.Timestamp created_at = 9;
  google.protobuf.Timestamp updated_at = 10;
  string created_by = 11;
  string updated_by = 12;
  google.protobuf.Timestamp archived_at = 13;
  repeated string date_ranges = 14;
}

message GetSampleSizeAnalysisRequest {
  string analysis_id = 1;
}

message GetSampleSizeAnalysisResponse {
  SampleSizeAnalysis analysis = 1;
}

message AddSampleSizeAnalysisRequest {
  string name = 1;
  repeated AddAnalysisMetric metrics = 2;
  repeated string metric_pack_ids = 3;
  google.protobuf.StringValue exposure_point_event_id = 4;
  google.protobuf.StringValue custom_exposure = 5;
  string bucket_key = 6;
  string description = 7;
  repeated string date_ranges = 8;
}

message AddSampleSizeAnalysisResponse {
  string id = 1;
}

message UpdateSampleSizeAnalysisRequest {
  string id = 1;
  string name = 2;
  repeated AddAnalysisMetric metrics = 3;
  repeated string metric_pack_ids = 4;
  google.protobuf.StringValue exposure_point_event_id = 5;
  google.protobuf.StringValue custom_exposure = 6;
  string bucket_key = 7;
  string description = 8;
  repeated string date_ranges = 9;
}

message UpdateSampleSizeAnalysisResponse {
  string id = 1;
}

message SampleSizeStats {
  string analysis_id = 1;
  string metric_id = 2;
  google.protobuf.StringValue dimension_id = 3;
  google.protobuf.StringValue dimension_cut = 4;
  repeated string covariate_ids = 5;
  google.protobuf.Int32Value cuped_num_days = 6 [deprecated = true];
  // the start and end date of the data used to compute metric stats
  google.protobuf.Timestamp computation_start_date = 7;
  google.protobuf.Timestamp computation_end_date = 8;
  google.protobuf.Int64Value count_exposure = 9;
  string variance = 10;
  string metric_value = 11;
  int32 count_distinct_dates = 12;
  repeated int32 cuped_lags = 13 [deprecated = true];
  repeated string cuped_windows = 14;
  google.protobuf.StringValue packed_dimensions_id = 15;
  repeated string dimension_ids = 16;
}

message SaveSampleSizeStatsRequest {
  repeated SampleSizeStats stats = 1;
}

message SaveSampleSizeStatsResponse {
  string analysis_id = 1;
}

message SampleSizeSettings {
  string alpha = 1;
  string power = 2;
  string rollout_percentage = 3;
  // the distribution of variants, key is variant name, value is the distribution
  map<string, string> variants_distribution = 4;
  string control_label = 5;
  // an array indicates at which day (after experiment start) that need sample size. e.g. [7, 14, 28] means compute sample size and mde at day 7, 14, 28.
  repeated int32 duration_intervals = 6;
  int32 total_sample_size = 7;
  string mde = 8;
}

message ComputeSampleSizesRequest {
  string analysis_id = 1;
  SampleSizeSettings settings = 2;
}

message SampleSizesResult {
  message MDEResult {
    string variant_name = 1;
    int32 duration = 2;
    string minimum_detectable_effect = 3;
    string sample_size = 4;
    string rel_minimum_detectable_effect = 5;
  }

  google.protobuf.StringValue dimension_cut = 1;
  repeated MDEResult mde_results = 2;
  // the total sample size of each duration (including control variant)
  map<int32, string> total_sample_sizes = 3;
  google.protobuf.Timestamp created_at = 4;
  SampleSizeStats stats = 5;
}

message DimensionSampleSizesResult {
  string dimension_id = 1;
  repeated SampleSizesResult results = 2;
  string dimension_name = 3;
  string packed_dimensions_id = 4;
}

message MetricSampleSizesResult {
  string metric_id = 1;
  SampleSizesResult metric_result = 2;
  repeated DimensionSampleSizesResult dimension_results = 3;
  string metric_name = 4;
}

message ComputeSampleSizesResponse {
  repeated MetricSampleSizesResult results = 1;
}

message GetLatestSampleSizeAnalysisResultsRequest {
  string analysis_id = 1;
}

message GetLatestSampleSizeAnalysisResultsResponse {
  string analysis_id = 1;
  SampleSizeSettings settings = 2;
  repeated MetricSampleSizesResult results = 3;
}

message AnalyzeSampleSizeStatsRequest {
  string analysis_id = 1;
}

message AnalyzeSampleSizeStatsResponse {
  bool is_success = 1;
}

message TriggerEventSourceJobOperationRequest {
  // event source UUID
  string id = 1;
  // the name of the person who triggered the operation
  string created_by = 2;
  // the source_name used to identify the dagster job
  string source_name = 3;
  // the type of operations
  JobOperation job_operation = 4;
  // a json string with configs that are passed to dagster as is
  string job_config = 5;
}

message TriggerEventSourceJobOperationResponse {
  enum DagsterJobRunStatus {
    NOT_FOUND = 0;
    CANCELED = 1;
    CANCELING = 2;
    FAILURE = 3;
    MANAGED = 4;
    NOT_STARTED = 5;
    QUEUED = 6;
    STARTED = 7;
    STARTING = 8;
    SUCCESS = 9;
  }

  // event source UUID
  string id = 1;
  // status of the job
  DagsterJobRunStatus job_status = 2;
  // arbitrary job message that we can pass to the client;
  string job_message = 3;
  // start timestamp of the job execution
  google.protobuf.Timestamp start_time = 4;
  // end timestamp of the job execution
  google.protobuf.Timestamp end_time = 5;
}

// timeseries history results for all variants
message HistoryResults {
  VariationResultDateSeries control_result = 1;
  repeated VariationResultDateSeries treatment_results = 2;
}

// history results for a particular dimension_cut
message DimensionCutHistoryResults {
  string dimension_cut = 1;
  HistoryResults history_results = 2;
}

// history results for all dimension_cut in a dimension
message DimensionHistoryResults {
  repeated DimensionCutHistoryResults results = 1;
}

message GetResultTimeSeriesRequest {
  string analysis_id = 1;
  string metric_id = 2;
  // if dimension_id is provided, then return history results for the dimension. Otherwise, return metric results
  google.protobuf.StringValue dimension_id = 3;
  // MEAN or QUANTILE aggregation
  MetricAggregateFunc aggregate_func = 4;
}

message GetResultTimeSeriesResponse {
  // the history resutls timeseries for: metric analysis or dimension analysis
  oneof results {
    HistoryResults metric_results = 1;
    DimensionHistoryResults dimension_results = 2;
  }
}

enum NotificationType {
  UNKNOWN_NOTIFICATION_TYPE = 0;
  // Experiment Alerts
  // Enables notifications related to flicker failures
  FLICKER = 1;
  // Enables notifications related to imbalance
  IMBALANCE = 2;
  // Enables notifications related to pre-experimental bias
  PRE_EXPERIMENT_BIAS = 3;
  // Enables notifications about concuded experiments
  EXPERIMENT_CONCLUDED = 4;
  // Enables notifications when an experiment is failing to run.
  EXPERIMENT_FAILED_TO_RUN = 5;
  // Enables notification when primary metrics show early stat sig results
  PRIMARY_STAT_SIG = 6;
  // Enables notifications when guardrail metrics show early stat sig results.
  GUARDRAIL_STAT_SIG = 7;

  // Metric Alerts
  // Enables notification when metric shows stats sig results
  STAT_SIG = 8;
}

enum NotificationDestination {
  UNKNOWN_DESTINATION = 0;
  SLACK = 1;
  EMAIL = 2;
}

enum NotificationStatus {
  UNKNOWN_NOTIFICATION_STATUS = 0;
  NOTIFICATION_SUCCESS = 1;
  NOTIFICATION_FAILURE = 2;
}

message NotificationSubscription {
  // subscription UUID
  string subscription_id = 1;
  // generic entity id (e.g., analysis_id, metric_id)
  string entity_id = 2;
  // entity type (analysis or metric)
  EntityType entity_type = 3;
  // email or slack handle
  string receiver_handle = 4;
  // identifier if a destination is email or slack
  NotificationDestination notification_destination = 5;
  // an array of notification alerts
  repeated NotificationType notification_type = 6;
  // who created the subscription
  string created_by = 7;
  // who last updated the subscription
  string updated_by = 8;
  google.protobuf.Timestamp created_at = 9;
  google.protobuf.Timestamp updated_at = 10;
}

// will add one or more subscriptions. Note that if a subcription already exists, it will update it.
message AddNotificationSubscriptionRequest {
  repeated NotificationSubscription notification_subscriptions = 1;
}

// returns the subscription id for all notifications that were added
message AddNotificationSubscriptionResponse {
  repeated string subscription_ids = 1;
}

// return an array of subscriptions. Either an entity or a subscription id should be provided.
// the api performs bulk evaluation, hence it can take in an array of ids.
message GetNotificationSubscriptionRequest {
  // this will request all subscriptions under an entity
  repeated string entity_ids = 1;
  // this will request for specific subscriptions.
  repeated string subscription_ids = 2;
}

message GetNotificationSubscriptionResponse {
  repeated NotificationSubscription notification_subscriptions = 1;
}

// Soft deletes the notification subscriptions
message DeleteNotificationSubscriptionRequest {
  // This will request soft deletion of all the subcription under an entity
  string entity_id = 1;
  // This will trigger the soft deletion of only the specific subscription id.
  string subscription_id = 2;
}

message DeleteNotificationSubscriptionResponse {
  // Ids of subscriptions that were removed
  repeated string subscription_ids = 2;
}

message NotificationText {
  string subscription_id = 1;
  // the text message (slack or email) that was sent to the user.
  string text = 2;
  // the status of the message
  NotificationStatus notification_status = 3;
}

// adds the subscription message that was sent to the backend
message AddNotificationTextRequest {
  repeated NotificationText notifications = 1;
}

message AddNotificationTextResponse {
  repeated string subscription_ids = 1;
}

message LifeCycleMetadata {
  // UUID for the entity for which we created the lifecycle metadata.
  string entity_id = 1;
  // who created the metadata state, can be created manually by user of set automatically (e.g., DV or Curie)
  string created_by = 2;
  // for what entity is this metadata? Can be analysis or experiment.
  EntityType entity_type = 3;
  // what is the lifecycle state (example, RAMPING UP, CONCLUDED)
  string state = 4;
  // winning variant. This is an optional input that would apply to specific tags only (e.g., concluded).
  string winning_variant = 5;
  // when was the metadata created. This will be append only.
  google.protobuf.Timestamp created_at = 6;
  // This is an optional free form description. It can be user driven or we can add context in here for how a tag is set.
  string description = 7;
}

// adds lifecycle metadata to en entity
message AddLifecycleMetadataRequest {
  // create one or more lifecycle tags. Can support bulk creation
  repeated LifeCycleMetadata lifecycle_tags = 1;
}

message AddLifecycleMetadataResponse {
  // returns the entity ids that were created
  repeated string entity_ids = 1;
}

// get one or more lifecycle tags. Can support bulk fetching.
message GetLifecycleMetadataRequest {
  message ToggleFilters {
    // specify if we should return latest tag for an entity. Defaults to true.
    bool show_latest = 1;
  }

  // specifiy a list of entities that should be returned
  repeated string entity_ids = 1;
  ToggleFilters toggles = 2;
}

message GetLifecycleMetadataResponse {
  // Returns one or more lifecycle entities.
  repeated LifeCycleMetadata lifecycle_entities = 1;
}
