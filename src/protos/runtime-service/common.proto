syntax = "proto3";
package doordash.runtime.v1;

import "google/protobuf/wrappers.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.runtime_service";

enum OrderDirection {
  DIRECTION_UNSPECIFIED = 0;
  ASCENDING = 1;
  DESCENDING = 2;
}

enum ExperimentType {
  UNKNOWN_TYPE = 0;
  AB = 1;
  DIFF_IN_DIFF = 2;
  REPEATED = 3;
  INTERLEAVING = 4;
}

enum AnalysisType {
  UNKNOWN_ANALYSIS_TYPE = 0;
  STANDARD = 1;
  CUSTOM = 2;
}

enum AnalysisReportType {
  UNKNOWN_ANALYSIS_REPORT_TYPE = 0;
  ADHOC = 1;
  OFFICIAL = 2;
  ROLLOUT_ANALYSIS = 3;
}

enum ProductType {
  UNKNOWN_PRODUCT_TYPE = 0;
  EXPERIMENT = 1;
  SAMPLE_SIZE = 2;
  DIFF_IN_DIFF_EXP = 3;
}

enum PlatformType {
  UNKNOWN_PLATFORM_TYPE = 0;
  DOORDASH = 1;
  WOLT = 2;
}

enum ManagedBy {
  MANAGED_BY_CURIE = 0;
  MANAGED_BY_DYNAMIC_VALUES = 1;
  MANAGED_BY_WOLT = 2;
}

// Copy of V1 Talleyrand API
enum MetricMoveDirection {
  UNKNOWN_DIRECTION = 0;
  UP = 1;
  DOWN = 2;
  FLAT = 3;
}

enum MetricType {
  UNKNOWN_METRIC_TYPE = 0;
  CONTINUOUS = 1;
  PROPORTIONAL = 2;
  RATIO = 3;
}

enum MetricAggregateFunc {
  UNKNOWN_FUNCTION = 0;
  MEAN = 1;
  QUANTILE = 2;
}

enum MetricLabel {
  SECONDARY = 0;
  PRIMARY = 1;
  GUARDRAIL = 2;
}

enum TestResult {
  UNKNOWN_RESULT = 0;
  PASSED = 1;
  FAILED = 2;
}

enum AnalysisStatus {
  UNKNOWN_ANALYSIS_STATUS = 0;
  IN_PROGRESS_ANALYSIS_STATUS = 1;
  ENDED_ANALYSIS_STATUS = 2;
  NOT_STARTED_ANALYSIS_STATUS = 3;
  ARCHIVED_ANALYSIS_STATUS = 4;
}

enum Operator {
  UNKNOWN_OPERATOR = 0;
  IN = 1;
  NOT_IN = 2;
  ALL = 3;
}

enum FilterType {
  UNKNOWN_FILTER_TYPE = 0;
  ITEMIZED = 1;
  AGGREGATED = 2;
}

enum SourceType {
  UNKNOWN_SOURCE_TYPE = 0;
  CRON = 1;
  ON_DEMAND = 2;
}

message StatsResults {
  string avg_treatment_effect = 1;
  string rel_treatment_effect = 2;
  string p_value = 3;
  string value = 4;
  repeated string confidence_interval = 5;
  string standard_error = 6;
  google.protobuf.Int64Value sample_size = 7;
  repeated string rel_confidence_interval = 8;
  string seq_p_value = 9;
  repeated string seq_confidence_interval = 10;
  repeated string seq_rel_confidence_interval = 11;
  google.protobuf.Int64Value event_size = 12;
  // the aboslute global impact of the change (e.g., if local impact for ASAP is 10s, the global impact could be 2s)
  string absolute_global_lift = 13;
  // the relative global impact of the change (e.g., if local impact for ASAP is 1%, the global impact could be 0.2%)
  string relative_global_lift = 14;
  // Percent of metric event that is covered by the experiment (e.g., 55% for gov metic, would mean that this experiment affects 55% of revenue)
  string coverage = 15;
}

message ControlStatsResults {
  string value = 1;
  google.protobuf.Int64Value sample_size = 2;
  google.protobuf.Int64Value event_size = 3;
}

message Paging {
  int32 page_number = 1;
  int32 page_size = 2;
  int32 total_items = 3;
  int32 total_pages = 4;
}

message ItemizedFilterValue {
  string value = 1;
  MetricLabel metric_label = 2;
  ToleranceThreshold tolerance_threshold = 3;
}

message ItemizedFilterValues {
  repeated ItemizedFilterValue values = 1;
}

message AggregatedFilterValues {
  repeated string values = 1;
  MetricLabel metric_label = 2;
}

message FilterStrategy {
  FilterType type = 1;
  // Only of the included entity within this "oneof" block can be set for a single filter strategy.
  oneof strategy {
    ItemizedFilterValues itemized_values = 2;
    AggregatedFilterValues aggregated_values = 3;
  }
}

message Filter {
  Operator operator = 1;
  repeated string values = 2; /* deprecated in future */
  FilterType type = 3; /* deprecated in future */
  string alias = 4;
  FilterStrategy filter_strategy = 5;
}

// PackedDimensions
message PackedDimensions {
  string id = 1;
  string name = 2;
  string description = 3;
  repeated Dimension dimensions = 4;
}

message Dimension {
  reserved 7;
  reserved "apply_to_global_denominator";
  string id = 1;
  string name = 2;
  string entity_unit = 3;
  string source_id = 4;
  string source_name = 5;
  repeated Filter filters = 6;
  bool use_global_denominator = 8;
}

message MetricDimensions {
  reserved 3;
  reserved "dimension_filters";
  string metric_id = 1;
  repeated Dimension dimensions = 2; // TODO: deprecate once packed_dimensions is used
  repeated PackedDimensions packed_dimensions = 4;
}

enum TreatmentEffectFilterField {
  FILTER_FIELD_UNSPECIFIED = 0;
  FILTER_FIELD_START_DATE = 1;
  FILTER_FIELD_END_DATE = 2;
  FILTER_FIELD_ENTITY_UNIT = 3;
  FILTER_FIELD_P_VALUE = 4;
  FILTER_FIELD_AVG_TREATMENT_EFFECT = 5;
  FILTER_FIELD_LIFECYCLE_STATUS = 6;
  FILTER_FIELD_REPORT_TYPE = 7;
  FILTER_FIELD_MANAGED_BY = 8;
}

enum TreatmentEffectOperator {
  OPERATOR_UNSPECIFIED = 0;
  EQUAL = 1;
  NOT_EQUAL = 2;
  LESS_THAN = 3;
  LESS_THAN_EQUAL = 4;
  GREATER_THAN = 5;
  GREATER_THAN_EQUAL = 6;
  IN_LIST = 7;
}

message TreatmentEffectFilter {
  TreatmentEffectFilterField field = 1;
  TreatmentEffectOperator operator = 2;
  string value = 3;
}

enum JobOperation {
  UNKNOWN_OPERATION = 0;
  LIST = 1;
  START = 2;
  CANCEL = 3;
}

enum EntityType {
  UNKNOWN_ENTITY_TYPE = 0;
  ANALYSIS = 1;
  METRIC = 2;
  CURIE_EXPERIMENT = 3;
  DIMENSION = 4;
  PACKED_DIMENSIONS = 5;
  PRE_EXPERIMENT_BIAS_ENTITY_TYPE = 6;
}

// Copy of V2 Talleyrand API
message ToleranceThreshold {
  enum ToleranceType {
    TOLERANCE_TYPE_UNSPECIFIED = 0;
    TOLERANCE_TYPE_ABSOLUTE = 1;
    TOLERANCE_TYPE_RELATIVE = 2;
  }

  ToleranceType type = 1;
  string tolerance = 2;
}

// Copy of V2 Talleyrand API
enum MetricDirectionality {
  METRIC_DIRECTIONALITY_UNKNOWN = 0;
  METRIC_DIRECTIONALITY_INCREASE = 1;
  METRIC_DIRECTIONALITY_DECREASE = 2;
  METRIC_DIRECTIONALITY_NO_CHANGE = 3;
}

enum JobSkipReason {
  CONFIGURATION_NO_CHANGE = 0;
  EVENT_DATA_MISSING = 1;
  EVENT_DATA_NOT_UPDATED = 2;
  DUPLICATE_JOB = 3;
  UNKNOWN = 4;
  NO_SKIP = 5;
}

// Window metric config
enum WindowMetricNonFullyBakedCohortOption {
  // Default unknown value, used when the state is not explicitly set.
  WINDOW_METRIC_NON_FULLY_BAKED_COHORT_OPTION_UNSPECIFIED = 0;

  // Include cohorts that are not fully baked in the metric calculations.
  WINDOW_METRIC_NON_FULLY_BAKED_COHORT_OPTION_INCLUDE = 1;

  // Exclude cohorts that are not fully baked from the metric calculations.
  WINDOW_METRIC_NON_FULLY_BAKED_COHORT_OPTION_EXCLUDE = 2;

  // Strictly exclude non-fully baked cohorts, ensuring they are never considered.
  WINDOW_METRIC_NON_FULLY_BAKED_COHORT_OPTION_HARD_EXCLUDE = 3;
}
