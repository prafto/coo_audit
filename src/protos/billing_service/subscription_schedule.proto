syntax = "proto3";

package doordash.billing_service.v1;

import "billing_service/common.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.billing_service.v1";

// Subscription schedule to control changes in subscription over time
message SubscriptionSchedule {
  // Id of schedule
  google.protobuf.StringValue id = 1;

  // Id of subscription currently managed by schedule
  google.protobuf.StringValue subscription_id = 2;

  // Id of payer that schedule is applied to
  google.protobuf.StringValue payer_id = 3;

  // Start date of schedule or null if start now
  google.protobuf.Timestamp start_date = 4;

  // Start date of current phase
  google.protobuf.Timestamp current_phase_start_date = 5;

  // End date of current phase
  google.protobuf.Timestamp current_phase_end_date = 6;

  // Timestamp of when the schedule was created
  google.protobuf.Timestamp created_at = 7;

  // Timestamp of when the schedule was updated
  google.protobuf.Timestamp updated_at = 8;

  // Phases of the schedule, ordered by end_date
  repeated SubscriptionSchedulePhase phases = 9;

  // Timestamp of when the schedule was canceled
  google.protobuf.Timestamp canceled_at = 10;

  // Timestamp of when the schedule was completed
  google.protobuf.Timestamp completed_at = 11;

  // status
  SubscriptionScheduleStatusType status = 12;

  // current phase index in list
  google.protobuf.Int32Value current_phase_index = 13;
}

// Phase of subscription schedule, determines what changes and for how long
message SubscriptionSchedulePhase {
  // End date of the phase
  google.protobuf.Timestamp end_date = 1;

  // phase type (trial period, billing period, etc.)
  SubscriptionSchedulePhaseType phase_type = 2;

  // if phase type is billed, the plan to apply to subscription
  google.protobuf.StringValue subscription_plan_id = 3;

  // if phase type is billed, the amount to charge
  google.protobuf.Int32Value plan_fee = 4;
}

// subscription schedule status type
enum SubscriptionScheduleStatusType {
  // unspecified
  SUBSCRIPTION_SCHEDULE_STATUS_TYPE_UNSPECIFIED = 0;

  // schedule attached to subscription, without start date
  SUBSCRIPTION_SCHEDULE_STATUS_TYPE_NOT_STARTED = 1;

  // schedule attached to subscription and has active phase
  SUBSCRIPTION_SCHEDULE_STATUS_TYPE_ACTIVE = 2;

  // schedule attached to subscription, has started, and all phases are done
  SUBSCRIPTION_SCHEDULE_STATUS_TYPE_COMPLETED = 3;

  // schedule has been canceled, or subscription has been canceled
  SUBSCRIPTION_SCHEDULE_STATUS_TYPE_CANCELED = 4;
  // schedule could not be created properly
  SUBSCRIPTION_SCHEDULE_STATUS_TYPE_VOIDED = 5;
}

// Phase type
enum SubscriptionSchedulePhaseType {
  // unspecified
  SUBSCRIPTION_SCHEDULE_PHASE_TYPE_UNSPECIFIED = 0;

  // billed phase -- entire phase should be charged plan_fee value
  SUBSCRIPTION_SCHEDULE_PHASE_TYPE_BILLED = 1;

  // full trial -- entire phase should be considered a free trial
  SUBSCRIPTION_SCHEDULE_PHASE_TYPE_FULL_TRIAL = 2;
}
