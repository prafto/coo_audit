syntax = "proto3";

// buf:lint:ignore PACKAGE_VERSION_SUFFIX
// buf:lint:ignore DIRECTORY_SAME_PACKAGE
package autonomous_partner_api.partner_endpoints_common;

import "autonomous_partner_api/common.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.autonomous_partner_api.partner_endpoints_common";

// Get Quote reasons for rejection
enum RejectionReason {
  // Unknown reason
  REJECTION_REASON_UNSPECIFIED = 0;

  // Category: Hours
  // Weather
  REJECTION_REASON_HOURS_WEATHER = 1;
  // Outside operation hours
  REJECTION_REASON_HOURS_OUTSIDE_OPERATING_HOURS = 2;
  // Operations pause
  REJECTION_REASON_HOURS_OPERATIONS_PAUSE = 3;

  // Category: Cart
  // Cart items incompatible
  REJECTION_REASON_CART_ITEMS_INCOMPATIBLE = 4;
  // Cart weight incompatible
  REJECTION_REASON_CART_WEIGHT_INCOMPATIBLE = 5;
  // Cart volume incompatible
  REJECTION_REASON_CART_VOLUME_INCOMPATIBLE = 6;
  // Cart ineligible
  REJECTION_REASON_CART_INELIGIBLE = 7;

  // Category: Availability
  // Vehicle unavailable
  REJECTION_REASON_AVAILABILITY_VEHICLE_UNAVAILABLE = 8;
  // Operator unavailable
  REJECTION_REASON_AVAILABILITY_OPERATOR_UNAVAILABLE = 9;
  // Cannot meet pickup time
  REJECTION_REASON_AVAILABILITY_CANNOT_MEET_PICKUP_TIME = 10;
  // Cannot meet dropoff time
  REJECTION_REASON_AVAILABILITY_CANNOT_MEET_DROPOFF_TIME = 11;

  // Category: Routing
  // Unable route to pickup
  REJECTION_REASON_ROUTING_UNABLE_TO_ROUTE_TO_PICKUP = 12;
  // Unable route to dropoff
  REJECTION_REASON_ROUTING_UNABLE_TO_ROUTE_TO_DROPOFF = 13;
  // Distance not supported
  REJECTION_REASON_ROUTING_DISTANCE_NOT_SUPPORTED = 14;
  // Routing ineligible address
  REJECTION_REASON_ROUTING_INELIGIBLE_ADDRESS = 15;

  // Category: Technical Failure
  // Hardware issue
  REJECTION_REASON_TECHNICAL_HARDWARE_ISSUE = 16;
  // Software issue
  REJECTION_REASON_TECHNICAL_SOFTWARE_ISSUE = 17;
  // Integration issue
  REJECTION_REASON_TECHNICAL_INTEGRATION_ISSUE = 18;

  // Category: Merchant
  // Loading failure
  REJECTION_REASON_MERCHANT_DISALLOWED = 19;

  // Category: Consumer
  // Consumer dropoff failure
  REJECTION_REASON_CONSUMER_USER_CONSENT_FAILED = 20;

  // Other
  REJECTION_REASON_OTHER = 21;
}

// Cart object
// An object is a specific food item such as a burger or ketchup. One robot might carry multiple objects in it. When all objects of an order donâ€™t fit in one robot, providers can assign multiple robots to that order and have each robot carry some of the objects in that order. We want the partner to have the packing logic on their side. So given the list of objects we send them with weight and volume, if there are any restrictions on their robots carrying capabilities (could be different hardware types), they need to validate it on their end.
// Right now most endpoints support one robot for an order. Endpoints are designed for multiple robots per order to simplify future transition to multiple robots per order.
message Object {
  // Object/Option Id
  string id = 1;
  // Weight of the object in grams
  double weight_grams = 2;
  // Volume of the object in centimeters
  Volume volume = 3;
  // Quantity of object
  int64 quantity = 4;
}

// Volume
message Volume {
  // Height in centimeters
  int64 height_cm = 1;
  // Width in centimeters
  int64 width_cm = 2;
  // Length in centimeters
  int64 length_cm = 3;
}

// User Consent Info for Drone orders
message UserConsentInfo {
  // Consumer ID
  string consumer_id = 1;
  // User consent version
  string version = 2;
  // User consent time
  google.protobuf.Timestamp consent_time = 3;
}

// Air Fleet specific fields

// AirFleet specific fields in the GetQuoteRequest
message AirFleetGetQuoteRequestFields {
  // Operation area id
  string operation_area_id = 1;
  // Delivery address id
  google.protobuf.StringValue delivery_address_id = 2;
}

// Air Fleet specific fields in the AssignRequest
message AirFleetAssignRequestFields {
  // DD delivery uuid
  string delivery_uuid = 1;
  // Operation area id
  string operation_area_id = 2;
}

// CityHopper Specific fields

// CityHopper specific fields in the GetQuoteRequest
message CityHopperGetQuoteRequestFields {
  // Operation area id
  string operation_area_id = 1;
  // DD delivery ID
  google.protobuf.Int64Value delivery_id = 2;
  // Is consumer allowlisted to indicate test orders
  bool is_consumer_allowlisted = 3;
  // Dropoff location source
  DropoffLocationSource dropoff_location_source = 4 [deprecated = true];
  // Explicit robot id to perform the quote on. This is used for ephemeral robots only.
  google.protobuf.StringValue target_robot_id = 5;
  // Dropoff location context
  DropoffLocationContext dropoff_location_context = 6;
}

// CityHopper specific fields in the AssignRequest
message CityHopperAssignRequestFields {
  // Operation area id
  string operation_area_id = 1;
  // DD delivery ID
  int64 delivery_id = 2;
  // Is consumer allowlisted to indicate test orders
  bool is_consumer_allowlisted = 3;
  // Dropoff location source
  DropoffLocationSource dropoff_location_source = 4 [deprecated = true];
  // Explicit robot id to perform the quote on. This is used for ephemeral robots only.
  google.protobuf.StringValue target_robot_id = 5;
  // Dropoff location context
  DropoffLocationContext dropoff_location_context = 6;
}

// Dropoff location context
message DropoffLocationContext {
  // Delivery Address subpremise. No value means no subpremise.
  google.protobuf.StringValue delivery_address_subpremise = 1;
  // Location source
  DropoffLocationSource source = 2;
}

// Dropoff location source
enum DropoffLocationSource {
  // Unspecified
  DROPOFF_LOCATION_SOURCE_UNSPECIFIED = 0;
  // Location was geocoded by DoorDash.
  DROPOFF_LOCATION_SOURCE_GEOCODED = 1;
  // The user manually moved the pin to a specific location on checkout page.
  DROPOFF_LOCATION_SOURCE_USER_PIN_OVERRIDE = 2;
  // Location provided by Provider as dropoff location.
  // This is set when:
  // - ADP is not allowing users to select delivery zones, so ADP uses the first delivery zone passed to us in suggested_dropoff_locations
  // - Provider sends us a dropoff location in the vehicleStatus update to indicate dropoff location has been updated
  DROPOFF_LOCATION_SOURCE_PROVIDER_DELIVERY_ZONE = 3;
  // Location selected by user from eligible Provider dropoff locations.
  // This is set when ADP allows user selection from suggested_dropoff_locations
  DROPOFF_LOCATION_SOURCE_USER_SELECTED_DELIVERY_ZONE = 4;
}

// ETA Buffer Values
message EtaBuffer {
  // ETA buffer type
  enum BufferType {
    // Unspecified buffer type
    BUFFER_TYPE_UNSPECIFIED = 0;
    // Loading buffer type
    BUFFER_TYPE_LOADING = 1;
    // Dropoff buffer type
    BUFFER_TYPE_DROPOFF = 2;
  }
  // ETA buffer type
  BufferType buffer = 1;
  // Buffer duration in seconds
  int64 buffer_duration_sec = 2;
}

// Context about location
message LocationInformation {
  // Location type
  enum LocationType {
    // Unspecified location type
    LOCATION_TYPE_UNSPECIFIED = 0;
    // Parking spot
    LOCATION_TYPE_PARKING_SPOT = 1;
    // Reserved parking spot
    LOCATION_TYPE_RESERVED_PARKING_SPOT = 2;
    // Sidewalk
    LOCATION_TYPE_SIDEWALK = 3;
  }
  // Location source
  enum LocationSource {
    // Unspecified location source
    LOCATION_SOURCE_UNSPECIFIED = 0;
    // Location was provided by Merchant
    LOCATION_SOURCE_MERCHANT = 1;
    // Location was determined by DD team
    LOCATION_SOURCE_INTERNAL = 2;
  }
  // ID of the Location
  string id = 1;
  // Name of the Location
  google.protobuf.StringValue name = 2;
  // Location lat lng
  autonomous_partner_api.common.Location point = 3;
  // Location type
  LocationType type = 4;
  // Location source
  LocationSource source = 5;
}

// Additional context about Merchant
message MerchantMetadata {
  // Loading mode of the merchant
  enum LoadingMode {
    // Unspecified loading mode
    LOADING_MODE_UNSPECIFIED = 0;
    // Merchant loading mode
    LOADING_MODE_MERCHANT = 1;
    // Internal loading mode
    LOADING_MODE_INTERNAL = 2;
  }
  // Merchant loading mode
  LoadingMode loading_mode = 1;
  // Merchant Pickup locations
  repeated LocationInformation pickup_locations = 2;
}

// Information about selected location
message LocationSelection {
  // Optional: ID of the selected location if it matches a provided location
  google.protobuf.StringValue location_id = 1;
  // Lat Lng of the selected location
  autonomous_partner_api.common.Location pickup_location = 2;
}
