syntax = "proto3";

// buf:lint:ignore DIRECTORY_SAME_PACKAGE
package autonomous_partner_api.partner_endpoints.v3;

import "autonomous_partner_api/common.proto";
import "autonomous_partner_api/partner_endpoints_common.proto";
import "doordash.api/annotations.proto";
import "google/api/annotations.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.autonomous_partner_api.partner_endpoints.v3";

// Service to manage ADP Partner API fields
service AutonomousPartnerApiV3Service {
  // =======================================================
  // Outbound Autonomous Platform Partner APIs
  // =======================================================

  // Given location for pickup and dropoff, return delivery fulfillment eligibility, ETA to pickup location, and estimated delivery duration.
  rpc GetQuoteV3(GetQuoteV3Request) returns (GetQuoteV3Response);
  // Given cart details and spec, return whether given cart is valid
  rpc ValidateCartV3(ValidateCartV3Request) returns (ValidateCartV3Response);
  // Given location for pickup and dropoff, return whether the provider is accepting delivery fulfillment assignments.
  rpc AssignV3(AssignV3Request) returns (AssignV3Response);
  // Cancels an AV delivery
  rpc CancelV3(CancelV3Request) returns (CancelV3Response);
  // Initiates a hand-off to/from robot (e.g. open hatch to load food)
  rpc InitiateHandoffV3(InitiateHandoffV3Request) returns (InitiateHandoffV3Response);
  // Completes a hand-off to/from robot (e.g. close hatch after food is loaded)
  rpc CompleteHandoffV3(CompleteHandoffV3Request) returns (CompleteHandoffV3Response);
}

// Given location for pickup and dropoff, return delivery fulfillment eligibility, ETA to pickup location, and estimated delivery duration.
message GetQuoteV3Request {
  // Required: Pick-up location
  autonomous_partner_api.common.Location pickup_location = 1;
  // Required: Drop-off location
  autonomous_partner_api.common.Location dropoff_location = 2;
  // Required: Estimated pickup time of the delivery
  google.protobuf.Timestamp estimated_pickup_time = 3;
  // Required: Name of the merchant delivery originates from
  string merchant_name = 4;
  // Required: Unique identifier for merchant
  string merchant_id = 5;
  // Required: A postal address for pickup location
  string pickup_address = 6;
  // Required: A postal address for dropoff location
  string dropoff_address = 7;
  // Optional: Latest allowed pickup time of the delivery from Merchant
  google.protobuf.Timestamp latest_allowed_pickup_time = 8;
  // Optional: Latest allowed drop off time of the delivery from Merchant
  google.protobuf.Timestamp latest_allowed_dropoff_time = 9;
  // Optional: If the order pickup location differs from the vehicle pickup location, this field will be populated
  google.protobuf.StringValue partner_vehicle_pickup_id = 10;
  // Optional: ETA Buffers
  repeated autonomous_partner_api.partner_endpoints_common.EtaBuffer eta_buffers = 13;
  // Optional: Merchant Metadata
  autonomous_partner_api.partner_endpoints_common.MerchantMetadata merchant_metadata = 14;
  // Provider specific fields
  oneof additional_context {
    // CityHopper specific fields
    autonomous_partner_api.partner_endpoints_common.CityHopperGetQuoteRequestFields city_hopper_fields = 11;
    // AirFleet specific fields
    autonomous_partner_api.partner_endpoints_common.AirFleetGetQuoteRequestFields air_fleet_fields = 12;
  }
}

// DeliveryGetQuoteResponse describes whether a delivery is fulfillable
message GetQuoteV3Response {
  // Required: Whether the delivery is fulfillable by a robot in the fleet
  // In the future, there may be additional fields to handle partially
  // fulfillable deliveries
  bool is_fulfillable = 1;
  // Estimated time of pickup in ISO-8601 format:
  // Required if is_fulfillable is true
  // Null if is_fulfillable is false
  google.protobuf.Timestamp estimated_merchant_pickup_time = 2;
  // Estimated time left in seconds from estimated_merchant_pickup_time time to dropoff.
  // Required if is_fulfillable is true
  // Null if is_fulfillable is false
  google.protobuf.Int32Value eta_to_dropoff = 3;
  // List of possible locations that are better suited for drop off
  repeated autonomous_partner_api.common.Location suggested_dropoff_locations = 4;
  // Categorized list of reasons for quote rejection.
  repeated autonomous_partner_api.partner_endpoints_common.RejectionReason quote_rejection_reasons = 5;
  // Optional: Applied ETA Buffers
  repeated autonomous_partner_api.partner_endpoints_common.EtaBuffer applied_eta_buffers = 6;
}

// Given cart details and spec, return whether given cart is valid
message ValidateCartV3Request {
  // Required: Objects in an order. E.g. burger, or drink would be an object
  repeated autonomous_partner_api.partner_endpoints_common.Object cart_object_details = 1;
  // Optional: If the order pickup location differs from the vehicle pickup location, this field will be populated
  google.protobuf.StringValue partner_vehicle_pickup_id = 2;
}

// DeliveryValidateCartResponse describes if a cart is valid for delivery
message ValidateCartV3Response {
  // Required: Whether given cart spec is valid
  bool is_valid = 1;
  // Number of vehicles required to fulfill the order
  // required if is_valid is true
  // null if is_valid is false
  google.protobuf.Int32Value number_of_vehicles = 2;
}

// Given location for pickup and dropoff, return whether the provider is accepting delivery fulfillment assignments.
message AssignV3Request {
  // Required: The delivery ID vended from fulfillment platform
  string external_delivery_id = 1;
  // Optional: The id shown on receipts. Use to identify an order along with customer name
  string display_reference_text = 2;
  // Required: Name of the merchant
  string merchant_name = 3;
  // Required: Unique identifier for merchant
  string merchant_id = 4;
  // Required: Pick-up location coordinate
  autonomous_partner_api.common.Location pickup_location = 5;
  // Required: Drop-off location coordinate
  autonomous_partner_api.common.Location dropoff_location = 6;
  // Required: Estimated pickup time of the delivery
  google.protobuf.Timestamp pickup_time = 7;
  // Required: A postal address for pickup location
  string pickup_address = 8;
  // Required: A postal address for dropoff location
  string dropoff_address = 9;
  // Optional: Delivery instruction from consumer
  google.protobuf.StringValue delivery_instruction = 10;
  // Required: Objects in an order. E.g. burger, or drink would be an object
  repeated autonomous_partner_api.partner_endpoints_common.Object cart_object_details = 11;
  // Optional: Latest allowed pick up time
  google.protobuf.Timestamp latest_allowed_pickup_time = 12;
  // Optional: Latest allowed dropoff time
  google.protobuf.Timestamp latest_allowed_dropoff_time = 13;
  // Optional: If the order pickup location differs from the vehicle pickup location, this field will be populated
  google.protobuf.StringValue partner_vehicle_pickup_id = 14;
  // Optional: Information about user consent to terms of service (Only available for Drones)
  autonomous_partner_api.partner_endpoints_common.UserConsentInfo user_consent_info = 15;
  // Optional: ETA Buffers
  repeated autonomous_partner_api.partner_endpoints_common.EtaBuffer eta_buffers = 19;
  // Optional: Merchant Metadata
  autonomous_partner_api.partner_endpoints_common.MerchantMetadata merchant_metadata = 20;
  // Provider specific fields
  oneof additional_context {
    // Air fleet specific fields
    autonomous_partner_api.partner_endpoints_common.AirFleetAssignRequestFields air_fleet_fields = 16;
    // CityHopper specific fields
    autonomous_partner_api.partner_endpoints_common.CityHopperAssignRequestFields city_hopper_fields = 18;
  }
  // Optional: First name and first initial of last name of consumer
  google.protobuf.StringValue consumer_name = 17;
}

// Confirms that a robot has been assigned to a delivery
message AssignV3Response {
  // An array of objects that contains specifics about delivery fulfillment details, null if delivery cannot be fulfilled
  // Required and non-empty if assign succeeds
  // Null if assign fails
  message DeliverySpec {
    // Required: The assigned delivery vehicle identifier
    string vehicle_id = 1;
    // Required: Estimated time of pickup
    google.protobuf.Timestamp estimated_merchant_pickup_time = 2;
    // Mapping between objects in a particular vehicle. Optional if only one vehicle is being used
    repeated autonomous_partner_api.partner_endpoints_common.Object order_objects = 3;
    // Required: Estimated duration of delivery from pick-up to drop-off in seconds
    int32 eta_to_dropoff = 4;
  }
  // Contains specifics about delivery fulfillment details
  // Leaving this unset means the delivery could not be assigned
  repeated DeliverySpec delivery_specs = 1;
  // Categorized list of reasons for assignment rejection.
  // Null is_fulfillable is true
  // Required and non-empty if assignment is unsuccessful
  repeated autonomous_partner_api.partner_endpoints_common.RejectionReason assignment_rejection_reasons = 2;
  // Optional: Location of dropoff in degrees, if not the value passed in request
  autonomous_partner_api.common.Location dropoff_location = 3;
  // Optional: Applied ETA Buffers
  repeated autonomous_partner_api.partner_endpoints_common.EtaBuffer applied_eta_buffers = 4;
  // Optional: Selected Merchant Pickup Destination
  autonomous_partner_api.partner_endpoints_common.LocationSelection merchant_pickup_location = 5;
}

// Request for cancelling deliveries
message CancelV3Request {
  // Required: Unique identifier of the delivery
  string external_delivery_id = 1;
}

// Response confirms the cancellation of a delivery
message CancelV3Response {
  // Required: Status message for the cancellation
  string message = 1;
}

// Open the cargo compartment of the vehicle. Only required for Active Handoff enabled partners.
message InitiateHandoffV3Request {
  // Required: Unique identifier of the delivery
  string external_delivery_id = 1;
}

// Confirms the execution of the hand-off
// Set HTTP status code
message InitiateHandoffV3Response {
  // Status message for the hand-off
  string message = 1;
}

// Complete the handoff once the customer has picked up the order from the cargo compartment.
message CompleteHandoffV3Request {
  // Required: Unique identifier of the delivery
  string external_delivery_id = 1;
}

// Confirms handoff complete
// Set HTTP status code
message CompleteHandoffV3Response {
  // Status message for the hand-off
  string message = 1;
}
