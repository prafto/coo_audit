syntax = "proto3";

package analytics_smart_scale_feedback.v1;

import "google/protobuf/timestamp.proto";

// Deprecated: define an enum for what the result of order was
enum FeedbackOrderResultType {
  // don't use
  FEEDBACK_ORDER_RESULT_TYPE_UNSPECIFIED = 0;
  // order was flagged as missing and was confirmed without fixing
  FEEDBACK_ORDER_RESULT_TYPE_MISSING = 1;
  // order was flagged as missing and was fixed before confirming
  FEEDBACK_ORDER_RESULT_TYPE_FIXED = 2;
}

// Deprecated: define an enum for element of the feedback
enum FeedbackElementType {
  // don't use
  FEEDBACK_ELEMENT_TYPE_UNSPECIFIED = 0;
  // mutli-choice option
  FEEDBACK_ELEMENT_TYPE_MULTI_CHOICE = 1;
  // freeform text input
  FEEDBACK_ELEMENT_TYPE_CUSTOM_INPUT = 2;
  // No feedback
  FEEDBACK_ELEMENT_TYPE_NONE = 10;
}

// Schema for smart_scale_order_feedback topic
message SmartScaleOrderFeedbackEvent {
  // UUID of the feedback generated on client side
  string id = 1;

  // delivery uuid of the order
  string delivery_uuid = 2;

  // DEPRECATED: feedback type
  FeedbackOrderResultType order_result = 3;

  // DEPRECATED: test enum type
  FeedbackElementType element_type = 4;

  // feedback key
  string feedback_key = 5;

  // feedback in human readable format
  string feedback = 6;

  // feedback type
  string feedback_type = 7;

  // type of element that feedback was
  string feedback_element_type = 8;

  // Timestamp when feedback was recorded at
  string recorded_at = 20;

  // UUID of the feedback session generated on client side
  string session_id = 9;

  // DEPRECATED: test Timestamp type
  google.protobuf.Timestamp timestamp = 10;
}

// Schema for smart_scale_status_health topic
message SmartScaleStatusHealthEvent {
  // UUID of the status
  string id = 1;

  // firmware version of the scale
  string firmware_version = 2;

  // scale hardware unique id
  string hardware_id = 3;

  // client id - could change if tablet is changed or app is uninstall/reinstalled
  string device_id = 4;

  // scale weight state
  string weight_state = 5;

  // weight measured in grams
  double weight = 6;

  // weight location in X axis (Side to side)
  double weight_location = 7;

  // time measurement from firmware
  int64 firmware_time = 8;

  // weight measured by a load cells
  int64 weight_a = 9;

  // test Timestamp type
  string timestamp = 10;

  // weight measured by b load cells
  int64 weight_b = 11;

  // baseline weight just before an item is placed on or removed from scale
  int64 previous_stable_weight = 12;

  // current weight measured by scale (A+B) - previous_stable_weight.  Calculates the change in weight since last event
  int64 delta_weight = 13;

  // stores logged in
  string logged_in_stores = 14;

  // drift baseline value is in grams
  double drift_baseline = 15;

  // baseline weight from the last periodic weight checkpoint (every 15 minutes)
  int64 previous_periodic_stable_weight = 16;

  // whether usb watchdog is enabled or disabled [DEPRECATED]
  string usb_watchdog = 17;

  // wattage comsumed by the hub measured by firmware [DEPRECATED]
  int64 usb_wattage = 18;

  // current comsumed by the hub measured by firmware [DEPRECATED]
  int64 usb_current = 19;

  // device IMEI
  string device_imei = 20;

  // battery percentage
  int64 battery_percentage = 21;

  // device is charging
  string is_charging = 22;

  // device has internet connection
  bool is_connected = 23;

  // device is using wifi
  bool is_wifi = 24;

  // device is using cellular
  bool is_cellular = 25;

  // signal strength
  int32 signal_strength = 26;

  // weight measured by c load cells  (left on early units, right on newer)
  int64 weight_c = 27;

  // weight measured by d load cells  (left on early units, right on newer)
  int64 weight_d = 28;

  // weight location in Y axis (Front to back)
  double weight_location_2 = 29;

  // usb state
  string usb_state = 30;

  // ble rssi
  int32 ble_rssi = 31;

  // connection protocol
  string connection_protocol = 32;

  // secondary connection protocol if applicable
  string secondary_connection_protocol = 33;

  // weight measured using secondary protocol if applicable
  int64 secondary_weight = 34;

  // device serial number
  string device_serial_number = 35;

  // screen brightness
  int32 screen_brightness = 36;

  // current screen
  string screen = 37;

  // secondary protocol state
  string secondary_protocol_state = 38;

  // primary protocol state
  string primary_protocol_state = 39;
}

// Schema for smart_scale_usage_analytics topic
message SmartScaleUsageAnalyticsEvent {
  // UUID of the event
  string id = 1;

  // interaction type - action vs event
  string interaction_type = 2;

  // uniue key for the event/action (e.g. SWIPE_UP, BUTTON_PRESSED)
  string interaction_key = 3;

  // description of the interaction in simple english
  string interaction_description = 4;

  // which screen did the event or action occure in
  string interaction_screen = 5;

  // The key of the element
  string element_key = 6;

  // The delivery uuid of the order if applicable
  string applicable_delivery_uuid = 7;

  // The bucket that order was in if applicable
  string applicable_order_bucket = 8;

  // The store id of the order if applicable
  int64 applicable_store_id = 9;

  // Timestamp of the event
  string timestamp = 10;
}

// Schema for smart_scale_diagnostic topic
message SmartScaleDiagnosticEvent {
  // UUID of the event
  string id = 1;

  // level of the event - info, debug, warning, error
  string level = 2;

  // uniue key for the event
  string key = 3;

  // description of the event in simple english
  string description = 4;

  // which screen did the event or action occure in
  string screen = 5;

  // The delivery uuid of the order if applicable
  string applicable_delivery_uuid = 6;

  // The bucket that order was in if applicable
  string applicable_order_bucket = 7;

  // Timestamp of the event
  string timestamp = 8;
}

// Schema for smart_scale_order_item_feedback topic
message SmartScaleOrderItemFeedbackEvent {
  // UUID of the feedback generated on client side
  string id = 1;

  // UUID of the feedback session generated on client side
  string session_id = 2;

  // feedback version
  string feedback_version = 3;

  // delivery uuid of the order
  string delivery_uuid = 4;

  // reported object name
  string object_name = 5;

  // reported object's merchant product id
  string object_merchant_product_id = 6;

  // reported object's merchant product id type
  string object_merchant_product_id_type = 7;

  // weight of the object in grams
  int32 object_weight_grams = 8;

  // reported object's parent item name
  string parent_name = 9;

  // reported object's parent order item id
  string parent_order_item_id = 10;

  // reported object's merchant product id
  string parent_merchant_product_id = 11;

  // reported object's merchant product id type
  string parent_merchant_product_id_type = 12;

  // comma delimited list of children options of the reported object
  string object_options_name = 13;

  // feedback type
  string feedback_type = 14;

  // Timestamp when feedback was recorded at
  string recorded_at = 15;
}
