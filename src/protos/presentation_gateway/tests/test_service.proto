syntax = "proto3";

package presentation_gateway.tests.v1;

import "common/service_client_config.proto";
import "doordash.api/annotations.proto";
import "google/api/annotations.proto";
import "google/protobuf/wrappers.proto";

option go_package = "github.com/doordash/services-protobuf/generated/presentation_gateway";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.presentation_gateway.tests";

// Demo gRPCs for presentation gateway, expose to UG
service PresentationGatewayTestService {
  option (service_client.client_config).response_attempt_timeout_millis = 5000;
  option (service_client.client_config).retry_config.max_attempts = 2;

  option (doordash.api.service) = {
    name: "presentation-gateway"
    port: 50051
    name_spaces: "presentation-gateway"
    // will update owner session but to pass UG option validation atm
    owner: {
      id: "presentation-gateway"
      name: "presentation-gateway-platform"
      slack_channel: "#presentation-gateway-platform"
      email_alias: "presentation-gateway@doordash.com"
    }
    target_products: [INTERNAL]
  };

  // Simple test pg grpc to greet
  rpc Greet(GreetRequest) returns (GreetResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 5000;
    option (service_client.client_method_config).retry_config.max_attempts = 3;
    option (google.api.http) = {
      post: "/presentation-gateway/v1/test/greet"
      body: '*'
    };
    option (doordash.api.endpoint) = {
      hostname: "presentation-gateway-tests-v1-presentation-gateway-test-service-greet.service.prod.ddsd"
      port: 50051
      tier: T3
      lifecycle: TEST
      authorization: [DD_USER]
      target_products: [INTERNAL]
    };
  }

  // for sample test purpose only
  rpc Greet2(GreetRequest) returns (GreetResponse) {
    option (google.api.http) = {
      post: "/presentation-gateway/v1/test/greet2"
      body: '*'
    };
    option (doordash.api.endpoint) = {
      hostname: "presentation-gateway-tests-v1-presentation-gateway-test-service-greet2.service.prod.ddsd"
      port: 50051
      tier: T3
      lifecycle: TEST
      authorization: [DD_USER]
      target_products: [INTERNAL]
    };
  }

  // for sample test purpose only
  rpc Greet3(GreetRequest) returns (GreetResponse) {
    option (google.api.http) = {
      post: "/presentation-gateway/v1/test/greet3"
      body: '*'
    };
    option (doordash.api.endpoint) = {
      hostname: "presentation-gateway-tests-v1-presentation-gateway-test-service-greet3.service.prod.ddsd"
      port: 50051
      tier: T3
      lifecycle: TEST
      authorization: [DD_USER]
      target_products: [INTERNAL]
    };
  }

  // for sample test purpose only
  rpc Greet4(GreetRequest) returns (GreetResponse) {
    option (google.api.http) = {
      post: "/presentation-gateway/v1/test/greet4"
      body: '*'
    };
    option (doordash.api.endpoint) = {
      hostname: "presentation-gateway-tests-v1-presentation-gateway-test-service-greet4.service.prod.ddsd"
      port: 50051
      tier: T3
      lifecycle: TEST
      authorization: [DD_USER]
      target_products: [INTERNAL]
    };
  }

  // for sample test purpose only
  rpc Greet5(GreetRequest) returns (GreetResponse) {
    option (google.api.http) = {
      post: "/presentation-gateway/v1/test/greet5"
      body: '*'
    };
    option (doordash.api.endpoint) = {
      hostname: "presentation-gateway-tests-v1-presentation-gateway-test-service-greet5.service.prod.ddsd"
      port: 50051
      tier: T3
      lifecycle: TEST
      authorization: [DD_USER]
      target_products: [INTERNAL]
    };
  }

  // for sample test purpose only
  rpc Greet6(GreetRequest) returns (GreetResponse) {
    option (google.api.http) = {
      post: "/presentation-gateway/v1/test/greet6"
      body: '*'
    };
    option (doordash.api.endpoint) = {
      hostname: "presentation-gateway-tests-v1-presentation-gateway-test-service-greet6.service.prod.ddsd"
      port: 50051
      tier: T3
      lifecycle: TEST
      authorization: [DD_USER]
      target_products: [INTERNAL]
    };
  }

  // for sample test purpose only
  rpc Greet7(GreetRequest) returns (GreetResponse) {
    option (google.api.http) = {
      post: "/presentation-gateway/v1/test/greet7"
      body: '*'
    };
    option (doordash.api.endpoint) = {
      hostname: "presentation-gateway-tests-v1-presentation-gateway-test-service-greet7.service.prod.ddsd"
      port: 50051
      tier: T3
      lifecycle: TEST
      authorization: [DD_USER]
      target_products: [INTERNAL]
    };
  }

  // for sample test purpose only
  rpc Greet8(GreetRequest) returns (GreetResponse) {
    option (google.api.http) = {
      post: "/presentation-gateway/v1/test/greet8"
      body: '*'
    };
    option (doordash.api.endpoint) = {
      hostname: "presentation-gateway-tests-v1-presentation-gateway-test-service-greet8.service.prod.ddsd"
      port: 50051
      tier: T3
      lifecycle: TEST
      authorization: [DD_USER]
      target_products: [INTERNAL]
    };
  }

  // for sample test purpose only
  rpc Greet9(GreetRequest) returns (GreetResponse) {
    option (google.api.http) = {
      post: "/presentation-gateway/v1/test/greet9"
      body: '*'
    };
    option (doordash.api.endpoint) = {
      hostname: "presentation-gateway-tests-v1-presentation-gateway-test-service-greet9.service.prod.ddsd"
      port: 50051
      tier: T3
      lifecycle: TEST
      authorization: [DD_USER]
      target_products: [INTERNAL]
    };
  }

  // for sample test purpose only
  rpc Greet10(GreetRequest) returns (GreetResponse) {
    option (google.api.http) = {
      post: "/presentation-gateway/v1/test/greet10"
      body: '*'
    };
    option (doordash.api.endpoint) = {
      hostname: "presentation-gateway-tests-v1-presentation-gateway-test-service-greet10.service.prod.ddsd"
      port: 50051
      tier: T3
      lifecycle: TEST
      authorization: [DD_USER]
      target_products: [INTERNAL]
    };
  }

  // for sample test purpose only
  rpc Greet11(GreetRequest) returns (GreetResponse) {
    option (google.api.http) = {
      post: "/presentation-gateway/v1/test/greet11"
      body: '*'
    };
    option (doordash.api.endpoint) = {
      hostname: "presentation-gateway-tests-v1-presentation-gateway-test-service-greet11.service.prod.ddsd"
      port: 50051
      tier: T3
      lifecycle: TEST
      authorization: [DD_USER]
      target_products: [INTERNAL]
    };
  }

  // for sample test purpose only
  rpc Greet12(GreetRequest) returns (GreetResponse) {
    option (google.api.http) = {
      post: "/presentation-gateway/v1/test/greet12"
      body: '*'
    };
    option (doordash.api.endpoint) = {
      hostname: "presentation-gateway-tests-v1-presentation-gateway-test-service-greet12.service.prod.ddsd"
      port: 50051
      tier: T3
      lifecycle: TEST
      authorization: [DD_USER]
      target_products: [INTERNAL]
    };
  }

  // for sample test purpose only
  rpc Greet13(GreetRequest) returns (GreetResponse) {
    option (google.api.http) = {
      post: "/presentation-gateway/v1/test/greet13"
      body: '*'
    };
    option (doordash.api.endpoint) = {
      hostname: "presentation-gateway-tests-v1-presentation-gateway-test-service-greet13.service.prod.ddsd"
      port: 50051
      tier: T3
      lifecycle: TEST
      authorization: [DD_USER]
      target_products: [INTERNAL]
    };
  }

  // for sample test purpose only
  rpc Greet14(GreetRequest) returns (GreetResponse) {
    option (google.api.http) = {
      post: "/presentation-gateway/v1/test/greet14"
      body: '*'
    };
    option (doordash.api.endpoint) = {
      hostname: "presentation-gateway-tests-v1-presentation-gateway-test-service-greet14.service.prod.ddsd"
      port: 50051
      tier: T3
      lifecycle: TEST
      authorization: [DD_USER]
      target_products: [INTERNAL]
    };
  }

  // for sample test purpose only
  rpc Greet15(GreetRequest) returns (GreetResponse) {
    option (google.api.http) = {
      post: "/presentation-gateway/v1/test/greet15"
      body: '*'
    };
    option (doordash.api.endpoint) = {
      hostname: "presentation-gateway-tests-v1-presentation-gateway-test-service-greet15.service.prod.ddsd"
      port: 50051
      tier: T3
      lifecycle: TEST
      authorization: [DD_USER]
      target_products: [INTERNAL]
    };
  }

  // for sample test purpose only
  rpc Greet16(GreetRequest) returns (GreetResponse) {
    option (google.api.http) = {
      post: "/presentation-gateway/v1/test/greet16"
      body: '*'
    };
    option (doordash.api.endpoint) = {
      hostname: "presentation-gateway-tests-v1-presentation-gateway-test-service-greet16.service.prod.ddsd"
      port: 50051
      tier: T3
      lifecycle: TEST
      authorization: [DD_USER]
      target_products: [INTERNAL]
    };
  }

  // for sample test purpose only
  rpc Greet17(GreetRequest) returns (GreetResponse) {
    option (google.api.http) = {
      post: "/presentation-gateway/v1/test/greet17"
      body: '*'
    };
    option (doordash.api.endpoint) = {
      hostname: "presentation-gateway-tests-v1-presentation-gateway-test-service-greet17.service.prod.ddsd"
      port: 50051
      tier: T3
      lifecycle: TEST
      authorization: [DD_USER]
      target_products: [INTERNAL]
    };
  }

  // for sample test purpose only
  rpc Greet18(GreetRequest) returns (GreetResponse) {
    option (google.api.http) = {
      post: "/presentation-gateway/v1/test/greet18"
      body: '*'
    };
    option (doordash.api.endpoint) = {
      hostname: "presentation-gateway-tests-v1-presentation-gateway-test-service-greet18.service.prod.ddsd"
      port: 50051
      tier: T3
      lifecycle: TEST
      authorization: [DD_USER]
      target_products: [INTERNAL]
    };
  }

  // for sample test purpose only
  rpc Greet19(GreetRequest) returns (GreetResponse) {
    option (google.api.http) = {
      post: "/presentation-gateway/v1/test/greet19"
      body: '*'
    };
    option (doordash.api.endpoint) = {
      hostname: "presentation-gateway-tests-v1-presentation-gateway-test-service-greet19.service.prod.ddsd"
      port: 50051
      tier: T3
      lifecycle: TEST
      authorization: [DD_USER]
      target_products: [INTERNAL]
    };
  }

  // for sample test purpose only
  rpc Greet20(GreetRequest) returns (GreetResponse) {
    option (google.api.http) = {
      post: "/presentation-gateway/v1/test/greet20"
      body: '*'
    };
    option (doordash.api.endpoint) = {
      hostname: "presentation-gateway-tests-v1-presentation-gateway-test-service-greet20.service.prod.ddsd"
      port: 50051
      tier: T3
      lifecycle: TEST
      authorization: [DD_USER]
      target_products: [INTERNAL]
    };
  }

  // Sample request to ask for consumer detail for DD user and guest user
  rpc ParallelFanOutSameDependency(ParallelFanOutSameDependencyRequest) returns (ParallelFanOutSameDependencyResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 5000;
    option (service_client.client_method_config).retry_config.max_attempts = 3;
    option (google.api.http) = {
      post: "/presentation-gateway/v1/test/parallel-same-dep"
      body: '*'
    };
    option (doordash.api.endpoint) = {
      hostname: "presentation-gateway-tests-v1-presentation-gateway-test-service-parallel-fan-out-same-dependency.service.prod.ddsd"
      port: 50051
      tier: T3
      lifecycle: TEST
      authorization: [DD_USER]
      target_products: [INTERNAL]
    };
  }

  // Sample request with conditional dependencies
  rpc ConditionalFetch(ConditionalFetchRequest) returns (ConditionalFetchResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 5000;
    option (service_client.client_method_config).retry_config.max_attempts = 3;
    option (google.api.http) = {get: "/presentation-gateway/v1/test/conditional-fetch"};
    option (doordash.api.endpoint) = {
      hostname: "presentation-gateway-tests-v1-presentation-gateway-test-service-conditional-fetch.service.prod.ddsd"
      port: 50051
      tier: T3
      lifecycle: TEST
      authorization: [DD_USER]
      target_products: [INTERNAL]
    };
  }

  // Sample request to make calls one by one without batch
  rpc NPlusOneFanout(NPlusOneFanoutRequest) returns (NPlusOneFanoutResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 5000;
    option (service_client.client_method_config).retry_config.max_attempts = 3;
    option (google.api.http) = {get: "/presentation-gateway/v1/test/npo-fetch"};
    option (doordash.api.endpoint) = {
      hostname: "presentation-gateway-tests-v1-presentation-gateway-test-service-n-plus-one-fanout.service.prod.ddsd"
      port: 50051
      tier: T3
      lifecycle: TEST
      authorization: [DD_USER]
      target_products: [INTERNAL]
    };
  }

  // Simple test pg grpc to greet
  rpc GreetUser(GreetUserRequest) returns (GreetUserResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 5000;
    option (service_client.client_method_config).retry_config.max_attempts = 3;
    option (google.api.http) = {
      post: "/presentation-gateway/v1/test/greet-user"
      body: '*'
    };
    option (doordash.api.endpoint) = {
      hostname: "presentation-gateway-tests-v1-presentation-gateway-test-service-greet-user.service.prod.ddsd"
      port: 50051
      tier: T3
      lifecycle: TEST
      authorization: [DD_USER]
      target_products: [INTERNAL]
    };
  }
}

// Request for GreetUser rpc
message GreetUserRequest {
  // user ID
  google.protobuf.StringValue user_id = 1;
  // consumer ID
  google.protobuf.StringValue consumer_id = 2 [(doordash.api.inject_id) = CX_ID];
}

// Response for GreetUser rpc
message GreetUserResponse {
  // greeting message
  string message = 1;
}

// Request for Greet rpc
message GreetRequest {
  // id
  google.protobuf.StringValue id = 1;
}

// Response for Greet rpc
message GreetResponse {
  // response
  google.protobuf.StringValue text = 1;
}

// ParallelSameDependencyRequest
message ParallelFanOutSameDependencyRequest {
  // consumer id
  int64 consumer_id = 1;
  // guest consumer id
  int64 guest_cid = 2;
}

// ParallelSameDependencyResponse
message ParallelFanOutSameDependencyResponse {
  // response
  google.protobuf.StringValue text = 1;
}

// ConditionalFetchRequest
message ConditionalFetchRequest {
  // consumer id
  int64 consumer_id = 1;
  // whether address required
  bool require_address = 2;
}

// ConditionalFetchResponse
message ConditionalFetchResponse {
  // response
  google.protobuf.StringValue text = 1;
}

// NPlusOneFanoutRequest
message NPlusOneFanoutRequest {
  // count
  int32 count = 1;
}

// NPlusOneFanoutRequest
message NPlusOneFanoutResponse {
  // response
  google.protobuf.StringValue text = 1;
}
