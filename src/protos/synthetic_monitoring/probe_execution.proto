syntax = "proto3";
package synthetic_monitoring.v1;


// Each service will use this definition to implement the probe execution logic.
// Probe-manager will call ExecuteProbeV1 and is equivalent to /v1/synthetics
service SyntheticMonitoringProbeExecutionService {

  // Returns probe response after execution
  rpc ExecuteProbeV1 (ExecuteProbeV1Request) returns (ExecuteProbeV1Response);

}

// Status of the probe
enum ProbeStatus {
  // used when probe encounters unexpected error
  PROBE_STATUS_UNSPECIFIED = 0;
  // used when probe execution is success
  PROBE_STATUS_SUCCESS = 1;
  // used when probe execution is failed
  PROBE_STATUS_FAILED = 2;
}

/*
 * Probe request issued by probe-manager to execute a probe
 */
message ExecuteProbeV1Request {
    // UUID for probe execution
    string execution_id = 1;
    // user_id
    string user_id = 2;
    // // optional market_id [Still unknown if user_id is mapped to market_id implicitly]
    string market_id = 3;
}

// Additional details about various steps in probe execution
message Details {
  // optional url of the step in probe execution
  string url = 1;
  // optional status_code
  int64 status_code = 2;
  // optional message about the step in probe execution
  string message = 3;
}

/*
 * Probe response returned to probe-manager
 */
message ExecuteProbeV1Response {
  // overall status of probe execution
  ProbeStatus probe_status = 1;
  // probe execution message for debuggability
  string message = 2;
  // probe execution status code. For e.g, status_code of API resulting in probe failure
  int64 status_code = 3;
  // optional details about each step in the probe
  repeated Details details = 4;
  // optional key-value pairs to enhance the probe response
  map<string, string> labels = 5;
}