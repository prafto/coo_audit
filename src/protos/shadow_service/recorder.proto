syntax = "proto3";

package doordash.shadow_service.v1;

import "google/api/annotations.proto";
import "shadow_service/data.proto";

option go_package = "github.com/doordash/services-protobuf/generated/shadow_service";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.shadowservice";

// Error Code
enum ErrorCode {
  // Unknown error.
  ERROR_CODE_UNSPECIFIED = 0;

  // Success.
  ERROR_CODE_SUCCESS = 1;

  // Service name doesn't exist.
  ERROR_CODE_SERVICE_NAME_NOT_EXIST = 2;

  // Wrong time format.
  ERROR_CODE_WRONG_TIME_FORMAT = 3;

  // End time is before start time.
  ERROR_CODE_END_TIME_BEFORE_START_TIME = 4;

  // Number of requests limit is negative.
  ERROR_CODE_NEGATIVE_NUM_LIMIT = 5;

  // Database error.
  ERROR_CODE_DATABASE_ERROR = 6;
}

// RecorderService endpoints.
service RecorderService {
  // RecordRequest endpoint.
  rpc RecordRequest(RecordRequestRequest) returns (RecordRequestResponse);

  // StartReplay endpoint.
  rpc StartReplay(StartReplayRequest) returns (StartReplayResponse) {
    option (google.api.http) = {
      post: "/v1/start_replay"
      body: "*"
    };
  }

  // FetchRecorderData endpoint
  rpc FetchRecorderData(FetchRecorderDataRequest) returns (FetchRecorderDataResponse);
}

// RecordRequestRequest.
message RecordRequestRequest {
  // Data that needs to be recorded.
  RecorderData data = 1;
}

// RecordRequestResponse.
message RecordRequestResponse {
  // Response string.
  string message = 1;
}

// StartReplayRequest.
message StartReplayRequest {
  // Host to replay to.
  string host = 1;

  // Port to replay to.
  int32 port = 2;

  // Service name.
  string service_name = 3;

  // Protocol for replay.
  Protocol protocol = 4;

  // Duration for which to replay in milliseconds.
  int64 duration_ms = 5;

  // Slack username to report results to.
  string slack_username = 6;

  // Slack channel to report to.
  string slack_channel = 7;
}

// StartReplayResponse.
message StartReplayResponse {
  // Response message.
  string message = 1;
}

// FetchRecorderDataRequest.
message FetchRecorderDataRequest {
  // Service name.
  string service_name = 1;

  // Start time.
  string start_time = 2; // yyyy-MM-dd HH:mm:ss or empty string

  // End time.
  string end_time = 3; // yyyy-MM-dd HH:mm:ss or empty string

  // Number of requests limit.
  int64 num_requests_limit = 4;
}

// FetchRecorderDataResponse.
message FetchRecorderDataResponse {
  // Error message.
  string error = 1;

  // Error code.
  ErrorCode error_code = 2;

  // List of RecorderData
  repeated RecorderData data = 3;
}
