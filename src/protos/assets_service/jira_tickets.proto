syntax = "proto3";

package assets_service.v1;

import "google/protobuf/timestamp.proto";

option go_package = "github.com/doordash/services-protobuf/generated/assets_service";
option java_multiple_files = true;
option java_package = "com.doordash.rpc.assetsservice";

// Customer satisfaction comment and score
message Csat {
  // customer satisfaction score
  int32 score = 10;
  // customer satisfaction comment
  string comment = 20;
}

// status of jira tickets
enum TicketStatus {
  // default unspecified
  TICKET_STATUS_UNSPECIFIED = 0;
  // ticket is open
  TICKET_STATUS_OPEN = 1;
  // ticket was resolved
  TICKET_STATUS_CLOSED_RESOLVED = 2;
  // ticket was closed without resolution
  TICKET_STATUS_CLOSED_UNRESOLVED = 3;
}

// Jira Ticket information
message Ticket {
  // ticket id
  string ticket_id = 10;
  // timestamp of when the ticket was created
  google.protobuf.Timestamp request_timestamp = 20;
  // timestamp of when the ticket was resolved
  google.protobuf.Timestamp resolution_timestamp = 30;
  // ticket status
  TicketStatus ticket_status = 40;
  // customer satisfaction comment and score
  Csat csat = 50;
}

/**
 * Request payload for GetTicketMetrics
 */
message GetTicketMetricsRequest {
  // slack channel id (ex 'C01BQJZLZJG')
  string slack_channel_id = 10;
}

/**
 * Response payload for GetTicketMetrics
 */
message GetTicketMetricsResponse {
  // total number of tickets (open/closed/resolved/etc)
  int32 total_tickets_count = 10;
  // number of open tickets
  int32 open_tickets_count = 20;
  // number of close+unresolved tickets
  int32 closed_unresolved_tickets_count = 30;
  // number of closed+resolved tickets
  int32 closed_resolved_tickets_count = 40;
  // number of closed tickets that were resolved from autoresponder
  int32 auto_resolved_tickets_count = 50;
}

/**
 * Request payload for ListTickets
 */
message ListTicketsRequest {
  // slack channel id (ex 'C01BQJZLZJG')
  string slack_channel_id = 10;
}

/**
 * Response payload for ListTickets
 */
message ListTicketsResponse {
  // tickets for a channel
  repeated Ticket tickets = 10;
}

/**
 * Request payload for ListCsat
 */
message ListCsatRequest {
  // slack channel id (ex 'C01BQJZLZJG')
  string slack_channel_id = 10;
}

/**
 * Response payload for ListCsat
 */
message ListCsatResponse {
  // customer satisfaction comment + score
  repeated Csat csats = 10;
}
