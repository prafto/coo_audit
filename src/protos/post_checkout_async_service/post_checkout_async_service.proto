syntax = "proto3";

package post_checkout_async_service.v1;

option java_multiple_files = true;
option java_generic_services = true;
option java_package = "com.doordash.rpc.postcheckoutasyncservice";

import "common/service_client_config.proto";
import "google/protobuf/any.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "post_checkout_async_service/common.proto";

// This is post checkout async service for using Asgard server library in a Guice environment.
service PostCheckoutAsyncService {
    // Hermes client config. The options not listed here use Hermes default.
    // The following applies for all RPCs in the service, if not overridden on individual RPCs.

    // Timeout after 700 milliseconds.
    option (service_client.client_config).response_attempt_timeout_millis = 700;
    // Make a total 2 attempts (initial + one retry).
    option (service_client.client_config).retry_config.max_attempts = 2;
    // Add RESOURCE_EXHAUSTED to the set of retriable codes.
    option (service_client.client_config).retry_config.do_retry_grpc_code = 8;
    // Break the circuit if the error rate exceeds 80%.
    option (service_client.client_config).circuit_breaker_config.failure_rate_threshold = 0.8;
    // Ignore NOT_FOUND from circuit breaker error rate calculation.
    option (service_client.client_config).circuit_breaker_config.do_ignore_grpc_code = 5;

    // CreateAsyncEvent
    rpc CreateAsyncEvent(CreateAsyncEventRequest) returns (CreateAsyncEventResponse);

    // DeleteAsyncEvent
    rpc DeleteAsyncEvent(DeleteAsyncEventRequest) returns (DeleteAsyncEventResponse);

}


// Request for CreateAsyncEvent
message CreateAsyncEventRequest {
    // A unique ID assigned to each event, where team name must be the prefix.
    // This is the primary key of the underlying database, so can be used for
    // idempotency purpose.
    google.protobuf.StringValue event_id = 1;

    // event domain, namespace must be prefixed with "team_name" of the
    //   provided API key
    google.protobuf.StringValue namespace = 2;

    // Custom data to be sent back to DIP delivery event topic at delayed event trigger time.
    //   Max size 2 Kib.
    google.protobuf.Any context = 3;

    // Determines the max jitter amount to add to the next start or retry time.
    //   This should be between 1.5 min ~ 2.5 min
    google.protobuf.Duration jitter = 4;

    // The earliest time this event will trigger.  Jitter and other service
    //   calculations may be added to this time. NTP clock-drift may add
    //   or subtract from this time by seconds.  Delays of a couple minutes
    //   should be tolerable.
    google.protobuf.Timestamp trigger_time = 5;

    // (required) The deliveryId passed from create async event request
    google.protobuf.Int64Value delivery_id = 6;

    // (required) The use case of delaying the event
    EventUseCase event_use_case = 7;

}

// Response for CreateAsyncEvent
message CreateAsyncEventResponse {
    // A unique ID assigned to each event and specified in the incoming request
    // by the caller.
    google.protobuf.StringValue event_id = 1;

    // The intended trigger time of this event, derived from the trigger_time.
    google.protobuf.Timestamp adjusted_trigger_time = 2;
}

// Request for DeleteAsyncEvent
message DeleteAsyncEventRequest {
    // The same event_id assigned at event creation.
    repeated google.protobuf.StringValue event_id = 1;
}

// Response for DeleteAsyncEvent
message DeleteAsyncEventResponse {
}
