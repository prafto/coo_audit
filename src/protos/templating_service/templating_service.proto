syntax = "proto3";

package templating_service.v1;

import "common/notification.proto";
import "common/service_client_config.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/wrappers.proto";
import "growth/notification_platform/notification_platform_service.proto";
import "templating_service/templating_service_common.proto";
import "templating_service/templating_service_enums.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.templating_service";

/**
   Asgard based service used to manage different notification channel templates
*/
service TemplatingService {
  // Timeout after 700 milliseconds.
  option (service_client.client_config).response_attempt_timeout_millis = 700;
  // Make a total 4 attempts (initial + three retries).
  option (service_client.client_config).retry_config.max_attempts = 4;
  // Add RESOURCE_EXHAUSTED to the set of retriable codes.
  option (service_client.client_config).retry_config.do_retry_grpc_code = 8;
  // Break the circuit if the error rate exceeds 80%.
  option (service_client.client_config).circuit_breaker_config.failure_rate_threshold = 0.8;
  // Ignore NOT_FOUND from circuit breaker error rate calculation.
  option (service_client.client_config).circuit_breaker_config.do_ignore_grpc_code = 5;

  // Create or update existing notification campaign
  rpc UpsertNotificationCampaign(UpsertNotificationCampaignRequest) returns (UpsertNotificationCampaignResponse);

  // Create or add new version of the template
  rpc CreateTemplate(CreateTemplateRequest) returns (CreateTemplateResponse);

  // Get list of paginated campaigns by any specific search term & sorting details
  rpc GetNotificationCampaigns(GetNotificationCampaignsRequest) returns (GetNotificationCampaignsResponse);

  // Get specific notification campaign object
  rpc GetNotificationCampaign(GetNotificationCampaignRequest) returns (GetNotificationCampaignResponse);

  // Get list of paginated templates by any specific search term & sorting details
  rpc GetTemplates(GetTemplatesRequest) returns (GetTemplatesResponse);

  // Get specific template object
  rpc GetTemplate(GetTemplateRequest) returns (GetTemplateResponse);

  // get all or specific versions of the template
  rpc GetTemplateVersions(GetTemplateVersionsRequest) returns (GetTemplateVersionsResponse);

  // Updates the current version of the template for specific locale
  rpc UpdateTemplateLiveVersion(UpdateTemplateLiveVersionRequest) returns (UpdateTemplateLiveVersionResponse);

  // Updates the status of the notification campaign
  rpc UpdateCampaignStatus(UpdateCampaignStatusRequest) returns (UpdateCampaignStatusResponse);

  // Creates a new copy of the template. If version is specified then creates a new copy by that version
  rpc CloneEmailTemplate(CloneEmailTemplateRequest) returns (CloneEmailTemplateResponse);

  // Get list of paginated snippets by any specific search term & sorting details
  rpc GetSnippets(GetSnippetsRequest) returns (GetSnippetsResponse);

  // Get specific snippet object
  rpc GetSnippet(GetSnippetRequest) returns (GetSnippetResponse);

  // Create or update existing snippet
  rpc UpsertSnippet(UpsertSnippetRequest) returns (UpsertSnippetResponse);

  // get template metadata
  rpc GetTemplateMetadata(GetTemplateMetadataRequest) returns (GetTemplateMetadataResponse);

  // send test notification
  rpc SendTestNotification(SendTestNotificationRequest) returns (SendTestNotificationResponse);

  // Create a new template and set metadata
  rpc CreateNotificationTemplate(CreateNotificationTemplateRequest) returns (CreateNotificationTemplateResponse);

  // Get specific template object
  rpc GetNotificationTemplate(GetNotificationTemplateRequest) returns (GetNotificationTemplateResponse);

  // Get list of paginated templates
  rpc ListNotificationTemplates(ListNotificationTemplatesRequest) returns (ListNotificationTemplatesResponse);

  // Update a template
  rpc UpdateNotificationTemplate(UpdateNotificationTemplateRequest) returns (UpdateNotificationTemplateResponse);

  // Clone all locales of an existing template, and connect the cloned template to the campaign
  rpc CloneNotificationTemplate(CloneNotificationTemplateRequest) returns (CloneNotificationTemplateResponse);

  // Creates a mapping between template and categories
  rpc UpsertTemplateCategories(UpsertTemplateCategoriesRequest) returns (UpsertTemplateCategoriesResponse);

  // Create or update existing notification campaign v2
  rpc UpsertNotificationCampaignV2(UpsertNotificationCampaignV2Request) returns (UpsertNotificationCampaignV2Response);

  // Get specific notification campaign object v2
  rpc GetNotificationCampaignV2(GetNotificationCampaignV2Request) returns (GetNotificationCampaignV2Response);

  // List notification campaigns
  rpc ListNotificationCampaignsV2(ListNotificationCampaignsV2Request) returns (ListNotificationCampaignsV2Response);

  // List notification template versions
  rpc ListNotificationTemplateVersions(ListNotificationTemplateVersionsRequest) returns (ListNotificationTemplateVersionsResponse);
}

/**
   Upsert notification campaign request
*/
message UpsertNotificationCampaignRequest {
  // notification campaign object
  NotificationCampaign notification_campaign = 1;
}

/**
   Upsert notification campaign response
*/
message UpsertNotificationCampaignResponse {
  // notification campaign object
  NotificationCampaign notification_campaign = 1;
}

/**
   Create or add new template version request
*/
message CreateTemplateRequest {
  // channelType(Email, Push, Hub, SMS)
  doordash.growth.notification_platform.v1.ChannelType channel = 1;
  // email template
  EmailTemplate email_template = 2;
  // optional campaign id (when passed, BE will assign template to the campaign)
  string campaign_id = 3; // optional
  // control flag to skip setting live version, if not set as true, backend will set the new version as live
  google.protobuf.BoolValue skip_set_live_version = 4;
}

/**
   Create template response
*/
message CreateTemplateResponse {
  // common template object
  Template template = 1;
  // one of email, push, sms or notification hub template
  oneof whole_template {
    // email template object
    EmailTemplate email_template = 2;
  }
}

/**
   Get notification campaigns request
*/
message GetNotificationCampaignsRequest {
  // number of elements required
  int32 page_size = 1;
  // offset of the page
  int32 page_offset = 2;
  // search text
  string search_query = 3;
  // which column to sort
  ColumnSort column_sort = 4;
  // sorting order
  ColumnSortOrder column_sort_order = 5;
}

/**
   Get notification campaigns response
*/
message GetNotificationCampaignsResponse {
  // list of campaigns
  repeated NotificationCampaign campaigns = 1;
  // pagination object
  PaginationData pagination_data = 2;
}

/**
   Get notification campaign request
*/
message GetNotificationCampaignRequest {
  // campaign id
  string campaign_id = 1;
  // optional: ddEventId
  string dd_event_id = 2;
}

/**
   Get notification campaign response
*/
message GetNotificationCampaignResponse {
  // notification campaign object
  NotificationCampaign notification_campaign = 1;
}

/**
   Get templates request
*/
message GetTemplatesRequest {
  // number of elements required
  int32 page_size = 1;
  // offset of the page
  int32 page_offset = 2;
  // search text
  string search_query = 3;
  // which column to sort
  ColumnSort column_sort = 4;
  // sorting order
  ColumnSortOrder column_sort_order = 5;
  // channelType(Email, Push, Hub, SMS)
  doordash.growth.notification_platform.v1.ChannelType channel = 6;
  //  template categories to filter out
  repeated TemplateCategory categories = 9;
}

/**
   Get templates response
*/
message GetTemplatesResponse {
  // list of templates
  repeated Template templates = 1;
  // pagination object
  PaginationData pagination_data = 2;
}

/**
   Get specific template request
*/
message GetTemplateRequest {
  // template id
  string template_id = 1;
  // if UI needs specific version
  int32 version = 2;
  // locale to query for
  Locale locale = 3;
  // channelType(Email, Push, Hub, SMS)
  doordash.growth.notification_platform.v1.ChannelType channel = 4;
}

/**
   Get template response
*/
message GetTemplateResponse {
  // email template
  EmailTemplate email_template = 1;
  // notification campaign id
  string campaign_id = 2;
}

/**
   Get template versions request for specific locale
*/
message GetTemplateVersionsRequest {
  // template id
  string template_id = 1;
  // list of versions to query (if empty then retrieve all)
  repeated int32 version = 2;
  // locale to query for
  Locale locale = 3;
  // channelType(Email, Push, Hub, SMS)
  doordash.growth.notification_platform.v1.ChannelType channel = 4;
}

/**
   Get template versions response
*/
message GetTemplateVersionsResponse {
  // list of template versions
  repeated Template templates = 1;
}

/**
   Update template's live version
*/
message UpdateTemplateLiveVersionRequest {
  // template id
  string template_id = 1;
  // version to activate in prod
  int32 version = 2;
  // locale
  Locale locale = 3;
  // channelType(Email, Push, Hub, SMS)
  doordash.growth.notification_platform.v1.ChannelType channel = 4;
}

/**
   Update template live version response
*/
message UpdateTemplateLiveVersionResponse {}

/**
   Update campaign status request
*/
message UpdateCampaignStatusRequest {
  // campaign id
  string campaign_id = 1;
  // campaign's status
  CampaignStatus status = 2;
}

/**
   Update campaign status response
*/
message UpdateCampaignStatusResponse {}

/**
   Clone email template request
*/
message CloneEmailTemplateRequest {
  // template id
  string template_id = 1;
  // campaign id
  string campaign_id = 2;
  // locale
  Locale locale = 3;
}

/**
   Clone email template response
*/
message CloneEmailTemplateResponse {
  // email template object
  EmailTemplate email_template = 1;
}

/**
   Get list of snippets request
*/
message GetSnippetsRequest {
  // number of elements required
  int32 page_size = 1;
  // offset of the page
  int32 page_offset = 2;
  // search text
  string search_query = 3;
  // which column to sort
  ColumnSort column_sort = 4;
  // sorting order
  ColumnSortOrder column_sort_order = 5;
}

/**
   Get snippets response
*/
message GetSnippetsResponse {
  // list of snippets
  repeated Snippet snippets = 1;
  // pagination object
  PaginationData pagination_data = 2;
}

/**
   Get snippet request
*/
message GetSnippetRequest {
  // snippet id
  string snippet_id = 1;
  // name of the snippet
  string name = 2;
}

/**
   Get snippet response
*/
message GetSnippetResponse {
  // snippet object
  Snippet snippet = 1;
}

/**
   Upsert snippet request
*/
message UpsertSnippetRequest {
  // snippet object
  Snippet snippet = 1;
}

/**
   Upsert snippet response
*/
message UpsertSnippetResponse {
  // snippet object
  Snippet snippet = 1;
}

/**
   Get template metadata request
*/
message GetTemplateMetadataRequest {
  // template id
  string template_id = 1;
  // campaign id
  string campaign_id = 2;
  // channelType(Email, Push, Hub, SMS)
  doordash.growth.notification_platform.v1.ChannelType channel = 3;
}

/**
   Get template metadata response
*/
message GetTemplateMetadataResponse {
  // list of template locale metadata
  repeated TemplateLocaleMetadata local_metadata = 1;
}

/**
   Versions for specific locale
*/
message TemplateLocaleMetadata {
  // locale
  Locale locale = 1;
  // list of versions
  repeated int32 versions = 2;
}

/**
   Send test notification request

   Future params: recipient_emails, recipient_phone_numbers, recipient_user_ids, recipient_device_ids, template_fields
*/
message SendTestNotificationRequest {
  // template id
  string template_id = 1;
  // campaign id
  string campaign_id = 2;
  // locale
  Locale locale = 3;
  // channelType(Email, Push, Hub, SMS)
  doordash.growth.notification_platform.v1.ChannelType channel = 4;
  // version
  int32 version = 5;
  // send to the logged in user
  bool send_to_logged_in_user = 6;
  // data_fields/template_fields to provide value for placeholders used in template
  google.protobuf.Struct template_fields = 7;
}

/**
   Send test notification response
*/
message SendTestNotificationResponse {
  // dd notification id
  string dd_event_id = 1;
}

// Request of create template
message CreateNotificationTemplateRequest {
  // metadata
  TemplateMetadata metadata = 1;
}

// Response of create template
message CreateNotificationTemplateResponse {
  // template id
  google.protobuf.StringValue template_id = 1;
}

// Request of get template
message GetNotificationTemplateRequest {
  // deleted value, do not reuse
  reserved 2;
  // deleted field, do not reuse
  reserved "locale";
  // template id
  google.protobuf.StringValue template_id = 1;
  // locale to query for (in LANG_REGION format, e.g. EN_US)
  // without locale specified, content will not be returned
  // if the locale doesn't exist, error will be returned
  google.protobuf.StringValue locale_string = 3;

  // quality stage to query for
  // if quality stage is set and version is set, then the content of that version is returned if it matches the quality stage, error otherwise
  // if quality stage is set and version is not set, then the latest version of the quality stage will be returned
  // if quality stage is not set and version is set, then the content of that version is returned
  // if quality stage is not set and version is not set, then the latest version will be returned
  NotificationTemplateQualityStage quality_stage = 4;
  // version to query for
  // if version is specified and the content of that version doesn't exist, error will be returned
  google.protobuf.Int32Value version = 5;
}

// Response of get template
message GetNotificationTemplateResponse {
  // template
  NotificationTemplate template = 1;
}

// Request of list templates
message ListNotificationTemplatesRequest {
  // channelType(Email, Push, Hub, SMS)
  doordash.growth.notification_platform.v1.ChannelType channel = 1;
  // whether to include content in the Response
  google.protobuf.BoolValue include_content = 2;
  //  template categories to filter by
  repeated TemplateCategory categories = 3;
}

// Response of list templates
message ListNotificationTemplatesResponse {
  // list of templates
  repeated NotificationTemplate templates = 1;
}

// Request of update template
message UpdateNotificationTemplateRequest {
  // deleted value, do not reuse
  reserved 1;
  // deleted field, do not reuse
  reserved "metadata";

  // contents to update, key is locale
  map<string, Content> contents_to_update = 2;
  // channel specific template config to update
  oneof channel_template_config_to_update {
    // email config to update
    EmailConfig email_config_to_update = 31;
    // push config to update
    PushConfig push_config_to_update = 32;
    // hub config to update
    HubConfig hub_config_to_update = 33;
  }
  // template id
  google.protobuf.StringValue template_id = 4;
  // metadata
  TemplateMetadata metadata_to_update = 5;
  // channel
  doordash.growth.notification_platform.v1.ChannelType channel = 6;
}

// Response of update template
message UpdateNotificationTemplateResponse {
  // deleted value, do not reuse
  reserved 1;
  // deleted field, do not reuse
  reserved "template";

  // template id
  google.protobuf.StringValue template_id = 2;
}

// Request Clone template
message CloneNotificationTemplateRequest {
  // template id
  string template_id = 1;
  // campaign id
  string campaign_id = 2;
}

// Resonse of Clone template
message CloneNotificationTemplateResponse {
  // newly created template
  NotificationTemplate template = 1;
}

// Request object for UpsertTemplateCategories
message UpsertTemplateCategoriesRequest {
  // template id
  google.protobuf.StringValue template_id = 1;
  // List of all new category against the template
  repeated TemplateCategory categories = 2;
}

// Response object for UpsertTemplateCategories
message UpsertTemplateCategoriesResponse {
  // template id
  google.protobuf.StringValue template_id = 1;
  // List of all new category against the template that got upserted successfully
  repeated TemplateCategory categories = 2;
}

// request object for UpsertNotificationCampaignV2
message UpsertNotificationCampaignV2Request {
  // notification campaign object
  NotificationCampaignV2 notification_campaign = 1;
}

// response object for UpsertNotificationCampaignV2
message UpsertNotificationCampaignV2Response {
  // notification campaign object
  NotificationCampaignV2 notification_campaign = 1;
}

// request of Get notification campaign v2
message GetNotificationCampaignV2Request {
  // campaign id
  google.protobuf.StringValue campaign_id = 1;
}

// response of Get notification campaign V2
message GetNotificationCampaignV2Response {
  // notification campaign object
  NotificationCampaignV2 notification_campaign = 1;
}

// request of List notification campaign
message ListNotificationCampaignsV2Request {
  // channel type
  common.notification.v1.NotificationChannelType notification_channel = 1;
}

// response of List notification campaign
message ListNotificationCampaignsV2Response {
  // list of cahuaampaigns
  repeated NotificationCampaignV2 campaign_list = 1;
}

// request object for ListNotificationTemplateVersions
message ListNotificationTemplateVersionsRequest {
  // template id
  google.protobuf.StringValue template_id = 1;
  // locale
  google.protobuf.StringValue locale = 2;
}

// response object for ListNotificationTemplateVersions
message ListNotificationTemplateVersionsResponse {
  // template id
  google.protobuf.StringValue template_id = 1;
  // locale
  google.protobuf.StringValue locale = 2;
  // list of template versions data
  repeated NotificationTemplateContentVersionInfo version_info = 3;
}
