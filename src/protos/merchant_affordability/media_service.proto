syntax = "proto3";
// buf:lint:ignore DIRECTORY_SAME_PACKAGE
// buf:lint:ignore PACKAGE_VERSION_SUFFIX
package merchant_affordability;

import "common/service_client_config.proto";
import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.merchant_affordability";

// Service that exposes APIs to facilitate features related to Mx media (Images, PDF etc)
service MediaService {
  // Endpoint for detecting if the media is of the given content type
  rpc MediaContentDetection(MediaContentDetectionRequest) returns (MediaContentDetectionResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 5000;
    option (service_client.client_method_config).retry_config.max_attempts = 3;
  }

  // Endpoint for detecting if the media is a menu, calculating the item coverage and Dx pay
  rpc ValidateMenuItemCount(ValidateMenuItemCountRequest) returns (ValidateMenuItemCountResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 30000;
    option (service_client.client_method_config).retry_config.max_attempts = 3;
  }

  // Endpoint for fetching media data based on query parameters
  rpc QueryMediaData(QueryMediaDataRequest) returns (QueryMediaDataResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 500;
    option (service_client.client_method_config).retry_config.max_attempts = 3;
  }

  // Endpoint for updating media data
  rpc UpdateMediaMetadata(UpdateMediaMetadataRequest) returns (UpdateMediaMetadataResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 500;
    option (service_client.client_method_config).retry_config.max_attempts = 3;
  }

  // Endpoint for getting mx media permissions
  rpc GetMxMediaPermissions(GetMxMediaPermissionsRequest) returns (GetMxMediaPermissionsResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 500;
    option (service_client.client_method_config).retry_config.max_attempts = 3;
  }

  // endpoint for updating mx media permissions
  rpc UpdateMxMediaPermissions(UpdateMxMediaPermissionsRequest) returns (UpdateMxMediaPermissionsResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 500;
    option (service_client.client_method_config).retry_config.max_attempts = 3;
  }

  // endpoint for uploading approved videos files to Cloudflare
  rpc UploadVideoToCloudflare(UploadVideoToCloudflareRequest) returns (UploadVideoToCloudflareResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 500;
    option (service_client.client_method_config).retry_config.max_attempts = 3;
  }

  // endpoint for transcoding existing videos in S3 and re-uploading to S3
  rpc TranscodeVideoAndUploadToS3(TranscodeVideoAndUploadToS3Request) returns (TranscodeVideoAndUploadToS3Response) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 500;
    option (service_client.client_method_config).retry_config.max_attempts = 3;
  }

  // endpoint for deleting videos in S3
  rpc DeleteVideoInS3(DeleteVideoInS3Request) returns (DeleteVideoInS3Response) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 500;
    option (service_client.client_method_config).retry_config.max_attempts = 3;
  }
}

// DeleteVideoInS3Request
message DeleteVideoInS3Request {
  reserved 1;
  reserved "delete_before_timestamp"; // deprecated delete_before_timestamp
}

// DeleteVideoInS3Response
message DeleteVideoInS3Response {
  // Workflow id
  google.protobuf.StringValue workflow_id = 1;
}

// UploadVideoToCloudflareRequest
message UploadVideoToCloudflareRequest {
  // Query for videos approved after provided timestamp
  google.protobuf.StringValue approved_after_timestamp = 1;

  // Optional list of idempotency keys
  repeated google.protobuf.StringValue idempotency_keys = 2;

  // Whether or not to only do this for edited video links stored in additional_metadata
  google.protobuf.BoolValue upload_for_edited_videos_only = 3;
}

// UploadVideoToCloudflareResponse
message UploadVideoToCloudflareResponse {
  // Workflow id
  google.protobuf.StringValue workflow_id = 1;
}

// ValidateMenuItemCountRequest
message ValidateMenuItemCountRequest {
  // Store Id
  google.protobuf.Int32Value store_id = 1;

  // Delivery UUID
  google.protobuf.StringValue delivery_uuid = 2;

  // Assignment Id
  google.protobuf.StringValue assignment_id = 3;

  // Delivery Id
  google.protobuf.Int64Value delivery_id = 4;

  // Shift Id
  google.protobuf.Int64Value shift_id = 5;

  // Dasher Id
  google.protobuf.Int64Value dasher_id = 6;
}

// ValidateMenuItemCountResponse
message ValidateMenuItemCountResponse {
  // Final status of the API call
  google.protobuf.StringValue status = 1;
}

// MediaContentDetectionRequest
// MIME Types supported - PNG, JPG, JPEG, GIF, HEIC, PDF, DOC, DOCX, XLS, XLSX
message MediaContentDetectionRequest {
  // Media S3 Link: s3://bucket-name/folder-name/object-name
  // Required if not sending the media directly as part of this gRPC request
  google.protobuf.StringValue media_s3_link = 1;

  // Media content in bytes
  // Required if S3 link for the media is not provided in this gRPC request
  google.protobuf.BytesValue media_content = 2;

  // Media Content Type
  MediaContentType media_content_type = 3;

  // Media MIME TYPE
  MediaMimeType media_mime_type = 4;
}

// Media content type enum.
enum MediaContentType {
  // Unspecified Media Content Type
  MEDIA_CONTENT_TYPE_UNSPECIFIED = 0;
  // Menus
  MEDIA_CONTENT_TYPE_MENU = 1;
}

// Media MIME type enum.
enum MediaMimeType {
  // Unspecified Media MIME Type
  MEDIA_MIME_TYPE_UNSPECIFIED = 0;
  // PNG
  MEDIA_MIME_TYPE_PNG = 1;
  // JPG
  MEDIA_MIME_TYPE_JPG = 2;
  // JPEG
  MEDIA_MIME_TYPE_JPEG = 3;
  // GIF
  MEDIA_MIME_TYPE_GIF = 4;
  // HEIC
  MEDIA_MIME_TYPE_HEIC = 5;
  // PDF
  MEDIA_MIME_TYPE_PDF = 6;
  // DOC
  MEDIA_MIME_TYPE_DOC = 7;
  // DOCX
  MEDIA_MIME_TYPE_DOCX = 8;
  // XLS
  MEDIA_MIME_TYPE_XLS = 9;
  // XLSX
  MEDIA_MIME_TYPE_XLSX = 10;
}

// MediaContentDetectionResponse
message MediaContentDetectionResponse {
  // Indicates whether the media matches the specified content type or not
  google.protobuf.BoolValue is_content_detected = 1;
}

// Order by enum
enum QueryMediaOrderBy {
  // unspecified order by, by default result will be ordered by metadata created time
  QUERY_MEDIA_ORDER_BY_UNSPECIFIED = 0;
  // order to match the business ids ordering in request
  QUERY_MEDIA_ORDER_BY_REQUEST_BUSINESS_IDS = 1;
}

// Query Mx media request
message QueryMediaDataRequest {
  // Optional media type (e.g., "photo", "video"), if not provided will default to all types
  google.protobuf.StringValue media_type = 1;
  // List of content types (e.g., ["new menu item", "business updates"])
  repeated google.protobuf.StringValue content_types = 2;
  // Optional business id
  repeated google.protobuf.StringValue business_ids = 3;
  // Optional store id
  repeated google.protobuf.StringValue store_ids = 4;
  // Optional media status (e.g., "pending", "approved), if not provided will default to all statuses
  google.protobuf.StringValue media_status = 5;
  // Optional additional metadata map (e.g., only return media for has_audio: true)
  map<string, google.protobuf.Any> additional_metadata = 6;
  // Optional order by
  QueryMediaOrderBy order_by = 7;
  // Optional List of media IDs to query
  repeated google.protobuf.StringValue media_ids = 8;
}

// Raw mx media store item
message StoreMenuMetadata {
  // store menu metadata id
  google.protobuf.StringValue id = 1;
  // raw media idempotency key
  google.protobuf.StringValue media_idempotency_key = 2;
  // store id
  google.protobuf.StringValue store_id = 3;
  // item id
  google.protobuf.StringValue item_id = 4;
  // merchant supplied id
  google.protobuf.StringValue merchant_supplied_id = 5;
  // created at
  google.protobuf.Timestamp created_at = 6;
  // updated at
  google.protobuf.Timestamp updated_at = 7;
}

// Media metadata message
message MediaMetadata {
  reserved 1;
  reserved "media_id"; // deprecated media_id
  // media type
  google.protobuf.StringValue media_type = 2;
  // media caption
  google.protobuf.StringValue media_caption = 3;
  // media width
  google.protobuf.Int32Value width = 4;
  // media height
  google.protobuf.Int32Value height = 5;
  // media content types
  repeated google.protobuf.StringValue content_types = 6;
  // record created at
  google.protobuf.Timestamp created_at = 7;
  // record created at
  google.protobuf.Timestamp updated_at = 8;
  // s3 key
  google.protobuf.StringValue s3_key = 9;
  // s3 bucket
  google.protobuf.StringValue s3_bucket = 10;
  // media source, such as IG
  google.protobuf.StringValue media_source = 11;
  // video size
  google.protobuf.Int32Value media_size = 12;
  // additional metadata map
  map<string, google.protobuf.StringValue> additional_metadata = 13;
  // metadata id
  google.protobuf.StringValue id = 14;
  // idempotency key
  google.protobuf.StringValue media_idempotency_key = 15;
}

// Raw media message
message RawMedia {
  reserved 1;
  reserved "media_id"; // deprecated media_id - use id instead
  // DoorDash business id
  google.protobuf.StringValue business_id = 2;
  // DoorDash store id if available
  google.protobuf.StringValue store_id = 3;
  // media status
  google.protobuf.StringValue media_status = 4;
  // media preview link
  google.protobuf.StringValue media_preview_link = 5;
  // created at
  google.protobuf.Timestamp created_at = 6;
  // updated at
  google.protobuf.Timestamp updated_at = 7;
  // expired at
  google.protobuf.Timestamp expired_at = 8;
  // idempotency key
  google.protobuf.StringValue media_idempotency_key = 9;
  // media thumbnail link
  google.protobuf.StringValue media_thumbnail_link = 10;
  // media id
  google.protobuf.StringValue id = 11;
}

// Combined media data message
message MediaData {
  // media record
  RawMedia raw_media = 1;
  // media metadata
  MediaMetadata metadata = 2;
  // list of store item information
  repeated StoreMenuMetadata store_menu_metadata = 3;
}

// Response message for querying media data
message QueryMediaDataResponse {
  // the list of media data
  repeated MediaData media_data = 1;
}

// Request message for updating media data
message UpdateMediaMetadataRequest {
  // media data to be updated
  MediaData media_data = 1;
}

// Response message for updating media data
message UpdateMediaMetadataResponse {
  // the updated media data
  MediaData media_data = 1;
}

// Media mx permission
message MxMediaPermission {
  // permission record id
  google.protobuf.StringValue id = 1;
  // DoorDash business id (required for updates)
  google.protobuf.StringValue business_id = 2;
  // Media source (required for updates)
  google.protobuf.StringValue media_source = 3;
  // Media handle name (required for updates)
  google.protobuf.StringValue media_handle = 4;
  // Mx opt-in status (required for updates)
  google.protobuf.StringValue opt_in_status = 5;
  // Mx email
  google.protobuf.StringValue email = 6;
  // record created at
  google.protobuf.Timestamp created_at = 7;
  // record created at
  google.protobuf.Timestamp updated_at = 8;
}

// Request to get Mx permissions
message GetMxMediaPermissionsRequest {
  // DoorDash business id
  google.protobuf.StringValue business_id = 1;
}

// Response of getting Mx permissions
message GetMxMediaPermissionsResponse {
  // A list of mx permission records
  repeated MxMediaPermission permissions = 1;
}

// Request to update Mx permissions
message UpdateMxMediaPermissionsRequest {
  // A list of mx permission records
  repeated MxMediaPermission permissions = 1;
}

// Response of updating Mx permissions
message UpdateMxMediaPermissionsResponse {
  // The list of updated mx permission records
  repeated MxMediaPermission permissions = 1;
}

// TranscodeVideoAndUploadToS3Request
message TranscodeVideoAndUploadToS3Request {
  // Query for videos approved after provided timestamp
  google.protobuf.StringValue approved_after_timestamp = 1;

  // should optimize video
  google.protobuf.BoolValue optimize_video = 2;

  // should convert video to HLS
  google.protobuf.BoolValue convert_video_to_hls = 3;

  // Query for videos approved before provided timestamp
  google.protobuf.StringValue approved_before_timestamp = 4;

  // Optional list of idempotency keys
  repeated google.protobuf.StringValue idempotency_keys = 5;

  // should only transcode for edited video links stored in additional_metadata
  google.protobuf.BoolValue transcode_for_edited_videos_only = 6;
}

// TranscodeVideoAndUploadToS3Response
message TranscodeVideoAndUploadToS3Response {
  reserved 1;
  reserved "workflow_id"; // deprecated workflow_id

  // Video optimization workflow id
  google.protobuf.StringValue video_optimization_workflow_id = 2;

  // HLS conversion workflow id
  google.protobuf.StringValue hls_conversion_workflow_id = 3;
}
