syntax = "proto3";

package air_fleet_service.v1;

import "air_fleet_service/common.proto";
import "common/common.proto";
import "doordash.api/annotations.proto";
import "doordash.api/field_validate.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.air_fleet_service.v1";

// Define the AirMissionService for air mission operations
service AirMissionService {
  option (doordash.api.service) = {
    name: "AirMissionService"
    url: "air-fleet-service-api.service.prod.ddsd"
    port: 50051
    name_spaces: ["air-dashboard"],
    api_key_name: "AIR_FLEET_SERVICE_API_KEY"
    owner: {
      id: "doordash-labs-commercial-team",
      name: "air-dashboard",
      slack_channel: "#eng-autonomous-delivery-platform",
      email_alias: "foundry-eng@doordash.com",
    }
    target_products: [INTERNAL]
  };

  // RPC to get available drones in an operation area
  rpc GetAvailableDrones(GetAvailableDronesRequest) returns (GetAvailableDronesResponse) {
    option (google.api.http) = {get: "/air-dashboard/v1/operation-areas/{operation_area_id}/drones"};
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      role_based_authorization: {
        mode: ANY,
        roles: ["security-raven-managed-authorization"]
      }
      authentication_config: {enable_okta_verification: true}
    };
  }

  // RPC to get active order assignments in an operation area
  rpc GetActiveOrderAssignments(GetActiveOrderAssignmentsRequest) returns (GetActiveOrderAssignmentsResponse) {
    option (google.api.http) = {get: "/air-dashboard/v1/operation-areas/{operation_area_id}/active-order-assignments"};
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      role_based_authorization: {
        mode: ANY,
        roles: ["security-raven-managed-authorization"]
      }
      authentication_config: {enable_okta_verification: true}
    };
  }

  // RPC to get historical order assignments in an operation area
  rpc GetHistoricalOrderAssignments(GetHistoricalOrderAssignmentsRequest) returns (GetHistoricalOrderAssignmentsResponse) {
    option (google.api.http) = {get: "/air-dashboard/v1/operation-areas/{operation_area_id}/historical-order-assignments"};
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      role_based_authorization: {
        mode: ANY,
        roles: ["security-raven-managed-authorization"]
      }
      authentication_config: {enable_okta_verification: true}
    };
  }

  // RPC to get a single mission's commands
  rpc GetMission(GetMissionRequest) returns (GetMissionResponse) {
    option (google.api.http) = {get: "/air-dashboard/v1/missions/{mission_id}"};
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      role_based_authorization: {
        mode: ANY,
        roles: ["security-raven-managed-authorization"]
      }
      authentication_config: {enable_okta_verification: true}
    };
  }

  // RPC to create a mission
  rpc CreateMission(CreateMissionRequest) returns (CreateMissionResponse) {
    option (google.api.http) = {
      post: "/air-dashboard/v1/operation-areas/{operation_area_id}/missions"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      role_based_authorization: {
        mode: ANY,
        roles: ["security-raven-managed-authorization"]
      }
      authentication_config: {enable_okta_verification: true}
    };
  }
}

// Message for GetAvailableDronesRequest
message GetAvailableDronesRequest {
  // Operation area identifier for the drone query
  string operation_area_id = 1;
}

// Message for GetAvailableDronesResponse
message GetAvailableDronesResponse {
  // List of available drones in the operation area
  repeated Drone drones = 1;
}

// Message representing a Drone
message Drone {
  // Unique identifier for the drone
  string vehicle_id = 1;
  // Name of the drone
  string vehicle_name = 2;
  // Optional icon URL for the drone
  google.protobuf.StringValue vehicle_icon_url = 3;
  // Last known location of the drone
  Location last_reported_location = 4;
  // Timestamp when the drone was last online
  google.protobuf.Timestamp last_online = 5;
}

// Message for GetActiveOrderAssignmentsRequest
message GetActiveOrderAssignmentsRequest {
  // Operation area identifier for active order assignments
  string operation_area_id = 1;
}

// Message for GetActiveOrderAssignmentsResponse
message GetActiveOrderAssignmentsResponse {
  // List of active order assignments
  repeated OrderAssignment order_assignments = 1;
}

// Message representing an OrderAssignment
message OrderAssignment {
  // Type of order assignment
  OrderType order_type = 1;
  // Mission identifier associated with the order assignment
  string mission_id = 2;
  // Last reported drone location of the active assignment.
  Location last_reported_location = 3;
  // Estimated delivery time for active assignments
  google.protobuf.Timestamp estimated_delivery_time = 4;
  // Mission duration in seconds for historical assignments
  google.protobuf.Int64Value mission_duration_seconds = 5;
  // Fields specific to the order assignment
  OrderAssignmentFields order_assignment_fields = 6;
  // Fields specific to the mission assignment
  MissionAssignmentFields mission_assignment_fields = 7;
}

// Enum for OrderType
enum OrderType {
  // Unspecified order type
  ORDER_TYPE_UNSPECIFIED = 0;
  // Standard order type
  ORDER_TYPE_ORDER = 1;
  // Mission order type
  ORDER_TYPE_MISSION = 2;
}

// Message for OrderAssignmentFields
message OrderAssignmentFields {
  // Unique delivery identifier
  string delivery_uuid = 1;
  // Consumer's name
  string consumer_name = 2;
  // Optional business icon URL
  google.protobuf.StringValue business_icon_url = 3;
}

// Message for MissionAssignmentFields
message MissionAssignmentFields {
  // Name of the vehicle used in the mission
  string vehicle_name = 1;
  // Optional mission icon URL
  google.protobuf.StringValue mission_icon_url = 2;
}

// Message for GetHistoricalOrderAssignmentsRequest
message GetHistoricalOrderAssignmentsRequest {
  // Operation area identifier for historical order assignments
  string operation_area_id = 1;
}

// Message for GetHistoricalOrderAssignmentsResponse
message GetHistoricalOrderAssignmentsResponse {
  // List of historical order assignments
  repeated OrderAssignment order_assignments = 1;
}

// Message for GetMissionRequest
message GetMissionRequest {
  // Mission identifier for the mission query
  string mission_id = 1;
}

// Message for GetMissionResponse
message GetMissionResponse {
  // List of commands for the specified mission
  repeated MissionCommand commands = 1;
}

// Message representing a MissionCommand
message MissionCommand {
  // Type of mission command
  CommandType command_type = 1;
  // Latitude for the command location
  google.protobuf.FloatValue lat = 2;
  // Longitude for the command location
  google.protobuf.FloatValue lng = 3;
  // Altitude for the command location
  google.protobuf.FloatValue alt = 4;
  // Drone fly speed in m/s
  google.protobuf.FloatValue speed = 5;
  // Hold time in seconds
  google.protobuf.Int32Value hold_time = 6;
}

// Enum for CommandType
enum CommandType {
  // Unspecified command type
  COMMAND_TYPE_UNSPECIFIED = 0;
  // Waypoint command type
  COMMAND_TYPE_WAYPOINT = 1;
  // Dropoff command type
  COMMAND_TYPE_DROPOFF = 2;
  // Return to land command type
  COMMAND_TYPE_RTL = 3;
  // Delay command type
  COMMAND_TYPE_DELAY = 4;
  // Pickup command type
  COMMAND_TYPE_PICKUP = 5;
  // Set speed type
  COMMAND_TYPE_SET_SPEED = 6;
}

// Message for CreateMissionRequest
message CreateMissionRequest {
  // Operation area identifier for the mission
  string operation_area_id = 1;
  // Vehicle identifier for the mission
  string vehicle_id = 2;
  // List of mission commands to be executed
  repeated MissionCommand commands = 3;
}

// Message for CreateMissionResponse
message CreateMissionResponse {}
