syntax = "proto3";

package air_fleet_service.v1;

import "air_fleet_service/common.proto";
import "common/common.proto";
import "doordash.api/annotations.proto";
import "doordash.api/field_validate.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.air_fleet_service.v1";

// Service powering air dashboard
service AirDashboardService {
  option (doordash.api.service) = {
    name: "AirDashboardService"
    url: "air-fleet-service-api.service.prod.ddsd"
    port: 50051
    name_spaces: ["air-dashboard"],
    api_key_name: "AIR_FLEET_SERVICE_API_KEY"
    owner: {
      id: "doordash-labs-commercial-team",
      name: "air-dashboard",
      slack_channel: "#eng-autonomous-delivery-platform",
      email_alias: "foundry-eng@doordash.com",
    }
    target_products: [INTERNAL]
  };

  // Update the air fleet of an operation area
  rpc UpdateOperationAreaFleet(UpdateOperationAreaFleetRequest) returns (UpdateOperationAreaFleetResponse) {
    option (google.api.http) = {
      patch: "/air-dashboard/v1/operation-areas/{operation_area_id}/fleet"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      role_based_authorization: {
        mode: ANY,
        roles: ["security-raven-managed-authorization"]
      }
      authentication_config: {enable_okta_verification: true}
    };
  }

  // Get air fleet information of an operation area
  rpc GetOperationAreaFleetDetails(GetOperationAreaFleetDetailsRequest) returns (GetOperationAreaFleetDetailsResponse) {
    option (google.api.http) = {get: "/air-dashboard/v1/operation-areas/{operation_area_id}/fleet"};
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      role_based_authorization: {
        mode: ANY,
        roles: ["security-raven-managed-authorization"]
      }
      authentication_config: {enable_okta_verification: true}
    };
  }

  // Cancel the order
  rpc CancelOrder(CancelOrderRequest) returns (CancelOrderResponse) {
    option (google.api.http) = {
      patch: "/air-dashboard/v1/orders/{external_delivery_id}/cancel",
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      role_based_authorization: {
        mode: ANY,
        roles: ["security-raven-managed-authorization"]
      }
      authentication_config: {enable_okta_verification: true}
    };
  }

  // Progress order status
  rpc ProgressOrderStatus(ProgressOrderStatusRequest) returns (ProgressOrderStatusResponse) {
    option (google.api.http) = {
      patch: "/air-dashboard/v1/orders/{external_delivery_id}"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      role_based_authorization: {
        mode: ANY,
        roles: ["security-raven-managed-authorization"]
      }
      authentication_config: {enable_okta_verification: true}
    };
  }

  // Reassign the order to dasher
  rpc ReassignOrderToDasher(ReassignOrderToDasherRequest) returns (ReassignOrderToDasherResponse) {
    option (google.api.http) = {
      patch: "/air-dashboard/v1/orders/{external_delivery_id}/reassign",
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      role_based_authorization: {
        mode: ANY,
        roles: ["security-raven-managed-authorization"]
      }
      authentication_config: {enable_okta_verification: true}
    };
  }
}

// Request to update air fleet of the operation area
message UpdateOperationAreaFleetRequest {
  // Operation area id
  string operation_area_id = 1;
  // Set the total number of drones in the fleet
  google.protobuf.Int32Value num_total_drones = 2;
  // Enable/disable the operation area
  google.protobuf.BoolValue is_enabled = 3;
  // Set the air provider type of the operation area
  AirProvider air_provider = 4;
}

// Response of updating air fleet of the operation area
message UpdateOperationAreaFleetResponse {}

// Request to get the air fleet information of an operation area
message GetOperationAreaFleetDetailsRequest {
  // Operation area id
  string operation_area_id = 1;
}

// Response of air fleet information of an operation area
message GetOperationAreaFleetDetailsResponse {
  // Number of drones in the fleet
  int32 num_total_drones = 1;
  // Number of active drones with assigned order in the fleet
  int32 num_active_drones = 2;
  // Active drone orders
  repeated DroneOrder active_drone_orders = 3;
  // Active non-drone orders
  repeated Order active_non_drone_orders = 4;
  // If the operation area is enabled
  bool is_enabled = 5;
  // Air provider type
  AirProvider air_provider = 6;
}

// Request to cancel an order
message CancelOrderRequest {
  // External delivery id of the ADP order
  string external_delivery_id = 1;
  // Cancel reason
  google.protobuf.StringValue cancel_reason = 2;
}

// Response of canceling an order
message CancelOrderResponse {}

// Request to progress order status
message ProgressOrderStatusRequest {
  // External delivery id of the ADP order
  string external_delivery_id = 1;
  // Target order status to progress to
  OrderStatus target_order_status = 2;
}

// Response of progressing order status
message ProgressOrderStatusResponse {
  // Current order status
  OrderStatus order_status = 1;
  // Optional next order status
  OrderStatus next_order_status = 2;
}

// Request to reassign an order to dasher
message ReassignOrderToDasherRequest {
  // External delivery id of the ADP order
  string external_delivery_id = 1;
  // Reassign reason
  google.protobuf.StringValue reassign_reason = 2;
}

// Response of reassigning an order to dasher
message ReassignOrderToDasherResponse {}
