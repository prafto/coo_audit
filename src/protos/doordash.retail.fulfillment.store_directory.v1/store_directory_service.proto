syntax = "proto3";
package doordash.retail.fulfillment.store_directory.v1;

import "doordash.retail.fulfillment.data.v1/database_service.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.retail.fulfillment";

// StoreDirectoryService represents the aisle information for a store.
service StoreDirectoryService {
  /*
   * GetStoreDirectoryDataByStoreId
   *
   * Get the aisle information for a store.
   */
  rpc GetStoreDirectoryDataByStoreId(GetStoreDirectoryDataByStoreIdRequest) returns (GetStoreDirectoryDataByStoreIdResponse);

  /*
   * UpdateStoreDirectoryDataByStoreId
   *
   * Update the aisle information for a store.
   */
  rpc UpdateStoreDirectoryDataByStoreId(UpdateStoreDirectoryDataByStoreIdRequest) returns (UpdateStoreDirectoryDataByStoreIdResponse);
  /*
   * DeleteStoreDirectoryDataByStoreId
   *
   * Delete the aisle information for a store.
   */
  rpc DeleteStoreDirectoryDataByStoreId(DeleteStoreDirectoryDataByStoreIdRequest) returns (DeleteStoreDirectoryDataByStoreIdResponse);
  /*
   * CleanStoreDirectoryDataAisleIds
   *
   * Clean the aisle id info for a store.
   */
  rpc CleanStoreDirectoryDataAisleIds(CleanStoreDirectoryDataAisleIdsRequest) returns (CleanStoreDirectoryDataAisleIdsResponse);
  /*
   * StartStoreDirectoryDataOrchestrator
   *
   * Start the store directory data orchestrator.
   */
  rpc StartStoreDirectoryDataOrchestrator(StartStoreDirectoryDataOrchestratorRequest) returns (StartStoreDirectoryDataOrchestratorResponse);
  /*
   * Approve photo for aisles
   *
   * Approve the photo for aisles.
   */
  rpc ApprovePhotoForAisles(ApprovePhotoForAislesRequest) returns (ApprovePhotoForAislesResponse);
  /*
   * DeactivateStoreDirectoryAisle
   */
  rpc DeactivateStoreDirectoryAisle(DeactivateStoreDirectoryAisleRequest) returns (DeactivateStoreDirectoryAisleResponse);
}

// Request for GetStoreDirectoryDataByStoreId.
message GetStoreDirectoryDataByStoreIdRequest {
  // store_id is the unique identifier for the store.
  repeated string store_id = 1;
  // source is the source of the data.
  Source source = 2;
  // enum source
  enum Source {
    // SOURCE_UNSPECIFIED
    SOURCE_UNSPECIFIED = 0;
    // SOURCE_GROUND_TRUTH
    SOURCE_GROUND_TRUTH = 1;
  }
}

// Response for GetStoreDirectoryDataByStoreId.
message GetStoreDirectoryDataByStoreIdResponse {
  // store_directory_data is the aisle information for a store.
  repeated doordash.retail.fulfillment.data.v1.StoreDirectoryData store_directory_data = 1;
}

// Request for UpdateStoreDirectoryDataByStoreId.
message UpdateStoreDirectoryDataByStoreIdRequest {
  // store_id is the unique identifier for the store.
  string store_id = 1;
  // store_directory_data is the aisle information for a store.
  doordash.retail.fulfillment.data.v1.StoreDirectoryData store_directory_data = 2;
}

// Response for UpdateStoreDirectoryDataByStoreId.
message UpdateStoreDirectoryDataByStoreIdResponse {}

// Request for DeleteStoreDirectoryDataByStoreId.
message DeleteStoreDirectoryDataByStoreIdRequest {
  // store_id is the unique identifier for the store.
  repeated string store_id = 1;
}

// Response for DeleteStoreDirectoryDataByStoreId.
message DeleteStoreDirectoryDataByStoreIdResponse {}

// Request for CleanStoreDirectoryDataAisleIds.
message CleanStoreDirectoryDataAisleIdsRequest {
  // store_id is the unique identifier for the store.
  repeated string store_id = 1;
}

// Response for CleanStoreDirectoryDataAisleIds.
message CleanStoreDirectoryDataAisleIdsResponse {}

// Send Frontend CnG events - used by Dx app
message CngTrackingClientEventDasher {
  // event group - related events should fall under the same event group
  google.protobuf.StringValue event_group = 1;
  // event name
  google.protobuf.StringValue event_name = 2;
  // event status - init, fail, success
  google.protobuf.StringValue event_status = 3;
  // cart uuid, because pre-checkout subs only has cart uuid
  google.protobuf.StringValue cart_uuid = 4;
  // delivery uuid
  google.protobuf.StringValue delivery_uuid = 5;
  // dd store id
  google.protobuf.StringValue store_id = 6;
  // cng event name
  google.protobuf.StringValue cng_event_name = 7;
  // event payload will be populated in iguazu_other_properties
  OtherProperties iguazu_other_properties = 8;
}

// Other Properties
message OtherProperties {
  // dasher id
  google.protobuf.StringValue dasher_id = 1;
  // order id
  google.protobuf.StringValue store_id = 2;
  // business id
  google.protobuf.StringValue business_id = 3;
  // is valid
  google.protobuf.BoolValue is_valid = 4;
  // task id
  google.protobuf.StringValue task_id = 5;
  // max aisle input by dasher
  google.protobuf.Int32Value max_aisle_input = 6;
  // aisles
  repeated google.protobuf.StringValue aisles = 7;
  // [Deprecated]aisle id and aisle name
  reserved 8, 9;
  reserved "aisle_id", "aisle_name";
  // scan successful or not
  google.protobuf.BoolValue successful = 10;
  // scan location id
  google.protobuf.StringValue scan_location_id = 11;
  // scan location name
  google.protobuf.StringValue scan_location_name = 12;
}

// Request for StartStoreDirectoryDataOrchestrator.
message StartStoreDirectoryDataOrchestratorRequest {
  // Max runs
  google.protobuf.Int32Value max_runs = 1;
  // Start timestamp
  google.protobuf.Timestamp start_time = 2;
  // Recurrence
  Recurrence recurrence = 3;
  // cron Recurrence enum
  enum Recurrence {
    // Recurrence_UNSPECIFIED
    RECURRENCE_UNSPECIFIED = 0;
    // Recurrence_DAILY
    RECURRENCE_DAILY = 1;
    // Recurrence_DAILY 12 PM
    RECURRENCE_DAILY_12_PM = 2;
    // Recurrence 15 mins
    RECURRENCE_15_MINS = 3;
    // Recurrence 30 mins
    RECURRENCE_30_MINS = 4;
    // Recurrence 5 min
    RECURRENCE_5_MINS = 5;
  }
}

// Response for StartStoreDirectoryDataOrchestrator.
message StartStoreDirectoryDataOrchestratorResponse {}

// Request for ApprovePhotoForAisles.
message ApprovePhotoForAislesRequest {
  // approved_photo_for_store
  repeated ApprovedPhotosForStore approved_photos_for_store = 1;
}

// Response for ApprovePhotoForAisles.
message ApprovedPhotosForStore {
  // store_id.
  string store_id = 1;
  // aisle_to_photo_url_map.
  map<string, string> aisle_to_photo_url_map = 2;
}

// Response for ApprovePhotoForAisles.
message ApprovePhotoForAislesResponse {}

// Request for DeactivateStoreDirectoryAisle.
message DeactivateStoreDirectoryAisleRequest {
  // store id
  google.protobuf.StringValue store_id = 1;
  // aisle id
  google.protobuf.StringValue aisle_id = 2;
  // dasher id
  google.protobuf.StringValue dasher_id = 3;
  // time
  google.protobuf.Timestamp deactivation_time = 4;
}

// Response for DeactivateStoreDirectoryAisle.
message DeactivateStoreDirectoryAisleResponse {
  // status
  Status status = 1;
  // status enum
  enum Status {
    // Unspecified status
    STATUS_UNSPECIFIED = 0;
    // When deactivated
    STATUS_DEACTIVATED = 1;
    // When not deactivated as data is not enough to make decison
    STATUS_NOT_DEACTIVATED = 2;
    // When deactivation failed
    STATUS_FAILED = 3;
  }
}
