syntax = "proto3";

package doordash.retail.catalog.v2;

import "common/code.proto";
import "doordash.retail.baseline_sku.v1/baseline_sku.proto";
import "doordash.retail.catalog.v2/common.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "ontology/attribute_configuration.proto";

option go_package = "github.com/doordash/services-protobuf/generated/doordash/retail/catalog/v2";
option java_generic_services = true;

// Attribute Extraction result
message AttributeExtractionResult {
  // product template metadata
  ProductTemplateMetadata product_template_metadata = 1;
  // sku level extraction metadata
  SkuLevelExtractionResultMetadata sku_level_extraction_result_metadata = 2;
  // detail result by attribute id
  map<string, AttributeResult> extraction_result = 3;
  // other extraction result
  OtherExtractionResult other_extraction_result = 4;
}

// product template metadata
message ProductTemplateMetadata {
  // product template id
  google.protobuf.StringValue product_template_id = 1;
  // product template version
  google.protobuf.StringValue product_template_version = 2;
  // product template name
  google.protobuf.StringValue product_template_name = 3;
}

// sku level extraction metadata
message SkuLevelExtractionResultMetadata {
  // sku level confidence view
  Confidence confidence = 1;
  // if there is extraction issue identified
  google.protobuf.BoolValue has_extraction_issue = 2;
}

// other extraction result
message OtherExtractionResult {
  // backend taxonomy classification
  BackendTaxonomyClassification backend_taxonomy_classification = 1;
}

// extraction result per attribute
message AttributeResult {
  // attribute configuration
  AttributeConfiguration attribute_configuration = 1;
  // extraction result case that helps interpret the result
  AttributeExtractionResultCase extraction_result_case = 2;
  // extracted value list
  repeated ExtractedValue extracted_values = 3;
  // extraction issues
  repeated ExtractionIssue extraction_issues = 4;
  // aggregated confidence level at attribute level from all extracted values
  Confidence.ConfidenceLevel confidence_level = 5;
  // miscellaneous data for build
  BuildData build_data = 6;
}

// attribute configuration
message AttributeConfiguration {
  // global attribute id
  google.protobuf.StringValue attribute_id = 1;
  // global attribute label/name
  google.protobuf.StringValue attribute_name = 2;
  // attribute property
  ontology.v1.AttributeProperties attribute_property = 3;
}

// attribute values by source
message ExtractedValue {
  // stringified constrained value of the highest rank
  google.protobuf.StringValue value = 1;
  // other information associated with the value
  ValueInfo info = 2;
  // confidence view
  Confidence confidence = 3;
  // detail result per unconstrained value and source
  repeated SourcedValue sources = 4;
  // ranked RV prediction, leave the sources filed empty
  repeated ExtractedValue predictions = 5;
}

// extraction issue
message ExtractionIssue {
  // extraction issue type
  ExtractionIssueType issue_type = 1;
  // [optional] detail
  google.protobuf.StringValue detail = 2;
}

// information associated with the extracted restricted value
message ValueInfo {
  // id used in DD system/storage internally
  google.protobuf.StringValue internal_id = 1;
  // id in graphite
  google.protobuf.StringValue ontology_concept_id = 2;
  // other non-generic data, e.g brand path
  map<string, google.protobuf.StringValue> other_data = 3;
  // [optional] dd internal values. hack to handle current catalog enum attribute
  google.protobuf.StringValue internal_value = 4;
}

// attribute values by source
message SourcedValue {
  // source
  ExtractionSource extraction_source = 1;
  // unconstrained result
  UnconstrainedResult unconstrained_result = 2;
}

// unconstrained value with confidence
message UnconstrainedResult {
  // unconstrained value
  google.protobuf.StringValue value = 1;
  // confidence detail
  Confidence confidence = 2;
}

// source of where a value is extracted from
enum ExtractionSource {
  // Unspecific data
  EXTRACTION_SOURCE_UNSPECIFIED = 0;
  // textual data
  EXTRACTION_SOURCE_TEXTUAL = 1;
  // photo
  EXTRACTION_SOURCE_PHOTO = 2;
}

// extraction issue type
// buf:lint:ignore ENUM_VALUE_PREFIX
enum AttributeExtractionResultCase {
  // result case unspecified
  ATTRIBUTE_EXTRACTION_RESULT_CASE_UNSPECIFIED = 0;
  // value(s) is inferred/extracted
  VALUE_EXTRACTED = 1;
  // no value is inferred/extracted
  EMPTY_VALUE = 2;
  // extraction is not capable of handle the attribute type
  NO_MODEL_CAPABILITY = 3;
}

// extraction issue type
// buf:lint:ignore ENUM_VALUE_PREFIX
enum ExtractionIssueType {
  // issue type unspecified
  EXTRACTION_ISSUE_TYPE_UNSPECIFIED = 0;
  // multi-values extracted for a single value field
  MULTI_VALUE_EXTRACTED_FOR_SINGLE_VALUE_FIELD = 1;
  // combo item identified need review
  COMBO_ITEM_NEED_REVIEW = 2;
}

// backend taxonomy classification
message BackendTaxonomyClassification {
  // L1/L4 node classified which is used to determine the product template assignment
  google.protobuf.Int64Value product_category_id = 1;
  // confidence of the classification
  Confidence confidence = 2;
  // place holder for other metadata e.g l1->l4 path
  map<string, google.protobuf.StringValue> product_category_data = 3;
}

// miscellaneous data for build
message BuildData {
  // is attribute required for build
  google.protobuf.BoolValue is_required = 1;
}
