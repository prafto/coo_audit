syntax = "proto3";

package lattice_runner.v1;

import "google/protobuf/wrappers.proto";
import "lattice_config_manager/context_value.proto";
import "lattice_runner/session.proto";

option go_package = "github.com/doordash/services-protobuf/generated/lattice_runner/api/v1";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.lattice_runner.rpc.api";

// For a gRPC service to onboard to lattice we will support 2 path -
// 1. Onboard to UGP. This will build a REST that lattice runner can interface with.
// Services onboarded to UGP will be able to provide their REST schema. This will
// use HTTPRemoteTool implementation to get called from lattice runner.
// 2. Implement the LatticeToolService in their namespace (or another namespace). This way
// Lattice runner will be able to call this service using the namespace dns. This will
// use HermesRemoteTool implementation to get called from lattice runner.
//
// We don't gRPC automatically to other service as this will require us to link to
// arbitrary proto. Which we decided against doing as we want to avoid clients needing
// to contribute directly to framework codebase. Sharing the iguazu proto registry
// in future is possible but not supported at the moment.
service LatticeToolService {
  // Call into the service from lattice runner.
  rpc RunTool(RunToolRequest) returns (RunToolResponse);
}

// Request that the lattice runner will construct for the tool calling.
message RunToolRequest {
  // Name of the tool. Note that same RunTool endpoint can support multiple tools
  // using tool_name to disambiguate calls.
  google.protobuf.StringValue tool_name = 1;
  // Json encoded payload matching the schema provided in the tool config.
  // See the function calling schema format in -
  // https://platform.openai.com/docs/assistants/tools/function-calling/step-1-define-functions
  // and the corresponding data object in -
  // RemoteToolSchema class.
  google.protobuf.StringValue arguments_payload = 2;
  // Id of the tool call. If followed by ToolOutputProcessor node, this will
  // be used to passed to the agent to continue the execution.
  google.protobuf.StringValue tool_call_id = 3;
  // Current session at the moment the tool call was made.
  // Tools are allowed to use any of the context value in the session.
  lattice_runner.v1.Session session = 4;
}

// Response to be generated by the tool call. Tool calling can either be purely
// side-effects or can modify context variables in the session (or both).
message RunToolResponse {
  // Name of the tool executed.
  google.protobuf.StringValue tool_name = 1;
  // Id of the tool call.
  google.protobuf.StringValue tool_call_id = 2;
  // Output of the tool. (Context change operations).
  ToolOutput tool_output = 3;
}

// Add or update a single leaf field in context.
message UpsertContextKey {
  // Key in the context to upsert
  google.protobuf.StringValue key = 1;
  // Context value (one of the supported leaf type).
  lattice_config_manager.v1.ContextValue value = 2;
}

// Remove a key from the context. The key will be removed from
// the perspective of ConditionContextPropertyExists evaluation and
// the Session passed to tool call will not contain the key.
message DeleteContextKey {
  // Key to remove.
  google.protobuf.StringValue key = 1;
}

// Operation on context to add, remove, update a *leaf* field.
// For updating a object, use fully qualified name of the field.
// (Recursive object types are not supported).
message ContextOperation {
  // Type of operation.
  oneof type {
    // Add or update the leaf field in the context.
    UpsertContextKey put = 1;
    // Delete a lead field in the context.
    DeleteContextKey remove = 2;
  }
}

// Represent the response from the tool call to the framework.
message ToolOutput {
  // Operations to do on the session context at the end of tool call.
  repeated ContextOperation session_context_operations = 1;
  // Operations to do on the request context at the end of the tool call.
  repeated ContextOperation request_context_operations = 2;
  // Tool call message output to append to the message buffer.
  // So, subsequent agents will see the result of this tool call.
  // However not that this in itself will not transfer control back to
  // caller unless there is an explicit ReturnDirect node following this.
  google.protobuf.StringValue tool_message_output = 3;
  // Tool call status. If not set, it is assumed to be success.
  ToolCallStatus tool_call_status = 4;
}

// Status of the tool call.
enum ToolCallStatus {
  // Tool call status unspecified.
  TOOL_CALL_STATUS_UNSPECIFIED = 0;
  // Tool call was successful.
  TOOL_CALL_STATUS_SUCCESS = 1;
  // Tool call failed.
  TOOL_CALL_STATUS_ERROR = 2;
}
