syntax = "proto3";

package lattice_runner.v1;

import "google/protobuf/wrappers.proto";
import "lattice_config_manager/common_message_v1.proto";
import "lattice_config_manager/context_value.proto";

option go_package = "github.com/doordash/services-protobuf/generated/lattice_runner/api/v1";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.lattice_runner.rpc.api";

// Represent initial KV data passed to the graph that can be referenced in
// the prompts and conditional nodes.
message Context {
  // Key value for context.
  map<string, lattice_config_manager.v1.ContextValue> kv = 1;
}

// Represent current session state of the lattice execution.
message Session {
  // Id of the session.
  google.protobuf.StringValue session_id = 1;
  // Ids of the requests in the session so far.
  repeated google.protobuf.StringValue request_id = 2;
  // Id of the graph for which the session is running.
  google.protobuf.StringValue graph_id = 3;
  // Version of the graph for which the session is associated with.
  google.protobuf.Int64Value graph_version = 4;
  // Context at the session level.
  Context session_context = 5;
  // Context at the request level. (Resets for every request).
  Context request_context = 6;
  // The tag of the graph for which the session is running.
  google.protobuf.StringValue graph_tag = 7;
}

// Message sent to Lattice runner service
message Message {
  // Message type
  MessageType message_type = 1;
  // Message string value
  google.protobuf.StringValue message = 2;
  // Message metadata
  lattice_config_manager.v1.MessageMetadata metadata = 3;
}

// Message type
enum MessageType {
  // Message type unspecified
  MESSAGE_TYPE_UNSPECIFIED = 0;
  // User message type
  MESSAGE_TYPE_USER = 1;
  // Return message type
  MESSAGE_TYPE_RETURN = 2;
  // Image message type, message will contain the image CDN url
  MESSAGE_TYPE_IMAGE = 3;
  // Guardrail input message type
  MESSAGE_TYPE_GUARDRAIL_INPUT = 4;
  // Json message type, message will contain the json body
  MESSAGE_TYPE_JSON = 5;
  // Channel metadata action message type,
  // message will contain serialized channel metadata action message
  // refer: conversation_intelligence_service.v1.ChannelMetadataAction
  MESSAGE_TYPE_CHANNEL_METADATA_ACTION = 6;
  // Message type retrigger. Means client will need to retrigger the request
  MESSAGE_TYPE_RETRIGGER = 7;
}
