syntax = "proto3";

package dasher_handoffs_service.image_recognition.v1;

import "common/code.proto";
import "common/service_client_config.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "sibyl_prediction_service/image.proto";

option go_package = "github.com/doordash/services-protobuf/generated/dasher_handoffs_service/image_recognition/v1";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.dasher_handoffs_service.image_recognition";

// Image recognition service used to validate images
service ImageRecognitionService {
  // Attempts to classify accuracy and correctness of image type. Currently used for dropoff image
  rpc ImageClassification(ImageClassificationRequest) returns (ImageClassificationResponse);
}

// Type of Image
enum ImageType {
  // Image type unknown
  IMAGE_TYPE_UNSPECIFIED = 0;
  // Delivery Drop off Image
  IMAGE_TYPE_DASHER_DROP_OFF_TO_CONSUMER = 1;
}

//Type of Classifiers
enum ImageClassifier {
  // Classifiers type unknown
  IMAGE_CLASSIFIER_UNSPECIFIED = 0;
  // Food Drop off good Image classification
  IMAGE_CLASSIFIER_DASHER_DROP_OFF_TO_CONSUMER = 1;
}

// Image attributes
// TODO: Image metadata structure for DB
message DropOffToConsumerImageAttributes {
  // delivery_uuid
  google.protobuf.StringValue delivery_uuid = 1;
  // Geo/Doordash Address id
  google.protobuf.StringValue address_id = 2;
  // The direction of movement, in degrees, compared to true North Between 0°
  //  and 359.9°, -1 indicates unavailable
  google.protobuf.DoubleValue course = 3;
  // delivery_type contactless or cx_unavailable
  google.protobuf.StringValue delivery_type = 4;
  // dasher_id
  google.protobuf.StringValue dasher_id = 5;
  // server timestamp when the image was uploaded
  google.protobuf.Timestamp upload_timestamp = 6;
  // Altitude compared to sea level, in meters
  google.protobuf.DoubleValue altitude_meters = 7;
  // Accuracy of lateral position, in meters
  google.protobuf.DoubleValue horizontal_accuracy_meters = 8;
  // Accuracy of altitude measurement, in meters
  google.protobuf.DoubleValue vertical_accuracy_meters = 9;
  // Latitude, in degrees when the camera is activated to take a picture
  google.protobuf.DoubleValue camera_open_lat = 10;
  // Longitude, in degrees when the camera is activated to take a picture
  google.protobuf.DoubleValue camera_open_lng = 11;
  // Latitude, in degrees when the submit action happened
  google.protobuf.DoubleValue photo_submit_lat = 12;
  // Longitude, in degrees when the submit action happened
  google.protobuf.DoubleValue photo_submit_lng = 13;
  // Was the image directly from the camera or photo library
  google.protobuf.StringValue image_source = 14;
}

// MetadataData related to image, it will differ based on image type
message ImageAttributes {
  // metadata payload
  oneof payload {
    // Image attributes for dasher drop off to consumer image
    DropOffToConsumerImageAttributes drop_off_to_consumer_data = 1;
  }
}

// Data related to image url, attrbutes
message ImageData {
  // Image URL
  google.protobuf.StringValue image_url = 1;
  // Type of Image
  ImageType image_type = 2;
  // Image attributes
  ImageAttributes image_attributes = 3;
  // Image classifier
  ImageClassifier image_classifier = 4;
}

// Image classification request
message ImageClassificationRequest {
  //Type of Classifiers
  repeated ImageData image_data = 2;
}

// Image classification request response params
message ImageClassificationResponse {
  // Status code
  code.Code code = 1;
  // Status message
  google.protobuf.StringValue status_message = 2;
  // classification response of call to Sibyl
  ImagesRecognitionResponse response = 3;
}

// Image Classification logging data
message ImageClassificationEvent {
  // Image data e.g. URL
  ImageData image_data = 1;
  // classifications result
  ImageRecognitionResponse resp = 2;
}
