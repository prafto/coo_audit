syntax = "proto3";

package dasher_handoffs_service.on_dash_intelligence.v1;

import "common/common.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/doordash/services-protobuf/generated/dasher_handoffs_service/on_dash_intelligence/v1";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.dasher_handoffs_service.on_dash_intelligence.proto";

//  unassigned
//  picking_up
//  waiting_at_pickup
//  dropping_off

// types of Dx current status
enum CurrentStatusType {
  // default
  CURRENT_STATUS_TYPE_UNSPECIFIED = 0;
  // Dx is looking for orders (unassigned)
  CURRENT_STATUS_TYPE_LOOKING_FOR_ORDERS = 1;
  // Dx is going to the Mx to pickup (D2R)
  CURRENT_STATUS_TYPE_PICKING_UP = 2;
  // Dx is waiting at the Mx for the order
  CURRENT_STATUS_TYPE_WAITING_AT_PICKUP = 3;
  // Dx is going to the customer to drop off the order (R2C)
  CURRENT_STATUS_TYPE_GOING_TO_CUSTOMER = 4;
  // Dx is performing the drop off at the customer location
  CURRENT_STATUS_TYPE_DROPPING_OFF = 5;
}

// The OnDasherDetails summary is the output of FinkOnDashIntelligence,
// It provides the latest snapshot of the Dx location after the raw locations
// have been processed, normalized and enriched with additional deliveyr information.
//
// This is the main input to USF stream processing for real-time dasher monitoring.
message OnDashDetailsSummary {
  // The id of the dasher
  string dasher_id = 1;

  // used for deprecated field numbers
  reserved 2;
  reserved "dasher_location";

  // Latitude value, Between -90° and 90°
  double lat = 3;

  // Longitude value, Between -180° and 180°
  double lng = 4;

  // The time when the location was recorded
  google.protobuf.Timestamp location_timestamp = 5;

  // Speed in meters/second over ground of the dasher at the location
  double speed = 6;

  // Altitude compared to sea level, in m.
  // Positive if above sea level, negative if below it. Reported as 0 if unavailable (along with -1 for vertical_accuracy)
  double altitude = 7;

  // The direction of movement, in degrees, compared to true North. Between 0° and 359.9°; -1 indicates unavailable
  double course = 8;

  // The id of the device
  string device_id = 9;

  // The type of the device
  string device_type = 10;

  // Is the location mock location
  bool is_mock = 11;

  // Is the location from active device
  bool is_from_active_device = 12;

  // The current state of the Dx while generating this location.
  CurrentStatusType current_status = 13;

  // The UUID of the delivery that is being serviced by the Dx while generating this location.
  string delivery_uuid = 14;
}

// The OnDashDetailsEvent message is used to send the OnDashDetails to Iguazu when
// the stream processing (on-dash-intelligence or USF) detects specific real-time dasher behavior.
//
// Different types of events are annotated with the corresponding {event_context} and {event_type}
//
// NOTE: IF YOU ARE ADDING FIELDS/COLUMNS WITH USER PERSONALLY IDENTIFIABLE INFORMATION, PLEASE FOLLOW THIS
// DOCUMENTATION IN ORDER TO ENSURE CCPA COMPLIANCE:
// https://doordash.atlassian.net/wiki/spaces/Eng/pages/3160834089/Making+Datalake+Table+CCPA+Compliant
message OnDashDetailsEvent {
  option (common.dataframe_transformations) = "pii_obfuscation";

  // The id of the dasher
  string dasher_id = 1 [(common.pii_type) = "DASHER_ID"];

  // The id of the main device
  string main_device_id = 2 [(common.pii_type) = "DEVICE_ID"];

  // The type of the main device
  string main_device_type = 3;

  // The source provider for the main device information
  string main_device_source = 4;

  // Is the location mock location
  bool spoofing_is_mock = 5;

  // Latitude value, Between -90° and 90°
  double lat = 6;

  // Longitude value, Between -180° and 180°
  double lng = 7;

  // geohash of the location
  string geohash = 8;

  // The time when the location was recorded
  google.protobuf.Timestamp location_timestamp = 9 [(common.timestamp_granularity) = "TIMESTAMP_PROTOBUF"];

  // Accuracy of lateral position, expressed as meters radius of 68% confidence.
  // https://developer.android.com/reference/android/location/Location#getAccuracy()
  double horizontal_accuracy = 10;

  // The id of the device
  string location_device_id = 11 [(common.pii_type) = "DEVICE_ID"];

  // The type of the device
  string location_device_type = 12;

  // Is the location from active device
  bool is_from_active_device = 13;

  // Speed in meters/second over ground of the dasher at the location
  double speed = 14;

  // Event context
  string event_context = 15;

  // Event type
  string event_type = 16;

  // Event metadata
  string event_metadata = 17;

  // Altitude compared to sea level, in m.
  // Positive if above sea level, negative if below it. Reported as 0 if unavailable (along with -1 for vertical_accuracy)
  double altitude = 18;

  // The direction of movement, in degrees, compared to true North. Between 0° and 359.9°; -1 indicates unavailable
  double course = 19;

  // The current state of the Dx while generating this location.
  // values:
  //  unassigned
  //  picking_up
  //  waiting_at_pickup
  //  dropping_off
  string current_status = 20;

  // The UUID of the delivery that is being serviced by the Dx while generating this location.
  string delivery_uuid = 21;
}

// The DasherLocationEvent are location persisted to datalake when the backend receives them from the mobile devices.
//
// NOTE: IF YOU ARE ADDING FIELDS/COLUMNS WITH USER PERSONALLY IDENTIFIABLE INFORMATION, PLEASE FOLLOW THIS
// DOCUMENTATION IN ORDER TO ENSURE CCPA COMPLIANCE:
// https://doordash.atlassian.net/wiki/spaces/Eng/pages/3160834089/Making+Datalake+Table+CCPA+Compliant
message DasherLocationEvent {
  option (common.dataframe_transformations) = "pii_obfuscation";

  // The id of the dasher
  string dasher_id = 1 [(common.pii_type) = "DASHER_ID"];

  // Latitude value, Between -90° and 90°
  double lat = 2;

  // Longitude value, Between -180° and 180°
  double lng = 3;

  // The magnitude of Dx speed, in m/s; -1 indicates unavailable
  double speed = 4;

  // The direction of movement, in degrees, compared to true North. Between 0° and 359.9°; -1 indicates unavailable
  double course = 5;

  // Altitude compared to sea level, in m.
  // Positive if above sea level, negative if below it. Reported as 0 if unavailable (along with -1 for vertical_accuracy)
  double altitude = 6;

  // Accuracy of lateral position, expressed as meters radius of 68% confidence.
  // https://developer.android.com/reference/android/location/Location#getAccuracy()
  double h_accuracy = 7;

  // Accuracy of vertical position, expressed as meters radius of 68% confidence.
  // https://developer.android.com/reference/android/location/Location#getVerticalAccuracyMeters()
  double v_accuracy = 8;

  // The time when the location was recorded
  google.protobuf.Timestamp time = 9 [(common.timestamp_granularity) = "TIMESTAMP_PROTOBUF"];

  // The time when the location was recorded
  string time_varchar = 10;

  // The Dx device type that generated this location
  // values:
  //  ios
  //  android
  string device_type = 11;

  // Type of motion
  // Possible values:
  //  on_foot (walking or running)
  //  automotive
  //  cycling
  //  unknown
  //  stationary*
  //  <new state for robot>
  // https://developers.google.com/android/reference/com/google/android/gms/location/DetectedActivity
  string motion_type = 12;

  // Score of 0-100 that indicates the confidence of the motion type prediction
  string motion_type_confidence = 13;

  // Optional vehicle Id. This is a field to be used by DD lands with its fleet robot and third party driverless vehicles.
  string vehicle_id = 14;

  // What type of vehicle is the dasher using. This is a Doordash controlled id.
  string vehicle_category_id = 15;

  // The Shift ID of the Dx while generating this location.
  string shift_id = 16;

  // The current state of the Dx while generating this location.
  // values:
  //  unassigned
  //  picking_up
  //  waiting_at_pickup
  //  dropping_off
  string current_status = 17;

  // The UUID of the delivery that is being serviced by the Dx while generating this location.
  string delivery_uuid = 18;

  // The id of the device that generated this location.
  string device_id = 19 [(common.pii_type) = "DEVICE_ID"];

  // used for deprecated field numbers
  reserved 20;
  // used for deprecated field names
  reserved "country_id";

  // 2 letter Country shortname https://admin-gateway.doordash.com/tools/forward/country
  string country_code = 21;

  // The dd market for the reporting Dx https://admin-gateway.doordash.com/tools/forward/market
  int32 market_id = 22;

  // The time when the location was processed in the backend
  google.protobuf.Timestamp processed_timestamp = 23 [(common.timestamp_granularity) = "TIMESTAMP_PROTOBUF"];

  // Hashcode of the generated record, can be helpful in identifying duplicates
  int32 record_hashcode = 24;
}

//------------------
//--- DEPRECATED ---
//------------------
// The OnDasherDetails message is used to send the location details of the dasher with the main device detected
message OnDashDetails {
  // The location list of the dasher
  repeated DasherLocation dasher_locations = 1;

  // Context information about the current dasher
  DasherContext dasher_context = 2;
}

//------------------
//--- DEPRECATED ---
//------------------
// The DasherLocation message is used to send the location details of the dasher
message DasherLocation {
  // Latitude value, Between -90° and 90°
  double lat = 1;

  // Longitude value, Between -180° and 180°
  double lng = 2;

  // The time when the location was recorded
  google.protobuf.Timestamp location_timestamp = 3;

  // Accuracy of lateral position, expressed as meters radius of 68% confidence.
  // https://developer.android.com/reference/android/location/Location#getAccuracy()
  double horizontal_accuracy = 5;

  // Accuracy of vertical position, expressed as meters radius of 68% confidence.
  // https://developer.android.com/reference/android/location/Location#getVerticalAccuracyMeters()
  double vertical_accuracy = 6;

  // GPS provider for the location
  // https://developer.android.com/reference/android/location/Location.html#getProvider()
  string provider = 7;

  // The id of the device
  string device_id = 8;

  // The type of the device
  string device_type = 9;

  // Is the location mock location
  bool is_mock = 10;

  // Is the location from active device
  bool is_from_active_device = 11;

  // Speed in meters/second over ground of the dasher at the location
  double speed = 12;
}

//------------------
//--- DEPRECATED ---
//------------------
// The DasherContext message is used to send the context details of the dasher
message DasherContext {
  // The id of the dasher
  string dasher_id = 1;

  // The main device info of the dasher
  DasherMainDeviceInfo dasher_main_device_info = 2;
}

//------------------
//--- DEPRECATED ---
//------------------
// The DasherMainDeviceInfo message is used to send the main device details of the dasher
message DasherMainDeviceInfo {
  // The id of the main device
  string device_id = 1;

  // The type of the main device
  string device_type = 2;

  // The source provider for the main device information
  SourceProvider source_provider = 3;
}

//------------------
//--- DEPRECATED ---
//------------------
// Enum representing the different sources for determining the main device
enum SourceProvider {
  // How to choose the main device is not specified
  SOURCE_PROVIDER_UNSPECIFIED = 0;

  // Main Device selected randomly
  SOURCE_PROVIDER_RANDOM = 1;

  // First Device selected
  SOURCE_PROVIDER_FIRST_DEVICE = 2;

  // Source from Account Compliance Service
  SOURCE_PROVIDER_ACCOUNT_COMPLIANCE_SERVICE = 3;

  // Most consistent device selected
  SOURCE_PROVIDER_MOST_CONSISTENT_DEVICE = 4;
}
