syntax = "proto3";

// buf:lint:ignore DIRECTORY_SAME_PACKAGE
// buf:lint:ignore PACKAGE_VERSION_SUFFIX
package com.doordash.drive.grpc.admin.v1.stores.api;

import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option java_generic_services = true;
option java_multiple_files = true;
// It is suggested to start package name with com.doordash.drive.grpc
// The reason is that, a message name might be conflict with a class name defined in application code,
// without the name "rpc", it would be hard to pick the correct one from the hints provided by your IDE.
option java_package = "com.doordash.drive.grpc.admin.v1.stores.api";

// base service
service StoreApiService {
  // Create or update a store
  rpc CreateOrUpdateStore(CreateOrUpdateStoreRequest) returns (CreateOrUpdateStoreResponse);
  // Update a store
  rpc UpdateStore(UpdateStoreRequest) returns (UpdateStoreResponse);
  // Get a store
  rpc GetStore(GetStoreRequest) returns (GetStoreResponse);
  // Get all stores under a business using either external biz id or internal mds id
  rpc ListStoresByBusiness(ListStoresByBusinessRequest) returns (ListStoresByBusinessResponse);
  // Onboard Existing Merchant Portal Mx to Drive
  rpc OnboardExistingMxStore(OnboardExistingMxStoreRequest) returns (OnboardExistingMxStoreResponse);
}

// Create or Update store request object
message CreateOrUpdateStoreRequest {
  // Developer Id, required for Integrated Mx
  int64 developer_id = 1;
  // External business ID, required for Integrated Mx
  string external_business_id = 2;
  // Internal business ID
  google.protobuf.Int64Value doordash_business_id = 4;
  // store input object
  CreateOrUpdateStoreRequestStoreInput store_input = 3;
  // disable force update
  google.protobuf.BoolValue disable_update = 5;
}

// store creation object
message CreateOrUpdateStoreRequestStoreInput {
  // Test store or not, by default will be set to false
  bool is_test = 1;
  // External Store ID, required for Integrated Mx
  string external_store_id = 2;
  // store name
  string name = 3;
  // store address
  string address = 4;
  // status of the store
  StoreStatus status = 5;
  // list of contact emails
  repeated Emails emails = 6;
  // store phone-number
  google.protobuf.StringValue phone_number = 7;
  // creation method
  CreationMethod creation_method = 8;
}

// holds email details
message Emails {
  // contact email
  google.protobuf.StringValue contact_emails = 6;
}

// Create Store response object
message CreateOrUpdateStoreResponse {
  // return either error or data
  oneof result {
    // error code
    Error error = 1;
    // data
    Store data = 2;
  }
}

// different creation methods for stores
enum CreationMethod {
  // unknown method for store creation
  CREATION_METHOD_UNSPECIFIED = 0;
  // store created through auto onboarding
  CREATION_METHOD_DRIVE_AUTO_ONBOARDING = 1;
  // store created through salesforce auto onboarding
  CREATION_METHOD_DRIVE_SALESFORCE_AUTO_ONBOARDING = 2;
  // store created through csv uploader
  CREATION_METHOD_CSV_UPLOADER = 3;
  // store created through admin api
  CREATION_METHOD_DRIVE_PUBLIC_ADMIN_API = 4;
  // store created through self serve onboarding
  CREATION_METHOD_DRIVE_SELF_SERVE_ONBOARDING = 5;
  // store created through parcel auto onboarding
  CREATION_METHOD_PARCEL_AUTO_ONBOARDING = 6;
}

// Update Store request object, all fields optional except
message UpdateStoreRequest {
  // Developer Id, required
  int64 developer_id = 1;
  // External ID
  string external_business_id = 2;
  // update store input
  UpdateStoreRequestStoreInput store_input = 3;
}

// store update object
message UpdateStoreRequestStoreInput {
  // Test store or not, required
  bool is_test = 1;
  // External Store ID, required
  string external_store_id = 2;
  // store name
  google.protobuf.StringValue name = 3;
  // store address
  google.protobuf.StringValue address = 4;
  // status of the store
  StoreStatus status = 5;
  // list of contact emails
  repeated Emails emails = 6;
  // store phone-number
  google.protobuf.StringValue phone_number = 7;
}

// Update Store response object
message UpdateStoreResponse {
  // return either error or data
  oneof result {
    // error code
    Error error = 1;
    // data
    Store data = 2;
  }
}

// Get Store request object
message GetStoreRequest {
  // Developer Id, required
  int64 developer_id = 1;
  // External Biz ID, required
  string external_business_id = 2;
  // External Store ID, required
  string external_store_id = 3;
}

// Get Store response object
message GetStoreResponse {
  // return either error or data
  oneof result {
    // error code
    Error error = 1;
    // data
    Store data = 2;
  }
}

// All stores under a given developer and external business request
message ListStoresByBusinessRequest {
  // api can be invoked with one of these forms of business-id
  oneof business_id_input {
    // internal biz ID, mds id, unique across DD
    google.protobuf.Int64Value mds_business_id = 2;
    // ext biz id resolution needs dev id + ext biz id since ext biz id is unique per developer only
    DeveloperRequest developer_request = 3;
  }
  // continuation token string. for first request it will be null
  google.protobuf.StringValue continuation_token = 4;
  // Store status
  StoreStatus status = 5;
}

// attributes to be passed in for developer request
message DeveloperRequest {
  // Use external business id, developer id for clients which will not have access to internal business semantics
  google.protobuf.StringValue external_business_id = 1;
  // developer id
  google.protobuf.Int64Value developer_id = 2;
}

// All stores under a given developer and external business response
message ListStoresByBusinessResponse {
  // data
  repeated Store stores = 1;
  // continuation token
  google.protobuf.StringValue continuation_token = 2;
  // result list length
  google.protobuf.Int64Value result_count = 3;
}

// Onboard existing Mx store to Drive Request
message OnboardExistingMxStoreRequest {
  // doordash business ID, required
  int64 doordash_business_id = 1;
  // doordash store ID, required
  int64 doordash_store_id = 2;
  // user ID
  google.protobuf.Int64Value user_id = 3;
}

// Onboard existing Mx store to Drive Response
message OnboardExistingMxStoreResponse {
  // return either error or data
  oneof result {
    // error code
    Error error = 1;
    // data
    Store data = 2;
  }
}

// result for lists api
message Result {
  // data
  repeated Store stores = 1;
  // continuation token
  google.protobuf.StringValue continuation_token = 2;
  // result list length
  int64 result_count = 3;
}

// base type
message Store {
  // Developer UUID, optional (jwt/developer portal concepts only)
  google.protobuf.StringValue developer_uuid = 1;
  // developer id, required
  int64 developer_id = 2;
  // Test store or not, required
  bool is_test = 3;
  // Internal business ID
  int64 doordash_business_id = 4;
  // external store ID
  string external_store_id = 5;
  // doordash store ID aka our internal ID
  int64 doordash_store_id = 6;
  // name of store
  string name = 7;
  // status of the store
  StoreStatus status = 8;
  // Timestamp of creation date
  google.protobuf.Timestamp created_at = 9;
  // timestamp of last updated
  google.protobuf.Timestamp last_updated_at = 10;
  // list of contact emails
  repeated Emails emails = 11;
  // store phone number
  google.protobuf.StringValue phone_number = 12;
  // store address
  google.protobuf.StringValue address = 13;
  // external business id
  string external_business_id = 14;
  // store creation method
  CreationMethod creation_method = 15;
}

// holds store status
enum StoreStatus {
  // change nothing, no operation
  STORE_STATUS_UNSPECIFIED = 0;
  // store is active
  STORE_STATUS_ACTIVE = 1;
  // For any reason, MWP or MX choose to turn off the store
  STORE_STATUS_INACTIVE = 2;
}

// base error message
message Error {
  /**
   * Why not just use grpc-status-code:
   * - Grpc code and http code is not 1:1 mapping.
   * - Extra message is hard to be transfered with grpc error, in a well controlled manner.
   * - A grpc error sometiems means the client side needs to retry, it cannot handle the case that
   *   server side really wants to return a 500 error.
   * - Grpc-status-code is less explicit
   */
  enum ErrorCode {
    // base error code, unmapped
    ERROR_CODE_INTERNAL_ERROR_UNSPECIFIED = 0;
    // entity not found
    ERROR_CODE_NOT_FOUND = 1;
    // failed validation
    ERROR_CODE_INVALID_REQUEST = 2;
    // auth problem
    ERROR_CODE_UNAUTHORIZED = 3;
  }

  // enum error encountered
  ErrorCode error_code = 1;
  // human readable message
  google.protobuf.StringValue error_details = 2;
}
