syntax = "proto3";

option java_multiple_files = true;
option java_generic_services = true;
option java_package = "com.doordash.drive.api";
option java_outer_classname = "Stores";
option objc_class_prefix = "HLW";
// buf:lint:ignore DIRECTORY_SAME_PACKAGE
package com.doordash.drive.api;

import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "drive_protobuf/common.proto";
import "drive_protobuf/drive_data.proto";
import "drive_protobuf/drive_request_contexts.proto";

// Implemented in Drive Service StoreApi
service StoresService {
  rpc GetStoreById (StoreByIdRequest) returns (StoreResponse);
  rpc CreateStore(StoreCreatRequest) returns (StoreResponse);  //not implemented
  rpc GetStoreByDoorstepId (StoreByIdRequest) returns (StoreResponse);
  rpc GetStoresByDoorstepStoreIds(GetStoresByDoorstepStoreIdsRequest) returns (GetStoresByDoorstepStoreIdsResponse);
  rpc UpdateDriveStoreByDoorstepId(UpdateDriveStoreByDoorstepIdRequest) returns (StoreResponse);
  rpc GetPartnershipRequest(StoreByIdRequest) returns (drive_data_service.DrivePartnership);
  rpc GetDeveloperInfoByDoorstepBusinessId (GetDeveloperInfoByDoorstepBusinessIdRequest) returns (GetDeveloperInfoByDoorstepBusinessIdResponse);

  // Store Id Mapping
  rpc GetExternalStoreIdMapping(DriveExternalStoreIdMappingRequest) returns (DriveExternalStoreIdMappingResponse);
  rpc UpdateExternalStoreIdMapping(DriveExternalStoreIdMappingUpdate) returns (DriveExternalStoreIdMapping);
  rpc CreateExternalStoreIdMapping(DriveExternalStoreIdMapping) returns (DriveExternalStoreIdMapping);
}

message StoreByIdRequest {
  string storeId = 1;
}

message StoreByDoorstepIdRequest {
  int64 doorstepId = 1;
}

message UpdateDriveStoreByDoorstepIdRequest {
  // find drive store by doorstep_store_id, then update account id in drive store
  int64 doorstep_store_id = 1; // required
  google.protobuf.StringValue account_id = 2;
}

message StoreCreatRequest {
  string storeId = 1;
  string accountId = 2;
  int64 doorstepStoreId = 3;
  string notificationsPhoneNumber = 4;
}

message GetDeveloperInfoByDoorstepBusinessIdRequest {
  int64 doorstepBusinessId = 1;
}

message GetDeveloperInfoByDoorstepBusinessIdResponse {
  repeated DeveloperInfo developerInfos = 1;
}

message GetStoresByDoorstepStoreIdsRequest {
  // Merchant store IDs to get drive stores.
  repeated int64 store_ids = 1;
  // Store options to include extra data. By default, everything will be false.
  GetStoreOptions store_options = 2;
  // Additional request context data to describe the request itself
  com.doordash.drive.api.request_contexts.v1.RequestSubmissionContext submission_context = 3;
}

// Options to include additional data for a store.
message GetStoreOptions {
    // Whether we want to include drive active drive partnerships of the stores.
    bool include_drive_partnerships = 1;
    // Whether we want to include catering setup instructions.
    bool include_catering_setup_instructions = 2;
    // Whether we want to include data on the drive account pertaining to the store. e.g. doorstepBusinessId
    bool include_drive_account = 3;
    // Whether we want to include available payment methods for the stores.
    bool include_payment_method_details = 4;
    // Whether we want to include alcohol-related details for the stores.
    bool include_alcohol_details = 5;
}

message GetStoresByDoorstepStoreIdsResponse {
  // Map of doorstep store ids to the store details.
  map<int64, StoreDetails> doorstep_store_ids_to_stores = 1;
}

message StoreDetails {
  // Contains store data from stores model.
  StoreResponse store = 1;
  // Contains active drive partnerships for the stores.
  repeated drive_data_service.DrivePartnership partnerships = 2;
  // Contains catering setup instructions for the store.
  CateringSetupInstructions catering_setup_instructions = 3;
  // Contains payment method details for the store.
  PaymentMethodDetails payment_method_details = 4;
  // Contains details about the store's alcohol-related details
  AlcoholDetails alcohol_details = 5;
}

message CateringSetupInstructions {
  // Image url for catering setup instructions.
  google.protobuf.StringValue image_url = 1;
}

// Describes an entity's payment method settings
message PaymentMethodDetails {
  message InvoiceDetails {
    // Whether or not invoicing is active/ready to use
    bool is_active = 1;
  }

  message CreditCardDetails {
    // Whether or not credit card is active/ready to use or not
    bool is_active = 1;
  }

  message PaymentWithholdingDetails {
    // Whether or not payment witholding is active/ready to use
    bool is_active = 1;
  }

  // Invoicing payment method details
  InvoiceDetails invoice = 1;
  // Credit card payment method details
  CreditCardDetails credit_card = 2;
  // Payment withholding payment method details
  PaymentWithholdingDetails payment_withholding = 3;
}

// Describes an entity's alcohol-related settings
message AlcoholDetails {
  bool is_active = 1;
}

message DeveloperInfo {
  int64 developerId = 1;
  bool isInvoicedToAggregator = 2;
  google.protobuf.Timestamp createdAt = 3;
}

message StoreResponse {
  string storeId = 1;
  string accountId = 2;
  int64 doorstepStoreId = 3;
  google.protobuf.StringValue notificationsPhoneNumber = 4;
  google.protobuf.Timestamp createdAt = 5;
  google.protobuf.Timestamp updatedAt = 6;
  drive_data_service.AddressResponse address = 7;
  drive_data_service.AddressResponse cateringPickupAddress = 8;
  google.protobuf.Int64Value doorstepBusinessId = 9;
  google.protobuf.StringValue name = 10;
  drive.common.StoreDeactivationStatus status = 11;
  repeated drive.common.ReasonsForDeactivation reasons_for_deactivation = 12;
}

message DriveExternalStoreIdMapping {
  google.protobuf.Int64Value business_id = 1;
  google.protobuf.Int64Value store_id = 2;
  google.protobuf.StringValue external_store_id = 3;
}

message DriveExternalStoreIdMappingRequest {
  // set at least one for GET request
  google.protobuf.Int64Value store_id = 1;
  google.protobuf.StringValue external_store_id = 2;
  google.protobuf.Int64Value business_id = 3;
}

message DriveExternalStoreIdMappingUpdate {
  // set at least one property (you want to filter the object by the properties)
  DriveExternalStoreIdMappingRequest request = 1;

  // only set the properties you want to update, store_id cannot be updated because it's PK
  google.protobuf.StringValue new_external_store_id = 2;
  google.protobuf.Int64Value new_business_id = 3;
}

message DriveExternalStoreIdMappingResponse {
  repeated DriveExternalStoreIdMapping external_store_id_mappings = 1;
}


