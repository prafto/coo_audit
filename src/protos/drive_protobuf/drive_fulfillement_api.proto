syntax = "proto3";

// buf:lint:ignore DIRECTORY_SAME_PACKAGE
package drive_service.fulfillment_api.v1;

import "drive_protobuf/drive_data.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.drive.fulfillmentApi.v1";

// Fulfillment service
service DriveFulfillmentService {
  // Service method get all the items with settings
  rpc GetItemsWithSettings(GetItemsWithSettingsRequest) returns (GetItemsWithSettingsResponse);

  // Service method to update the delivery items.
  rpc UpdateItems(UpdateItemsRequest) returns (UpdateItemsResponse);

  // Service to add dasher pizza bag from mx portal
  rpc MerchantEquippedDasherPizzaBag(MerchantEquippedDasherPizzaBagRequest) returns (MerchantEquippedDasherPizzaBagResponse);

  // Service to modify dasher equipment from mx portal
  rpc MerchantUnEquippedDasherPizzaBag(MerchantUnEquippedDasherPizzaBagRequest) returns (MerchantUnEquippedDasherPizzaBagResponse);

  // Service to create delivery receipt view post
  rpc DeliveryReceiptListViewPost(DeliveryReceiptListViewPostRequest) returns (DeliveryReceiptListViewPostResponse);

  // Service to create shift receipt view post
  rpc ShiftReceiptListViewPost(ShiftReceiptListViewPostRequest) returns (ShiftReceiptListViewPostResponse);

  // Service method to get barcode status info
  rpc GetDeliveryItemBarcodeStatus(GetDeliveryItemBarcodeStatusRequest) returns (GetDeliveryItemBarcodeStatusResponse);

  // Fetch the allergen info for a given delivery
  rpc GetDeliveryAllergenItems(GetDeliveryAllergenItemsRequest) returns (GetDeliveryAllergenItemsResponse);

  // Unassigns all deliveries assigned to a dasher shift (could be single or multiple packages/batches)
  rpc UnassignDeliveriesFromShift(UnassignDeliveriesFromShiftRequest) returns (UnassignDeliveriesFromShiftResponse);
}

// Request for Get delivery allergen items
message GetDeliveryAllergenItemsRequest {
  // delivery id to get the default for
  google.protobuf.Int64Value delivery_id = 1;
}

// Response for get delivery allergen items
message GetDeliveryAllergenItemsResponse {
  // delivery id to get the allergen items for
  google.protobuf.Int64Value delivery_id = 1;
  // list of delivery allergen items
  repeated DeliveryAllergenItem items = 2;
}

// Allergen item for GetDeliveryAllergenItems
message DeliveryAllergenItem {
  // name of the allergen item
  google.protobuf.StringValue name = 1;
  // description of the delivery item
  google.protobuf.StringValue description = 2;
  // quantity of the item
  google.protobuf.Int64Value quantity = 3;
}

// Request for delivery receipt list view post
message DeliveryReceiptListViewPostRequest {
  // delivery Id
  google.protobuf.Int64Value delivery_id = 1;
  // input tip amount of dasher, minimum value should be 0
  google.protobuf.Int64Value dasher_input_tip_amount = 2;
  // string value of image_url, required
  google.protobuf.StringValue image_url = 3;
  // string value of the recipient name, allow blank
  google.protobuf.StringValue recipient_name = 4;
  // string value of the verification guess
  google.protobuf.StringValue verification_guess = 5;
  // string value of the relationship type, optional, allow blank
  google.protobuf.StringValue relationship_type = 6;
  // description of relationship, optional, allow blank
  google.protobuf.StringValue relationship_description = 7;
}

// Success Response for delivery receipt list view post
message DeliveryReceiptListViewPostSuccessResponse {
  // delivery receipt serializer id
  google.protobuf.Int64Value id = 1;
  // dasher id
  google.protobuf.Int64Value dasher_id = 2;
  // input tip amount of dasher, minimum value should be 0
  google.protobuf.Int64Value dasher_input_tip_amount = 3;
  // string value of image_url, required
  google.protobuf.StringValue image_url = 4;
  // string value of the recipient name, allow blank
  google.protobuf.StringValue recipient_name = 5;
  // string value of the relationship type, optional, allow blank
  google.protobuf.StringValue relationship_type = 6;
  // description of relationship, optional, allow blank
  google.protobuf.StringValue relationship_description = 7;
  // boolean value indicating viewed by merchant or not
  google.protobuf.BoolValue viewed_by_merchant = 8;
}

// Response for delivery receipt list view post
message DeliveryReceiptListViewPostResponse {
  // success response for DeliveryReceiptListViewPost
  DeliveryReceiptListViewPostSuccessResponse success_response = 1;
  // error response for DeliveryReceiptListViewPost
  drive_data_service.ErrorResponse error_response = 2;
}

// Request for shift receipt list view post
message ShiftReceiptListViewPostRequest {
  // opportunity uuid
  google.protobuf.StringValue opportunity_id = 1;
  // shift Id
  google.protobuf.Int64Value shift_id = 2;
  // string value of image_url, required
  google.protobuf.StringValue image_url = 3;
  // string value of the recipient name, required
  google.protobuf.StringValue recipient_name = 4;
  // dasher id
  google.protobuf.Int64Value dasher_id = 5;
  // store_id
  google.protobuf.Int64Value store_id = 6;
}

// Success Response for shift receipt list view post
message ShiftReceiptListViewPostResponse {
  // shift id
  google.protobuf.Int64Value shift_id = 1;
  // dasher id
  google.protobuf.Int64Value dasher_id = 2;
  // opportunity uuid
  google.protobuf.StringValue opportunity_id = 3;
  // string value of image_url, required
  google.protobuf.StringValue image_url = 4;
  // string value of the recipient name, allow blank
  google.protobuf.StringValue recipient_name = 5;
  // store_id
  google.protobuf.Int64Value store_id = 6;
}

// Request for pizza bag
message MerchantEquippedDasherPizzaBagRequest {
  // id of the delivery being equipped
  int64 delivery_id = 1;
}

// Response for the pizza bag
message MerchantEquippedDasherPizzaBagResponse {
  // boolean true or false result
  bool equipped = 1;
}

// Request to unequip a pizza bag from a delivery
message MerchantUnEquippedDasherPizzaBagRequest {
  // id of the delivery being removed for a bag being returned
  int64 delivery_id = 1;
}

// Response to unequip a pizza bag from a delivery
message MerchantUnEquippedDasherPizzaBagResponse {
  // boolean true or false result
  bool unequipped = 1;
}

// Item message
message Item {
  // Value of the barcode.  Note international barcodes can be alphanumeric
  google.protobuf.StringValue barcode = 1;
  // Id of the item.
  google.protobuf.Int64Value id = 2;
  // Flag to mark it as damaged
  google.protobuf.BoolValue is_damaged = 3;
  // Flag for scan status
  google.protobuf.StringValue scan_status = 4;
  // Name of the item
  google.protobuf.StringValue name = 5;
  // Description of the item
  google.protobuf.StringValue description = 6;
}

// Update items request
message UpdateItemsRequest {
  // Uuid for the delivery.
  google.protobuf.StringValue delivery_id = 1;
  // List of updated items.
  repeated Item items = 2;
  // Use case related to updating the delivery items
  UpdateItemsUseCase use_case = 3;

  // Types of use cases for updating
  enum UpdateItemsUseCase {
    // Default case
    // Note: For backwards compatibility of this new enum type
    // This will be used for chain of custody case where update of items is done by delivery_id + barcode
    UPDATE_ITEMS_USE_CASE_UNSPECIFIED = 0;
    // chain of custody case where update of items is done by delivery_id + barcode
    UPDATE_ITEMS_USE_CASE_CHAIN_OF_CUSTODY_SCANNING = 1;
    // Indicates that scan was done to capture barcode associated to the delivery item (barcode is null before this update)
    // Update of items is done by delivery_id + id of item
    UPDATE_ITEMS_USE_CASE_SCAN_TO_CAPTURE_BARCODE = 2;
  }
}

// Item request response
message UpdateItemsResponse {
  // List of items
  repeated Item items = 1;
}

// Item request
message GetItemsWithSettingsRequest {
  // Uuid for the delivery
  google.protobuf.StringValue delivery_id = 1;
}

// Item request response
message GetItemsWithSettingsResponse {
  // List of items
  repeated Item items = 1;
  // Flag to allow for overage scanning
  google.protobuf.BoolValue is_overage_scanning_allowed_at_pickup = 2;
  // Flag for minimum scanning requirement
  google.protobuf.BoolValue scan_at_least_one_item = 3;
}

// Barcode status request
message GetDeliveryItemBarcodeStatusRequest {
  // Item barcode
  string barcode = 1;
}

// Barcode status response
message GetDeliveryItemBarcodeStatusResponse {
  // Status for barcode
  enum BarcodeStatus {
    // unspecified status
    BARCODE_STATUS_UNSPECIFIED = 0;
    // status exist
    BARCODE_STATUS_EXIST = 1;
    // status nonexist
    BARCODE_STATUS_NONEXIST = 2;
  }

  // Barcode status
  BarcodeStatus barcode_status = 1;

  // Delivery ID
  google.protobuf.Int64Value delivery_id = 2;
}

// DeliveryUnassignmentInfo to hold information about each delivery
message DeliveryUnassignmentInfo {
  // delivery_id
  int64 delivery_id = 1;
  // assignment service package_id of the delivery
  int64 package_id = 2;
  // optional comment
  google.protobuf.StringValue comment = 3;
}

// Request for UnassignDeliveriesFromShift
message UnassignDeliveriesFromShiftRequest {
  // shift_id of dasher that delivery is assigned to
  int64 shift_id = 1;
  // Reason for unassign
  google.protobuf.StringValue reason = 2;
}

// Response for UnassignDeliveriesFromShift
message UnassignDeliveriesFromShiftResponse {
  // List of deliveries successfully unassigned
  repeated DeliveryUnassignmentInfo success_deliveries = 1;
  // List of deliveries failed to get unassigned
  repeated DeliveryUnassignmentInfo failed_deliveries = 2;
}
