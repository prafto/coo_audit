syntax = "proto3";
package doordash.retail.fulfillment.planning_service.v1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.retail.fulfillment";

/*
   Kafka message proto for fulfillment_plan_events topic
*/
message FulfillmentPlanEvent {
  // uuid of the cx order
  google.protobuf.StringValue order_uuid = 1;
  // uuid of the cx cart
  google.protobuf.StringValue cx_cart_uuid = 7;
  // create time of this event
  google.protobuf.Timestamp created_at = 2;
  // fulfillment event context
  FulfillmentPlanEventContext fulfillment_plan_event_context = 6;
  // parent consumer order uuid
  google.protobuf.StringValue parent_consumer_order_uuid = 12;
  // event_payload
  oneof event_payload {
    // event will be triggered when cx order is created
    CxOrderCreatedEvent cx_order_created_event = 3;
    // event will be triggered when cx order is canceled
    CxOrderCanceledEvent cx_order_canceled_event = 4;
    // event will be triggered when cx order is adjusted
    CxOrderAdjustedEvent cx_order_adjusted_event = 5;
    // event will be triggered when cx cart is created
    CreateCxCartSuccessEvent create_cx_cart_success_event = 8;
    // event will be triggered when mx order is fulfilled
    MxOrderFulfilledEvent mx_order_fulfilled_event = 11;
    // event will be triggered when mx order is cancelled
    MxOrderCancelledEvent mx_order_cancelled_event = 14;
    // event will be triggered when refresh is needed
    RefreshAlternatePlansEvent refresh_alternate_plans_event = 9;
    // event will be triggered when deep red store change is made
    OptimizerPlanChangeEvent optimizer_plan_change_event = 10;
    // event will be triggered when a delivery is picked up
    DeliveryPickedUpEvent delivery_picked_up_event = 13;
    // event will be triggered when an RFS OCA event has been completed
    OrderCartAdjustmentCompletedEvent order_cart_adjustment_completed = 15;
    // event will be triggered when cx cart is updated
    UpdateCxCartSuccessEvent update_cx_cart_success_event = 16;
  }
}

// event will be triggered when cx order is created
message CxOrderCreatedEvent {
  // the time that cx order is created
  google.protobuf.Timestamp order_created_at = 1;
  // order version
  google.protobuf.Int64Value order_version = 2;
}

// event will be triggered when cx order is canceled
message CxOrderCanceledEvent {
  // the time that cx order is canceled
  google.protobuf.Timestamp order_canceled_at = 1;
  // order version
  google.protobuf.Int64Value order_version = 2;
}

// event will be triggered when cx order is adjusted
message CxOrderAdjustedEvent {
  // the time that cx order is canceled
  google.protobuf.Timestamp order_adjusted_at = 1;
  // order version
  google.protobuf.Int64Value order_version = 2;
}

// event will be triggered when mx order is cancelled
message MxOrderCancelledEvent {
  // delivery uuid of the mx order
  google.protobuf.StringValue mx_delivery_uuid = 1;
}

// event will be triggered when cx cart is created
message CreateCxCartSuccessEvent {}

// event will be triggered when cx cart is updated
message UpdateCxCartSuccessEvent {}

// event will be triggered when refresh is needed
message RefreshAlternatePlansEvent {}

// event will be triggered when deep red store change is made
message OptimizerPlanChangeEvent {
  // either cx order id or FI id
  google.protobuf.StringValue fulfillment_intent_id = 1;
  // version
  google.protobuf.Int64Value version = 2;
  // new active fulfillment plan
  google.protobuf.StringValue fulfillment_plan_id = 3;
}

// event will be triggered when delivery is picked up
message DeliveryPickedUpEvent {
  // either cx order id or FI id
  google.protobuf.StringValue fulfillment_intent_id = 1;
  // version
  google.protobuf.Int64Value version = 2;
  // order cart id
  google.protobuf.StringValue order_cart_id = 3;
  // the time that delivery is picked up at
  google.protobuf.Timestamp delivery_picked_up_at = 4;
}

// event triggered when OCA is completed
message OrderCartAdjustmentCompletedEvent {
  // delivery id
  google.protobuf.StringValue delivery_uuid = 1;
}

// event will be triggered when mx order is fulfilled
message MxOrderFulfilledEvent {
  // the time that mx order is fulfilled
  google.protobuf.Timestamp mx_order_fulfilled_at = 1;
}

// fulfillment plan event context
message FulfillmentPlanEventContext {
  // customer context
  CustomerContext customer_context = 1;
  // store context
  StoreContext store_context = 2;
  // order context
  OrderContext order_context = 3;

  // order context
  message OrderContext {
    // version
    google.protobuf.Int64Value order_version = 1;
  }

  // customer context
  message CustomerContext {
    // consumer id
    string consumer_id = 1;
  }

  // store context
  message StoreContext {
    // store id
    string store_id = 1;
    // business id
    string business_id = 2;
    // submarket id
    string submarket_id = 3;
    // business vertical id
    string business_vertical_id = 4;
  }
}
