syntax = "proto3";
package genai_gateway_service.v1;

import "doordash.api/annotations.proto";
import "genai_gateway_service/common.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option java_multiple_files = true;
option java_package = "com.doordash.genai_gateway_service.rpc.api";

// service to expose APIs for MLWorkbench
service GenAIGatewayAdminService {
  option (doordash.api.service) = {
    name: "genai-gateway-service"
    url: "genai-gateway-service-api.service.prod.ddsd"
    port: 50051
    name_spaces: ["genai"]
    owner: {
      name: "genai"
      id: "genai-platform-team-ml-platform"
      slack_channel: "#ask-gen-ai"
      email_alias: "genai-pod@doordash.com"
    }
    target_products: [INTERNAL]
  };
  // add a user to requested organization and team
  rpc AddUserToWorkspace(AddUserToWorkspaceRequest) returns (AddUserToWorkspaceResponse) {
    option (google.api.http) = {
      post: "/genai/v1/users"
      body: "*"
    };

    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      target_products: [INTERNAL]
    };
  }

  // create a new api key with budget request
  rpc CreateServiceApiKey(CreateServiceApiKeyRequest) returns (CreateServiceApiKeyResponse) {
    option (google.api.http) = {
      post: "/genai/v1/keys"
      body: "*"
    };

    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      target_products: [INTERNAL]
    };
  }

  // update api key with budget request
  rpc UpdateApiKeyBudget(UpdateApiKeyBudgetRequest) returns (UpdateApiKeyBudgetResponse) {
    option (google.api.http) = {
      put: "/genai/v1/budget"
      body: "*"
    };

    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      target_products: [INTERNAL]
    };
  }

  // update api key with governance tags
  rpc UpdateApiKeyGovernanceTags(UpdateApiKeyGovernanceTagsRequest) returns (UpdateApiKeyGovernanceTagsResponse) {
    option (google.api.http) = {
      put: "/genai/v1/governancetags"
      body: "*"
    };

    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      target_products: [INTERNAL]
    };
  }

  // get current api key budget
  rpc GetApiKey(GetApiKeyRequest) returns (GetApiKeyResponse);

  // list all api keys for a user
  rpc ListApiKeys(ListApiKeysRequest) returns (ListApiKeysResponse) {
    option (google.api.http) = {get: "/genai/v1/keys"};

    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      target_products: [INTERNAL]
    };
  }

  // get all eligible verticals and teams for a user
  rpc GetEligibleVerticalsAndTeams(GetEligibleVerticalsAndTeamsRequest) returns (GetEligibleVerticalsAndTeamsResponse) {
    option (google.api.http) = {get: "/genai/v1/verticalsandteams"};

    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      target_products: [INTERNAL]
    };
  }

  // get all workspaces the user is a member of
  rpc GetWorkspaceMembership(GetWorkspaceMembershipRequest) returns (GetWorkspaceMembershipResponse) {
    option (google.api.http) = {get: "/genai/v1/workspaces"};

    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      target_products: [INTERNAL]
    };
  }

  // acknowledge the policy by the user
  rpc GenAiPolicyAcknowledgement(GenAiPolicyAcknowledgementRequest) returns (GenAiPolicyAcknowledgementResponse) {
    option (google.api.http) = {
      post: "/genai/v1/acknowledgement"
      body: "*"
    };

    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      target_products: [INTERNAL]
    };
  }

  // get the latest policy acknowledgement by the user
  rpc GenAiPolicyGetLatestAcknowledgement(GenAiPolicyGetLatestAcknowledgementRequest) returns (GenAiPolicyGetLatestAcknowledgementResponse) {
    option (google.api.http) = {get: "/genai/v1/acknowledgement"};

    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      target_products: [INTERNAL]
    };
  }

  // refresh the default resources across workspaces
  rpc RefreshDefaultResources(RefreshDefaultResourcesRequest) returns (RefreshDefaultResourcesResponse);

  // get costs for requests through genai gateway
  rpc GetCosts(GetCostsRequest) returns (GetCostsResponse);

  // get request count metrics for time range from chronosphere, datalake, and portkey clickhouse
  rpc GetRequestCountMetrics(GetRequestCountMetricsRequest) returns (GetRequestCountMetricsResponse);
}

// DEPRECATED: Doordash verticals that users can be added to
enum Vertical {
  STAGING = 0;
  AUTONOMY = 1;
  CONSUMER_PLATFORM = 2;
  DASHER_LOGISTICS = 3;
  ENG_OPERATIONS = 4;
  FOUNDATIONS = 5;
  LAUNCHPAD = 6;
  MARKETPLACE = 7;
  MERCHANT_ENG = 8;
  NEW_VERTICALS_ENG = 9;
  OPERATIONAL_EXCELLENCE = 10;
  WOLT = 11;
  MERCHANT_CONSUMER_PLATFORM = 12;
  MARKETING_TECHNOLOGY = 13;
  PLATFORM_SERVICES = 14;
  ANALYTICS_DATA_SCIENCE = 15;
  SECURITY = 16;
}

// Time interval until applied budgets refresh
enum BudgetInterval {
  ALL_TIME = 0;
  MONTHLY = 1;
}

// Type of api keys
enum ApiKeyType {
  API_KEY_TYPE_UNSPECIFIED = 0;
  ORGANIZATION_SERVICE = 1;
  WORKSPACE_SERVICE = 4;
  WORKSPACE_USER = 3;
}

// Service tier levels - Production Service Tier Levels https://docs.google.com/document/d/1_21p9C4VdNS5lNrNnj3qCF7Ch9NC0xTC80klU8DQ8kM/edit?tab=t.0#heading=h.61ube4vhnhk9
enum ServiceTier {
  SERVICE_TIER_UNSPECIFIED = 0;
  T0 = 1;
  T1 = 2;
  T2 = 3;
  T3 = 4;
}

// Type of feature, internal productivity tool or product feature
enum ProjectType {
  PROJECT_TYPE_UNSPECIFIED = 0;
  INTERNAL_TOOL = 1;
  PRODUCT_FEATURE = 2;
}

// Governance tags for inputs
enum GovernanceInputTags {
  GOVERNANCE_INPUT_TAGS_UNSPECIFIED = 0;
  LOCATION_DATA = 1;
  BIOMETRIC_DATA = 2;
  GOVERNMENT_ID_DATA = 3;
  DEMOGRAPHIC_DATA = 4;
  HEALTH_DATA = 5;
  PERFORMANCE_METRICS = 6;
  CONTACT_INFORMATION = 7;
  SCRAPED_CONTENT_DATA = 8;
  FINANCIAL_DATA = 9;
  NO_GOVERNANCE_INPUT_TAGS = 10;
}

// Governance tags for outputs
enum GovernanceOutputTags {
  GOVERNANCE_OUTPUT_TAGS_UNSPECIFIED = 0;
  DX_ASSIGNMENT = 1;
  DX_PERFORMANCE_INCENTIVES = 2;
  DX_PAY_DETERMINATION = 3;
  USER_SURVEILLANCE_MONITORING = 4;
  CX_PRODUCT_PRICING = 5;
  USER_BENEFITS_CREDIT_DECISIONS = 6;
  CX_PROFILING_BEHAVIOR_ANALYSIS = 7;
  DOORDASH_INTERNAL_TESTING = 8;
  USER_FRAUD_VIOLATIONS_DEACTIVATION = 9;
  NO_GOVERNANCE_OUTPUT_TAGS = 10;
}

// GetEligibleVerticalsAndTeamsRequest uses AssetService to verify group membership based on userEmail
message GetEligibleVerticalsAndTeamsRequest {
  // doordash email of the requesting user
  string user_email = 1;
}

// Return list of vertical and teams membership for the requested user
message GetEligibleVerticalsAndTeamsResponse {
  // DEPRECATED: list of verticals the user is eligible for
  repeated Vertical verticals = 1;
  // list of teams the user is eligible for
  repeated string teams = 2;
}

// Get all workspaces the user is a member of
message GetWorkspaceMembershipRequest {
  // doordash email of the requesting user
  string user_email = 1;
  // page number
  int32 page = 2;
  // page size
  int32 page_size = 3;
}

// Basic metadata for a workspace
message Workspace {
  // workspace id
  string id = 1;
  // workspace name
  string name = 2;
  // workspace description
  string description = 3;
  // created_at
  google.protobuf.Timestamp created_at = 4;
  // last_updated_at
  google.protobuf.Timestamp last_updated_at = 5;
  // metadata
  map<string, string> metadata = 6;
}

// Return workspaces the user is a member of
message GetWorkspaceMembershipResponse {
  // list of workspaces the user is a member of
  repeated Workspace workspaces = 1;
  // total number of workspaces
  int32 total = 2;
  // page number
  int32 page = 3;
}

// Add a doordash user to the requested Portkey organization and team
message AddUserToWorkspaceRequest {
  // doordash email of the requesting user
  string user_email = 1;
  // DEPRECATED: doordash vertical
  Vertical vertical = 2;
  // team name
  string team = 3;
  // set user as admin
  bool is_admin = 4;
}

// AddUserToWorkspaceResponse
message AddUserToWorkspaceResponse {
  // portkey user_id
  string user_id = 1;
  // link to accept invite
  string invite_link = 2;
  // message for upsert success/failure/noop including org/teams applied for user
  string message = 3;
  // Status code
  StatusCode code = 4;
}

// GetApiKeyRequest - get current api key budget and other metadata fields
message GetApiKeyRequest {
  // doordash email of the requesting user
  string user_email = 1;
  // workspace where api key is located
  string workspace = 2;
  // name of api key
  string name = 3;
}

// GetApiKeyResponse - get current api key budget and other metadata fields
message GetApiKeyResponse {
  // name of api key
  string name = 1;
  // workspace name
  string workspace = 2;
  // description
  string description = 3;
  // budget amount
  google.protobuf.FloatValue budget = 4;
  // budget alert threshold percentage
  google.protobuf.FloatValue budget_alert_threshold_percentage = 5;
  // time interval until applied budgets refresh
  BudgetInterval budget_interval = 6;
  // metadata
  map<string, string> metadata = 7;
  // type of api key: workspace user or service
  ApiKeyType api_key_type = 8;
  // service tier
  ServiceTier service_tier = 9;
  // project type - one of the following: "INTERNAL", "PRODUCT_FEATURE"
  ProjectType project_type = 10;
  // governance tags for inputs (data used to generate model finetuning / prompts)
  repeated GovernanceInputTags governance_input_tags = 11;
  // governance tags for outputs (what the model is used to make decisions on)
  repeated GovernanceOutputTags governance_output_tags = 12;
}

// ListApiKeysRequest - list all api keys for a user
message ListApiKeysRequest {
  // doordash email of the requesting user
  string user_email = 1;
  // [OPTIONAL] workspace name where api key is located
  string workspace_name = 2;
  // page number
  int32 page = 3;
  // page size
  int32 page_size = 4;
}

// ListApiKeysResponse - list all api keys for a user
message ListApiKeysResponse {
  // list of api keys
  repeated GetApiKeyResponse api_keys = 1;
  // total number of api keys
  int32 total = 2;
  // page number
  int32 page = 3;
}

// CreateServiceApiKeyRequest - creates a new api key with specified budget and required metadata fields
message CreateServiceApiKeyRequest {
  // name of service
  string service_name = 1;
  // workspace name
  string workspace = 2;
  // security approval link to GRC ticket
  string security_approval = 3;
  // business owner if the application is being primarily used by another team. For list of values see https://docs.google.com/spreadsheets/d/1rUGd0XoQraZ0Lw5tmesWc_2VVt7xhMz4YclpIjSIS6I/edit?gid=817445725#gid=817445725
  string business_owner = 4;
  // budget amount
  google.protobuf.FloatValue budget = 5;
  // budget alert threshold percentage
  google.protobuf.FloatValue budget_alert_threshold_percentage = 6;
  // time interval until applied budgets refresh
  BudgetInterval budget_interval = 7;
  // doordash email of the requesting user
  string user_email = 8;
  // project documentation link - either project one pager or wiki describing the nature of this service
  string project_doc = 9;
  // service tier
  ServiceTier service_tier = 10;
  // project type - one of the following: "INTERNAL", "PRODUCT_FEATURE"
  ProjectType project_type = 11;
  // governance tags for inputs (data used to generate model finetuning / prompts)
  repeated GovernanceInputTags governance_input_tags = 12;
  // governance tags for outputs (what the model is used to make decisions on)
  repeated GovernanceOutputTags governance_output_tags = 13;
  // emails to alert
  repeated string alert_emails = 14;
}

// CreateServiceApiKeyResponse
message CreateServiceApiKeyResponse {
  // name of api key
  string name = 1;
  // workspace name
  string workspace = 2;
}

// Update budget amount on user/service api keys
message UpdateApiKeyBudgetRequest {
  // doordash email of the requesting user
  string user_email = 1;
  // workspace where api key is located
  string workspace = 2;
  // name of api key
  string name = 3;
  // budget amount
  google.protobuf.FloatValue budget = 4;
  // budget alert threshold percentage
  google.protobuf.FloatValue budget_alert_threshold_percentage = 5;
  // time interval until applied budgets refresh
  BudgetInterval budget_interval = 6;
}

// UpdateApiKeyBudgetResponse
message UpdateApiKeyBudgetResponse {
  // message for upsert success/failure/noop including updated budget values
  string message = 1;
  // Status code
  StatusCode code = 2;
}

// UpdateApiKeyGovernanceTagsRequest
message UpdateApiKeyGovernanceTagsRequest {
  // doordash email of the requesting user
  string user_email = 1;
  // workspace where api key is located
  string workspace = 2;
  // name of api key
  string name = 3;
  // governance tags for inputs (data used to generate model finetuning / prompts)
  repeated GovernanceInputTags governance_input_tags = 4;
  // governance tags for outputs (what the model is used to make decisions on)
  repeated GovernanceOutputTags governance_output_tags = 5;
}

// UpdateApiKeyGovernanceTagsResponse
message UpdateApiKeyGovernanceTagsResponse {
  // message for upsert success/failure/noop including updated budget values
  string message = 1;
  // Status code
  StatusCode code = 2;
}

// Acknowledge the policy by the user
message GenAiPolicyAcknowledgementRequest {
  // doordash email of user acknowledging the policy
  string user_email = 1;
  // policy version
  int32 policy_version = 2;
  // timestamp of acknowledgement
  google.protobuf.Timestamp timestamp = 3;
}

// Acknowledge the policy by the user
message GenAiPolicyAcknowledgementResponse {
  // status code
  StatusCode code = 1;
  // message
  string message = 2;
}

// Check if the user has acknowledged the policy previously
message GenAiPolicyGetLatestAcknowledgementRequest {
  // doordash email of user
  string user_email = 1;
}

// Policy Acknowledgement Status
enum PolicyAcknowledgementStatus {
  // Unspecified
  POLICY_ACKNOWLEDGEMENT_STATUS_UNSPECIFIED = 0;
  // User has not acknowledged the policy
  POLICY_ACKNOWLEDGEMENT_STATUS_NOT_ACKNOWLEDGED = 1;
  // User has acknowledged the policy
  POLICY_ACKNOWLEDGEMENT_STATUS_ACKNOWLEDGED = 2;
}

// Policy Acknowledgement
message PolicyAcknowledgement {
  // policy version
  int32 policy_version = 1;
  // timestamp of latest acknowledgement
  google.protobuf.Timestamp timestamp = 2;
}

// If the user has acknowledged the policy, return the latest policy version acknowledged
// If not acknowledged, return NOT_ACKNOWLEDGED, latest version number to acknowledge and link to the policy
message GenAiPolicyGetLatestAcknowledgementResponse {
  // policy acknowledgement status
  PolicyAcknowledgementStatus status = 1;
  // if status is ACKNOWLEDGED, return the latest policy version acknowledged
  PolicyAcknowledgement policy_acknowledgement = 2;
  // policy version
  int32 policy_version = 3;
  // url of latest policy version
  string policy_url = 4;
}

// RefreshDefaultResourcesRequest trigger refresh of resources to workspaces, optionally provide list of workspace names
// otherwise refreshes all
// use after updating vault secrets / DV values
message RefreshDefaultResourcesRequest {
  // optionally provide list of workspace names, otherwise refreshes all
  repeated string workspace_names = 1;
}

// RefreshDefaultResourcesResponse result after refreshing resources in workspaces
message RefreshDefaultResourcesResponse {
  // message for upsert success/failure/noop
  string message = 1;
  // Status code
  StatusCode code = 2;
}

// GetCostsRequest - get costs for requests through genai gateway for a particular date range
message GetCostsRequest {
  // start date
  google.protobuf.Timestamp date = 1;
  // optionally provide list of workspace names, otherwise all
  repeated string workspace_names = 2;
}

// GetCostsResponse - get costs for requests through genai gateway for a particular date range
message GetCostsResponse {
  // rows for datalake containing daily cost metrics across providers and other metadata tags
  repeated DailyCosts daily_costs = 1;
}

// DailyCosts - costs for requests through genai gateway for a particular date containing needed metadata
message DailyCosts {
  // date, UTC
  google.protobuf.Timestamp date = 1;
  // workspace name
  string workspace_name = 2;
  // service name - service name if production service, if personal user api key - "dev-user";
  string service_name = 3;
  // technical owner
  string technical_owner = 4;
  // technical vertical
  string technical_vertical = 5;
  // business owner
  string business_owner = 6;
  // business vertical
  string business_vertical = 7;
  // llm provider
  string provider = 8;
  // total cost
  google.protobuf.FloatValue total_cost_cents = 9;
  // total requests
  google.protobuf.Int32Value total_requests = 10;
  // other metadata
  map<string, string> metadata = 11;
}

// GetRequestCountMetricsRequest - get request count metrics for time range from chronosphere, datalake, and portkey clickhouse
message GetRequestCountMetricsRequest {
  // start date
  google.protobuf.Timestamp start_time = 1;
  // end date
  google.protobuf.Timestamp end_time = 2;
}

// GetRequestCountMetricsResponse - get request count metrics for time range from chronosphere, datalake, and portkey clickhouse
message GetRequestCountMetricsResponse {
  // chronosphere request count
  int32 chronosphere_request_count = 1;
  // datalake request count
  int32 datalake_request_count = 2;
  // portkey request count
  int32 portkey_request_count = 3;
}
