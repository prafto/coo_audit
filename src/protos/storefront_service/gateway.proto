syntax = "proto3";
// buf:lint:ignore DIRECTORY_SAME_PACKAGE
// buf:lint:ignore PACKAGE_VERSION_SUFFIX
package storefront_service;

import "common/common.proto";
import "common/money.proto";
import "common/order_config.proto";
import "common/service_client_config.proto";
import "delivery_event/delivery_event.proto";
import "doordash.api/annotations.proto";
import "feed_service/item_page.proto";
import "feed_service/menu.proto";
import "feed_service/store_page.proto";
import "google/api/annotations.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "loyalty_service/common.proto";
import "menu/menu.proto";
import "store_availability.v2/store_availability.proto";
import "store_availability/store_availability.proto";
import "storefront_service/common.proto";

option java_generic_services = true;
option java_outer_classname = "StorefrontGatewayProtos";
option java_package = "com.doordash.service.storefront";

/*
 * StorefrontGatewayService expose API for Storefront Open APIs
 */
service StorefrontGatewayService {
  option (service_client.client_config).service_name = "storefront-service";
  option (service_client.client_config).service_app = "web";

  //annotated with the doordash.api.service option for metadata and traffic routing
  option (doordash.api.service) = {
    name: "storefront-gateway-service-grpc"
    url: "storefront-gateway-service-grpc.service.prod.ddsd"
    port: 50051
    name_spaces: ["storefront-gateway-service"]
    owner: {
      name: "storefront-service"
      id: "storefront-integrations-default-buck"
      slack_channel: "#ask-storefront-integrations"
      email_alias: "rx-services-order-experience-eng@doordash.com"
    }
    target_products: [
      CX,
      MX
    ]
  };

  // Retrieve store details given store id
  rpc GetStorefrontStoreDetails(GetStorefrontStoreDetailsRequest) returns (GetStorefrontStoreDetailsResponse) {}
  // Get a list of active storefront stores given business/business group id
  rpc ListStoresByBusiness(ListStoresByBusinessRequest) returns (ListStoresByBusinessResponse) {}
  // Nearby search storefront stores given business/business group id and location
  rpc StoresNearbySearch(StoresNearbySearchRequest) returns (StoresNearbySearchResponse) {}
  // Get store active menu(s)
  rpc GetStoreMenus(GetStoreMenusRequest) returns (GetStoreMenusResponse) {}
  // Get store menu v2
  rpc GetStoreMenuV2(GetStoreMenuV2Request) returns (GetStoreMenuV2Response) {}
  // Get store menu item
  rpc GetStoreMenuItem(GetStoreMenuItemRequest) returns (GetStoreMenuItemResponse) {}
  // Check if caller is authorized to access subsequent calls
  rpc CheckResourceAccess(CheckResourceAccessRequest) returns (CheckResourceAccessResponse) {}
  // Initiates the process of removal of the consumer from Doordash systems.
  rpc InitiateDeleteConsumer(InitiateDeleteConsumerRequest) returns (InitiateDeleteConsumerResponse) {}
  // Update the status of Initiate Delete Consumer Request.
  rpc UpdateInitiateDeleteConsumerStatus(UpdateInitiateDeleteConsumerStatusRequest) returns (UpdateInitiateDeleteConsumerStatusResponse) {}
  // Onboard new storefront developer.
  rpc OnboardStorefrontApiDeveloper(OnboardStorefrontApiDeveloperRequest) returns (OnboardStorefrontApiDeveloperResponse) {}
  // Update storefront api developer record.
  rpc UpdateStorefrontApiDeveloperRecord(UpdateStorefrontApiDeveloperRecordRequest) returns (UpdateStorefrontApiDeveloperRecordResponse) {}
  // delete storefront api developer record.
  rpc DeleteStorefrontApiDeveloperRecord(DeleteStorefrontApiDeveloperRecordRequest) returns (DeleteStorefrontApiDeveloperRecordResponse) {}
  // Delete storefront account
  rpc DeleteAppUserAccount(DeleteAppUserAccountRequest) returns (DeleteAppUserAccountResponse) {}
  // Retrieve storefront user details
  rpc GetStorefrontMemberProfile(GetStorefrontMemberProfileRequest) returns (GetStorefrontMemberProfileResponse) {}
  // Get storefront user session from DB
  rpc GetStorefrontUserSession(GetStorefrontUserSessionRequest) returns (GetStorefrontUserSessionResponse) {}
  // Revoke storefront user's active session
  rpc RevokeUserSession(RevokeUserSessionRequest) returns (RevokeUserSessionResponse) {}
  // Retrieve storefront user's order history
  rpc GetStorefrontOrderHistory(GetStorefrontOrderHistoryRequest) returns (GetStorefrontOrderHistoryResponse) {
    option (google.api.http) = {
      // {HttpMethod}: "{pathPattern}"
      get: "/storefront-gateway-service/v1/get_order_history"
    };

    option (doordash.api.endpoint) = {
      tier: T0
      lifecycle: DEV
      authorization: [
        DD_USER,
        CX_USER
      ]
      target_products: [CX],
      inject_user_roles: true
    };
  }
  // Upsert a storefront user's session
  rpc UpsertUserSession(UpsertUserSessionRequest) returns (UpsertUserSessionResponse) {}
  // Get App metadata
  rpc GetAppMetadata(GetAppMetadataRequest) returns (GetAppMetadataResponse) {}
  // get jwt
  rpc GetJwt(GetJwtRequest) returns (GetJwtResponse) {}
  // get order status
  rpc GetStorefrontOrderStatus(GetStorefrontOrderStatusRequest) returns (GetStorefrontOrderStatusResponse) {}
  // GenerateStorefrontUserQRCode
  rpc GenerateStorefrontUserQRCode(GenerateStorefrontUserQRCodeRequest) returns (GenerateStorefrontUserQRCodeResponse) {}
  // Get mobile app settings for a mobile app developer
  rpc GetMobileAppSettings(GetMobileAppSettingsRequest) returns (GetMobileAppSettingsResponse) {}
  // Update mobile app settings for a mobile app developer
  rpc UpdateMobileAppSettings(UpdateMobileAppSettingsRequest) returns (UpdateMobileAppSettingsResponse) {}
  // Deprecated, use LoyaltyCheckIn
  rpc CompleteInStoreCheckIn(CompleteInStoreCheckInRequest) returns (CompleteInStoreCheckInResponse) {}
  // Deprecated, use LoyaltyRedeemReward
  rpc RedeemInStoreCustomerReward(RedeemInStoreCustomerRewardRequest) returns (RedeemInStoreCustomerRewardResponse) {}
  // Check-in in store for loyalty
  rpc LoyaltyCheckIn(LoyaltyCheckInRequest) returns (LoyaltyCheckInResponse) {}
  // Redeem a reward in store for loyalty
  rpc LoyaltyRedeemReward(LoyaltyRedeemRewardRequest) returns (LoyaltyRedeemRewardResponse) {}
  // Retrieve User External Loyalty Rewards
  rpc LoyaltyRetrieveRewards(LoyaltyRetrieveRewardsRequest) returns (LoyaltyRetrieveRewardsResponse) {}
}

// Get store details request
message GetStorefrontStoreDetailsRequest {
  // Requester identifier
  google.protobuf.StringValue developer_uuid = 1;
  // Store id
  google.protobuf.Int64Value store_id = 2;
}

// Get store details response
message GetStorefrontStoreDetailsResponse {
  // Options that can use to control what is displayed on the mobile clients.
  message DisplayOptions {
    // special instructions length. if <= 0 then disabled, if empty then unlimited else the value which is set
    google.protobuf.Int32Value special_instructions_max_length = 19;
    // Controls whether delivery fees should be displayed
    google.protobuf.BoolValue display_fees_visible = 20;
  }
  // store details
  message StoreDetails {
    // Store name
    google.protobuf.StringValue name = 1;
    // Store id
    google.protobuf.StringValue id = 2;
    // Store address
    google.protobuf.StringValue address = 3;
    // Store phone number
    google.protobuf.StringValue phone_number = 4;
    // Store timezone
    google.protobuf.StringValue timezone = 5;
    // Store status on storefront
    StorefrontStoreStatus status = 7;
    // Regular store operating hours
    repeated storeavailability.StoreHours store_hours = 11 [deprecated = true];
    // Special store operating hours
    repeated storeavailability.StoreSpecialHours store_special_hours = 12 [deprecated = true];
    // Store minimum_order_value
    google.protobuf.Int32Value minimum_order_value = 13;
    // Storefront delivery fee
    google.protobuf.Int32Value delivery_fee = 14;
    // ETA for a delivery order to be delivered
    google.protobuf.Duration average_delivery_time = 15;
    // ETA for a pickup order to be ready for pick up
    google.protobuf.Duration average_pickup_time = 16;
    // Deprecated!!! use DisplayOptions.special_instructions_max_length
    google.protobuf.Int32Value special_instructions_max_length = 17 [deprecated = true];
    // Display options.
    DisplayOptions display_options = 18;
    // Accurate Store operating hours for the next seven days
    repeated store_availability.v2.StoreAvailabilityHours store_hours_v2 = 19;

    reserved 6;
    reserved "storefront_status";
  }
  // on success, return store details
  message Success {
    // store details given store id
    StoreDetails store_details = 1;
  }
  // result is either success or error
  oneof result {
    // on success, return store details
    Success success = 1;
    // on failure, return error
    GatewayError error = 2;
  }
}

// List stores by business id/business group id request
message ListStoresByBusinessRequest {
  // Requester Identifier
  google.protobuf.StringValue developer_uuid = 1;
  // Unique identifier for storefront business
  google.protobuf.Int64Value business_id = 2;
  // Unique identifier for storefront business group
  google.protobuf.Int64Value business_group_id = 3;
  // Optional parameter to only return stores that are open at specified timestamp
  google.protobuf.StringValue open_at = 4;
  // Optional Parameters for pagination
  // This field represents the token to retrieve the previous page of results.
  google.protobuf.StringValue prev_token = 5;
  // This field represents the token to retrieve the next page of results.
  google.protobuf.StringValue next_token = 6;
  // Optional parameter to limit the size of records in the result
  google.protobuf.Int32Value limit = 7;
  // send store details in the response, default is false
  google.protobuf.BoolValue should_send_store_details = 8;
}

// List stores by business id/business group id response
message ListStoresByBusinessResponse {
  // Store
  message Store {
    // Store name
    google.protobuf.StringValue name = 1;
    // Store id
    google.protobuf.StringValue id = 2;
    // Store address
    google.protobuf.StringValue address = 3;
    // Show below columns if open_at is specified in the request
    // This field indicates the availability of order pick up
    // based on the specified open_at in the request
    google.protobuf.BoolValue pickup_available = 4;
    // This field indicates the availability of order delivery
    // based on the specified open_at in the request
    google.protobuf.BoolValue delivery_available = 5;
    // Store status on storefront
    StorefrontStoreStatus status = 6;
    // store details given store, will only be present when should_send_store_details is set to true in the request
    GetStorefrontStoreDetailsResponse.StoreDetails store_details = 7;
  }
  // on success, return a list of stores
  message Success {
    // basic store information
    repeated Store store = 1;
    // This field represents the token to retrieve the previous page of results.
    google.protobuf.StringValue prev_token = 2;
    // This field represents the token to retrieve the next page of results.
    google.protobuf.StringValue next_token = 3;
  }
  // result is either success or error
  oneof result {
    // on success, return list of stores
    Success success = 1;
    // on failure, return error
    GatewayError error = 2;
  }
}

// Search nearby stores by location and business id/business group id request
message StoresNearbySearchRequest {
  // Requester Identifier
  google.protobuf.StringValue developer_uuid = 1;
  // Unique identifier for storefront business
  google.protobuf.Int64Value business_id = 2;
  // Unique identifier for storefront business group
  google.protobuf.Int64Value business_group_id = 3;
  // Required parameter for latitude
  google.protobuf.FloatValue lat = 4;
  // Required parameter for longitude
  google.protobuf.FloatValue lon = 5;
  // Optional parameter to specify whether order type is delivery or pick up
  // By default should be false
  google.protobuf.BoolValue is_pickup = 6;
  // Optional parameter to only return stores that are open at specified timestamp
  google.protobuf.StringValue open_at = 7;
  // Optional parameter to indicate search radius in meters
  // By default 1000 meters
  google.protobuf.Int32Value search_radius = 8;
  // Optional parameter to limit the size of records in the result
  // By default should be 10
  google.protobuf.Int32Value limit = 9;
  // send store details in the response, default is false
  google.protobuf.BoolValue should_send_store_details = 10;
}

// Search nearby stores by location and business id/business group id request response
message StoresNearbySearchResponse {
  // Nearby store given location
  message NearbyStore {
    // Store name
    google.protobuf.StringValue name = 1;
    // Store id
    google.protobuf.StringValue id = 2;
    // Store address
    google.protobuf.StringValue address = 3;
    // Distance from the given location
    google.protobuf.StringValue distance = 4;
    // Store ETA based on the requested fulfillment type - pickup/delivery
    google.protobuf.Int32Value average_eta = 5;
    // store details given store, will only be present when should_send_store_details is set to true in the request
    GetStorefrontStoreDetailsResponse.StoreDetails store_details = 6;
  }
  // on success, return a list of nearby stores
  message Success {
    // nearby stores given location and business/business group id
    repeated NearbyStore nearby_stores = 1;
  }
  // result is either success or error
  oneof result {
    // on success, return nearby stores
    Success success = 1;
    // on failure, return error
    GatewayError error = 2;
  }
}

// Get store menus request
message GetStoreMenusRequest {
  // Requester identifier, deprecated! (use developer.developer_uuid)
  google.protobuf.StringValue developer_uuid = 1 [deprecated = true];
  // Store id
  google.protobuf.Int64Value store_id = 2;
  // optional parameter serve time in UTC
  google.protobuf.StringValue serve_time = 3;
  // Session id
  google.protobuf.StringValue session_id = 4;
  // Developer
  StorefrontApiDeveloper developer = 5;
}

// Get store menu item request
message GetStoreMenuItemRequest {
  // Store id
  google.protobuf.Int64Value store_id = 1;
  // Item id
  google.protobuf.StringValue item_id = 2;
  // Menu id
  google.protobuf.Int64Value menu_id = 3;
  // Session id
  google.protobuf.StringValue session_id = 4;
  // Developer
  StorefrontApiDeveloper developer = 5;
  // Fulfillment type
  common.FulfillmentType fulfillment_type = 6;
  // Cursor
  google.protobuf.StringValue cursor = 7;
}

// Get store menu item request
message GetStoreMenuItemResponse {
  // option
  message Option {
    // item id
    google.protobuf.StringValue id = 1;
    // item name
    google.protobuf.StringValue name = 2;
    // item price
    money.MonetaryFields price = 3;
    // item image_url
    google.protobuf.StringValue image_url = 4;
    // cursor
    google.protobuf.StringValue cursor = 5;
    // default on
    google.protobuf.BoolValue default_on = 6;
  }

  // extra
  message Extra {
    // extra id
    google.protobuf.StringValue id = 1;
    // extra name
    google.protobuf.StringValue name = 2;
    // min num options
    google.protobuf.UInt32Value min_num_options = 3;
    // max num options
    google.protobuf.UInt32Value max_num_options = 4;
    // min aggregate options quantity
    google.protobuf.UInt32Value min_aggregate_options_quantity = 5;
    // max aggregate options quantity
    google.protobuf.UInt32Value max_aggregate_options_quantity = 6;
    // min option choice quantity
    google.protobuf.UInt32Value min_option_choice_quantity = 7;
    // max option choice quantity
    google.protobuf.UInt32Value max_option_choice_quantity = 8;
    // num free options
    google.protobuf.UInt32Value num_free_options = 9;
    // options
    repeated Option options = 10;
  }

  // item header
  message ItemHeader {
    // item id
    google.protobuf.StringValue id = 1;
    // item name
    google.protobuf.StringValue name = 2;
    // item description
    google.protobuf.StringValue description = 3;
    // item price
    money.MonetaryFields price = 4;
    // item image_url
    google.protobuf.StringValue image_url = 5;
    // callout display string
    google.protobuf.StringValue callout_display_string = 6;
    // rating display string
    google.protobuf.StringValue rating_display_string = 7;
    // calories info display string
    google.protobuf.StringValue calories_info_display_string = 8;
    // special instructions max length
    google.protobuf.UInt32Value special_instructions_max_length = 9;
  }

  // on success, return an active store menu
  message Success {
    // item header
    ItemHeader item_header = 1;
    // extras
    repeated Extra extras = 2;
    // preset item carousels (recommended options, reorder...)
    repeated feed_service.Preset presets = 3;
  }

  // result is either success or error
  oneof result {
    // on success, return an active store menu
    Success success = 1;
    // on failure, return error
    GatewayError error = 2;
  }
}

// Get store menu v2 request
message GetStoreMenuV2Request {
  // Store id
  google.protobuf.Int64Value store_id = 1;
  // Session id
  google.protobuf.StringValue session_id = 2;
  // Developer
  StorefrontApiDeveloper developer = 3;
  // Menu id
  google.protobuf.Int64Value menu_id = 4;
  // Fulfillment Type
  common.FulfillmentType fulfillment_type = 5;
  // Country code
  google.protobuf.StringValue country_shortname = 6;
}

// Get store menu v2 response
message GetStoreMenuV2Response {
  // item
  message Item {
    // item id
    google.protobuf.StringValue id = 1;
    // item name
    google.protobuf.StringValue name = 2;
    // item description
    google.protobuf.StringValue description = 3;
    // item display price
    google.protobuf.StringValue display_price = 4;
    // item image_url
    google.protobuf.StringValue image_url = 5;
    // item badges
    repeated feed_service.MessageLayout badges = 6;
    // item rating
    google.protobuf.StringValue rating_display_string = 7;
    // item cursor
    google.protobuf.StringValue cursor = 8;
    // Context for one-click add item
    feed_service.QuickAddContext quick_add_context = 9;
  }

  // category
  message Category {
    // category id
    google.protobuf.StringValue id = 1;
    // category name
    google.protobuf.StringValue name = 2;
    // category description
    google.protobuf.StringValue description = 3;
    // items
    repeated Item items = 4;
  }

  // reorder item
  message ReorderItem {
    // id
    google.protobuf.StringValue id = 1;
    // category id
    google.protobuf.StringValue category_id = 2;
    // name
    google.protobuf.StringValue name = 3;
    // price
    google.protobuf.StringValue price = 4;
    // image url
    google.protobuf.StringValue image_url = 5;
    // last ordered
    google.protobuf.StringValue last_ordered = 6;
    // cursor
    google.protobuf.StringValue cursor = 7;
    // Context for one-click add item
    feed_service.QuickAddContext quick_add_context = 8;
  }

  // featured item
  message FeaturedItem {
    // id
    google.protobuf.StringValue id = 1;
    // category id
    google.protobuf.StringValue category_id = 2;
    // name
    google.protobuf.StringValue name = 3;
    // price
    google.protobuf.StringValue price = 4;
    // image url
    google.protobuf.StringValue image_url = 5;
    // cursor
    google.protobuf.StringValue cursor = 6;
    // item rating
    google.protobuf.StringValue rating_display_string = 7;
    // item badges
    repeated feed_service.MessageLayout badges = 8;
    // Context for one-click add item
    feed_service.QuickAddContext quick_add_context = 9;
  }

  // primary menu
  message PrimaryMenu {
    // store menu data
    repeated Category categories = 1;
    // reorder menu items
    repeated ReorderItem reorder_items = 2;
    // featured items
    repeated FeaturedItem featured_items = 3;
  }

  // on success, return an active store menu
  message Success {
    // store header
    feed_service.StoreHeaderDM store_header = 1;
    // primary menu
    PrimaryMenu primary_menu = 2;
    // menu headers
    repeated feed_service.MenuBookDM.Menu menu_headers = 3;
  }

  // result is either success or error
  oneof result {
    // on success, return an active store menu
    Success success = 1;
    // on failure, return error
    GatewayError error = 2;
  }
}

// Get store menus response
message GetStoreMenusResponse {
  // item header
  message ReorderItemHeader {
    // id
    google.protobuf.StringValue id = 1;
    // category id
    google.protobuf.StringValue category_id = 2;
    // name
    google.protobuf.StringValue name = 3;
    // price
    google.protobuf.Int64Value price = 4;
    // image url
    google.protobuf.StringValue image_url = 5;
  }

  // order history
  message ReorderHistory {
    // order date
    google.protobuf.StringValue order_date = 1;
    // special instructions
    google.protobuf.StringValue special_instructions = 2;
    // item tree
    menu.Item item_tree = 3;
  }

  // reorder menu item
  message ReorderMenuItem {
    // item header
    ReorderItemHeader reorder_item_header = 1;
    // order histories
    repeated ReorderHistory reorder_history = 2;
  }

  // store menu
  message StoreMenu {
    // store menu data
    menu.Menu menu = 1;
    // store menu metadata
    menu.MenuMeta menu_meta = 2;
    // reorder menu items
    repeated ReorderMenuItem reorder_menu_items = 3;
  }
  // on success, return a list of active store menus
  message Success {
    // active store menus
    repeated StoreMenu store_menus = 2;
    reserved 1;
    reserved "menus";
  }
  // result is either success or error
  oneof result {
    // on success, return active store menus
    Success success = 1;
    // on failure, return error
    GatewayError error = 2;
  }
}

// Check resource access request
message CheckResourceAccessRequest {
  // Requester identifier
  google.protobuf.StringValue developer_uuid = 1;
  // Store id
  google.protobuf.Int64Value store_id = 2;
  // Business id
  google.protobuf.Int64Value business_id = 3;
  // Business group id
  google.protobuf.Int64Value business_group_id = 4;
}

// Check resource access response
message CheckResourceAccessResponse {
  // on success, return whether or not request has access
  message Success {
    // true if request has access, default false
    google.protobuf.BoolValue has_access = 1;
  }
  // result is either success or error
  oneof result {
    // on success, return active store menus
    Success success = 1;
    // on failure, return error
    GatewayError error = 2;
  }
}

// Customized Error
message GatewayError {
  // error code
  enum ErrorCode {
    // internal error
    ERROR_CODE_INTERNAL_ERROR_UNSPECIFIED = 0;
    // entity not found
    ERROR_CODE_NOT_FOUND = 1;
    // failed validation
    ERROR_CODE_INVALID_REQUEST = 2;
    // auth problem
    ERROR_CODE_UNAUTHORIZED = 3;
  }
  // enum error encountered
  ErrorCode error_code = 1;
  // human readable message
  google.protobuf.StringValue error_message = 2;
  // http_code
  int32 http_code = 3;
}

// Request for consumer delete process initiation.
message InitiateDeleteConsumerRequest {
  // Requester  consumer identifier
  google.protobuf.StringValue consumer_id = 1;
  // Identifier for the storefront entity that this particular requester
  // wants to get its data removed from.
  google.protobuf.Int64Value integration_id = 2;
  // What type of the storefront entity it is.
  IntegrationType integration_type = 3;
  // Optional, represents the consumer id as represented by the third party provider.
  // Only applicable if the consumer is connected to the third party provider.
  google.protobuf.StringValue external_consumer_id = 4;
}

// Response for consumer delete process initiation.
message InitiateDeleteConsumerResponse {
  // on success, return details about statuses.
  message Success {
    // Requester identifier
    google.protobuf.StringValue uuid = 1;
    // The status in which the process is after creation.
    DeleteStatus status = 2;
    // The external status in which the process is after the creation.
    ExternalConsumerDeleteStatus external_status = 3;
  }
  // result is either success or error
  oneof result {
    // on success, return details about statuses.
    Success success = 1;
    // on failure, return error.
    GatewayError error = 2;
  }
}

// Request for the update consumer delete process status.
message UpdateInitiateDeleteConsumerStatusRequest {
  // Its used to identify the InitiateDeleteConsumerRequest to update.
  google.protobuf.StringValue uuid = 1;
  // If set this field will update the existing status field.
  DeleteStatus status = 2;
  // If set this field will update the original external_status field.
  ExternalConsumerDeleteStatus external_status = 3;
}

// Response for the update consumer delete process status.
message UpdateInitiateDeleteConsumerStatusResponse {
  // on success, return details about statuses.
  message Success {
    // Its used to identify the InitiateDeleteConsumerRequest that got updated.
    google.protobuf.StringValue uuid = 3;
    // New value of status after the update.
    DeleteStatus status = 1;
    // New value of external status after the update.
    ExternalConsumerDeleteStatus external_status = 2;
  }
  // result is either success or error.
  oneof result {
    // on success, return details about statuses.
    Success success = 1;
    // on failure, return error.
    GatewayError error = 2;
  }
}

// What kind of storefront entites we support.
enum IntegrationType {
  // UNSPECIFIED
  INTEGRATION_TYPE_UNSPECIFIED = 0;
  // Store id
  INTEGRATION_TYPE_STORE_ID = 1;
  // Business id
  INTEGRATION_TYPE_BUSINESS_ID = 2;
  // Business group id
  INTEGRATION_TYPE_BUSINESS_GROUP_ID = 3;
}

// what kind of user login this integration support.
enum AccountType {
  // UNSPECIFIED
  ACCOUNT_TYPE_UNSPECIFIED = 0;
  // storefront login without loyalty
  ACCOUNT_TYPE_STOREFRONT = 1;
  // storefront login with loyalty
  ACCOUNT_TYPE_STOREFRONT_LOYALTY = 2;
  // External login
  ACCOUNT_TYPE_EXTERNAL = 3;
}

// The status of the deletion request in the internal systems.
enum DeleteStatus {
  // UNSPECIFIED
  DELETE_STATUS_UNSPECIFIED = 0;
  // SUCCESS
  DELETE_STATUS_SUCCESS = 1;
  // FAILURE
  DELETE_STATUS_FAILED = 2;
  // PENDING
  DELETE_STATUS_PENDING = 3;
}

// The status of the deletion request in the external systems.
// If there is no information about the external consumer id, this status will be
// Set as NOT_APPLICABLE.
enum ExternalConsumerDeleteStatus {
  // UNSPECIFIED
  EXTERNAL_CONSUMER_DELETE_STATUS_UNSPECIFIED = 0;
  // SUCCESS
  EXTERNAL_CONSUMER_DELETE_STATUS_SUCCESS = 1;
  // FAILURE
  EXTERNAL_CONSUMER_DELETE_STATUS_FAILED = 2;
  // PENDING
  EXTERNAL_CONSUMER_DELETE_STATUS_PENDING = 3;
  // NOT APPLICABLE
  EXTERNAL_CONSUMER_DELETE_STATUS_NOT_APPLICABLE = 5;
  // Number not to be used.
  reserved 4;
  // Name not to be used.
  reserved "EXTERNAL_CONSUMER_DELETE_STATUS_APPLICABLE";
}

// Request for getting app settings
message GetMobileAppSettingsRequest {
  // identifier to wrap the mobile app developer
  StorefrontApiDeveloper developer = 1;
}

// Response for getting mobile app settings
message GetMobileAppSettingsResponse {
  // on success, return settings.
  message Success {
    // latest mobile app settings for the developer
    MobileAppSettings settings = 1;
  }
  // result is either success or error
  oneof result {
    // on success, return new settings wrapped in Success.
    Success success = 1;
    // on failure, return error.
    GatewayError error = 2;
  }
}

// Request for updating app settings
message UpdateMobileAppSettingsRequest {
  // identifier to wrap the mobile app developer
  StorefrontApiDeveloper developer = 1;
  // new settings to be updated. it will replace all the settings so be careful, read the settings first.
  MobileAppSettings settings = 2;
}

// Response for getting mobile app settings
message UpdateMobileAppSettingsResponse {
  // on success, return settings.
  message Success {
    // latest mobile app settings for the developer
    MobileAppSettings settings = 1;
  }
  // result is either success or error
  oneof result {
    // on success, return new settings wrapped in Success.
    Success success = 1;
    // on failure, return error.
    GatewayError error = 2;
  }
}

// Request for onboard storefront api developers.
message OnboardStorefrontApiDeveloperRequest {
  // list of developers to onboard
  repeated StorefrontApiDeveloper developers = 1;
}

// message to encapsulate api developer record
message StorefrontApiDeveloper {
  // unique id, not needed when inserting
  google.protobuf.StringValue id = 1;
  // developer uuid (developer.doordash.com)
  google.protobuf.StringValue developer_uuid = 2;
  // Identifier for the storefront entity that this particular requester
  // wants to get its data removed from.
  google.protobuf.Int64Value integration_id = 3;
  // What type of the storefront entity it is.
  IntegrationType integration_type = 4;
  // What type of the storefront account it supports.
  AccountType account_type = 5;
  // supported integrations
  repeated StorefrontBusinessIntegrationType supported_integrations = 6;
}

// Response for consumer delete process initiation.
message OnboardStorefrontApiDeveloperResponse {
  // on success, return details about statuses.
  message Success {
    // list of developers which got onboarded
    repeated StorefrontApiDeveloper developers = 1;
  }
  // result is either success or error
  oneof result {
    // on success, return details about statuses.
    Success success = 1;
    // on failure, return error.
    GatewayError error = 2;
  }
}

// Request for updating storefront api developers.
message UpdateStorefrontApiDeveloperRecordRequest {
  // Developer access token to update.
  StorefrontApiDeveloper developer = 1;
}

// Response for updating storefront api developers record.
message UpdateStorefrontApiDeveloperRecordResponse {
  // on success, return new record.
  message Success {
    // Developer that got onboarded
    StorefrontApiDeveloper developer = 1;
  }
  // result is either success or error
  oneof result {
    // on success, return update developer access.
    Success success = 1;
    // on failure, return error.
    GatewayError error = 2;
  }
}

// Request for deleting storefront api developers.
message DeleteStorefrontApiDeveloperRecordRequest {
  // api developer to be deleted. only id to be used currently.
  StorefrontApiDeveloper developer = 1;
}

// Response for deleting storefront api developers record.
message DeleteStorefrontApiDeveloperRecordResponse {
  // on success, return number of deleted records.
  message Success {
    // number of records that got deleted
    google.protobuf.Int32Value deleted_records = 1;
  }
  // result is either success or error
  oneof result {
    // on success, return update developer access.
    Success success = 1;
    // on failure, return error.
    GatewayError error = 2;
  }
}

// Storefront User session
message StorefrontUserSession {
  // Whether user session is active or not
  google.protobuf.BoolValue is_session_active = 1;
  // Member id with the external loyalty provider OR storefront user id
  google.protobuf.StringValue user_id = 2;
  // Consumer id with Storefront
  google.protobuf.StringValue consumer_id = 3;
  // Describe what kind of user session the user has
  UserSessionTypeEnum session_type = 4;
}

// Delete a user's account request
message DeleteAppUserAccountRequest {
  // Session Id
  google.protobuf.StringValue session_id = 1;
  // Identifier for the storefront entity that this particular requester
  // wants to get its data removed from.
  google.protobuf.Int64Value integration_id = 2;
  // What type of the storefront entity it is.
  IntegrationType integration_type = 3;
  // Requester identifier
  google.protobuf.StringValue developer_uuid = 4;
}

// Delete a user's account response
message DeleteAppUserAccountResponse {
  // Success object
  message Success {
    // Storefront user session
    StorefrontUserSession session = 1;
  }
  // result is either success or error
  oneof result {
    // on success
    Success success = 1;
    // on failure, return error
    GatewayError error = 2;
  }
}

// Get Storefront member profile request
message GetStorefrontMemberProfileRequest {
  // Session Id
  google.protobuf.StringValue session_id = 1;
  // Identifier for the storefront entity that this particular requester
  // wants to get its data removed from.
  google.protobuf.Int64Value integration_id = 2;
  // What type of the storefront entity it is.
  IntegrationType integration_type = 3;
  // if true, return loyalty account information for the user.
  google.protobuf.BoolValue get_loyalty_info = 4;
  // Requester identifier
  google.protobuf.StringValue developer_uuid = 5;
}

// Get Storefront member profile response
message GetStorefrontMemberProfileResponse {
  // Member profile
  message Profile {
    // Member id with the external loyalty provider OR storefront user id
    google.protobuf.StringValue external_user_id = 1;
    // First name of member
    google.protobuf.StringValue first_name = 2;
    // Last name of member
    google.protobuf.StringValue last_name = 3;
    // Email address of member
    google.protobuf.StringValue email = 4;
    // Phone number of member
    google.protobuf.StringValue phone_number = 5;
    // Loyalty points amount of member, only relevant loyalty users
    google.protobuf.Int32Value loyalty_points = 6;
    // DO NOT USE, deprecated, user loyalty_account_tier
    google.protobuf.Int32Value loyalty_tier = 7 [deprecated = true];
    // Loyalty tier of member, only relevant loyalty users
    google.protobuf.StringValue loyalty_account_tier = 8;
    // in store rewards
    InStoreRewards in_store_rewards = 9;
  }
  // Success object
  message Success {
    // Member profile
    Profile profile = 1;
  }
  // result is either success or error
  oneof result {
    // on success
    Success success = 1;
    // on failure, return error
    GatewayError error = 2;
  }
}

// Get user's session request
message GetStorefrontUserSessionRequest {
  // Session Id
  google.protobuf.StringValue session_id = 1;
  // Identifier for the storefront entity that this particular requester
  // wants to get its data removed from.
  google.protobuf.Int64Value integration_id = 2;
  // What type of the storefront entity it is.
  IntegrationType integration_type = 3;
  // Requester identifier
  google.protobuf.StringValue developer_uuid = 4;
}

// Get user's session response
message GetStorefrontUserSessionResponse {
  // Success object
  message Success {
    // Storefront user session
    StorefrontUserSession session = 1;
  }
  // result is either success or error
  oneof result {
    // on success
    Success success = 1;
    // on failure, return error
    GatewayError error = 2;
  }
}

// Revoke a user's session request
message RevokeUserSessionRequest {
  // Session Id
  google.protobuf.StringValue session_id = 1;
  // Identifier for the storefront entity that this particular requester
  // wants to get its data removed from.
  google.protobuf.Int64Value integration_id = 2;
  // What type of the storefront entity it is.
  IntegrationType integration_type = 3;
  // Requester identifier
  google.protobuf.StringValue developer_uuid = 4;
}

// Revoke a user's session response
message RevokeUserSessionResponse {
  // Success object
  message Success {}
  // result is either success or error
  oneof result {
    // on success
    Success success = 1;
    // on failure, return error
    GatewayError error = 2;
  }
}

// Retrieve user's order history request
message GetStorefrontOrderHistoryRequest {
  // Session Id
  google.protobuf.StringValue session_id = 1;
  // Identifier for the storefront entity that this particular requester
  // wants to get its data removed from.
  google.protobuf.Int64Value integration_id = 2;
  // What type of the storefront entity it is.
  IntegrationType integration_type = 3;
  // Requester identifier
  google.protobuf.StringValue developer_uuid = 4;
}

// request message to retrieve status of an order
message GetStorefrontOrderStatusRequest {
  // Order uuids for which you need the status
  repeated google.protobuf.StringValue order_uuids = 1;
  // developer information, only developer uuid, integration id and integration type are needed
  StorefrontApiDeveloper developer = 2;
}

// response message to retrieve status of an order
message GetStorefrontOrderStatusResponse {
  // Success object
  message Success {
    // Order statuses
    repeated GetStorefrontOrderHistoryResponse.Order orders = 1;
  }
  // result is either success or error
  oneof result {
    // on success
    Success success = 1;
    // on failure, return error
    GatewayError error = 2;
  }
}

// Retrieve user's order history response
message GetStorefrontOrderHistoryResponse {
  // Order object
  message Order {
    // Order Uuid from delivery intelligence
    google.protobuf.StringValue order_uuid = 1;
    // Order tracking url
    google.protobuf.StringValue tracking_url = 2;
    // Order ETA
    google.protobuf.Int32Value eta = 3;
    // Order fulfillment type
    common.order_config.v1.OrderConfig.FulfillmentType fulfillment_type = 4;
    // Order created at
    google.protobuf.Timestamp created_at = 5;
    // Order updated at
    google.protobuf.Timestamp updated_at = 6;
    // Order status
    delivery_event.DeliveryStatus delivery_status = 7;
    // Order help url
    google.protobuf.StringValue help_url = 8;
    // Order is ASAP or Scheduled
    google.protobuf.BoolValue is_asap = 9;
    // Quoted time when the order will be complete
    google.protobuf.Timestamp quoted_time = 10;
    // Order cancelled at
    google.protobuf.Timestamp cancelled_at = 11;
    // Order delivered at
    google.protobuf.Timestamp delivered_at = 12;
  }

  // Success object
  message Success {
    // Order history
    repeated Order orders = 3;

    reserved 1;
    reserved 2;
    reserved "order_session_id";
    reserved "checkout_url";
  }

  // result is either success or error
  oneof result {
    // on success
    Success success = 1;
    // on failure, return error
    GatewayError error = 2;
  }
}

// Upsert a user session request
message UpsertUserSessionRequest {
  // JWT Token
  google.protobuf.StringValue jwt_token = 1;
  // Refresh Token
  google.protobuf.StringValue refresh_token = 2;
  // Consumer ID
  google.protobuf.StringValue consumer_id = 3;
  // Session Id for existing 3P Loyalty flow
  google.protobuf.StringValue legacy_session_id = 4;
  // do not use, deprecated
  google.protobuf.Int64Value external_membership_id = 5 [deprecated = true];
  // for future use, if needed, it will not be used currently
  google.protobuf.StringValue developer_uuid = 6;
  // business_id, business_group_id or store_id
  google.protobuf.Int64Value integration_id = 7;
  // What type of the storefront entity it is.
  IntegrationType integration_type = 8;
  // External membership/user ID, only relevant for 3P Loyalty user
  google.protobuf.StringValue external_user_id = 9;
  // Optional parameter to upsert guest user session. Deafult is LOGGED_IN
  UserSessionTypeEnum session_type = 10;
}

// Types of user session that we support
enum UserSessionTypeEnum {
  // UNSPECIFIED
  USER_SESSION_TYPE_ENUM_UNSPECIFIED = 0;
  // Logged in user session
  USER_SESSION_TYPE_ENUM_LOGGED_IN = 1;
  // Guest user session
  USER_SESSION_TYPE_ENUM_GUEST = 2;
}

// Upsert a user session response
message UpsertUserSessionResponse {
  // Success object
  message Success {
    // Session ID
    google.protobuf.StringValue session_id = 1;
  }
  // result is either success or error
  oneof result {
    // on success
    Success success = 1;
    // on failure, return error
    GatewayError error = 2;
  }
}

// get jwt request
message GetJwtRequest {
  // api developer, only integration_id and integration_type are needed
  StorefrontApiDeveloper developer = 1;
}

// get jwt response
message GetJwtResponse {
  // Success object
  message Success {
    // jwt
    google.protobuf.StringValue jwt = 1 [deprecated = true];
  }
  // result is either success or error
  // @deprecated: Use direct_jwt and gRPC error handling instead
  oneof result {
    // on success
    // @deprecated: Use direct_jwt instead
    Success success = 1 [deprecated = true];
    // on failure, return error
    // @deprecated: Use gRPC error handling instead
    GatewayError error = 2 [deprecated = true];
  }

  // Direct JWT field for simplified access
  string jwt = 3;

  // Token expiration time in minutes
  int32 expires_in_minutes = 4;

  // The expiration time in UTC
  google.protobuf.Timestamp expires_at = 5;
}

// get app metadata request
message GetAppMetadataRequest {
  // api developer
  StorefrontApiDeveloper developer = 1;
}

// get app metadata response
message GetAppMetadataResponse {
  // Success object
  message Success {
    // app metadata
    AppMetadata metadata = 1;
  }
  // result is either success or error
  oneof result {
    // on success
    Success success = 1;
    // on failure, return error
    GatewayError error = 2;
  }
}

// get user QR code request message
message GenerateStorefrontUserQRCodeRequest {
  // api developer,only integration_id, type and developer uuid is required
  StorefrontApiDeveloper developer = 1;
  // app user session id
  google.protobuf.StringValue session_id = 2;
  // store id
  google.protobuf.StringValue store_id = 3;
  // width of the QR code, defaulted to 300 if <= 0 or null
  google.protobuf.Int32Value width = 4;
  // height of the QR code, defaulted to 300 if <= 0 or null
  google.protobuf.Int32Value height = 5;
}

// get user QR code response message
message GenerateStorefrontUserQRCodeResponse {
  // Success object
  message Success {
    // QR Code in base 64 format
    google.protobuf.StringValue qr_code_base_64 = 1;
  }
  // result is either success or error
  oneof result {
    // on success
    Success success = 1;
    // on failure, return error
    GatewayError error = 2;
  }
}

// object representing app metadata
message AppMetadata {
  // consumer metadata
  AppConsumerMetadata consumer_metadata = 1;
  // loyalty related metadata
  AppLoyaltyMetadata loyalty_metadata = 2;
  // other app specific metadata
  AppThemeMetadata theme_metadata = 3;
  // rewards points details
  AccountType account_type = 4;
}

// metadata related to theme and other generic things to be rendered in the app.
message AppThemeMetadata {
  // privacy policy url
  google.protobuf.StringValue privacy_url = 2;
  // terms of use url
  google.protobuf.StringValue terms_of_use_url = 3;
  // guest_checkout_enabled
  google.protobuf.BoolValue guest_checkout_enabled = 4;
}

// metadata related to consumer specific use cases, such as sign in and sign up
message AppConsumerMetadata {
  // login url to be loaded in the webview
  google.protobuf.StringValue login_url = 1;
  // edit profile url to be loaded in the webview
  google.protobuf.StringValue edit_profile_url = 2;
  // oauth state
  google.protobuf.StringValue oauth_state = 3;
  // identity client oauth id
  google.protobuf.StringValue client_id = 4;
}

// loyalty related metadata
message AppLoyaltyMetadata {
  // rewards background image url
  google.protobuf.StringValue rewards_background_image_url = 1;
  // rewards header bottom sheet image url
  google.protobuf.StringValue rewards_header_bottom_sheet_image_url = 2;
  // rewards logo url
  google.protobuf.StringValue rewards_logo_url = 3;
  // signup header image url
  google.protobuf.StringValue signup_header_image_url = 4;
  // rewards points
  int32 rewards_points = 5;
  // rewards points details
  repeated google.protobuf.StringValue rewards_points_details = 6;
  // qr code metadata
  QrCodeAppMetadata qr_code_metadata = 7;
  // list of sections for how rewards work
  repeated HowRewardsWorkSection how_rewards_work = 8;
  // user loyalty reward header for sign up
  google.protobuf.StringValue sign_up_reward_header = 9;
  // user loyalty reward subtitle for sign up
  google.protobuf.StringValue sign_up_reward_subtitle = 10;
}

// qr code metadata
message QrCodeAppMetadata {
  // is QR Code enabled
  google.protobuf.BoolValue qr_code_enabled = 1;
  // qr code title
  google.protobuf.StringValue qr_code_title = 2;
  // qr code subtitle
  google.protobuf.StringValue qr_code_subtitle = 3;
  // qr code rewards title
  google.protobuf.StringValue qr_code_rewards_title = 4;
  // qr code rewards subtitle
  google.protobuf.StringValue qr_code_rewards_subtitle = 5;
}

// bullet points for how rewards work section
message HowRewardsWorkSection {
  // title
  google.protobuf.StringValue title = 1;
  // icon
  google.protobuf.StringValue icon = 2;
}

// check-in in store for loyalty
message LoyaltyCheckInRequest {
  // Session Id
  google.protobuf.StringValue session_id = 1;
  // Developer
  StorefrontApiDeveloper developer = 2;
  // store id
  google.protobuf.StringValue store_id = 3;
  // latitude
  google.protobuf.FloatValue latitude = 4;
  // longitude
  google.protobuf.FloatValue longitude = 5;
}

// check-in in store for loyalty
message LoyaltyCheckInResponse {
  // Success Object
  message Success {
    // present if the Cx earned a reward upon checking in
    Reward earned_reward = 1;
  }

  // result is either success or error
  oneof result {
    // on success
    Success success = 1;
    // on failure, return error
    GatewayError error = 2;
  }
}

// check-in in store for loyalty
message CompleteInStoreCheckInRequest {
  // Session Id
  google.protobuf.StringValue session_id = 1;
  // Identifier for the storefront entity that this particular requester
  // wants to check in for
  google.protobuf.Int64Value integration_id = 2;
  // What type of the storefront entity it is.
  IntegrationType integration_type = 3;
  // Requester identifier
  google.protobuf.StringValue developer_uuid = 4;
  // store id
  google.protobuf.Int32Value store_id = 5;
  // latitude
  google.protobuf.FloatValue latitude = 6;
  // longitude
  google.protobuf.FloatValue longitude = 7;
}

// check-in in store for loyalty
message CompleteInStoreCheckInResponse {
  // present if the Cx earned a reward upon checking in
  Reward earned_reward = 1;
}

// redeem in store customer reward
message RedeemInStoreCustomerRewardRequest {
  // Session Id
  google.protobuf.StringValue session_id = 1;
  // Identifier for the storefront entity that this particular requester
  // wants to redeem a reward for
  google.protobuf.Int64Value integration_id = 2;
  // What type of the storefront entity it is.
  IntegrationType integration_type = 3;
  // Requester identifier
  google.protobuf.StringValue developer_uuid = 4;
  // Reward to redeem
  google.protobuf.StringValue promotion_id = 5;
}

// redeem in store customer reward
message LoyaltyRedeemRewardRequest {
  // Session Id
  google.protobuf.StringValue session_id = 1;
  // Developer
  StorefrontApiDeveloper developer = 2;
  // Reward to redeem
  google.protobuf.StringValue promotion_id = 3;
}

// check-in in store for loyalty
message LoyaltyRedeemRewardResponse {
  // Success Object
  message Success {
    // accepted redemptions
    repeated loyalty_serivce.Redemption applied_redemption = 1;
    // rejected redemptions
    repeated loyalty_serivce.Redemption rejected_redemption = 2;
  }

  // result is either success or error
  oneof result {
    // on success
    Success success = 1;
    // on failure, return error
    GatewayError error = 2;
  }
}

// Retrieve customer loyalty reward
message LoyaltyRetrieveRewardsRequest {
  // Session Id
  google.protobuf.StringValue session_id = 1;
  // Developer
  StorefrontApiDeveloper developer = 2;
  // Store id
  google.protobuf.StringValue store_id = 3;
}

// check-in in store for loyalty
message LoyaltyRetrieveRewardsResponse {
  // Success Object
  message Success {
    // loyalty points
    google.protobuf.UInt32Value loyalty_points = 1;
    // loyalty rewards
    repeated money.LoyaltyReward loyalty_rewards = 2;
  }

  // result is either success or error
  oneof result {
    // on success
    Success success = 1;
    // on failure, return error
    GatewayError error = 2;
  }
}

// check-in in store for loyalty
message RedeemInStoreCustomerRewardResponse {
  // accepted redemptions
  repeated loyalty_serivce.Redemption applied_redemption = 1;
  // rejected redemptions
  repeated loyalty_serivce.Redemption rejected_redemption = 2;
}

// In store customer rewards
message InStoreRewards {
  // the Cx' current progress
  RewardsProgress rewards_progress = 1;
  // available rewards for the customer
  repeated Reward available_rewards = 2;
  // rewards the customer has not yet earned
  repeated Reward unavailable_rewards = 3;
  // activated rewards
  repeated Reward activated_rewards = 4;
  // past redemptions
  repeated Reward past_rewards = 5;
}

// store rewards progress
message RewardsProgress {
  // title
  google.protobuf.StringValue title = 1;
  // subtitle
  google.protobuf.StringValue subtitle = 2;
  // current points
  google.protobuf.Int32Value current_points = 3;
  // points needed
  google.protobuf.Int32Value target_points = 4;
}

// store reward details
message Reward {
  // reward id
  google.protobuf.StringValue reward_id = 1;
  // reward name
  google.protobuf.StringValue name = 2;
  // amount available to redeem for this reward
  google.protobuf.StringValue description = 3;
  // reward redemption state
  Redemption redemption = 4;

  // reward redemption state
  message Redemption {
    // has the reward been redeemed
    bool redeemed = 1;
    // optional message
    google.protobuf.StringValue message = 2;
    // time of redemption
    google.protobuf.Timestamp redemption_time = 3;
    // description of redemption when redeeming
    google.protobuf.StringValue description = 4;
    // time of expiration
    google.protobuf.Timestamp expiration_time = 5;
  }
}
