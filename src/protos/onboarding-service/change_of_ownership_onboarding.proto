syntax = "proto3";

package doordash_onboarding_service.v1;

import "common/common.proto";
import "common/service_client_config.proto";
import "doordash.api/annotations.proto";
import "doordash.api/field_validate.proto";
import "google/api/annotations.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "onboarding-service/onboarding.proto";

option java_generic_services = true;
option java_multiple_files = true;
// buf:lint:ignore PACKAGE_SAME_JAVA_PACKAGE
option java_package = "com.doordash.rpc.change_of_ownership_onboarding";

// Service used to change COO
service ChangeOfOwnershipOnboardingService {
  // The options not listed here use Hermes default.
  // The following applies for all RPCs in the service, if not overridden on individual RPCs.

  // Make a total 4 attempts (initial + three retries).
  option (service_client.client_config).retry_config.max_attempts = 4;

  option (doordash.api.service) = {
    name: "onboarding-service-web"
    name_spaces: ["onboarding"]
    port: 50051
    api_key_name: "ONBOARDING-SERVICE-API-KEY"
    owner: {
      id: "mx-support-and-resolution"
      name: "mx-support-and-resolution"
      slack_channel: "#eng-mx-support-and-resolution"
      email_alias: "core-mx-support-and-resolution@doordash.com"
    }
    target_products: [
      INTERNAL,
      MX,
      ADMIN_PORTAL
    ]
  };

  // The options not listed here use Hermes default.
  // The following applies for all RPCs in the service, if not overridden on individual RPCs.

  // Create store COO data
  rpc CreateStoreChangeOfOwnershipOnboarding(CreateStoreChangeOfOwnershipOnboardingRequest) returns (CreateStoreChangeOfOwnershipOnboardingResponse);

  // Update store COO data
  rpc UpdateStoreChangeOfOwnershipOnboarding(UpdateStoreChangeOfOwnershipOnboardingRequest) returns (UpdateStoreChangeOfOwnershipOnboardingResponse);

  // Approve COO onboarding
  rpc ApproveChangeOfOwnershipOnboarding(ApproveChangeOfOwnershipOnboardingRequest) returns (ApproveChangeOfOwnershipOnboardingResponse);

  // Submit COO onboarding after fraud check is performed and remove COO from on hold status
  rpc RemoveCOOFromHold(RemoveCOOFromHoldRequest) returns (RemoveCOOFromHoldResponse);

  // Submit COO onboarding
  rpc SubmitChangeOfOwnershipOnboarding(SubmitChangeOfOwnershipOnboardingRequest) returns (SubmitChangeOfOwnershipOnboardingResponse);

  // Cancel COO onboarding
  rpc CancelChangeOfOwnershipOnboarding(CancelChangeOfOwnershipOnboardingRequest) returns (CancelChangeOfOwnershipOnboardingResponse);

  // Put on hold COO onboarding
  rpc PutOnHoldChangeOfOwnershipOnboarding(PutOnHoldChangeOfOwnershipOnboardingRequest) returns (PutOnHoldChangeOfOwnershipOnboardingResponse);

  // create bulk create store change of ownerships
  rpc BulkCreateStoreChangeOfOwnerships(BulkCreateStoreChangeOfOwnershipsRequest) returns (BulkCreateStoreChangeOfOwnershipsResponse);

  // Bulk Approve change of ownership
  rpc BulkApproveChangeOfOwnershipsOnboarding(BulkApproveChangeOfOwnershipsOnboardingRequest) returns (BulkApproveChangeOfOwnershipsOnboardingResponse);

  // get coo by batch request id
  rpc GetStoreChangeOfOwnershipsOnboardingByBatchRequestId(GetStoreChangeOfOwnershipsOnboardingByBatchRequestIdRequest) returns (GetStoreChangeOfOwnershipsOnboardingByBatchRequestIdResponse);

  // get COOs records by store id
  rpc ListChangeOfOwnershipOnboardingByStoreId(ListChangeOfOwnershipOnboardingByStoreIdRequest) returns (ListChangeOfOwnershipOnboardingByStoreIdResponse);

  // Get store COO data
  rpc GetStoreChangeOfOwnershipOnboarding(GetStoreChangeOfOwnershipOnboardingRequest) returns (GetStoreChangeOfOwnershipOnboardingResponse) {
    option (google.api.http) = {get: "/onboarding/v1/change_of_ownership/{store_id}/get_coo"};

    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: PROD
      authorization: [NONE]
      target_products: [
        INTERNAL,
        MX,
        ADMIN_PORTAL
      ]
      slo_config: {
        critical_alerts_enabled: false // TODO: Enable critical alerts once we finalize the SLOs
        critical_5m_burn_threshold: 6000
        critical_5m_burn_sustain_seconds: 300
        p99_latency: 2
      }
    };
  }

  // Resubmit coo
  rpc ResubmitChangeOfOwnershipOnboarding(ResubmitChangeOfOwnershipOnboardingRequest) returns (ResubmitChangeOfOwnershipOnboardingResponse) {
    option (google.api.http) = {
      // {HttpMethod}: "{pathPattern}"
      post: "/onboarding/v1/change_of_ownership/{onboarding_id}/resubmit"

      // Needed for post, patch, put methods. Omit for others.
      body: "*"
    };

    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_USER]
      target_products: [
        INTERNAL,
        ADMIN_PORTAL
      ]
      role_based_authorization: {
        mode: ANY,
        roles: ["perm_edit_store_rescue_sscoo"]
      }
      slo_config: {
        critical_alerts_enabled: false // TODO: Enable critical alerts once we finalize the SLOs
        critical_5m_burn_threshold: 6000
        critical_5m_burn_sustain_seconds: 300
        p99_latency: 2
      }
    };
  }
}

// COO onboarding record
message StoreChangeOfOwnershipOnboarding {
  // onboarding id
  google.protobuf.StringValue onboarding_id = 1;
  //business id
  google.protobuf.Int64Value business_id = 2;
  //legal business name
  google.protobuf.StringValue legal_business_name = 3;
  // store id
  google.protobuf.Int64Value store_id = 4;
  // store name
  google.protobuf.StringValue store_name = 5;
  // scheduled cutoff time
  google.protobuf.Timestamp scheduled_cutoff_time = 6;
  // first name of new owner
  google.protobuf.StringValue new_owner_first_name = 7;
  // last name of new owner
  google.protobuf.StringValue new_owner_last_name = 8;
  // email of new owner
  google.protobuf.StringValue new_owner_email = 9;
  // phone number of new owner
  google.protobuf.StringValue new_owner_phone = 10;
  // requester user id
  google.protobuf.StringValue requester_user_id = 11;
  // new user id
  google.protobuf.StringValue new_user_id = 12;
  // old user id
  google.protobuf.StringValue old_user_id = 13;
  // if revoke access
  google.protobuf.BoolValue revoke_access = 14;
  // if create new business
  google.protobuf.BoolValue create_new_business = 15;
  // approve time
  google.protobuf.Timestamp approved_at = 16;
  // approval_status
  ApprovalStatus approval_status = 17;
  // onboarding_status
  OnboardingStatus onboarding_status = 18;
  // payment account id
  google.protobuf.Int64Value payment_account_id = 19;
  // pactsafe_activity_id
  google.protobuf.StringValue pactsafe_activity_id = 20;
  // batch request id
  google.protobuf.StringValue batch_request_id = 21;
  // additional coo fields
  AdditionalCooFields additional_fields = 22;
  // cancelled at
  google.protobuf.Timestamp cancelled_at = 23;
  // created at
  google.protobuf.Timestamp created_at = 24;
  // store address
  Address store_address = 25;
  // change of ownership events
  repeated CooEvent events = 26;
}

// new config data for coo
message AdditionalCooFields {
  // notes for approval
  google.protobuf.StringValue notes = 1;
  // order protocol
  OrderProtocol order_protocol = 2;
  // what POS provider
  PosProviderType pos_provider_type = 3;
  // is the store a franchise
  google.protobuf.BoolValue is_franchise = 4;
  // whether to ship tablet or not
  google.protobuf.BoolValue should_ship_tablet = 5;
  // tablet shipping address
  Address tablet_shipping_address = 6;
  // legal business shipping address
  Address legal_business_address = 7;
  // POS provider in string
  google.protobuf.StringValue pos_provider_type_str = 8;
  // actual scheduled cutoff time
  google.protobuf.Timestamp actual_scheduled_cutoff_time = 9;
  // order protocol phone number
  google.protobuf.StringValue order_protocol_phone_number = 10;
  // order protocol email
  google.protobuf.StringValue order_protocol_email = 11;
  // persona inquiry info
  PersonaInquiryInfo persona_inquiry_info = 12;
}

// Get store COO request
message GetStoreChangeOfOwnershipOnboardingRequest {
  // onboarding id
  google.protobuf.StringValue onboarding_id = 1;
  // store id
  google.protobuf.StringValue store_id = 2;
  // include cancelled
  google.protobuf.BoolValue include_completed = 3;
}

// Get COO response
message GetStoreChangeOfOwnershipOnboardingResponse {
  // COO record
  StoreChangeOfOwnershipOnboarding store_change_of_ownership_onboarding = 1;
  // Error msg
  google.protobuf.StringValue error = 2;
}

// Create COO request
message CreateStoreChangeOfOwnershipOnboardingRequest {
  // store id
  google.protobuf.Int64Value store_id = 1;
  // first name of new owner
  google.protobuf.StringValue new_owner_first_name = 3;
  // last name of new owner
  google.protobuf.StringValue new_owner_last_name = 4;
  // email of new owner
  google.protobuf.StringValue new_owner_email = 5;
  // phone number of new owner
  google.protobuf.StringValue new_owner_phone = 6;
  // requester user id
  google.protobuf.Int64Value requester_user_id = 7;
  // new owner id
  google.protobuf.Int64Value new_owner_id = 8;
  // old owner id
  google.protobuf.Int64Value old_owner_id = 9;
  // scheduled cut off time
  google.protobuf.Timestamp scheduled_cutoff_time = 10;
  // will be passed from backend this will be an UUID,
  google.protobuf.StringValue batch_request_id = 11;
}

// Create COO response
message CreateStoreChangeOfOwnershipOnboardingResponse {
  // onboarding id
  string onboarding_id = 1;
  // Success msg
  google.protobuf.BoolValue success = 2;
  // Error msg
  google.protobuf.StringValue error = 3;
  // store id
  google.protobuf.StringValue store_id = 4;
  // error code
  google.protobuf.StringValue error_code = 5;
}

// Update COO request
message UpdateStoreChangeOfOwnershipOnboardingRequest {
  // onboarding id
  string onboarding_id = 1;
  // store id
  google.protobuf.Int64Value store_id = 2;
  // business id
  google.protobuf.Int64Value business_id = 3;
  // legal business name
  google.protobuf.StringValue legal_business_name = 4;
  // new owner firstname
  google.protobuf.StringValue new_owner_first_name = 5;
  // new owner last name
  google.protobuf.StringValue new_owner_last_name = 6;
  // new owner email
  google.protobuf.StringValue new_owner_email = 7;
  // new owner phone
  google.protobuf.StringValue new_owner_phone = 8;
  // new owner id
  google.protobuf.Int64Value new_owner_id = 9;
  // old owner id
  google.protobuf.Int64Value old_owner_id = 10;
  // scheduled cutoff time
  google.protobuf.Timestamp scheduled_cutoff_time = 11;
  // revoke access
  google.protobuf.BoolValue revoke_access = 12;
  // create new business
  google.protobuf.BoolValue create_new_business = 13;
  // additional fields
  AdditionalCooFields additional_coo_fields = 14;
  // bypass date restrictions
  google.protobuf.BoolValue force_update_scheduled_cutoff_time = 15;
}

// Update COO response
message UpdateStoreChangeOfOwnershipOnboardingResponse {
  // onboarding id
  string onboarding_id = 1;
  // Success msg
  google.protobuf.BoolValue success = 2;
  // Error msg
  google.protobuf.StringValue error = 3;
}

// Approve COO request
message ApproveChangeOfOwnershipOnboardingRequest {
  // onboarding id
  string onboarding_id = 1;
  // update notes
  google.protobuf.StringValue notes = 2;
}

// Approve COO response
message ApproveChangeOfOwnershipOnboardingResponse {
  // the unique onboarding id.
  string onboarding_id = 1;
  // is request succeed
  google.protobuf.BoolValue success = 2;
  // Error msg
  google.protobuf.StringValue error = 3;
  // Error msg
  google.protobuf.StringValue error_code = 4;
  // store_id
  google.protobuf.StringValue store_id = 5;
}

// Submit COO request after fraud check is performed
message RemoveCOOFromHoldRequest {
  // onboarding id
  string onboarding_id = 1;

  // user_id who approved the change of ownership request
  string user_id = 2;

  // store_id
  string store_id = 3;

  // metadata
  google.protobuf.Struct metadata = 4;
}

// Submit COO response after fraud check is performed
message RemoveCOOFromHoldResponse {
  // the unique onboarding id.
  string onboarding_id = 1;
  // Success msg
  google.protobuf.BoolValue success = 2;
  // Error msg
  google.protobuf.StringValue error = 3;
}

// Submit COO request
message SubmitChangeOfOwnershipOnboardingRequest {
  // onboarding id
  string onboarding_id = 1;
  // Stripe account token
  string payment_account_token = 2;
  // Stripe person token
  string payment_person_token = 3;
  // Stripe bank token
  string payment_bank_token = 4;
  // pactsafe agreement payload
  string pactsafe_agreement_payload = 5;
  // pactsafe agreement payload
  google.protobuf.StringValue pactsafe_signer_id = 6;
}

// Submit COO response
message SubmitChangeOfOwnershipOnboardingResponse {
  // the unique onboarding id.
  string onboarding_id = 1;
  // Success msg
  google.protobuf.BoolValue success = 2;
  // Error msg
  google.protobuf.StringValue error = 3;
}

// Cancel COO request
message CancelChangeOfOwnershipOnboardingRequest {
  // onboarding id
  string onboarding_id = 1;

  // approval status
  ApprovalStatus approval_status = 2;

  // metadata
  google.protobuf.Struct metadata = 3;
}

// Cancel COO response
message CancelChangeOfOwnershipOnboardingResponse {
  // the unique onboarding id.
  string onboarding_id = 1;
  // Success msg
  google.protobuf.BoolValue success = 2;
  // Error msg
  google.protobuf.StringValue error = 3;
}

// Enum for Persona verification status
enum PersonaVerificationStatus {
  // Default unspecified
  PERSONA_VERIFICATION_STATUS_UNSPECIFIED = 0;

  // Approve
  PERSONA_VERIFICATION_STATUS_APPROVED = 1;

  // Declined
  PERSONA_VERIFICATION_STATUS_DECLINED = 2;

  // Pending
  PERSONA_VERIFICATION_STATUS_PENDING = 3;

  // Expired
  PERSONA_VERIFICATION_STATUS_EXPIRED = 4;

  // In review
  PERSONA_VERIFICATION_STATUS_IN_REVIEW = 5;
}

// Persona Inquiry Info
message PersonaInquiryInfo {
  // inquiry id
  string inquiry_id = 1;

  // template id
  string template_id = 2;

  // status
  PersonaVerificationStatus status = 3;
}

// Change of ownership event
message CooEvent {
  // coo status
  CooStatus coo_status = 1;

  // event time
  google.protobuf.Timestamp event_time = 2;

  // coo event order indicates the sorting order weight - lower number events occurs first
  google.protobuf.Int64Value coo_event_order = 3;
}

// Change of ownership status
enum CooStatus {
  // unspecified
  COO_STATUS_UNSPECIFIED = 0;

  // old owner approval
  COO_STATUS_PENDING_OLD_OWNER_APPROVAL = 1;

  // new owner submission
  COO_STATUS_PENDING_NEW_OWNER_SUBMISSION = 2;

  // pending document submission
  COO_STATUS_PENDING_DOC_SUBMISSION = 3;

  // waiting for fraud review
  COO_STATUS_WAITING_FOR_FRAUD_REVIEW = 4;

  // fraud review approved and pending coo date
  COO_STATUS_FRAUD_REVIEW_APPROVED_PENDING_COO_DATE = 5;

  // fraud review rescued by agent
  COO_STATUS_FRAUD_REVIEW_RESCUED_BY_AGENT = 6;

  // canceled by fraud
  COO_STATUS_CANCELED_BY_FRAUD = 7;

  // canceled
  COO_STATUS_CANCELED = 8;

  // complete
  COO_STATUS_COMPLETE = 9;

  // pending coo date
  COO_STATUS_PENDING_COO_DATE = 10;
}

// Put on hold COO request
message PutOnHoldChangeOfOwnershipOnboardingRequest {
  // onboarding id
  string onboarding_id = 1;
  // Stripe account token
  string payment_account_token = 2;
  // Stripe person token
  string payment_person_token = 3;
  // Stripe bank token
  string payment_bank_token = 4;
  // pactsafe agreement payload
  string pactsafe_agreement_payload = 5;
  // pactsafe agreement payload
  google.protobuf.StringValue pactsafe_signer_id = 6;
  // metadata
  google.protobuf.Struct metadata = 7;
  // persona inquiry info
  PersonaInquiryInfo persona_inquiry_info = 8;
}

// Cancel COO response
message PutOnHoldChangeOfOwnershipOnboardingResponse {
  // the unique onboarding id.
  string onboarding_id = 1;
  // Success msg
  google.protobuf.BoolValue success = 2;
  // Error msg
  google.protobuf.StringValue error = 3;
}

//Enum of approve status
enum ApprovalStatus {
  // Default unspecified
  APPROVAL_STATUS_UNSPECIFIED = 0;

  // Approve
  APPROVAL_STATUS_APPROVE = 1;

  // Reject
  APPROVAL_STATUS_REJECT = 2;

  // On hold
  APPROVAL_STATUS_ON_HOLD = 3;

  // approval flow completed successfully
  APPROVAL_STATUS_COMPLETE = 4;
}

//Enum of onboarding status
enum OnboardingStatus {
  // Default unspecified
  ONBOARDING_STATUS_UNSPECIFIED = 0;

  // Processing
  ONBOARDING_STATUS_PROCESSING = 1;

  // Submitted coo form
  ONBOARDING_STATUS_SUBMITTED_COO_FORM = 2;

  // Complete
  ONBOARDING_STATUS_COMPLETE = 3;

  // Cancelled
  ONBOARDING_STATUS_CANCELLED = 4;
}

// message for BulkCreateStoreChangeOfOwnershipsRequest
message BulkCreateStoreChangeOfOwnershipsRequest {
  // bulk request
  repeated CreateStoreChangeOfOwnershipOnboardingRequest create_store_change_of_ownership_onboarding_response = 1;
}

// message for bulk response
message BulkCreateStoreChangeOfOwnershipsResponse {
  // lsit of coo for a batch id
  repeated CreateStoreChangeOfOwnershipOnboardingResponse create_store_change_of_ownership_onboarding_response = 1;
  // batch request UUID
  google.protobuf.StringValue batch_request_id = 2;
}

// New Enum
enum ChangeOfOwnershipEventType {
  // when not set
  CHANGE_OF_OWNERSHIP_EVENT_TYPE_UNSPECIFIED = 0;
  // When coo request is submitted
  CHANGE_OF_OWNERSHIP_EVENT_TYPE_CREATED = 1;
  // When COO is approved by old owner
  CHANGE_OF_OWNERSHIP_EVENT_TYPE_APPROVED = 2;
  // When new owner completes all details and submits form
  CHANGE_OF_OWNERSHIP_EVENT_TYPE_READY = 3;
  // When COO is applied and cut over done
  CHANGE_OF_OWNERSHIP_EVENT_TYPE_COMPLETED = 4;
  // When COO is cancelled
  CHANGE_OF_OWNERSHIP_EVENT_TYPE_CANCELLED = 5;
}

// New Enum
enum ChangeOfOwnershipStrategy {
  // default strategy
  CHANGE_OF_OWNERSHIP_STRATEGY_UNSPECIFIED = 0;
  // same store
  CHANGE_OF_OWNERSHIP_STRATEGY_SAME_STORE = 1;
  // new store
  CHANGE_OF_OWNERSHIP_STRATEGY_NEW_STORE = 2;
}

// New Kafka event Message
message ChangeOfOwnershipLifeCycleEvent {
  // coo event type
  ChangeOfOwnershipEventType coo_event_type = 1;
  // change of ownership strategy
  ChangeOfOwnershipStrategy change_of_ownership_strategy = 2;
  // store coo record
  StoreChangeOfOwnershipOnboarding store_change_of_ownership_onboarding = 3;
}

// signature for GetStoreChangeOfOwnershipsOnboardingByBatchRequestIdRequest
message GetStoreChangeOfOwnershipsOnboardingByBatchRequestIdRequest {
  // onboarding id
  google.protobuf.StringValue batch_request_id = 1;
}

// signature for GetStoreChangeOfOwnershipsOnboardingByBatchRequestIdResponse
message GetStoreChangeOfOwnershipsOnboardingByBatchRequestIdResponse {
  // get response
  repeated GetStoreChangeOfOwnershipOnboardingResponse get_store_change_of_ownership_onboarding_response = 1;
}

// signature for ResubmitChangeOfOwnershipOnboardingRequest
message ResubmitChangeOfOwnershipOnboardingRequest {
  // Reserve field for backwards compatibility
  reserved 4;
  reserved "requester_user_id";
  // old onboarding id
  google.protobuf.StringValue onboarding_id = 1;
  // Requester's user id
  google.protobuf.Int64Value requester_id = 2;
  // options proto
  message Options {
    // Should we create a new coo
    google.protobuf.BoolValue create_new_coo = 1;
    // Store ID used for validation
    google.protobuf.Int32Value store_id = 2; // TODO: Remove this with MINT improvements to validate ids
    // Notes for resubmission to be stored in new onboarding record metadata
    google.protobuf.StringValue notes = 3;
  }
  // options
  Options options = 3;
}

// signature for ResubmitChangeOfOwnershipOnboardingResponse
message ResubmitChangeOfOwnershipOnboardingResponse {
  // old onboarding id
  google.protobuf.StringValue old_onboarding_id = 1;
  // new onboarding id
  google.protobuf.StringValue new_onboarding_id = 2;
  // success msg
  google.protobuf.BoolValue success = 3;
  // error msg
  google.protobuf.StringValue error = 4;
}

// signature for BulkApproveChangeOfOwnershipsOnboardingRequest
message BulkApproveChangeOfOwnershipsOnboardingRequest {
  // bulk approval request
  repeated ApproveChangeOfOwnershipOnboardingRequest approve_change_of_ownership_onboarding_request = 1;
}

// signature for BulkApproveChangeOfOwnershipsOnboardingResponse
message BulkApproveChangeOfOwnershipsOnboardingResponse {
  // bulk response
  repeated ApproveChangeOfOwnershipOnboardingResponse approve_change_of_ownership_onboarding_response = 1;
}

// signature for ListChangeOfOwnershipOnboardingByStoreIdRequest
message ListChangeOfOwnershipOnboardingByStoreIdRequest {
  // defines the criteria to find the COO information by specific key
  message LookupQuery {
    // Various identifiers to look up COO records for a store
    oneof lookup_key {
      // Lookup by storeId
      string store_id = 1;
    }
  }
  // lookup the COO information based on the provided criteria
  LookupQuery lookup_query = 1;
  // limit the number of records returned
  google.protobuf.Int64Value limit = 2;
}

// List of COOs
message ListChangeOfOwnershipOnboardingByStoreIdResponse {
  // get response
  repeated StoreChangeOfOwnershipOnboarding store_change_of_ownerships = 1;
  // total counts
  google.protobuf.Int64Value total_count = 2;
  // Error msg
  google.protobuf.StringValue error = 3;
}
