syntax = "proto3";
// buf:lint:ignore DIRECTORY_SAME_PACKAGE
package merchant_domain_order.v1;

import "common/common.proto";
import "common/consumer_domain_order.proto";
import "common/marketplace_purchase.proto";
import "common/money.proto";
import "common/names.proto";
import "common/order.proto";
import "common/service_client_config.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "order/event.proto";

option go_package = "merchant_domain_order_service";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.merchant_domain_order";

// MerchantDomainOrderService is a service that allows creating merchant orders
service MerchantDomainOrderService {
  // creates a merchant order
  rpc CreateMerchantOrder(CreateMerchantOrderRequest) returns (CreateMerchantOrderResponse);
}

// request to create a merchant order
message CreateMerchantOrderRequest {
  // order id of the parent consumer domain order
  .common.consumer_domain_order.v1.ConsumerDomainOrderIdentifier order_id = 1;
  // request body
  oneof request_body {
    // merchant order plan
    MerchantOrderPlan merchant_order_plan = 2;
  }
  // context of merchant order creation
  order.OrderCreationContext order_creation_context = 3;
}

// CreateMerchantOrderResponse
message CreateMerchantOrderResponse {
  // merchant order uuid
  google.protobuf.StringValue order_uuid = 1;
}

// MerchantOrderPlan represents the plan for a merchant order
message MerchantOrderPlan {
  // store details
  StoreDetails store_details = 1;
  // menu details
  MenuDetails menu_details = 2;
  // item details
  repeated ItemDetails item_details = 3;
}

// StoreDetails represents the details of a store
message StoreDetails {
  // store id
  string store_id = 1;
}

// MenuDetails represents the details of a menu
message MenuDetails {
  // menu id
  string menu_id = 1;
}

// ItemDetails represents the details of an item
message ItemDetails {
  // sku of item
  string merchant_supplied_id = 1;
  // menu item id
  string menu_item_id = 2;
  // Quantity of the item to be fulfilled
  common.QuantityInfo quantity_info = 3;
  // Image URL
  string item_image_url = 4;
  // Purchase Type
  common.marketplace_purchase.v1.PurchaseType purchase_type = 5;
  // Replacement Item URPC
  google.protobuf.StringValue dd_sic = 6;
  // unit price
  int64 unit_price = 7;
  // currency
  string currency = 8;
  // original item info
  OriginalItemInfo original_item = 9;

  // RFS provides completely new item IDs, so we need to keep track of the original item IDs.
  // This is required to build a hypothetical quote - the price the Cx agreed to payâ€”and ensure
  // we won't surprise the Cx with a completely new price.
  message OriginalItemInfo {
    // store id
    string store_id = 1;
    // menu id
    string menu_id = 2;
    // menu item id
    string menu_item_id = 3;
    // quantity info
    common.QuantityInfo quantity_info = 4;
    // order item id
    string order_item_id = 5;
  }
}
