syntax = "proto3";

package doordash.retail.inventory.v1;

import "common/code.proto";
import "common/marketplace_purchase.proto";
import "common/money.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.retail.inventoryservice";

// Inventory Feed
message InventoryFeed {
  // Source of the feed
  SourceOfFeed source = 1;
  // Merchant Name
  google.protobuf.StringValue merchant_name = 2;
  // Doordash business id
  google.protobuf.Int64Value business_id = 3;
  // Doordash store id
  google.protobuf.Int64Value store_id = 4;
  // Merchant supplied store id, aka location_id
  // Can be mapped to the doordash store_id based on:
  // (merchant_name, merchant_supplied_store_id) <> store_id
  google.protobuf.StringValue merchant_supplied_store_id = 5;
  // Merchant supplied item id, usually SKU id
  google.protobuf.StringValue merchant_supplied_item_id = 6;
  // Merchant supplied item name or hydrated item name
  google.protobuf.StringValue item_name = 7;
  // Merchant supplied item category or hydrated item category
  google.protobuf.StringValue category = 8;
  // Comment out because potential hydration involved
  // Purchase info of the item.
  // common.marketplace_purchase.v1.ItemPurchaseInfo purchase_info = 9;
  // Tax Rate
  google.protobuf.DoubleValue tax_rate = 9;
  // Is an alcoholic item or not
  google.protobuf.BoolValue is_alcohol = 10;
  // Is random weight, for reference only, Catalog.purchase_type as SOT for WI
  google.protobuf.BoolValue is_random_weight = 11;
  // Merchant supplied item description
  google.protobuf.StringValue description = 12;
  // Price of the item
  money.MonetaryFields price = 13;
  // Measurement price of the item, required for weighted item.
  money.MonetaryFields measurement_price = 14;
  // Approximate weighted of the item, optional from merchant.
  // For weighted item only, fallback to catalog.approximate_sold_as_quantity when not available during hydration.
  google.protobuf.DoubleValue approximate_sold_as_quantity = 15;
  // Bottle deposit fee of the item.
  money.MonetaryFields bottle_deposit_fee = 16;
  // Complex deals related promo info
  repeated PromotionInfo promotion_info = 17;
  // Is an bike friendly item or not
  google.protobuf.BoolValue is_bike_friendly = 18;
  // UPC
  google.protobuf.StringValue upc = 19;
  // Variant (eg. size, color)
  repeated google.protobuf.StringValue variant = 20;
}

// The merchant store info
message StoreInfo {
  // Merchant Name, optional
  google.protobuf.StringValue merchant_name = 1;
  // Doordash business id, required
  google.protobuf.Int64Value business_id = 2;
  // Doordash store id, required
  google.protobuf.Int64Value store_id = 3;
  // Merchant supplied store id, aka location_id
  // Can be mapped to the doordash store_id based on:
  // (merchant_name, merchant_supplied_store_id) <> store_id
  // Optional, could be empty for local grocery
  google.protobuf.StringValue merchant_supplied_store_id = 4;
  // Store hours, this is used for merchants to update their open hours.
  repeated OpenHours open_hours = 5;
}

// The inventory information for an item
message Inventory {
  reserved 27, 28;
  reserved "experiment_attributes", "experiment_attribute";

  // Merchant supplied item id, usually SKU id
  google.protobuf.StringValue merchant_supplied_item_id = 1;
  // Merchant supplied item name or hydrated item name
  google.protobuf.StringValue item_name = 2;
  // Merchant supplied item category or hydrated item category
  google.protobuf.StringValue category = 3;
  // Comment out because potential hydration involved
  // Purchase info of the item.
  // common.marketplace_purchase.v1.ItemPurchaseInfo purchase_info = 9;
  // Tax Rate
  google.protobuf.DoubleValue tax_rate = 4;
  // Is an alcoholic item or not
  google.protobuf.BoolValue is_alcohol = 5;
  // Is random weight, for reference only, Catalog.purchase_type as SOT for WI
  google.protobuf.BoolValue is_random_weight = 6;
  // Merchant supplied item description
  google.protobuf.StringValue description = 7;
  // Price of the item
  money.MonetaryFields price = 8;
  // Measurement price of the item, required for weighted item.
  money.MonetaryFields measurement_price = 9;
  // Loyalty price of the item
  money.MonetaryFields loyalty_price = 10;
  // Loyalty Measurement price of the item, required for weighted item.
  money.MonetaryFields loyalty_measurement_price = 11;
  // Non discount price of the item
  money.MonetaryFields non_discount_price = 12;
  // Non discount measurement price of the item, required for weighted item.
  money.MonetaryFields non_discount_measurement_price = 13;
  // Approximate weighted of the item, optional from merchant.
  // For weighted item only, fallback to catalog.approximate_sold_as_quantity when not available during hydration.
  google.protobuf.DoubleValue approximate_sold_as_quantity = 14;
  // Bottle deposit fee of the item.
  money.MonetaryFields bottle_deposit_fee = 15;
  // Merchant supplied item size_modifier
  google.protobuf.StringValue size_modifier = 16;
  // Complex deals related promo info
  repeated PromotionInfo promotion_info = 17;
  // Item dd_sic_id, null if not returned from Catalog
  google.protobuf.StringValue dd_sic_id = 18;
  // Is an bike friendly item or not
  google.protobuf.BoolValue is_bike_friendly = 19;
  // availability flag at item level
  AvailabilityFlag availability_flag = 20;
  // location information at item level
  LocationInfo location_info = 21;
  // UPC
  google.protobuf.StringValue upc = 22;
  // Variant (eg. size, color)
  repeated google.protobuf.StringValue variant = 23;
  // item extra info
  google.protobuf.StringValue item_extra_json = 24;
  // purchase info for gift card items
  common.marketplace_purchase.v1.DynamicPricePurchase dynamic_price_purchase_info = 25;
  // the time when the inventory item was observed, this is used in arbitration to determine the latest inventory
  // ex. time of order fulfillment for receipts, time of shelf scan for JETS
  google.protobuf.Timestamp observed_at = 26;
  // Inventory AB Experiments
  repeated InventoryABExperiment inventory_ab_experiments = 29;
}

// Price-related information for inventory override
message PriceOverride {
  // Price of the item (if it is non-weighted)
  money.MonetaryFields price = 1;
  // Measurement price of the item (if it is weighted)
  money.MonetaryFields measurement_price = 2;
  // Loyalty price of the item (if it is non-weighted)
  money.MonetaryFields loyalty_price = 3;
  // Loyalty price of the item (if it is weighted)
  money.MonetaryFields loyalty_measurement_price = 4;
  // Non discounted price of the item (if it is non-weighted)
  money.MonetaryFields non_discount_price = 5;
  // Non discounted price of the item (if it is weighted)
  money.MonetaryFields non_discount_measurement_price = 6;
}

// The inventory override information for an item
message InventoryOverride {
  // Merchant supplied item id, usually SKU id
  string merchant_supplied_item_id = 1;

  // Set only if you are attempting to add/update/clear overrides for
  // price attributes. If you want to preserve existing overrides
  // that you sent in a previous call, don't set this object in the input payload.
  PriceOverride price_override = 2;

  // Set only if you are attempting to add/update/clear overrides for
  // location attributes. If you want to preserve existing overrides
  // that you sent in a previous call, don't set this object in the input payload.
  LocationInfo location_info_override = 3;
}

// The inventory update result
message InventoryUpdateResult {
  // The inventory info
  Inventory inventory = 1;
  // The retail feed update info, such as updated at, updated by and current version
  InventoryUpdateStatus inventory_update_status = 2;
  // If there was any error on this retail feed, it will explain the error reason.
  google.protobuf.StringValue error_message = 21;
}

// The inventory update status
enum InventoryUpdateStatus {
  // Inventory update status unspecified, this is the default value
  INVENTORY_UPDATE_STATUS_UNSPECIFIED = 0;
  // Inventory update successfully
  INVENTORY_UPDATE_STATUS_SUCCESS = 1;
  // Inventory update failed
  INVENTORY_UPDATE_STATUS_FAILED = 2;
}

// Feed update timestamps, read only fields, for response payload
// Feed item might be refreshed without content change, so have a separate refresh timestamp
message FeedUpdateInfo {
  // Created by
  string created_by = 1;
  // Created at
  google.protobuf.Timestamp created_at = 2;
  // Updated by
  string updated_by = 3;
  // Updated by
  google.protobuf.Timestamp updated_at = 4;
  // Refresh by
  string refreshed_by = 5;
  // Refresh timestamp
  google.protobuf.Timestamp refreshed_at = 6;
  // Version
  google.protobuf.Int64Value version = 7;
}

// Inventory feed response
// Create separate entity to avoid confusion for API users, meanwhile easy to convert
// For service response only, read only fields included
message InventoryFeedResponse {
  // Inventory Feed
  InventoryFeed inventory_feed = 1;
  // Update Info
  FeedUpdateInfo update_info = 2;
  // Individual entity status
  code.Code status_code = 20;
  // Error Message
  google.protobuf.StringValue error_message = 21;
}

// Feed item change preview result
enum FeedUpdatePreview {
  // Default 0
  FEED_UPDATE_PREVIEW_UNSPECIFIED = 0;
  // No matching item found from the channel
  FEED_UPDATE_PREVIEW_NO_MATCHING_ITEM_FOUND = 1;
  // Found matching item but no change detected
  FEED_UPDATE_PREVIEW_MATCHING_ITEM_FOUND_NO_CHANGE_DETECTED = 2;
  // Found matching items and change detected
  FEED_UPDATE_PREVIEW_MATCHING_ITEM_FOUND_CHANGE_DETECTED = 3;
  // No data supplied for the item
  FEED_UPDATE_PREVIEW_NO_DATA_SUPPLIED_FOR_ITEM = 4;
}

// Feed item update change action
enum FeedUpdateAction {
  // Default 0
  FEED_UPDATE_ACTION_UNSPECIFIED = 0;
  // Create a new item
  FEED_UPDATE_ACTION_CREATE_NEW_ITEM = 1;
  // Update the existing item
  FEED_UPDATE_ACTION_UPDATE_EXISTING_ITEM = 2;
  // Skip updating the item since no change is detected
  FEED_UPDATE_ACTION_SKIP_UPDATING_ITEM_SINCE_NO_CHANGE = 3;
  // Deactivate the existing item
  FEED_UPDATE_ACTION_DEACTIVATE_EXISTING_ITEM = 4;
}

// Feed update change apply status
enum FeedUpdateApplyStatus {
  // Default 0
  FEED_UPDATE_APPLY_STATUS_UNSPECIFIED = 0;
  // Preview only, no change applied
  FEED_UPDATE_APPLY_STATUS_CHANGE_NOT_APPLIED = 1;
  // Change successfully applied
  FEED_UPDATE_APPLY_STATUS_CHANGE_APPLY_SUCCEED = 2;
  // Change apply failed
  FEED_UPDATE_APPLY_STATUS_CHANGE_APPLY_FAILED = 3;
}

// Inventory Feed Update Response - returned from write API(s)
message InventoryFeedUpdateResponse {
  // Current Feed
  InventoryFeed current_feed = 1;
  // Current Update Info
  FeedUpdateInfo current_update_info = 2;
  // New Feed
  InventoryFeed new_feed = 3;
  // This is only populated when the changes are applied.
  FeedUpdateInfo new_update_info = 4;
  // Update Preview
  FeedUpdatePreview update_preview = 5;
  // Update Action
  FeedUpdateAction update_action = 6;
  // Update Apply Status
  FeedUpdateApplyStatus update_apply_status = 7;

  // The following will not be set if this response is nested
  // inside one or more messages.
  // gRPC response code
  code.Code code = 20;
  // Error Message
  google.protobuf.StringValue error_message = 21;
}

// Flags to decide different aspect of the item availability
message AvailabilityFlag {
  // Is the item visible to the customers
  // E.g. when set as false, the item will be hidden from customer
  google.protobuf.BoolValue is_visible = 1;
  // Is the item orderable by the customer or not
  // E.g. when set as false, the item can't be ordered
  // Deprecated, please use is_in_stock
  google.protobuf.BoolValue is_orderable = 2;
  // Is the item in stock or not, controls whether item can be fulfiled
  // E.g. when set as false, the item can't be fulfilled.
  google.protobuf.BoolValue is_in_stock = 3;
  // Quantity in stock, unit refers to the corresponding purchase info
  google.protobuf.StringValue quantity_in_stock = 4;
  // The open hours for this item
  repeated OpenHours open_hours = 5;
  // The stock level info list for this item
  repeated StockLevelInfo stock_level_info = 6;
  // date that item availability is sticky until.
  // Only applies to the source of channel FEED_PROCESSING_CHANNEL_BULK_FEED_UPLOADER
  google.protobuf.Timestamp availability_sticky_until_date = 7;
  // Merchant provided last sold datetime
  google.protobuf.Timestamp last_sold_at = 8;
}

// PromotionInfo contains complex deals related info
message PromotionInfo {
  // Supported promotion types enum
  PromotionType promotion_type = 1;
  // Required purchase quantity qualified for promotion
  google.protobuf.Int64Value purchase_quantity = 2;
  // Total price after promotion
  money.MonetaryFields total_price = 3;
  // Qualified discounted quantity
  google.protobuf.Int64Value discount_quantity = 4;
  // Discount percentage off, max is 100
  google.protobuf.DoubleValue discount_percentage = 5;
  // Discount price off
  money.MonetaryFields discount_price_off = 6;
  // Limited purchasable discounted quantity
  google.protobuf.Int64Value quantity_limit = 7;
  // Promotion start time
  google.protobuf.Timestamp start_date_time = 8;
  // Promotion end time
  google.protobuf.Timestamp end_date_time = 9;
  // DD Internal Promotion id
  google.protobuf.StringValue promotion_info_id = 10;
  // Promotion terms and condition
  google.protobuf.StringValue terms_and_conditions_content_id = 11;
  // List of MsIds. Purchase those item will receive promotion
  repeated google.protobuf.StringValue purchase_items = 12;
  // List of MsIds. Apply promo on those items. Phase 1 only support promotion discounts applying on same item, this will always null for now.
  repeated google.protobuf.StringValue discount_items = 13;
  // internal health_status for promotion, default is active
  HealthStatus health_status = 14;
  // Mx provided promotion id
  google.protobuf.StringValue mx_provided_promotion_id = 15;
}

// Internal enum for promotion health status, default is active
enum HealthStatus {
  // Unspecified
  HEALTH_STATUS_UNSPECIFIED = 0;
  // Promotion is healthy and active
  HEALTH_STATUS_ACTIVE = 1;
  // Promotion is unhealthy, set to inactive
  HEALTH_STATUS_INACTIVE = 2;
}

// PromotionType defines dd supported promotion types
enum PromotionType {
  // Unspecified
  PROMOTION_TYPE_UNSPECIFIED = 0;
  // Buy X items for total Y
  PROMOTION_TYPE_BUY_X_FOR_Y = 1;
  // Buy X items get Y items Z percent off
  PROMOTION_TYPE_BUY_X_GET_Y_Z_PERCENT_OFF = 2;
  // Buy X items save Y
  PROMOTION_TYPE_BUY_X_SAVE_Y = 3;
  // Buy X items for total Y for multi SKU
  PROMOTION_TYPE_BUY_X_FOR_Y_MULTI_SKU = 4;
  // Buy X items get Y items Z percent off for multi SKU
  PROMOTION_TYPE_BUY_X_GET_Y_Z_PERCENT_OFF_MULTI_SKU = 5;
  // Buy X items save Y for multi SKU
  PROMOTION_TYPE_BUY_X_SAVE_Y_MULTI_SKU = 6;
}

// Stock level info, including badge, source and mode id related info
message StockLevelInfo {
  // The stock level enum
  StockLevel stock_level = 1;
  // The stock level source
  StockLevelSource source = 2;
  // The experiment key, could be used for A/B testing
  google.protobuf.StringValue experiment = 3;
  // When this stock level info will expire at, this is to avoid stock level info showing too long
  google.protobuf.Timestamp expire_at = 4;
  // The model id which predicted the OOS
  google.protobuf.StringValue model_id = 5;
  // The score for that OOS prediction
  google.protobuf.StringValue score = 6;
  // When this stock level info will become relevant, this is to support different stock levels
  // through the day
  google.protobuf.Timestamp start_at = 7;
}

// Stock level source
enum StockLevelSource {
  // Unspecified
  STOCK_LEVEL_SOURCE_UNSPECIFIED = 0;
  // The stock level info is from OOS classifier
  STOCK_LEVEL_SOURCE_OOS_CLASSIFIER = 1;
  // The stock level info is from dasher informed
  STOCK_LEVEL_SOURCE_DASHER_INFORMED = 2;
  // The stock level info is from merchant informed
  STOCK_LEVEL_SOURCE_MERCHANT_INFORMED = 3;
  // The stock level info is from operators
  STOCK_LEVEL_SOURCE_OPERATOR_INFORMED = 4;
}

// The stock level enum
enum StockLevel {
  // Unspecified
  STOCK_LEVEL_UNSPECIFIED = 0;
  // The item is in stock
  STOCK_LEVEL_IN_STOCK = 1;
  // The item is low stock
  STOCK_LEVEL_LOW_STOCK = 2;
  // The item is high in stock
  STOCK_LEVEL_HIGH_STOCK = 3;
  // The item is out of stock
  STOCK_LEVEL_OUT_OF_STOCK = 4;
  // The item is going to restocking soon
  STOCK_LEVEL_RESTOCKING_SOON = 5;
}

// Availability Feed
message ItemAvailability {
  // Source of Feed
  SourceOfFeed source = 1;
  // Doordash store id
  google.protobuf.Int64Value store_id = 2;
  // Merchant supplied item id, usually SKU id
  google.protobuf.StringValue merchant_supplied_item_id = 3;
  // Source of the availability feed
  // Control flag
  AvailabilityFlag flag = 4;
  // The following available hours fields are comment out intentionally
  // Uncomment when ready to support item level hours for retail
  // Regular available hours
  // repeated RegularAvailableHours regular_hours = 10;
  // Speical avalable hours
  // repeated SpecialAvilableHours spepcial_hours = 11;
}

// The item level open hour
message OpenHours {
  // the day index
  DayOfWeek day_of_week = 1;
  // the format should be HH:MM:SS
  string start_time = 2;
  // the format should be HH:MM:SS
  string end_time = 3;
}

// Availability feed response
// For service response only, read only fields included
message ItemAvailabilityResponse {
  // Item Availability
  ItemAvailability item_availability = 1;
  // Update Info
  FeedUpdateInfo update_info = 2;
  // Individual entity status
  code.Code code = 20;
  // Error Message
  google.protobuf.StringValue error_message = 21;
}

// Availability feed udpate response - returned from write API(s)
message ItemAvailabilityUpdateResponse {
  // Current Availability
  ItemAvailability current_item_availability = 1;
  // Current Update Info
  FeedUpdateInfo current_update_info = 2;
  // New Availability
  ItemAvailability new_item_availability = 3;
  // New Update Info
  FeedUpdateInfo new_update_info = 4;
  // Update Preview
  FeedUpdatePreview update_preview = 5;
  // Update Action
  FeedUpdateAction update_action = 6;
  // Update Apply Status
  FeedUpdateApplyStatus update_apply_status = 7;

  // The following will not be set if this response is nested
  // inside one or more messages.
  // gRPC response code
  code.Code code = 20;
  // Error Message
  google.protobuf.StringValue error_message = 21;
}

// Regular available hours of the item
// If set, items are ONLY available in these hours, otherwise fallback to store level hours
// Usually for special items, such as alcoholic items that are sellable in limited hours of the day
message RegularAvailableHours {
  // Day of the week
  DayOfWeek day_of_week = 1;
  // Start time, seconds since the beginning of the day
  // E.g. 3600 -> 1:00AM
  google.protobuf.Int32Value start_time = 2;
  // End time, seconds since the beginning of the day
  google.protobuf.Int32Value end_time = 3;
}

// Day of the week
enum DayOfWeek {
  // Default 0
  DAY_OF_WEEK_UNSPECIFIED = 0;
  // Monday
  DAY_OF_WEEK_MON = 1;
  // Tuesday
  DAY_OF_WEEK_TUE = 2;
  // Wednesday
  DAY_OF_WEEK_WED = 3;
  // Thursday
  DAY_OF_WEEK_THU = 4;
  // Friday
  DAY_OF_WEEK_FRI = 5;
  // Saturday
  DAY_OF_WEEK_SAT = 6;
  // Sunday
  DAY_OF_WEEK_SUN = 7;
}

// Special available hours of the item, ttems can be in/out of stock in these hours
// Usually used for promotional/seasonale items which are avilable during limited times
message SpecialAvailableHours {
  // When set, the flags will overwrite item level flag at the given date or hour
  AvailabilityFlag flag = 1;
  // Date when the item is/not available
  // in yyyy-mm-dd format
  google.protobuf.StringValue date = 2;
  // Start time, seconds since the beginning of the day
  // E.g. 3600 -> 1:00AM
  google.protobuf.Int32Value start_time = 3;
  // End time, seconds since the beginning of the day
  google.protobuf.Int32Value end_time = 4;
}

// Item fulfillment information
// E.g. item location at the store
message FulfillmentFeed {
  // Feed Source
  SourceOfFeed source = 1;
  // Doordash store id
  google.protobuf.Int64Value store_id = 2;
  // Merchant supplied item id, usually SKU id
  google.protobuf.StringValue merchant_supplied_item_id = 3;
  // UPC code of the item
  repeated google.protobuf.StringValue upc = 4;
  // More fields to be defined, such as item location
}

// Fulfillment feed response
// For service response only, read only fields included
message FulfillmentFeedResponse {
  // Fulfillment Feed
  FulfillmentFeed fulfillment_feed = 1;
  // Update Info
  FeedUpdateInfo update_info = 2;
  // Individual entity status
  code.Code code = 20;
  // Error Message
  google.protobuf.StringValue error_message = 21;
}

// Fulfillment feed update response - returned from write API(s)
message FulfillmentFeedUpdateResponse {
  // Current Fuilfillment Feed
  FulfillmentFeed current_fulfillment_feed = 1;
  // Current Feed Update Info
  FeedUpdateInfo current_feed_update_info = 2;
  // New Fulfillment Feed
  FulfillmentFeed new_fulfillment_feed = 3;
  // Update Preview
  FeedUpdatePreview update_preview = 4;
  // Update Action
  FeedUpdateAction update_action = 5;
  // Update Apply Status
  FeedUpdateApplyStatus update_apply_status = 6;

  // The following will not be set if this response is nested
  // inside one or more messages.
  // gRPC response code
  code.Code code = 20;
  // Error Message
  google.protobuf.StringValue error_message = 21;
}

// Feed Supply Source
// Including the feed vendor and the processing channel
// The two combined can be used to determine the
message SourceOfFeed {
  // Vendor of the feed/request, indicating where the feed/request originally comes from
  // E.g. merchant_supplied, operator_curated
  string vendor = 1;
  // Indicating through which channel the feed is processed.
  FeedProcessingChannel processing_channel = 2;
}

// Channel the original feed
enum FeedProcessingChannel {
  reserved 14;
  reserved "FEED_PROCESSING_CHANNEL_PERSIST_PARTIAL_ATTRIBUTES";
  // Default 0
  FEED_PROCESSING_CHANNEL_UNSPECIFIED = 0;
  // Custom pipeline
  FEED_PROCESSING_CHANNEL_MX_CUSTOM_PROCESSOR = 1;
  // Nexla feed processor
  FEED_PROCESSING_CHANNEL_NEXLA_FEED_PROCESSOR = 2;
  // Bulk feed uploader
  FEED_PROCESSING_CHANNEL_BULK_FEED_UPLOADER = 3;
  // SSIM
  FEED_PROCESSING_CHANNEL_SSIM = 4;
  // POS
  FEED_PROCESSING_CHANNEL_POS = 5;
  // GROUND_TRUTH
  FEED_PROCESSING_CHANNEL_GROUND_TRUTH = 6;
  // Data transformation processor
  FEED_PROCESSING_CHANNEL_DATA_TRANSFORMATION_FEED_PROCESSOR = 7;
  // DashMart processor
  FEED_PROCESSING_CHANNEL_DASHMART_FEED_PROCESSOR = 8;
  // Feed hydration service, for hydrated feed only
  FEED_PROCESSING_CHANNEL_FEED_HYDRATION_SERVICE = 10;
  // Backfill Script Update
  FEED_PROCESSING_CHANNEL_FEED_PROCESSOR_BACKFILL_SCRIPT = 11;
  // refresh inventory
  FEED_PROCESSING_CHANNEL_REFRESH_INVENTORY = 12;
  // Inventory E2E test workflow
  FEED_PROCESSING_CHANNEL_INVENTORY_E2E_TEST = 13;
  // Real time inflation update sync
  FEED_PROCESSING_CHANNEL_INFLATION_UPDATE = 15;
  // Open API ingestion workflows
  FEED_PROCESSING_CHANNEL_OPEN_API = 16;
  // Mx pull mode workflows
  FEED_PROCESSING_CHANNEL_MX_ADAPTOR = 17;
  // JETS short term OOS
  FEED_PROCESSING_CHANNEL_JETS_ST_OOS = 18;
  // JETS long term OOS
  FEED_PROCESSING_CHANNEL_JETS_LT_OOS = 19;
  // ACI Adapter
  FEED_PROCESSING_CHANNEL_ACI_ADAPTER = 20;
  // Open API Promotion
  FEED_PROCESSING_CHANNEL_OPEN_API_PROMOTION = 21;
  // Badge tool
  FEED_PROCESSING_CHANNEL_GROUND_TRUTH_BADGE_TOOL = 22;
  // Gift cards
  FEED_PROCESSING_CHANNEL_GIFT_CARDS = 23;
  // Kaizen platform for test store creation/updates
  FEED_PROCESSING_CHANNEL_KAIZEN_PLATFORM = 24;
  // Megatron feed
  FEED_PROCESSING_CHANNEL_MIRDM_FEED_PROCESSOR = 25;
  // Ground truth receipt price feedback loop
  FEED_PROCESSING_CHANNEL_GROUND_TRUTH_RECEIPT_PRICE_FEEDBACK_LOOP = 26;
}

// Source for inventory override
enum SourceOfOverrideFeed {
  // Default 0
  SOURCE_OF_OVERRIDE_FEED_UNSPECIFIED = 0;
  // Inventory override bulk tool
  SOURCE_OF_OVERRIDE_FEED_BULK_TOOL = 1;
}

// Represent one inventory feed item
message InventoryFeedItem {
  // Inventory Feed
  InventoryFeed item = 1;
  // Item availability
  ItemAvailability availability = 2;
  // Fulfillment info
  FulfillmentFeed fulfillment_info = 3;
}

// Raw inventory feed
message RawInventoryFeed {
  // Raw Item
  InventoryFeedItem raw_items = 1;
}

// Raw inventory feed response, read only fields included
message RawInventoryFeedResponse {
  // Inventory Feed
  repeated InventoryFeedResponse item = 1;
  // Item availability
  repeated ItemAvailabilityResponse availability = 2;
  // Fulfillment info
  repeated FulfillmentFeedResponse fulfillment_info = 3;
  // Individual entity status
  code.Code code = 20;
  // Error Message
  google.protobuf.StringValue error_message = 21;
}

// Raw inventory feed update response - returned from write API(s)
message RawInventoryFeedUpdateResponse {
  // Inventory Feed
  InventoryFeedUpdateResponse item_update = 1;
  // Item availability
  ItemAvailabilityUpdateResponse availability_update = 2;
  // Fulfillment info
  FulfillmentFeedUpdateResponse fulfillment_info_update = 3;

  // The following will not be set if this response is nested
  // inside one or more messages.
  // gRPC response code
  code.Code code = 20;
  // Error Message
  google.protobuf.StringValue error_message = 21;
}

// Hydrated inventory feed based on the raw inventory feed.
// Feed from multiple channels should be consolidated into one at this stage.
message HydratedInventoryFeed {
  // Hydrated Item
  InventoryFeedItem hydrated_item = 1;
}

// Hydrated inventory feed response, read only fields included.
message HydratedInventoryFeedResponse {
  // Inventory Feed
  InventoryFeedResponse item = 1;
  // Item availability
  ItemAvailabilityResponse availability = 2;
  // Fulfillment info
  FulfillmentFeedResponse fulfillment_info = 3;
  // Individual entity status
  code.Code code = 20;
  // Error Message
  google.protobuf.StringValue error_message = 21;
}

// Hydrated inventory feed update response
message HydratedInventoryFeedUpdateResponse {
  // Inventory Feed
  InventoryFeedUpdateResponse item_update = 1;
  // Item availability
  ItemAvailabilityUpdateResponse availability_update = 2;
  // Fulfillment info
  FulfillmentFeedUpdateResponse fulfillment_info_update = 3;
  // Individual entity status
  code.Code code = 20;
  // Error Message
  google.protobuf.StringValue error_message = 21;
}

// Status of inventory feed menu sync
enum MenuSyncStatus {
  // Default 0
  MENU_SYNC_STATUS_UNSPECIFIED = 0;
  // Menu sync succeeded
  MENU_SYNC_STATUS_SUCCESS = 1;
  // Menu sync failed
  MENU_SYNC_STATUS_FAILED = 2;
}

// view mode for look up api
enum ViewMode {
  // Default 0
  VIEW_MODE_UNSPECIFIED = 0;
  // Mx view mode
  VIEW_MODE_MX = 1;
  // Menu only view mode
  VIEW_MODE_MENU_ONLY = 2;
  // Hydrated to menu view mode
  VIEW_MODE_HYDRATED_TO_MENU = 3;
  // Raw inventory view mode
  VIEW_MODE_RAW_INVENTORY = 4;
}

// location information at item level
message LocationInfo {
  // text-based item location e.g. "Aisle 6"
  AisleInfo aisle_info = 1;
  // coordinate-based item location from different providers
  repeated HighPrecisionLocation high_precision_locations = 2;
}

// text-based item location e.g. "Aisle 6"
message AisleInfo {
  //the aisle the item is located at
  google.protobuf.StringValue aisle = 1;
  // zone the item is located at
  google.protobuf.StringValue zone = 2;
  // Section the item is located at
  google.protobuf.StringValue section = 3;
  // Shelf the item is on
  google.protobuf.StringValue shelf = 4;
  // Which side of the aisle the item is located
  google.protobuf.StringValue side = 5;
  // Unparsed raw data that comes from merchants
  google.protobuf.StringValue raw_text = 6;
  // A specific, distinct, human-understandable location within a store
  google.protobuf.StringValue area = 7;
  // Probability score of area
  google.protobuf.FloatValue area_probability = 8;
  // Additional details or hints for aisle information for an item
  google.protobuf.StringValue additional_details = 9;
}

// coordinate-based item location
message HighPrecisionLocation {
  // Enum for the providers of High Precision Location
  enum Provider {
    // Default 0
    PROVIDER_UNSPECIFIED = 0;
    // High Precision Location Provider 3p Oriient
    PROVIDER_ORIIENT = 1;
    // High Precision Location Provider 1p
    PROVIDER_DOORDASH = 2;
  }
  // provider of the high precision location
  Provider provider = 1;
  // the x coordinate of the item
  double x_coordinate = 2;
  // the y coordinate of the item
  double y_coordinate = 3;
  // the z coordinate of the item
  double z_coordinate = 4;
}

// inventory operation summary
message OperationSummary {
  // StoreId associated with the operation
  int64 store_id = 1;
  // Operation status
  InventoryOperationStatus inventory_operation_status = 2;
  // The operation start timestamp
  google.protobuf.Timestamp started_at = 3;
  // The operation end timestamp
  google.protobuf.Timestamp ended_at = 4;
  // Operation success count in item level, same as menu_item_count in store_level_stats
  int64 item_success_count = 10 [deprecated = true];
  // Operation failure summary in item level
  map<string, int64> item_failure_summary = 11;
  // Store Level Stats
  StoreLevelStats store_level_stats = 12;
}

// inventory operation status
enum InventoryOperationStatus {
  // Default 0
  INVENTORY_OPERATION_STATUS_UNSPECIFIED = 0;
  // operation in success status
  INVENTORY_OPERATION_STATUS_SUCCESS = 1;
  // operation in failed status
  INVENTORY_OPERATION_STATUS_FAILED = 2;
  // operation in pending status
  INVENTORY_OPERATION_STATUS_PENDING = 3;
  // operation not found
  INVENTORY_OPERATION_STATUS_NOT_FOUND = 4;
  // operation in partial success
  INVENTORY_OPERATION_STATUS_PARTIAL_SUCCESS = 5;
}

// store metadata
message StoreMetadata {
  // these are deleted fields, do not reuse
  reserved 20;
  // Doordash store id
  int64 store_id = 1;
  // Doordash business id
  int64 business_id = 2;
  // Limited sellable hours for all alcohol items in this store.
  repeated OpenHours alcohol_open_hours = 3;
  // Merchant name, optional
  google.protobuf.StringValue merchant_name = 4;
}

// aMsId mapping
message AMsIdMapping {
  // origin msId
  string merchant_supplied_item_id = 1;
  // aMsId
  string a_merchant_supplied_item_id = 2;
}

// category inflation info list
message CategoryInflationInfoList {
  // category inflation info list
  repeated CategoryInflationInfo category_inflation_info = 1;
}

// category inflation info
message CategoryInflationInfo {
  // category_name
  google.protobuf.StringValue category_name = 1;
  // category id
  google.protobuf.StringValue category_id = 2;
  // category path (eg. "Dairy & Eggs > Milk > Dairy Milks")
  string category_path = 3;
  // inflation rate
  double inflation_rate = 4;
}

// Store Level Stats
message StoreLevelStats {
  // Request ID
  google.protobuf.StringValue request_id = 1;
  // Business ID
  google.protobuf.Int64Value business_id = 2;
  // Store ID
  google.protobuf.Int64Value store_id = 3;
  // Merchant Name
  google.protobuf.StringValue merchant_name = 4;
  // Source
  google.protobuf.StringValue source = 5;
  // Invalid Records Count
  google.protobuf.Int64Value invalid_records_count = 6;
  // Unknown SKU Records Count
  google.protobuf.Int64Value unknown_sku_records_count = 7;
  // Hydration Fail Records Count
  google.protobuf.Int64Value hydration_fail_records_count = 8;
  // Hydration Success Records Count
  google.protobuf.Int64Value hydration_success_records_count = 9;
  // Total Raw Item Count
  google.protobuf.Int64Value total_raw_item_count = 10;
  // Weighted Item Count
  google.protobuf.Int64Value weighted_item_count = 11;
  // Skipped By Semantic Dedup Item Count
  google.protobuf.Int64Value skipped_by_semantic_dedup_item_count = 12;
  // Hydration Fail Weighted Item Count
  google.protobuf.Int64Value hydration_fail_weighted_item_count = 13;
  // Hydration Fail Regular Item Count
  google.protobuf.Int64Value hydration_fail_regular_item_count = 14;
  // Decoration Fail Inflation Price Item Count
  google.protobuf.Int64Value decoration_fail_inflation_price_item_count = 15;
  // Status
  InventoryOperationStatus status = 16;
  // Message
  google.protobuf.StringValue message = 17;
  // External Job ID
  google.protobuf.StringValue external_job_id = 18;
  // External Job Type
  ExternalJobType external_job_type = 19;
  // Job Type
  TrackableJobType job_type = 20;
  // Menu ID
  google.protobuf.StringValue menu_id = 21;
  // Menu Item Count
  google.protobuf.Int64Value menu_item_count = 22;
  // Menu Active Item Count
  google.protobuf.Int64Value menu_active_item_count = 23;
  // Inactive From Merchant Item Count
  google.protobuf.Int64Value inactive_from_merchant_item_count = 24;
  // Inactive From OOS Prediction Count
  google.protobuf.Int64Value inactive_from_oos_prediction_count = 25;
  // Fail To Generate Item General Count
  google.protobuf.Int64Value fail_to_generate_item_general_count = 26;
  // Menu Payload Path
  google.protobuf.StringValue menu_payload_path = 27;
  // Retry Count
  google.protobuf.Int64Value retry_count = 28;
  // Created By
  google.protobuf.StringValue created_by = 29;
  // Updated By
  google.protobuf.StringValue updated_by = 30;
  // Sent At
  google.protobuf.Timestamp sent_at = 31;
  // Callback Received At
  google.protobuf.Timestamp callback_received_at = 32;
  // Metrics Data
  MetricsData metrics_data = 33;
  // Created At
  google.protobuf.Timestamp created_at = 34;
}

// External Job Type
enum ExternalJobType {
  // Unspecified
  EXTERNAL_JOB_TYPE_UNSPECIFIED = 0;
  // Create
  EXTERNAL_JOB_TYPE_CREATE = 1;
  // Update
  EXTERNAL_JOB_TYPE_UPDATE = 2;
}

// Trackable Job Type
enum TrackableJobType {
  // Default 0
  TRACKABLE_JOB_TYPE_UNSPECIFIED = 0;
  // Partial Inventory Write Job
  TRACKABLE_JOB_TYPE_PARTIAL_INVENTORY_WRITE_JOB = 1;
  // Full Inventory Write Job
  TRACKABLE_JOB_TYPE_FULL_INVENTORY_WRITE_JOB = 2;
  // Inventory Override Write Job
  TRACKABLE_JOB_TYPE_INVENTORY_OVERRIDE_WRITE_JOB = 3;
}

// Metrics Data
message MetricsData {
  // Item Count Category Distribution
  ItemCountCategoryDistribution item_count_category_distribution = 1;
  // Price Info Category Distribution
  PriceInfoCategoryDistribution price_info_category_distribution = 2;
  // Item Count
  ItemCount item_count = 3;
  // Price Info
  PriceInfo price_info = 4;
}

// Item Count Category Distribution
message ItemCountCategoryDistribution {
  // Active Item Count
  google.protobuf.Int64Value active_count = 1;
  // Inactive Item Count
  google.protobuf.Int64Value inactive_count = 2;
  // Category Name
  google.protobuf.StringValue category_name = 3;
  // Category Level
  google.protobuf.StringValue category_level = 4;
}

// Price Info Category Distribution
message PriceInfoCategoryDistribution {
  // Median Price
  google.protobuf.DoubleValue median_price = 1;
  // Min Price
  google.protobuf.DoubleValue min_price = 2;
  // Max Price
  google.protobuf.DoubleValue max_price = 3;
  // Category Name
  google.protobuf.StringValue category_name = 4;
  // Category Level
  google.protobuf.StringValue category_level = 5;
}

// Item Count
message ItemCount {
  // Active Item Count
  google.protobuf.Int64Value active_count = 1;
  // Inactive Item Count
  google.protobuf.Int64Value inactive_count = 2;
}

// Price Info
message PriceInfo {
  // Median Price
  google.protobuf.DoubleValue median_price = 1;
  // Min Price
  google.protobuf.DoubleValue min_price = 2;
  // Max Price
  google.protobuf.DoubleValue max_price = 3;
}

// Experiment details
message ExperimentAttribute {
  option deprecated = true;

  // Pricing experiment attribute
  PricingExperimentAttribute pricing_experiment_attribute = 1;
}

// Pricing experiment details
message PricingExperimentAttribute {
  option deprecated = true;

  // Experiment name
  string experiment_name = 1;
  // Price treatment in the experiment
  repeated PriceTreatmentAttribute price_treatment_attribute = 2;
}

// Treatment price mapping message
message PriceTreatmentAttribute {
  option deprecated = true;

  // treatment name
  string treatment_name = 1;
  // experimental price value for the item
  money.MonetaryFields price = 2;
}

// Inventory AB experiment
message InventoryABExperiment {
  // Experiment type
  ExperimentType experiment_type = 1;
  // Experiment name
  string experiment_name = 2;
  // ItemABExperimentConfiguration
  repeated ItemABExperimentConfiguration experiment_configuration = 3;
}

// Item AB experiment configuration
message ItemABExperimentConfiguration {
  // treatment name
  string treatment_name = 1;
  // Inventory attributes
  Inventory inventory = 2;
}

// Experiment type
enum ExperimentType {
  // Unspecified type
  EXPERIMENT_TYPE_UNSPECIFIED = 0;
  // DashMart pricing type
  EXPERIMENT_TYPE_DASHMART_PRICING = 1;
}
