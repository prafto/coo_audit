syntax = "proto3";

package doordash.retail.inventory.v1;

import "doordash.retail.inventory.v1/common.proto";
import "doordash.retail.inventory.v1/pagination.proto";
import "google/protobuf/wrappers.proto";
import "common/code.proto";

option java_multiple_files = true;
option java_generic_services = true;
option java_package = "com.doordash.rpc.retail.inventoryservice";


// Service to look up the retail feed
// This service is to support the feed query use cases, 
// including operation tooling, consumer, and fulfillment use cases.
service FeedLookUpService {
  // Get raw inventory feed of store
  rpc GetRawFeedOfStore(GetRawFeedOfStoreRequest) returns (GetRawFeedOfStoreResponse);
  // Get hydrated feed of store
  rpc GetHydratedFeedOfStore(GetHydratedFeedOfStoreRequest) returns (GetHydratedFeedOfStoreResponse);
  // Get individual raw feed
  rpc GetRawFeed(GetRawFeedRequest) returns (GetRawFeedResponse);
  // Get feed availability only, raw/hydrated feed included feed availability
  rpc GetItemAvailability(GetItemAvailabilityRequest) returns (GetItemAvailabilityResponse);
  // Get hydrated feed
  rpc GetHydratedFeed(GetHydratedFeedRequest) returns (GetHydratedFeedResponse);
  // Batch get raw feed
  rpc BatchGetRawFeed(BatchGetRawFeedRequest) returns (BatchGetRawFeedResponse);
  // Batch get hydrated feed
  rpc BatchGetHydratedFeed(BatchGetHydratedFeedRequest) returns (BatchGetHydratedFeedResponse);
  // Get inventory
  rpc GetInventory(GetInventoryRequest) returns (GetInventoryResponse);
  // Get inventory operation summary
  rpc GetOperationSummary(GetOperationSummaryRequest) returns (GetOperationSummaryResponse);
  // Get inventory item metadata
  rpc GetItemMetaData(GetItemMetaDataRequest) returns (GetItemMetaDataResponse);
  // Get inventory item aMsId
  rpc GetItemAMsId(GetItemAMsIdRequest) returns (GetItemAMsIdResponse);

}

// GetInventoryRequest:get inventory for single, multiple and full store items with pagination support
message GetInventoryRequest {
  // Required Store information such as businessId and storeId for inventory request, required.
  StoreInfo store_info = 1;
  //Optional: if provided, fetching corresponding item/items from the store
  //          if not provided, fetching the whole store items
  repeated string merchant_supplied_item_id = 2;
  //Optional: view_mode flag to turn on special handling for users
  ViewMode view_mode = 11;
  //Optional: pagination option support cursor and offset pagination
  PaginationOption pagination_option = 12;
}

// GetInventoryResponse: response single,multiple or full store items
message GetInventoryResponse {
  // List of inventory
  repeated Inventory inventory = 1;
  //pagination info returned: only exist when pagination option is specified in request
  PaginationResponse pagination_response = 10;
  // gRPC response code
  code.Code code = 20;
  // Error message if there is any
  google.protobuf.StringValue error_message = 21;
}

// GetRawFeedOfStoreRequest
message GetRawFeedOfStoreRequest {
  // Store id
  int64 store_id = 1;
  // Specify the pagination params (page size determined by first/last)
  PaginationArgs page_arg = 10; 
}

// GetRawFeedOfStoreResponse
message GetRawFeedOfStoreResponse {
  // List of raw inventory feed
  repeated RawInventoryFeedResponse raw_feed = 1;
  // Pagination info
  PageInfo page_info = 10;
}

// GetHydratedFeedOfStoreRequest
message GetHydratedFeedOfStoreRequest {
  // Store id
  int64 store_id = 1;
  // Specify the pagination params (page size determined by first/last)
  PaginationArgs page_arg = 10; 
}

// GetHydratedFeedOfStoreResponse
message GetHydratedFeedOfStoreResponse {
  // List of hyrated inventory feed
  repeated HydratedInventoryFeedResponse hydrated_feed = 3;
  // Pagination info
  PageInfo page_info = 10;
}

// GetRawFeedRequest
message GetRawFeedRequest {
  // Store id
  int64 store_id = 1;
  // MSID SKU
  string merchant_supplied_item_id = 2;
}

// GetRawFeedResponse
message GetRawFeedResponse {
  // Raw Feed
  RawInventoryFeedResponse raw_feed = 3;
}

// GetItemAvailabilityRequest
message GetItemAvailabilityRequest {
  // Store id
  int64 store_id = 1;
  // MSID SKU
  string merchant_supplied_item_id = 2;
}

// GetItemAvailabilityResponse
message GetItemAvailabilityResponse {
  // Item Availability
  ItemAvailabilityResponse item_availability = 3;
}

// GetHydratedFeedRequest
message GetHydratedFeedRequest {
  // Store id
  int64 store_id = 1;
  // MSID SKU
  string merchant_supplied_item_id = 2;
}

// GetHydratedFeedResponse
message GetHydratedFeedResponse {
  // Hydrated Feed
  HydratedInventoryFeedResponse hydrated_feed = 1;
}

// BatchGetRawFeedRequest
message BatchGetRawFeedRequest {
  // Store id
  int64 store_id = 1;
  // MSID SKU
  repeated string merchant_supplied_item_id = 2;
  // Pagnation
  PaginationArgs page_arg = 10; 
}

// BatchGetRawFeedResponse
message BatchGetRawFeedResponse {
  // Raw feed
  repeated RawInventoryFeedResponse raw_feed = 1;
  // Pagnation
  PageInfo page_info = 10;
}

// BatchGetHydratedFeedRequest
message BatchGetHydratedFeedRequest {
  // Store id
  int64 store_id = 1;
  // MSID SKU
  repeated string merchant_supplied_item_id = 2;
  // Pagnation
  PaginationArgs page_arg = 10; 
}

// BatchGetHydratedFeedResponse
message BatchGetHydratedFeedResponse {
  // Hydrated feed
  repeated HydratedInventoryFeedResponse hydrated_feed = 1;
  // Pagnation
  PageInfo page_info = 10;
}

// GetOperationSummaryRequest: get inventory operation status summary
message GetOperationSummaryRequest {
  // <Required> Store information such as businessId and storeId associated with the operation
  StoreInfo store_info = 1;
  // <Required> UUID that is associated with the operation
  google.protobuf.StringValue request_id = 2;
  // <Required> Determine if the request is to fetch item level summary along with the operation summary
  // if enable_item_level_summary is true, it will return item count by failure reasons
  google.protobuf.BoolValue enable_item_level_summary = 3;
}

// GetOperationSummaryResponse: response with inventory operation summary and menuId if succeeded
message GetOperationSummaryResponse {
  // Operation summary with status
  OperationSummary operation_summary = 1;
  // MenuId associated with the operation
  google.protobuf.StringValue menu_id = 2;
}

// GetItemMetaDataRequest: get inventory item metadata
message GetItemMetaDataRequest {
  // Required Store information such as storeId for inventory request, required.
  StoreInfo store_info = 1;
  //Optional:
  //If provided, fetching corresponding item/items from the store
  //If not provided, fetching the whole store items
  repeated string merchant_supplied_item_id = 2;
  //Optional: pagination option support cursor and offset pagination
  PaginationOption pagination_option = 3;
}

// GetItemMetaDataResponse: response with inventory item metadata
message GetItemMetaDataResponse {
  // Item metadata with msId
  repeated InventoryItemMetaData inventory_item_metadata = 1;
  // Pagination
  PaginationResponse pagination_response = 2;
  // gRPC response code
  code.Code code = 3;
  // Error message if there is any
  google.protobuf.StringValue error_message = 4;
}

// Inventory item metadata with msId
message InventoryItemMetaData {
  // Store id
  int64 store_id = 1;
  // msid
  string merchant_supplied_item_id = 2;
  // location infoG
  LocationInfo location_info = 3;
}

// Get Item aMsId request
message GetItemAMsIdRequest {
  // Store id
  int64 store_id = 1;
  // MSID SKU
  repeated string merchant_supplied_item_id = 2;
}

// Get Item aMsId response
message GetItemAMsIdResponse {
  // Store id
  int64 store_id = 1;
  // aMsId mapping
  repeated AMsIdMapping a_msid_mapping = 2;
  // gRPC response code
  code.Code code = 3;
  // Error message if there is any
  google.protobuf.StringValue error_message = 4;
}

