syntax = "proto3";

package prefab.v1;

import "google/protobuf/empty.proto";

import "prefab/form_components.proto";
import "prefab/dependency.proto";


/** Enums - Start */

// Possibile values for Screen Type
enum PFScreenType {
    // unspecified
    PF_SCREEN_TYPE_UNSPECIFIED = 0;
    // modal screen
    PF_SCREEN_TYPE_MODAL = 1;
}

// Possibile values for Screen Component Type
enum PFScreenComponentType {
    // unspecified
    PF_SCREEN_COMPONENT_TYPE_UNSPECIFIED = 0;
    // modal screen component
    PF_SCREEN_COMPONENT_TYPE_MODAL = 1;
}    
// Form Types
enum PFFormType {
    // unspecified
    PF_FORM_TYPE_UNSPECIFIED = 0;
    // single page form
    PF_FORM_TYPE_SINGLE_PAGE = 1;
    // multi page form
    PF_FORM_TYPE_MULTI_PAGE = 2;
    // hub & spoke form
    PF_FORM_TYPE_HUB_AND_SPOKE = 3;
}

// PFNavBarComponentType
enum PFNavBarComponentType {
    // unspecified
    PF_NAV_BAR_COMPONENT_TYPE_UNSPECIFIED = 0;
    // nav bar in modal for forms
    PF_NAV_BAR_COMPONENT_TYPE_NAV_BAR = 1;
}


// PFNavProgressBar
enum PFNavProgressBar {
    // unspecified
    PF_NAV_PROGRESS_BAR_UNSPECIFIED = 0;
        // continuous bar
    PF_NAV_PROGRESS_BAR_CONTINUOUS = 1;
    // segment progress bar
    PF_NAV_PROGRESS_BAR_SEGMENTED = 2;
}

// PFCTAActionType
enum PFCtaActionType {
    // unspecified
    PF_CTA_ACTION_TYPE_UNSPECIFIED = 0;
    // submit
    PF_CTA_ACTION_TYPE_SUBMIT = 1;
    // next
    PF_CTA_ACTION_TYPE_NEXT = 2;
}
 
// Component Position Type
enum PFComponentPositionType {
    // unspecified
    PF_COMPONENT_POSITION_TYPE_UNSPECIFIED = 0;
    // Main - render in main body
    PF_COMPONENT_POSITION_TYPE_MAIN = 1;
    // Aside - to specify position on the right side
    PF_COMPONENT_POSITION_TYPE_ASIDE = 2;
}

/** Enums - End */

/** Message Definitions - Start */

// Top Level Response that will be read by prefab client lib
message PFSchemaResponse {
    // identifier for current page
    string id = 1;
    // identifier for preview page, can be null
    string prev_page_id = 2;
    // total no. of pages in multi page form, default to 0
    int32 total_pages = 3;
    // form config data
    PFFormConfig data = 4;
}


// Pre fab Single Page POC Response
message PFFormConfig {
    // form type
    PFFormType form_type = 1;
    // screen component type
    PFScreenComponentType component_type = 2;
    // screen configuration
    PFScreen screen = 3;
    // id
    string id = 4;
}

// Screen configuration for 
message PFScreen {
    // nav bar config
    PFScreenNav nav = 1;
    // main content config
    PFPage main = 2;
    // footer config
    // empty proto for now, To be implemented later
    google.protobuf.Empty footer = 3;
}

// PFScreenNav
message PFScreenNav {
    // component type for Nav
    PFNavBarComponentType component_type = 1;
    // title
    string title = 2;
    // help button config
    PFCTANavBarHelp help_btn = 3;
    // progress config
    PFNavProgressBar progress_bar_type = 4;
}

// PFCTANavBarHelp
message PFCTANavBarHelp {
    // href link
    // TODO on client side the link has may need interpolations to support locale based links
    // or server will send the correct link based on locale
    string href = 1;
}

// PFPages
message PFPage {
    // list of page ids to be rendered
    // string id = 1;
    // optional page title
    string title = 1;
    // optional page description
    PFTextLite description = 2;
    // ordered list of component to be rendered in the page
    repeated PFFormComponent form_component = 3;
    // primary action configuration
    PFCTAPagePrimaryAction primary_action = 4;
}

// PFCTAOnClickActionConfig
message PFCTAOnClickActionConfig {
    // action type for the CTA, eg. submit
    PFCtaActionType type = 1;
}

// PFCTAPagePrimaryAction
message PFCTAPagePrimaryAction {
    // text for the cta, eg. submit, next
    string text = 1;
    // on click type action type
    PFCTAOnClickActionConfig on_click_action = 2;
    // pactsafe config
    PFPactSafeCheckbox pactsafe = 3;
}

// PFComponentPosition
message PFComponentPosition {
    // mobile
    PFComponentPositionType mobile = 1;
    // tablet
    PFComponentPositionType tablet = 2;
    // desktop
    PFComponentPositionType desktop = 3;
    // wide_screen
    PFComponentPositionType wide_screen = 4;
    // ultra_wide_screen
    PFComponentPositionType ultra_wide_screen = 5;
}

// PFFormComponent
message PFFormComponent {
    // id for the field. This property will be available in formData
    string id = 1;
    // dependency
    Dependency dependency = 2;
    // componentType
    PFComponentType component_type = 3;
    // component configuration
    PFComponentProps component_props = 4;
    // component position
    PFComponentPosition component_position = 5;
}

/** Message Definitions - END */