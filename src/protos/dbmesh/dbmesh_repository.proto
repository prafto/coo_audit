syntax = "proto3";

package dbmesh.v1;

import "dbmesh/dbmesh_tenant_info.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/doordash/services-protobuf/generated/dbmesh";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.dbmesh";

// `RegistryVersion` contains the versioning information of the query
// registry that the request is pointing to.
message RegistryVersion {
  // Registry version. typically a SEMVER.
  string version = 1;
  // OPTIONAL registry location. identifies local registry location in S3.
  string location = 2;
}

// `QueryRepository` contains all data needed for a dbmesh server to create and use queries.
message QueryRepository {
  // The version of the published QueryRepository.
  string version = 1;
  // The timestamp the repo was created.
  google.protobuf.Timestamp creation_time = 2;
  // A list of all deployment repositories in this version.
  repeated DeploymentRepository deployment_repositories = 3;
  // Optional registry version requested.
  RegistryVersion registry_version = 4;
}

// `DeploymentRepository` contains all data for a specific dbmesh deployment.
message DeploymentRepository {
  // Metadata for the DeploymentRepository.
  DeploymentRepositoryMetadata metadata = 1;
  // A list of all client repositories in this deployment.
  repeated ClientRepository client_repositories = 2;
}

// `DeploymentRepositoryMetadata` contains the metadata for a DeploymentRepository.
message DeploymentRepositoryMetadata {
  // The name of this deployment.
  string name = 1;

  // All of the tenancy information for a given deployment.
  DeploymentTenantInfo deployment_tenant_info = 2;
}

// `ClientRepository` contains all data for a specific dbmesh client in a given deployment.
message ClientRepository {
  // Metadata for the ClientRepository.
  ClientRepositoryMetadata metadata = 1;
  // A list of all queries in this ClientRepository.
  repeated RepositoryQuery queries = 2;
}

// `ClientRepositoryMetadata` contains the metadata for a ClientRepository.
message ClientRepositoryMetadata {
  // The name of this client.
  string name = 1;
}

// `RepositoryQuery` contains all data needed by a dbmesh server to create and use a given query.
message RepositoryQuery {
  // The metadata for this query.
  RepositoryQueryMetadata metadata = 1;
  // The SQL string for this query.
  string sql = 2;
}

// Type of query
enum QueryType {
  // Unspecified query type
  QUERY_TYPE_UNSPECIFIED = 0;
  // SQL query
  QUERY_TYPE_SQL = 1;
  // CQL query
  QUERY_TYPE_CQL = 2;
}

// `RepositoryQueryMetadata` contains the metadata for a RepositoryQuery.
message RepositoryQueryMetadata {
  // The name of this query.
  string name = 1;

  // is_read determines if query is a pure read statement or not. Currently determined by parsing the SQL statement.
  bool is_read = 2;

  // The tenant, if any
  string tenant = 3;

  // Type of query
  QueryType query_type = 4;

  // skip_validation determines if query should be validated or not. Currently determined by parsing the SQL statement.
  bool skip_validation = 5;
}
