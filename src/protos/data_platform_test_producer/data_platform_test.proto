syntax = "proto3";

package com.doordash.iguazu.test;

import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

// Schema for data_platform_test topic
message DataPlatformTestEvent {
  // test string type
  string test_str = 1;

  // test int type
  int32 test_int = 2;

  // test long type
  int64 test_long = 3;

  // test float type
  float test_float = 4;

  // test double type
  double test_double = 5;

  // test bool type
  bool test_bool = 6;

  // test StringValue type
  google.protobuf.StringValue test_string_value = 7;

  // test Timestamp type
  google.protobuf.Timestamp timestamp = 8;

  // test map type
  map<string, string> test_map = 9;

  // define a test enum type
  enum TestEnumType {
    TYPE_0 = 0;
    TYPE_1 = 1;
    TYPE_2 = 2;
    TYPE_3 = 3;
  }
  // test enum type
  TestEnumType test_enum = 10;

  // test bool type with false value
  bool test_bool_false = 11;

  // test bool type with default value
  bool test_bool_default = 12;

  // test BoolValue type
  google.protobuf.BoolValue test_bool_value = 13;

  // test BoolValue type with false value
  google.protobuf.BoolValue test_bool_value_false = 14;

  // test BoolValue type with default value
  google.protobuf.BoolValue test_bool_value_default = 15;

  // test long value type
  google.protobuf.Int64Value test_long_value = 16;

  // test array
  repeated string test_array = 17;

  // test array of objects
  repeated DataPlatformSimpleEvent test_array_of_objects = 18;
}

// Schema for data_platform_test topic
message DataPlatformSimpleEvent {
  // test string type
  string test_str = 1;

  // test int type
  int32 test_int = 2;

  // test long type
  int64 test_long = 3;

  // test float type
  float test_float = 4;

  // test double type
  double test_double = 5;

  // test bool type
  bool test_bool = 6;

  // Add another field to test
  string test_str_2 = 7;
}

// message with only DataPlatformTestEvent
message DataPlatformTestData {
  // the test event
  DataPlatformTestEvent event = 1;
}

// another message with only DataPlatformTestEvent
message AnotherDataPlatformTestData {
  // the test event
  DataPlatformTestEvent event = 1;
}

// message with DataPlatformTestEvent and a string field
message DataPlatformTestDataWithString {
  // the test event
  DataPlatformTestEvent event = 1;
  // the extra string field
  string test_str = 2;
}

// message with DataPlatformTestEvent and a int field
message DataPlatformTestDataWithInt {
  // the test event
  DataPlatformTestEvent event = 1;
  // the extra int field
  int32 test_int = 2;
}

// test oneof message
message DataPlatformTestOneOf {
  // oneof field with different data type
  oneof event {
    // DataPlatformTestData field
    DataPlatformTestData test_data = 1;
    // Another DataPlatformTestData field
    AnotherDataPlatformTestData test_duplicate = 2;
    // DataPlatformTestData with extra string field
    DataPlatformTestDataWithString test_data_with_str = 3;
    // DataPlatformTestData with extra int field
    DataPlatformTestDataWithInt test_data_with_int = 4;
  }
}
