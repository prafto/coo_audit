syntax = "proto3";

package pkg.processing.v1;

import "google/protobuf/wrappers.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.pkg.processing";

// CatalogEntityName defines the types of catalog entities that can be processed in the PKG system.
// buf:lint:ignore ENUM_VALUE_PREFIX
enum CatalogEntity {
  // Catalog Entity Unspecified
  CATALOG_ENTITY_UNSPECIFIED = 0;
  // Represents a brand data in the PKG.
  // https://github.com/doordash/asgard/blob/master/libraries/graph-model/src/main/kotlin/com/doordash/graphmodel/catalog/BrandData.kt
  BRAND_DATA = 1;

  // Represents a manufacturer data in the PKG.
  // https://github.com/doordash/asgard/blob/master/libraries/graph-model/src/main/kotlin/com/doordash/graphmodel/catalog/ManufacturerData.kt
  MANUFACTURER_DATA = 2;

  // Represents backend taxonomy data in the PKG system.
  // https://github.com/doordash/asgard/blob/master/libraries/graph-model/src/main/kotlin/com/doordash/graphmodel/catalog/BackendTaxonomyData.kt
  BACKEND_TAXONOMY_DATA = 3;

  // Represents frontend taxonomy data in the PKG system.
  // https://github.com/doordash/asgard/blob/master/libraries/graph-model/src/main/kotlin/com/doordash/graphmodel/catalog/FrontendTaxonomyData.kt
  FRONTEND_TAXONOMY_DATA = 4;

  // Represents photo request data in the PKG system.
  // https://github.com/doordash/asgard/blob/master/libraries/graph-model/src/main/kotlin/com/doordash/graphmodel/catalog/PhotoRequestData.kt
  PHOTO_REQUEST_DATA = 5;

  // Represents photo URL mapping data in the PKG system.
  // https://github.com/doordash/asgard/blob/master/libraries/graph-model/src/main/kotlin/com/doordash/graphmodel/catalog/PhotoUrlMappingData.kt
  PHOTO_URL_MAPPING_DATA = 6;

  // Represents prime content data in the PKG system.
  // https://github.com/doordash/asgard/blob/master/libraries/graph-model/src/main/kotlin/com/doordash/graphmodel/catalog/PrimeContentData.kt
  PRIME_CONTENT_DATA = 7;

  // Represents prime identity data in the PKG system.
  // https://github.com/doordash/asgard/blob/master/libraries/graph-model/src/main/kotlin/com/doordash/graphmodel/catalog/PrimeIdentityData.kt
  PRIME_IDENTITY_DATA = 8;

  // Represents third-party data in the PKG system.
  // https://github.com/doordash/asgard/blob/master/libraries/graph-model/src/main/kotlin/com/doordash/graphmodel/catalog/ThirdPartyData.kt
  THIRD_PARTY_DATA = 9;

  // Represents UGP (User Generated Product) content data in the PKG system.
  // https://github.com/doordash/asgard/blob/master/libraries/graph-model/src/main/kotlin/com/doordash/graphmodel/catalog/UgpContentData.kt
  UGP_CONTENT_DATA = 10;

  // Represents UMP (User Managed Product) identity data in the PKG system.
  // https://github.com/doordash/asgard/blob/master/libraries/graph-model/src/main/kotlin/com/doordash/graphmodel/catalog/UmpIdentityData.kt
  UMP_IDENTITY_DATA = 11;

  // Represents UMP (User Managed Product) content data in the PKG system.
  // https://github.com/doordash/asgard/blob/master/libraries/graph-model/src/main/kotlin/com/doordash/graphmodel/catalog/UmpContentData.kt
  UMP_CONTENT_DATA = 12;
}

// This message is used when catalog data needs to be inserted or updated in the PKG system.
message CatalogIngestionEvent {
  // The name or identifier of the catalog entity being processed.
  // This field helps identify which type of catalog data is being ingested
  // (e.g., "UMPData", "BrandData", etc.).
  google.protobuf.StringValue entity_name = 1;

  // The actual data payload for the catalog entity in a serialized format.
  // This field contains the complete data that needs to be ingested into the PKG system.
  // This will also include the edges that then PKG Node will be connected to.
  // Example JSON structure for UmpEntity:
  // {
  //   "umpNode": {
  //     // Node properties
  //   },
  //   "umpEdges": {
  //     "umpHasContentEdge": {},
  //     "umpBelongsToBackendTaxonomyEdge": {},
  //     "umpBelongsToBrandEdge": {},
  //     "umpBelongsToFrontendTaxonomyEdge": {}
  //   }
  // }
  google.protobuf.StringValue entity_data = 2;
}

// This message is used when catalog data needs to be inserted or updated in the PKG system.
message CatalogMigrationEvent {
  // The name or identifier of the catalog entity being processed.
  // This field helps identify which type of catalog data is being ingested
  // (e.g., "UMPNode", "BrandNode", etc.).
  CatalogEntity entity_name = 1;

  // The actual data payload for the catalog entity in a serialized format.
  // This field contains the complete data that needs to be ingested into the PKG system.
  // This will also include the edges that then PKG Node will be connected to.
  // Example JSON structure for UmpEntity:
  // {
  //   "umpNode": {
  //     // Node properties
  //   },
  //   "umpEdges": {
  //     "umpHasContentEdge": {},
  //     "umpBelongsToBackendTaxonomyEdge": {},
  //     "umpBelongsToBrandEdge": {},
  //     "umpBelongsToFrontendTaxonomyEdge": {}
  //   }
  // }
  bytes entity_data = 2;
}
