syntax = "proto3";

package mx_support_service.api.v1;

import "common/common.proto";
import "common/service_client_config.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.mx_support_service";

// Entity type (store or business level granularity) to get Cx Signals for
enum EntityType {
  // Default value, unknown or unrecognized entity
  ENTITY_TYPE_UNSPECIFIED = 0;
  // Store level granularity
  ENTITY_TYPE_STORE = 1;
  // Business level granularity
  ENTITY_TYPE_BUSINESS = 2;
}

// Entity object (id and type) for getting Cx signals
message Entity {
  // Id of the entity (store or business) to get Cx Signals for
  google.protobuf.StringValue entity_id = 1;
  // Entity type (store or business level granularity) to get Cx Signals for
  EntityType entity_type = 2;
}

// Consumer object
message Consumer {
  // Id of the consumer to get Cx Signals for
  google.protobuf.StringValue consumer_id = 1;
}

// Order error categories for Mx error charge
enum OrderErrorCategories {
  // Default value, unknown or unrecognized order error category
  ORDER_ERROR_CATEGORIES_UNSPECIFIED = 0;
  // Missing main item
  ORDER_ERROR_CATEGORIES_MISSING_MAIN_ITEM = 1;
  // Missing side item
  ORDER_ERROR_CATEGORIES_MISSING_SIDE_ITEM = 2;
  // Special instruction ignored
  ORDER_ERROR_CATEGORIES_SPECIAL_INSTRUCTION_IGNORED = 3;
  // Incorrect ingredient
  ORDER_ERROR_CATEGORIES_INCORRECT_INGREDIENT = 4;
  // Food quality arrived cold
  ORDER_ERROR_CATEGORIES_FOOD_QUALITY_ARRIVED_COLD = 5;
  // Missing condiments or sauce
  ORDER_ERROR_CATEGORIES_MISSING_CONDIMENTS_OR_SAUCE = 6;
  // Incorrect item received
  ORDER_ERROR_CATEGORIES_INCORRECT_ITEM_RECEIVED = 7;
  // Food prepared unsafely
  ORDER_ERROR_CATEGORIES_FOOD_PREPARED_UNSAFELY = 8;
  // Food handled poorly by dasher
  ORDER_ERROR_CATEGORIES_FOOD_HANDLED_POORLY_BY_DASHER = 9;
  // Item wrong size
  ORDER_ERROR_CATEGORIES_ITEM_WRONG_SIZE = 10;
  // Food quality not tasty
  ORDER_ERROR_CATEGORIES_FOOD_QUALITY_NOT_TASTY = 11;
  // Food contained dietary restrictions
  ORDER_ERROR_CATEGORIES_FOOD_CONTAINED_DIETARY_RESTRICTIONS = 12;
  // Incorrect quantity
  ORDER_ERROR_CATEGORIES_INCORRECT_QUANTITY = 13;
  // Incorrect size
  ORDER_ERROR_CATEGORIES_INCORRECT_SIZE = 14;
  // Ingredient error
  ORDER_ERROR_CATEGORIES_INGREDIENT_ERROR = 15;
  // Missing item
  ORDER_ERROR_CATEGORIES_MISSING_ITEM = 16;
  // Null
  ORDER_ERROR_CATEGORIES_NULL = 17;
  // Poorly packaged or handled
  ORDER_ERROR_CATEGORIES_POORLY_PACKAGED_OR_HANDLED = 18;
  // Special instruction ignored food style preferences
  ORDER_ERROR_CATEGORIES_SPECIAL_INSTR_IGNORED_FOOD_STYLE_PREFERENCES = 189;
  // Special request ignored
  ORDER_ERROR_CATEGORIES_SPECIAL_REQUEST_IGNORED = 20;
  // Temperature issue
  ORDER_ERROR_CATEGORIES_TEMPERATURE_ISSUE = 21;
  // Wasn't tasty
  ORDER_ERROR_CATEGORIES_WASNT_TASTY = 22;
  // Wrong order delivered
  ORDER_ERROR_CATEGORIES_WRONG_ORDER_DELIVERED = 23;
  // Food cooked incorrectly
  ORDER_ERROR_CATEGORIES_FOOD_COOKED_INCORRECTLY = 24;
  // Incorrect ingredients
  ORDER_ERROR_CATEGORIES_INCORRECT_INGREDIENTS = 25;
  // Dashmart only item not found
  ORDER_ERROR_CATEGORIES_DASHMART_ONLY_ITEM_NOT_FOUND = 26;
  // Incorrect size quantity weight
  ORDER_ERROR_CATEGORIES_INCORRECT_SIZE_QUANTITY_WEIGHT = 27;
  // Never delivered
  ORDER_ERROR_CATEGORIES_NEVER_DELIVERED = 28;
}

// Categories of order errors that can be displayed in the operations quality UI for order accuracy metric categories breakdown
enum ErrorCategoryFriendly {
  // Unspecified error category friendly for linting purposes
  ERROR_CATEGORY_FRIENDLY_UNSPECIFIED = 0;
  // Wrong Order error. Will be used as a default category for any unrecognized error category
  ERROR_CATEGORY_FRIENDLY_WRONG_ORDER = 1;
  // Missing Item error
  ERROR_CATEGORY_FRIENDLY_MISSING_ITEM = 2;
  // Ingredient Error
  ERROR_CATEGORY_FRIENDLY_INGREDIENT_ERROR = 3;
  // Incorrect Size
  ERROR_CATEGORY_FRIENDLY_INCORRECT_SIZE = 4;
  // Incorrect Quantity
  ERROR_CATEGORY_FRIENDLY_INCORRECT_QUANTITY = 5;
  // Missing Side Item
  ERROR_CATEGORY_FRIENDLY_MISSING_SIDE_ITEM = 6;
  // Missing Sauce/Condiments
  ERROR_CATEGORY_FRIENDLY_MISSING_SAUCE_CONDIMENTS = 7;
  // Special Request Ignored
  ERROR_CATEGORY_FRIENDLY_FRIENDLY_MISSING_SPECIAL_REQUEST_IGNORED = 8;
}

// C&R Policy category of an error charge; we use this to represent that category that can result in MxA error charge
enum Category {
  // Unspecified error charge category
  CATEGORY_UNSPECIFIED = 0;
  // Missing (ex. missing_main_item or missing_side_item)
  CATEGORY_MISSING = 1;
  // Incorrect (ex. item_wrong_size, incorrect_ingredients, incorrect_item_received, etc.)
  CATEGORY_INCORRECT = 2;
  // Food Quality (ex. food_prepared_unsafely)
  CATEGORY_FOOD_QUALITY = 3;
  // Multiple (this error charge has multiple categories against it; ex. missing & food quality problems)
  CATEGORY_MULTIPLE = 4;
  // Wrong Order Delivered
  CATEGORY_WRONG_ORDER_DELIVERED = 5;
  // Never Delivered
  CATEGORY_NEVER_DELIVERED = 6;
}

// Contains information about the consumer explanation (reason for this error charge)
message ConsumerExplanation {
  // Time this explanation was created
  google.protobuf.Timestamp created_at = 1;
  // Consumer-provided explanation for the error charge
  google.protobuf.StringValue explanation = 2;
}

// Error Charge Refund Status of an order item that is being disputed
enum ErrorChargeRefundStatus {
  // Default refund status: used to signify that this order is not being disputed
  ERROR_CHARGE_REFUND_STATUS_UNSPECIFIED = 0;
  // 'Pending' status means the error charge was disputed, but not yet "paid-out" to the merchant
  ERROR_CHARGE_REFUND_STATUS_PENDING = 1;
  // 'Refunded' status means the error charge was disputed and was paid-out to the merchant (i.e. transaction completed)
  ERROR_CHARGE_REFUND_STATUS_REFUNDED = 2;
  // 'Partially Refunded' status means the error charge was refunded and additional error charges came in that are undisputed
  ERROR_CHARGE_REFUND_STATUS_PARTIALLY_REFUNDED = 3;
  // 'Partial Refund Pending' status means the error charge was disputed, but not yet "paid-out" to the merchant, and additional error charges come in that are undisputed
  ERROR_CHARGE_REFUND_STATUS_PARTIAL_REFUND_PENDING = 4;
}
