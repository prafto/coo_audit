syntax = "proto3";

package doordash.payin.dash_card_service.v1;

import "common/common.proto";
import "common/money.proto";
import "common/service_client_config.proto";
import "data_classification.v1/data_classification.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "payin/common_v1.proto";
import "payin/dash_card_v1.proto";

option go_package = "github.com/doordash/services-protobuf/generated/payin/dash_card_service/v1";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.payin.dash_card_service.v1";

// DashCardV1Service responsible for DoorDash-Chase Branded Credit Card
service DashCardV1Service {
  // Service info
  option (service_client.client_config).service_name = "payin-platform";
  option (service_client.client_config).service_app = "payer";
  // Retry config
  option (service_client.client_config).response_attempt_timeout_millis = 30000;
  option (service_client.client_config).retry_config.max_attempts = 3;
  option (service_client.client_config).retry_config.initial_wait_millis = 20;
  // Circuit Breaker config
  option (service_client.client_config).circuit_breaker_config.failure_rate_threshold = 0.5;
  option (service_client.client_config).circuit_breaker_config.minimum_request_threshold = 30;
  option (service_client.client_config).circuit_breaker_config.counter_sliding_window_millis = 15000;
  option (service_client.client_config).circuit_breaker_config.circuit_open_window_millis = 5000;
  option (service_client.client_config).circuit_breaker_config.trial_request_interval_millis = 2000;

  // Get Dash Card Application Status
  rpc GetDashCardApplicationStatus(GetDashCardApplicationStatusRequest) returns (GetDashCardApplicationStatusResponse);

  // Update Dash Card Application Status
  rpc UpdateDashCardApplicationStatus(UpdateDashCardApplicationStatusRequest) returns (UpdateDashCardApplicationStatusResponse);

  // Get PreQualified Offers
  rpc GetPreQualifiedOffers(GetPreQualifiedOffersRequest) returns (GetPreQualifiedOffersResponse);

  // Confirm PreQualified Offer
  rpc ConfirmPreQualifiedOffer(ConfirmPreQualifiedOfferRequest) returns (ConfirmPreQualifiedOfferResponse);

  // Create Dash Card Application Intent
  rpc CreateDashCardApplicationIntent(CreateDashCardApplicationIntentRequest) returns (CreateDashCardApplicationIntentResponse);

  // Dashcard pay with points - Get Reward Balance For Payment Method
  rpc GetRewardBalanceForPaymentMethod(GetRewardBalanceForPaymentMethodRequest) returns (GetRewardBalanceForPaymentMethodResponse);

  // Dashcard pay with points - Checkout with points applied redeem reward balance
  rpc RedeemRewardBalanceForPaymentMethod(RedeemRewardBalanceForPaymentMethodRequest) returns (RedeemRewardBalanceForPaymentMethodResponse);

  // Dashcard pay with points - Checkout with points applied refund reward balance
  rpc RefundRewardBalanceForPaymentMethod(RefundRewardBalanceForPaymentMethodRequest) returns (RefundRewardBalanceForPaymentMethodResponse);

  // Claim DashCard Benefit
  rpc ClaimDashCardBenefit(ClaimDashCardBenefitRequest) returns (ClaimDashCardBenefitResponse);

  // Unclaim DashCard Benefit
  rpc UnclaimDashCardBenefit(UnclaimDashCardBenefitRequest) returns (UnclaimDashCardBenefitResponse);

  // Get DashCard Benefit eligibility
  rpc GetDashCardBenefitEligibility(GetDashCardBenefitEligibilityRequest) returns (GetDashCardBenefitEligibilityResponse);

  // Runs dashcard script
  rpc RunDashCardScript(RunDashCardScriptRequest) returns (RunDashCardScriptResponse);

  // Get DashCard Card Holder Status
  rpc GetDashCardCardHolderStatus(GetDashCardCardHolderStatusRequest) returns (GetDashCardCardHolderStatusResponse);

  // Update Reward Points Redemptions Transaction (part of DashCard script)
  rpc UpdateRewardPointsRedemptionsTransaction(UpdateRewardPointsRedemptionsTransactionRequest) returns (UpdateRewardPointsRedemptionsTransactionResponse);

  // Get All DashCard Card Holder Statuses for Payer
  rpc GetProviderCardHolderStatusesForPayer(GetProviderCardHolderStatusesForPayerRequest) returns (GetProviderCardHolderStatusesForPayerResponse);

  // Update Card Holder Status
  rpc UpdateCardHolderStatusForPayer(UpdateCardHolderStatusForPayerRequest) returns (UpdateCardHolderStatusForPayerResponse);

  // Update Card Holder Status for Payers
  rpc BulkUpdateCardHolderStatusForPayers(BulkUpdateCardHolderStatusForPayersRequest) returns (BulkUpdateCardHolderStatusForPayersResponse);

  // Fetch the associated cardholders for provider customer ID
  rpc GetAssociatedCardHoldersByProviderCustomerId(GetAssociatedCardHoldersByProviderCustomerIdRequest) returns (GetAssociatedCardHoldersByProviderCustomerIdResponse);
}

// GetDashCardApplicationStatusRequest
message GetDashCardApplicationStatusRequest {
  // payer correlation ids -- currently only supporting dd_consumer_id
  doordash.payin.common.v1.PayerCorrelationIds payer_correlation_ids = 1;
}

// GetDashCardApplicationStatusResponse
message GetDashCardApplicationStatusResponse {
  // Status of DashCardApplication
  payin.dash_card.v1.DashCardApplicationStatus status = 1;
}

// UpdateDashCardApplicationStatusRequest
message UpdateDashCardApplicationStatusRequest {
  // payer correlation ids -- currently only supporting dd_consumer_id
  doordash.payin.common.v1.PayerCorrelationIds payer_correlation_ids = 1;
  // Status to update DashCardApplication to
  payin.dash_card.v1.DashCardApplicationStatus status = 2;
}

// UpdateDashCardApplicationStatusResponse
message UpdateDashCardApplicationStatusResponse {
  // Boolean success indicator
  google.protobuf.BoolValue success = 1;
}

// GetPreQualifiedOffersRequest
message GetPreQualifiedOffersRequest {
  // Customer profile
  payin.dash_card.v1.CustomerProfile customer_profile = 1;
  // Offer Identifier sent with request to Chase
  google.protobuf.StringValue offer_identifier = 2;
}

// GetPreQualifiedOffersResponse
message GetPreQualifiedOffersResponse {
  // List of prequalified offers returned (from Chase)
  repeated payin.dash_card.v1.PreQualifiedOffer offers = 1;
  // Offer Identifier sent with request to Chase
  google.protobuf.StringValue offer_identifier = 2;
  // Indicates if the offer is high value
  google.protobuf.BoolValue high_value_indicator = 3;
}

// ConfirmPreQualifiedOfferRequest
message ConfirmPreQualifiedOfferRequest {
  // payer correlation ids -- currently only supporting dd_consumer_id
  doordash.payin.common.v1.PayerCorrelationIds payer_correlation_ids = 1;
  // Offer id to confirm.
  google.protobuf.StringValue offer_id = 2;
}

// ConfirmPreQualifiedOfferResponse
message ConfirmPreQualifiedOfferResponse {
  // empty response
}

// CreateDashCardApplicationIntentRequest
message CreateDashCardApplicationIntentRequest {
  // Deprecated: Use dash_card_application_data.payer_correlation_ids instead
  doordash.payin.common.v1.PayerCorrelationIds payer_correlation_ids = 1 [deprecated = true];
  // application data for DashCard
  payin.dash_card.v1.DashCardApplicationData dash_card_application_data = 2;
  // DashCardApplication Redirect Entry Points after application submitted
  payin.dash_card.v1.DashCardApplicationRedirectContext application_context = 3;
  // DashCardApplication Affiliate Data
  payin.dash_card.v1.DashCardApplicationAffiliateData affiliate_data = 4;
  // Platform requests sent from used to determine Chase experience
  doordash.payin.common.v1.Platform platform = 5;
}

// CreateDashCardApplicationIntentResponse
message CreateDashCardApplicationIntentResponse {
  // application url for Chase site
  google.protobuf.StringValue application_url = 1;
  // id of application
  google.protobuf.StringValue id = 2;
}

// GetRewardBalanceForPaymentMethodRequest
message GetRewardBalanceForPaymentMethodRequest {
  // ID of the payment method - each CX has 0 or many payment method. ex. UUID
  google.protobuf.StringValue payment_method_id = 1;
  // Payer correlation ids - used for logging/debugging
  doordash.payin.common.v1.PayerCorrelationIds payer_correlation_ids = 2;
  // Currency of the cx cart
  doordash.payin.common.v1.Currency currency = 3;
  // Stripe card id of the CX - to be deprecated once payment method UUID is adopted as the primary payment identifier
  google.protobuf.Int64Value stripe_card_id = 4;
}

// GetRewardBalanceForPaymentMethodResponse
message GetRewardBalanceForPaymentMethodResponse {
  // Reward balance details for payment method
  money.RewardBalanceDetails reward_balance_details = 1;
}

// RewardPointsReferenceIdType
enum RewardPointsReferenceIdType {
  // UNSPECIFIED
  REWARD_POINTS_REFERENCE_ID_TYPE_UNSPECIFIED = 0;
  // Order cart id as the reference id
  REWARD_POINTS_REFERENCE_ID_TYPE_ORDER_CART_ID = 1;
  // Order id as the reference id
  REWARD_POINTS_REFERENCE_ID_TYPE_ORDER_ID = 2;
}

// RewardBalanceReferenceId
message RewardBalanceReferenceId {
  // The reward points reference ID string value
  google.protobuf.StringValue id = 1;
  // The type of reference ID
  RewardPointsReferenceIdType id_type = 2;
}

// RedeemRewardBalanceForPaymentMethodRequest
message RedeemRewardBalanceForPaymentMethodRequest {
  // Payer correlation ids - used for logging/debugging
  doordash.payin.common.v1.PayerCorrelationIds payer_correlation_ids = 1;
  // Payment method id of the CX
  google.protobuf.StringValue payment_method_id = 2;
  // Monetary value to redeem
  money.RewardBalanceDetails reward_balance_to_redeem = 3;
  // The reward points reference ID
  RewardBalanceReferenceId reference_id = 4;
  // Idempotency key
  google.protobuf.StringValue idemopotency_key = 5;
  // The timestamp that the CX order is checked out and points is to be redeemed
  google.protobuf.Timestamp order_date = 6;
  // Stripe card id of the CX - to be deprecated once payment method UUID is adopted as the primary payment identifier
  google.protobuf.Int64Value stripe_card_id = 7;
}

// RedeemRewardBalanceForPaymentMethodResponse
message RedeemRewardBalanceForPaymentMethodResponse {
  // Boolean success indicator
  google.protobuf.BoolValue success = 1;
}

// RefundRewardBalanceForPaymentMethodRequest
message RefundRewardBalanceForPaymentMethodRequest {
  // Payer correlation ids - used for logging/debugging
  doordash.payin.common.v1.PayerCorrelationIds payer_correlation_ids = 1;
  // Payment method id of the CX
  google.protobuf.StringValue payment_method_id = 2;
  // Monetary value to refund
  money.RewardBalanceDetails reward_balance_to_refund = 3;
  // The reward points reference ID
  RewardBalanceReferenceId reference_id = 4;
  // Idempotency key
  google.protobuf.StringValue idemopotency_key = 5;
  // The timestamp that the CX order is checked out and points is to be refunded
  google.protobuf.Timestamp order_date = 6;
  // Stripe card id of the CX - to be deprecated once payment method UUID is adopted as the primary payment identifier
  google.protobuf.Int64Value stripe_card_id = 7;
  // Refund type, by default it refunds as cancellation. Please read RewardBalanceRefundType for more info
  doordash.payin.dash_card.v1.RewardBalanceRefundType reward_balance_refund_type = 8;
}

// RefundRewardBalanceForPaymentMethodResponse
message RefundRewardBalanceForPaymentMethodResponse {
  // Boolean success indicator
  google.protobuf.BoolValue success = 1;
}

// ClaimDashCardBenefitRequest
message ClaimDashCardBenefitRequest {
  // Provider (3rd party i.e Chase) identifier
  google.protobuf.StringValue provider_customer_id = 1;
  // Payer correlation id
  doordash.payin.common.v1.PayerCorrelationIds payer_correlation_ids = 2;
  // The benefit type
  payin.dash_card.v1.DashCardBenefitType benefit_type = 3;
  // Payment method id
  google.protobuf.StringValue payment_method_id = 4;
}

// ClaimDashCardBenefitResponse
message ClaimDashCardBenefitResponse {
  // Whether or not the benefit claim was successful
  google.protobuf.BoolValue success = 1;
}

// UnclaimDashCardBenefitRequest
message UnclaimDashCardBenefitRequest {
  // Provider (3rd party i.e Chase) identifier
  google.protobuf.StringValue provider_customer_id = 1;
  // Payer correlation id
  doordash.payin.common.v1.PayerCorrelationIds payer_correlation_ids = 2;
  // The benefit type
  payin.dash_card.v1.DashCardBenefitType benefit_type = 3;
  // Payment method id
  google.protobuf.StringValue payment_method_id = 4;
}

// UnclaimDashCardBenefitResponse
message UnclaimDashCardBenefitResponse {
  // Whether or not the benefit unclaim was successful
  google.protobuf.BoolValue success = 1;
}

// GetDashCardBenefitRequest
message GetDashCardBenefitEligibilityRequest {
  // Provider (3rd party i.e Chase) identifier
  google.protobuf.StringValue provider_customer_id = 1;
  // Payer correlation id
  doordash.payin.common.v1.PayerCorrelationIds payer_correlation_ids = 2;
  // The benefit type
  payin.dash_card.v1.DashCardBenefitType benefit_type = 3;
  // Payment method id
  google.protobuf.StringValue payment_method_id = 4;
}

// GetDashCardBenefitRequest
message GetDashCardBenefitEligibilityResponse {
  // Provider (3rd party i.e Chase) identifier
  google.protobuf.BoolValue eligible = 1;
}

// RunDashCardScriptRequest
message RunDashCardScriptRequest {
  // type of job to run
  google.protobuf.StringValue job_name = 1;
  // json parameters to use with script as a string value
  google.protobuf.StringValue params = 2;
}

// RunDashCardScriptResponse
message RunDashCardScriptResponse {
  // if script is success then returns true
  google.protobuf.BoolValue success = 1;
  // response from script
  google.protobuf.StringValue response = 2;
}

// GetDashCardCardHolderStatusRequest
message GetDashCardCardHolderStatusRequest {
  // Provider customer identifier
  google.protobuf.StringValue provider_customer_id = 1;
  // Payer correlation id
  doordash.payin.common.v1.PayerCorrelationIds payer_correlation_ids = 2;
}

// GetDashCardCardHolderStatusResponse
message GetDashCardCardHolderStatusResponse {
  // Card holder current status
  payin.dash_card.v1.CardHolderStatus current_card_holder_status = 1;
  // Card holder eligibility status (i.e cx is eligible to be a primary or secondary of this card)
  payin.dash_card.v1.CardHolderStatus card_holder_status_eligibility = 2;
}

// GetProviderCardHolderStatusesForPayerRequest
message GetProviderCardHolderStatusesForPayerRequest {
  // Payer correlation id
  doordash.payin.common.v1.PayerCorrelationIds payer_correlation_ids = 1;
}

// GetAllDashCardCardHolderStatusesResponse
message GetProviderCardHolderStatusesForPayerResponse {
  // For each DashCard Cx is card holder for
  repeated payin.dash_card.v1.ProviderCardHolderStatus provider_card_holder_statuses = 1;
}

// UpdateCardHolderStatusForPayerRequest
message UpdateCardHolderStatusForPayerRequest {
  // Payer correlation id
  doordash.payin.common.v1.PayerCorrelationIds payer_correlation_ids = 1;
  // Provider customer identifier
  google.protobuf.StringValue provider_customer_id = 2;
  // Card holder current status
  payin.dash_card.v1.CardHolderStatus current_card_holder_status = 3;
}

// UpdateCardHolderStatusForPayersRequest
message BulkUpdateCardHolderStatusForPayersRequest {
  // list of UpdateCardHolderStatusForPayerRequest
  repeated UpdateCardHolderStatusForPayerRequest request = 1;
}

// UpdateCardHolderStatusForPayerResponse
message UpdateCardHolderStatusForPayerResponse {
  // Whether or not the update was successful
  google.protobuf.BoolValue success = 1;

  // Payer correlation id
  doordash.payin.common.v1.PayerCorrelationIds payer_correlation_ids = 2;
}

// UpdateCardHolderStatusForPayerResponse
message BulkUpdateCardHolderStatusForPayersResponse {
  // list of UpdateCardHolderStatusForPayerResponse
  repeated UpdateCardHolderStatusForPayerResponse response = 1;
}

// UpdateRewardPointsRedemptionsTransactionRequest
message UpdateRewardPointsRedemptionsTransactionRequest {
  // transaction ids
  repeated google.protobuf.StringValue transaction_ids = 1;
  // reconiliation date
  google.protobuf.Timestamp reconciled_at = 2;
}

// UpdateRewardPointsRedemptionsTransactionResponse
message UpdateRewardPointsRedemptionsTransactionResponse {
  // Boolean success indicator
  google.protobuf.BoolValue success = 1;
}

// GetAssociatedCardHoldersByProviderCustomerIdRequest
message GetAssociatedCardHoldersByProviderCustomerIdRequest {
  // provider customer identifier, typically the partner_ref_id
  repeated google.protobuf.StringValue provider_customer_ids = 1;
}

// GetAssociatedCardHoldersByProviderCustomerIdResponse
message GetAssociatedCardHoldersByProviderCustomerIdResponse {
  //  All associated card holders
  repeated payin.dash_card.v1.AssociatedCardHoldersWithProviderCustomerId associated_card_holder_statuses = 1;
}
