syntax = "proto3";

package doordash.payin.payment_method.v1;

import "common/service_client_config.proto";
import "data_classification.v1/data_classification.proto";
import "google/protobuf/wrappers.proto";
import "payin/common_v1.proto";
import "payin/payment_method_v1.proto";

option go_package = "github.com/doordash/services-protobuf/generated/payin/payment_method/v1";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.payin.payment_method.v1";

// V1 Endpoints
service PaymentMethodV1Service {
  // Service info
  option (service_client.client_config).service_name = "payin-platform";
  option (service_client.client_config).service_app = "payer";
  // Retry config
  option (service_client.client_config).response_attempt_timeout_millis = 30000;
  option (service_client.client_config).retry_config.max_attempts = 3;
  option (service_client.client_config).retry_config.initial_wait_millis = 20;
  // Circuit Breaker config
  option (service_client.client_config).circuit_breaker_config.failure_rate_threshold = 0.5;
  option (service_client.client_config).circuit_breaker_config.minimum_request_threshold = 30;
  option (service_client.client_config).circuit_breaker_config.counter_sliding_window_millis = 15000;
  option (service_client.client_config).circuit_breaker_config.circuit_open_window_millis = 5000;
  option (service_client.client_config).circuit_breaker_config.trial_request_interval_millis = 2000;

  // Create Payment Method V1
  rpc CreatePaymentMethodV1(CreatePaymentMethodV1Request) returns (CreatePaymentMethodV1Response);

  // Get Payment Method By Id V1
  rpc GetPaymentMethodByIdV1(GetPaymentMethodByIdV1Request) returns (GetPaymentMethodByIdV1Response);

  // Get Payment Method By Payment Method Reference Id V1
  rpc GetPaymentMethodByReferenceIdV1(GetPaymentMethodByReferenceIdV1Request) returns (GetPaymentMethodByReferenceIdV1Response);

  // List Payment Methods V1
  rpc ListPaymentMethodsV1(ListPaymentMethodsV1Request) returns (ListPaymentMethodsV1Response);

  // Get Payment Method By Token V1
  rpc GetPaymentMethodByTokenV1(GetPaymentMethodByTokenV1Request) returns (GetPaymentMethodByTokenV1Response);

  // Get Payment Method By Resource Id V1
  rpc GetPaymentMethodByResourceIdV1(GetPaymentMethodByResourceIdV1Request) returns (GetPaymentMethodByResourceIdV1Response);

  // Update Payment Method By Reference Id V1
  rpc UpdatePaymentMethodByReferenceIdV1(UpdatePaymentMethodByReferenceIdV1Request) returns (UpdatePaymentMethodByReferenceIdV1Response);

  // Delete Payment Method By Id V1
  rpc DeletePaymentMethodByIdV1(DeletePaymentMethodByIdV1Request) returns (DeletePaymentMethodByIdV1Response);

  // Delete Payment Method By Reference Id V1
  rpc DeletePaymentMethodByReferenceIdV1(DeletePaymentMethodByReferenceIdV1Request) returns (DeletePaymentMethodByReferenceIdV1Response);

  // Clone Payment Method V1
  rpc ClonePaymentMethodV1(ClonePaymentMethodV1Request) returns (ClonePaymentMethodV1Response);
}

// PaymentMethodReferenceIdType
enum PaymentMethodReferenceIdType {
  // unspecified
  PAYMENT_METHOD_REFERENCE_ID_TYPE_UNSPECIFIED = 0;

  // stripe card id
  PAYMENT_METHOD_REFERENCE_ID_TYPE_DD_STRIPE_CARD_ID = 1;

  // pgp card id
  PAYMENT_METHOD_REFERENCE_ID_TYPE_PGP_CARD_ID = 2;
}

// for payer creation if payer does not exist during payment creation
message CreatePayerData {
  // email for client used when we create external account on payment provider
  google.protobuf.StringValue email = 1 [(data_classification.v1.data_classification).pii = true];

  // country where payer is located
  doordash.payin.common.v1.Country country = 2 [(data_classification.v1.data_classification).pii = true];

  // description of payer
  google.protobuf.StringValue description = 3 [(data_classification.v1.data_classification).pii = true];

  // payment_provider
  doordash.payin.common.v1.PgpCode payment_provider = 4;

  // experience
  doordash.payin.common.v1.Experience experience = 5;
}

// CreatePaymentMethodV1Request
message CreatePaymentMethodV1Request {
  // payer
  doordash.payin.common.v1.PayerCorrelationIds payer_correlation_ids = 1;

  // detailed information for payer
  doordash.payin.common.v1.PayerData payer_data = 2;

  // payment provider
  doordash.payin.common.v1.PgpCode payment_provider = 3;

  // one-time payment payment token issued by payment provider
  google.protobuf.StringValue token = 4;

  // true if the new payment method should be set as the default card
  google.protobuf.BoolValue set_default = 5;

  // true if the payment method is already scanned by fraud
  google.protobuf.BoolValue is_scanned = 6;

  // true if the payment method is already active by fraud
  google.protobuf.BoolValue is_active = 7;

  // whether or not to have provider validate payment method, defaults to true
  google.protobuf.BoolValue validate_payment_method = 8;

  // detailed information used to create a payer
  CreatePayerData create_payer_request = 9;
}

// CreatePaymentMethodV1Response
message CreatePaymentMethodV1Response {
  // newly created payment method
  doordash.payin.payment_method.v1.PaymentMethod payment_method = 1;
}

// GetPaymentMethodByIdV1Request
message GetPaymentMethodByIdV1Request {
  // payment method id
  google.protobuf.StringValue payment_method_id = 1;

  // Reserving the field number of update_three_d_secure_supported
  reserved 2;

  reserved "update_three_d_secure_supported";
}

// GetPaymentMethodByIdV1Response
message GetPaymentMethodByIdV1Response {
  // returned payment method by id
  doordash.payin.payment_method.v1.PaymentMethod payment_method = 1;
}

// GetPaymentMethodByReferenceIdV1Request
message GetPaymentMethodByReferenceIdV1Request {
  // the type of the reference id passed in to `payment_method_reference_id`
  PaymentMethodReferenceIdType payment_method_reference_id_type = 1;

  // value of the payment method reference id as indicated by the type
  google.protobuf.StringValue payment_method_reference_id = 2;

  // whether or not update by 3ds is supported
  google.protobuf.BoolValue update_three_d_secure_supported = 3;
}

// GetPaymentMethodByReferenceIdV1Response
message GetPaymentMethodByReferenceIdV1Response {
  // returned payment method by reference id
  doordash.payin.payment_method.v1.PaymentMethod payment_method = 1;
}

// ListPaymentMethodsV1Request
message ListPaymentMethodsV1Request {
  // List payment method sort key
  enum SortKey {
    // Unspecified
    SORT_KEY_UNSPECIFIED = 0;

    // Sort by created at ascending
    SORT_KEY_CREATED_AT = 1;
  }

  // payer
  doordash.payin.common.v1.PayerCorrelationIds payer_correlation_ids = 1;

  // return active payment methods only, defaults to false
  google.protobuf.BoolValue active_only = 2;

  // return primary profile's payment methods only, defaults to true
  google.protobuf.BoolValue primary_only = 3;

  // return digital wallet payment methods, defaults to True
  google.protobuf.BoolValue include_digital_wallet = 4;

  // how to sort the response
  SortKey sort_by = 5;

  // country
  doordash.payin.common.v1.Country country = 6;

  // return payment method availability, defaults to False
  google.protobuf.BoolValue include_payment_method_availability = 7;
}

// ListPaymentMethodsV1Response
message ListPaymentMethodsV1Response {
  // the number of payment methods found
  google.protobuf.Int32Value count = 1;

  // whether there are more payment methods to paginate through;
  // currently returns false since all the payment methods are returned
  google.protobuf.BoolValue has_more = 2;

  // list of payment methods found
  repeated doordash.payin.payment_method.v1.PaymentMethod data = 3;

  // cursor to continue searching with, currently unimplemented
  google.protobuf.StringValue cursor = 4;
}

// GetPaymentMethodByTokenV1Request
message GetPaymentMethodByTokenV1Request {
  // payment provider for the request payment method
  doordash.payin.common.v1.PgpCode payment_provider = 1;

  // payment method token
  google.protobuf.StringValue token = 2;

  // payer -- replaces `x-payer-token` - will be constructed from this instead
  doordash.payin.common.v1.PayerCorrelationIds payer_correlation_ids = 3;
}

// GetPaymentMethodByTokenV1Response
message GetPaymentMethodByTokenV1Response {
  // payment method found from request
  doordash.payin.payment_method.v1.PaymentMethod payment_method = 1;
}

// GetPaymentMethodByResourceIdV1Request
message GetPaymentMethodByResourceIdV1Request {
  // payment provider for the requested payment method
  doordash.payin.common.v1.PgpCode payment_provider = 1;

  // resource id for the requested payment method
  google.protobuf.StringValue resource_id = 2;
}

// GetPaymentMethodByResourceIdV1Response
message GetPaymentMethodByResourceIdV1Response {
  // payment method found from request
  doordash.payin.payment_method.v1.PaymentMethod payment_method = 1;
}

// UpdatePaymentMethodByReferenceIdV1Request
message UpdatePaymentMethodByReferenceIdV1Request {
  // true if the payment method is already scanned by fraud
  google.protobuf.BoolValue is_scanned = 1;

  // Validation_card_id of card entity
  google.protobuf.Int64Value validation_card_id = 2;

  // true if the payment method is active
  google.protobuf.BoolValue is_active = 3;

  // payment method reference id
  google.protobuf.StringValue payment_method_reference_id = 4;

  // type of payment method reference id
  PaymentMethodReferenceIdType payment_method_reference_id_type = 5;

  // payer -- replaces `x-payer-token` - will be constructed from this instead
  doordash.payin.common.v1.PayerCorrelationIds payer_correlation_ids = 6;
}

// UpdatePaymentMethodByReferenceIdV1Response
message UpdatePaymentMethodByReferenceIdV1Response {
  // payment method found from request
  doordash.payin.payment_method.v1.PaymentMethod payment_method = 1;
}

// DeletePaymentMethodByIdV1Request
message DeletePaymentMethodByIdV1Request {
  // id of payment method to delete
  google.protobuf.StringValue payment_method_id = 1;

  // payer -- replaces `x-payer-token` - will be constructed from this instead
  doordash.payin.common.v1.PayerCorrelationIds payer_correlation_ids = 2;
}

// DeletePaymentMethodByIdV1Response
message DeletePaymentMethodByIdV1Response {
  // payment method deleted from request
  doordash.payin.payment_method.v1.PaymentMethod payment_method = 1;
}

// DeletePaymentMethodByReferenceIdV1Request
message DeletePaymentMethodByReferenceIdV1Request {
  // payment method reference id
  google.protobuf.StringValue payment_method_reference_id = 1;

  // type of payment method reference id
  PaymentMethodReferenceIdType payment_method_reference_id_type = 2;

  // payment method country
  doordash.payin.common.v1.Country country = 3;

  // payer -- replaces `x-payer-token` - will be constructed from this instead
  doordash.payin.common.v1.PayerCorrelationIds payer_correlation_ids = 4;
}

// DeletePaymentMethodByReferenceIdV1Response
message DeletePaymentMethodByReferenceIdV1Response {
  // payment method deleted from request
  doordash.payin.payment_method.v1.PaymentMethod payment_method = 1;
}

// ClonePaymentMethodV1Request
message ClonePaymentMethodV1Request {
  // Stripe card id
  google.protobuf.Int64Value dd_stripe_card_id = 1;

  // Destination Payment Provider resource id
  google.protobuf.StringValue destination_provider_customer_id = 2;

  // Country of the destination provider customer
  doordash.payin.common.v1.Country destination_country = 3;

  // Payment provider
  doordash.payin.common.v1.PgpCode payment_provider = 4;
}

// ClonePaymentMethodV1Response
message ClonePaymentMethodV1Response {
  // cloned payment method from request
  doordash.payin.payment_method.v1.PaymentMethod payment_method = 1;
}
