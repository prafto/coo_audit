syntax = "proto3";

// buf:lint:ignore DIRECTORY_SAME_PACKAGE
package doordash.retail.catalog.common.v1;

import "google/protobuf/wrappers.proto";

option go_package = "github.com/doordash/services-protobuf/generated/doordash/retail/catalog/common/v1";
option java_multiple_files = true;

// Enumeration of breed size options
// Breed or size of the animal the product is designed for
enum BreedSize {
  // Indicates the breed size unspecified
  BREED_SIZE_UNSPECIFIED = 0;
  // Indicates the breed size related to small
  BREED_SIZE_SMALL = 1;
  // Indicates the breed size related to medium
  BREED_SIZE_MEDIUM = 2;
  // Indicates the breed size related to large
  BREED_SIZE_LARGE = 3;
  // Indicates the breed size related to extra large
  BREED_SIZE_EXTRA_LARGE = 4;
  // Indicates the breed size related to all size
  BREED_SIZE_ALL_SIZES = 5;
}

// Enumeration of petlifestage options
// Indicates the lifestage the food is best suited for.
enum PetLifeStage {
  // Indicates the unspecified pet lifestage
  PET_LIFE_STAGE_UNSPECIFIED = 0;
  // Indicates the pet lifestage - all ages
  PET_LIFE_STAGE_ALL_AGES = 1;
  // Indicates the puppy pet lifestage
  PET_LIFE_STAGE_PUPPY = 2;
  // Indicates the 6 months pet lifestage
  PET_LIFE_STAGE_SIX_MONTHS_AND_UP = 3;
  // Indicates the kitten pet lifestage
  PET_LIFE_STAGE_KITTEN = 4;
  // Indicates the senior pet lifestage
  PET_LIFE_STAGE_SENIOR = 5;
}

// Enumeration of food type options
// Indicates whether the food is wet or dry
enum FoodType {
  //Indicates unspecified food type
  FOOD_TYPE_UNSPECIFIED = 0;
  //Indicates wet food type
  FOOD_TYPE_WET = 1;
  //Indicates dry food type
  FOOD_TYPE_DRY = 2;
}

// Enumeration of petfoodform options
// Indicate the item form or formulation of the food.
enum PetFoodForm {
  // Indicates unspecified food form
  PET_FOOD_FORM_UNSPECIFIED = 0;
  // Indicates freeze dried food form
  PET_FOOD_FORM_FREEZE_DRIED = 1;
  // Indicates dried food form
  PET_FOOD_FORM_DRIED = 2;
  // Indicates kibble food form
  PET_FOOD_FORM_KIBBLE = 3;
  // Indicates patties food form
  PET_FOOD_FORM_PATTIES = 4;
  // Indicates chunks food form
  PET_FOOD_FORM_CHUNKS = 5;
  // Indicates sauce food form
  PET_FOOD_FORM_SAUCE = 6;
  // Indicates ground food form
  PET_FOOD_FORM_GROUND = 7;
  // Indicates loose food form
  PET_FOOD_FORM_LOOSE = 8;
  // Indicates chopped food form
  PET_FOOD_FORM_CHOPPED = 9;
  // Indicates liquid food form
  PET_FOOD_FORM_LIQUID = 10;
  // Indicates pate food form
  PET_FOOD_FORM_PATE = 11;
  // Indicates shredded food form
  PET_FOOD_FORM_SHREDDED = 12;
  // Indicates loaf food form
  PET_FOOD_FORM_LOAF = 13;
  // Indicates cut food form
  PET_FOOD_FORM_CUT = 14;
  // Indicates pieces food form
  PET_FOOD_FORM_PIECES = 15;
  // Indicates powered food form
  PET_FOOD_FORM_POWDERED = 16;
  // Indicates cubed food form
  PET_FOOD_FORM_CUBED = 17;
  // Indicates minced food form
  PET_FOOD_FORM_MINCED = 18;
  // Indicates pellets food form
  PET_FOOD_FORM_PELLETS = 19;
  // Indicates soft chew food form
  PET_FOOD_FORM_SOFT_CHEW = 20;
  // Indicates flakes food form
  PET_FOOD_FORM_FLAKES = 21;
  // Indicates ball food form
  PET_FOOD_FORM_BALL = 22;
  // Indicates purred food form
  PET_FOOD_FORM_PUREED = 23;
  // Indicates stewed food form
  PET_FOOD_FORM_STEWED = 24;
  // Indicates paste food form
  PET_FOOD_FORM_PASTE = 25;
  // Indicates nuggets food form
  PET_FOOD_FORM_NUGGETS = 26;
  // Indicates tablet food form
  PET_FOOD_FORM_TABLET = 27;
  // Indicates filleted food form
  PET_FOOD_FORM_FILLETED = 28;
  // Indicates gel food form
  PET_FOOD_FORM_GEL = 29;
  // Indicates block food form
  PET_FOOD_FORM_BLOCK = 30;
  // Indicates topper food form
  PET_FOOD_FORM_TOPPER = 31;
  // Indicates diced food form
  PET_FOOD_FORM_DICED = 32;
}

// Enumeration of Pet toy features options
// Indicates the features of pets' toy
enum PetToyFeatures {
  // Indicates unspecified pet toy feature
  PET_TOY_FEATURES_UNSPECIFIED = 0;
  // Indicates pet toy feature related to bone
  PET_TOY_FEATURES_BONE = 1;
  // Indicates pet toy feature related to plush stuffed
  PET_TOY_FEATURES_PLUSH_STUFFED = 2;
  // Indicates pet toy feature related to ball
  PET_TOY_FEATURES_BALL = 3;
  // Indicates pet toy feature related to interactive
  PET_TOY_FEATURES_INTERACTIVE = 4;
  // Indicates pet toy feature related to treat maze
  PET_TOY_FEATURES_TREAT_MAZE = 5;
  // Indicates pet toy feature related to animal
  PET_TOY_FEATURES_ANIMAL = 6;
  // Indicates pet toy feature related to rope
  PET_TOY_FEATURES_ROPE = 7;
  // Indicates pet toy feature related to stick
  PET_TOY_FEATURES_STICK = 8;
  // Indicates pet toy feature related to teaser
  PET_TOY_FEATURES_TEASER = 9;
  // Indicates pet toy feature related to house
  PET_TOY_FEATURES_HOUSE = 10;
  // Indicates pet toy feature related to ring
  PET_TOY_FEATURES_RING = 11;
  // Indicates pet toy feature related to barbell
  PET_TOY_FEATURES_BARBELL = 12;
  // Indicates pet toy feature related to post
  PET_TOY_FEATURES_POST = 13;
  // Indicates pet toy feature related to wand
  PET_TOY_FEATURES_WAND = 14;
  // Indicates pet toy feature related to agility
  PET_TOY_FEATURES_AGILITY = 15;
  // Indicates pet toy feature related to pad
  PET_TOY_FEATURES_PAD = 16;
  // Indicates pet toy feature related to treat dispenser
  PET_TOY_FEATURES_TREAT_DISPENSER = 17;
  // Indicates pet toy feature related to disc
  PET_TOY_FEATURES_DISC = 18;
  // Indicates pet toy feature related to rattle
  PET_TOY_FEATURES_RATTLE = 19;
  // Indicates pet toy feature related to mechanical
  PET_TOY_FEATURES_MECHANICAL = 20;
  // Indicates pet toy feature related to ball launcher
  PET_TOY_FEATURES_BALL_LAUNCHER = 21;
  // Indicates pet toy feature related to bottle
  PET_TOY_FEATURES_BOTTLE = 22;
  // Indicates pet toy feature related to horseshoe
  PET_TOY_FEATURES_HORSESHOE = 23;
  // Indicates pet toy feature related to tired tower
  PET_TOY_FEATURES_TIERED_TOWER = 24;
  // Indicates pet toy feature related to launcher
  PET_TOY_FEATURES_LAUNCHER = 25;
  // Indicates pet toy feature related to durable
  PET_TOY_FEATURES_DURABLE = 26;
  // Indicates pet toy feature related to puzzle learning
  PET_TOY_FEATURES_PUZZLE_LEARNING = 27;
  // Indicates pet toy feature related to chewer
  PET_TOY_FEATURES_CHEWER = 28;
  // Indicates pet toy feature related to dental teething
  PET_TOY_FEATURES_DENTAL_TEETHING = 29;
  // Indicates pet toy feature related to food shahped
  PET_TOY_FEATURES_FOOD_SHAPED = 30;
}

// Enumeration of Pet types options
enum PetType {
  // Indicates the unspecified pet type
  PET_TYPE_UNSPECIFIED = 0;
  // Indicates the fish type
  PET_TYPE_FISH = 1;
  // Indicates the cat type
  PET_TYPE_CAT = 2;
  // Indicates the dog type
  PET_TYPE_DOG = 3;
  // Indicates the bird type
  PET_TYPE_BIRD = 4;
  // Indicates the small animal type
  PET_TYPE_SMALL_ANIMAL = 5;
  // Indicates the other type
  PET_TYPE_OTHER = 6;
  // Indicates the reptile type
  PET_TYPE_REPTILE = 7;
  // Indicates the lizard type
  PET_TYPE_LIZARD = 8;
  // Indicates the snake type
  PET_TYPE_SNAKE = 9;
  // Indicates the parrot type
  PET_TYPE_PARROT = 10;
  // Indicates the ferret type
  PET_TYPE_FERRET = 11;
  // Indicates the rabbit type
  PET_TYPE_RABBIT = 12;
  // Indicates the guinea pig type
  PET_TYPE_GUINEA_PIG = 13;
  // Indicates the mouse type
  PET_TYPE_MOUSE = 14;
  // Indicates the hamster type
  PET_TYPE_HAMSTER = 15;
  // Indicates the rat type
  PET_TYPE_RAT = 16;
  // Indicates the chipmunk type
  PET_TYPE_CHIPMUNK = 17;
  // Indicates the turtle type
  PET_TYPE_TURTLE = 18;
}

// Pet's specific information
message Pets {
  // optional, Species of animal the product is designed for. Multiple values to be sent in an array, TODO: codelist
  repeated google.protobuf.StringValue species = 1;
  // optional, Indicates the lifestage the food is best suited for. Multiple values to be sent in an array, TODO: codelist
  repeated google.protobuf.StringValue life_stage = 2;
  // optional, Breed or size of the animal the product is designed for, TODO: codelist
  repeated google.protobuf.StringValue breed_size = 3;
  // optional, Indicates which diets the food is best suited for. Multiple values to be sent in an array, TODO: codelist
  repeated google.protobuf.StringValue special_diet = 4;
  // optional, Text description stating "Feed (amount of product) per (weight) of dog/cat" and feeding frequency.
  google.protobuf.StringValue feeding_directions = 5;
  // optional, The full text description explaining whether the food contains essential nutrients, how that was determined, and for which life stage the food is appropriate for.
  google.protobuf.StringValue aafco_statement = 6;
  // optional, Text description of percentage of each of the nutrients in the food.
  google.protobuf.StringValue guaranteed_analysis = 7;
  // The breed of animal for which the product is intended.
  google.protobuf.StringValue breed_type = 8;
  // The category/type of food.
  google.protobuf.StringValue food_type = 9;
  // optional, breed or size of an animal
  repeated BreedSize breed_size_v2 = 10;
  // optional, type of food - wet or dry
  repeated FoodType food_type_v2 = 11;
  // optional, indicates the age of animal
  repeated PetLifeStage pet_life_stage_v2 = 12;
  // optional, indicate the item form or formulation of the food.
  repeated PetFoodForm pet_food_form = 13;
  // optional, features of pets' toy
  repeated PetToyFeatures pet_toy_feature = 14;
  // optional, the type of pets
  repeated PetType pet_type = 15;
}
