syntax = "proto3";
package recurring_program.v1;

import "common/common.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "merchant_financial_service/common.proto";
import "merchant_financial_service/drive_transaction_service.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_outer_classname = "RecurringProgramProtos";
option java_package = "com.doordash.service.recurring_program";

// Service for recurring fee programs
service RecurringProgramService {
  // Onboard new stores to recurring programs
  // This endpoint will create a new program, but will also end if there is an current active program
  // for the reference_entity_type, reference_entity_id, cadence and program_type
  rpc OnboardRecurringPrograms(OnboardRecurringProgramsRequest) returns (OnboardRecurringProgramsResponse);
}

// Request for onboarding to recurring programs
message OnboardRecurringProgramsRequest {
  // List of recurring programs to onboard
  repeated RecurringProgram recurring_programs = 1;
}

// Response for onboarding to recurring programs
message OnboardRecurringProgramsResponse {
  // response
  oneof response {
    // List of onboarded recurring programs
    ListOfRecurringPrograms created_recurring_programs = 1;
  }
}

// Model for list of programs
message ListOfRecurringPrograms {
  // List of recurring programs
  repeated RecurringProgram recurring_programs = 1;
}

// Recurring Program Model
message RecurringProgram {
  // Optional: Recurring Program ID
  google.protobuf.StringValue id = 1;
  // Required: Entity type for which this recurring program is defined for(ex: store, business, developer)
  merchant_financial_service.common.EntityType reference_entity_type = 2;
  // Required: Entity ID for which this recurring program is defined for
  google.protobuf.StringValue reference_entity_id = 3;
  // Required: Cadence of the program(ex: weekly, monthly)
  RecurringProgramCadence cadence = 4;
  // Required: Fee logic used to compute the fee for this program
  google.protobuf.StringValue fee_logic = 5;
  // Required: Start time of the recurring program
  google.protobuf.Timestamp start_at = 6;
  // Optional: End time of the recurring program
  google.protobuf.Timestamp end_at = 7;
  // Required: Recurring Program type
  RecurringProgramType program_type = 8;
  // Required: Entity type at which this program is applied at
  merchant_financial_service.common.EntityType applied_at_entity_type = 9;
  // Required: source
  google.protobuf.StringValue source = 10;
  // Optional: Metric source to use
  // This becomes a mandatory field if there are variables in the fee_logic
  MetricSource metric_source = 11;
}

// Recurring Program Cadence model
enum RecurringProgramCadence {
  // Not specified
  RECURRING_PROGRAM_CADENCE_UNSPECIFIED = 0;
  // Weekly cadence
  RECURRING_PROGRAM_CADENCE_WEEKLY = 1;
  // Monthly cadence
  RECURRING_PROGRAM_CADENCE_MONTHLY = 2;
}

// Recurring program types
enum RecurringProgramType {
  // Default
  RECURRING_PROGRAM_TYPE_UNSPECIFIED = 0;
  // Dasher wait time fee program
  RECURRING_PROGRAM_TYPE_DASHER_WAIT_TIME_FEE = 1;
  // Dasher wait time discount program
  RECURRING_PROGRAM_TYPE_DASHER_WAIT_TIME_DISCOUNT = 2;
  // Volume discount fee program
  RECURRING_PROGRAM_TYPE_VOLUME_DISCOUNT = 3;
  // Support fee program
  RECURRING_PROGRAM_TYPE_SUPPORT_FEE = 4;
  // Subscription fee program
  RECURRING_PROGRAM_TYPE_SUBSCRIPTION_FEE = 5;
}

// Metric source
enum MetricSource {
  // Not specified
  METRIC_SOURCE_UNSPECIFIED = 0;
  // Drive delivery aggregation metric source
  METRIC_SOURCE_DRIVE_DELIVERY_AGGREGATIONS = 1;
}
