syntax = "proto3";
// buf:lint:ignore PACKAGE_SAME_DIRECTORY
// buf:lint:ignore PACKAGE_VERSION_SUFFIX
// buf:lint:ignore DIRECTORY_SAME_PACKAGE
package risk.services;

import 'google/protobuf/timestamp.proto';
import "google/protobuf/wrappers.proto";
import "risk/account.proto";
import "risk/context.proto";
import "risk/fulfillment.proto";

option java_generic_services = true;
option java_multiple_files = false;
option java_outer_classname = "CnrPhotoProofDetailsServiceProtos";
option java_package = "com.doordash.risk.proto";

// CnrPhotoProofDetailsService
service CnrPhotoProofDetailsService {
  // UploadPhotoProof
  // buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc UploadPhotoProof(UploadPhotoProofRequest) returns (CreateCnrPhotoProofResponse);
  // GetPhotoProofDetails
  // buf:lint:ignore RPC_REQUEST_STANDARD_NAME
  // buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc GetPhotoProofDetails(GetCnrPhotoProofDetailsRequest) returns (GetCnrPhotoProofDetailsResponse);
  // CreatePhotoProofDetails
  // buf:lint:ignore RPC_REQUEST_STANDARD_NAME
  // buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc CreatePhotoProofDetails(CreateCnrPhotoProofRequest) returns (CreateCnrPhotoProofResponse);
}

/**
 * Uploads Cnr Photo Proof:
 * 1. Uploads raw photos to photos service
 * 2. Stores of photo metadata + linkages
 *
 * cnr_photo_proof_details: Details on the photo proof upload request
 * photos: List of raw photos associated with the request
 */
// UploadPhotoProofRequest
message UploadPhotoProofRequest {
  // cnr_photo_proof_details
  CnrPhotoProofDetails cnr_photo_proof_details = 1;
  // photos
  repeated CnrPhoto photos = 2;
}

/**
 * Uploads Cnr Photo Proof Metadata:
 * Stores photo metadata + linkages
 *
 * cnr_photo_proof_details: Details on the photo proof upload request
 * photos: List of photos links associated with the request
 */
// CreateCnrPhotoProofRequest
message CreateCnrPhotoProofRequest {
  // cnr_photo_proof_details
  CnrPhotoProofDetails cnr_photo_proof_details = 1;
  // photo_links
  repeated CnrPhotoLink photo_links = 2;
  // risk_context
  RiskContext risk_context = 3;
}

/**
 * Response for Cnr Photo Proof upload
 *
 * cnr_photo_proof_id: ID of photo proof request
 * error: Non-null if an error occurs during business logic
 */
// CreateCnrPhotoProofResponse
message CreateCnrPhotoProofResponse {
  // cnr_photo_proof_id
  int64 cnr_photo_proof_id = 1;
  // error
  CnrPhotoProofError error = 2;
  // cnr_photo_link_ids
  repeated int64 cnr_photo_link_ids = 3;
}

/**
 * Retrieves Cnr Photo Proof metadata with links
 *
 * delivery_id: Delivery ID
 * problem_type: String problem type (optional)
 * sub_problem_type: String sub-problem type (optional)
 * item_id: item id (optional)
 */
// GetCnrPhotoProofDetailsRequest
message GetCnrPhotoProofDetailsRequest {
  // delivery_id
  DeliveryId delivery_id = 1;
  // problem_type
  google.protobuf.StringValue problem_type = 2; // Optional
  // sub_problem_type
  google.protobuf.StringValue sub_problem_type = 3; // Optional
  // item_id
  google.protobuf.Int64Value item_id = 4; // Optional
}

/**
 * Response for Cnr photo proof details request
 *
 * cnr_photo_proof_details_with_links: List of all photo proof entries, with links to photos
 * error: Non-null if an error occurs during business logic
 */
// GetCnrPhotoProofDetailsResponse
message GetCnrPhotoProofDetailsResponse {
  // result
  oneof result {
    // cnr_photo_proof_details_with_links_list
    CnrPhotoProofDetailsWithLinksList cnr_photo_proof_details_with_links_list = 1;
    // error
    CnrPhotoProofError error = 2;
  }
}

// PhotoPurpose
enum PhotoPurpose {
  // RECEIPT_PHOTO
  // buf:lint:ignore ENUM_VALUE_PREFIX
  // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
  RECEIPT_PHOTO = 0;
  // ORDER_PHOTO
  // buf:lint:ignore ENUM_VALUE_PREFIX
  ORDER_PHOTO = 1;
}

/**
 * delivery_id: Delivery ID
 * problem_type: String problem type (optional)
 * sub_problem_type: String sub-problem type (optional)
 * item_id: item id (optional)
 * photo_purpose: Purpose for the photos (currently receipt or order photos)
 * description: Description tied to the set of photos
 */
// CnrPhotoProofDetails
message CnrPhotoProofDetails {
  // delivery_id
  DeliveryId delivery_id = 1;
  // user_id
  UserId user_id = 2;
  // consumer_id
  ConsumerId consumer_id = 3;
  // problem_type
  google.protobuf.StringValue problem_type = 4;
  // sub_problem_type
  google.protobuf.StringValue sub_problem_type = 5;
  // item_id
  google.protobuf.Int64Value item_id = 6;
  // photo_purpose
  PhotoPurpose photo_purpose = 7;
  // description
  google.protobuf.StringValue description = 8;
  // photo_proof_source
  PhotoProofSource photo_proof_source = 9;
  // created_at
  google.protobuf.Timestamp created_at = 10;
}

/**
 * Required because protobuf cannot support repeated field directly in a oneOf block
 *
 * cnr_photo_proof_details_with_links_list: List of cnr photo proof details with links
 */
// CnrPhotoProofDetailsWithLinksList
message CnrPhotoProofDetailsWithLinksList {
  // cnr_photo_proof_details_with_links
  repeated CnrPhotoProofDetailsWithLinks cnr_photo_proof_details_with_links = 1;
}

/**
 * cnr_photo_proof_details: Photo image file
 * file_name_with_extension: Filename for the photo including the extension
 */
// CnrPhotoProofDetailsWithLinks
message CnrPhotoProofDetailsWithLinks {
  // cnr_photo_proof_details
  CnrPhotoProofDetails cnr_photo_proof_details = 1;
  // cnr_photo_links
  repeated CnrPhotoLink cnr_photo_links = 2;
}

/**
 * photo_image_file: Photo image file
 * file_name_with_extension: Filename for the photo including the extension
 */
// CnrPhoto
message CnrPhoto {
  // photo_image_file
  bytes photo_image_file = 1;
  // file_name_with_extension
  string file_name_with_extension = 2;
}

/**
 * photo_url: URL to the photo
 * photo_uuid: Photo ID
 * file_name_with_extension: File name with extension
 * additional_metadata: photo metadata, e.g. timestamp or geo-location of the photo
 * photo_origin: Source of the photo, e.g. gallery or live camera
 */
// CnrPhotoLink
message CnrPhotoLink {
  // photo_url
  string photo_url = 1;
  // photo_uuid
  string photo_uuid = 2;
  // file_name_with_extension
  string file_name_with_extension = 3;
  // explicit_content_detection_status
  ExplicitContentDetectionStatus explicit_content_detection_status = 4;
  // expired
  bool expired = 5;
  // additional_metadata
  map<string, string> additional_metadata = 6;
  // photo_origin
  PhotoOrigin photo_origin = 7;
}

// ExplicitContentDetectionStatus
enum ExplicitContentDetectionStatus {
  // IN_PROGRESS
  // buf:lint:ignore ENUM_VALUE_PREFIX
  // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
  IN_PROGRESS = 0;
  // EXPLICIT_CONTENT_NOT_DETECTED
  // buf:lint:ignore ENUM_VALUE_PREFIX
  EXPLICIT_CONTENT_NOT_DETECTED = 1;
  // EXPLICIT_CONTENT_DETECTED
  // buf:lint:ignore ENUM_VALUE_PREFIX
  EXPLICIT_CONTENT_DETECTED = 2;
  // FAILED
  // buf:lint:ignore ENUM_VALUE_PREFIX
  FAILED = 3;
}

// Error codes for cnr photo proof
enum CnrPhotoProofErrorCode {
  // Unspecified error
  // buf:lint:ignore ENUM_VALUE_PREFIX
  // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
  CNR_PHOTO_PROOF_ERROR_CODE_UNSPECIFIED = 0;
  // Invalid parameter
  // buf:lint:ignore ENUM_VALUE_PREFIX
  CNR_PHOTO_PROOF_ERROR_CODE_INVALID_PARAMETER = 1;
}

// Error details object for cnr photo proof
message CnrPhotoProofError {
  // error_code
  CnrPhotoProofErrorCode error_code = 1; // Error code
  // error_message
  string error_message = 2; // Error message
}

// PhotoProofSource
enum PhotoProofSource {
  // SELF_HELP
  // buf:lint:ignore ENUM_VALUE_PREFIX
  // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
  SELF_HELP = 0;
  // CHAT_BOT
  // buf:lint:ignore ENUM_VALUE_PREFIX
  CHAT_BOT = 1;
  // SELF_HELP_APPEAL
  // buf:lint:ignore ENUM_VALUE_PREFIX
  SELF_HELP_APPEAL = 2;
}

// PhotoOrigin
enum PhotoOrigin {
  // UNKNOWN
  // buf:lint:ignore ENUM_VALUE_PREFIX
  // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
  UNKNOWN = 0;
  // GALLERY
  // buf:lint:ignore ENUM_VALUE_PREFIX
  GALLERY = 1;
  // LIVE_CAMERA
  // buf:lint:ignore ENUM_VALUE_PREFIX
  LIVE_CAMERA = 2;
}
