syntax = "proto3";
// buf:lint:ignore PACKAGE_SAME_DIRECTORY
// buf:lint:ignore PACKAGE_VERSION_SUFFIX
// buf:lint:ignore DIRECTORY_SAME_PACKAGE
package risk;

option java_generic_services = true;
option java_multiple_files = false;
option java_outer_classname = "SUMAServiceProtos";
option java_package = "com.doordash.risk.proto";

// Api to expose SUMA related data
service SUMAService {
  // Get SUMA connected users count (suma etl + IDG strong connected)
  // buf:lint:ignore RPC_REQUEST_STANDARD_NAME
  // buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc GetConnectedUsersCount(UserIdRequest) returns (ConnectedUsersCountResponse);

  // Get SUMA connected userId's (suma etl + IDG strong connected)
  // buf:lint:ignore RPC_REQUEST_STANDARD_NAME
  // buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc GetConnectedUserIds(UserIdRequest) returns (ConnectedUserIdsResponse);

  // Get SUMA connected user (suma etl + IDG strong connected), along with connection type
  // buf:lint:ignore RPC_REQUEST_STANDARD_NAME
  // buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc GetConnectedUsersWithConnectionType(UserIdRequest) returns (ConnectedUsersWithConnectionTypeResponse);

  // Get humanId that the userId cluster belongs to
  // buf:lint:ignore RPC_REQUEST_STANDARD_NAME
  // buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc GetHumanID(UserIdRequest) returns (HumanIdResponse);

  // Find out if two users are suma connected (suma etl + IDG strong connected)
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc AreUsersSUMAConnected(AreUsersSUMAConnectedRequest) returns (AreUsersSUMAConnectedResponse);
}

// UserIdRequest
message UserIdRequest {
  // user_id
  string user_id = 1;
}

// AreUsersSUMAConnectedRequest
message AreUsersSUMAConnectedRequest {
  // user_id_1
  string user_id_1 = 1;
  // user_id_2
  string user_id_2 = 2;
}

// ConnectedUsersCountResponse
message ConnectedUsersCountResponse {
  // count
  int32 count = 1;
}

// HumanIdResponse
message HumanIdResponse {
  // human_id
  string human_id = 1;
}

// AreUsersSUMAConnectedResponse
message AreUsersSUMAConnectedResponse {
  // connected
  bool connected = 1;
}

// ConnectedUserIdsResponse
message ConnectedUserIdsResponse {
  // user_id
  repeated string user_id = 1;
}

// ConnectedUsersWithConnectionTypeResponse
message ConnectedUsersWithConnectionTypeResponse {
  // connectedUser
  // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
  repeated ConnectedUser connectedUser = 1;
}

// ConnectedUser
message ConnectedUser {
  // ConnectionType
  enum ConnectionType {
    // UNKNOWN
    // buf:lint:ignore ENUM_VALUE_PREFIX
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    UNKNOWN = 0;
    // ADDRESS
    // buf:lint:ignore ENUM_VALUE_PREFIX
    ADDRESS = 1;
    // CARD
    // buf:lint:ignore ENUM_VALUE_PREFIX
    CARD = 2;
    // DEVICE
    // buf:lint:ignore ENUM_VALUE_PREFIX
    DEVICE = 3;
    // EMAIL
    // buf:lint:ignore ENUM_VALUE_PREFIX
    EMAIL = 4;
    // NAME
    // buf:lint:ignore ENUM_VALUE_PREFIX
    NAME = 5;
    // INDIRECT
    // buf:lint:ignore ENUM_VALUE_PREFIX
    INDIRECT = 6;
    // VERIFIED_PHONE
    // buf:lint:ignore ENUM_VALUE_PREFIX
    VERIFIED_PHONE = 7;
    // UNVERIFIED_PHONE
    // buf:lint:ignore ENUM_VALUE_PREFIX
    UNVERIFIED_PHONE = 8;
  }

  // user_id
  string user_id = 1;
  // connectionType
  // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
  repeated ConnectionType connectionType = 2;
}
