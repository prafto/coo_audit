syntax = "proto3";
// buf:lint:ignore PACKAGE_SAME_DIRECTORY
// buf:lint:ignore PACKAGE_VERSION_SUFFIX
package risk.checkpoints.common;

import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "risk-common/challenges/redirect_secure_payment.proto";
import "risk/account.proto";
import "risk/common.proto";
import "risk/dasher.proto";
import "risk/fulfillment.proto";
import "risk/store/store.proto";

option java_generic_services = true;
option java_multiple_files = false;
option java_outer_classname = "ActionProtos";
option java_package = "com.doordash.risk.proto.checkpoints.common";

// Proto representation of an action requested by a checkpoint.
message Action {
  // Name of the original action (typically the class name).
  // This is for debugging only; clients should not rely on this field.
  string name = 1;

  // Details of the original action (typically the `toString()` of the object).
  // This is for debugging only; clients should not rely on this field.
  string details = 2;

  // Weight of the original action.
  // This is for debugging only; clients should not rely on this field.
  double weight = 3;

  // reason for triggering this action
  string reason = 100;

  // Optional Challenge ID for specific actions.
  // This ID is sent to clients to display the correct fraud challenge to the end user.
  string challenge_id = 101;

  // Representation of the original action into a generic action clients know
  // how to work with. This is the main field clients should care about.
  oneof kind {
    // block
    Block block = 4;
    // request_mfa
    RequestMfa request_mfa = 5;
    // request_proof_of_payment
    RequestProofOfPayment request_proof_of_payment = 6;
    // ban_consumer
    BanConsumer ban_consumer = 7;
    // ban_dasher
    BanDasher ban_dasher = 8;
    // contest_dispute
    ContestDispute contest_dispute = 9;
    // request_card_reentry
    RequestCardReentry request_card_reentry = 10;
    // reset_password
    ResetPassword reset_password = 11;
    // invalidate_referral_bonus
    InvalidateReferralBonus invalidate_referral_bonus = 12;
    // request_three_d_secure
    Request3DS request_three_d_secure = 13;
    // block_apology_credits
    BlockApologyCredits block_apology_credits = 14;
    // update_identity_verification_status
    UpdateIdentityVerificationStatus update_identity_verification_status = 15;
    // credits_only
    CreditsOnly credits_only = 16;
    // reassign_delivery
    ReassignDelivery reassign_delivery = 17;
    // ban_dasher_block_payout
    BanDasherBlockPayout ban_dasher_block_payout = 18;
    // holding_tank
    HoldingTank holding_tank = 19;
    // mark_phone_number_verified
    MarkPhoneNumberVerified mark_phone_number_verified = 20;
    // escalate_to_chat
    EscalateToChat escalate_to_chat = 21;
    // banCancellationDispute
    // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
    BanCancellationDispute banCancellationDispute = 22;
    // allow
    Allow allow = 23;
    // request_bank_verification
    RequestBankVerification request_bank_verification = 24;
    // request_phone_verification
    RequestPhoneVerification request_phone_verification = 25;
    // post_to_slack
    PostToSlack post_to_slack = 26;
    // signature_required
    SignatureRequired signature_required = 27;
    // refund_only
    RefundOnly refund_only = 28;
    // review_queue
    ReviewQueue review_queue = 29;
    // pin_code_required
    PinCodeRequired pin_code_required = 30;
    // fraud_global_holdout
    FraudGlobalHoldout fraud_global_holdout = 31;
    // request_idv
    RequestIdv request_idv = 32;
    // reset_account
    ResetAccount reset_account = 33;
    // review_queue_is_full
    ReviewQueueIsFull review_queue_is_full = 34;
    // request_kba
    RequestKba request_kba = 35;
    // block_user_bypass_login_or_mfa
    BlockUserBypassLoginOrMFA block_user_bypass_login_or_mfa = 36;
    // update_app
    UpdateApp update_app = 37;
    // block_payout
    BlockPayout block_payout = 38;
    // external_approval
    ExternalApproval external_approval = 39;
    // payout_delay
    PayoutDelay payout_delay = 40;
    // block_anomalous_payout
    BlockAnomalousPayout block_anomalous_payout = 41;
    // request_photo_proof
    RequestPhotoProof request_photo_proof = 42;
    // request_cvc
    RequestCvc request_cvc = 43;
    // cnr_email_warning
    CnrEmailWarning cnr_email_warning = 44;
    // cnr_app_warning
    CnrAppWarning cnr_app_warning = 45;
    // block_cross_drsc_payout
    BlockCrossDRSCPayout block_cross_drsc_payout = 46;
    // optional_photo_proof
    OptionalPhotoProof optional_photo_proof = 47;
    // trusted_checkout
    TrustedCheckout trusted_checkout = 48;
    // block_mx_payout
    BlockMxPayout block_mx_payout = 49;
    // top_up_adjustment
    TopUpAdjustment top_up_adjustment = 50;
    // promo_eligibility_action
    PromoEligibilityAction promo_eligibility_action = 51;
    // enqueue_for_review
    EnqueueForReview enqueue_for_review = 52;
    // request_tin_info
    RequestTinInfo request_tin_info = 53;
    // ban_global_holdout_dasher
    BanGlobalHoldoutDasher ban_global_holdout_dasher = 54;
    // warn_dasher
    WarnDasher warn_dasher = 55;
    // flag_entity
    FlagEntity flag_entity = 56;
    // request_persona
    RequestPersona request_persona = 57;
    // pin_code_optional
    PinCodeOptional pin_code_optional = 59;
    // revoke_access
    RevokeAccess revoke_access = 61;
    // regain_access
    RegainAccess regain_access = 62;
    // A digital wallet transaction requires a new cryptogram. This may necessitate routing it to a different
    // provider.
    RequiresNewCryptogram requires_new_cryptogram = 63;
    // Redirect to Secure Payment
    RedirectSecurePayment redirect_secure_payment = 64;
    // Sum challenge to demo webview fallback for Project Apparate
    SumChallenge sum_challenge = 65;
    // pin_code_optional_default_opt_in
    PinCodeOptionalDefaultOptIn pin_code_optional_default_opt_in = 66;
  }

  // An action that blocks the user operation.
  message Block {
    // The code to look up the localized message from a messages resource bundle.
    string message_code = 1;

    // The arg values to be substituted into the message template.
    google.protobuf.Struct args = 2;

    // The final localized, user-visible error message. This might be empty until
    // the localization from `(message_code, args)` happens (in risk-gateway).
    string error_message = 3;
  }

  // An action that allows the user operation.
  message Allow {
    // The code to look up the localized message from a messages resource bundle.
    string message_code = 1;

    // The arg values to be substituted into the message template.
    google.protobuf.Struct args = 2;

    // The final localized, user-visible error message. This might be empty until
    // the localization from `(message_code, args)` happens (in risk-gateway).
    string error_message = 3;
  }

  // An action that blocks apology credits.
  message BlockApologyCredits {
    // The code to look up the localized message from a messages resource bundle.
    string message_code = 1;

    // The arg values to be substituted into the message template.
    google.protobuf.Struct args = 2;

    // The final localized, user-visible error message. This might be empty until
    // the localization from `(message_code, args)` happens (in risk-gateway).
    string error_message = 3;
  }

  // Action that bans user.
  // This is a very strict action so there must be sufficient evidence to use this
  message BanConsumer {
    // id
    UserId id = 1;
    // reason
    string reason = 2;
  }

  // Action that bans dasher.
  // This is a very strict action so there must be sufficient evidence to use this
  message BanDasher {
    // id
    UserId id = 1;
    // reason
    string reason = 2;
    // deactivation_reason_id
    DasherDeactivationReasonId deactivation_reason_id = 3;
  }

  // Action that bans dasher bucketed in global holdout.
  // This is a very strict action so there must be sufficient evidence to use this
  message BanGlobalHoldoutDasher {
    // id
    UserId id = 1;
    // reason
    string reason = 2;
    // deactivation_reason_id
    DasherDeactivationReasonId deactivation_reason_id = 3;
  }

  // Action that bans the dasher and blocks payout.
  // This is a very strict action so there must be sufficient evidence to use this
  message BanDasherBlockPayout {
    // id
    UserId id = 1;
    // reason
    string reason = 2;
    // deactivation_reason_id
    DasherDeactivationReasonId deactivation_reason_id = 3;
  }

  // Action that flag an entity
  message FlagEntity {
    // confirm_fraud_reason
    string confirm_fraud_reason = 1;
  }

  // Action that blocks or defers dasher payout.
  message BlockPayout {
    // The code to look up the localized message from a messages resource bundle.
    string message_code = 1;

    // Timestamp at which the "pending for review" state began (could be already in the past)
    google.protobuf.Timestamp enqueued_timestamp = 2;

    // Timestamp at which the "pending for review" state will expire
    google.protobuf.Timestamp expiry_timestamp = 3;

    // INTERNAL ONLY Reason that the user's action is subject for review
    string internal_reason = 4;

    // The queue name the case is sent to
    string queue_name = 5;

    // The arg values to be substituted into the message template.
    google.protobuf.Struct args = 6;
  }

  // Action that blocks or defers dasher anomalous payout i.e. DRSC/Cancellation.
  message BlockAnomalousPayout {
    // The code to look up the localized message from a messages resource bundle.
    string message_code = 1;

    // Timestamp at which the "pending for review" state began (could be already in the past)
    google.protobuf.Timestamp enqueued_timestamp = 2;

    // Timestamp at which the "pending for review" state will expire
    google.protobuf.Timestamp expiry_timestamp = 3;

    // INTERNAL ONLY Reason that the user's action is subject for review
    string internal_reason = 4;

    // The queue name the case is sent to
    string queue_name = 5;
  }

  // Action to mark the delivery as top-up and store the dat adjustment percentage
  message TopUpAdjustment {
    // The code to look up the localized message from a messages resource bundle.
    string message_code = 1;

    // The percentage
    double dat_adjustment_percentage = 2;
  }

  // WarnDasher
  message WarnDasher {
    // The code to look up the localized message from a messages resource bundle.
    string message_code = 1;

    // Warning notification name
    string warning_notification_name = 3;

    // Warning type id
    int32 warning_type_id = 4;

    reserved 2;
  }

  // Action that blocks or defers payout for multiple dashers due to cross DRSC violation check
  // This is needed because dashers who trigger the action is not the dashers we want to action on
  // i.e. cross-dasher DRSC violation check works in a way that if a delivery can be picked up by a Dx, the other Dxs
  // who has reported DRSC before for the same delivery is subject to fraud
  message BlockCrossDRSCPayout {
    // Timestamp at which the "pending for review" state began (could be already in the past)
    google.protobuf.Timestamp enqueued_timestamp = 1;

    // Timestamp at which the "pending for review" state will expire
    google.protobuf.Timestamp expiry_timestamp = 2;

    // dasherIdsToJobIds
    // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
    map<string, string> dasherIdsToJobIds = 3;

    // INTERNAL ONLY Reason that the user's action is subject for review
    string internal_reason = 4;

    // The queue name the case is sent to
    string queue_name = 5;
  }

  // An action that blocks apology credits.
  message CreditsOnly {
    // The code to look up the localized message from a messages resource bundle.
    string message_code = 1;

    // The arg values to be substituted into the message template.
    google.protobuf.Struct args = 2;

    // The final localized, user-visible error message. This might be empty until
    // the localization from `(message_code, args)` happens (in risk-gateway).
    string error_message = 3;
  }

  // An action that blocks credit as a cancellation payout option.
  message RefundOnly {
    // The code to look up the localized message from a messages resource bundle.
    string message_code = 1;

    // The arg values to be substituted into the message template.
    google.protobuf.Struct args = 2;

    // The final localized, user-visible error message. This might be empty until
    // the localization from `(message_code, args)` happens (in risk-gateway).
    string error_message = 3;
  }

  // An action that suspends a user's action and puts them into a queue for review
  message HoldingTank {
    // The code to look up the localized message from a messages resource bundle.
    string message_code = 1;

    // Timestamp at which the "pending for review" state began (could be already in the past)
    google.protobuf.Timestamp enqueued_timestamp = 2;

    // Timestamp at which the "pending for review" state will expire
    google.protobuf.Timestamp expiry_timestamp = 3;

    // INTERNAL ONLY Reason that the user's action is subject for review
    string internal_reason = 4;

    // The queue name the case is sent to
    string queue_name = 5;

    // The arg values to be substituted into the message template.
    google.protobuf.Struct args = 6;
  }

  // An action that puts a user into a queue for review
  message ReviewQueue {
    // The code to look up the localized message from a messages resource bundle.
    string message_code = 1;

    // Timestamp at which the "pending for review" state began (could be already in the past)
    google.protobuf.Timestamp enqueued_timestamp = 2;

    // Timestamp at which the "pending for review" state will expire
    google.protobuf.Timestamp expiry_timestamp = 3;

    // INTERNAL ONLY Reason that the user's action is subject for review
    string internal_reason = 4;
  }

  // An action that requests the user to complete MFA verification before
  // attempting the original operation again.
  message RequestMfa {
    // Channel
    enum Channel {
      // SMS
      // buf:lint:ignore ENUM_VALUE_PREFIX
      // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
      SMS = 0;
      // EMAIL
      // buf:lint:ignore ENUM_VALUE_PREFIX
      EMAIL = 1;
    }

    // The allowed channels that the MFA verification may be sent on.
    repeated Channel allowed_channels = 1;
  }

  // An action that requests the user to provide proof of possession of the
  // payment method.
  message RequestProofOfPayment {
    // Challenge
    enum Challenge {
      // SCAN_CARD
      // buf:lint:ignore ENUM_VALUE_PREFIX
      // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
      SCAN_CARD = 0;
      // SECOND_CARD
      // buf:lint:ignore ENUM_VALUE_PREFIX
      SECOND_CARD = 1;
      // SCAN_CARD_DYNETI
      // buf:lint:ignore ENUM_VALUE_PREFIX
      SCAN_CARD_DYNETI = 2;
      // TAP_TO_VERIFY
      // buf:lint:ignore ENUM_VALUE_PREFIX
      TAP_TO_VERIFY = 3;
    }

    // The allowed challenges for completing the proof of possession.
    repeated Challenge allowed_challenges = 1;
  }

  // Action to contest dispute
  message ContestDispute {}

  // Action to request card reentry
  message RequestCardReentry {
    // consumerId
    // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
    ConsumerId consumerId = 1;
    // cardDetails
    // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
    CardDetails cardDetails = 2;

    // CardDetails
    message CardDetails {
      // id
      string id = 1;
      // type
      string type = 2;
      // last4
      string last4 = 3;
      // exp_month
      string exp_month = 4;
      // exp_year
      string exp_year = 5;
    }
  }

  // Action to request 3D Secure
  message Request3DS {
    // sticky
    bool sticky = 1;
  }

  // Action that sends reset password email.
  message ResetPassword {
    // id
    UserId id = 1;
    // reason
    string reason = 2;
  }

  // Action that invalidate the referral bonus for the associated referrer and referee.
  message InvalidateReferralBonus {
    // referrer_id
    UserId referrer_id = 1;
    // referee_id
    UserId referee_id = 2;
    // reason
    string reason = 3;
  }

  // Action that reassigns the delivery from the current order
  message ReassignDelivery {
    // delivery_id
    DeliveryId delivery_id = 1;
    // reason
    string reason = 2;
  }

  // Action that updates user identity verification status.
  message UpdateIdentityVerificationStatus {
    // The status of Identity Verification
    Status idv_status = 1;

    // The arg values to be substituted into the message template.
    google.protobuf.Timestamp verified_at = 2;

    // Inquiry id
    string inquiry_id = 3;

    // Template id
    string template_id = 4;

    // Status
    enum Status {
      // UNSPECIFIED
      // buf:lint:ignore ENUM_VALUE_PREFIX
      // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
      UNSPECIFIED = 0;
      // COMPLETED
      // buf:lint:ignore ENUM_VALUE_PREFIX
      COMPLETED = 1;
      // FAILED
      // buf:lint:ignore ENUM_VALUE_PREFIX
      FAILED = 2;
      // CREATED
      // buf:lint:ignore ENUM_VALUE_PREFIX
      CREATED = 3;
      // INTERNAL_ERROR
      // buf:lint:ignore ENUM_VALUE_PREFIX
      INTERNAL_ERROR = 4;
      // STARTED
      // buf:lint:ignore ENUM_VALUE_PREFIX
      STARTED = 5;
      // EXPIRED
      // buf:lint:ignore ENUM_VALUE_PREFIX
      EXPIRED = 6;
      // APPROVED
      // buf:lint:ignore ENUM_VALUE_PREFIX
      APPROVED = 7;
      // DECLINED
      // buf:lint:ignore ENUM_VALUE_PREFIX
      DECLINED = 8;
      // NEEDS_REVIEW
      // buf:lint:ignore ENUM_VALUE_PREFIX
      NEEDS_REVIEW = 9;
      // PENDING
      // buf:lint:ignore ENUM_VALUE_PREFIX
      PENDING = 10;
    }
  }

  //Action to mark phone number verified
  message MarkPhoneNumberVerified {}

  // An action that escalate the issue from self help workflow to agent chat
  message EscalateToChat {}

  // An action to reject agent use order problem type: cancellation dispute
  message BanCancellationDispute {}

  // An action to reject new cases add into review queue
  message ReviewQueueIsFull {}

  // RequestBankVerification
  message RequestBankVerification {}

  // An action to request user to verify the phone number associated with the account.
  message RequestPhoneVerification {}

  // PostToSlack
  message PostToSlack {
    // Channel
    enum Channel {
      // CARJACKING
      // buf:lint:ignore ENUM_VALUE_PREFIX
      // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
      CARJACKING = 0;
    }
    // channel
    Channel channel = 1;

    // Extra content in the slack message
    string extra_message_content = 2;
  }

  // SignatureRequired
  message SignatureRequired {}

  // PinCodeRequired
  message PinCodeRequired {}

  // PinCodeOptional
  message PinCodeOptional {}

  // PinCodeOptional - Default opt in
  message PinCodeOptionalDefaultOptIn {}

  // FraudGlobalHoldout
  message FraudGlobalHoldout {
    // Sticky fraud label
    bool sticky = 1;
  }

  // RequestIdv
  message RequestIdv {
    // status_code
    DasherDeactivationReasonId status_code = 1;
    // internal_reason
    string internal_reason = 2;
  }

  // UpdateApp
  message UpdateApp {
    // reason
    string reason = 1;
  }

  // Action to reset account.
  message ResetAccount {
    // reason
    string reason = 1;
  }

  // An action that requests the user to complete KBA before attempting the original operation again
  // ex. EMAIL -> User must input the correct email address on their account before proceeding
  message RequestKba {
    // KnowledgeType
    enum KnowledgeType {
      // EMAIL
      // buf:lint:ignore ENUM_VALUE_PREFIX
      // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
      EMAIL = 0;
    }

    // knowledge_type
    KnowledgeType knowledge_type = 1;
  }

  // Action to block the user from using magic link or MFA
  message BlockUserBypassLoginOrMFA {}

  // Action to exempt users from all frictions
  message ExternalApproval {
    // reason
    string reason = 1;
  }

  // Action to delay dx weekly payout
  message PayoutDelay {
    // reason
    string reason = 1;
    // message_code
    string message_code = 2;
  }

  // RequestPhotoProof
  message RequestPhotoProof {
    // gallery allowed
    bool gallery_allowed = 1;
  }

  // RequestCvc
  message RequestCvc {}

  // An action to show Cx C&R Warning via Email
  message CnrEmailWarning {}
  // An action to show Cx C&R Warning via App
  message CnrAppWarning {}

  // OptionalPhotoProof
  message OptionalPhotoProof {
    // gallery allowed
    bool gallery_allowed = 1;
  }

  // TrustedCheckout
  message TrustedCheckout {}

  // BlockMxPayout
  message BlockMxPayout {
    // payment_account_id
    int32 payment_account_id = 1;
    // queue_name
    string queue_name = 2;
    // case_details
    map<string, string> case_details = 3;
    // expiry_timestamp
    google.protobuf.Timestamp expiry_timestamp = 4;
  }

  // PromoEligibilityAction
  message PromoEligibilityAction {
    // promo_eligibility
    repeated PromoEligibility promo_eligibility = 1;
  }

  // PromoEligibility
  message PromoEligibility {
    // campaign_id
    string campaign_id = 1;
    // eligibility_blocked
    bool eligibility_blocked = 2;
  }

  // EnqueueForReview
  message EnqueueForReview {
    // The code to look up the localized message from a messages resource bundle.
    string message_code = 1;

    // The queue where we want to enqueue
    string queue_name = 2;

    // The arg values to be substituted into the message template.
    google.protobuf.Struct args = 3;
  }

  // RequestTinInfo
  message RequestTinInfo {
    // DasherDeactivationReasonId
    DasherDeactivationReasonId status_code = 1;
    // internal_reason
    string internal_reason = 2;
  }

  // RequestPersona
  message RequestPersona {
    // entity
    Entity entity = 1;
    // transaction_type_id
    string transaction_type_id = 2;
    // reference_id
    string reference_id = 3;
    // store
    store.Store store = 4;
    // ip
    string ip = 5;
    // associate_people
    repeated User associate_people = 6;
  }

  // Revoke Access action
  message RevokeAccess {
    // The domain for which we want to revoke access
    string domain = 1;

    // The arg values
    google.protobuf.Struct args = 2;
  }

  // Regain Access action
  message RegainAccess {
    // The domain for which we want to regain access
    string domain = 1;

    // The arg values
    google.protobuf.Struct args = 2;
  }

  // A digital wallet transaction requires a new cryptogram. This may necessitate routing it to a
  // different provider.
  message RequiresNewCryptogram {}

  // TODO: fix these fields before hitting prod!
  // Action for Redirecting a Block to a secure Payment Method
  message RedirectSecurePayment {
    // Allowed secure payment method
    repeated risk_common.challenges.SecurePaymentMethod allowed_secure_payment = 2;

    // Boolean for whether this will be reviewed
    bool will_review = 3;

    // INTERNAL ONLY Reason that the user is subject for review
    string internal_reason = 4;

    // Timestamp at which the "pending for review" state began (could be in past)
    google.protobuf.Timestamp enqueued_timestamp = 5;

    // Timestamp at which the "pending for review" state will expire
    google.protobuf.Timestamp expiry_timestamp = 6;
  }

  // Sum challenge to demo webview fallback for Project Apparate
  message SumChallenge {
    // user id needed to generate the challenge session identifier.
    string user_id = 1;
  }
}
