syntax = "proto3";
// buf:lint:ignore PACKAGE_SAME_DIRECTORY
// buf:lint:ignore PACKAGE_VERSION_SUFFIX
package risk.checkpoints;

import "drive_protobuf/refund_matrix.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "risk/account.proto";
import "risk/checkpoints/common/checkpoint_response.proto";
import "risk/common.proto";
import "risk/context.proto";
import "risk/fulfillment.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_outer_classname = "OrderProblemProtos";
option java_package = "com.doordash.risk.proto.checkpoints";

// OrderProblemService
service OrderProblemService {
  // Evaluate
  // buf:lint:ignore RPC_REQUEST_STANDARD_NAME
  // buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc Evaluate(OrderProblemRequest) returns (common.CheckpointResponse);
  // EvaluateDrive
  // buf:lint:ignore RPC_REQUEST_STANDARD_NAME
  // buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc EvaluateDrive(DriveOrderProblemRequest) returns (common.CheckpointResponse);
  // HasOrderProblemRejection
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc HasOrderProblemRejection(HasOrderProblemRejectionRequest) returns (HasOrderProblemRejectionResponse);

  // GetFraudStatus
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc GetCnrFraudStatus(GetCnrFraudStatusRequest) returns (GetCnrFraudStatusResponse);
}

// OrderProblemRequest
message OrderProblemRequest {
  // risk_context
  RiskContext risk_context = 1;
  // user_id
  UserId user_id = 2;
  // delivery_id
  DeliveryId delivery_id = 3;
  // session_id
  SessionId session_id = 4;
  // request_context
  RequestContext request_context = 5;
  // request_credits
  MonetaryAmount request_credits = 6;
  // request_refunds
  MonetaryAmount request_refunds = 7;
  // delivery_cost_no_tip
  MonetaryAmount delivery_cost_no_tip = 8;
  // order_problem_types
  repeated string order_problem_types = 9;
  // requesting_agent_id
  UserId requesting_agent_id = 10;
  // for holding tank, we need to know which order_resolution this maps to
  string order_resolution_uuid = 11;
  // extra_tracking_props
  map<string, string> extra_tracking_props = 12;
  // item_problems
  repeated ItemProblem item_problems = 13;
  // is_return
  bool is_return = 14;

  // RequestContext
  enum RequestContext {
    // UNKNOWN
    // buf:lint:ignore ENUM_VALUE_PREFIX
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    UNKNOWN = 0;
    // SELF_HELP
    // buf:lint:ignore ENUM_VALUE_PREFIX
    SELF_HELP = 1;
    // SUPPORT_AGENT
    // buf:lint:ignore ENUM_VALUE_PREFIX
    SUPPORT_AGENT = 2;
  }
}

// DriveOrderProblemRequest
message DriveOrderProblemRequest {
  // DriveOrderId - the unique identifier for the Drive order
  google.protobuf.Int64Value drive_order_id = 1;
  // PhoneNumber - the phone number of the user who placed the order
  google.protobuf.StringValue phone_number = 2;
  // Email - the email address of the user who placed the order
  google.protobuf.StringValue email = 3;
  // BusinessId - the business id of the store where the order was placed
  google.protobuf.Int64Value business_id = 4;
  // OrderContext - the context of the order which is being evaluated for refund
  OrderContext order_context = 5;
  // RefundRequestContext - the context of the refund request
  RefundRequestContext refund_request_context = 6;

  // OrderContext
  message OrderContext {
    // OrderedAt - the time at which the order was placed
    google.protobuf.Timestamp ordered_at = 1;
    // QuotedDeliveryTime - the time at which the order was quoted to be delivered
    google.protobuf.Timestamp quoted_delivery_time = 2;
    // CanceledAt - the time at which the order was canceled
    google.protobuf.Timestamp canceled_at = 3;
    // DeliveredAt - the time at which the order was delivered
    google.protobuf.Timestamp delivered_at = 4;
    // DeliveryReceiptUrl - the url of the delivery receipt
    google.protobuf.StringValue delivery_receipt_url = 5;
    // DeliveryId - delivery id of the drive order
    google.protobuf.StringValue delivery_id = 6;
    // IsReturnEligible - whether the order is eligible for return
    google.protobuf.BoolValue is_return_eligible = 7;
    // ReturnDeliveryId - delivery id of the drive order return. This is present only if the order is return eligible.
    google.protobuf.StringValue return_delivery_id = 8;
    // LineOfBusiness - the line of business (LOB) of the order
    google.protobuf.StringValue line_of_business = 9;
  }

  // RefundRequestContext
  message RefundRequestContext {
    // PartyAtFault - the party at fault for the refund request. Examples: Doordash, Merchant
    EntityType party_at_fault = 1;
    // RefundRequestedBy - the entity who requested the refund. Examples: Merchant, Consumer
    EntityType refund_requested_by = 2;
    // RefundRequestReason - the reason code for the refund request
    google.protobuf.StringValue reason_code = 3;
    // RefundRuleID, the chosen matrix rule id in drive refund matrix for this refund, only used for logging
    google.protobuf.StringValue refund_rule_id = 4;
    // RefundToCustomerAmount - the amount to be refunded to the customer, only used for logging
    MonetaryAmount refund_to_customer_amount = 5;
    // RefundToMerchantAmount - the amount to be refunded to the merchant, only used for logging
    MonetaryAmount refund_to_merchant_amount = 6;
    // AgentUserID - the user id of the agent who is processing the refund request
    UserId agent_user_id = 7;
    // MxRefundPeriodDays - # of days after delivery date which Mx is permitted refunds
    google.protobuf.Int64Value mx_refund_period_days = 8;
    // MxRefundWindowEndsAt - the UNIX timestamp at which the Mx refund window ends
    google.protobuf.Timestamp mx_refund_window_ends_at = 9;
    // CxRefundWindowEndsAt - the UNIX timestamp at which the Cx refund window ends
    google.protobuf.Timestamp cx_refund_window_ends_at = 10;
    // Source - the source of the refund request
    google.protobuf.StringValue source = 11;
    // ReasonCommentsCode - the reason comment code for the refund request
    google.protobuf.StringValue reason_comments_code = 12;
    // [DEPRECATED] Retrieve from RefundMatrixService.GetRefundMatrixRowById instead
    com.doordash.drive.api.refund_matrix.v1.ProblemLevel problem_level = 13 [deprecated = true];
  }

  // EntityType
  enum EntityType {
    // UNKNOWN
    // buf:lint:ignore ENUM_VALUE_PREFIX
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    UNKNOWN = 0;
    // DOORDASH
    // buf:lint:ignore ENUM_VALUE_PREFIX
    DOORDASH = 1;
    // MERCHANT
    // buf:lint:ignore ENUM_VALUE_PREFIX
    MERCHANT = 2;
    // CONSUMER
    // buf:lint:ignore ENUM_VALUE_PREFIX
    CONSUMER = 3;
  }
}

// Identifies whether an order problem request has been rejected or not
message HasOrderProblemRejectionRequest {
  // delivery_id
  DeliveryId delivery_id = 1; // Delivery id to check
}

// HasOrderProblemRejectionResponse
message HasOrderProblemRejectionResponse {
  // has_rejection
  bool has_rejection = 1; // True if the delivery has been rejected
  // problem_type
  string problem_type = 2; // If rejected, the problem type that got rejected
  // evaluated_at
  google.protobuf.Timestamp evaluated_at = 3; // The time of evaluation
  // item_problems
  repeated ItemProblem item_problems = 4; // The item problems associated with the rejection
}

// GetCnrFraudStatusRequest
message GetCnrFraudStatusRequest {
  // delivery_id
  DeliveryId delivery_id = 1;
}

// GetCnrFraudStatusResponse
message GetCnrFraudStatusResponse {
  // Order problem evaluations
  repeated OrderProblemEvaluation order_problem_evaluations = 1;
  // TODO -- Add RQ results for C&R & FPRQ
}

// OrderProblemEvaluation
message OrderProblemEvaluation {
  // has_rejection
  string final_action = 1;
  // evaluated_at
  google.protobuf.Timestamp evaluated_at = 2;
}

// ItemProblem
message ItemProblem {
  // problem_name
  string problem_name = 1;
  // description
  string description = 2;
  // item_extra_id
  string item_extra_id = 3;
  // order_item_id
  string order_item_id = 4;
  // quantity
  int32 quantity = 5;
}
