syntax = "proto3";
// buf:lint:ignore PACKAGE_SAME_DIRECTORY
// buf:lint:ignore PACKAGE_VERSION_SUFFIX
package risk.checkpoints;

import "risk/account.proto";
import "risk/cart.proto";
import "risk/checkpoints/common/checkpoint_response.proto";
import "risk/common.proto";
import "risk/context.proto";
import "risk/internal/sift/sift_event_response.proto";
import "risk/payment.proto";
import "risk/services/services_common.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_outer_classname = "CheckoutInProtos";
option java_package = "com.doordash.risk.proto.checkpoints";

// CheckoutInService
service CheckoutInService {
  // Evaluate
  // buf:lint:ignore RPC_REQUEST_STANDARD_NAME
  // buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc Evaluate(CheckoutInRequest) returns (common.CheckpointResponse);
}

// CheckoutInRequest
message CheckoutInRequest {
  // request_id
  RequestId request_id = 1;
  // risk_context
  RiskContext risk_context = 2;
  // session_id
  SessionId session_id = 3;
  // user_id
  UserId user_id = 4;
  // cart
  Cart cart = 5;
  // order
  Order order = 11;

  // cart_payment_intents
  repeated CartPaymentIntent cart_payment_intents = 6;
  // attempt_number
  int32 attempt_number = 7;

  // TODO(jack): remove these two fields.
  bool is_shadow = 8;
  // sift_score
  int32 sift_score = 9;

  // Populated in CheckoutInExternalService (in risk-gateway), temporarily for migration out of
  // DSJ. Eventually, we'll want to compute the sift score in CheckoutInService (in risk-engine)
  // so the Sift call can be parallelized with the checkpoint execution.
  risk.internal.sift.SiftEventResponseProto sift_event_response = 10;

  // Json serialized string of FinalizeOrderQuoteResponseV2
  string order_quote_response = 12;
  // challenge_metadata
  ChallengeMetadata challenge_metadata = 13;

  // Used for orders in which the primary user_id doesn't match the user_id used for payment processing
  // Currently used for storefront orders that are using a linked DD payment method
  // user_id contains the DD user_id & creator_user_id contains the SF user_id
  UserId creator_user_id = 14;
  // Unique Radar session Id tied to the checkout session in Stripe's ecosystem. This is initially generated
  // by the frontend client.
  string stripe_radar_session_id = 15;
}

// ChallengeMetadata
message ChallengeMetadata {
  // is_cvc_entered
  bool is_cvc_entered = 1;
}
