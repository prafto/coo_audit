syntax = "proto3";
// buf:lint:ignore PACKAGE_SAME_DIRECTORY
// buf:lint:ignore PACKAGE_VERSION_SUFFIX
package risk.checkpoints;

import "risk/account.proto";
import "risk/checkpoints/common/checkpoint_response.proto";
import "risk/checkpoints/order_problem.proto";
import "risk/context.proto";
import "risk/fulfillment.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_outer_classname = "CnrPhotoProofProtos";
option java_package = "com.doordash.risk.proto.checkpoints";

// CnrPhotoProofService
service CnrPhotoProofService {
  // Evaluate
  // buf:lint:ignore RPC_REQUEST_STANDARD_NAME
  // buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc Evaluate(CnrPhotoProofRequest) returns (common.CheckpointResponse);

  /**
   * In order to evaluate all PFQ/M&I defect types at once use BatchEvaluate.
   * BatchEvaluate returns Photo Proof requirements for each provided problem type.
   * High level example:
   * request:
   * problem_types = [poorly_packaged_or_handled, temperature_issue, wasnt_tasty]
   * response:
   * poorly_packaged_or_handled : RequestPhotoProof
   * temperature_issue : OptionalPhotoProof
   * wasnt_tasty : OptionalPhotoProof
   */
  // BatchEvaluate
  // buf:lint:ignore RPC_REQUEST_STANDARD_NAME
  // buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc BatchEvaluate(CnrPhotoProofRequest) returns (BatchCheckpointResponse);
}

/**
 * Determines whether cnr photo proof is required on the current CNR request
 *
 * risk_context: Details on the request, including user id
 * consumerId: consumer id
 * delivery_id: delivery id
 * workflow_id: Workflow the CNR request originated from. In non-workflow driven flows, this should be empty
 * problem_types: List of problem types for the cnr request
 * item_problems: List of sub-problems for each item
 */
// CnrPhotoProofRequest
message CnrPhotoProofRequest {
  // risk_context
  RiskContext risk_context = 1;
  // consumerId
  // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
  ConsumerId consumerId = 2;
  // delivery_id
  DeliveryId delivery_id = 3;
  // workflowId
  // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
  int32 workflowId = 4;
  // problem_types
  repeated string problem_types = 5;
  // item_problems
  repeated ItemProblem item_problems = 6;
}

// BatchCheckpointResponse
message BatchCheckpointResponse {
  // problemTypeCheckpointResponse
  // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
  repeated ProblemTypeCheckpointResponse problemTypeCheckpointResponse = 1;
}

// ProblemTypeCheckpointResponse
message ProblemTypeCheckpointResponse {
  // problem_type
  string problem_type = 1;
  // response
  common.CheckpointResponse response = 2;
}
