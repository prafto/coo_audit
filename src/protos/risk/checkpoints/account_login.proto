syntax = "proto3";
// buf:lint:ignore PACKAGE_SAME_DIRECTORY
// buf:lint:ignore PACKAGE_VERSION_SUFFIX
package risk.checkpoints;

import "risk/account.proto";
import "risk/checkpoints/common/checkpoint_response.proto";
import "risk/common.proto";
import "risk/context.proto";
import "risk/services/cx_service.proto";
import "risk/services/services_common.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_outer_classname = "AccountLoginProtos";
option java_package = "com.doordash.risk.proto.checkpoints";

// AccountLoginService
service AccountLoginService {
  // Evaluate
  // buf:lint:ignore RPC_REQUEST_STANDARD_NAME
  // buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc Evaluate(AccountLoginRequest) returns (common.CheckpointResponse);
}

// AccountLoginExternalService
service AccountLoginExternalService {
  // Evaluate
  // buf:lint:ignore RPC_REQUEST_STANDARD_NAME
  // buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc Evaluate(AccountLoginRequest) returns (AccountLoginExternalResponse);
}

// AccountLoginRequest
message AccountLoginRequest {
  // request_id
  RequestId request_id = 1;
  // caller
  CallerDetails caller = 2;
  // risk_context
  RiskContext risk_context = 3; // RiskSession => RiskContext by caller
  // timestamp
  Timestamp timestamp = 4;
  // user
  User user = 5;
  // LoginEvent => login_success, login_type, social_sign_on (DSJ Version: multiple event types as list)
  // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
  LoginEvent loginEventData = 6;
  // client_id
  string client_id = 7;
}

// AccountLoginExternalResponse
message AccountLoginExternalResponse {
  // Human-readable message about the status of the response.
  // Only intended for logging and not consumption by end-users.
  string debugging_message = 1;

  // Action requested by the risk check. An unset value means the
  // login is okay from risk's perspective.
  oneof action {
    // block_by_ip
    BlockByIp block_by_ip = 2;
  }
}

// Block the login because of risk based on the IP address (e.g., the number of
// of failed logins at that IP).
message BlockByIp {
  // IpBlockType
  enum IpBlockType {
    // IP
    // buf:lint:ignore ENUM_VALUE_PREFIX
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    IP = 0; // the ip should be blocked
    // LOGIN
    // buf:lint:ignore ENUM_VALUE_PREFIX
    LOGIN = 1; // only the user login (i.e., email) should be blocked
  }
  // block_types
  repeated IpBlockType block_types = 1;
  // ip_address
  string ip_address = 2;
  // user_email
  string user_email = 3;
}
