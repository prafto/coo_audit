syntax = "proto3";
// buf:lint:ignore PACKAGE_SAME_DIRECTORY
// buf:lint:ignore PACKAGE_VERSION_SUFFIX
package risk.workstation;

import "google/protobuf/any.proto";

option go_package = "workstationpb";
option java_generic_services = true;
option java_multiple_files = true;
option java_outer_classname = "WorkstationCommonProto";
option java_package = "com.doordash.risk.proto.workstation";

// WorkstationRequestContext
message WorkstationRequestContext {
  // user
  WorkstationUser user = 1;
}

// WorkstationUser
message WorkstationUser {
  // user_id
  string user_id = 1;
  // email
  string email = 2;
}

// Meant to be used when the count of results is known upfront. This allows you to display the number of pages
//  beforehand and click a random one to jump to that. Better for smaller datasets
message PagingOptions {
  // offset
  int32 offset = 1;
  // AKA page size
  int32 limit = 2;
}

// Cursor allows for better for larger datasets. refer to https://slack.engineering/evolving-api-pagination-at-slack/
message PagingMarker {
  // marker
  oneof marker {
    // next_cursor
    string next_cursor = 1; // can be thought of as select * from table where column > next_cursor
    // offset
    int32 offset = 2;
  }
}

// AsyncQuery
message AsyncQuery {
  // QueryStatus
  enum QueryStatus {
    // Running
    // buf:lint:ignore ENUM_VALUE_PREFIX
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    // buf:lint:ignore ENUM_VALUE_UPPER_SNAKE_CASE
    Running = 0;
    // Success
    // buf:lint:ignore ENUM_VALUE_PREFIX
    // buf:lint:ignore ENUM_VALUE_UPPER_SNAKE_CASE
    Success = 1;
    // Error
    // buf:lint:ignore ENUM_VALUE_PREFIX
    // buf:lint:ignore ENUM_VALUE_UPPER_SNAKE_CASE
    Error = 2;
  }
  // queryId
  // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
  string queryId = 1;
  // status
  QueryStatus status = 2;
}

// CachedResult
message CachedResult {
  // CacheStatus
  enum CacheStatus {
    // NO_CACHE
    // buf:lint:ignore ENUM_VALUE_PREFIX
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    NO_CACHE = 0;
    // WAITING
    // buf:lint:ignore ENUM_VALUE_PREFIX
    WAITING = 1;
    // DONE
    // buf:lint:ignore ENUM_VALUE_PREFIX
    DONE = 2;
    // ERROR
    // buf:lint:ignore ENUM_VALUE_PREFIX
    ERROR = 99;
  }
  // status
  CacheStatus status = 1;
  // value
  google.protobuf.Any value = 2;
}

// SortDirection
enum SortDirection {
  // SD_ASC
  // buf:lint:ignore ENUM_VALUE_PREFIX
  // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
  SD_ASC = 0;
  // SD_DESC
  // buf:lint:ignore ENUM_VALUE_PREFIX
  SD_DESC = 1;
}
