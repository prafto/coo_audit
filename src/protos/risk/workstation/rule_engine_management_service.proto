syntax = "proto3";
// buf:lint:ignore PACKAGE_SAME_DIRECTORY
// buf:lint:ignore PACKAGE_VERSION_SUFFIX
package risk.workstation;

import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option go_package = "workstationpb";
option java_generic_services = true;
option java_multiple_files = true;
option java_outer_classname = "RuleEngineManagement";
option java_package = "com.doordash.risk.proto.workstation";

// RuleEngineManagementService
service RuleEngineManagementService {
  // ListCheckpoints
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc ListCheckpoints(ListCheckpointsRequest) returns (ListCheckpointsResponse);
  // GetCheckpointMetadata
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc GetCheckpointMetadata(GetCheckpointMetadataRequest) returns (GetCheckpointMetadataResponse);
  // GetCheckpointConfiguration
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc GetCheckpointConfiguration(GetCheckpointConfigurationRequest) returns (GetCheckpointConfigurationResponse);
  // GetFactMeta
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc GetFactMeta(GetFactMetaRequest) returns (GetFactMetaResponse);
  // V2 APIs
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc GetCheckpointConfig(GetCheckpointConfigRequest) returns (GetCheckpointConfigResponse);
  // GetCheckpointConfigs
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc GetCheckpointConfigs(GetCheckpointConfigsRequest) returns (GetCheckpointConfigsResponse);
  // UpdateCheckpointConfig
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc UpdateCheckpointConfig(UpdateCheckpointConfigRequest) returns (UpdateCheckpointConfigResponse);
  // RollbackCheckpointConfig
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc RollbackCheckpointConfig(RollbackCheckpointConfigRequest) returns (RollbackCheckpointConfigResponse);
  // GetCheckpointConfigSchema
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc GetCheckpointConfigSchema(GetCheckpointConfigSchemaRequest) returns (GetCheckpointConfigSchemaResponse);
  // Metadata APIs
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc UpsertFactMetadata(UpsertFactMetadataRequest) returns (UpsertFactMetadataResponse);
  // GetFactMetadata
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc GetFactMetadata(GetFactMetadataRequest) returns (GetFactMetadataResponse);
  // UpsertRuleMetadata
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc UpsertRuleMetadata(UpsertRuleMetadataRequest) returns (UpsertRuleMetadataResponse);
  // GetRuleMetadata
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc GetRuleMetadata(GetRuleMetadataRequest) returns (GetRuleMetadataResponse);
}

// -------------------------------------------------------------------------
// V1 Requests and responses
// -------------------------------------------------------------------------
// ListCheckpointsRequest
message ListCheckpointsRequest {}

// ListCheckpointsResponse
message ListCheckpointsResponse {
  // checkpoints
  repeated Checkpoint checkpoints = 1;
}

// GetCheckpointMetadataRequest
message GetCheckpointMetadataRequest {
  // checkpoint_name
  string checkpoint_name = 1;
}

// GetCheckpointMetadataResponse
message GetCheckpointMetadataResponse {
  // rules
  repeated Rule rules = 1;
  // facts
  repeated Fact facts = 2;
  // dimensions
  repeated string dimensions = 3;
}

// GetCheckpointConfigurationRequest
message GetCheckpointConfigurationRequest {
  // checkpoint_name
  string checkpoint_name = 1;
}

// GetCheckpointConfigurationResponse
message GetCheckpointConfigurationResponse {
  // config
  EngineConfiguration config = 1;
}

// GetFactMetaRequest
message GetFactMetaRequest {
  // checkpoint_name
  string checkpoint_name = 1;
  // fact_id
  string fact_id = 2;
}

// GetFactMetaResponse
message GetFactMetaResponse {
  // fact
  Fact fact = 1;
}

// -------------------------------------------------------------------------------
// Checkpoints, Rules and Facts are the three fundamental elements of rule engine.
// Id is its name in code, human_readable_name is a name for better
// understanding.
// -------------------------------------------------------------------------------

// Checkpoint
message Checkpoint {
  // id
  string id = 1;
  // human_readable_name
  string human_readable_name = 2;
  // description
  string description = 3;
  // EntityType
  enum EntityType {
    // CART
    // buf:lint:ignore ENUM_VALUE_PREFIX
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    CART = 0;
    // CONSUMER
    // buf:lint:ignore ENUM_VALUE_PREFIX
    CONSUMER = 1;
    // DELIVERY
    // buf:lint:ignore ENUM_VALUE_PREFIX
    DELIVERY = 2;
    // DISPUTE
    // buf:lint:ignore ENUM_VALUE_PREFIX
    DISPUTE = 3;
    // STORE
    // buf:lint:ignore ENUM_VALUE_PREFIX
    STORE = 4;
    // DASHER_APPLICANT
    // buf:lint:ignore ENUM_VALUE_PREFIX
    DASHER_APPLICANT = 5;
    // PAYMENT_ACCOUNT
    // buf:lint:ignore ENUM_VALUE_PREFIX
    PAYMENT_ACCOUNT = 6;
    // USER
    // buf:lint:ignore ENUM_VALUE_PREFIX
    USER = 7;
    // DASHER
    // buf:lint:ignore ENUM_VALUE_PREFIX
    DASHER = 8;
    // ORDER
    // buf:lint:ignore ENUM_VALUE_PREFIX
    ORDER = 9;
  }
  // entity_type
  EntityType entity_type = 4;
}

// Fact
message Fact {
  // id
  string id = 1;
  // human_readable_name
  string human_readable_name = 2;
  // description
  string description = 3;
  // dependency_fact_ids
  repeated string dependency_fact_ids = 4;
  // return_type
  string return_type = 5;
  // fallback_value
  google.protobuf.Value fallback_value = 6;
}

// Rule
message Rule {
  // id
  string id = 1;
  // human_readable_name
  string human_readable_name = 2;
  // description
  string description = 3;
  // dependency_fact_ids
  repeated string dependency_fact_ids = 4;
  // Type
  enum Type {
    // ExemptionRule
    // buf:lint:ignore ENUM_VALUE_PREFIX
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    // buf:lint:ignore ENUM_VALUE_UPPER_SNAKE_CASE
    ExemptionRule = 0;
    // LabelingRule
    // buf:lint:ignore ENUM_VALUE_PREFIX
    // buf:lint:ignore ENUM_VALUE_UPPER_SNAKE_CASE
    LabelingRule = 1;
    // ActionRule
    // buf:lint:ignore ENUM_VALUE_PREFIX
    // buf:lint:ignore ENUM_VALUE_UPPER_SNAKE_CASE
    ActionRule = 2;
  }
  // type
  Type type = 5;
  // return_type
  string return_type = 6;
  // fallback_value
  google.protobuf.Value fallback_value = 7;
}

// -------------------------------------------------------------------------
// Configurations
// -------------------------------------------------------------------------
// EngineConfiguration
message EngineConfiguration {
  // kill_switch_on
  bool kill_switch_on = 1;
  // enabled
  Toggle enabled = 2;
  // timeout_millis
  int64 timeout_millis = 3;
  // rules
  map<string, RuleConfiguration> rules = 4;
  // segment
  SegmentConfiguration segment = 5;
  // experiments
  map<string, ExperimentConfiguration> experiments = 6;
  // configExtensions
  // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
  map<string, google.protobuf.Value> configExtensions = 7;
  // iguazu
  IguazuConfiguration iguazu = 8;
}

// RuleConfiguration
message RuleConfiguration {
  // enabled
  Toggle enabled = 1;
  // live_mode
  Toggle live_mode = 2;
  // only_run_in_live_mode
  bool only_run_in_live_mode = 3;
  // output_dv_experiment
  Toggle.DynamicValue output_dv_experiment = 4;
}

// ExperimentConfiguration
message ExperimentConfiguration {
  // buckets
  map<string, double> buckets = 1;
  // overrides
  map<string, string> overrides = 2;
  // seed_override
  google.protobuf.StringValue seed_override = 3;
}

// SegmentConfiguration
message SegmentConfiguration {
  // enabled
  Toggle enabled = 1;
  // emit_input_facts
  Toggle emit_input_facts = 2;
  // emit_builtin_facts
  Toggle emit_builtin_facts = 3;
  // emit_normal_facts
  Toggle emit_normal_facts = 4;
  // persist_dependencies
  bool persist_dependencies = 5;
}

// IguazuConfiguration
message IguazuConfiguration {
  // enabled
  Toggle enabled = 1;
  // enabled_for_facts
  map<string, Toggle> enabled_for_facts = 2;
}

// Toggle
message Toggle {
  // Percent
  message Percent {
    // percent
    double percent = 1;
    // whitelist
    repeated string whitelist = 2;
  }

  // ExperimentBucket
  message ExperimentBucket {
    // experiment
    string experiment = 1;
    // bucket
    string bucket = 2;
  }

  // DynamicValue
  message DynamicValue {
    // dv
    string dv = 1;
    // bucket
    string bucket = 2;
  }
  // value
  oneof value {
    // percent
    Percent percent = 1;
    // experiment
    ExperimentBucket experiment = 2;
    // dynamic_value
    DynamicValue dynamic_value = 3;
  }
}

// -------------------------------------------------------------------------
// V2 Requests and responses
// -------------------------------------------------------------------------

// GetCheckpointConfigRequest
message GetCheckpointConfigRequest {
  // checkpoint_id
  string checkpoint_id = 1;
  // version
  int32 version = 2; // if not set, default to the latest version.
}

// GetCheckpointConfigResponse
message GetCheckpointConfigResponse {
  // config
  CheckpointConfig config = 1;
}

// CheckpointConfigPagination
message CheckpointConfigPagination {
  // limit
  int32 limit = 1;
  // offset
  int32 offset = 2;
}

// GetCheckpointConfigsRequest
message GetCheckpointConfigsRequest {
  // checkpoint_id
  string checkpoint_id = 1;
  // pagination
  CheckpointConfigPagination pagination = 2;
}

// GetCheckpointConfigsResponse
message GetCheckpointConfigsResponse {
  // config
  repeated CheckpointConfig config = 1;
}

// UpdateCheckpointConfigRequest
message UpdateCheckpointConfigRequest {
  // checkpoint_id
  string checkpoint_id = 1;
  // user_id
  string user_id = 2;
  // user_message
  string user_message = 3;
  // config
  string config = 4;
  // base_version
  int32 base_version = 5;
  // diff
  string diff = 6;
}

// UpdateCheckpointConfigResponse
message UpdateCheckpointConfigResponse {
  // config
  CheckpointConfig config = 1;
}

// RollbackCheckpointConfigRequest
message RollbackCheckpointConfigRequest {
  // checkpoint_id
  string checkpoint_id = 1;
  // user_id
  string user_id = 2;
  // user_message
  string user_message = 3;
  // base_version
  int32 base_version = 4;
  // rollback_to_version
  int32 rollback_to_version = 5;
}

// RollbackCheckpointConfigResponse
message RollbackCheckpointConfigResponse {
  // config
  CheckpointConfig config = 1;
}

// GetCheckpointConfigSchemaRequest
message GetCheckpointConfigSchemaRequest {}

// GetCheckpointConfigSchemaResponse
message GetCheckpointConfigSchemaResponse {
  // schema
  string schema = 3; // Json format of nested type reflection of EngineConfig
}

// CheckpointConfig
message CheckpointConfig {
  // checkpoint_id
  string checkpoint_id = 1;
  // version
  int32 version = 2;
  // rollback_version
  int32 rollback_version = 3;
  // config
  string config = 4;
  // user_id
  string user_id = 5;
  // user_message
  string user_message = 6;
  // diff
  string diff = 8;
  // created_at
  google.protobuf.Timestamp created_at = 7;
}

// -------------------------------------------------------------------------
// Metadata
// -------------------------------------------------------------------------

// Facts
message UpsertFactMetadataRequest {
  // checkpoint_id
  string checkpoint_id = 1;
  // fact_id
  string fact_id = 2;
  // human_readable_name
  string human_readable_name = 3;
  // description
  string description = 4;
  // user_id
  string user_id = 5;
}

// UpsertFactMetadataResponse
message UpsertFactMetadataResponse {
  // fact_metadata
  FactMetadata fact_metadata = 1;
}

// GetFactMetadataRequest
message GetFactMetadataRequest {
  // checkpoint_id
  string checkpoint_id = 1;
  // fact_ids
  repeated string fact_ids = 2; // if [], return all facts in the checkpoint
}

// GetFactMetadataResponse
message GetFactMetadataResponse {
  // fact_metadata
  repeated FactMetadata fact_metadata = 1;
}

// FactMetadata
message FactMetadata {
  // checkpoint_id
  string checkpoint_id = 1;
  // fact_id
  string fact_id = 2;
  // human_readable_name
  string human_readable_name = 3;
  // description
  string description = 4;
  // user_id
  string user_id = 5;
  // updated_at
  google.protobuf.Timestamp updated_at = 7;
}

// Rules
message UpsertRuleMetadataRequest {
  // checkpoint_id
  string checkpoint_id = 1;
  // rule_id
  string rule_id = 2;
  // human_readable_name
  string human_readable_name = 3;
  // description
  string description = 4;
  // user_id
  string user_id = 5;
}

// UpsertRuleMetadataResponse
message UpsertRuleMetadataResponse {
  // rule_metadata
  RuleMetadata rule_metadata = 1;
}

// GetRuleMetadataRequest
message GetRuleMetadataRequest {
  // checkpoint_id
  string checkpoint_id = 1;
  // rule_ids
  repeated string rule_ids = 2; // if [], return all facts in the checkpoint
}

// GetRuleMetadataResponse
message GetRuleMetadataResponse {
  // rule_metadata
  repeated RuleMetadata rule_metadata = 1;
}

// RuleMetadata
message RuleMetadata {
  // checkpoint_id
  string checkpoint_id = 1;
  // rule_id
  string rule_id = 2;
  // human_readable_name
  string human_readable_name = 3;
  // description
  string description = 4;
  // user_id
  string user_id = 5;
  // updated_at
  google.protobuf.Timestamp updated_at = 7;
}
