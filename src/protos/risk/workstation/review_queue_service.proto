syntax = "proto3";
// buf:lint:ignore PACKAGE_SAME_DIRECTORY
// buf:lint:ignore PACKAGE_VERSION_SUFFIX
package risk.workstation;

import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "risk/account.proto";
import "risk/cart.proto";
import "risk/common.proto";
import "risk/context.proto";
import "risk/dasher.proto";
import "risk/fulfillment.proto";
import "risk/payout_common.proto";
import "risk/workstation/case_study.proto";
import "risk/workstation/list.proto";
import "risk/workstation/review_queue.proto";
import "risk/workstation/workstation_common.proto";
// DON'T add "risk/checkpoints/order_problem.proto" as our dependency! It would cause a parsing error in order service.

option go_package = "workstationpb";
option java_generic_services = true;
option java_multiple_files = true;
option java_outer_classname = "ReviewQueueServiceProto";
option java_package = "com.doordash.risk.proto.workstation";

/**
 * We indicate optional fields via comment since protoc-gen-grpc doesn't support the optional keyword
 */

// ReviewQueueService
service ReviewQueueService {
  // Create/get review queues:
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc CreateSqlQueue(CreateSqlQueueRequest) returns (CreateSqlQueueResponse);
  // GetQueueList
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc GetQueueList(GetQueueListRequest) returns (GetQueueListResponse);

  // Case retrieving/operations:
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc GetCaseList(GetCaseListRequest) returns (GetCaseListResponse);
  // ClaimCase
  // buf:lint:ignore RPC_REQUEST_STANDARD_NAME
  // buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc ClaimCase(ToggleClaimStatusRequest) returns (ToggleClaimStatusResponse);
  // UnclaimCase
  // buf:lint:ignore RPC_REQUEST_STANDARD_NAME
  // buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc UnclaimCase(ToggleClaimStatusRequest) returns (ToggleClaimStatusResponse);
  // GetClaimedCases
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc GetClaimedCases(GetClaimedCasesRequest) returns (GetClaimedCasesResponse);
  // CreateCnrHtCase
  // buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc CreateCnrHtCase(CreateCnrHtCaseRequest) returns (CreateCaseResponse);
  // CreateMxFollowUpCase
  // buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc CreateMxFollowUpCase(CreateMxFollowUpCaseRequest) returns (CreateCaseResponse);
  // CreateCnrFprqCase
  // buf:lint:ignore RPC_REQUEST_STANDARD_NAME
  // buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc CreateCnrFprqCase(CreateCnrFalsePositiveReviewCaseRequest) returns (CreateCaseResponse);
  // CreateSafetyReportCase
  // buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc CreateSafetyReportCase(CreateSafetyReportCaseRequest) returns (CreateCaseResponse);
  // CreateTestCase
  // buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc CreateTestCase(CreateTestCaseRequest) returns (CreateCaseResponse);
  // CreateSqlCases
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc CreateSqlCases(CreateSqlCasesRequest) returns (CreateSqlCasesResponse);
  // CreateSqlCasesAsync
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc CreateSqlCasesAsync(CreateSqlCasesAsyncRequest) returns (CreateSqlCasesAsyncResponse);
  // GetCreateSqlCasesAsyncResult
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc GetCreateSqlCasesAsyncResult(GetCreateSqlCasesAsyncResultRequest) returns (GetCreateSqlCasesAsyncResultResponse);
  // GetReviewedCaseCounts
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc GetReviewedCaseCounts(GetReviewedCaseCountsRequest) returns (GetReviewedCaseCountsResponse);
  // BulkReviewCases
  // buf:lint:ignore RPC_REQUEST_STANDARD_NAME
  // buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc BulkReviewCases(BulkReviewCaseRequest) returns (BulkReviewCaseResponse);
  // PullCase
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc PullCase(PullCaseRequest) returns (PullCaseResponse);
  // CreateInAppAppealReIdvDeactivationCase
  // buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc CreateInAppAppealReIdvDeactivationCase(CreateInAppAppealReIdvDeactivationCaseRequest) returns (CreateCaseResponse);
  // CreateInAppAppealReIdvSuspensionCase
  // buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc CreateInAppAppealReIdvSuspensionCase(CreateInAppAppealReIdvSuspensionCaseRequest) returns (CreateCaseResponse);
  // CreateInAppAppealTinDuplicationCase
  // buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc CreateInAppAppealTinDuplicationCase(CreateInAppAppealTinDuplicationCaseRequest) returns (CreateCaseResponse);
  // CreateInAppAppealSafetyCase
  // buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc CreateInAppAppealSafetyCase(CreateInAppAppealSafetyCaseRequest) returns (CreateCaseResponse);
  // CreateInAppAppealQualityCase
  // buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc CreateInAppAppealQualityCase(CreateInAppAppealQualityCaseRequest) returns (CreateCaseResponse);
  // CreateInAppAppealIdentityCase
  // buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc CreateInAppAppealIdentityCase(CreateInAppAppealIdentityCaseRequest) returns (CreateCaseResponse);
  // CreateInAppAppealFraudCase
  // buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc CreateInAppAppealFraudCase(CreateInAppAppealFraudCaseRequest) returns (CreateCaseResponse);

  // Check Agents
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc HasCaseAssigned(HasCaseAssignedRequest) returns (HasCaseAssignedResponse);

  // Review operations
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc CreateReview(CreateReviewRequest) returns (CreateReviewResponse);
  // GetReviews
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc GetReviews(GetReviewsRequest) returns (GetReviewsResponse);
  // GetDecisionsForQueue
  // buf:lint:ignore RPC_REQUEST_STANDARD_NAME
  // buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc GetDecisionsForQueue(GetDecisionsRequest) returns (GetDecisionsReasonsResponse);
  // GetEntityReviewStatus
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc GetEntityReviewStatus(GetEntityReviewStatusRequest) returns (GetEntityReviewStatusResponse);
  // BulkGetEntityReviewStatus
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc BulkGetEntityReviewStatus(BulkGetEntityReviewStatusRequest) returns (BulkGetEntityReviewStatusResponse);

  // Decision/Reason
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc CreateDecision(CreateDecisionRequest) returns (CreateDecisionResponse);
  // CreateReason
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc CreateReason(CreateReasonRequest) returns (CreateReasonResponse);
  // UpdateDecision
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc UpdateDecision(UpdateDecisionRequest) returns (UpdateDecisionResponse);
  // UpdateReason
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc UpdateReason(UpdateReasonRequest) returns (UpdateReasonResponse);
  // BulkUpsertDecisions
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc BulkUpsertDecisions(BulkUpsertDecisionsRequest) returns (BulkUpsertDecisionsResponse);
  // BulkUpsertReasons
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc BulkUpsertReasons(BulkUpsertReasonsRequest) returns (BulkUpsertReasonsResponse);

  // Action
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc GetActions(GetActionsRequest) returns (GetActionsResponse);
  // UpsertManualAction
  // buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc UpsertManualAction(UpsertManualActionRequest) returns (Action);
  // DeleteManualAction
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc DeleteManualAction(DeleteManualActionRequest) returns (DeleteManualActionResponse);
  // UpsertDecisionToActionMap
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc UpsertDecisionToActionMap(UpsertDecisionToActionMapRequest) returns (UpsertDecisionToActionMapResponse);
  // GetDecisionToActionMap
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc GetDecisionToActionMap(GetDecisionToActionMapRequest) returns (GetDecisionToActionMapResponse);
  // DeleteDecisionToActionMap
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc DeleteDecisionToActionMap(DeleteDecisionToActionMapRequest) returns (DeleteDecisionToActionMapResponse);
  // TriggerActions
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc TriggerActions(TriggerActionsRequest) returns (TriggerActionsResponse);
  // GetActionStatus
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc GetActionStatus(GetActionStatusRequest) returns (GetActionStatusResponse);
  // UpsertObjectToActionMap
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc UpsertObjectToActionMap(UpsertObjectToActionMapRequest) returns (UpsertObjectToActionMapResponse);
  // GetObjectToActionMap
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc GetObjectToActionMap(GetObjectToActionMapRequest) returns (GetObjectToActionMapResponse);
  // DeleteObjectToActionMap
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc DeleteObjectToActionMap(DeleteObjectToActionMapRequest) returns (DeleteObjectToActionMapResponse);

  //  details(configurations + schema), refresh history:
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc GetReviewQueueDetailsHistory(GetReviewQueueDetailsHistoryRequest) returns (GetReviewQueueDetailsHistoryResponse);
  // GetReviewQueueDetails
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc GetReviewQueueDetails(GetReviewQueueDetailsRequest) returns (GetReviewQueueDetailsResponse);
  // UpdateReviewQueueDetails
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc UpdateReviewQueueDetails(UpdateReviewQueueDetailsRequest) returns (UpdateReviewQueueDetailsResponse);
  // RollbackReviewQueueDetails
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc RollbackReviewQueueDetails(RollbackReviewQueueDetailsRequest) returns (RollbackReviewQueueDetailsResponse);
  // GetRefreshSqlQueryHistory
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc GetRefreshSqlQueryHistory(GetRefreshSqlQueryHistoryRequest) returns (GetRefreshSqlQueryHistoryResponse);
  // UpdateQueue
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc UpdateQueue(UpdateQueueRequest) returns (UpdateQueueResponse);
  // DoesQueueSupportCapacityControl
  rpc DoesQueueSupportCapacityControl(DoesQueueSupportCapacityControlRequest) returns (DoesQueueSupportCapacityControlResponse);

  // capacity control
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc IsCapacityLimit(IsCapacityLimitRequest) returns (IsCapacityLimitResponse);
}

// CreateCivReviewCaseRequest
message CreateCivReviewCaseRequest {
  // civ_id
  string civ_id = 1;
  // card_country
  string card_country = 2;
  // payer_country
  string payer_country = 3;
  // consumer_id
  ConsumerId consumer_id = 4;
  // user_id
  UserId user_id = 5;
  // locale
  string locale = 6;
  // card_fingerprint
  string card_fingerprint = 7;
  // payment_method_id
  string payment_method_id = 8;
  // passed_ml_model
  bool passed_ml_model = 9;
  // card_bin
  string card_bin = 10;
  // card_last_4
  string card_last_4 = 11;
  // card_brand
  string card_brand = 12;
  // card_type
  string card_type = 13;
  // card_issuer
  string card_issuer = 14;
  // platform
  string platform = 15;
  // client_version
  string client_version = 16;
  // cart_id
  string cart_id = 17;
  // consumer_age_days
  string consumer_age_days = 18;
  // review_experience
  string review_experience = 19;
  // vendor
  string vendor = 20;
  // get_image_details
  string get_image_details = 21;
  // scanned_last_four
  string scanned_last_four = 22;
}

// BulkReviewCaseRequest
message BulkReviewCaseRequest {
  // context
  WorkstationRequestContext context = 1;
  // queue_unique_name
  string queue_unique_name = 2;
  // start_time
  google.protobuf.Timestamp start_time = 3;
  // end_time
  google.protobuf.Timestamp end_time = 4;
  // case_ids
  repeated int32 case_ids = 5;
  // primary_entity_ids
  repeated string primary_entity_ids = 6;
  // case_states
  repeated Enums.CaseState case_states = 7;
  // limit
  int32 limit = 8;
  // decision_id
  int32 decision_id = 9;
  // reason_id
  int32 reason_id = 10;
  // notes
  string notes = 11;
  // action_triggers
  repeated ActionTrigger action_triggers = 12;
}

// BulkReviewCaseResponse
message BulkReviewCaseResponse {
  // succeeded
  int32 succeeded = 1;
  // failed
  int32 failed = 2;
  // errors
  repeated string errors = 3;
}

// PullCaseRequest
message PullCaseRequest {
  // context
  WorkstationRequestContext context = 1;
  // queue_unique_name
  string queue_unique_name = 2;
}

// PullCaseResponse
message PullCaseResponse {
  // case
  Case case = 1;
}

// HasCaseAssignedRequest
message HasCaseAssignedRequest {
  // context
  WorkstationRequestContext context = 1;
}

// HasCaseAssignedResponse
message HasCaseAssignedResponse {
  // has
  bool has = 1;
  // case_id
  int32 case_id = 2;
  // queue_name
  string queue_name = 3;
  // case_state
  Enums.CaseState case_state = 4;
  // created_at
  google.protobuf.Timestamp created_at = 5;
  // assigned_at
  google.protobuf.Timestamp assigned_at = 6;
}

// CreateSqlQueueRequest
message CreateSqlQueueRequest {
  // unique_name
  string unique_name = 1;
  // display_name
  string display_name = 2;
  // sla_in_mins
  int32 sla_in_mins = 3;
  // description
  string description = 4;
  // query
  string query = 11;
  // schema
  DataSchema schema = 5;
  // primary_entity_type
  Enums.EntityType primary_entity_type = 6;
  // primary_entity_column_name
  string primary_entity_column_name = 7;
  // work_source
  string work_source = 8;
  // team
  Enums.Team team = 13;
  // audience
  Enums.Audience audience = 14;
  // track_AHT
  // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
  bool track_AHT = 15;
  // state
  Enums.QueueState state = 17;
  // context
  WorkstationRequestContext context = 18;

  reserved 9, 10, 12, 16;
}

// CreateSqlQueueResponse
message CreateSqlQueueResponse {
  // queue
  ReviewQueue queue = 1;
}

// UpdateQueueRequest
message UpdateQueueRequest {
  // unique_name
  string unique_name = 1;
  // display_name
  StringUpdate display_name = 2;
  // description
  StringUpdate description = 3;
  // sla_in_mins
  Int32Update sla_in_mins = 4;
  // state
  EnumQueueStateUpdate state = 5;
  // team
  EnumTeamUpdate team = 6;
  // audience
  EnumAudienceUpdate audience = 7;
  // default_review_decision
  Int32Update default_review_decision = 8;
  // default_review_reason
  Int32Update default_review_reason = 9;
  // track_AHT
  // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
  BoolUpdate track_AHT = 10;
  // i_will_double_write_to_cmp
  bool i_will_double_write_to_cmp = 11;
}

// UpdateQueueResponse
message UpdateQueueResponse {
  // success
  bool success = 1;
}

// CreateCnrHtCaseRequest
message CreateCnrHtCaseRequest {
  // consumer_id
  ConsumerId consumer_id = 1;
  // delivery_id
  DeliveryId delivery_id = 2;
  // order_problem_types
  repeated string order_problem_types = 3;
  /* optional */
  string ort_url = 4;
  /* optional */
  MonetaryAmount request_credits = 5;
  /* optional */
  MonetaryAmount request_refunds = 6;
  /* optional */
  string rule_fired = 7;
  /* optional */
  string consumer_locale = 8;
  /* optional */
  string consumer_device_agent = 9;
  /* optional */
  repeated ItemProblem problem_details = 10;
}

// CreateSafetyReportCaseRequest
message CreateSafetyReportCaseRequest {
  // consumer_id
  ConsumerId consumer_id = 1;
  // delivery_uuid
  DeliveryUuid delivery_uuid = 2;
  // dasher_id
  DasherId dasher_id = 3;
  // store_id
  StoreId store_id = 4;
  // report_option_type
  string report_option_type = 5;
  // subject
  string subject = 6;
  // priority
  int32 priority = 7;
  // origin
  string origin = 8;
  // description
  string description = 9;
  // customer_type
  string customer_type = 10;
  // deliveryStatus
  // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
  string deliveryStatus = 11;
  // country
  string country = 12;
  // dasher_name
  string dasher_name = 13;
  // dasher_email
  string dasher_email = 14;
  // dasher_phone
  string dasher_phone = 15;
  // consumer_name
  string consumer_name = 16;
  /* optional */
  string consumer_phone = 17;
  // merchant_name
  string merchant_name = 18;
  /* optional */
  string merchant_phone = 19;
}

// CreateCnrFalsePositiveReviewCaseRequest
message CreateCnrFalsePositiveReviewCaseRequest {
  // delivery_id
  DeliveryId delivery_id = 1;
  // consumer_id
  ConsumerId consumer_id = 2;
  // order_problem_type
  string order_problem_type = 3;
  /* optional */
  string consumer_locale = 4;
  /* optional */
  string consumer_device_agent = 5;
  /* optional */
  repeated ItemProblem item_problems = 10;
  // description
  string description = 11;
  // source
  string source = 14;
  // risk_context
  RiskContext risk_context = 15;
  // skip_capacity
  bool skip_capacity = 16;
  // eligibility_reason
  string eligibility_reason = 13;

  // Deprecated fields
  string os = 12;
}

// CreateMxFollowUpCaseRequest
message CreateMxFollowUpCaseRequest {
  // store_id
  string store_id = 1;
  // bank_fingerprint
  string bank_fingerprint = 2;
  // decision
  string decision = 3;
  // reason
  string reason = 4;
  // reason_notes
  string reason_notes = 5;
  // call_attempt
  int32 call_attempt = 6;
}

// CreateCxCancellationHtCaseRequest
message CreateCxCancellationHtCaseRequest {
  // delivery_id
  DeliveryId delivery_id = 1;
  // consumer_id
  ConsumerId consumer_id = 3;
  /* optional */
  string rule_fired = 4;
  /* optional */
  MonetaryAmount today_cxl_gov = 5;
  /* optional */
  int32 today_cancellation = 6;
}

// CreateDxCaseRequest
message CreateDxCaseRequest {
  // dasher_id
  DasherId dasher_id = 1;
  // payment_account_id
  PaymentAccountId payment_account_id = 2;
  // reasons
  repeated CreateDxCaseReason reasons = 3;
  /* optional */
  repeated string rules_fired = 4;
  /* optional */
  repeated DeliveryId delivery_ids = 5;
}

// CreateDxHtCaseRequest
message CreateDxHtCaseRequest {
  // dasher_id
  DasherId dasher_id = 1;
  // payment_account_id
  PaymentAccountId payment_account_id = 2;
  // reasons
  repeated CreateDxCaseReason reasons = 3;
  /* optional */
  repeated string rules_fired = 4;
  /* optional */
  repeated DeliveryId delivery_ids = 5;
}

// CreateDxApplicantHtCaseRequest
message CreateDxApplicantHtCaseRequest {
  // dasher_applicant_id
  DasherApplicantId dasher_applicant_id = 1;
  // user_id
  UserId user_id = 2;
  // unique_link
  string unique_link = 3;
  /* optional */
  repeated string rules_fired = 4;
}

// CreateOrUpdateDxPayoutBlockCaseRequest
message CreateOrUpdateDxPayoutBlockCaseRequest {
  // dasher_id
  DasherId dasher_id = 1;
  // payment_account_id
  PaymentAccountId payment_account_id = 2;
  // reasons
  repeated CreateDxCaseReason reasons = 3;
  // rules_fired
  repeated string rules_fired = 4;
  // delivery_ids
  repeated DeliveryId delivery_ids = 5;
}

// CreateTestCaseRequest
message CreateTestCaseRequest {
  // consumer_id
  ConsumerId consumer_id = 1;
  // delivery_id
  DeliveryId delivery_id = 2;
}

// CreateSqlCasesRequest
message CreateSqlCasesRequest {
  // queue_name
  string queue_name = 1;
  // snapshot_id
  int32 snapshot_id = 2;
  // query
  string query = 3;
  // idempotency_field_filter
  repeated string idempotency_field_filter = 4;
  // context
  WorkstationRequestContext context = 5;
  // job_instance_uuid_override
  string job_instance_uuid_override = 6;
}

// CreateDxCaseReason
enum CreateDxCaseReason {
  // UNKNOWN_DX_CASE_REASON
  // buf:lint:ignore ENUM_VALUE_PREFIX
  // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
  UNKNOWN_DX_CASE_REASON = 0;
  // BANK_ACCOUNT_DENYLIST
  // buf:lint:ignore ENUM_VALUE_PREFIX
  BANK_ACCOUNT_DENYLIST = 1;
  // CANCELLATION
  // buf:lint:ignore ENUM_VALUE_PREFIX
  CANCELLATION = 2;
  // EGREGIOUS_LINKAGES
  // buf:lint:ignore ENUM_VALUE_PREFIX
  EGREGIOUS_LINKAGES = 3;
  // NEVER_DELIVERED
  // buf:lint:ignore ENUM_VALUE_PREFIX
  NEVER_DELIVERED = 4;
  // RED_CARD_ABUSE
  // buf:lint:ignore ENUM_VALUE_PREFIX
  RED_CARD_ABUSE = 5;
  // REPORTING_STORE_CLOSED
  // buf:lint:ignore ENUM_VALUE_PREFIX
  REPORTING_STORE_CLOSED = 6;
  // TOP_UP
  // buf:lint:ignore ENUM_VALUE_PREFIX
  TOP_UP = 7;
  // PROVIDE_FALSE_INFORMATION
  // buf:lint:ignore ENUM_VALUE_PREFIX
  PROVIDE_FALSE_INFORMATION = 8;
  // TIME_MODE_ABUSE
  // buf:lint:ignore ENUM_VALUE_PREFIX
  TIME_MODE_ABUSE = 9;
  // TIP_FRAUD
  // buf:lint:ignore ENUM_VALUE_PREFIX
  TIP_FRAUD = 10;
  // REPEATED_LATENESS
  // buf:lint:ignore ENUM_VALUE_PREFIX
  REPEATED_LATENESS = 11;
}

// CreateDDFWCaseRequest
message CreateDDFWCaseRequest {
  // consumer_id
  ConsumerId consumer_id = 1;
  // cart_id
  CartId cart_id = 2;
  /* optional */
  string rule_fired = 3;
  // ddfw_team_id
  string ddfw_team_id = 4;
}

// CreateCxDeactivationCaseRequest
message CreateCxDeactivationCaseRequest {
  // consumer_id
  ConsumerId consumer_id = 1;
  // user_id
  UserId user_id = 2;
  // cart_id
  CartId cart_id = 3;
  /* optional */
  string rule_fired = 4;
  // email
  string email = 5;
  // locale
  string locale = 6;
  // order_uuid
  string order_uuid = 7;
}

// CreateCaseResponse
message CreateCaseResponse {
  // Status
  enum Status {
    // PASS
    // buf:lint:ignore ENUM_VALUE_PREFIX
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    PASS = 0;
    // DEDUPPED
    // buf:lint:ignore ENUM_VALUE_PREFIX
    DEDUPPED = 1;
    // CAPACITY_CAPPED
    // buf:lint:ignore ENUM_VALUE_PREFIX
    CAPACITY_CAPPED = 2;
    // KILL_SWITCH_ON
    // buf:lint:ignore ENUM_VALUE_PREFIX
    KILL_SWITCH_ON = 3;
  }
  // case
  Case case = 1;
  // status
  Status status = 2;
}

// CreateSqlCasesResponse
message CreateSqlCasesResponse {
  // todo: deprecate field
  int32 total_cases = 1;
  // number of new cases that were created
  int32 new_cases = 2;
  // number of cases skipped due to idempotency
  int32 deduped_cases = 3;
}

// CreateSqlCasesAsyncRequest
message CreateSqlCasesAsyncRequest {
  // queue_name
  string queue_name = 1;
  // snapshot_id
  int32 snapshot_id = 2;
  // query
  string query = 3;
  // idempotency_field_filter
  repeated string idempotency_field_filter = 4;
  // context
  WorkstationRequestContext context = 5;
}

// CreateSqlCasesAsyncResponse
message CreateSqlCasesAsyncResponse {
  // job_id
  int32 job_id = 1;
}

// GetCreateSqlCasesAsyncResultRequest
message GetCreateSqlCasesAsyncResultRequest {
  // job_id
  int32 job_id = 1;
}

// GetCreateSqlCasesAsyncResultResponse
message GetCreateSqlCasesAsyncResultResponse {
  // status
  Job.Status status = 1;
  // status_message
  string status_message = 2;
  // new_cases
  int32 new_cases = 3;
}

// GetQueueListRequest
message GetQueueListRequest {
  // context
  WorkstationRequestContext context = 1;
  // start_create_time
  google.protobuf.Timestamp start_create_time = 2;
  // end_create_time
  google.protobuf.Timestamp end_create_time = 3;
  // if empty, filters are ignored
  repeated Enums.EntityType entity_type_filter = 4;
  // queue_type_filter
  repeated Enums.QueueType queue_type_filter = 5;
  /* optional */
  string queue_name_filter = 6;
  // paging_options
  PagingOptions paging_options = 7;
  // include_unresolved_case_count
  bool include_unresolved_case_count = 8;
}

// GetQueueListResponse
message GetQueueListResponse {
  // queues
  repeated ReviewQueue queues = 1;
  // total_results
  int32 total_results = 2;
}

// GetCaseListRequest
message GetCaseListRequest {
  // context
  WorkstationRequestContext context = 1;
  // queue_name
  string queue_name = 2;
  /* optional */
  string sort_by = 3;
  // paging_options
  PagingOptions paging_options = 4;
  // start_time
  google.protobuf.Timestamp start_time = 5;
  // end_time
  google.protobuf.Timestamp end_time = 6;
  // if empty: filters are ignored
  repeated UserId claimant_id_filter = 7;
  // decision_id_filter
  repeated int32 decision_id_filter = 8;
  // case_id_filter
  repeated int32 case_id_filter = 9;
  // TODO(isabel): Deprecate this field
  repeated string primary_entity_id_filter = 10;
  // case_state_filter
  repeated Enums.CaseState case_state_filter = 11;
  // claim_status_filter
  repeated CaseClaimStatus claim_status_filter = 12;
  // reason_id_filter
  repeated int32 reason_id_filter = 13;
  // latest_review_start_time
  google.protobuf.Timestamp latest_review_start_time = 14;
  // latest_review_end_time
  google.protobuf.Timestamp latest_review_end_time = 15;
  // entity_id_filter
  repeated string entity_id_filter = 16;
  // entity_type
  Enums.EntityType entity_type = 17;
  // is_primary_entity
  bool is_primary_entity = 18;
  // sort_order
  SortDirection sort_order = 19;
}

// GetCaseListResponse
message GetCaseListResponse {
  // cases
  repeated Case cases = 1;
  // total number of cases
  int64 total_results = 2;
}

// CreateReviewRequest
message CreateReviewRequest {
  // context
  WorkstationRequestContext context = 1;
  // case_id
  int32 case_id = 2;
  // decision_id
  int32 decision_id = 3;
  /* optional */
  int32 reason_id = 4;
  /* optional */
  string notes = 5;
  // list of actions we should not apply, ignored if empty
  repeated string disabled_actions = 6;
  /* optional */
  string queue_name = 7;
  // deprecated, do not use. For CMP queues, BFF should send disable_double_write = true and double write by itself
  bool synchronous_double_write = 8 [deprecated = true];
  /* optional */
  bool disable_double_write = 9;
}

// CreateReviewResponse
message CreateReviewResponse {
  // review
  Review review = 1;
}

// ToggleClaimStatusRequest
message ToggleClaimStatusRequest {
  // context
  WorkstationRequestContext context = 1;
  // case_id
  int32 case_id = 2;
  /* optional */
  string queue_name = 3;
  // this should be sent as true if BFF is handling the claim/unclaim write to CMP
  /* optional */
  bool disable_cmp_double_write = 4;
}

// CaseClaimOperationStatus
enum CaseClaimOperationStatus {
  // CLAIM_SUCCESS
  // buf:lint:ignore ENUM_VALUE_PREFIX
  // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
  CLAIM_SUCCESS = 0;
  // CLAIM_FAILURE
  // buf:lint:ignore ENUM_VALUE_PREFIX
  CLAIM_FAILURE = 1;
  // UNCLAIM_SUCCESS
  // buf:lint:ignore ENUM_VALUE_PREFIX
  UNCLAIM_SUCCESS = 2;
  // UNCLAIM_FAILURE
  // buf:lint:ignore ENUM_VALUE_PREFIX
  UNCLAIM_FAILURE = 3;
}

// CaseClaimStatus
enum CaseClaimStatus {
  // CLAIMED
  // buf:lint:ignore ENUM_VALUE_PREFIX
  // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
  CLAIMED = 0;
  // UNCLAIMED
  // buf:lint:ignore ENUM_VALUE_PREFIX
  UNCLAIMED = 1;
}

// ToggleClaimStatusResponse
message ToggleClaimStatusResponse {
  // caseClaimOperationStatus
  // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
  CaseClaimOperationStatus caseClaimOperationStatus = 1;
  // claimant_id
  UserId claimant_id = 2;
  // claimant_email
  string claimant_email = 3;
}

// GetClaimedCasesRequest
message GetClaimedCasesRequest {
  // earliest_claim_time
  google.protobuf.Timestamp earliest_claim_time = 2;
  // this field is mandatory
  repeated int32 case_id_filter = 3;
  // if empty, filters are ignored
  repeated CaseClaimStatus claim_status_filter = 4;
  reserved 1;
}

// GetClaimedCasesResponse
message GetClaimedCasesResponse {
  // claimed_cases
  repeated ClaimedCase claimed_cases = 1;

  // ClaimedCase
  message ClaimedCase {
    // claimant_id
    UserId claimant_id = 1;
    // claimant_email
    string claimant_email = 2;
    // case_id
    int32 case_id = 3;
    // claim_timestamp
    google.protobuf.Timestamp claim_timestamp = 4;
  }
}

// Get reviews request respects case_id if it's there, otherwise queue + entity
message GetReviewsRequest {
  // case_id_filter
  repeated int32 case_id_filter = 1;
  /* optional */
  string queue_name = 2;
  /* optional */
  string entity_id = 3;
}

// GetReviewsResponse
message GetReviewsResponse {
  // reviews
  repeated Review reviews = 1;
}

// GetDecisionsRequest
message GetDecisionsRequest {
  // queue_name
  string queue_name = 1;
}

// GetDecisionsReasonsResponse
message GetDecisionsReasonsResponse {
  // decision_reason_map
  repeated DecisionReasonMapping decision_reason_map = 1;
  // queue_name
  string queue_name = 2;
}

// CreateDecisionRequest
message CreateDecisionRequest {
  // name
  string name = 1;
  // review_queue_name
  string review_queue_name = 3;
  // primary_entity_type
  Enums.EntityType primary_entity_type = 4;
  // transition_state
  Enums.CaseState transition_state = 5;
  // sort_order
  int32 sort_order = 6;
  // is_active
  bool is_active = 7;
  // decision_category
  DecisionCategory decision_category = 8;
  // context
  WorkstationRequestContext context = 9;

  reserved 2;
}

// CreateDecisionResponse
message CreateDecisionResponse {
  // decision
  Decision decision = 1;
}

// CreateReasonRequest
message CreateReasonRequest {
  // name
  string name = 1;
  // review_queue_name
  string review_queue_name = 3;
  // primary_entity_type
  Enums.EntityType primary_entity_type = 4;
  // sort_order
  int32 sort_order = 5;
  // is_active
  bool is_active = 6;
  // decision_category
  DecisionCategory decision_category = 7;
  // context
  WorkstationRequestContext context = 8;

  reserved 2;
}

// CreateReasonResponse
message CreateReasonResponse {
  // reason
  Reason reason = 1;
}

// GetReviewedCaseCountsRequest
message GetReviewedCaseCountsRequest {
  // start_time
  google.protobuf.Timestamp start_time = 1;
  // end_time
  google.protobuf.Timestamp end_time = 2;
  // queue_name
  string queue_name = 3;
}

// GetReviewedCaseCountsResponse
message GetReviewedCaseCountsResponse {
  // reviewed_case_counts
  repeated ReviewedCaseCount reviewed_case_counts = 1;
}

// ReviewedCaseCount
message ReviewedCaseCount {
  // date
  string date = 1; // date in "yyyy-MM-dd" format
  // reviewer_email
  string reviewer_email = 2;
  // count
  int64 count = 3;
}

// GetEntityReviewStatusRequest
message GetEntityReviewStatusRequest {
  // entityId
  // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
  string entityId = 1;
  // entity_type
  Enums.EntityType entity_type = 2;
  // queue_names
  repeated string queue_names = 3;
  // is_primary_entity
  bool is_primary_entity = 4;
}

// GetEntityReviewStatusResponse
message GetEntityReviewStatusResponse {
  // entity_reviews
  repeated EntityReview entity_reviews = 1;
}

// BulkGetEntityReviewStatusRequest
message BulkGetEntityReviewStatusRequest {
  // entityId
  // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
  repeated string entityId = 1;
  // entity_type
  Enums.EntityType entity_type = 2;
  // queue_name
  string queue_name = 3;
  // is_primary_entity
  bool is_primary_entity = 4;
}

// BulkGetEntityReviewStatusResponse
message BulkGetEntityReviewStatusResponse {
  // entity_reviews
  repeated EntityReview entity_reviews = 1;
}

// UpdateDecisionRequest
message UpdateDecisionRequest {
  // decisionId
  // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
  int32 decisionId = 1;
  // name
  string name = 2;
  // primary_entity_type
  Enums.EntityType primary_entity_type = 4;
  // transition_state
  Enums.CaseState transition_state = 5;
  // sort_order
  int32 sort_order = 6;
  // is_active
  bool is_active = 7;
  // decision_category
  DecisionCategory decision_category = 8;
  // review_queue_name
  string review_queue_name = 9;
  // context
  WorkstationRequestContext context = 10;

  reserved 3;
}

// UpdateDecisionResponse
message UpdateDecisionResponse {
  // updated
  bool updated = 1;
}

// BulkUpsertDecisionsRequest
message BulkUpsertDecisionsRequest {
  // UpsertDecisions
  // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
  repeated UpdateDecisionRequest UpsertDecisions = 1;
}

// BulkUpsertDecisionsResponse
message BulkUpsertDecisionsResponse {
  // success
  bool success = 1;
}

// UpdateReasonRequest
message UpdateReasonRequest {
  // reasonId
  // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
  int32 reasonId = 1;
  // name
  string name = 2;
  // sort_order
  int32 sort_order = 4;
  // is_active
  bool is_active = 5;
  // primary_entity_type
  Enums.EntityType primary_entity_type = 6;
  // decision_category
  DecisionCategory decision_category = 7;
  // review_queue_name
  string review_queue_name = 8;
  // context
  WorkstationRequestContext context = 9;

  reserved 3;
}

// UpdateReasonResponse
message UpdateReasonResponse {
  // updated
  bool updated = 1;
}

// BulkUpsertReasonsRequest
message BulkUpsertReasonsRequest {
  // UpsertReasons
  // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
  repeated UpdateReasonRequest UpsertReasons = 1;
}

// BulkUpsertReasonsResponse
message BulkUpsertReasonsResponse {
  // success
  bool success = 1;
}

// Action
message Action {
  // ActionType
  enum ActionType {
    // AUTOMATIC
    // buf:lint:ignore ENUM_VALUE_PREFIX
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    AUTOMATIC = 0;
    // MANUAL
    // buf:lint:ignore ENUM_VALUE_PREFIX
    MANUAL = 1;
  }
  // id
  string id = 5;
  // name
  string name = 1;
  // description
  string description = 2;
  // html
  string html = 4;
  // created_at
  google.protobuf.Timestamp created_at = 6;
  // updated_at
  google.protobuf.Timestamp updated_at = 7;
  // created_by
  UserId created_by = 8;
  // created_by_email
  string created_by_email = 9;
  // parameters
  repeated ActionParameter parameters = 3;
  // type
  ActionType type = 10;
}

// ActionParameterSource
enum ActionParameterSource {
  // CASE_DETAILS
  // buf:lint:ignore ENUM_VALUE_PREFIX
  // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
  CASE_DETAILS = 0;
  // WORKSTATION_UI
  // buf:lint:ignore ENUM_VALUE_PREFIX
  WORKSTATION_UI = 1;
}

// ActionParameter
message ActionParameter {
  // name
  string name = 1;
  // description
  string description = 2;
  // type
  string type = 3;
  // identifier
  Enums.Identifier identifier = 4;
  // source
  ActionParameterSource source = 5;
  // isRequired
  // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
  bool isRequired = 6;
}

// GetActionsRequest
message GetActionsRequest {}

// GetActionsResponse
message GetActionsResponse {
  // actions
  repeated Action actions = 1;
}

// ActionParameterMapEntry
message ActionParameterMapEntry {
  // action_parameter_name
  string action_parameter_name = 1;
  // case_property_name
  string case_property_name = 2;
}

// UpsertManualActionRequest
message UpsertManualActionRequest {
  // name
  string name = 1;
  // description
  string description = 2;
  // html
  string html = 3;
  // action_id
  string action_id = 4;
  // context
  WorkstationRequestContext context = 5;
}

// DeleteManualActionRequest
message DeleteManualActionRequest {
  // action_id
  string action_id = 1;
  // context
  WorkstationRequestContext context = 2;
}

// DeleteManualActionResponse
message DeleteManualActionResponse {
  // success
  bool success = 1;
}

// DecisionToActionMapEntry
message DecisionToActionMapEntry {
  // decision_id
  int32 decision_id = 1;
  // action_name
  string action_name = 2;
  // required_parameters
  repeated ActionParameterMapEntry required_parameters = 3;
  // optional_parameters
  repeated ActionParameterMapEntry optional_parameters = 4;
  // dependencies
  repeated string dependencies = 5;
}

// UpsertDecisionToActionMapRequest
message UpsertDecisionToActionMapRequest {
  // decision_to_action_map_entries
  repeated DecisionToActionMapEntry decision_to_action_map_entries = 1;
}

// UpsertDecisionToActionMapResponse
message UpsertDecisionToActionMapResponse {
  // success
  bool success = 1;
}

// GetDecisionToActionMapRequest
message GetDecisionToActionMapRequest {
  // decision_ids
  repeated int32 decision_ids = 1;
}

// GetDecisionToActionMapResponse
message GetDecisionToActionMapResponse {
  // decision_to_action_map_entries
  repeated DecisionToActionMapEntry decision_to_action_map_entries = 1;
}

// DecisionToActionId
message DecisionToActionId {
  // decision_id
  int32 decision_id = 1;
  // action_name
  string action_name = 2;
}

// DeleteDecisionToActionMapRequest
message DeleteDecisionToActionMapRequest {
  // decision_to_action_ids
  repeated DecisionToActionId decision_to_action_ids = 1;
}

// DeleteDecisionToActionMapResponse
message DeleteDecisionToActionMapResponse {
  // success
  bool success = 1;
}

// DynamicParameterInput
message DynamicParameterInput {
  // key
  string key = 1;
  // value
  string value = 2;
}

// ActionStatus
enum ActionStatus {
  // SUCCEEDED
  // buf:lint:ignore ENUM_VALUE_PREFIX
  // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
  SUCCEEDED = 0;
  // FAILED
  // buf:lint:ignore ENUM_VALUE_PREFIX
  FAILED = 1;
  // PENDING
  // buf:lint:ignore ENUM_VALUE_PREFIX
  PENDING = 2;
}

// ActionTrigger
message ActionTrigger {
  // action_name
  string action_name = 1;
  // dynamic_parameters
  repeated DynamicParameterInput dynamic_parameters = 2;
  // dependencies
  repeated string dependencies = 3;
}

// ActionResponse
message ActionResponse {
  // review_id
  int32 review_id = 1;
  // action_name
  string action_name = 2;
  // action_output
  string action_output = 3;
  // action_status
  ActionStatus action_status = 4;
  // created_at
  google.protobuf.Timestamp created_at = 5;
  // case_id
  int32 case_id = 6;
}

// TriggerActionsRequest
message TriggerActionsRequest {
  // review_id
  int32 review_id = 1;
  // action_triggers
  repeated ActionTrigger action_triggers = 2;
}

// TriggerActionsResponse
message TriggerActionsResponse {
  // action_responses
  repeated ActionResponse action_responses = 1;
}

// GetActionStatusRequest
message GetActionStatusRequest {
  // review_ids
  repeated int32 review_ids = 1;
  // case_ids
  repeated int32 case_ids = 2;
}

// GetActionStatusResponse
message GetActionStatusResponse {
  // action_responses
  repeated ActionResponse action_responses = 1;
}

// GetRefreshSqlQueryHistoryRequest
message GetRefreshSqlQueryHistoryRequest {
  // queue_name
  string queue_name = 1;
  // start_time
  google.protobuf.Timestamp start_time = 2;
  // paging_options
  PagingOptions paging_options = 3;
}

// GetRefreshSqlQueryHistoryResponse
message GetRefreshSqlQueryHistoryResponse {
  // refresh_sql_query_entries
  repeated RefreshSqlQueryLogEntry refresh_sql_query_entries = 1;
  // total_results
  int64 total_results = 2;
}

// GetReviewQueueDetailsHistoryRequest
message GetReviewQueueDetailsHistoryRequest {
  // queue_unique_name
  string queue_unique_name = 1;
  // change_field_filter
  repeated ReviewQueueDetailsField change_field_filter = 2;
  // paging_options
  PagingOptions paging_options = 3;
}

// GetReviewQueueDetailsHistoryResponse
message GetReviewQueueDetailsHistoryResponse {
  // details
  repeated ReviewQueueDetails details = 1;
}

// GetReviewQueueDetailsRequest
message GetReviewQueueDetailsRequest {
  // queue_unique_name
  string queue_unique_name = 1;
  // version
  int32 version = 2; // if not set, default to the latest version.
}

// GetReviewQueueDetailsResponse
message GetReviewQueueDetailsResponse {
  // details_data
  ReviewQueueDetailsData details_data = 1;
  // version
  int32 version = 2;
}

// UpdateReviewQueueDetailsRequest
message UpdateReviewQueueDetailsRequest {
  // queue_unique_name
  string queue_unique_name = 1;
  // change_fields
  repeated ReviewQueueDetailsField change_fields = 2;
  // base_version
  int32 base_version = 3;
  // context
  WorkstationRequestContext context = 4;
  // details
  ReviewQueueDetailsData details = 5;
  // diff
  string diff = 6;
  /* optional */
  bool disable_cmp_double_write = 7;
}

// UpdateReviewQueueDetailsResponse
message UpdateReviewQueueDetailsResponse {
  // success
  bool success = 1;
}

// RollbackReviewQueueDetailsRequest
message RollbackReviewQueueDetailsRequest {
  // queue_unique_name
  string queue_unique_name = 1;
  // base_version
  int32 base_version = 2;
  // rollback_version
  int32 rollback_version = 3;
  // context
  WorkstationRequestContext context = 4;
}

// RollbackReviewQueueDetailsResponse
message RollbackReviewQueueDetailsResponse {
  // success
  bool success = 1;
}

// ReviewQueueDetails
message ReviewQueueDetails {
  // queue_unique_name
  string queue_unique_name = 1;
  // version
  int32 version = 2;
  // rollback_version
  int32 rollback_version = 3;
  // change_fields
  repeated ReviewQueueDetailsField change_fields = 4;
  // details
  string details = 5;
  // diff
  string diff = 6;
  // create_at
  google.protobuf.Timestamp create_at = 7;
  // created_by
  UserId created_by = 8;
  // created_by_email
  string created_by_email = 9;
}

// ReviewQueueDetailsField
enum ReviewQueueDetailsField {
  // IDEMPOTENCY_CONTROL
  // buf:lint:ignore ENUM_VALUE_PREFIX
  // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
  IDEMPOTENCY_CONTROL = 0;
  // CAPACITY_CONTROL
  // buf:lint:ignore ENUM_VALUE_PREFIX
  CAPACITY_CONTROL = 1;
  // TIME_TO_CAPACITY
  // buf:lint:ignore ENUM_VALUE_PREFIX
  TIME_TO_CAPACITY = 2;
  // SQL_QUERY_METADATA
  // buf:lint:ignore ENUM_VALUE_PREFIX
  SQL_QUERY_METADATA = 3;
  // KILL_SWITCH_ON
  // buf:lint:ignore ENUM_VALUE_PREFIX
  KILL_SWITCH_ON = 4;
  // SORT_PREFERENCE
  // buf:lint:ignore ENUM_VALUE_PREFIX
  SORT_PREFERENCE = 5;
  // WORKFLOW_METADATA
  // buf:lint:ignore ENUM_VALUE_PREFIX
  WORKFLOW_METADATA = 6;
  // MINUTE_UNCLAIM
  // buf:lint:ignore ENUM_VALUE_PREFIX
  MINUTE_UNCLAIM = 7;
}

// ReviewQueueDetailsData
message ReviewQueueDetailsData {
  // idempotency_control
  IdempotencyControl idempotency_control = 1;
  // capacity_control
  CapacityControl capacity_control = 2;
  // time_to_capacity
  map<string, int32> time_to_capacity = 4;
  // sql_queue_metadata
  SqlQueueMetadata sql_queue_metadata = 3;
  // kill_switch_on
  bool kill_switch_on = 5;
  // sort_preference
  string sort_preference = 6;
  // workflow_metadata
  WorkflowMetadata workflow_metadata = 7;
  // minUnclaim
  // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
  int32 minUnclaim = 8;
}

// SqlQueueMetadata
message SqlQueueMetadata {
  // query
  string query = 1;
  // refresh_metadata
  SqlRefreshMetadata refresh_metadata = 3;

  reserved 2;
}

// IsCapacityLimitRequest
message IsCapacityLimitRequest {
  // review_queue_name
  string review_queue_name = 1;
}

// IsCapacityLimitResponse
message IsCapacityLimitResponse {
  // isCapacityEnabled
  // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
  bool isCapacityEnabled = 1;
  // isCapacityLimit
  // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
  bool isCapacityLimit = 2;
  // numCases
  // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
  int32 numCases = 3;
  // caseLimit
  // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
  int32 caseLimit = 4;
}

// DoesQueueSupportCapacityControlRequest
message DoesQueueSupportCapacityControlRequest {
  // review_queue_name
  string review_queue_name = 1;
}

// DoesQueueSupportCapacityControlResponse
message DoesQueueSupportCapacityControlResponse {
  // supportsCapacityControl
  // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
  bool supportsCapacityControl = 1;
}

// TriggerEvent
enum TriggerEvent {
  // UNSPECIFIED_TRIGGER
  // buf:lint:ignore ENUM_VALUE_PREFIX
  // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
  UNSPECIFIED_TRIGGER = 0;
  // CASE_CREATION
  // buf:lint:ignore ENUM_VALUE_PREFIX
  CASE_CREATION = 1;
  // DECISION_REACHED
  // buf:lint:ignore ENUM_VALUE_PREFIX
  DECISION_REACHED = 2;
  // MANUAL_TRIGGER
  // buf:lint:ignore ENUM_VALUE_PREFIX
  MANUAL_TRIGGER = 3;
}

// ObjectToActionMapEntry
message ObjectToActionMapEntry {
  // object_id
  string object_id = 1;
  // object_identifier
  Enums.Identifier object_identifier = 2;
  // trigger_event
  TriggerEvent trigger_event = 7;
  // action_name
  string action_name = 3;
  // required_parameters
  repeated ActionParameterMapEntry required_parameters = 4;
  // optional_parameters
  repeated ActionParameterMapEntry optional_parameters = 5;
  // dependencies
  repeated string dependencies = 6;
}

// UpsertObjectToActionMapRequest
message UpsertObjectToActionMapRequest {
  // object_to_action_map_entries
  repeated ObjectToActionMapEntry object_to_action_map_entries = 1;
}

// UpsertObjectToActionMapResponse
message UpsertObjectToActionMapResponse {
  // success
  bool success = 1;
}

// GetObjectToActionMapRequest
message GetObjectToActionMapRequest {
  // ObjectUniqueId
  message ObjectUniqueId {
    // object_id
    string object_id = 1;
    // object_identifier
    Enums.Identifier object_identifier = 2;
    // trigger_event
    TriggerEvent trigger_event = 3;
  }
  // object_ids
  repeated ObjectUniqueId object_ids = 1;
}

// GetObjectToActionMapResponse
message GetObjectToActionMapResponse {
  // object_to_action_map_entries
  repeated ObjectToActionMapEntry object_to_action_map_entries = 1;
}

// ObjectToActionId
message ObjectToActionId {
  // object_id
  string object_id = 1;
  // object_identifier
  Enums.Identifier object_identifier = 2;
  // action_name
  string action_name = 3;
  // trigger_event
  TriggerEvent trigger_event = 4;
}

// DeleteObjectToActionMapRequest
message DeleteObjectToActionMapRequest {
  // object_to_action_ids
  repeated ObjectToActionId object_to_action_ids = 1;
}

// DeleteObjectToActionMapResponse
message DeleteObjectToActionMapResponse {
  // success
  bool success = 1;
}

// ItemProblem
message ItemProblem {
  // problem_name
  string problem_name = 1;
  // description
  string description = 2;
  // item_extra_id
  string item_extra_id = 3;
  // order_item_id
  string order_item_id = 4;
  // quantity
  int32 quantity = 5;
}

// CreateInAppAppealReIdvDeactivationCaseRequest
message CreateInAppAppealReIdvDeactivationCaseRequest {
  // dasher_id
  DasherId dasher_id = 1;
  // email
  string email = 2;
  // applicant_id
  int32 applicant_id = 3;
  // unique_link
  string unique_link = 4;
  // inquiry_id
  string inquiry_id = 5;
  // inquiry_status
  string inquiry_status = 6;
  // inquiry_updated_at
  google.protobuf.Timestamp inquiry_updated_at = 7;
  // inquiry_template
  string inquiry_template = 8;
  // created_date
  google.protobuf.Timestamp created_date = 9;
  // deactivation_reason
  string deactivation_reason = 10;
  // elite
  bool elite = 11;
  // dasher_selected_reason
  string dasher_selected_reason = 12;
  // dasher_input
  string dasher_input = 13;
}

// CreateInAppAppealReIdvSuspensionCaseRequest
message CreateInAppAppealReIdvSuspensionCaseRequest {
  // dasher_id
  DasherId dasher_id = 1;
  // email
  string email = 2;
  // applicant_id
  int32 applicant_id = 3;
  // unique_link
  string unique_link = 4;
  // inquiry_id
  string inquiry_id = 5;
  // inquiry_status
  string inquiry_status = 6;
  // inquiry_updated_at
  google.protobuf.Timestamp inquiry_updated_at = 7;
  // inquiry_template
  string inquiry_template = 8;
  // created_date
  google.protobuf.Timestamp created_date = 9;
  // elite
  bool elite = 10;
  // checkr_link
  string checkr_link = 11;
  // notes
  string notes = 12;
}

// CreateInAppAppealTinDuplicationCaseRequest
message CreateInAppAppealTinDuplicationCaseRequest {
  // TinDuplicationAssociatedAccount
  message TinDuplicationAssociatedAccount {
    // dasher_id
    DasherId dasher_id = 1;
    // applicant_id
    int32 applicant_id = 2;
    // email
    string email = 3;
    // status
    string status = 4;
  }
  // dasher_id
  DasherId dasher_id = 1;
  // email
  string email = 2;
  // applicant_id
  int32 applicant_id = 3;
  // unique_link
  string unique_link = 4;
  // num_of_tin_associated_accounts
  int32 num_of_tin_associated_accounts = 5;
  // dasher_selected_reason
  string dasher_selected_reason = 6;
  // dasher_input
  string dasher_input = 7;
  // associated_accounts
  repeated TinDuplicationAssociatedAccount associated_accounts = 8;
  // ssn_token
  string ssn_token = 9;
}

// InAppAppealInput
message InAppAppealInput {
  // dasher_id
  DasherId dasher_id = 1;
  // email
  string email = 2;
  // applicant_id
  int32 applicant_id = 3;
  // unique_link
  string unique_link = 4;
}

// CreateInAppAppealSafetyCaseRequest
message CreateInAppAppealSafetyCaseRequest {
  // inAppAppealInput
  // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
  InAppAppealInput inAppAppealInput = 1;
  // elite
  bool elite = 2;
  // dasher_input
  string dasher_input = 3;
  // deactivation_reason
  string deactivation_reason = 4;
}

// CreateInAppAppealQualityCaseRequest
message CreateInAppAppealQualityCaseRequest {
  // inAppAppealInput
  // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
  InAppAppealInput inAppAppealInput = 1;
  // elite
  bool elite = 2;
  // dasher_input
  string dasher_input = 3;
  // deactivation_reason
  string deactivation_reason = 4;
}

// CreateInAppAppealIdentityCaseRequest
message CreateInAppAppealIdentityCaseRequest {
  // inAppAppealInput
  // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
  InAppAppealInput inAppAppealInput = 1;
  // elite
  bool elite = 2;
  // dasher_input
  string dasher_input = 3;
  // deactivation_reason
  string deactivation_reason = 4;
}

// CreateInAppAppealFraudCaseRequest
message CreateInAppAppealFraudCaseRequest {
  // inAppAppealInput
  // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
  InAppAppealInput inAppAppealInput = 1;
  // elite
  bool elite = 2;
  // dasher_input
  string dasher_input = 3;
  // queueName
  // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
  string queueName = 4;
  // delivery_ids
  repeated DeliveryId delivery_ids = 5;
  // deactivation_reason
  string deactivation_reason = 6;
}
