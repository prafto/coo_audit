syntax = "proto3";
// buf:lint:ignore PACKAGE_SAME_DIRECTORY
// buf:lint:ignore PACKAGE_VERSION_SUFFIX
package risk.workstation;

import "google/protobuf/timestamp.proto";
import "risk/account.proto";
import "risk/workstation/list.proto";
import "risk/workstation/workstation_common.proto";

option go_package = "workstationpb";
option java_generic_services = true;
option java_multiple_files = true;
option java_outer_classname = "ListServiceProto";
option java_package = "com.doordash.risk.proto.workstation";

// ListService
service ListService {
  /*
     List API's
  */
  // get all list (filter)
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc GetLists(GetListsRequest) returns (GetListsResponse);

  // get info for a single list
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc GetList(GetListRequest) returns (GetListResponse);

  // create a list
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc AddList(AddListRequest) returns (AddListResponse);

  // update a list
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc UpdateList(UpdateListRequest) returns (UpdateListResponse);

  // remove a list
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc RemoveList(RemoveListRequest) returns (RemoveListResponse);

  /*
     List Item API's
  */
  // get all items from a list (filter + pagination)
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc GetListItems(GetListItemsRequest) returns (GetListItemsResponse);
  // get singular item
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc GetListItemByKey(GetListItemByKeyRequest) returns (GetListItemByKeyResponse);

  // Add item(s) to list
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc AddListItem(AddListItemRequest) returns (AddListItemResponse);
  // AddListItems
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc AddListItems(AddListItemsRequest) returns (AddListItemsResponse);

  // update item in list
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc UpdateListItem(UpdateListItemRequest) returns (UpdateListItemResponse);

  // remove item from list
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc RemoveListItem(RemoveListItemRequest) returns (RemoveListItemResponse);
  // RemoveListItems
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc RemoveListItems(RemoveListItemsRequest) returns (RemoveListItemsResponse);

  // get all history by list ID (filter)
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc GetHistory(GetHistoryRequest) returns (GetHistoryResponse);

  /*
     Label API's
     99% of the rpc bodies will be the same but allows us to track labeling separately
  */

  // Get all labels that can be added for item types (i.e. get me all label lists for cx, user, and bank account)
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc ListLabels(ListLabelsRequest) returns (ListLabelsResponse);
  // Get all existing labels for this item type and item key (i.e. get me all the labels for cx id: 206371901)
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc GetLabelsForItem(GetLabelsForItemRequest) returns (GetLabelsForItemResponse);
  // AddLabel
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc AddLabel(AddLabelRequest) returns (AddLabelResponse);
  // AddLabels
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc AddLabels(AddLabelsRequest) returns (AddLabelsResponse);
  // UpdateLabel
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc UpdateLabel(UpdateLabelRequest) returns (UpdateLabelResponse);
  // RemoveLabel
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc RemoveLabel(RemoveLabelRequest) returns (RemoveLabelResponse);
  // RemoveLabels
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc RemoveLabels(RemoveLabelsRequest) returns (RemoveLabelsResponse);
}

// -------------------------------------------------------------------------
// List                                                                     |
// -------------------------------------------------------------------------

// GetListsRequest
message GetListsRequest {
  // No filtering if value is IT_UNKNOWN.
  ItemType item_type_filter = 1;

  // Filters on key/name/description that contains the filter
  string search_filter = 2;

  // paging_option
  PagingOptions paging_option = 3;
}

// GetListsResponse
message GetListsResponse {
  // lists
  repeated List lists = 1; // list result using the filter and limit/offset
  // total_results
  int32 total_results = 2; // total number of results excluding limit/offset, will be used for paging
}

// GetListRequest
message GetListRequest {
  // id_type
  oneof id_type {
    // id
    int32 id = 1;
    // key
    string key = 2;
  }
}

// GetListResponse
message GetListResponse {
  // list
  List list = 1;
}

// AddListRequest
message AddListRequest {
  // list_metadata
  ListMetadata list_metadata = 1;
  // author_id
  UserId author_id = 2;
}

// AddListResponse
message AddListResponse {
  // list
  List list = 1;
}

// UpdateListRequest
message UpdateListRequest {
  // id
  int32 id = 1;
  // base_version
  int32 base_version = 2;

  // name
  string name = 3;
  // description
  string description = 4;

  // Backend will validate that only the type's parameters are changed, but not the type.
  oneof item_value_type {
    // no_value_type
    bool no_value_type = 5;
    // label_value_type
    ListLabelType label_value_type = 6;
    // yaml_value_type
    ListYamlType yaml_value_type = 7;
  }

  // reason
  string reason = 8;
  // author_id
  UserId author_id = 9;
}

// UpdateListResponse
message UpdateListResponse {
  // list
  List list = 1;
}

// RemoveListRequest
message RemoveListRequest {
  // id
  int32 id = 1;
  // author_id
  UserId author_id = 2;
}

// RemoveListResponse
message RemoveListResponse {
  // true if a list was deleted
  bool deleted = 1;
}

// -------------------------------------------------------------------------
// ListItem                                                                 |
// -------------------------------------------------------------------------

// GetListItemsRequest
message GetListItemsRequest {
  // list_id
  int32 list_id = 1;

  // Filters on item_key/item_data/authors that contains the filter
  string search_filter = 2;

  // SortColumn
  enum SortColumn {
    // NONE
    // buf:lint:ignore ENUM_VALUE_PREFIX
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    NONE = 0;
    // ITEM_KEY
    // buf:lint:ignore ENUM_VALUE_PREFIX
    ITEM_KEY = 1;
    // UPDATED_AT
    // buf:lint:ignore ENUM_VALUE_PREFIX
    UPDATED_AT = 2;
  }
  // sort_by
  SortColumn sort_by = 3;
  // sort_direction
  SortDirection sort_direction = 4;

  // paging_option
  PagingOptions paging_option = 5;

  // include_expired_items
  bool include_expired_items = 6;
}

// GetListItemsResponse
message GetListItemsResponse {
  // list_items
  repeated ListItem list_items = 1;
  // has_more
  bool has_more = 2;
}

// GetListItemByKeyRequest
message GetListItemByKeyRequest {
  // list_id
  int32 list_id = 1;
  // Filters on item_key only
  string item_key = 2;
  // include_expired_items
  bool include_expired_items = 3;
}

// GetListItemByKeyResponse
message GetListItemByKeyResponse {
  // list_item
  ListItem list_item = 1;
}

// AddListItemRequest
message AddListItemRequest {
  // list_id
  int32 list_id = 1;
  // item_key
  string item_key = 2;
  // item_data
  string item_data = 3;
  // reason
  string reason = 4;
  // author_id
  UserId author_id = 5;
  // expires_at
  google.protobuf.Timestamp expires_at = 6;
}

// AddListItemResponse
message AddListItemResponse {
  // item
  ListItem item = 1;
}

// AddListItemsRequest
message AddListItemsRequest {
  // list_id
  int32 list_id = 1;
  // reason
  string reason = 2;
  // author_id
  UserId author_id = 3;

  // item_keys_to_item_data
  map<string, string> item_keys_to_item_data = 4;
  // expires_at
  google.protobuf.Timestamp expires_at = 5;
}

// AddListItemsResponse
message AddListItemsResponse {
  // added_items
  repeated ListItem added_items = 1;
  // items_not_added
  repeated string items_not_added = 2;
}

// UpdateListItemRequest
message UpdateListItemRequest {
  // list_id
  int32 list_id = 1;
  // base_item_version
  int32 base_item_version = 2;
  // item_key
  string item_key = 3;
  // item_data
  string item_data = 4;
  // reason
  string reason = 5;
  // author_id
  UserId author_id = 6;
  // expires_at
  google.protobuf.Timestamp expires_at = 7;
}

// UpdateListItemResponse
message UpdateListItemResponse {
  // item
  ListItem item = 1;
}

// RemoveListItemRequest
message RemoveListItemRequest {
  // list_id
  int32 list_id = 1;
  // item_key
  string item_key = 2;
  // base_item_version
  int32 base_item_version = 3;
  // reason
  string reason = 4;
  // author_id
  UserId author_id = 5;
}

// RemoveListItemResponse
message RemoveListItemResponse {
  // deleted
  bool deleted = 1;
}

// RemoveListItemsRequest
message RemoveListItemsRequest {
  // list_id
  int32 list_id = 1;
  // reason
  string reason = 2;
  // author_id
  UserId author_id = 3;
  // item_keys
  repeated string item_keys = 4;
}

// RemoveListItemsResponse
message RemoveListItemsResponse {
  // deleted_count
  int32 deleted_count = 1;
}

// -------------------------------------------------------------------------
// Labeling
// -------------------------------------------------------------------------

// ListLabelsRequest
message ListLabelsRequest {
  // item_type_filters
  repeated ItemType item_type_filters = 1;
  // paging_option
  PagingOptions paging_option = 2;
}

// ListLabelsResponse
message ListLabelsResponse {
  // lists
  repeated List lists = 1; // list result using the filter and limit/offset
  // total_results
  int32 total_results = 2; // total number of results excluding limit/offset, will be used for paging
}

// GetLabelsForItemRequest
message GetLabelsForItemRequest {
  // item_type
  ItemType item_type = 1;
  // item_key
  string item_key = 2;
}

// GetLabelsForItemResponse
message GetLabelsForItemResponse {
  // labels
  repeated ListItem labels = 1;
}

// AddLabelRequest
message AddLabelRequest {
  // list_id
  int32 list_id = 1;
  // item_key
  string item_key = 2;
  // item_data
  string item_data = 3;
  // reason
  string reason = 4;
  // author_id
  UserId author_id = 5;
  // source
  HistoryEntry.ChangeSource source = 6;
}

// AddLabelResponse
message AddLabelResponse {
  // item
  ListItem item = 1;
}

// AddLabelsRequest
message AddLabelsRequest {
  // list_id
  int32 list_id = 1;
  // reason
  string reason = 2;
  // author_id
  UserId author_id = 3;
  // source
  HistoryEntry.ChangeSource source = 4;

  // item_keys_to_label
  map<string, string> item_keys_to_label = 5;
}

// AddLabelsResponse
message AddLabelsResponse {
  // added_items
  repeated ListItem added_items = 1;
  // items_not_added
  repeated string items_not_added = 2;
}

// UpdateLabelRequest
message UpdateLabelRequest {
  // list_id
  int32 list_id = 1;
  // base_item_version
  int32 base_item_version = 2;
  // item_key
  string item_key = 3;
  // item_data
  string item_data = 4;
  // reason
  string reason = 5;
  // author_id
  UserId author_id = 6;
  // source
  HistoryEntry.ChangeSource source = 7;
}

// UpdateLabelResponse
message UpdateLabelResponse {
  // item
  ListItem item = 1;
}

// RemoveLabelRequest
message RemoveLabelRequest {
  // list_id
  int32 list_id = 1;
  // item_key
  string item_key = 2;
  // base_item_version
  int32 base_item_version = 3;
  // reason
  string reason = 4;
  // author_id
  UserId author_id = 5;
  // source
  HistoryEntry.ChangeSource source = 7;
}

// RemoveLabelResponse
message RemoveLabelResponse {
  // deleted
  bool deleted = 1;
}

// RemoveLabelsRequest
message RemoveLabelsRequest {
  // list_id
  int32 list_id = 1;
  // reason
  string reason = 2;
  // author_id
  UserId author_id = 3;
  // source
  HistoryEntry.ChangeSource source = 4;
  // item_keys
  repeated string item_keys = 5;
}

// RemoveLabelsResponse
message RemoveLabelsResponse {
  // deleted_count
  int32 deleted_count = 1;
}

// -------------------------------------------------------------------------
// List History
// -------------------------------------------------------------------------
// GetHistoryRequest
message GetHistoryRequest {
  // list_id
  int32 list_id = 1;
  // search for reason, old/new values, item_key
  string search_filter = 2;

  // list or item for now
  repeated HistoryEntry.ChangeType change_types = 3;

  // paging_option
  PagingOptions paging_option = 4;
}

// GetHistoryResponse
message GetHistoryResponse {
  // history_entries
  repeated HistoryEntry history_entries = 1;
  // has_more
  bool has_more = 2;
}
