syntax = "proto3";
// buf:lint:ignore PACKAGE_SAME_DIRECTORY
// buf:lint:ignore PACKAGE_VERSION_SUFFIX
package risk.challenges;

import "google/protobuf/struct.proto";
import "risk/account.proto";
import "risk/challenges/common.proto";
import "risk/context.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_outer_classname = "CardChallengeProtos";
option java_package = "com.doordash.risk.proto.challenges";

// CardChallengeService
service CardChallengeService {
  // VerifySecondCard
  // buf:lint:ignore RPC_REQUEST_STANDARD_NAME
  // buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc VerifySecondCard(SecondCardVerificationRequest) returns (SecondCardVerificationResponse) {
    option deprecated = true;
  }
  // VerifyCardScan
  // buf:lint:ignore RPC_REQUEST_STANDARD_NAME
  // buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc VerifyCardScan(CardScanVerificationRequest) returns (CardScanVerificationResponse) {
    option deprecated = true;
  }
  // VerifyCardReentry
  // buf:lint:ignore RPC_REQUEST_STANDARD_NAME
  // buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc VerifyCardReentry(CardReentryVerificationRequest) returns (CardVerificationResponse) {
    option deprecated = true;
  }
  // CheckCardChallengeStatus
  // buf:lint:ignore RPC_REQUEST_STANDARD_NAME
  // buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc CheckCardChallengeStatus(CardChallengeStatusRequest) returns (CardChallengeStatusResponse) {
    option deprecated = true;
  }
  // GenerateCardScanStripeCiv
  // buf:lint:ignore RPC_REQUEST_STANDARD_NAME
  // buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc GenerateCardScanStripeCiv(CardScanGenerateStripeCivRequest) returns (CardScanGenerateStripeCivResponse) {
    option deprecated = true;
  }
  // VerifyDynetiCardScan
  // buf:lint:ignore RPC_REQUEST_STANDARD_NAME
  // buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  rpc VerifyDynetiCardScan(DynetiCardScanVerificationRequest) returns (DynetiCardScanVerificationResponse);
}

// DynetiCardScanVerificationRequest
message DynetiCardScanVerificationRequest {
  // payment_card_id
  string payment_card_id = 1;
  // verify_token
  string verify_token = 2;
  // consumer_id
  ConsumerId consumer_id = 3;
  // risk_context
  RiskContext risk_context = 4;
  // cart_id
  string cart_id = 5;
  // scan_id
  string scan_id = 6;
  // payload_id
  string payload_id = 7;
  // tokenization_provider
  TokenizationProvider tokenization_provider = 8;
}

// DynetiCardScanVerificationResponse
message DynetiCardScanVerificationResponse {
  // Success
  message Success {
    // user_id
    string user_id = 1;
    // verification_details
    google.protobuf.Struct verification_details = 2;
  }

  // result
  oneof result {
    // success
    Success success = 1;
    // error
    ChallengeError error = 2;
  }
}

// SecondCardVerificationRequest
message SecondCardVerificationRequest {
  // risk_context
  RiskContext risk_context = 4;
  // paymentCardId
  // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
  string paymentCardId = 1;
  // consumerId
  // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
  ConsumerId consumerId = 3;
  // tokenizationProvider
  // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
  TokenizationProvider tokenizationProvider = 5;

  // identifier
  oneof identifier {
    // verifyToken
    // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
    string verifyToken = 2;
    // rawSecondCardData
    // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
    RawSecondCardData rawSecondCardData = 6;
  }
}

// SecondCardVerificationResponse
message SecondCardVerificationResponse {
  // Success
  message Success {
    // user_id
    string user_id = 1;
    // verification_details
    google.protobuf.Struct verification_details = 3;
  }

  // result
  oneof result {
    // success
    Success success = 1;
    // error
    ChallengeError error = 2;
  }
}

// CardScanGenerateStripeCivRequest
message CardScanGenerateStripeCivRequest {
  // Only risk_context.user_identity.{consumer_id, user_id} are mandatory.
  // Other fields are only for event tracking purposes.
  RiskContext risk_context = 1;

  // Optional. If set, Stripe will make sure the scanned card has the same bin and last4
  // as the given paymentCardId (aka dd_stripe_card_id).
  // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
  string paymentCardId = 2;
}

// CardScanGenerateStripeCivResponse
message CardScanGenerateStripeCivResponse {
  // Success
  message Success {
    // civ_id
    string civ_id = 1;
    // client_secret
    string client_secret = 2;
  }

  // result
  oneof result {
    // success
    Success success = 1;
    // error
    ChallengeError error = 2;
  }
}

// CardScanVerificationRequest
message CardScanVerificationRequest {
  // paymentCardId
  // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
  string paymentCardId = 1;
  // consumerId
  // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
  ConsumerId consumerId = 3;
  // risk_context
  RiskContext risk_context = 4;
  // tokenizationProvider
  // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
  TokenizationProvider tokenizationProvider = 5;
  // encrypted_payload
  string encrypted_payload = 7;
  // civ_id
  string civ_id = 8;
  // cart_id
  string cart_id = 9;

  // identifier
  oneof identifier {
    // verifyToken
    // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
    string verifyToken = 2;
    // rawCardData
    // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
    RawCardData rawCardData = 6;
  }
}

// CardScanVerificationResponse
message CardScanVerificationResponse {
  // Success
  message Success {
    // user_id
    string user_id = 1;
    // verification_details
    google.protobuf.Struct verification_details = 3;
  }

  // result
  oneof result {
    // success
    Success success = 1;
    // error
    ChallengeError error = 2;
  }

  // civ_id
  string civ_id = 3;
  // client_secret
  string client_secret = 4;
}

// CardReentryVerificationRequest
message CardReentryVerificationRequest {
  // paymentCardId
  // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
  string paymentCardId = 1;
  // consumerId
  // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
  ConsumerId consumerId = 3;
  // risk_context
  RiskContext risk_context = 4;
  // tokenizationProvider
  // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
  TokenizationProvider tokenizationProvider = 5;

  // identifier
  oneof identifier {
    // verifyToken
    // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
    string verifyToken = 2;
    // rawCardData
    // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
    RawCardData rawCardData = 6;
  }
}

// CardVerificationResponse
message CardVerificationResponse {
  // Success
  message Success {}

  // result
  oneof result {
    // success
    Success success = 1;
    // error
    ChallengeError error = 2;
  }
}

// CardChallengeStatusRequest
message CardChallengeStatusRequest {
  // card_identifier
  oneof card_identifier {
    // stripe_card_id
    string stripe_card_id = 1;
    // payment_method_id
    string payment_method_id = 2;
  }
  // consumer_id
  ConsumerId consumer_id = 3;
}

// CardChallengeStatusResponse
message CardChallengeStatusResponse {
  // state_found
  bool state_found = 1;
  // is_scanned
  bool is_scanned = 2;
  // is_verified
  bool is_verified = 3;
  // verification_card_fingerprint
  string verification_card_fingerprint = 4;
}

// RawCardData
message RawCardData {
  // number
  string number = 1;
  // expMonth
  // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
  int32 expMonth = 2;
  // expYear
  // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
  int32 expYear = 3;
}

// breaking uppercase convention as the enum is used lowercase in all services
enum TokenizationProvider {
  // stripe
  // buf:lint:ignore ENUM_VALUE_PREFIX
  // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
  // buf:lint:ignore ENUM_VALUE_UPPER_SNAKE_CASE
  stripe = 0;
  // vgs
  // buf:lint:ignore ENUM_VALUE_PREFIX
  // buf:lint:ignore ENUM_VALUE_UPPER_SNAKE_CASE
  vgs = 1;
}

// RawSecondCardData
message RawSecondCardData {
  // number
  string number = 1;
  // expMonth
  // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
  int32 expMonth = 2;
  // expYear
  // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
  int32 expYear = 3;
  // addressLine1
  // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
  string addressLine1 = 4;
  // addressLine2
  // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
  string addressLine2 = 5;
  // cvv
  string cvv = 6;
  // zip
  string zip = 7;
  // city
  string city = 8;
  // state
  string state = 9;
}
