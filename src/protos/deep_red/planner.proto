syntax = "proto3";

// buf:lint:ignore DIRECTORY_SAME_PACKAGE
// buf:lint:ignore PACKAGE_VERSION_SUFFIX
package deep_red.v1;

import "common/common.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "doordash.deepred";

// apis for fulfillment planner
service DeepRedFulfillmentPlannerService {
  // api for store selection
  rpc GetPreferredAlternateStoresForCustomerOrder(GetPreferredAlternateStoresForCustomerOrderRequest) returns (GetPreferredAlternateStoresForCustomerOrderResponse);
  // api to return logistics signals e.g. cost estimations for double dash store candidates
  rpc GetFulfillmentLogisticsSignals(GetFulfillmentLogisticsSignalsRequest) returns (GetFulfillmentLogisticsSignalsResponse);
}

// request for GetFulfillmentLogisticsSignals
message GetFulfillmentLogisticsSignalsRequest {
  ConsumerOrder consumer_order = 1;
  repeated Store candidate_stores = 2;
  // fulfillment use case
  FulfillmentUseCase fulfillment_use_case = 3;
}

// fulfilment use case to decide algorithm
enum FulfillmentUseCase {
  FULFILLMENT_USE_CASE_UNSPECIFIED = 0;
  // post checkout double dash store ranking
  FULFILLMENT_USE_CASE_DOUBLE_DASH_POST_CHECKOUT = 1;
  // pre checkout double dash store ranking
  FULFILLMENT_USE_CASE_DOUBLE_DASH_PRE_CHECKOUT = 2;
}

// response for GetFulfillmentLogisticsSignals
message GetFulfillmentLogisticsSignalsResponse {
  // store candidates with calculated logistics signals
  repeated StoreCandidatesLogisticsSignals store_candidates_logistic_signals = 1;
}

// store candidate with calculated logistics signals
message StoreCandidatesLogisticsSignals {
  google.protobuf.Int64Value store_id = 1;
  // cost estimation in dollars
  google.protobuf.DoubleValue cost = 2;
}

// request for GetPreferredAlternateStoresForCustomerOrder
message GetPreferredAlternateStoresForCustomerOrderRequest {
  // consumer order to be costed
  ConsumerOrder consumer_order = 1;
  repeated Store candidate_stores = 2;
}

// consumer order details
message ConsumerOrder {
  google.protobuf.Int64Value consumer_id = 1;
  Store store = 2;
  common.Location consumer_location = 3;
  google.protobuf.StringValue order_uuid = 4;
  google.protobuf.Timestamp dropoff_window_start_time = 5;
  google.protobuf.Timestamp dropoff_window_end_time = 6;
  google.protobuf.Timestamp pickup_window_start_time = 7;
  google.protobuf.Timestamp pickup_window_end_time = 8;
}

// Store info
message Store {
  reserved 4;
  google.protobuf.Int64Value store_id = 1;
  common.Location store_location = 2;
  google.protobuf.Int64Value starting_point_id = 3;
}

message GetPreferredAlternateStoresForCustomerOrderResponse {
  repeated StoreFulfillmentSummary store_fulfillment_summary = 1;
}

// fulfillment summary for a store
message StoreFulfillmentSummary {
  google.protobuf.Int64Value store_id = 1;
  // expected fulfillment score
  google.protobuf.DoubleValue score = 2;
}
