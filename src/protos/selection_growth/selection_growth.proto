syntax = "proto3";

// buf:lint:ignore DIRECTORY_SAME_PACKAGE
package selection_growth_service.web.v1;

import "common/service_client_config.proto";
import "google/protobuf/wrappers.proto";
import "selection_growth/common.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.selectiongrowthgrpc";

// Merchant Geo Coverage Service
service MxGeoCoverageService {
  option (service_client.client_config).retry_config.max_attempts = 3;

  // grpc code 8 (RESOURCE_EXHAUSTED) is among the codes that are not retriable by default.
  option (service_client.client_config).retry_config.do_retry_grpc_code = 8;

  // As an example, let's override this default of 10. Now, the circuit breaker will
  // only start detecting failures after at least 20 requests have been made.
  option (service_client.client_config).circuit_breaker_config.minimum_request_threshold = 20;

  // GetMerchantGeoCoverageByIds rpc
  rpc GetMerchantGeoCoverageByIds(GetMerchantGeoCoverageByIdsRequest) returns (GetMerchantGeoCoverageByIdsResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 200;
  }

  // GetMerchantGeoCoverageThresholds
  rpc GetMerchantGeoCoverageThresholds(GetMerchantGeoCoverageThresholdsRequest) returns (GetMerchantGeoCoverageThresholdsResponse);

  // GenerateMerchantGeoCoverage
  rpc GenerateMerchantGeoCoverage(GenerateMerchantGeoCoverageRequest) returns (GenerateMerchantGeoCoverageResponse);

  // GenerateMerchantGeoCoverageV2
  rpc GenerateMerchantGeoCoverageV2(GenerateMerchantGeoCoverageV2Request) returns (GenerateMerchantGeoCoverageV2Response);

  // GenerateTravelInfoByH3
  rpc GenerateTravelInfoByH3(GenerateTravelInfoByH3Request) returns (GenerateTravelInfoByH3Response);

  // UpdateSubmarketLevelThresholds
  rpc UpdateSubmarketLevelThresholds(UpdateSubmarketLevelThresholdsRequest) returns (UpdateSubmarketLevelThresholdsResponse);

  // UpsertSubmarketLevelThresholds
  rpc UpsertSubmarketLevelThresholds(UpsertSubmarketLevelThresholdsRequest) returns (UpsertSubmarketLevelThresholdsResponse);

  // StartMxGeoCoverageBackFill
  rpc MerchantGeoCoverageBackFill(MerchantGeoCoverageBackFillRequest) returns (MerchantGeoCoverageBackFillResponse);
}

// Request to fetch geo coverage for merchant
message GetMerchantGeoCoverageByIdsRequest {
  // store id
  repeated string store_ids = 1;
  // compact h3 list
  google.protobuf.BoolValue compacted = 2;
}

// Response for merchant geo coverage
message GetMerchantGeoCoverageByIdsResponse {
  // CoverageData
  repeated selection_growth_service.common.v1.CoverageData data = 1;
  // h3_resolution
  int32 h3_resolution = 2;
}

// Request to fetch geo coverage thresholds for merchant
message GetMerchantGeoCoverageThresholdsRequest {
  // entities
  repeated selection_growth_service.common.v1.Entity entities = 1;
}

// Response for merchant geo coverage thresholds
message GetMerchantGeoCoverageThresholdsResponse {
  // actual thresholds
  repeated selection_growth_service.common.v1.Threshold thresholds = 1;
  // submitted thresholds
  repeated selection_growth_service.common.v1.Threshold submitted_thresholds = 2;
  // is new vertical
  google.protobuf.BoolValue is_new_vertical = 3;
  // is in mx exclusion list
  google.protobuf.BoolValue is_in_mx_exclusion_list = 4;
}

// Request to fetch geo coverage for merchant
message GenerateMerchantGeoCoverageRequest {
  // store request
  repeated StoreRequest stores = 1;
  // compact h3 list
  google.protobuf.BoolValue compacted = 2;
}

// StoreRequest
message StoreRequest {
  // store_id
  string store_id = 1;
  // radius in meters
  google.protobuf.DoubleValue store_radius = 2;
  // isochroneCoefficient
  // math.Floor(math.Min(radiusInMiles*isochrone_coefficient*60, MaxIsochroneInSeconds))
  google.protobuf.DoubleValue isochrone_coefficient = 3;
  // isodistanceCoefficient
  // math.Floor(math.Min(radiusInMiles * isodistance_coefficient * MilesToMCoefficient, MaxIsodistanceInMeters))
  google.protobuf.DoubleValue isodistance_coefficient = 4;
  // max delivery radius in meters
  google.protobuf.DoubleValue max_delivery_radius = 5;
}

// Osrm request for travel route
message GenerateTravelInfoByH3Request {
  // Start point
  selection_growth_service.common.v1.Coordinate store_coordinate = 1;
  // Destinations
  repeated string h3_index = 2;
}

// Response for merchant geo coverage
message GenerateMerchantGeoCoverageResponse {
  // CoverageData
  repeated selection_growth_service.common.v1.CoverageData data = 1;
  // h3_resolution
  int32 h3_resolution = 2;
}

// Osrm response for travel route
message GenerateTravelInfoByH3Response {
  // osrm travel info
  selection_growth_service.common.v1.OsrmTravelInfoWrapper data = 1;
}

// Request to generate V2 geo coverage for merchant
message GenerateMerchantGeoCoverageV2Request {
  // store request
  repeated selection_growth_service.common.v1.Threshold thresholds = 1;
}

// Response for generating V2 geo coverage for merchant
message GenerateMerchantGeoCoverageV2Response {
  // response
  string response = 1;
}

// Request to update submarket level thresholds
message UpdateSubmarketLevelThresholdsRequest {
  // thresholds
  repeated selection_growth_service.common.v1.Threshold thresholds = 1;
}

// Response for updating submarket level thresholds
message UpdateSubmarketLevelThresholdsResponse {
  // response
  string response = 1;
}

// Request to upsert submarket level thresholds
message UpsertSubmarketLevelThresholdsRequest {
  // thresholds
  repeated selection_growth_service.common.v1.Threshold thresholds = 1;
}

// Response to upsert submarket level thresholds
message UpsertSubmarketLevelThresholdsResponse {
  // response
  string response = 1;
}

// Request to start geo coverage backFill task
message MerchantGeoCoverageBackFillRequest {
  // backFill from database or S3 bucket
  string back_fill_type = 1;
  // backFill which data coverage
  string coverage_type = 2;
  // if backFill from S3, indicate which bucket to pick data
  string back_fill_date = 3;
  // markets that plan to backFill
  repeated string markets = 4;
  // populate priority event when backFilling
  bool enable_priority_event = 5;
}

// response for backFill task
message MerchantGeoCoverageBackFillResponse {
  // response
  google.protobuf.BoolValue is_started = 1;
}
