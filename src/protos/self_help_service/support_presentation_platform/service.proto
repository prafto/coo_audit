syntax = "proto3";
package self_help_service.support_presentation_platform.v1;

import "doordash.api/annotations.proto";
import "doordash.api/field_validate.proto";
import "google/api/annotations.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "self_help_service/support_presentation_platform/common.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.selfhelpservice.spp";

// Service contract of support presentation platform.
// Endpoints are exposed using Unified Gateway.
service SupportPresentationPlatform {
  option (doordash.api.service) = {
    name: "self-help-service"
    // service: "self-help-service", app: spp-web
    url: "self-help-service-spp-web.service.prod.ddsd"
    port: 50051
    name_spaces: ["self_help"]
    api_key_name: "SELF_HELP_SERVICE_API_KEY"
    owner: {
      id: "delivery-reliability-self-serve-expe"
      name: "self-serve-experience-service"
      slack_channel: "#ask-self-serve-experience"
      email_alias: "eng-self-serve-experience@doordash.com"
    }
    // Target products include Cx, Dx, Internal (Tx)
    target_products: [
      CX,
      DX,
      INTERNAL
    ]
  };

  // RPC to get support content using an orchestration system.
  rpc GetSupportContent(GetSupportContentRequest) returns (GetSupportContentResponse) {
    option (google.api.http) = {
      post: "/self_help/v1/support_presentation_platform/support_content"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [
        CX_USER,
        DX_USER,
        DD_EMPLOYEE
      ]
      inject_user_roles: true
    };
  }

  // RPC to get support content from the respective content provider.
  rpc GetSupportContentById(GetSupportContentByIdRequest) returns (GetSupportContentByIdResponse) {
    option (google.api.http) = {
      post: "/self_help/v1/support_presentation_platform/support_content_by_id"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [
        CX_USER,
        DX_USER,
        DD_EMPLOYEE
      ]
      inject_user_roles: true
    };
  }
}

// Represents request for getting support content using an orchestration system
// (e.g. workflow platform).
message GetSupportContentRequest {
  // Domain context: Order/Delivery/Task/support-case id
  self_help_service.support_presentation_platform.v1.DomainContext domain_context = 1;

  // Client Context: type of experience: Cx, Dx, Mx, Tx, client state etc.
  self_help_service.support_presentation_platform.v1.ClientContext client_context = 2;

  // Session context: Clients are expected to send session context back to platform
  // for the requests that are part of the same flow. Clients are not expected to
  // maintain session on their end.
  // TO BE DEPRECATED: This field will be deprecated when we have completed dev mode.
  self_help_service.support_presentation_platform.v1.SessionContext session_context = 3;

  // Orchestration context
  oneof orchestration_context {
    // executes workflow, gets support content id, returns support content response
    self_help_service.support_presentation_platform.v1.WorkflowPlatformContext workflow_platform_context = 4;
  }
}

// Represents support content received after executing an orchestration system
// and getting content from the respective content provider.
message GetSupportContentResponse {
  // Deprecate "contents"
  reserved 1;
  reserved "contents";

  // Session context shared by backend. Clients will return the session
  // context in request for all subsequent interactions.
  // TO BE DEPRECATED: This field will be deprecated when we have completed dev mode.
  self_help_service.support_presentation_platform.v1.SessionContext session_context = 2;

  // Serialized support content.
  self_help_service.support_presentation_platform.v1.SupportContent support_content = 3;

  // Orchestration context
  oneof orchestration_context {
    // executes workflow, gets support content id, returns support content response
    self_help_service.support_presentation_platform.v1.WorkflowPlatformContext workflow_platform_context = 4;
  }
}

// Represents request for getting support content directly from content provider
// (without any orchestration execution).
message GetSupportContentByIdRequest {
  // Domain context: Order/Delivery/Task/support-case id
  self_help_service.support_presentation_platform.v1.DomainContext domain_context = 1;

  // Client Context: Cx, Dx, Mx, Tx
  self_help_service.support_presentation_platform.v1.ClientContext client_context = 2;

  // gets the support content response for the given content
  self_help_service.support_presentation_platform.v1.SupportContentContext support_content_context = 3;
}

// Represents support content received from content provider.
message GetSupportContentByIdResponse {
  // Deprecate "contents"
  reserved 1;
  reserved "contents";

  // Serialized support content.
  self_help_service.support_presentation_platform.v1.SupportContent support_content = 2;
}
