syntax = "proto3";
// buf:lint:ignore DIRECTORY_SAME_PACKAGE
// buf:lint:ignore PACKAGE_VERSION_SUFFIX
package merchant_integrations;

import "common/code.proto";
import "common/common.proto";
import "common/money.proto";
import "common/service_client_config.proto";
import "google/protobuf/wrappers.proto";
import "merchant_integrations/menu.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.merchant_integrations";

// Grpc service to manage promotions
service PromotionService {
  // Pull and upsert promotions.
  rpc PullAndUpsertPromotions(PullAndUpsertPromotionsRequest) returns (PullAndUpsertPromotionsResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 3000;
    option (service_client.client_method_config).retry_config.max_attempts = 3;
    // default circuit breaker config
  }
  // DEPRECATED. Applies coupon to basket
  rpc ApplyCouponToBasket(ApplyCouponToBasketRequest) returns (ApplyCouponToBasketResponse) {
    option deprecated = true;
    option (service_client.client_method_config).response_attempt_timeout_millis = 5000;
    option (service_client.client_method_config).retry_config.max_attempts = 3;
    // default circuit breaker config
  }
  // DEPRECATED. Removes coupon from basket
  rpc RemoveCouponFromBasket(RemoveCouponFromBasketRequest) returns (RemoveCouponFromBasketResponse) {
    option deprecated = true;
    option (service_client.client_method_config).response_attempt_timeout_millis = 5000;
    option (service_client.client_method_config).retry_config.max_attempts = 3;
    // default circuit breaker config
  }

  // Applies coupon to basket
  rpc ApplyCoupon(ApplyCouponRequest) returns (ApplyCouponResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 5000;
    option (service_client.client_method_config).retry_config.max_attempts = 3;
    // default circuit breaker config
  }

  // Retrieve external provider cart and fetch discount amount
  rpc RetrieveExternalProviderCart(RetrieveExternalProviderCartRequest) returns (RetrieveExternalProviderCartResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 5000;
    option (service_client.client_method_config).retry_config.max_attempts = 3;
  }
}

// Request to pull and upsert promotions for a store
message PullAndUpsertPromotionsRequest {
  // Stores to pull and upsert promotions for
  repeated Store store = 1;
  // Promotion type to pull and upsert
  PromotionType promotion_type = 2;
}

// Response of pull and upsert menus
message PullAndUpsertPromotionsResponse {
  // Status code
  code.Code code = 1;
  // Response error
  ResponseError error = 2;
}

// Promotion Type
enum PromotionType {
  // Unspecified Promotion Type.
  PROMOTION_TYPE_UNSPECIFIED = 0;
  // Deals
  PROMOTION_TYPE_DEAL = 1;
  // Discount
  PROMOTION_TYPE_DISCOUNT = 2;
}

// RemoveCouponFromBasket Request
message RemoveCouponFromBasketRequest {
  option deprecated = true;
  // External loyalty provider to integrate with
  google.protobuf.StringValue provider_type = 1;
  // Coupon related data
  money.PromoCouponData promotion_coupon_data = 2;
  // optional session id - used for punchh and olo integration to fetch API token
  google.protobuf.StringValue session_id = 3;
}

// RemoveCouponFromBasket Response
message RemoveCouponFromBasketResponse {
  option deprecated = true;
  // Success
  message Success {
    // Coupon transaction details
    money.PromoCouponDetails details = 1;
  }
  // result is either success or error
  oneof result {
    // on success, return the id of the reversed order transaction
    Success success = 1;
    // on failure, return error
    ResponseError error = 2;
  }
}

// ApplyCouponToBasket Request
message ApplyCouponToBasketRequest {
  option deprecated = true;
  // External loyalty provider to integrate with
  google.protobuf.StringValue provider_type = 1;
  // Coupon related data
  money.PromoCouponData promotion_coupon_data = 2;
  // optional session id - used for punchh and olo integration to fetch API token
  google.protobuf.StringValue session_id = 3;
}

// ApplyCouponToBasket Response
message ApplyCouponToBasketResponse {
  option deprecated = true;
  // Success
  message Success {
    // Coupon transaction details
    money.PromoCouponDetails details = 1;
  }
  // result is either success or error
  oneof result {
    // on success, return the id of the reversed order transaction
    Success success = 1;
    // on failure, return error
    ResponseError error = 2;
  }
}

// ApplyCoupon Request
message ApplyCouponRequest {
  // External loyalty provider to integrate with
  google.protobuf.StringValue provider_type = 1;
  // Coupon related data
  money.PromoCouponData promotion_coupon_data = 2;
  // optional session id - used for punchh and olo integration to fetch API token
  google.protobuf.StringValue session_id = 3;
}

// ApplyCoupon Response
message ApplyCouponResponse {
  // Success
  message Success {}
  // result is either success or error
  oneof result {
    // on success, return the id of the reversed order transaction
    Success success = 1;
    // on failure, return error
    ResponseError error = 2;
  }
}

// Fetch cart from third-party provider and retrieve payment info
message RetrieveExternalProviderCartRequest {
  // used to indicate provider type
  google.protobuf.StringValue provider_type = 1;
  // internal cart id - stores DD cart id
  google.protobuf.StringValue internal_cart_id = 2;
  // store id - internal DD store id
  google.protobuf.StringValue internal_store_id = 3;
}

// Fetch cart from third-party provider and retrieve payment info
message RetrieveExternalProviderCartResponse {
  // on success, return coupon info
  message Success {
    // coupons
    money.PromoCouponDetails coupons = 2;
  }
  // result is either success or error
  oneof result {
    // on success, return the id of the reversed order transaction
    Success success = 1;
    // on failure, return error
    ResponseError error = 2;
  }
}
