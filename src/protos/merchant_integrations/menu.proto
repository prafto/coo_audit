syntax = "proto3";

package merchant_integrations;

import "common/code.proto";
import "common/common.proto";
import "common/inventory.proto";
import "common/marketplace_purchase.proto";
import "common/money.proto";
import "common/service_client_config.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "menu/menu.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.merchant_integrations";

// Grpc service to manage menu catalog
service MenuService {
  // UpsertMenu, which provides mx supplied id and menu data as json.
  rpc UpsertMenuJson(UpsertMenuJsonRequest) returns (UpsertMenuJsonResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 60000;
    option (service_client.client_method_config).retry_config.max_attempts = 3;
    // default circuit breaker config
  }
  // UpsertMenu, which provides mx supplied id and menu data.
  rpc UpsertMenu(UpsertMenuRequest) returns (UpsertMenuResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 3000;
    option (service_client.client_method_config).retry_config.max_attempts = 3;
    // default circuit breaker config
  }

  // BulkUpdateMenuEntities or Upload Menus, which provides menu id, store id and menu data as json.
  rpc BulkUpdateMenuEntitiesJson(BulkUpdateMenuEntitiesJsonRequest) returns (BulkUpdateMenuEntitiesJsonResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 15000;
    option (service_client.client_method_config).retry_config.max_attempts = 3;
    // default circuit breaker config
  }

  // UpsertMenu, which provides mx supplied id and menu data as json for CnG (retail) menu ingestion
  rpc UpsertMenuJsonCnG(UpsertMenuJsonCnGRequest) returns (UpsertMenuJsonCnGResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 3000;
    option (service_client.client_method_config).retry_config.max_attempts = 3;
    // default circuit breaker config
  }

  // Supports CnG partial menu updates
  rpc UpsertPartialMenuJsonCnG(UpsertPartialMenuJsonCnGRequest) returns (UpsertPartialMenuJsonCnGResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 3000;
    option (service_client.client_method_config).retry_config.max_attempts = 3;
    // default circuit breaker config
  }

  // Trigger SML menu updates
  rpc UpdateCreateSml(UpdateCreateSmlRequest) returns (UpdateCreateSmlResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 3000;
    option (service_client.client_method_config).retry_config.max_attempts = 3;
    // default circuit breaker config
  }

  // Trigger SML menu updates
  rpc UpdateMenuEntityTags(UpdateMenuEntityTagsRequest) returns (UpdateMenuEntityTagsResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 3000;
    option (service_client.client_method_config).retry_config.max_attempts = 3;
    // default circuit breaker config
  }

  // Retrieve status of SML menu update request triggered from UpdateCreateSml
  rpc GetUpdateCreateSmlStatus(GetUpdateCreateSmlStatusRequest) returns (GetUpdateCreateSmlStatusResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 3000;
    option (service_client.client_method_config).retry_config.max_attempts = 3;
    // default circuit breaker config
  }

  // Pull and upsert new menus.
  rpc PullAndUpsertMenu(PullAndUpsertMenuRequest) returns (PullAndUpsertMenuResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 3000;
    option (service_client.client_method_config).retry_config.max_attempts = 3;
    // default circuit breaker config
  }

  // Pull Job status for BulkUpdateMenuEntities or Upload Menus, which provides workflow id, run id as params.
  rpc PullBulkUpdateMenuEntitiesStatus(PullBulkUpdateMenuEntitiesStatusRequest) returns (PullBulkUpdateMenuEntitiesStatusResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 15000;
    option (service_client.client_method_config).retry_config.max_attempts = 3;
    // default circuit breaker config
  }

  // Pull and upsert menus in bulk
  rpc BulkPullAndUpsertMenu(BulkPullAndUpsertMenuRequest) returns (BulkPullAndUpsertMenuResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 5000;
    option (service_client.client_method_config).retry_config.max_attempts = 3;
  }

  // Update store menu hours and store menu special hours
  rpc UpdateStoreMenuHoursAndStoreMenuSpecialHours(UpdateStoreMenuHoursAndStoreMenuSpecialHoursRequest) returns (UpdateStoreMenuHoursAndStoreMenuSpecialHoursResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 3000;
    option (service_client.client_method_config).retry_config.max_attempts = 3;
    // default circuit breaker config
  }

  // Pull and upsert menus for active items.
  rpc PullAndUpsertItemStatus(PullAndUpsertItemStatusRequest) returns (PullAndUpsertItemStatusResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 3000;
    option (service_client.client_method_config).retry_config.max_attempts = 3;
    // default circuit breaker config
  }

  // Update Judgment for sticky comparison.
  rpc UpdateJudgmentStickyComparison(UpdateJudgmentStickyComparisonRequest) returns (UpdateJudgmentStickyComparisonResponse);
}

// Request to update Store Menu Hours and Store Menu Special Hours
message UpdateStoreMenuHoursAndStoreMenuSpecialHoursRequest {
  // Store information - Location ID and Provider Type
  Store store = 1;
  // StoreMenu open hours
  repeated OpenHours store_open_hours = 2;
  // StoreMenu special hours
  repeated SpecialHours store_special_hours = 3;
}

// Response update store menu hours and store menu special hours
message UpdateStoreMenuHoursAndStoreMenuSpecialHoursResponse {
  // Status code
  code.Code code = 1;
  // Request ID
  string request_id = 2;
  // error message
  string error_message = 3;
}

// Request for sending in the menu payload
message UpsertMenuJsonRequest {
  //Store Menu json
  google.protobuf.StringValue store_menu = 1;
  google.protobuf.BoolValue is_new_menu = 2;
  google.protobuf.StringValue external_id = 3;
}

message UpsertMenuJsonCnGRequest {
  //Store Menu json
  google.protobuf.StringValue store_menu = 1;
  google.protobuf.BoolValue is_new_menu = 2;
  google.protobuf.StringValue external_id = 3;
  // flag for whether skip removing all suspension of this store
  bool skip_store_unsuspension = 4;
  // flag to determine which service is triggering the cng menu ingestion job
  bool is_ris = 5;
}

message UpsertPartialMenuJsonCnGRequest {
  string store_id = 1;
  GroceryMenu grocery_menu = 2;
  // Flag for whether skip removing all suspension of this store
  bool skipStoreUnsuspension = 3;
}

message UpdateCreateSmlRequest {
  // the storeId that the original SML link points to
  google.protobuf.StringValue origin_store_id = 1;
  // the menuId that the original SML link points to
  google.protobuf.StringValue origin_menu_id = 2;
  // the storeId the new/updated SML link will point to
  google.protobuf.StringValue new_store_id = 3;
  // the menuId the new/updated SML link will point to
  google.protobuf.StringValue new_menu_id = 4;
  // update menu hours. If empty, we will use the same menu hours as the menu we copied from
  repeated menu.Hours hours = 5;
  // set/update SML status. otherwise we use SML status of menu we copied from
  google.protobuf.BoolValue is_store_menu_link_active = 6;
  // flag to determine whether menu level hours should be cleared
  bool should_clear_menu_hours = 7;
}

// menu entity can be either a menu, category, item, extra, or option (option is an item in menu platform)
// the first iteration of this RPC will not be compatible for menu entities within sharedMenus/sharedEntities
// the reason why the first iteration will not support it is that menu platform itself cannot support shared entities updates
// this rpc will only be used for item and extra level tag updates. including menu and category updates will make it a bottleneck to maintain <- due to sharedEntities concept
message UpdateMenuEntityTagsRequest {
  // store id (aka store menu id) of the entity
  string store_id = 1;
  // menu id of the entity; menu id is mandatory for channel based menus (CBM)
  // menu id won't be leveraged if store is CBM or not in any iteration (when this rpc supports shared entities concept)
  string menu_id = 2;
  // contains the information required to update tags (id of the entity and the data of the tags)
  repeated EntityTagInfo entity_tag_info = 3;
  // specify what source triggered this update; if null it will be considered merchant triggered
  google.protobuf.StringValue update_source = 4;
}

message EntityTagInfo {
  string entity_id = 1;
  menu.EntityType entity_type = 2;
  menu.MenuEntityTags entity_tags = 3;
  // for tag updates: specify tag in fieldMask and the value of the tag in entityTagInfo
  // if the fieldMask is empty then no changes are applied, even though the entityTagInfo had a value for the tag
  // for tag removals: if the tag is present in fieldMask but entityTagInfo does not have a value, the tag will be cleared
  google.protobuf.FieldMask update_mask = 4;
}

message UpdateCreateSmlResponse {
  // use this value to query the status of this workflow
  string workflow_status_id = 1;
}

message UpdateMenuEntityTagsResponse {
  // use this value to query the status of this workflow
  string workflow_status_id = 1;
}

message GetUpdateCreateSmlStatusRequest {
  // use this value to query the status of this workflow
  string workflow_status_id = 1;
}

message GetUpdateCreateSmlStatusResponse {
  // use this value to query the status of this workflow
  string workflow_status_id = 1;
  string details = 2;
  WorkflowStatus workflow_status = 3;
}

// Request to Pull BulkUpdateMenuEntities or Upload Menus status
message PullBulkUpdateMenuEntitiesStatusRequest {
  //workflow id
  string workflow_id = 1;
  //run id
  string run_id = 2;
}

// Response of Pulling BulkUpdateMenuEntities or Upload Menus status
message PullBulkUpdateMenuEntitiesStatusResponse {
  //job state for store above to be updated
  MenuStatus status = 1;
  //job details for store above to be updated
  string detail = 2;
  //menu id of menu to be updated or uploaded
  string menu_id = 3;
}

// Request to BulkUpdateMenuEntities or Upload Menus
message BulkUpdateMenuEntitiesJsonRequest {
  //Store Entity List json
  google.protobuf.StringValue store_entity_list = 1;
  //Is catering menu
  google.protobuf.BoolValue is_catering_menu = 2;
}

// Response to BulkUpdateMenuEntities or Upload Menus
message BulkUpdateMenuEntitiesJsonResponse {
  // Status code
  code.Code code = 1;
  // Merchant menu reference
  google.protobuf.StringValue reference = 2;
  // Menu ingestion identifier (workflow id / job id)
  google.protobuf.StringValue ingestion_id = 3;
  // Internal menu id, null if it is not available yet
  google.protobuf.StringValue menu_id = 4;
  // Internal store id, null if it is not available yet
  google.protobuf.StringValue store_id = 5;
  // Resource reference, e.g. s3 link
  google.protobuf.StringValue resource = 6;
  // Menu status
  MenuStatus menu_status = 7;
  // Error list when error
  repeated ResponseError errors = 8;
  //workflow id
  string workflow_id = 9;
  //run id
  string run_id = 10;
}

// Response upsert menu
message UpsertMenuJsonResponse {
  // Status code
  code.Code code = 1;
  // Merchant menu reference
  google.protobuf.StringValue reference = 2;
  // Menu ingestion identifier (workflow id / job id)
  google.protobuf.StringValue ingestion_id = 3;
  // Internal menu id, null if it is not available yet
  google.protobuf.StringValue menu_id = 4;
  // External menu id, null if it is not available yet
  google.protobuf.StringValue external_id = 5;
  // Resource reference, e.g. s3 link
  google.protobuf.StringValue resource = 6;
  // Menu status
  MenuStatus menu_status = 7;
  // Error list when error
  repeated ResponseError errors = 8;
}

// Response upsert menu
message UpsertMenuJsonCnGResponse {
  // Status code
  code.Code code = 1;
  // Merchant menu reference
  google.protobuf.StringValue reference = 2;
  // Menu ingestion identifier (workflow id / job id)
  google.protobuf.StringValue ingestion_id = 3;
  // Internal menu id, null if it is not available yet
  google.protobuf.StringValue menu_id = 4;
  // External menu id, null if it is not available yet
  google.protobuf.StringValue external_id = 5;
  // Resource reference, e.g. s3 link
  google.protobuf.StringValue resource = 6;
  // Menu status
  MenuStatus menu_status = 7;
  // Error list when error
  repeated ResponseError errors = 8;
}

// Response upsert menu
message UpsertPartialMenuJsonCnGResponse {
  // Status code
  code.Code code = 1;
  // Merchant menu reference
  google.protobuf.StringValue reference = 2;
  // Menu ingestion identifier (workflow id / job id)
  google.protobuf.StringValue ingestion_id = 3;
  // Internal menu id, null if it is not available yet
  google.protobuf.StringValue menu_id = 4;
  // Resource reference, e.g. s3 link
  google.protobuf.StringValue resource = 5;
  // Menu status
  MenuStatus menu_status = 6;
  // Error list when error
  repeated ResponseError errors = 7;
}

// Request to pull and upsert menus for a store
message PullAndUpsertMenuRequest {
  Store store = 1;
  google.protobuf.BoolValue is_new_menu = 2;
  google.protobuf.StringValue menu_name = 3;
  google.protobuf.BoolValue active = 4;
  // optional; when provided, the menu pulled from (provider, location) will be ingested under this store_id
  google.protobuf.StringValue store_id = 5;
  // optional; when provided, will be used in menu upsert regardless of store pos info will_pull_store_hours config
  // useful especially for case where (provider, location) doesn't yet have store pos info
  google.protobuf.BoolValue will_pull_store_hours_override = 6;
  // optional; when provided, the menu will be pulled and ingested for the provided menu_id
  google.protobuf.StringValue menu_id = 7;
  // optional; when provided, the existing menu will be adjusted with the inflation rates
  google.protobuf.BoolValue pull_menu_and_adjust_prices = 8;
  // optional; delay the menu pulling for given number of seconds
  google.protobuf.Int64Value delay_in_seconds = 9;
  // optional; when provided, a menu hub event will be emitted to Feature Tracker service
  // if the cool down period has finished
  google.protobuf.BoolValue check_vision_menu_hub_event = 10;
  // optional; when provided, the menus will be pulled and ingested only for the provided menu_ids
  repeated google.protobuf.StringValue menu_ids = 11;
  // optional; the list of menu experiences to be pulled, by default only pull marketplace menus
  repeated common.Experience menu_experiences = 12;
}

// Response of pull and upsert menus
message PullAndUpsertMenuResponse {
  // Status code
  code.Code code = 1;
  google.protobuf.StringValue job_id = 2;
  repeated ResponseError errors = 3;

  // This is an optional field which would be populated mostly in scenario of bulk requests
  // (i.e when this message is populated as part of BulkPullAndUpsertMenuResponse)
  Store store = 4;

  // The POS Menu Job Id which can be used to retrieve the details of the menu update
  // This is an optional field
  google.protobuf.StringValue pos_menu_job_id = 5;
}

// Bulk request to pull and upsert menu
message BulkPullAndUpsertMenuRequest {
  repeated PullAndUpsertMenuRequest pull_and_upsert_menu_request = 1;
}

// Bulk response of pull and upsert menu requests
message BulkPullAndUpsertMenuResponse {
  repeated PullAndUpsertMenuResponse pull_and_upsert_menu_response = 1;
}

enum MenuStatus {
  MENU_STATUS_UNKNOWN = 0;
  MENU_STATUS_PENDING = 1;
  MENU_STATUS_IN_PROGRESS = 2;
  MENU_STATUS_SUCCESS = 3;
  MENU_STATUS_FAILURE = 4;
}

// For SmlWorkflow: PARTIAL_SUCCESS refers to new link created but old link could not be deleted
enum WorkflowStatus {
  WORKFLOW_STATUS_UNKNOWN = 0;
  WORKFLOW_STATUS_PENDING = 1;
  WORKFLOW_STATUS_IN_PROGRESS = 2;
  WORKFLOW_STATUS_SUCCESS = 3;
  WORKFLOW_STATUS_PARTIAL_SUCCESS = 4; // will give reason in details string fields
  WORKFLOW_STATUS_FAILURE_INVALID_ARGUMENT = 5;
  WORKFLOW_STATUS_FAILURE_FAILED_PRECONDITION = 6;
  WORKFLOW_STATUS_FAILURE_CONCURRENT_ACCESS = 7;
  WORKFLOW_STATUS_FAILURE_DEADLINE_EXCEEDED = 8;
  WORKFLOW_STATUS_FAILURE_INTERNAL = 9;
}

message ResponseError {
  google.protobuf.StringValue error_code = 1;
  google.protobuf.StringValue description = 2;
}

// Request for sending in the menu payload
message UpsertMenuRequest {
  StoreMenu store_menu = 1;
  google.protobuf.BoolValue is_new_menu = 2;
  google.protobuf.StringValue external_id = 3;
}

// Response upsert menu
message UpsertMenuResponse {}

// CnG menus don't have open / special hours in menu ingestion path
message GroceryMenu {
  google.protobuf.StringValue id = 1;
  google.protobuf.StringValue title = 2;
  google.protobuf.StringValue subtitle = 3;
  google.protobuf.BoolValue is_active = 4;
  google.protobuf.BoolValue is_store_menu_link_active = 5;
  // list of updated/inserted/soft-deleted items
  repeated GroceryItem insert_items = 7;
  repeated OpenHours store_open_hours = 8;
  repeated SpecialHours store_special_hours = 9;
}

message GroceryItem {
  google.protobuf.StringValue merchant_supplied_id = 1;
  google.protobuf.StringValue title = 2;
  google.protobuf.StringValue description = 3;
  google.protobuf.Int32Value sort_id = 4;
  google.protobuf.BoolValue is_active = 5;
  // Pre inflated price Mx sent
  google.protobuf.Int32Value in_feed_price = 6;
  google.protobuf.Int32Value non_discount_price = 7;
  PriceInfo non_discount_measurement_price = 8;
  google.protobuf.StringValue unit = 9;
  PriceInfo increment = 10;
  PriceInfo measurement_price = 11;
  PriceInfo measurement_factor = 12;
  google.protobuf.StringValue measurement_unit = 13;
  PriceInfo approximate_sold_as_quantity = 14;
  google.protobuf.StringValue approximate_sold_as_unit = 15;
  google.protobuf.BoolValue is_bike_friendly = 16;
  google.protobuf.Int32Value purchase_type = 17;
  google.protobuf.Int32Value package_type = 18;
  // Inflated price if inflation configured for Mx
  google.protobuf.Int64Value price = 19;
  google.protobuf.Int64Value base_price = 20;
  // Inflated loyalty price if inflation configured for Mx
  google.protobuf.Int32Value loyalty_price = 21;
  PriceInfo loyalty_measurement_price = 22;
  CategoryInfo category_info = 23;
  string tax_rate = 24;
  google.protobuf.BoolValue is_alcohol = 25;
  repeated OpenHours special_hours = 26;
  google.protobuf.StringValue dd_sic = 27;
  repeated money.ItemFee item_fees = 28;
  menu.RestrictionInfo restriction_info = 29;
  repeated menu.StockLevelInfo stock_level_info = 30;
  menu.DishInfo dish_info = 31;
  // Pre inflated loyalty price Mx sent
  google.protobuf.Int32Value in_feed_loyalty_price = 32;
  // reserve for deprecated field - google.protobuf.Int32Value in_feed_loyalty_measurement_price
  reserved 33;
  reserved "in_feed_loyalty_measurement_price";
  // reserve for deprecated field - google.protobuf.Int32Value in_feed_measurement_price
  reserved 34;
  reserved "in_feed_measurement_price";
  // Pre inflated loyalty measurement price Mx sent
  PriceInfo in_feed_loyalty_measurement_price_v2 = 35;
  // Pre inflated measurement price Mx sent
  PriceInfo in_feed_measurement_price_v2 = 36;
  // Item promotion purchase information
  repeated common.inventory.v1.ItemPromotionInfo item_promotion_info = 37;
  // Pre inflated non-discount (strikethrough) measurement price Mx sent
  PriceInfo in_feed_non_discount_measurement_price = 38;
  // Pre inflated non-discount (strikethrough) price Mx sent
  google.protobuf.Int32Value in_feed_non_discount_price = 39;
  // Photo id for the item. This field is needed if the item is in Rx store
  google.protobuf.StringValue photo_id = 40;
  // Photo url for the item. This field is needed if the item is in Rx store
  google.protobuf.StringValue photo_url = 41;
  common.marketplace_purchase.v1.DynamicPricePurchase dynamic_price_info = 42;
  // A/B experiments for this item
  repeated ExperimentOverride experiment_overrides = 43;
}

// Experiment details
message ExperimentOverride {
  // Experiment name
  google.protobuf.StringValue experiment_name = 1;
  // Attribute (or group of attributes) on which experiment is being run
  ExperimentField experiment_field = 2;
  // Treatments in the experiment
  repeated ItemABExperimentConfiguration configurations = 3;
}

// Attribute (or group of attributes) on which experiment is being run
enum ExperimentField {
  // Unspecified
  EXPERIMENT_FIELD_UNSPECIFIED = 0;
  // For price related experiments
  EXPERIMENT_FIELD_OVERRIDE_PRICE = 1 [deprecated = true];
  // For experiments related to NV price fields
  // https://docs.google.com/document/d/1c6pdrr52LasIS9Q2G-owoNIqyFoQqou70oiEhcSVF6Y/edit?pli=1&tab=t.0#heading=h.9i87b2uvwigb
  EXPERIMENT_FIELD_OVERRIDE_NV_PRICE_FIELDS = 2;
}

// Treatment configuration for the item in the experiment
message ItemABExperimentConfiguration {
  // Treatment name
  google.protobuf.StringValue bucket_name = 1;
  // Treatment attributes
  GroceryItem bucket_specific_item_attributes = 2;
}

message CategoryInfo {
  google.protobuf.StringValue merchant_supplied_id = 1;
  google.protobuf.StringValue title = 2;
  google.protobuf.StringValue subtitle = 3;
  google.protobuf.BoolValue is_active = 4;
}

message PriceInfo {
  int32 decimal_places = 1;
  int32 unit_amount = 2;
}

message StoreMenu {
  google.protobuf.StringValue reference = 1;
  Store store = 2;
  repeated OpenHours open_hours = 3;
  repeated SpecialHours special_hours = 4;
  Menu menu = 5;
}

message Store {
  string location_id = 1;
  string provider_type = 2;
  // Optional parameter, the id of the store identified by above 2 parameters
  // Currently it is only being used in UpdateStoreMenuHoursAndStoreMenuSpecialHoursRequest
  google.protobuf.Int64Value id = 3;
  google.protobuf.StringValue store_id = 4;
}

enum Day {
  MON = 0;
  TUE = 1;
  WED = 2;
  THU = 3;
  FRI = 4;
  SAT = 5;
  SUN = 6;
  RESERVED_1 = 7;
  RESERVED_2 = 8;
  RESERVED_3 = 9;
}

message OpenHours {
  Day day_index = 1;
  // the format should be HH:MM:SS
  string start_time = 2;
  // the format should be HH:MM:SS
  string end_time = 3;
  // id of the open hours
  google.protobuf.StringValue id = 4;
}

message SpecialHours {
  string date = 1;
  bool closed = 2;
  // the format should be HH:MM:SS
  string start_time = 3;
  // the format should be HH:MM:SS
  string end_time = 4;
  // id of the special hours
  google.protobuf.StringValue id = 5;
}

message Option {
  string name = 1;
  google.protobuf.StringValue description = 2;
  string merchant_supplied_id = 3;
  google.protobuf.BoolValue active = 4;
  google.protobuf.Int64Value sort_id = 5;
  google.protobuf.Int64Value price = 6;
  google.protobuf.BoolValue default = 7;
  google.protobuf.StringValue tax_rate = 8;
  repeated Extra extras = 9;
}

message Extra {
  string name = 1;
  google.protobuf.StringValue description = 2;
  string merchant_supplied_id = 3;
  google.protobuf.BoolValue active = 4;
  google.protobuf.Int64Value sort_id = 5;
  google.protobuf.Int64Value min_num_options = 6;
  google.protobuf.Int64Value max_num_options = 7;
  google.protobuf.Int64Value num_free_options = 8;
  google.protobuf.Int64Value min_option_choice_quantity = 9;
  google.protobuf.Int64Value max_option_choice_quantity = 10;
  google.protobuf.Int64Value min_aggregate_options_quantity = 11;
  google.protobuf.Int64Value max_aggregate_options_quantity = 12;
  repeated Option options = 13;
}

message Item {
  string name = 1;
  google.protobuf.StringValue description = 2;
  string merchant_supplied_id = 3;
  google.protobuf.BoolValue active = 4;
  google.protobuf.BoolValue is_alcohol = 5;
  google.protobuf.BoolValue is_bike_friendly = 6;
  google.protobuf.Int64Value sort_id = 7;
  google.protobuf.Int64Value price = 8;
  repeated Extra extras = 9;
  google.protobuf.StringValue tax_rate = 10;
  string dd_sic = 11;
  menu.RestrictionInfo restriction_info = 12;
}

message Category {
  string name = 1;
  google.protobuf.StringValue subtitle = 2;
  google.protobuf.StringValue merchant_supplied_id = 3;
  google.protobuf.BoolValue active = 4;
  google.protobuf.Int64Value sort_id = 5;
  repeated Item items = 6;
}

message Menu {
  string name = 1;
  google.protobuf.StringValue subtitle = 2;
  google.protobuf.StringValue merchant_supplied_id = 3;
  google.protobuf.BoolValue active = 4;
  repeated Category categories = 5;
}

message Suspension {
  google.protobuf.Timestamp suspend_from_time = 1;
  google.protobuf.Timestamp suspend_until_time = 2;
  google.protobuf.StringValue reason = 3;
}

message ResponseEntity {
  Store store = 1;
  string merchant_supplied_id = 2;
  Status status = 3;
}

// Request to Pull Item Status and upsert menus for a store
message PullAndUpsertItemStatusRequest {
  Store store = 1;
  // List of Items concerned to  items availability
  repeated Item items = 2;
}

// Response of pull Item Status upsert menus
message PullAndUpsertItemStatusResponse {
  // Status code
  code.Code code = 1;
  google.protobuf.StringValue job_id = 2;
  repeated ResponseError errors = 3;
}

message UpdateJudgmentStickyComparisonRequest {
  // The ID of the store menu
  string store_menu_id = 1;
  // The ID of the entity
  string entity_id = 2;
  // The name of the field, e.g., Menu.title, Menu.subtitle
  string field_name = 3;
  // The judgment status, e.g., unspecified, sticky_approved, sticky_declined, invalid_no_need_review
  string judgment_status = 4;
  // The ID of the person who made the judgment
  string judgment_by = 5;
}

/**
 * Response of updating the sticky_comparison table
 */
message UpdateJudgmentStickyComparisonResponse {
  // Indicates if the update was successful
  bool success = 1;
}

enum Status {
  UNKNOWN = 0;
  SUCCESS = 1;
  NOT_FOUND = 2;
  ERROR = 3;
}
