syntax = "proto3";

package merchant_integrations;

import "common/code.proto";
import "common/service_client_config.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/wrappers.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.merchant_integrations";

// Grpc service to create, get, and update store point of sale information
service StorePosInfoService {
  // Create single store pos info
  rpc CreateStorePosInfo(CreateStorePosInfoRequest) returns (CreateStorePosInfoResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 2000;
    option (service_client.client_method_config).retry_config.max_attempts = 3;
    // default circuit breaker config
  }
  // Create multiple store pos info
  rpc CreateStorePosInfos(CreateStorePosInfosRequest) returns (CreateStorePosInfosResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 3000;
    option (service_client.client_method_config).retry_config.max_attempts = 3;
    // default circuit breaker config
  }
  // Get single store pos info by store id
  rpc GetStorePosInfoByStoreId(GetStorePosInfoByStoreIdRequest) returns (GetStorePosInfoByStoreIdResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 500;
    option (service_client.client_method_config).retry_config.max_attempts = 3;
    // default circuit breaker config
  }

  // Get multiple stores' pos info by store ids
  rpc GetStorePosInfoByStoreIds(GetStorePosInfoByStoreIdsRequest) returns (GetStorePosInfoByStoreIdsResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 3000;
    option (service_client.client_method_config).retry_config.max_attempts = 3;
    // default circuit breaker config
  }

  // Get multiple store pos info by single provider type and multiple location ids
  rpc GetStorePosInfosByProviderAndLocations(GetStorePosInfosByProviderAndLocationsRequest) returns (GetStorePosInfosByProviderAndLocationsResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 2000;
    option (service_client.client_method_config).retry_config.max_attempts = 3;
    // default circuit breaker config
  }
  // Update single store pos info by store id
  rpc UpdateStorePosInfoByStoreId(UpdateStorePosInfoByStoreIdRequest) returns (UpdateStorePosInfoByStoreIdResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 2000;
    option (service_client.client_method_config).retry_config.max_attempts = 3;
    // default circuit breaker config
  }
  // Update multiple store pos info by store ids
  rpc UpdateStorePosInfosByStoreIds(UpdateStorePosInfosByStoreIdsRequest) returns (UpdateStorePosInfosByStoreIdsResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 3000;
    option (service_client.client_method_config).retry_config.max_attempts = 3;
    // default circuit breaker config
  }
  // Getting stores by provider
  rpc GetStoresByProvider(GetStoresByProviderRequest) returns (stream GetStoresByProviderResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 2000;
    option (service_client.client_method_config).retry_config.max_attempts = 3;
    // default circuit breaker config
  }

  // Register stores on DoorDash by provider and store ids
  rpc RegisterStoreByProviderAndStoreId(RegisterStoreByProviderAndStoreIdRequest) returns (RegisterStoreByProviderAndStoreIdResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 3000;
    option (service_client.client_method_config).retry_config.max_attempts = 3;
    // default circuit breaker config
  }

  // Update store params
  rpc UpdateStoreParam(UpdateStoreParamRequest) returns (UpdateStoreParamResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 2000;
    option (service_client.client_method_config).retry_config.max_attempts = 3;
    // default circuit breaker config
  }

  // Getting stores by provider but returning the store pos info complex object
  rpc GetPosStoresByProvider(GetPosStoresByProviderRequest) returns (stream GetPosStoresByProviderResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 2000;
    option (service_client.client_method_config).retry_config.max_attempts = 3;
    // default circuit breaker config
  }

  // Get POS stores for a developer UUID and provider type
  rpc GetPosStoresByDeveloper(GetPosStoresByDeveloperRequest) returns (GetPosStoresByDeveloperResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 5000;
    option (service_client.client_method_config).retry_config.max_attempts = 3;
    // default circuit breaker config
  }
}

// Store point of sale integration only information
message StorePosInfo {
  // DD store id
  google.protobuf.StringValue store_id = 1;
  // Merchant pos provider type
  google.protobuf.StringValue provider_type = 2;
  // Merchant supplied id of the store
  google.protobuf.StringValue location_id = 3;
  // When ingesting menu, whether to also pull store hours from merchant
  google.protobuf.BoolValue will_pull_store_hours = 4;
  // Name of the Store
  google.protobuf.StringValue store_name = 5;
  // is Store Active
  google.protobuf.BoolValue is_active = 6;
}

// Result of one item in a batch store pos info request
message StorePosInfoResult {
  // Status code
  code.Code code = 1;
  // Error message when error
  google.protobuf.StringValue error = 2;
  // Returned store pos info for get request
  StorePosInfo store_pos_info = 3;
}

message CreateStorePosInfoRequest {
  StorePosInfo store_pos_info = 1;
}

message CreateStorePosInfoResponse {}

message CreateStorePosInfosRequest {
  repeated StorePosInfo store_pos_infos = 1;
}

message CreateStorePosInfosResponse {
  repeated StorePosInfoResult results = 1;
}

message GetStorePosInfoByStoreIdRequest {
  google.protobuf.StringValue store_id = 1;
  // Get store pos info fields in field mask, or get all fields if field mask is null/empty
  google.protobuf.FieldMask get_mask = 2;
}

message GetStorePosInfoByStoreIdsRequest {
  repeated google.protobuf.StringValue store_id_list = 1;
  google.protobuf.FieldMask get_mask = 2;
}

message GetStorePosInfoByStoreIdResponse {
  StorePosInfo store_pos_info = 1;
}

message GetStorePosInfoByStoreIdsResponse {
  map<string, StorePosInfo> store_pos_info_map = 1;
}

message GetStorePosInfosByProviderAndLocationsRequest {
  // Get multiple store pos info with same provider type,
  google.protobuf.StringValue provider_type = 1;
  // and with listed location ids
  repeated google.protobuf.StringValue location_ids = 2;
  // Get store pos info fields in field mask, or get all fields if field mask is null/empty
  google.protobuf.FieldMask get_mask = 3;
}

message GetStorePosInfosByProviderAndLocationsResponse {
  repeated StorePosInfoResult results = 1;
}

message UpdateStorePosInfoByStoreIdRequest {
  StorePosInfo store_pos_info = 1;
  // Update store pos info fields in field mask, or update non-null values from input if field mask is null/empty
  google.protobuf.FieldMask update_mask = 2;
}

message UpdateStorePosInfoByStoreIdResponse {}

message UpdateStorePosInfosByStoreIdsRequest {
  repeated StorePosInfo store_pos_infos = 1;
  // Update store pos info fields in field mask, or update non-null values from input if field mask is null/empty
  google.protobuf.FieldMask update_mask = 2;
}

message UpdateStorePosInfosByStoreIdsResponse {
  repeated StorePosInfoResult results = 1;
}

message GetStoresByProviderRequest {
  string provider_type = 1;
  google.protobuf.Int32Value store_batch_size = 2;
}

message GetStoresByProviderResponse {
  repeated string store_ids = 1;
}

message GetPosStoresByProviderRequest {
  string provider_type = 1;
  google.protobuf.Int32Value store_batch_size = 2;
}

message GetPosStoresByProviderResponse {
  // list of pos store complex objects
  repeated StorePosInfo store_pos_infos = 1;
}

message RegisterStoreByProviderAndStoreIdRequest {
  google.protobuf.StringValue provider_type = 1;
  google.protobuf.StringValue store_id = 2;
  google.protobuf.StringValue store_token = 3;
}

message RegisterStoreByProviderAndStoreIdResponse {
  // Status code
  code.Code code = 1;

  // Error message
  google.protobuf.StringValue error = 2;

  // Status code received from MAS
  code.Code mas_status_code = 3;
}

// Update store param request
message UpdateStoreParamRequest {
  // Store id
  google.protobuf.StringValue store_id = 1;

  // Param name
  google.protobuf.StringValue param_name = 2;

  // Param value
  google.protobuf.StringValue param_value = 3;
}

// Update store params response
message UpdateStoreParamResponse {
  // Status code
  code.Code code = 1;

  // Error message
  google.protobuf.StringValue error = 2;
}

// Get all stores by provider type and developer UUID
message GetPosStoresByDeveloperRequest {
  // Developer UUID
  google.protobuf.StringValue developer_uuid = 1;

  // Store Id which need to be searched here
  google.protobuf.StringValue store_id = 2;

  // Location ID which need to be searched here
  google.protobuf.StringValue location_id = 3;

  // Environment for which the stores need to be searched
  google.protobuf.StringValue environment = 4;
}

message GetPosStoresByDeveloperResponse {
  // list of pos store objects
  repeated StorePosInfo store_pos_info = 1;
}
