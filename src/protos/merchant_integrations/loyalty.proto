syntax = "proto3";
// buf:lint:ignore DIRECTORY_SAME_PACKAGE
// buf:lint:ignore PACKAGE_VERSION_SUFFIX
package merchant_integrations;

import "common/common.proto";
import "common/loyalty.proto";
import "common/money.proto";
import "common/service_client_config.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.merchant_integrations";

// Loyalty related integrations
service LoyaltyService {
  /**
   * Validate the loyalty code entered by the consumer
   * on validation, merchant could return their side of ids
   */
  rpc ValidateLoyaltyCode(ValidateLoyaltyCodeRequest) returns (ValidateLoyaltyCodeResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 25000;
    option (service_client.client_method_config).retry_config.max_attempts = 3;
    // default circuit breaker config
  }

  /*
   * Authenticate a user's external loyalty account. On successful auth, should get back at least the user's external
   * account identifier and access token details
   */
  rpc AuthenticateUserLoyaltyAccount(AuthenticateUserLoyaltyAccountRequest) returns (AuthenticateUserLoyaltyAccountResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 7000;
    option (service_client.client_method_config).retry_config.max_attempts = 3;
  }

  /**
   * Create a user's external loyalty account. On successful account creation we get back the user's external
   * account identifier. If the account already exists, we at least get back a flag to indicate that an account
   * already exists (and in most cases, no external identifier).
   */
  rpc CreateUserLoyaltyAccount(CreateUserLoyaltyAccountRequest) returns (CreateUserLoyaltyAccountResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 5000;
    option (service_client.client_method_config).retry_config.max_attempts = 3;
  }

  // Delete a user's external loyalty account. Related to Right to Forget, used in Mobile APIs.
  rpc DeleteUserLoyaltyAccount(DeleteUserLoyaltyAccountRequest) returns (DeleteUserLoyaltyAccountResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 5000;
    option (service_client.client_method_config).retry_config.max_attempts = 3;
  }

  /*
   * Get user's external loyalty account information. On success, should get back at least the user's
   * tier level and reward point balance
   */
  rpc GetLoyaltyAccountInfo(GetLoyaltyAccountInfoRequest) returns (GetLoyaltyAccountInfoResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 5000;
    option (service_client.client_method_config).retry_config.max_attempts = 3;
  }

  /* Get user info from a user's external loyalty account
  */
  rpc GetLoyaltyUserInfo(GetLoyaltyUserInfoRequest) returns (GetLoyaltyUserInfoResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 12000;
    option (service_client.client_method_config).retry_config.max_attempts = 3;
  }

  // accrue points when an order is completed
  rpc AccrueLoyaltyRewards(AccrueLoyaltyRewardsRequest) returns (AccrueLoyaltyRewardsResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 12000;
    // Add DEADLINE_EXCEEDED (4) to retry code
    option (service_client.client_method_config).retry_config.do_retry_grpc_code = 4;
    option (service_client.client_method_config).retry_config.max_attempts = 3;
  }

  // simulate accrual and redemption when an order is ready to checkout
  rpc GetLoyaltyRewards(GetLoyaltyRewardsRequest) returns (GetLoyaltyRewardsResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 12000;
    option (service_client.client_method_config).retry_config.max_attempts = 3;
  }

  // redeem points when an order is checked out
  rpc RedeemLoyaltyRewards(RedeemLoyaltyRewardsRequest) returns (RedeemLoyaltyRewardsResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 12000;
  }

  // reverse transaction when an order is cancelled
  rpc ReverseOrderTransaction(ReverseOrderTransactionRequest) returns (ReverseOrderTransactionResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 5000;
  }

  // retrieve all loyalty rewards, independent of cart/order
  rpc GetAllLoyaltyRewardsForUser(GetAllLoyaltyRewardsForUserRequest) returns (GetAllLoyaltyRewardsForUserResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 5000;
  }

  // Get user offers from Mx
  rpc GetUserOffers(GetUserOffersRequest) returns (GetUserOffersResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 8000;
    option (service_client.client_method_config).retry_config.max_attempts = 3;
  }

  // Send transaction to provider
  rpc SendTransaction(SendTransactionRequest) returns (SendTransactionResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 60000;
    option (service_client.client_method_config).retry_config.max_attempts = 3;
  }

  // Redeem offer
  rpc RedeemOffer(RedeemOfferRequest) returns (RedeemOfferResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 60000;
    option (service_client.client_method_config).retry_config.max_attempts = 3;
  }

  // Reinstate offer
  rpc ReinstateOffer(ReinstateOfferRequest) returns (ReinstateOfferResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 60000;
    option (service_client.client_method_config).retry_config.max_attempts = 3;
  }

  // send one time password for loyalty account linking
  rpc SendOneTimePassword(SendOneTimePasswordRequest) returns (SendOneTimePasswordResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 5000;
    option (service_client.client_method_config).retry_config.max_attempts = 3;
  }

  // verify one time password for loyalty account linking
  rpc VerifyOneTimePassword(VerifyOneTimePasswordRequest) returns (VerifyOneTimePasswordResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 5000;
    option (service_client.client_method_config).retry_config.max_attempts = 3;
  }

  // unlink loyalty account record at Mx side
  rpc UnlinkLoyaltyAccount(UnlinkLoyaltyAccountRequest) returns (UnlinkLoyaltyAccountResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 5000;
    option (service_client.client_method_config).retry_config.max_attempts = 3;
  }

  // update sf loyalty user session entry for mobile apps
  rpc UpdateExternalLoyaltyUserSession(UpdateExternalLoyaltyUserSessionRequest) returns (UpdateExternalLoyaltyUserSessionResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 5000;
    option (service_client.client_method_config).retry_config.max_attempts = 3;
  }

  // to check if user session is still active
  rpc IsExternalLoyaltyUserSessionActive(IsExternalLoyaltyUserSessionActiveRequest) returns (IsExternalLoyaltyUserSessionActiveResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 5000;
    option (service_client.client_method_config).retry_config.max_attempts = 3;
  }

  // revoke external loyalty session token to sign out user
  rpc RevokeExternalLoyaltyUserSession(RevokeExternalLoyaltyUserSessionRequest) returns (RevokeExternalLoyaltyUserSessionResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 5000;
    option (service_client.client_method_config).retry_config.max_attempts = 3;
  }

  // apply reward to basket used for olo punchh loyalty integration
  rpc ApplyLoyaltyReward(ApplyLoyaltyRewardRequest) returns (ApplyLoyaltyRewardResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 10000;
    option (service_client.client_method_config).retry_config.max_attempts = 3;
  }

  // get loyalty points based on loyalty member and cart
  rpc GetLoyaltyPoints(GetLoyaltyPointsRequest) returns (GetLoyaltyPointsResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 10000;
    option (service_client.client_method_config).retry_config.max_attempts = 3;
  }

  // apply loyalty points to cart
  rpc ApplyLoyaltyPoints(ApplyLoyaltyPointsRequest) returns (ApplyLoyaltyPointsResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 10000;
    option (service_client.client_method_config).retry_config.max_attempts = 3;
  }
}

// Response on validating loyalty code with merchant
message ValidateLoyaltyCodeRequest {
  // provider type used for validation
  string provider_type = 1;
  // code to be validated
  string loyalty_code = 2;
  // consumer id associated with loyalty code
  string consumer_id = 3;
  // reference id of the merchant loyalty program
  google.protobuf.StringValue reference_id = 4;
  // reference type of the merchant loyalty program
  google.protobuf.StringValue reference_type = 5;
  // map of custom inputs to values to be passed into mx request
  map<string, google.protobuf.Value> custom_input_values = 6;
}

// Response on validating loyalty code with merchant
message ValidateLoyaltyCodeResponse {
  // loyalty code/card number returned by merchant
  google.protobuf.StringValue external_loyalty_code = 1;
  // loyalty membership number returned by merchant
  google.protobuf.StringValue external_loyalty_consumer_id = 2;
}

// Request to obtain info about a user's external loyalty account
message AuthenticateUserLoyaltyAccountRequest {
  // External loyalty provider to integrate with
  google.protobuf.StringValue provider_type = 1;
  // Params necessary to complete user loyalty account auth
  repeated common.loyalty.v1.LoyaltyAuthParams auth_params = 2;
  // This is necessary to pass along when MIS calls 3rd party apis to ensure we are making requests to the right
  // merchant_id
  google.protobuf.StringValue external_merchant_id = 3;
  // This is necessary when MIS calls 3rd party apis to ensure the redirect_uri matches
  google.protobuf.StringValue redirect_uri = 4;
  // Used for mobile APIs; if true, create a session id -> user access token mapping entry
  google.protobuf.BoolValue create_session = 5;
  // Used for olopunchh integration to fetch the olo basket
  google.protobuf.StringValue cart_uuid = 6;
  // optional field referring to the internal DD store id. used for olopunchh integration
  google.protobuf.StringValue store_id = 7;
}

// Response on authenticating user loyalty account. Response contains user_info and token details
message AuthenticateUserLoyaltyAccountResponse {
  // User info obtained on successfully authenticating a user
  common.loyalty.v1.LoyaltyUserInfo user_info = 1;
  // Token obtained to make calls on behalf of a user
  repeated common.loyalty.v1.LoyaltyAuthParams token = 2;
  // Used for mobile APIs; Session id created that will map to corresponding access token to fetch PII
  google.protobuf.StringValue session_id = 3;
}

// Request to create a user's external loyalty account
message CreateUserLoyaltyAccountRequest {
  // provider type used for registration
  google.protobuf.StringValue provider_type = 1;
  // consumer id
  google.protobuf.StringValue consumer_id = 2;
  // consumer's registration data
  common.loyalty.v1.LoyaltyConsumerData consumer_data = 3;
  // This is only necessary for some providers to pass along when MIS calls 3rd party apis to ensure we
  // are making requests to the right merchant_id
  ExternalLoyaltyMerchantInfo external_merchant_info = 4;
  // This is necessary for sign up API calls for some providers
  google.protobuf.StringValue card_template_code = 5;
}

// Response on creating/attempt to create a user's external loyalty account
message CreateUserLoyaltyAccountResponse {
  // User info obtained on account creation attempt
  common.loyalty.v1.LoyaltyUserInfo user_info = 1;
  // Flag for whether or not user's account already exists
  bool account_exists = 2;
}

// Request to obtain info about a user's external loyalty account
message GetLoyaltyAccountInfoRequest {
  // provider type used for validation
  google.protobuf.StringValue provider_type = 1;
  // This is necessary to pass along when MIS calls 3rd party apis to ensure we are making requests to the right
  // merchant_id
  ExternalLoyaltyMerchantInfo external_merchant_info = 2;
  // Passed with merchant_id to 3rd party api to make the request
  // For Paytronix this would be the printed_card_number
  ExternalLoyaltyConsumerInfo external_consumer_info = 3;
  // optional session id - used for punchh and olo integration to fetch API token
  google.protobuf.StringValue session_id = 4;
}

// Response on obtaining a user's loyalty account info. Response contains loyalty reward point balance
message GetLoyaltyAccountInfoResponse {
  // Account info containing tier level and point balance for a user
  common.loyalty.v1.LoyaltyAccountInfo account_info = 1;
}

// Set of loyalty rewards selection mode
enum ExternalLoyaltyRewardsSelectionMode {
  // Unspecified
  EXTERNAL_LOYALTY_REWARDS_SELECTION_MODE_UNSPECIFIED = 0;
  // Manual
  EXTERNAL_LOYALTY_REWARDS_SELECTION_MODE_MANUAL = 1;
  // Automatic
  EXTERNAL_LOYALTY_REWARDS_SELECTION_MODE_AUTOMATIC = 2;
}

// Params to identify external consumer
message ExternalLoyaltyConsumerInfo {
  // Identifier for the user's external loyalty membership account.
  // This could point towards a membership_id, user_id or some unique identifier in the external system
  google.protobuf.StringValue external_user_identifier = 1;
  // This is the loyalty code in external system
  google.protobuf.StringValue external_loyalty_code = 2;
  // phone number, added as part of spoton integration
  google.protobuf.StringValue phone_number = 3;
  // email, added as part of spoton integration
  google.protobuf.StringValue email = 4;
}

// Params to identify external merchant
message ExternalLoyaltyMerchantInfo {
  // Merchant id in the external loyalty provider
  google.protobuf.StringValue external_merchant_id = 1;
  // external store id, added as part of spoton integration
  google.protobuf.StringValue external_store_id = 2;
}

// Params to identify external store
message ExternalLoyaltyStoreInfo {
  // Store id in the external loyalty provider
  google.protobuf.StringValue external_store_id = 1;
}

// Request to get user info from an external loyalty account
message GetLoyaltyUserInfoRequest {
  // External loyalty provider to integrate with
  google.protobuf.StringValue provider_type = 1;
  // Params to identify external merchant
  ExternalLoyaltyMerchantInfo external_merchant_info = 2;
  // Params to identify external consumer
  ExternalLoyaltyConsumerInfo external_consumer_info = 3;
  // Authorization code needed for some providers to obtain the authorization token
  // Only needed for some providers
  google.protobuf.StringValue auth_code = 4;
  // optional session id - used for mobile APIs to map to the related access token
  google.protobuf.StringValue session_id = 5;
}

// Response with user's info from external loyalty account
message GetLoyaltyUserInfoResponse {
  // User info obtained on get loyalty user info attempt
  common.loyalty.v1.LoyaltyUserInfo user_info = 1;
}

// Struct containing order details. This gets sent over to external loyalty provider to accrue points.
message OrderPricingDetails {
  // order subtotal
  money.MonetaryFields subtotal = 1;
  // order tax
  money.MonetaryFields tax = 2;
  // subtotal discount
  money.MonetaryFields subtotal_discount = 3;
  // merchant tips
  money.MonetaryFields merchant_tip = 4;
  // Original check total without tips
  money.MonetaryFields order_total_without_tips = 5;
  // Check total paid by the Cx
  money.MonetaryFields actual_order_total = 6;
  // The final delivery fee
  money.MonetaryFields final_delivery_fee = 7;
}

// Struct containing order details. This gets sent over to external loyalty provider to accrue points/redeem rewards.
message OrderDetails {
  // delivery uuid for the order
  google.protobuf.StringValue delivery_uuid = 1;
  // time when order is created
  google.protobuf.Timestamp order_created_at = 2;
  // pricing details for the order
  OrderPricingDetails order_pricing_details = 3;
  // cart uuid for the order
  google.protobuf.StringValue cart_uuid = 4;
  // fulfillment_type
  common.FulfillmentType fulfillment_type = 5;
  // rewards to apply when rewards selection mode is manual
  ChosenLoyaltyRewards chosen_loyalty_rewards = 6;
  // Details of the cart items which may be needed by the external provider to return item-based rewards.
  repeated common.loyalty.v1.ExternalLoyaltyCartItem items = 7;
}

// List of chosen loyalty rewards
message ChosenLoyaltyRewards {
  // chosen loyalty reward
  repeated ExternalLoyaltyRewardInfo reward = 1;
}

// Params to identify external loyalty rewards
message ExternalLoyaltyRewardInfo {
  // external reward code
  google.protobuf.StringValue code = 1;
  // reward amount
  google.protobuf.Int32Value amount = 2;
}

// Set of business logic error codes
enum LoyaltyErrorCode {
  // Unspecified error
  LOYALTY_ERROR_CODE_UNSPECIFIED = 0;
  // Invalid input error
  LOYALTY_ERROR_CODE_INVALID_INPUT_ERROR = 1;
  // External provider error
  LOYALTY_ERROR_CODE_PROVIDER_PROCESSING_ERROR = 2;
  // A resource associated with the request could not be found
  LOYALTY_ERROR_CODE_NOT_FOUND = 3;
}

// Set of business logic errors
message LoyaltyRewardsError {
  // String error code for the error.
  LoyaltyErrorCode error_code = 1;
  // error message
  google.protobuf.StringValue error_message = 2;
  // http_code
  google.protobuf.Int32Value http_code = 3;
}

// Set of business logic errors
message LoyaltyOneTimePasswordError {
  // String error code for the error.
  LoyaltyErrorCode error_code = 1;
  // error message
  google.protobuf.StringValue error_message = 2;
  // http_code
  google.protobuf.Int32Value http_code = 3;
}

// Request to accrue loyalty points when an order is placed
message AccrueLoyaltyRewardsRequest {
  // External loyalty provider to integrate with
  google.protobuf.StringValue provider_type = 1;
  // Param to identify external merchant
  ExternalLoyaltyMerchantInfo external_merchant_info = 2;
  // Param to identify external store
  ExternalLoyaltyStoreInfo external_store_info = 3;
  // Param to identify external consumer
  ExternalLoyaltyConsumerInfo external_consumer_info = 4;
  // Param to identify order placed
  OrderDetails order_details = 5;
}

// Response to accrue loyalty points when an order is placed
message AccrueLoyaltyRewardsResponse {
  // Success
  message Success {
    // Transaction identifier
    google.protobuf.StringValue transaction_id = 1;
  }
  // result is either success or error
  oneof result {
    // on success, return transaction identifier
    Success success = 1;
    // on failure, return error
    LoyaltyRewardsError error = 2;
  }
}

// Request to simulate loyalty points accrual and redemption when an order is ready to checkout
message GetLoyaltyRewardsRequest {
  // External loyalty provider to integrate with
  google.protobuf.StringValue provider_type = 1;
  // Param to identify external merchant
  ExternalLoyaltyMerchantInfo external_merchant_info = 2;
  // Param to identify external store
  ExternalLoyaltyStoreInfo external_store_info = 3;
  // Param to identify external consumer
  ExternalLoyaltyConsumerInfo external_consumer_info = 4;
  // Param to identify order placed
  OrderDetails order_details = 5;
  // flow type
  common.loyalty.v1.GetLoyaltyRewardsFlowType flow_type = 6;
  // optional session id - used for punchh and olo integration to fetch API token
  google.protobuf.StringValue session_id = 7;
}

//Response to simulate loyalty points accrual and redemption when an order is ready to checkout
message GetLoyaltyRewardsResponse {
  // Success
  message Success {
    // User applicable rewards obtained on retrieving loyalty rewards attempt
    money.LoyaltyRewardDetails rewards = 1;
  }
  // result is either success or error
  oneof result {
    // on success, return list of applicable rewards
    Success success = 1;
    // on failure, return error
    LoyaltyRewardsError error = 2;
  }
}

// Request to retrieve all of a user's rewards, independent of cart/order
message GetAllLoyaltyRewardsForUserRequest {
  // External loyalty provider to integrate with
  google.protobuf.StringValue provider_type = 1;
  // Param to identify external merchant
  ExternalLoyaltyMerchantInfo external_merchant_info = 2;
  // Param to identify external store
  ExternalLoyaltyStoreInfo external_store_info = 3;
  // Param to identify external consumer
  ExternalLoyaltyConsumerInfo external_consumer_info = 4;
  // Param to identify order placed
  OrderDetails order_details = 5;
  // optional session id - used for punchh and olo integration to fetch API token
  google.protobuf.StringValue session_id = 6;
}

//Response to retrieve all of a user's rewards, independent of cart/order
message GetAllLoyaltyRewardsForUserResponse {
  // Success
  message Success {
    // User applicable rewards obtained on retrieving loyalty rewards attempt
    money.LoyaltyRewardDetails rewards = 1;
    // For Olo Punchh integration, this endpoint returns membership id
    google.protobuf.StringValue membership_id = 2;
  }
  // result is either success or error
  oneof result {
    // on success, return list of applicable rewards
    Success success = 1;
    // on failure, return error
    LoyaltyRewardsError error = 2;
  }
}

// Request to redeem points when an order is checked out
message RedeemLoyaltyRewardsRequest {
  // External loyalty provider to integrate with
  google.protobuf.StringValue provider_type = 1;
  // Param to identify external merchant
  ExternalLoyaltyMerchantInfo external_merchant_info = 2;
  // Param to identify external store
  ExternalLoyaltyStoreInfo external_store_info = 3;
  // Param to identify external consumer
  ExternalLoyaltyConsumerInfo external_consumer_info = 4;
  // Param to identify order placed
  OrderDetails order_details = 5;
  // Param to identify redeem rewards selection mode
  ExternalLoyaltyRewardsSelectionMode external_loyalty_rewards_selection_mode = 6;
  // optional session id - used for punchh and olo integration to fetch API token
  google.protobuf.StringValue session_id = 7;
}

//Response to redeem points when an order is checked out
message RedeemLoyaltyRewardsResponse {
  // Success
  message Success {
    // User reward redemption obtained on redeeming loyalty rewards attempt
    money.LoyaltyRewardDetails redeemed_rewards = 1;
    // Transaction identifier
    google.protobuf.StringValue transaction_id = 2;
  }
  // result is either success or error
  oneof result {
    // on success, return list of redeemed rewards
    Success success = 1;
    // on failure, return error
    LoyaltyRewardsError error = 2;
  }
}

// Request to reverse an order transaction
message ReverseOrderTransactionRequest {
  // External loyalty provider to integrate with
  google.protobuf.StringValue provider_type = 1;
  // Param to identify external merchant
  ExternalLoyaltyMerchantInfo external_merchant_info = 2;
  // Param to identify external store
  ExternalLoyaltyStoreInfo external_store_info = 3;
  // Param to identify external consumer
  ExternalLoyaltyConsumerInfo external_consumer_info = 4;
  // Order transaction identifier
  google.protobuf.StringValue transaction_id = 5;
  // Identifier UUID associated with delivery - Only needed for some providers
  google.protobuf.StringValue delivery_uuid = 6;
  // Timestamp for when the order was created - Only needed for some providers
  google.protobuf.Timestamp order_created_at = 7;
  // optional session id - used for punchh and olo integration to fetch API token
  google.protobuf.StringValue session_id = 8;
}

// Response to reverse an order transaction
message ReverseOrderTransactionResponse {
  // Success
  message Success {}
  // result is either success or error
  oneof result {
    // on success, return the id of the reversed order transaction
    Success success = 1;
    // on failure, return error
    LoyaltyRewardsError error = 2;
  }
}

// Request to get user offers from Mx
message GetUserOffersRequest {
  // provider type
  google.protobuf.StringValue provider_type = 1;
  // retailer id
  google.protobuf.StringValue retailer_id = 2;
  // external user id
  google.protobuf.StringValue external_user_id = 3;
  // starting index of the offer list
  google.protobuf.Int32Value offset = 4;
  // upper limit of results requested
  google.protobuf.Int32Value limit = 5;
  // locale
  google.protobuf.StringValue locale = 6;
}

// Response to get user offers from Mx
message GetUserOffersResponse {
  // a list of user offers. could be empty list.
  repeated UserOffer user_offers = 1;
}

// User offer information
message UserOffer {
  // offer id
  google.protobuf.StringValue offer_id = 1;
  // offer group id
  google.protobuf.StringValue offer_group_id = 2;
  // offer type
  google.protobuf.StringValue offer_type = 3;
  // redemption start date
  google.protobuf.Timestamp redemption_start_date = 4;
  // redemption end date
  google.protobuf.Timestamp redemption_end_date = 5;
  // offer acquire date
  google.protobuf.Timestamp acquire_date = 6;
  // is offer redeemable
  google.protobuf.BoolValue is_redeemable = 7;
  // check level
  google.protobuf.BoolValue check_level = 8;
  // pending extended data
  google.protobuf.BoolValue pending_extended_data = 9;
  // start date
  google.protobuf.Timestamp start_date = 10;
  // end date
  google.protobuf.Timestamp end_date = 11;
  // expiration date
  google.protobuf.Timestamp expiration_date = 12;
  // response id
  google.protobuf.StringValue id = 13;
  // root offer id
  google.protobuf.StringValue root_offer_id = 14;
  // POS discount id
  google.protobuf.StringValue pos_discount_id = 15;
  // offer name
  google.protobuf.StringValue name = 16;
  // offer description
  google.protobuf.StringValue description = 17;
  // offer terms
  google.protobuf.StringValue terms = 18;
  // culture
  google.protobuf.StringValue culture = 19;
  // Date user offer was redeemed. If null, it has not yet been redeemed.
  google.protobuf.Timestamp redeem_date = 20;
}

// Send transaction request
message SendTransactionRequest {
  // store id
  google.protobuf.StringValue store_id = 1;
  // user id, optional
  google.protobuf.StringValue user_id = 2;
  // POS employee id
  google.protobuf.StringValue pos_employee_id = 3;
  // is transaction closed
  google.protobuf.BoolValue is_closed = 4;
  // is transaction voided
  google.protobuf.BoolValue is_voided = 5;
  // Channel from which this transaction originated. For example, 'DoorDash'.
  google.protobuf.StringValue channel = 6;
  // transaction id
  google.protobuf.StringValue transaction_id = 7;
  // subtotal
  money.MonetaryFields subtotal = 8;
  // tax total
  money.MonetaryFields tax_total = 9;
  // time when this transaction was opened or created.
  google.protobuf.Timestamp open_time = 10;
  // time when this transaction was last modified and triggered update call to SessionM.
  google.protobuf.Timestamp modified_time = 11;
  // items included in this transaction
  repeated TransactionItem items = 12;
  // payments included in this transaction
  repeated TransactionPayment payments = 13;
  // discounts included in this transaction
  repeated TransactionDiscount discounts = 14;
  // provider type
  google.protobuf.StringValue provider_type = 15;
  // request id
  google.protobuf.StringValue request_id = 16;
  // culture
  google.protobuf.StringValue culture = 17;
}

// Send transaction response
message SendTransactionResponse {
  // Success
  message Success {}
  // result is either success or error
  oneof result {
    // success
    Success success = 1;
    // on failure, return error
    LoyaltyRewardsError error = 2;
  }
}

// Item in the transaction
message TransactionItem {
  // item id
  google.protobuf.StringValue item_id = 1;
  // line id
  google.protobuf.StringValue line_id = 2;
  // quantity of items. Use string to preserve precision in case of float number.
  google.protobuf.StringValue quantity = 3;
  // unit price
  money.MonetaryFields unit_price = 4;
  // Amount of tax represented in the subtotal. Should only be used when the unit_price includes tax and should not
  // be used for check-level taxes such as sales tax. Any tax that is represented at at item level via this property
  // should not be included in the total transaction-level tax accounted for in the tax_total property.
  money.MonetaryFields tax_included = 5;
  // subtotal
  money.MonetaryFields subtotal = 6;
  // If this item is a modifier for another item, this is the line_id of the item it modifies.
  google.protobuf.StringValue modifies_line_id = 7;
}

// Payment in the transaction
message TransactionPayment {
  // payment id
  google.protobuf.StringValue payment_id = 1;
  // user id, optional
  google.protobuf.StringValue user_id = 2;
  // user id type, optional
  google.protobuf.StringValue user_id_type = 3;
  // amount
  money.MonetaryFields amount = 4;
  // payment type
  google.protobuf.StringValue type = 5;
  // payment time
  google.protobuf.Timestamp payment_time = 6;
}

// Discount in the transaction
message TransactionDiscount {
  // reference id
  google.protobuf.StringValue reference_id = 1;
  // reference id type
  google.protobuf.StringValue reference_id_type = 2;
  // status. Such as 'LOCKED' or 'REDEEMED' or 'INFO' or 'OFFLINE'. If discount source is 'SessionM', then this field
  // is required. Otherwise it's optional.
  google.protobuf.StringValue status = 3;
  // display name
  google.protobuf.StringValue display_name = 4;
  // discount name
  google.protobuf.StringValue discount_source = 5;
  // amount of the discount applied to the check.
  money.MonetaryFields amount = 6;
  // stack order
  google.protobuf.Int32Value stack_order = 7;
  // the time that this discount was applied to the transaction
  google.protobuf.Timestamp applied_time = 8;
  // discounted line ids
  repeated google.protobuf.StringValue discounted_line_ids = 9;
  // discounted line id quantities
  repeated google.protobuf.StringValue discounted_line_id_quantities = 10;
  // user id
  google.protobuf.StringValue user_id = 11;
}

// Redeem offer request
message RedeemOfferRequest {
  // store id
  google.protobuf.StringValue store_id = 1;
  // request id
  google.protobuf.StringValue request_id = 2;
  // offer lookup code
  google.protobuf.StringValue offer_lookup_code = 3;
  // offer lookup type
  google.protobuf.StringValue offer_lookup_type = 4;
  // POS employee id
  google.protobuf.StringValue pos_employee_id = 5;
  // is transaction closed
  google.protobuf.BoolValue is_closed = 6;
  // is transaction voided
  google.protobuf.BoolValue is_voided = 7;
  // Channel from which this transaction originated. For example, 'DoorDash'.
  google.protobuf.StringValue channel = 8;
  // transaction id
  google.protobuf.StringValue transaction_id = 9;
  // subtotal
  money.MonetaryFields subtotal = 10;
  // tax total
  money.MonetaryFields tax_total = 11;
  // time when this transaction was opened or created.
  google.protobuf.Timestamp open_time = 12;
  // time when this transaction was last modified and triggered update call to SessionM.
  google.protobuf.Timestamp modified_time = 13;
  // items included in this transaction
  repeated TransactionItem items = 14;
  // payments included in this transaction
  repeated TransactionPayment payments = 15;
  // discounts included in this transaction
  repeated TransactionDiscount discounts = 16;
  // provider type
  google.protobuf.StringValue provider_type = 17;
  // culture
  google.protobuf.StringValue culture = 18;
  // user id
  google.protobuf.StringValue user_id = 19;
}

// Redeem offer response
message RedeemOfferResponse {
  // Success
  message Success {}
  // result is either success or error
  oneof result {
    // success
    Success success = 1;
    // on failure, return error
    LoyaltyRewardsError error = 2;
  }
  // discount redeemed
  TransactionDiscount discount = 3;
}

// Reinstate offer request
message ReinstateOfferRequest {
  // store id
  google.protobuf.StringValue store_id = 1;
  // request id
  google.protobuf.StringValue request_id = 2;
  // user offer id
  google.protobuf.StringValue user_offer_id = 3;
  // employee id
  google.protobuf.StringValue employee_id = 4;
  // provider type
  google.protobuf.StringValue provider_type = 5;
}

// Reinstate offer response
message ReinstateOfferResponse {
  // Success
  message Success {}
  // result is either success or error
  oneof result {
    // success
    Success success = 1;
    // on failure, return error
    LoyaltyRewardsError error = 2;
  }
}

// SendOneTimePassword Request
message SendOneTimePasswordRequest {
  // Specifies which integrated provider to call APIs from
  google.protobuf.StringValue provider_type = 1;
  // Identifier for the user's external loyalty membership account.
  // This could point towards a membership_id, user_id or some unique identifier in the external system
  google.protobuf.StringValue external_user_identifier = 2;
}

// SendOneTimePassword Response
message SendOneTimePasswordResponse {
  // Success
  message Success {
    // User info obtained on account creation attempt
    common.loyalty.v1.LoyaltyUserInfo user_info = 1;
  }
  // result is either success or error
  oneof result {
    // on success, return transaction identifier
    Success success = 1;
    // on failure, return error
    LoyaltyOneTimePasswordError error = 2;
  }
}

// VerifyOneTimePassword Request
message VerifyOneTimePasswordRequest {
  // Specifies which integrated provider to call APIs from
  google.protobuf.StringValue provider_type = 1;
  // Identifier for the user's external loyalty membership account.
  // This could point towards a membership_id, user_id or some unique identifier in the external system
  google.protobuf.StringValue external_user_identifier = 2;
  // One time password user entered
  google.protobuf.StringValue one_time_password = 3;
}

// VerifyOneTimePassword Response
message VerifyOneTimePasswordResponse {
  // Success
  message Success {
    // User info obtained on account creation attempt
    common.loyalty.v1.LoyaltyUserInfo user_info = 1;
  }
  // result is either success or error
  oneof result {
    // on success, return transaction identifier
    Success success = 1;
    // on failure, return error
    LoyaltyOneTimePasswordError error = 2;
  }
}

// UnlinkLoyaltyAccount Request
message UnlinkLoyaltyAccountRequest {
  // Specifies which integrated provider to call APIs from
  google.protobuf.StringValue provider_type = 1;
  // Identifier for the user's external loyalty membership account.
  // This could point towards a membership_id, user_id or some unique identifier in the external system
  google.protobuf.StringValue external_user_identifier = 2;
  // dd consumer id, will mainly be used for logging purposes
  google.protobuf.StringValue consumer_id = 3;
}

// UnlinkLoyaltyAccount Response
message UnlinkLoyaltyAccountResponse {
  // Success
  message Success {
    // User info obtained on account creation attempt
    common.loyalty.v1.LoyaltyUserInfo user_info = 1;
  }
  // result is either success or error
  oneof result {
    // on success, return transaction identifier
    Success success = 1;
    // on failure, return error
    LoyaltyOneTimePasswordError error = 2;
  }
}

// UpdateExternalLoyaltyUserSession Request
message UpdateExternalLoyaltyUserSessionRequest {
  // session id - used for mobile APIs to map to the related access token
  google.protobuf.StringValue session_id = 1;
  // User's unique identifier.
  google.protobuf.StringValue external_identifier = 2;
  // Internal DD/SF consumer id
  google.protobuf.StringValue internal_consumer_id = 3;
  // provider type for this request
  google.protobuf.StringValue provider_type = 4;
}

// UpdateExternalLoyaltyUserSession Response
message UpdateExternalLoyaltyUserSessionResponse {
  // Success
  message Success {
    // session id - used for mobile APIs to map to the related access token
    google.protobuf.StringValue session_id = 1;
  }
  // result is either success or error
  oneof result {
    // on success, return transaction identifier
    Success success = 1;
    // on failure, return error
    LoyaltyRewardsError error = 2;
  }
}

// IsExternalLoyaltyUserSessionActive Request
message IsExternalLoyaltyUserSessionActiveRequest {
  // session id - used for mobile APIs to map to the related access token
  google.protobuf.StringValue session_id = 1;
  // provider type for this request
  google.protobuf.StringValue provider_type = 2;
  // Params to identify external merchant
  ExternalLoyaltyMerchantInfo external_merchant_info = 3;
}

// IsExternalLoyaltyUserSessionActive Response
message IsExternalLoyaltyUserSessionActiveResponse {
  // Success
  message Success {
    // is session active
    google.protobuf.BoolValue is_active = 7;
    // User's unique identifier.
    google.protobuf.StringValue external_identifier = 2;
    // Internal DD/SF consumer id
    google.protobuf.StringValue internal_consumer_id = 3;
  }
  // result is either success or error
  oneof result {
    // on success, return transaction identifier
    Success success = 1;
    // on failure, return error
    LoyaltyRewardsError error = 2;
  }
}

// RevokeExternalLoyaltyUserSession Request
message RevokeExternalLoyaltyUserSessionRequest {
  // session id - used for mobile APIs to map to the related access token
  google.protobuf.StringValue session_id = 1;
  // provider type for this request
  google.protobuf.StringValue provider_type = 2;
}

// RevokeExternalLoyaltyUserSession Response
message RevokeExternalLoyaltyUserSessionResponse {
  // Success
  message Success {}
  // result is either success or error
  oneof result {
    // on success, return transaction identifier
    Success success = 1;
    // on failure, return error
    LoyaltyRewardsError error = 2;
  }
}

// Right to forget related request to delete a consumer. Used in mobile APIs.
message DeleteUserLoyaltyAccountRequest {
  // provider type used for validation
  google.protobuf.StringValue provider_type = 1;
  // This is necessary to pass along when MIS calls 3rd party apis to ensure we are making requests to the right
  // merchant_id.
  ExternalLoyaltyMerchantInfo external_merchant_info = 2;

  // Way to identify the consumer with the external provider information.
  oneof consumer_info {
    // Used for mobile APIs; Session id created that will map to corresponding access token to fetch PII.
    google.protobuf.StringValue session_id = 3;
    // User's unique identifier.
    google.protobuf.StringValue external_identifier = 4;
  }
}

// Right to forget related response to delete a consumer. Used in mobile APIs.
message DeleteUserLoyaltyAccountResponse {
  // Succuss
  message Success {}
  // result is either success or error.
  oneof result {
    // Returned on succcess.
    Success success = 1;
    // returned on failure.
    LoyaltyRewardsError error = 2;
  }
}

// Apply Reward to basket and fetch discount amount. Used in OloPunchh integration
message ApplyLoyaltyRewardRequest {
  // used for olopunchh integration to fetch API auth token DEPRECATED
  google.protobuf.Int64Value session_id = 1 [deprecated = true];
  // used to indicate provider type
  google.protobuf.StringValue provider_type = 2;
  // store id
  google.protobuf.StringValue store_id = 3;
  // order details houses cart info
  OrderDetails order_details = 4;
  // reward id referring to the chosen reward
  google.protobuf.StringValue reward_id = 5;
  // Param to identify external consumer
  ExternalLoyaltyConsumerInfo external_consumer_info = 6;
  // external cart id - stores external POS cart id
  google.protobuf.StringValue external_cart_id = 7;
  // used for olopunchh integration to fetch API auth token
  google.protobuf.StringValue session_id_string = 8;
}

// Apply Reward to basket and fetch discount amount. Used in OloPunchh integration
message ApplyLoyaltyRewardResponse {
  // on success, return rewards info
  message Success {
    // loyalty rewards
    money.LoyaltyRewardDetails loyalty_rewards = 1;
  }
  // result is either success or error
  oneof result {
    // on success, return loyalty account info
    Success success = 1;
    // on failure, return error
    LoyaltyRewardsError error = 2;
  }
}

// Request to get loyalty points
message GetLoyaltyPointsRequest {
  // provider type
  google.protobuf.StringValue provider_type = 1;
  // loyalty membership identifier
  google.protobuf.StringValue loyalty_membership_identifier = 2;
  // provider store id
  google.protobuf.StringValue provider_store_id = 3;
  // provider store parent id
  google.protobuf.StringValue provider_store_parent_id = 4;
  // transaction timestamp
  google.protobuf.Timestamp transaction_timestamp = 5;
  // eligible subtotal
  money.MonetaryFields subtotal = 6;
  // additional points offers
  repeated google.protobuf.StringValue additional_points_offers = 7;
}

// Response to get loyalty points
message GetLoyaltyPointsResponse {
  // loyalty points
  google.protobuf.Int32Value loyalty_points = 1;
  // eligible points offer ids
  repeated google.protobuf.StringValue eligible_points_offer_ids = 2;
  // cart analysis reference id
  google.protobuf.StringValue cart_analysis_reference_id = 3;
  // cart analysis result in json string format
  google.protobuf.StringValue cart_analysis_result_json_string = 4;
}

// Request to apply loyalty points
message ApplyLoyaltyPointsRequest {
  // provider type
  google.protobuf.StringValue provider_type = 1;
  // loyalty membership identifier
  google.protobuf.StringValue loyalty_membership_identifier = 2;
  // provider store id
  google.protobuf.StringValue provider_store_id = 3;
  // provider store parent id
  google.protobuf.StringValue provider_store_parent_id = 4;
  // transaction timestamp
  google.protobuf.Timestamp transaction_timestamp = 5;
  // cart analysis reference id
  google.protobuf.StringValue cart_analysis_reference_id = 6;
  // cart analysis result in json string format
  google.protobuf.StringValue cart_analysis_result_json_string = 7;
}

// Response to apply loyalty points
message ApplyLoyaltyPointsResponse {
  // loyalty points
  google.protobuf.Int32Value loyalty_points = 1;
  // eligible points offer ids
  repeated google.protobuf.StringValue eligible_points_offer_ids = 2;
}
