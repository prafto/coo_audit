syntax = "proto3";

package merchant_integrations;

import "common/code.proto";
import "common/service_client_config.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/wrappers.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.merchant_integrations";

// Grpc service to retrieve menu_jsons
service MenuJsonService {
  // Get menu jsons for given pos_menu_job
  rpc GetMenuJsonsByPosMenuJobId(GetMenuJsonsByPosMenuJobIdRequest) returns (GetMenuJsonsByPosMenuJobIdResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 10000;
    option (service_client.client_method_config).retry_config.max_attempts = 2;
    // default circuit breaker config
  }
  // Get raw menu jsons for given pos_menu_job
  rpc GetRawMenuJsonsByPosMenuJobId(GetRawMenuJsonsByPosMenuJobIdRequest) returns (GetRawMenuJsonsByPosMenuJobIdResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 10000;
    option (service_client.client_method_config).retry_config.max_attempts = 2;
    // default circuit breaker config
  }

  // Get menu and raw menu jsons for given pos_menu_job
  rpc GetMenuJsonsByStoreId(GetMenuJsonsByStoreIdRequest) returns (GetMenuJsonsByStoreIdResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 20000;
    option (service_client.client_method_config).retry_config.max_attempts = 2;
    // default circuit breaker config
  }

  // Submit list of channel based exclusive items
  rpc SubmitMenuChannelJsonToS3(SubmitMenuChannelJsonToS3Request) returns (SubmitMenuChannelJsonToS3Response) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 20000;
    option (service_client.client_method_config).retry_config.max_attempts = 2;
    // default circuit breaker config
  }

  // Get list of channel based exclusive items for store_id
  rpc GetMenuChannelJsonByStoreId(GetMenuChannelJsonByStoreIdRequest) returns (GetMenuChannelJsonByStoreIdResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 20000;
    option (service_client.client_method_config).retry_config.max_attempts = 2;
    // default circuit breaker config
  }

  // Get menu jsons for given provider_type and location_id
  rpc GetStoreMenuJsons(GetStoreMenuJsonsRequest) returns (GetStoreMenuJsonsResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 180000;
    option (service_client.client_method_config).retry_config.max_attempts = 2;
    // default circuit breaker config
  }
}

// Request for retrieving list of translated menu_jsons for given pos_menu_job_id
message GetMenuJsonsByPosMenuJobIdRequest {
  // pos_menu_job UUID
  string pos_menu_job_id = 1;
}

// Response for list of menu_jsons
message GetMenuJsonsByPosMenuJobIdResponse {
  // list of translated menu_jsons
  repeated string results = 1; // JSON-data
}

// Request for retrieving list of raw menu_jsons for given pos_menu_job_id
message GetRawMenuJsonsByPosMenuJobIdRequest {
  // pos_menu_job UUID
  string pos_menu_job_id = 1;
}

// Response for list of raw menu_jsons
message GetRawMenuJsonsByPosMenuJobIdResponse {
  // list of raw menu_jsons
  repeated string results = 1; // JSON-data
}

// Request for retrieving list of all menu_jsons for given store_id or pos_menu_job_id
message GetMenuJsonsByStoreIdRequest {
  //store id
  google.protobuf.Int64Value store_id = 1;
  // pos_menu_job UUID
  google.protobuf.StringValue pos_menu_job_id = 2;
  // menu workflow UUID (to look up in mis_menu_activities table)
  google.protobuf.StringValue menu_workflow_id = 3;
}

// Response for list of all menu jsons
message GetMenuJsonsByStoreIdResponse {
  // list of all menu jsons
  repeated MenuJsonsMap menu_jsons_map = 1;
}

// list of menu jsons
message MenuJsonsMap {
  // menu or raw menu type
  google.protobuf.StringValue menu_type = 1;
  // list of menu jsons
  repeated google.protobuf.StringValue menu_jsons = 2;
}

// Request to submit list of channel based exclusive items
message SubmitMenuChannelJsonToS3Request {
  // Menu channel item details
  repeated MenuChannelItemDetails menu_channel_item_details = 1;
}

// Response to submit list of channel based exclusive items
message SubmitMenuChannelJsonToS3Response {
  // Status code
  code.Code code = 1;
  // Error message
  google.protobuf.StringValue error = 2;
}

// channel based exclusive items
message MenuChannelItemDetails {
  // item name
  google.protobuf.StringValue item_name = 1;
  // channel
  google.protobuf.StringValue channel = 2;
  // location id
  google.protobuf.StringValue location_id = 3;
  // store id
  google.protobuf.StringValue store_id = 4;
}

// Request list of channel based exclusive items for store_id
message GetMenuChannelJsonByStoreIdRequest {
  // store_id
  google.protobuf.StringValue store_id = 1;
}

// Response to fetch list of channel based exclusive items
message GetMenuChannelJsonByStoreIdResponse {
  // Status code
  code.Code code = 1;
  // Error message
  google.protobuf.StringValue error = 2;
  // result
  google.protobuf.StringValue result = 3;
}

// Request for retrieving list of menu_jsons constructed from Menu 2.0 given provider_type and location_id
message GetStoreMenuJsonsRequest {
  // store provider_type
  string provider_type = 1;
  // provide location_id or onboarding_id
  oneof store_level_id {
    // store location_id
    string location_id = 2;
    // store onboarding_id
    string onboarding_id = 3;
    // internal store_id
    string store_id = 4;
  }
}

// Response for list of menu_jsons
message GetStoreMenuJsonsResponse {
  // list of menus got from Menu 2.0
  repeated StoreMenuData results = 1;
}

// Menu constructed from Menu 2.0
message StoreMenuData {
  // JSON-data
  string menu_json = 1;
}
