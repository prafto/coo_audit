syntax = "proto3";
// buf:lint:ignore DIRECTORY_SAME_PACKAGE
// buf:lint:ignore PACKAGE_VERSION_SUFFIX
package merchant_integrations;

import "common/code.proto";
import "common/common.proto";
import "common/service_client_config.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.merchant_integrations";

// CRM related integration services
service CrmIntegrationService {
  option (service_client.client_config).service_name = "merchant-integrations";
  option (service_client.client_config).service_app = "tier3-service";
  // Connect to a CRM provider
  rpc ConnectCrmProvider(ConnectCrmProviderRequest) returns (ConnectCrmProviderResponse) {}
  // Disconnect from a CRM provider
  rpc DisconnectCrmProvider(DisconnectCrmProviderRequest) returns (DisconnectCrmProviderResponse) {}
  // Get CRM integration status
  rpc GetCrmIntegrationStatus(GetCrmIntegrationStatusRequest) returns (GetCrmIntegrationStatusResponse) {}
  // Get CRM provider data
  rpc GetCrmProviderData(GetCrmProviderDataRequest) returns (GetCrmProviderDataResponse) {}
  // Update CRM provider data
  rpc UpdateCrmProviderData(UpdateCrmProviderDataRequest) returns (UpdateCrmProviderDataResponse) {}
  // Register device with CRM provider
  rpc RegisterCrmDevice(RegisterCrmDeviceRequest) returns (RegisterCrmDeviceResponse) {
    option deprecated = true;
  }
}

// Connect CRM provider integration request message
message ConnectCrmProviderRequest {
  // entity ID to connect the integration for
  string entity_id = 1;
  // entity type to connect the integration for
  CrmEntityType entity_type = 2;
  // user ID connecting the integration
  string user_id = 3;
  // CRM provider to connect the integration for
  CrmIntegrationProvider provider = 4;
  // Experience type for the integration
  Experience experience = 5;
  // CRM provider auth data
  oneof provider_oauth_data {
    // Mailchimp auth data
    MailchimpOAuthData mailchimp_oauth_data = 6;
  }
}

// Disconnect CRM provider integration request message
message DisconnectCrmProviderRequest {
  // CRM provider to disconnect the integration for
  CrmIntegrationProvider provider = 1;
  // entity type to disconnect the integration for
  CrmEntityType entity_type = 2;
  // entity ID to disconnect the integration for
  string entity_id = 3;
  // user ID disconnecting the integration
  string user_id = 4;
  // Experience type for the integration
  Experience experience = 5;
}

// OAuth data to persist for Mailchimp. Info: https://mailchimp.com/developer/marketing/guides/access-user-data-oauth-2/
message MailchimpOAuthData {
  // Mailchimp OAuth's access_token
  string access_token = 1;
  // Mailchimp OAuth's server_prefix
  string server_prefix = 2;
}

// Get crm provider data request
message GetCrmProviderDataRequest {
  // crm integration id
  string crm_integration_id = 1;
  // CRM provider to connect the integration for
  CrmIntegrationProvider provider = 2;
}

// Get crm provider data response
message GetCrmProviderDataResponse {
  // crm integration id
  string crm_integration_id = 1;
  // CRM provider to connect the integration for
  CrmIntegrationProvider provider = 2;
  // CRM provider data
  ProviderData provider_data = 4;
}

// Update crm provider data request
message UpdateCrmProviderDataRequest {
  // crm integration id
  string crm_integration_id = 1;
  // CRM provider to connect the integration for
  CrmIntegrationProvider provider = 2;
  // CRM provider data
  ProviderData provider_data = 4;
}

// update crm provider data response
message UpdateCrmProviderDataResponse {
  // Status code
  code.Code code = 1;
  // Error message
  google.protobuf.StringValue error = 2;
}

// Provider data used for sync (sync configuration)
message ProviderData {
  // Tags
  repeated Tag tags = 1;
  // Lists
  repeated List lists = 2;
}

// Tags are like labels associated to contacts.
// i.e. for Mailchimp: https://mailchimp.com/developer/transactional/api/tags/
message Tag {
  // Tag string
  string tag = 1;
  // External tag ID
  string external_tag_id = 2;
  // If the tag is selected to associate to the customers data
  bool selected_for_sync = 3;
}

// List consisting of contacts.
// i.e. for Mailchimp (Audiences): https://mailchimp.com/developer/marketing/api/lists/
message List {
  // name
  string name = 1;
  // Mailchimp list ID
  string external_list_id = 2;
  // If the list is selected for sync.
  bool selected_for_sync = 3;
}

// Experiences to sync CRM data for
enum Experience {
  // unspecified
  EXPERIENCE_UNSPECIFIED = 0;
  // Storefront
  EXPERIENCE_STOREFRONT = 1;
  // Marketplace
  EXPERIENCE_MARKETPLACE = 2;
}

// CRM providers to perform sync for
enum CrmIntegrationProvider {
  // unspecified
  CRM_INTEGRATION_PROVIDER_UNSPECIFIED = 0;
  // Mailchimp email marketing provider
  CRM_INTEGRATION_PROVIDER_MAILCHIMP = 1;
}

// entities to perform CRM sync for
enum CrmEntityType {
  // unspecified
  CRM_ENTITY_TYPE_UNSPECIFIED = 0;
  // store entity
  CRM_ENTITY_TYPE_STORE = 1;
  // business entity
  CRM_ENTITY_TYPE_BUSINESS = 2;
  // business group entity
  CRM_ENTITY_TYPE_BUSINESS_GROUP = 3;
}

// connect CRM provider response message
message ConnectCrmProviderResponse {
  // Status code
  code.Code code = 1;
  // Error message
  google.protobuf.StringValue error = 2;
}

// disconnect CRM provider response message
message DisconnectCrmProviderResponse {
  // Status code
  code.Code code = 1;
  // Error message
  google.protobuf.StringValue error = 2;
}

// state of a CRM integration
enum CrmIntegrationState {
  // unspecified
  CRM_INTEGRATION_STATE_UNSPECIFIED = 0;
  // activated
  CRM_INTEGRATION_STATE_ACTIVATED = 1;
  // deactivated
  CRM_INTEGRATION_STATE_DEACTIVATED = 2;
}

// get CRM integration status request
message GetCrmIntegrationStatusRequest {
  // CRM provider to disconnect the integration for
  CrmIntegrationProvider provider = 1;
  // entity type to disconnect the integration for
  CrmEntityType entity_type = 2;
  // entity ID to disconnect the integration for
  string entity_id = 3;
  // Experience type for the integration
  Experience experience = 4;
}

// get CRM integration status response
message GetCrmIntegrationStatusResponse {
  // state
  CrmIntegrationState state = 1;
  // user_id who activated the integration
  string activated_by = 2;
  // user_id who deactivated the integration
  string deactivated_by = 3;
  // activation timestamp
  google.protobuf.Timestamp activated_at = 4;
  // deactivation timestamp
  google.protobuf.Timestamp deactivated_at = 5;
}

// Identifier used for registration
enum CrmUserIdentifierType {
  option deprecated = true;
  // unspecified
  CRM_USER_IDENTIFIER_TYPE_UNSPECIFIED = 0;
  // Push token
  CRM_USER_IDENTIFIER_TYPE_PUSH_TOKEN = 1;
}

// Register device request to crm provider for service such as push notifications
message RegisterCrmDeviceRequest {
  option deprecated = true;
  // indicates user's crm provider, such as Infobip
  google.protobuf.StringValue crm_provider = 1;
  // indicates user's loyalty provider, such as Spendgo
  google.protobuf.StringValue loyalty_provider = 2;
  // Merchant id in the external loyalty provider
  google.protobuf.StringValue merchant_id = 3;
  // user session identifier - this could be external_id, loyalty session id
  google.protobuf.StringValue session_id = 4;
  // crm user identifier type - could internal id, external id, push token
  CrmUserIdentifierType crm_id_type = 5;
  // crm user identifier value
  google.protobuf.StringValue crm_user_id = 6;
}

// Register device response from crm provider for service such as push notifications
message RegisterCrmDeviceResponse {
  option deprecated = true;
  // external Id to indicate successful upsert
  google.protobuf.StringValue external_id = 1;
}
