syntax = "proto3";

package promotion_service;

import "common/common.proto";
import "common/dayparts.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "promotion/budget.proto";

option go_package = "promotion";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.promotion";

message Limitation {
  LimitationType type = 1;
  enum LimitationType {
    reserved 14;
    reserved "LIMITATION_TYPE_IS_SCHEDULE_AHEAD_ONLY";
    LIMITATION_TYPE_INVALID = 0;
    LIMITATION_TYPE_UNSET = 1;
    LIMITATION_TYPE_IS_ACTIVE = 2;
    LIMITATION_TYPE_ACTIVE_DATES = 3;
    LIMITATION_TYPE_DAY_PARTS = 4;
    LIMITATION_TYPE_MAX_REDEMPTION_COUNT = 5;
    LIMITATION_TYPE_BUDGET = 6;
    LIMITATION_TYPE_MAX_REDEMPTION_COUNT_PER_CUSTOMER = 7;
    LIMITATION_TYPE_MAX_CLAIM_COUNT = 8;
    LIMITATION_TYPE_EXPERIENCE = 9;
    LIMITATION_TYPE_NUM_DAYS_ACTIVE_AFTER_CLAIM = 10;
    LIMITATION_TYPE_CHANNEL = 11;
    LIMITATION_TYPE_SHADOW = 12;
    LIMITATION_TYPE_FREQUENCY_CAP = 13;
    // LIMITATION_TYPE_MARKET_STATE = 14; Deprecated. DO NOT USE
    LIMITATION_TYPE_MEMBERSHIP_MAX_REDEMPTION_COUNT_PER_CUSTOMER = 15;
  }
  reserved 12;
  reserved "is_schedule_ahead_only_promotion";
  oneof value {
    google.protobuf.BoolValue is_active = 2; // LIMITATION_TYPE_IS_ACTIVE_ACTIVE
    ActiveDates active_dates = 3; // LIMITATION_TYPE_IS_ACTIVE_ACTIVE_DATES
    DayParts day_parts = 4; // LIMITATION_TYPE_DAY_PARTS
    google.protobuf.Int32Value max_redemption_count = 5; // LIMITATION_TYPE_MAX_REDEMPTION_COUNT or LIMITATION_TYPE_MAX_REDEMPTION_COUNT_PER_CUSTOMER
    Budget budget = 6;
    google.protobuf.Int32Value max_claim_count = 7; // LIMITATION_TYPE_MAX_CLAIM_COUNT
    Experiences experiences = 8; // An OR will be done if any experience is satisfied
    google.protobuf.Int32Value num_days_active_after_claim = 9; // numb days active after claiming a campaign
    Channels channels = 10; // LIMITATION_TYPE_CHANNEL to filter by  platform
    FrequencyCap frequency_cap = 11; // LIMITATION_TYPE_FREQUENCY_CAP
    // MarketStateTypes market_state_types_supported = 12; Deprecated. DO NOT USE
  }
}

message Experiences {
  repeated common.Experience experience = 1;
}

message ActiveDates {
  google.protobuf.Timestamp start_time = 1;
  google.protobuf.Timestamp end_time = 2;
}

message DayParts {
  reserved 3;
  reserved "eligibility_timestamp_type";
  repeated dayparts.DayPart day_part = 1;
  google.protobuf.StringValue timezone = 2;
}

message Channels {
  repeated common.Channel channel = 1;
}

// Contains information to configure the frequency capping.
message FrequencyCap {
  google.protobuf.Int32Value max_frequency = 1;
  FrequencyCapType event_type = 2;
  // The rolling window of days in which max_frequency must be respected
  // For example:
  //          max_frequency = 2 and rolling_window_size_in_days = 7
  //          User sees banner on day 1 of month 2.
  //          User could potentially see the banner again the next day. However it sees the banner on day 3 again
  //          After day 3, the user has reach `max_frequency` in `rolling_window_size_in_days`. The next time the
  //          user will be able to see the banner is until day 8 (7 days after the first time it saw it)
  google.protobuf.Int32Value rolling_window_size_in_days = 3;

  enum FrequencyCapType {
    FREQUENCY_CAP_TYPE_UNSPECIFIED = 0;
    FREQUENCY_CAP_TYPE_VIEW = 1;
    FREQUENCY_CAP_TYPE_CLICK = 2;
    FREQUENCY_CAP_TYPE_DISMISS = 3;
    FREQUENCY_CAP_TYPE_VIEW_GLOBAL = 4;
    FREQUENCY_CAP_TYPE_CLICK_GLOBAL = 5;
  }
}
