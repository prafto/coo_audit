syntax = "proto3";

package promotion_service;

import "common/money.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "promotion/common.proto";
import "promotion/criterion.proto";
import "promotion/display_ad.proto";
import "promotion/limitation.proto";
import "promotion/membership.proto";
import "promotion/placement.proto";

option go_package = "promotion";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.promotion";

message BidModifier {
  ModifierCriterionType type = 1;
  enum ModifierCriterionType {
    MODIFIER_CRITERION_TYPE_INVALID = 0;
    MODIFIER_CRITERION_TYPE_UNSET = 1;
    MODIFIER_CRITERION_TYPE_KEYWORD = 2;
    MODIFIER_CRITERION_TYPE_USER = 3;
    MODIFIER_CRITERION_TYPE_KEYWORD_BIDDING_SEARCH = 4;
  }

  // for tracking/logging purpose when the modifier got applied
  string id = 2;

  message KeywordCriterion {
    // the keyword/topic to match, i.e., a subset of the keyword_tags in AdGroup's Target
    repeated google.protobuf.StringValue keywords = 1;
    // the keywords get canonicalized, i.e., both pop && pops map to pop
    repeated google.protobuf.StringValue canonicalized_keywords = 2;
  }

  oneof criteria {
    KeywordCriterion keyword_criterion = 3;
    UserCriterion user_criterion = 4;
  }

  // the factor to apply, 0.1 - 10.0, i.e., true_bid = bid_price * multiplier
  google.protobuf.DoubleValue multiplier = 5;

  // A brief description as a memo about what the bid modifier is for
  string description = 6;

  oneof modifier {
    // the factor to apply, 0.1 - 10.0, i.e., true_bid = bid_price * multiplier
    // will need to deprecate multiplier #5 later on
    google.protobuf.DoubleValue multiplier_modifier = 7;
    // override bid price
    google.protobuf.Int32Value override_bid_price_modifier = 8;
  }
}

// bid control
message Bid {
  // bid price
  money.MonetaryFields bid_price = 1;

  // list of bid modifiers, they are expected to be mutually exclusive, however, it could be very hard
  // to do the validations when we start to support all UserCriterion, or the supported bid modifier criterion
  // become more complex.
  // For validation for now:
  // 1. keywords criterion -- the set of keywords shouldn't overlap among the bid modifiers
  // 2. user criterion     -- each bid modifier in an AdGroup should have a different user criterion
  repeated BidModifier bid_modifiers = 2;

  // flag to indicate whether this bid is automated
  // 0 means manual bid
  // 1 means automated bid
  BidType bid_type = 3;

  // the original bid before any bid modifiers are applied
  google.protobuf.Int32Value true_bid = 4;

  // Rules for Automated Bidding
  AutomatedBiddingOptions automated_bid_options = 5;
}

// describe the type of bid price calculation
enum BidType {
  // using fixed bidding price
  MANUAL_SET_BIDDING = 0;

  // using auto calculated bidding price
  AUTOMATED_BIDDING = 1;
}

message AutomatedBiddingOptions {
  // bidding strategy
  enum BidStrategy {
    // moderate strategy - will be default
    BID_STRATEGY_BALANCED = 0;

    // least aggressive strategy
    BID_STRATEGY_CONSERVATIVE = 1;

    // most aggressive strategy
    BID_STRATEGY_AGGRESSIVE = 2;
  }
  // strategy for bid capping
  BidStrategy bid_cap_strategy = 1;
}

// describe the type of ad
enum AdType {
  // invalid ad group type
  AD_TYPE_UNSPECIFIED = 0;
  // sponsored listing ad type for Rxs
  AD_TYPE_SPONSORED_LISTING = 1;
  // sponsored product ad type for CPG
  AD_TYPE_SPONSORED_PRODUCTS = 2;
  // sponsored brand ad (ex. digital endcaps)
  AD_TYPE_SPONSORED_BRAND = 3;
}

// target objects, if there're more than one target
// we take the joined overlap (AND style)
message Target {
  // user targeting (user segmentation)
  repeated UserCriterion user_criteria = 1;

  // content targeting: placement (where to display / promote)
  repeated Placement placements = 2;

  // tag / keyword / topic / collection (SP) / category (SP) targeting
  repeated string keyword_tags = 3;

  // If true, the keywords will be autogenerated in indexing. The campaign can pass CRUD validation without keywords.
  google.protobuf.BoolValue should_autogenerate_keywords = 4;

  // keyword tags blocked for targeting
  repeated string blocked_keyword_tags = 5;

  // target specific bid control
  Bid bid = 6;

  // If true, and placement is SP, keyword_tags should be automatically generated. This campaign can pass CRUD validation without keywords.
  google.protobuf.BoolValue should_autogenerate_placements = 7;

  // For Rx Item Campaigns that require a store_id to MSID pairing. Store_ids will be saved as a list of memberships under target as we are "targeting" these rx item campaigns to these stores
  repeated Membership memberships = 8;
}

// AdCreative allows Creative customization at the AdGroup level
message AdCreative {
  // id
  string id = 1;

  // url from which this AdCreative sources content
  string content_url = 2;

  // limitations that affect visibility of this creative
  repeated Limitation limitations = 3;

  // 0-indexed order of preference. among two applicable creatives,
  // the one with lower sort order is shown. applicable creatives with the same
  // sort order will all have equal chance of being shown.
  // defaults to 0 if not set.
  google.protobuf.Int32Value sort_order = 4;

  // target for the creative
  Target target = 5;
}

// https://www.facebook.com/business/learn/lessons/ad-set-level-overview
message AdGroup {
  // the primary key for ad group (UUID)
  string id = 1;
  // name is the name for ad group
  string name = 2;

  // Budget & Schedule
  repeated Limitation limitations = 3;

  // targets[].bid takes precedence over this one.
  // bidding control
  Bid bid = 4;

  // type of ads in this group
  AdType type = 5;

  // Deprecated. Use targets instead.
  // Targeting
  Target target = 6;

  // Store membership
  repeated Membership memberships = 7;

  // list of Ad objects
  repeated DisplayAd display_ads = 8;

  // Target & configure creative ad content
  repeated AdCreative ad_creatives = 9;

  // added for Sponsored Product
  repeated Target targets = 10;

  // Persisted state in the DB
  State state = 11;

  // Calculated status only on the read path
  DerivedStatus derived_status = 12;

  // when the state of the entity is changed, this field will be populated
  StateChangeInfo state_change_info = 13;
}
