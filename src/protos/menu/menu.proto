syntax = "proto3";

package menu;

import "common/common.proto";
import "common/inventory.proto";
import "common/marketplace_purchase.proto";
import "common/measurements.proto";
import "common/money.proto";
import "common/mp_catering.proto";
import "common/restriction_rules.proto";
import "doordash.retail.serving.v1/catalog_data.proto";
import "doordash.retail.serving.v1/retail_product.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "menu/menu_option.proto";

option go_package = "github.com/doordash/services-protobuf/generated/menu/grpc";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.menu.grpc";

message EntityPosition {
  string store_menu_id = 1;
  string menu_id = 2;
  string category_id = 3;
  string top_item_id = 4;
  string parent_id = 5;
  string entity_id = 6;
  EntityType entity_type = 7;
}

message Status {
  google.protobuf.StringValue error = 1;
}

message Hours {
  // When not empty, must have length=7 represents from Monday to Sunday.
  repeated bool days_bit_array = 1;
  // start_time and end_time are in milliseconds, represents a period in a day.
  // 0 <= start_time <= end_time < 24*60*60*1000
  google.protobuf.Int64Value start_time = 2;
  google.protobuf.Int64Value end_time = 3;
  string id = 4;
}

// Regular hours exception (store special hours or pos menu special hours)
message HoursException {
  // Date when hours exception should be applied.
  // Must be compatible with java.text.SimpleDateFormat.
  string date = 1;
  // start_time and end_time are in milliseconds, represents a period in a day.
  // 0 <= start_time <= end_time < 24*60*60*1000
  google.protobuf.Int64Value start_time = 2;
  google.protobuf.Int64Value end_time = 3;
  // Sets the hours exception to closure if true (applied to whole day, regardless of start_time and end_time)
  google.protobuf.BoolValue is_closed = 4;
  // id of the hours exceptions
  string id = 5;
  // Description of the hours exception (will be populated only for store special hours)
  google.protobuf.StringValue description = 6;
  // Common identified for the group of hours exceptions created with a single request (will be set only for store SH)
  google.protobuf.StringValue request_id = 7;
  // Creation timestamp for special hours (for the moment set on store special hours only)
  google.protobuf.Timestamp created_at = 8;
}

message Context {
  ContextType type = 1;
  string value = 2;
}

enum ContextType {
  CT_UNKNOWN = 0;
  // position context types
  CT_STORE_MENU_ID = 1;
  CT_MENU_ID = 2;
  CT_CATEGORY_ID = 3;
  CT_TOP_ITEM_ID = 4;
  CT_PARENT_ID = 5;
  // global contexts types
  CT_LOCAL = 10;
  // PICKUP/DELIVERY
  CT_SERVICE_TYPE = 11;
  // Supply chain Rx ID context type to fetch Rx specific item fields (i.e. price)
  CT_SUPPLY_CHAIN_RX_ID = 12;
  // Item photo experiment
  CT_ITEM_PHOTO_EXPERIMENT = 13;
  // Experiment name in case the context is for A/B experiment
  CT_EXPERIMENT_NAME = 14;
  // Treatment name in case the context is for A/B experiment
  CT_EXPERIMENT_TREATMENT_NAME = 15;
  // Version of menu mapping
  CT_MENU_MAPPING_VERSION = 16;
}

message EntityContext {
  repeated Context contexts = 1;
}

message EntityMaps {
  map<string, Item> item_map = 1;
  map<string, Extra> extra_map = 2;
  map<string, MenuDAG> dag_map = 3;
}

message ItemDisplayInfo {
  OverridableString title = 1 [(menuoption.is_sticky) = {type: STICKY_TYPE_STICKY}];
  OverridableString description = 2 [(menuoption.is_sticky) = {type: STICKY_TYPE_OVERRIDE}];
  ImageInfo image = 3;
  repeated Badge badges = 4;
  google.protobuf.StringValue internal_notes = 5;
  google.protobuf.StringValue external_notes = 6;
  google.protobuf.Int32Value sort_id = 7 [(menuoption.is_sticky) = {type: STICKY_TYPE_DECIDE_BY_RUNTIME}];
  // field to store the photo experiments, and to replace
  // the image field during item resolution
  OverridableImageInfo photo_experiments = 8;
  repeated ImageInfo images = 9;
  // display_price_info stores the display price and base price for the item. It is not used for order/checkout
  // for payment calculations. It is strictly used for display.
  DisplayPriceInfo display_price_info = 10;
  // Descriptions generated by AI, serving as backup when mx provided description is blank.
  // ai_description will not need to be consumed by client, SOT of description is still in description field
  // https://docs.google.com/document/d/1Z7oDZXOXqwPokFW9Wu60wYYuKjopadC6aIUxwzILMAQ/edit#bookmark=id.v6m2xf9rbf2m
  // This field needs to be sticky: https://docs.google.com/document/d/1Z7oDZXOXqwPokFW9Wu60wYYuKjopadC6aIUxwzILMAQ/edit#heading=h.dnruukhvragn
  AIDescription ai_description = 11 [(menuoption.is_sticky) = {type: STICKY_TYPE_OVERRIDE}];
}

// AI description
message AIDescription {
  // value / content of description
  google.protobuf.StringValue value = 1;
  // whether it is applied as the item description
  google.protobuf.BoolValue applied = 2;
}

message DisplayPriceInfo {
  // display_price holds the price that is calculated by Menu-Data-Service internally. These are not used for
  // actual price calculations but a display price to show. PaymentInfo is still the source of truth for price.
  OverridablePriceInfo display_price = 1;
  // display_base_price holds the base price that is calculated by Menu-Data-Service internally. These are not used for
  // actual base price calculations but a display base price to show. PaymentInfo is still the source of truth for base price.
  OverridablePriceInfo display_base_price = 2;
}

message ImageInfo {
  google.protobuf.StringValue id = 1;
  google.protobuf.StringValue url = 2;
  google.protobuf.StringValue raw_url = 3;
  google.protobuf.StringValue img_description = 4; // for accessibility
  // classifies what type of image needs to be displayed for example in case the image url is not set
  ImageDisplayType image_display_type = 5;
}

enum ImageDisplayType {
  IMAGE_DISPLAY_TYPE_UNSPECIFIED = 0;
  IMAGE_DISPLAY_TYPE_LEFT_HALF_CIRCLE = 1;
  IMAGE_DISPLAY_TYPE_WHOLE_CIRCLE = 2;
  IMAGE_DISPLAY_TYPE_RIGHT_HALF_CIRCLE = 3;
}

enum BadgeType {
  BT_UNKNOWN = 0;
}

message Badge {
  BadgeType type = 1;
  google.protobuf.StringValue icon_type = 2;
  google.protobuf.StringValue text = 3;
}

message PaymentInfo {
  OverridablePriceInfo price = 1;
  OverridablePriceInfo base_price = 2 [(menuoption.is_sticky) = {type: STICKY_TYPE_STICKY}];
}

message DishInfo {
  NutritionInfo nutrition_info = 1;
  ClassificationInfo classification_info = 2;
  google.protobuf.Int32Value serving_size = 3;
}

enum CaloricDisplayType {
  CDT_UNKNOWN = 0;
  CDT_SINGLE = 1;
  CDT_DOUBLE = 2;
  CDT_MULTIPLE = 3;
  CDT_ADDITIVE = 4;
}

// default unit is grams
message CaloricInfo {
  int32 lower_range = 1;
  google.protobuf.Int32Value higher_range = 2;
  CaloricDisplayType display_type = 3;
}

message NutritionInfo {
  repeated string allergens = 1;
  CaloricInfo caloric_info = 2 [(menuoption.is_sticky) = {type: STICKY_TYPE_STICKY}];
}

enum TagType {
  TT_UNKNOWN = 0;
  TT_ITEM_CUISINE = 1;
  TT_ITEM_MEAL_TYPE = 2;
  TT_ITEM_PROTEIN_TYPE = 3;
  TT_ITEM_PROMOTED = 4;
  TT_MENU_EXPERIENCE = 5;
  TT_MENU_DEACTIVATION = 6; // We set menu.is_active to false by sanitizor.
  TT_ITEM_ARCHIVED = 7; // We archived an item/extra/option by sanitizor.
}

// Tag Key
enum TagKey {
  // unknown
  TAG_KEY_UNSPECIFIED = 0;
  // dietary_vegetarian
  TAG_KEY_DIETARY_VEGETARIAN = 1;
  // dietary_vegan
  TAG_KEY_DIETARY_VEGAN = 2;
  // deprecated; to specify if an item is gluten free, use AllergenFreeTag (ALLERGEN_FREE_GLUTEN_FREE)
  TAG_KEY_DIETARY_GLUTEN_FREE = 3 [deprecated = true];
  // is item part of SNAP?
  TAG_KEY_FOOD_PROGRAM_SNAP = 4;
  // All the categories are either inactive or having no active items.
  TAG_KEY_NO_USEFUL_CATEGORIES = 5;
  // The item/extra/option has un-orderable quantity info.
  TAG_KEY_QUANTITY_INFO_ERROR = 6;
  // deprecated; to specify if an item contains beef, use AllergenContainTag. ALSO: to highlight it does not contain beef, use AllergenFreeTag
  TAG_KEY_DIETARY_BEEF = 7 [deprecated = true];
  // deprecated; to specify if an item contains poultry, use AllergenContainTag. ALSO: to highlight it does not contain poultry, use AllergenFreeTag
  TAG_KEY_DIETARY_POULTRY = 8 [deprecated = true];
  // deprecated; to specify if an item contains pork, use AllergenContainTag. ALSO: to highlight it does not contain pork, use AllergenFreeTag
  TAG_KEY_DIETARY_PORK = 9 [deprecated = true];
  // deprecated; to specify if an item contains fish, use AllergenContainTag. ALSO: to highlight it does not contain fish, use AllergenFreeTag
  TAG_KEY_DIETARY_FISH = 10 [deprecated = true];
  // deprecated; to specify if an item contains shell-fish, use AllergenContainTag. ALSO: to highlight it does not contain shell-fish, use AllergenFreeTag
  TAG_KEY_DIETARY_SHELL_FISH = 11 [deprecated = true];
  // indicates that item was classified as pescatarian
  TAG_KEY_DIETARY_PESCATARIAN = 12;
  // All the categories are either inactive (could be suspended), or having no active items (could be suspended).
  TAG_KEY_NO_USEFUL_CATEGORIES_PLUS_SUSPENSION = 13;
  // All the categories are either inactive, or having no visible items due to visibility hours.
  TAG_KEY_NO_USEFUL_CATEGORIES_PLUS_HOURS = 14;
  // indicates that the item has options to be vegetarian
  TAG_KEY_DIETARY_VEGETARIAN_OPTIONS = 15;
  // indicates that the item has options to be pescatarian
  TAG_KEY_DIETARY_PESCATARIAN_OPTIONS = 16;
  // indicates that the item has options to be vegan
  TAG_KEY_DIETARY_VEGAN_OPTIONS = 17;
  // indicates that the item follows keto lifestyle
  TAG_KEY_DIETARY_KETO = 18;
  // indicates that the item follows whole30 lifestyle
  TAG_KEY_DIETARY_WHOLE30 = 19;
  // indicates that the item follows paleo lifestyle
  TAG_KEY_DIETARY_PALEO = 20;
  // indicates that the item has whole grains
  TAG_KEY_DIETARY_WHOLE_GRAIN = 21;
  // indicates that the item has whole grain option
  TAG_KEY_DIETARY_WHOLE_GRAIN_OPTIONS = 22;
  // indicates that the item is high in protein
  TAG_KEY_DIETARY_HIGH_PROTEIN = 23;
  // indicates that the item is low in fat
  TAG_KEY_DIETARY_LOW_FAT = 24;
  // indicates that the item is low in sodium
  TAG_KEY_DIETARY_LOW_SODIUM = 25;
  // indicates that the item is low in sugar
  TAG_KEY_DIETARY_LOW_SUGAR = 26;
  // indicates that the item is low in calories
  TAG_KEY_DIETARY_LOW_CALORIE = 27;
  // indicates that the item is nut free
  TAG_KEY_DIETARY_NUT_FREE = 28;
  // indicates that the item is soy free
  TAG_KEY_DIETARY_SOY_FREE = 29;
  // indicates that the item is spicy
  TAG_KEY_DIETARY_SPICY = 30;
  // indicates that the item is kid friendly
  TAG_KEY_DIETARY_KID_FRIENDLY = 31;
  // indicates that the item is healthy
  TAG_KEY_DIETARY_HEALTHY = 32;
  // indicates that the item is grilled
  TAG_KEY_DIETARY_GRILLED = 33;
  // indicates that the item is fried
  TAG_KEY_DIETARY_FRIED = 34;
  // indicates that the item is baked
  TAG_KEY_DIETARY_BAKED = 35;
  // indicates that the item is roasted
  TAG_KEY_DIETARY_ROASTED = 36;
  // indicates that the item is sauteed
  TAG_KEY_DIETARY_SAUTEED = 37;
  // indicates that the item is braised
  TAG_KEY_DIETARY_BRAISED = 38;
  // indicates that the item is poached
  TAG_KEY_DIETARY_POACHED = 39;
  // indicates that the item is smoked
  TAG_KEY_DIETARY_SMOKED = 40;
  // indicates that the item is sous vide
  TAG_KEY_DIETARY_SOUSVIDE = 41;
  // indicates that the item is boiled
  TAG_KEY_DIETARY_BOILED = 42;
  // indicates that the item is tossed
  TAG_KEY_DIETARY_TOSSED = 43;
  // indicates that the item is gluten free
  TAG_KEY_DIETARY_GLUTEN_FREE_OPTIONS = 44;
  // indicates that the item is for 1-2 people
  TAG_KEY_DIETARY_1_2_PPL = 45;
  // indicates that the item is for 3-4 people
  TAG_KEY_DIETARY_3_4_PPL = 46;
  // indicates that the item is for 5-10 people
  TAG_KEY_DIETARY_5_10_PPL = 47;
  // indicates that the item is for 10+ people
  TAG_KEY_DIETARY_10_PLUS_PPL = 48;
  // indicates that the item is dairy free
  TAG_KEY_DIETARY_DAIRY_FREE = 49;
  // indicates that the item is low carb
  TAG_KEY_DIETARY_LOW_CARB = 50;
  // indicates that the item is shellfish free
  TAG_KEY_DIETARY_SHELLFISH_FREE = 51;
  // indicates that the item is pork free
  TAG_KEY_DIETARY_PORK_FREE = 52;
  // indicates that the item is beef free
  TAG_KEY_DIETARY_BEEF_FREE = 53;
  // indicates that the item is cheesy
  TAG_KEY_DIETARY_CHEESY = 54;
  // indicates that the item is sweet
  TAG_KEY_DIETARY_SWEET = 55;
  // indicates that the item is salty
  TAG_KEY_DIETARY_SALTY = 56;
  // indicates that the item is sour
  TAG_KEY_DIETARY_SOUR = 57;
  // indicates that the item is bitter
  TAG_KEY_DIETARY_BITTER = 58;
  // indicates that the item is umami
  TAG_KEY_DIETARY_UMAMI = 59;
  // indicates that the item is tangy
  TAG_KEY_DIETARY_TANGY = 60;
  // indicates that the item is herbal
  TAG_KEY_DIETARY_HERBAL = 61;
  // indicates that the item is earthy
  TAG_KEY_DIETARY_EARTHY = 62;
  // indicates that the item is smoky
  TAG_KEY_DIETARY_SMOKY = 63;
  // indicates that the item is creamy
  TAG_KEY_DIETARY_CREAMY = 64;
  // indicates that the item is healthier
  TAG_KEY_DIETARY_HEALTHIER = 65;
}

enum PaymentTagKey {
  PAYMENT_TAG_KEY_UNSPECIFIED = 0;
  PAYMENT_TAG_KEY_HSA_FSA_ELIGIBLE = 1;
  // RFC Link: https://docs.google.com/document/d/1CXbk0_3RxGXvztcWvsUhRMtffSx8DzGkYD9ZhDbB9QM
  PAYMENT_TAG_KEY_MIN_ADVERTISED_PRICE = 2;
}

message Tag {
  string id = 1;
  string name = 2;
  TagType type = 3;
  string localize_name = 4;
  TagKey key = 5;
  string short_name = 6;
  PaymentTagKey payment_key = 7;
}

enum ServiceType {
  ST_UNKNOWN = 0;
  ST_TAKE_OUT = 1;
  ST_DINE_IN = 2;
  ST_DELIVERY = 3;
}

message ClassificationInfo {
  google.protobuf.BoolValue has_side = 1;
  google.protobuf.BoolValue is_hot = 2;
  google.protobuf.BoolValue is_entree = 3;
  google.protobuf.BoolValue has_alcoholic_items = 4 [(menuoption.is_sticky) = {type: STICKY_TYPE_OVERRIDE}]; // Use restriction_type.restriction_info instead.
  repeated ServiceType service_types = 5;
  repeated Tag classification_tags = 6;
  repeated Tag dietary_tags = 7 [(menuoption.is_sticky) = {type: STICKY_TYPE_STICKY}];
  repeated Tag payment_tags = 8;
}

message VendorInfo {
  google.protobuf.StringValue external_id = 1 [
    (menuoption.is_sticky) = {type: STICKY_TYPE_STICKY},
    (menuoption.sticky_allowed_entities) = "Menu"
  ];
  google.protobuf.StringValue external_data = 2;
  // Will be set only for retail items.
  google.protobuf.StringValue ddsic_id = 3;
}

// Deprecated. Menu no longer maintains tax info. Merchant financing team does that instead.
message TaxInfo {
  option deprecated = true;
  google.protobuf.StringValue thirdparty_tax_code = 1;
  google.protobuf.DoubleValue tax_rate = 2;
  google.protobuf.DoubleValue vat_rate = 3;
}

message VisibilityHours {
  // start_date and end_date are in epoch milliseconds
  // 0 <= start_date <= end_date
  google.protobuf.Int64Value start_date = 1;
  google.protobuf.Int64Value end_date = 2;
  repeated Hours hours = 3;
  string id = 4;
}

message ItemVisibility {
  repeated VisibilityHours hours = 1;
}

message ItemVisibilityOverrideRule {
  repeated OverrideContext contexts = 1;
  ItemVisibility value = 2;
}

message OverridableItemVisibility {
  ItemVisibility default_or_resolved_value = 1;
  repeated ItemVisibilityOverrideRule overrides = 2;
}

message MenuVisibility {
  repeated VisibilityHours hours = 1;
}

enum OosOptionType {
  OOT_UNKNOWN = 0;
  OOT_FOLLOW_RECOMMENDATION = 1;
  OOT_REFUND = 2;
  OOT_CONTACT_ME = 3;
  OOT_CANCEL_ENTIRE_ORDER = 4;
}

message OosOptions {
  repeated OosOptionType options = 1;
  repeated Item recommendations = 2;
}

message ItemPurchase {
  common.marketplace_purchase.v1.ItemPurchaseInfo purchase_info = 1;
  QuantityInfo quantity_info = 2;
}

message ItemPurchaseListOverrideRule {
  repeated OverrideContext contexts = 1;
  repeated ItemPurchase value = 2;
}

message OverridableItemPurchaseList {
  repeated ItemPurchase default_or_resolved_value = 1;
  repeated ItemPurchaseListOverrideRule overrides = 2;
}

message ImageInfoOverrideRule {
  OverrideContext context = 1;
  ImageInfo value = 2;
}

message OverridableImageInfo {
  ImageInfo default_or_resolved_value = 1;
  repeated ImageInfoOverrideRule overrides = 2;
  // using the ovrride_name to store experiment names
  string override_name = 3;
}

message Item {
  string id = 1;
  ItemDisplayInfo display_info = 2;
  PaymentInfo payment_info = 3;
  DishInfo dish_info = 4;
  OverridableExtraEntityList extra_entities = 5;
  Suspension suspension = 6;
  repeated string tags = 7;
  VendorInfo vendor_info = 8;
  // Deprecated. Menu no longer maintains tax info. Merchant financing team does that instead.
  TaxInfo tax_info = 9 [deprecated = true];
  OverridableQuantityInfo quantity_info = 10;
  OverridableItemVisibility visibility = 11;
  OosOptions oos_options = 12;
  google.protobuf.Int64Value created_at = 13;
  google.protobuf.Int64Value updated_at = 14;
  OptionInfo option_info = 15;
  repeated VehicleType vehicle_type = 16 [(menuoption.is_sticky) = {type: STICKY_TYPE_OVERRIDE}];
  google.protobuf.Int32Value min_age_requirement = 17 [(menuoption.is_sticky) = {type: STICKY_TYPE_OVERRIDE}];
  google.protobuf.Int32Value product_code_id = 18;
  google.protobuf.BoolValue is_valid = 19;
  OverridableItemPurchaseList item_purchases = 20;
  ItemAggregatedInfo aggregated_info = 21;
  MembershipInfo membership_info = 22 [(menuoption.is_sticky) = {type: STICKY_TYPE_OVERRIDE}];
  RestrictionInfo restriction_info = 23 [(menuoption.is_sticky) = {type: STICKY_TYPE_OVERRIDE}];
  OperationInfo operation_info = 24;
  repeated money.FeeCategory fee_categories = 25;
  DynamicProperties dynamic_properties = 26;
  repeated money.ItemFee item_fees = 27;
  // Deprecated. Use ItemDisplayInfo.photo_experiments instead.
  OverridableString photo_experiments = 28 [deprecated = true];
  BackwardCompatibilityFields backward_compatibility_fields = 40;
  repeated ExtraDisplayInfo description = 41;
  // the item local activeness if "local" mode is set for ItemActivenessMode
  google.protobuf.BoolValue local_activeness = 42;
  // the stock level info
  repeated StockLevelInfo stock_level_info = 43;
  // the item is DD gift card or not
  google.protobuf.BoolValue is_giftcard = 44;
  // the item is virtual delivery or not
  google.protobuf.BoolValue is_virtual = 45;
  repeated ExperimentOverride experiment_overrides = 46 [(menuoption.is_sticky) = {type: STICKY_TYPE_OVERRIDE}];
  // dynamic properties for package pickup https://www.doordash.com/package-pickup
  PackagesDynamicProperties packages_dynamic_properties = 47;
  // Item promotion purchase information
  // NOTE: This is a temporary field and will be removed with RPS v2
  repeated common.inventory.v1.ItemPromotionInfo item_promotion_info = 48;
  // fields that are served by catalog service
  CatalogServingFields catalog_serving_fields = 49;
  // measurements
  measurements.Measurements measurements = 50;
  // currently generic entity tag fields will be written to menu, but end state is to be built on the fly
  MenuEntityTags menu_entity_tags = 51 [(menuoption.is_sticky) = {type: STICKY_TYPE_OVERRIDE}];
  // virtual store context
  doordash.retail.serving.v1.VirtualStoreContext virtual_store_context = 52;
}

message CatalogServingFields {
  doordash.retail.serving.v1.BrandInfo brand_info = 1;
}

message PackagesDynamicProperties {
  PackageItemType package_item_type = 1;
}

enum PackageItemType {
  PACKAGE_ITEM_TYPE_UNKNOWN = 0;
  PACKAGE_ITEM_TYPE_LABEL = 1;
  PACKAGE_ITEM_TYPE_QR_CODE = 2;
}

message StockLevelInfo {
  StockLevel stock_level = 1;
  StockLevelSource source = 2;
  google.protobuf.StringValue experiment = 3;
  google.protobuf.Timestamp expire_at = 4;
  google.protobuf.StringValue model_id = 5;
  google.protobuf.StringValue score = 6;
  // timestamp when this stock level information becomes
  // relevant
  google.protobuf.Timestamp start_at = 7;
}

enum StockLevelSource {
  STOCK_LEVEL_SOURCE_UNSPECIFIED = 0;
  STOCK_LEVEL_SOURCE_OOS_CLASSIFIER = 1;
  STOCK_LEVEL_SOURCE_DASHER_INFORMED = 2;
  STOCK_LEVEL_SOURCE_MERCHANT_INFORMED = 3;
}

enum StockLevel {
  STOCK_LEVEL_UNSPECIFIED = 0;
  STOCK_LEVEL_IN_STOCK = 1;
  STOCK_LEVEL_LOW_STOCK = 2;
  STOCK_LEVEL_HIGH_STOCK = 3;
  STOCK_LEVEL_OUT_OF_STOCK = 4;
  STOCK_LEVEL_RESTOCKING_SOON = 5;
}

enum VehicleType {
  VT_UNKNOWN = 0;
  VT_CAR = 1;
  VT_SCOOTER = 2;
  VT_BICYCLE = 3;
  VT_MOTORCYCLE = 4;
  VT_WALKING = 5;
  VT_PMD = 6;
  VT_ROBOT = 8;
  VT_EBIKE = 10;
  VT_PIZZA_BICYCLE = 11;
  VT_ZIPPY_SCOOTER = 12;
  VT_KIWI_BOT = 13;
  VT_ADV = 14;
}

message OptionInfo {
  OverridableBool default_on = 1;
}

message ItemEntity {
  oneof entity {
    // Actual content stored in db.
    string id = 1;
    // This field will be set when specifying assembly=true in the request.
    Item item = 2;
  }
  bool isArchived = 3;
}

message ExtraEntity {
  oneof entity {
    // Actual content stored in db.
    string id = 1;
    // This field will be set when specifying assembly=true in the request.
    Extra extra = 2;
  }
  bool isArchived = 3;

  // Sort_id is used by the parent (Item) for supporting various ordering by item.
  // Design doc: https://docs.google.com/document/d/1oq-1IJJn8JTW-PZn3evzOXo5uzW179lrkzEJLj6-vtY/edit
  google.protobuf.Int32Value sort_id = 4;
}

message ItemOrExtra {
  oneof entity {
    Item item = 1;
    Extra extra = 2;
  }
}

message BackwardCompatibilityFields {
  // Defines a range from min_option_choice_quantity to max_option_choice_quantity (inclusive),
  // and 0 <= min_option_choice_quantity <= max_option_choice_quantity.
  // - For item: no use case at the moment.
  // - For extra: the selected quantity of each child node must be within the range.
  // - For option: no use case at the moment.
  google.protobuf.Int32Value min_option_choice_quantity = 2; // Unset is treated as zero.
  google.protobuf.Int32Value max_option_choice_quantity = 1; // Unset and zero are treated as int32 max value.
  string id2 = 3;
  google.protobuf.BoolValue store_menu_link_active = 4;
  google.protobuf.BoolValue menu_active = 5;
  google.protobuf.StringValue menu_version_control = 6;
}

message Extra {
  string id = 1;
  repeated ItemEntity options = 2;
  OverridableQuantityInfo quantity_info = 3;
  VendorInfo vendor_info = 4;
  repeated string tags = 5;
  ExtraDisplayInfo display_info = 6;
  google.protobuf.Int64Value created_at = 7;
  google.protobuf.Int64Value updated_at = 8;
  Suspension suspension = 9;
  google.protobuf.BoolValue is_valid = 10;
  DynamicProperties dynamic_properties = 11;
  // clients use this field to determine how the option choices should be visually displayed to the user
  SelectionModeDisplayType selection_mode_display_type = 12;
  BackwardCompatibilityFields backward_compatibility_fields = 20;
  // currently generic entity tag fields will be written to menu, but end state is to be built on the fly
  MenuEntityTags menu_entity_tags = 21 [(menuoption.is_sticky) = {type: STICKY_TYPE_OVERRIDE}];
}

enum ExtraDisplayType {
  EDT_UNKNOWN = 0;
  EDT_NESTED = 1;
  EDT_EXPANDED = 2;
  EDT_COLLAPSED = 3;
}

message ExtraDisplayInfo {
  OverridableString title = 1;
  OverridableString description = 2;
  ExtraDisplayType type = 3;
  google.protobuf.Int32Value sort_id = 4 [(menuoption.is_sticky) = {type: STICKY_TYPE_DECIDE_BY_RUNTIME}];
}

enum SelectionModeDisplayType {
  SELECTION_MODE_DISPLAY_TYPE_DEFAULT = 0;
  SELECTION_MODE_DISPLAY_TYPE_CIRCULAR_SECTOR = 1;
  SELECTION_MODE_DISPLAY_TYPE_TOGGLE = 2;
  SELECTION_MODE_DISPLAY_TYPE_CARD = 3;
  SELECTION_MODE_DISPLAY_TYPE_VISUAL_CONTAINER = 4;
  SELECTION_MODE_DISPLAY_TYPE_FLATTENED = 5;
  SELECTION_MODE_DISPLAY_TYPE_FLATTENED_COMBO = 6;
  SELECTION_MODE_DISPLAY_TYPE_HORIZONTAL_SELECTOR = 7;
  SELECTION_MODE_DISPLAY_TYPE_HORIZONTAL_SELECTOR_INLINE = 8;
}

message OverrideContext {
  ContextType context_type = 1;
  string context_value = 2;
}
message StringOverrideRule {
  repeated OverrideContext contexts = 1;
  string value = 2;
}

message OverridableString {
  string default_or_resolved_value = 1;
  repeated StringOverrideRule overrides = 2;
}

message BoolOverrideRule {
  repeated OverrideContext contexts = 1;
  bool value = 2;
}

message OverridableBool {
  bool default_or_resolved_value = 1;
  repeated BoolOverrideRule overrides = 2;
}

message ExtraEntityListOverrideRule {
  repeated OverrideContext contexts = 1;
  repeated ExtraEntity value = 2;
}

message OverridableExtraEntityList {
  repeated ExtraEntity default_or_resolved_value = 1;
  repeated ExtraEntityListOverrideRule overrides = 2;
}

message PriceInfo {
  google.protobuf.Int64Value cents = 1;
}

message PriceInfoOverrideRule {
  repeated OverrideContext contexts = 1;
  PriceInfo value = 2;
}

message OverridablePriceInfo {
  PriceInfo default_or_resolved_value = 1;
  repeated PriceInfoOverrideRule overrides = 2;
}

// The suspension applied on a menu entity for a period of time.
//
// There are two kinds of suspension:
//   - Temporary suspension, which has from_miliseconds != 0 and from_miliseconds <= util_miliseconds.
//   - Permanent suspension, which has from_miliseconds != 0 and (util_miliseconds = 0 or unset).
//
// The from_miliseconds and util_miliseconds are epoch milliseconds.
message Suspension {
  google.protobuf.Int64Value suspend_from_miliseconds = 1;
  google.protobuf.Int64Value suspend_util_miliseconds = 2;
  google.protobuf.StringValue reason = 3;
}

// Ranges of quantities permitted for a Cx to select on an item/extra/option.
message QuantityInfo {
  // The default selected quantity.
  google.protobuf.Int32Value default = 1;
  // Defines a range from min_permitted to max_permitted (inclusive), and 0 <= min_permitted <= max_permitted.
  // - For item: no use case at the moment.
  // - For extra: count(selected child nodes) must be within the range.
  // - For option: no use case at the moment.
  google.protobuf.Int32Value min_permitted = 2 [
    (menuoption.is_sticky) = {type: STICKY_TYPE_OVERRIDE},
    (menuoption.sticky_allowed_entities) = "Extra"
  ]; // Unset is treated as zero.
  google.protobuf.Int32Value max_permitted = 3 [
    (menuoption.is_sticky) = {type: STICKY_TYPE_OVERRIDE},
    (menuoption.sticky_allowed_entities) = "Extra"
  ]; // Unset and zero are treated as int32 max value.
  // Charges money when the selected quantity is > charge_above.
  google.protobuf.Int32Value charge_above = 4;
  // Refunds money when the selected quantity is < refund_under.
  google.protobuf.Int32Value refund_under = 5;
  // Defines a range from min_aggregated_permitted to max_aggregated_permitted (inclusive),
  // and 0 <= min_aggregated_permitted <= max_aggregated_permitted.
  // - For item: no use case at the moment.
  // - For extra: sum(selected quantity in child nodes) must be within the range.
  // - For option: no use case at the moment.
  google.protobuf.Int32Value min_aggregated_permitted = 6 [
    (menuoption.is_sticky) = {type: STICKY_TYPE_OVERRIDE},
    (menuoption.sticky_allowed_entities) = "Extra"
  ]; // Unset is treated as zero.
  google.protobuf.Int32Value max_aggregated_permitted = 7 [
    (menuoption.is_sticky) = {type: STICKY_TYPE_OVERRIDE},
    (menuoption.sticky_allowed_entities) = "Extra"
  ]; // Unset and zero are treated as int32 max value.
  // Usually quantity is measured in integers, and decimal_places equal to zero.
  //
  // But for weighted items/options/extras, decimal quantities are allowed. For example,
  //   min_permitted = 50, refund_under = 10, decimal_places = 2 means actual min_permitted = .5, refund_under = .1
  // In other words, actual quantity = quantity / math.pow(10, decimal_places).
  google.protobuf.Int32Value decimal_places = 8;
}

message QuantityInfoOverrideRule {
  repeated OverrideContext contexts = 1;
  QuantityInfo value = 2;
}

message OverridableQuantityInfo {
  QuantityInfo default_or_resolved_value = 1;
  repeated QuantityInfoOverrideRule overrides = 2;
}

// orderability reasons
enum OrderabilityReason {
  // unknown
  ORDERABILITY_REASON_UNSPECIFIED = 0;
  // isActive in menu
  ORDERABILITY_REASON_MENU_ACTIVENESS = 1;
  // hours in menu
  ORDERABILITY_REASON_MENU_HOURS = 2;
  // hoursException in menu
  ORDERABILITY_REASON_MENU_HOURS_EXCEPTION = 3;
  // suspension in menu
  ORDERABILITY_REASON_MENU_SUSPENSION = 4;
  // isActive in category
  ORDERABILITY_REASON_CATEGORY_ACTIVENESS = 5;
  // suspension in category
  ORDERABILITY_REASON_CATEGORY_SUSPENSION = 6;
  // visibility in item
  ORDERABILITY_REASON_ITEM_VISIBILITY = 7;
  // suspension in item
  ORDERABILITY_REASON_ITEM_SUSPENSION = 8;
  // lack of orderable menu or category
  ORDERABILITY_REASON_ITEM_MENU_OR_CATEGORY = 9;
  // item local activeness
  ORDERABILITY_REASON_ITEM_LOCAL_ACTIVENESS = 10;
  // hide due to alcohol compliance
  ORDERABILITY_REASON_ALCOHOL_COMPLIANCE_HIDDEN = 11;
}

message OrderabilityInfo {
  bool orderable = 1;
  OrderabilityReason reason = 2;
  // available path starting from menu
  repeated OrderablePath orderable_path = 3;
}

message OrderablePath {
  string menu_id = 1;
  string category_id = 2;
}

message OrderabilityRange {
  // Local timezone that the item is available in.
  google.protobuf.StringValue time_zone = 1;
  // Hours the item is available at
  // Computed with a hours.start_time and hours.end_time represent in ms.
  // Ex: if hours[0].start_time = 39600000, it represents
  // 39600000/1000/3600 = 11:00 (time_zone)
  repeated Hours hours = 2;
  //Exceptions include open and close. When the item can be orderable
  repeated HoursException hours_exception = 3;
  // Timestamp of evaluating results
  google.protobuf.Timestamp updated_timestamp = 4;
}

message TransparentPriceInfo {
  common.marketplace_purchase.v1.PurchaseType purchase_type = 1;
  repeated common.marketplace_purchase.v1.ItemPriceInfo prices = 2;
}

message ItemAggregatedInfo {
  OrderabilityInfo orderability_info = 1;
  repeated TransparentPriceInfo transparent_price_infos = 2;
  google.protobuf.BoolValue isVisibleNow = 3;
  OrderabilityRange orderability_range = 4;
}

enum MembershipType {
  UNSPECIFIED = 0;
  DASHPASS = 1;
}

message MembershipInfo {
  repeated MembershipType membership_types = 1;
}

message Menu {
  string id = 1;
  OverridableString title = 2 [(menuoption.is_sticky) = {type: STICKY_TYPE_OVERRIDE}];
  OverridableString subtitle = 3 [(menuoption.is_sticky) = {type: STICKY_TYPE_OVERRIDE}];
  // Normal open hours.
  repeated Hours hours = 4;
  // Also called special hours, which precede the normal open hours above.
  repeated HoursException hours_exceptions = 5;
  bool is_active = 6;
  repeated CategoryEntity categories = 7;
  google.protobuf.Int64Value created_at = 8;
  google.protobuf.Int64Value updated_at = 9;
  Suspension suspension = 10;
  google.protobuf.StringValue source_of_creation = 11;
  common.catering.v1.CateringInfo catering_info = 12;
  google.protobuf.Int32Value menu_version = 13;
  VehicleInfo vehicle_info = 14;
  ImageInfo image_info = 15;
  VendorInfo vendor_info = 16;
  google.protobuf.BoolValue is_business_enabled = 17;
  //TODO(deprecated field)
  google.protobuf.StringValue store_menu_cell_item_id = 18;
  //first item id for popular items carousel
  google.protobuf.StringValue store_menu_cell_first_item_id = 19;
  repeated ComplimentaryOfferInfo complimentary_offer_info = 20;
  repeated Tag tags = 21;
  MenuAggregatedInfo menu_aggregated_info = 22;
  DynamicProperties dynamic_properties = 23;
  google.protobuf.StringValue locale = 24;
  // add ingestion_context, menu_contexts for channel-based menus
  IngestionContext ingestion_context = 25;
  repeated MenuContext menu_contexts = 26;
  // currently generic entity tag fields will be written to menu, but end state is to be built on the fly
  MenuEntityTags menu_entity_tags = 27 [(menuoption.is_sticky) = {type: STICKY_TYPE_OVERRIDE}];

  BackwardCompatibilityFields backward_compatibility_fields = 40;
}

message IngestionContext {
  // this menu shares the entity ids with the union_menu
  google.protobuf.StringValue union_menu_id = 1;
  MenuType menu_type = 2;
}

message ComplimentaryOfferInfo {
  string id = 1;
  OverridableString title = 2;
  google.protobuf.BoolValue is_active = 3;
  google.protobuf.BoolValue is_default_selection_on = 4;
  VendorInfo vendor_info = 5;
  google.protobuf.Int64Value created_at = 6;
}

message VehicleInfo {
  google.protobuf.BoolValue is_bike_friendly = 1 [(menuoption.is_sticky) = {type: STICKY_TYPE_OVERRIDE}];
}

message CategoryEntity {
  oneof entity {
    // Actual content stored in db.
    string id = 1;
    // This field will be set when specifying assembly=true in the request.
    Category category = 2;
  }
}

message Category {
  string id = 1;
  repeated ItemEntity items = 2;
  google.protobuf.Int64Value created_at = 3;
  google.protobuf.Int64Value updated_at = 4;
  Suspension suspension = 5;
  VendorInfo vendor_info = 6;
  VehicleInfo vehicle_info = 7;
  CategoryDisplayInfo display_info = 8;
  bool is_active = 9;
  DynamicProperties dynamic_properties = 10;
  CategoryAggregatedInfo aggregated_info = 11;
  BackwardCompatibilityFields backward_compatibility_fields = 20;
  // currently generic entity tag fields will be written to menu, but end state is to be built on the fly
  MenuEntityTags menu_entity_tags = 21 [(menuoption.is_sticky) = {type: STICKY_TYPE_OVERRIDE}];
}

message CategoryDisplayInfo {
  google.protobuf.Int32Value sort_id = 1 [(menuoption.is_sticky) = {type: STICKY_TYPE_DECIDE_BY_RUNTIME}];
  OverridableString title = 2;
  OverridableString subtitle = 3;
}

// Derived and aggregated information in menu-data-service, menu clients should not populate it.
message CategoryAggregatedInfo {
  // De-duplicated item visibilty hours from the items under the category.
  // Background: https://docs.google.com/document/d/1SL50erHEqt0yVjEQnvQU6WfxOGPhFa2ZNC-Rivu98ks/edit#
  repeated VisibilityHours item_visibility_hours = 1;
}

message MenuDisplayOptions {
  google.protobuf.StringValue currency_code = 1;
  google.protobuf.StringValue currency_symbol = 2;
}

// menu characteristics
message MenuCharacteristic {
  // # of orphan suspensions / # of suspensions is high
  google.protobuf.BoolValue has_high_orphan_suspensions_rate = 1;
  // # of suspensions / # of entities is high
  google.protobuf.BoolValue has_large_suspensions_rate = 2;
  // has frequent suspensions deletions
  google.protobuf.BoolValue has_high_suspensions_deletions = 3;
  // has large menu structure
  google.protobuf.BoolValue has_large_menu_structure = 4;
  // has large num of nested entities (i.e. nested modifiers under top item count is large)
  google.protobuf.BoolValue has_high_nested_entities_cnt = 5;
}

message MenuValidation {
  repeated ValidationError errors = 1;
}

message ValidationError {
  string id = 1; // Id of the entitiy.
  EntityType type = 2; // Type of the entity.
  string name = 4; // Error name, e.g. invalid_extra_children_count
  string message = 3; // Error detail, e.g. "2 is not enough for min_permitted 4"
}

// the mode to set the choice of activeness value on the item
enum ItemActivenessMode {
  ITEM_ACTIVENESS_MODE_UNSPECIFIED = 0;
  ITEM_ACTIVENESS_MODE_PARENT = 1;
  ITEM_ACTIVENESS_MODE_LOCAL = 2;
}

message MenuMeta {
  MenuDisplayOptions display_options = 1;
  google.protobuf.Int64Value created_at = 2;
  google.protobuf.Int64Value updated_at = 3;
  InstructionInfo instruction_info = 4;
  ServiceInfo service_info = 5;
  BusinessInfo business_info = 6;
  google.protobuf.BoolValue is_valid = 7;
  ItemActivenessMode item_activeness_mode = 8;
  // Group the fields into the following proto message. MenuInfo, StoreInfo, GeoInfo
  // For newly created fields, please add them to the following message
  // For existing fields, we will be migrating them to the following message
  // menu related meta info, e.g. menu characteristic
  MenuInfo menu_info = 9;
  // store related meta info, e.g. business id
  StoreInfo store_info = 10;
  // geo related info, e.g. currency code
  GeoInfo geo_info = 11;
}

// store info as part of the menu meta, e.g. business id
message StoreInfo {
  // whether the store chose to opt out from using AI description.
  bool opt_out_ai_description = 3;
  // a synced value from the store's setting, whether the store is eligible to show alcohol items.
  google.protobuf.BoolValue is_alcohol_visible = 4;
  // a consolidated value synced from store's StoreAlcoholEligibility setting, which is configured during the onboarding
  // different from is_alcohol_visible, this field is a Merchant-facing property used to determine if the store is eligible to sell alcohol based on multiple factors such as store's location, addendum signup, etc.
  // Meanwhile is_alcohol_visible is a Consumer-facing property used to determine if we want to show alcohol items to the consumer.
  // The visibility of alcohol items to the customer is determined by the combined evaluation of both is_alcohol_visible (at both store and business level) and is_store_eligible_to_sell_alcohol properties.
  google.protobuf.BoolValue is_store_eligible_to_sell_alcohol = 5;
}

// menu info as part of the menu meta, e.g. menu characteristic, item activeness mode
// item activeness mode can be migrated to MenuInfo in the future
message MenuInfo {
  MenuCharacteristic characteristic = 1;
  // used to determine if Mx is NV
  bool has_migrated_to_nv = 2;

  StoreMenuType store_menu_type = 3;
  // determines if storeMenu contains a catering menu
  // long term it should be a store level field but in the beta launch, itll be under menu meta
  bool is_catering_enabled = 4;
  // Record last menu mapping version used
  MenuMappingVersion menu_mapping_version = 5;
}

enum StoreMenuType {
  STORE_MENU_TYPE_UNSPECIFIED = 0;
  STORE_MENU_TYPE_CHANNEL_BASED_ENABLED = 1;
}

// Menu Mapping Version
enum MenuMappingVersion {
  // Unknown
  MENU_MAPPING_VERSION_UNKNOWN = 0;
  // MIS Rx compareGraph
  MENU_MAPPING_VERSION_1_0_0 = 1;
  // MIS Rx compareGraphV2
  MENU_MAPPING_VERSION_2_0_0 = 2;
  // IngestionGateway.MapMenu
  MENU_MAPPING_VERSION_3_0_0 = 3;
}

// geo info as part of the menu meta, e.g. currency code
message GeoInfo {}

message InstructionInfo {
  google.protobuf.Int32Value special_instructions_max_length = 6;
}

message ServiceInfo {
  google.protobuf.BoolValue offers_pick_up = 1;
  google.protobuf.BoolValue offers_delivery = 2;
}

message BusinessInfo {
  google.protobuf.StringValue business_id = 1;
  google.protobuf.StringValue time_zone = 2;
  // a synced value from the business's setting, whether the business is eligible to show alcohol items.
  google.protobuf.BoolValue is_alcohol_visible = 3;
}

message MenuStructure {
  repeated Menu menus = 1;
  map<string, Category> category_map = 2;
}

message Menus {
  repeated Menu menus = 1;
}

message Categories {
  repeated Category category = 1;
}

message StoreMenu {
  MenuStructure structure = 1;
  MenuMeta meta = 2;
  EntityMaps entity_maps = 3;
  MenuDAG dag = 4;
  MenuIndex index = 5;
  MenuValidation validation = 6;
  Menus menus = 7;
  Categories categories = 8;
  ChecksumIndex checksum_index = 9;
  // This field should only be returned for debug purpose. Client should not directly fetching ddsic index for a certain
  // store menu.
  DDSICIndex ddsic_index = 10;
  StickyIndex sticky_index = 89;
}

// protobuf for id dag index entry data stored in S3
message IdDagIndexS3Entry {
  string store_menu_id = 1;
  google.protobuf.StringValue menu_external_id = 2;
  google.protobuf.StringValue category_external_id = 3;
  google.protobuf.StringValue item_external_id = 4;
  string index = 5;
  string dag = 6;
  string entities_attributes = 7;
}

enum EntityType {
  ET_UNKNOWN = 0;
  ET_STORE_MENU = 1;
  ET_MENU = 2;
  ET_CATEGORY = 3;
  ET_ITEM = 4;
  ET_EXTRA = 5;
  ET_ENTITY_DAG = 6;
  ET_HOURS_EXCEPTION = 7;
}

message MenuNode {
  string id = 1;
  EntityType type = 2;
}

message MenuEdge {
  MenuNode source = 1;
  MenuNode target = 2;
  // design doc and impact analysis:
  // https://docs.google.com/document/d/12G2EVvLchjznXrjG-ENPJlCc_ZplidA_qpGb-qVuGcM/edit#bookmark=id.cghkiqdpolea
  bool is_archived = 3;
}

message MenuDAG {
  repeated MenuNode nodes = 1;
  repeated MenuEdge edges = 2;
}

message IndexedFields {
  google.protobuf.StringValue external_id = 1;
  google.protobuf.Int64Value created_at = 2;
  google.protobuf.StringValue id2 = 3 [deprecated = true];
  Suspension suspension = 4 [deprecated = true];
}

message MenuIndex {
  map<string, IndexedFields> menu_index = 1;
}

message DDSICIndexFields {
  google.protobuf.StringValue external_id = 1;
  google.protobuf.StringValue internal_id = 2;
}

message DDSICIndexFieldsEntry {
  repeated DDSICIndexFields dd_sic_index_fields = 1;
}

// A map from ddsic_id => external item id.
// This proto does not represent the format we persist ddsic index in storage.
message DDSICIndex {
  // Since menu_id and dd_sic cannot uniquely identify an item at this point, we need to store the mapping fields as a
  // list.
  map<string, DDSICIndexFields> index = 1 [deprecated = true];
  map<string, DDSICIndexFieldsEntry> index_v2 = 2;
}

message ChecksumIndex {
  map<string, string> checksum_index = 1;
}

message MenuStickyChange {
  google.protobuf.StringValue store_menu_id = 1;
  google.protobuf.StringValue entity_id = 2;
  google.protobuf.Int64Value sort_id = 3;
  repeated MembershipType membership_types = 4;
  google.protobuf.BoolValue is_bike_friendly = 5;
  repeated VehicleType vehicle_type = 6;
  google.protobuf.BoolValue is_alcohol = 7 [deprecated = true]; // Use restriction_info.restriction_type instead.
  google.protobuf.Int64Value min_age_requirement = 8;
  google.protobuf.Int64Value base_price = 9;
  google.protobuf.BoolValue deactivation = 10;
  google.protobuf.StringValue updated_at = 11;
  google.protobuf.BoolValue is_catering = 12;
  google.protobuf.Int64Value order_in_advance_in_seconds = 13;
  google.protobuf.Int64Value cancel_order_in_advance_in_seconds = 14;
  google.protobuf.Int64Value max_order_size = 15;
  google.protobuf.Int64Value min_order_size = 16;
  RestrictionInfo restriction_info = 17;
  DynamicProperties dynamic_properties = 18;
  LunchPassDynamicProperties lunchpass_dynamic_properties = 19;
  CaloricInfo caloric_info = 20; // coming from DishInfo: DishInfo->NutritionInfo->CaloricInfo
  ClassificationInfo classification_info = 21; // coming from DishInfo: DishInfo->ClassificationInfo
  MenuEntity entity_data = 22;
}

message MenuEntity {
  oneof entity {
    Item item = 1;
    Extra extra = 2;
    Category category = 3;
    Menu menu = 4;
  }
}

message RestrictionInfo {
  reserved 43, 44, 45;
  // Identifies the type of a restricted menu item.
  enum RestrictionType {
    // 43, 44, 45 is reversed in catalog.crdb.v1.well_known_types.proto.
    // Try to keep RestrictionType in common, menu and catalog synced
    reserved 43, 44, 45, 46;
    reserved "ZYN";
    NONE = 0; // No restriction.
    ALCOHOL = 1; // Item is alcohol
    OTC = 2; // Item is restricted over-the-counter medication
    LOTTERY = 3; // Item is lottery. To be deprecated
    CANNABIS = 4; // Item is CANNABIS.
    CBD = 5; // item is CBD
    THC = 6; // item is thc
    ELECTRONICS_HEAVY = 7; // item is heavy electronics
    GIFT_CARD_HVF = 8; // item is high value gift card
    GIFT_CARD_LVF = 9; // item is low value gift card
    GIFT_CARD_OL = 10; // item is loop gift card
    GIFT_CARD_VV = 11; // item is variable value gift card
    LIGHTER = 12; // item is lighter
    LOTTERY_HVSO = 13; // item is High value scratch off lottery tickets
    LOTTERY_LVSO = 14; // item is Low value scratch off lottery tickets
    LOTTERY_NG = 15; // item is Numbers game lottery tickets
    MISC = 16; // Catch-all for household items that are not heavily regulated but flagged as 18+ by some Mx (e.g., sharpies/glue/paint/tire inflator/rubber sealant)
    OTC_BIRTH_CONTROL = 17; // item is birth control
    OTC_DEX = 18; // item is OTC subtype DEX (currently identified as OTC)
    OTC_NRT = 19; // item is OTC subtype NRT/Nicotine
    OTC_PSE = 20; // item is OTC subtype PSE
    OTC_MISC = 21; // item includes anything misc that is not in DEX and PSE, generally outside USA
    FRAGRANCE = 22; // item is fragrance products
    FIREWORKS = 23; // item is fireworks
    BALLOONS = 24; // item is balloons
    BEAUTY = 25; // item is beauty products
    FURNITURE = 26; // item is furniture
    PET_FOOD_HEAVY = 27; // item is heavy pet food
    BABY_FORMULA = 28; // item is baby formula
    BABY_CARE = 29; // items related to baby care, like baby safe cutlery and feeding equipment
    MEDICAL_DEVICE = 30; // generic medical devices like touchless infrared thermometers
    OTC_ALLERGY = 31; // otc allergy medications
    OTC_ANALGESICS = 32; // medicine for pain
    OTC_ANTI_DIARRHOEA = 33; // items for diarrhoea (U.K. spelling)
    OTC_COLD_FLU = 34; // items for cold and flu symptoms
    OTC_COUGH = 35; // items for coughing (lozenges
    OTC_EAR_NOSE = 36; // ear drops and nasal cream
    OTC_LAXATIVES = 37; // laxatives
    OTC_SKIN_TREATMENT = 38; // skin creams eg. anti-fungal and wart cream
    PERSONAL_CARE = 39; // de-oderant, specialty shampoos etc...
    SPORTS_NUTRITION = 40; // protein powders
    OTC_NALOXONE = 41; // active ingredient in over the counter overdose treatments
    HEALTH_SENSITIVE = 42; // health sensitive items
    WEAPON = 47; // Weapons like knives
    NICOTINE_POUCH = 48; // Nicotine pouches like ZYN
  }
  RestrictionType restriction_type = 2;
  repeated common.restriction_rules.v1.RestrictedTypeWLevel restricted_types_w_level = 3;
  common.AlcoholFoodConstraintItemLevel alcohol_food_constraint_item_level = 1;
}

message OperationInfo {
  OverridableBool is_recipe = 1;
}

message MenuAggregatedInfo {
  repeated HoursException store_menu_intersected_hours = 1;
}

message StickyIndex {
  map<string, IndexedStickyFields> sticky_index = 1;
}

message IndexedStickyFields {
  google.protobuf.Int32Value min_age_requirement = 1;
  google.protobuf.BoolValue is_alcohol = 2 [deprecated = true]; // Use restriction_info.restriction_type instead.
  RestrictionInfo restriction_info = 3;
}

/**
 * composite ids to get entity id graph
 */
message EntityIdGraphId {
  // store menu id
  string store_menu_id = 1;
  // menu external id
  string menu_external_id = 2;
  // category external id
  string category_external_id = 3;
  // entity external id
  string entity_external_id = 4;
}

/**
 * Entity Id Graph
 */
message EntityIdGraph {
  // id
  EntityIdGraphId id = 1;
  // internal id dag
  menu.MenuDAG dag = 2;
  // internal id to external id mapping
  menu.MenuIndex index = 3;
  // list of entity attributes of all entities which originate from this entity
  EntitiesAttributes entities_attributes = 4;
}

message EntitiesAttributes {
  repeated EntityAttributes entity_attributes = 1;
}

message EntityAttributes {
  google.protobuf.StringValue entity_external_id = 1;
  google.protobuf.StringValue entity_id = 2; // internal id
  google.protobuf.StringValue title = 3;
  google.protobuf.StringValue image_url = 4;
  EntityType entity_type = 5;
}

enum StoreSpecialHoursValidationStatus {
  SUCCESS = 0;
  ERROR = 1;
  WARNING = 2;
}

message HoursExceptionWithValidation {
  HoursException special_hour = 1;
  StoreSpecialHoursValidationStatus store_special_hours_validation_status = 2;
  StoreSpecialHoursValidationIssueType validation_issue_type = 3;
  google.protobuf.StringValue validation_info = 4;
  google.protobuf.StringValue overlapping_special_hours_name = 5;
}

enum StoreSpecialHoursValidationIssueType {
  UNKNOWN = 0;
  INVALID_DATE_OR_START_END_TIME = 1;
  OVERLAPPING_SPECIAL_HOURS = 2;
  NO_INTERSECTION_WITH_MENU_HOURS = 3;
}

message DynamicProperties {
  DoubleDashDynamicProperties doubledash_dynamic_properties = 1;
  LunchPassDynamicProperties lunchpass_dynamic_properties = 2 [(menuoption.is_sticky) = {type: STICKY_TYPE_OVERRIDE}];
  DashMartDynamicProperties dashmart_dynamic_properties = 3;
  DidYouForgetDynamicProperties did_you_forget_dynamic_properties = 4;
}

message DoubleDashDynamicProperties {
  google.protobuf.StringValue doubledash_sort_id = 1; // uprank usage
  google.protobuf.StringValue is_doubledash_entity = 2; // subset usage
}

message LunchPassDynamicProperties {
  google.protobuf.StringValue is_lunchpass_entity = 1;
}

message DashMartDynamicProperties {
  google.protobuf.StringValue received_on = 1;
  google.protobuf.BoolValue popular_now = 2;
  google.protobuf.BoolValue in_season = 3;
}

message DidYouForgetDynamicProperties {
  google.protobuf.StringValue did_you_forget_sort_id = 1;
  google.protobuf.BoolValue is_did_you_forget = 2;
}

message MenuExperimentEntry {
  string menu_id = 1;
  // e.g. item id
  string entity_id = 2;
  // name of a field of an entity e.g. item photo url
  string property = 3;
  // <experiment_name>_<experiment_bucket>, e.g. photo_experiment_treatment1
  string experiment_context = 4;
  // value to replace the specified property
  string value = 5;
  // could be item/extra/category/menu
  menu.EntityType entity_type = 6;
}

message ExperimentOverride {
  // Each experiment override should be unique to a property and experiment
  // i.e. One experiment name should be used for only one override
  // and one item property should have only one override
  string experiment_name = 1;
  OverrideProperty override_property = 2;
  oneof override {
    OverridableString string_value = 3;
    OverridableImageInfo image_value = 4;
    OverridableExtraEntityList extra_entities_value = 5;
  }
}

enum OverrideProperty {
  OVERRIDE_ITEM_IMAGE = 0; // maps to item.display_info.image
  OVERRIDE_ITEM_DESCRIPTION = 1; // maps to item.display_info.description
  OVERRIDE_ITEM_EXTRA_ENTITIES = 2; // maps to item.extra_entities
}

enum MenuType {
  MENU_TYPE_UNSPECIFIED = 0;
  MENU_TYPE_CHANNEL_BASED_UNION_MENU = 1;
  // calculated from the union menu
  MENU_TYPE_CHANNEL_BASED_DERIVED_MENU = 2;
}

message MenuContext {
  common.Experience order_channel = 1;
  common.FulfillmentType fulfillment_type = 2;
}

message MenuEntityOverride {
  // MenuEntity is one of Item, Extra, Category, Menu
  MenuEntity entity_data = 1;
  google.protobuf.BoolValue availability = 2;
}

message MenuEntityOverrides {
  MenuContext context = 1;
  repeated MenuEntityOverride overrides = 2;
  // it is the overrides for an existing menu
  google.protobuf.StringValue menu_id = 3;
  google.protobuf.StringValue store_id = 4;
}

enum EntityTagType {
  // unspecified
  ENTITY_TAG_TYPE_UNSPECIFIED = 0;
  // nutrition tag
  ENTITY_TAG_TYPE_NUTRITION = 1;
  // course type tag
  ENTITY_TAG_TYPE_COURSE = 2;
  // arbitrary type tag
  ENTITY_TAG_TYPE_ARBITRARY = 3;
  // catering type tag
  ENTITY_TAG_TYPE_CATERING = 4;
}

// decouple this outside the EntityTag message to easily add new oneOf fields
message EntityTagData {
  oneof data {
    // nutrition data
    NutritionTags nutrition_data = 1;
    // course type data
    CourseTypeTag course_type_data = 2;
    // arbitrary type data
    ArbitraryTags arbitrary_type_data = 3;
    // catering type data
    CateringTags catering_type_data = 4;
  }
}

message EntityTag {
  EntityTagType tag_type = 1;
  EntityTagData tag_data = 2;
  // string name to be displayed for tag
  string name = 3;
  // abbreviation
  string short_name = 4;
}

// tags that belong to a Menu Entity: item, extra, option, category, menu
message MenuEntityTags {
  // all tags will be stored in a single list
  repeated EntityTag tags = 1;
}

// tags that involve nutrition/dietary info
// currently dietaryTags and caloricInfo live in item.DishInfo and will soon be deprecated ingestion and serving wise
// until then, nutritionTag's dietaryTag field and caloricInfo will be assembled to the legacy fields
// NOTE: dishInfo will not be deprecated, but some embedded fields within it will
message NutritionTags {
  // dietary tags that describe entity; e.g Vegetarian, Vegan
  repeated Tag dietary_tags = 1;
  // calorie details of an entity
  CaloricInfo caloric_info = 2;
  // describe the allergens that entity contains
  repeated AllergenContainTag allergen_contain_tags = 3;
  // describe the allergens that entity does not contain
  repeated AllergenFreeTag allergen_free_tags = 4;
  // serving size of entity including the label of the quantity
  ServingSize serving_size = 5;
  // describe the macros of an entity
  Macro macro_tags = 6;
}

// describes the allergens the entity contains
enum AllergenContains {
  // unspecified
  ALLERGEN_CONTAINS_UNSPECIFIED = 0;
  // entity contains gluten
  ALLERGEN_CONTAINS_GLUTEN = 1;
  // entity contains soy
  ALLERGEN_CONTAINS_SOY = 2;
  // entity contains egg
  ALLERGEN_CONTAINS_EGG = 3;
  // entity contains dairy
  ALLERGEN_CONTAINS_DAIRY = 4;
  // entity does not contain fish
  ALLERGEN_CONTAINS_FISH = 5;
  // entity does not contain shellfish
  ALLERGEN_CONTAINS_SHELLFISH = 6;
  // entity does not contain peanut
  ALLERGEN_CONTAINS_PEANUT = 7;
  // entity does not contain tree nut
  ALLERGEN_CONTAINS_TREE_NUT = 8;
  // entity does not contain sesame
  ALLERGEN_CONTAINS_SESAME = 9;
  // entity does not contain wheat
  ALLERGEN_CONTAINS_WHEAT = 10;
}

// describes the allergens the entity does not contain
enum AllergenFree {
  // unspecified
  ALLERGEN_FREE_UNSPECIFIED = 0;
  // entity does not contain gluten
  ALLERGEN_FREE_GLUTEN_FREE = 1;
  // entity does not contain soy
  ALLERGEN_FREE_SOY_FREE = 2;
  // entity does not contain egg
  ALLERGEN_FREE_EGG_FREE = 3;
  // entity does not contain dairy
  ALLERGEN_FREE_DAIRY_FREE = 4;
  // entity does not contain fish
  ALLERGEN_FREE_FISH_FREE = 5;
  // entity does not contain shellfish
  ALLERGEN_FREE_SHELLFISH_FREE = 6;
  // entity does not contain peanut
  ALLERGEN_FREE_PEANUT_FREE = 7;
  // entity does not contain tree nut
  ALLERGEN_FREE_TREE_NUT_FREE = 8;
  // entity does not contain sesame
  ALLERGEN_FREE_SESAME_FREE = 9;
  // entity does not contain wheat
  ALLERGEN_FREE_WHEAT_FREE = 10;
  // entity has options to be gluten free
  ALLERGEN_FREE_GLUTEN_FREE_OPTIONS = 11;
  // entity has options to be dairy free
  ALLERGEN_FREE_DAIRY_FREE_OPTIONS = 12;
}

// describes the source of tag
enum TagSource {
  // unspecified
  TAG_SOURCE_UNSPECIFIED = 0;
  // tag was populated by Mx
  TAG_SOURCE_MERCHANT = 1;
  // tag was populated by FKG; https://doordash.atlassian.net/wiki/spaces/Eng/pages/2891677903/Galaxy+-+Food+Knowledge+Graph+Service
  TAG_SOURCE_FKG = 2;
}

// for Q1, tagSource and isApproved concept will not be populated
message TagMetaData {
  // string name to be displayed for tag
  string name = 1;
  // abbreviation
  string short_name = 2;
  // how the tag was populated
  TagSource tag_source = 3;
  // whether the tag is approved or not; null means it is approved
  google.protobuf.BoolValue is_approved = 4;
}

// embedded message for flexibility
message AllergenContainTag {
  // metadata of tag
  TagMetaData tag_meta_data = 1;
  // allergen type
  AllergenContains tag = 2;
}

// embedded message for flexibility
message AllergenFreeTag {
  // metadata of tag
  TagMetaData tag_meta_data = 1;
  // allergen type
  AllergenFree tag = 2;
}

// specifies the label of serving size
enum ServingLabel {
  // unspecified
  SERVING_LABEL_UNSPECIFIED = 0;
  // serving size quantity is measured in grams
  SERVING_LABEL_GRAMS = 1;
  // serving size quantity is measured in salad
  SERVING_LABEL_SALAD = 2;
  // serving size quantity is measured in milligrams
  SERVING_LABEL_MILLIGRAMS = 3;
}

// embedded message for flexibility
message ServingSize {
  // metadata of tag
  TagMetaData tag_meta_data = 1;
  // quantity
  google.protobuf.Int32Value size = 2;
  // measurement of quantity
  ServingLabel label = 3;
}

// contains all macro fields of an entity; all values will be in unit grams by default
message Macro {
  // for macros, we only care about the overall source, but later we can add specific macro meta data
  TagMetaData tag_meta_data = 1;
  // macro fat info
  Fat fat = 2;
  // macro cholesterol info
  Cholesterol cholesterol = 3;
  // macro sodium info
  Sodium sodium = 4;
  // macro carbohydrate info
  Carbohydrate carbohydrate = 5;
  // macro fiber info
  Fiber fiber = 6;
  // macro sugar info
  Sugar sugar = 7;
  // macro protein info
  Protein protein = 8;
}

// embedded message for flexibility
message Fat {
  // total fat
  google.protobuf.Int32Value total_fat = 1;
  // saturated fat
  google.protobuf.Int32Value saturated_fat = 2;
  // trans fat
  google.protobuf.Int32Value trans_fat = 3;
}

// embedded message for flexibility
message Cholesterol {
  // total cholesterol
  google.protobuf.Int32Value cholesterol = 1;
}

// embedded message for flexibility
message Sodium {
  // total sodium
  google.protobuf.Int32Value sodium = 1;
}

// embedded message for flexibility
message Carbohydrate {
  // total carbohydrate
  google.protobuf.Int32Value total_carbohydrate = 1;
}

// embedded message for flexibility
message Fiber {
  // total fiber
  google.protobuf.Int32Value total_fiber = 1;
}

// embedded message for flexibility
message Sugar {
  // total sugar
  google.protobuf.Int32Value total_sugar = 1;
}

// embedded message for flexibility
message Protein {
  // total protein
  google.protobuf.Int32Value protein = 1;
}

// embedded message for flexibility
message CourseTypeTag {
  // metadata of tag
  TagMetaData tag_meta_data = 1;
  // course type
  CourseType tag = 2;
}

// RFC: https://docs.google.com/document/d/1BFoU1Z2kMiAaTAbfomkdkBOrWMaGyGFCiuy1OLlvT64/edit?usp=sharing
// if a dynamic attribute is deemed successful, it will be added following the standard practice
message ArbitraryTags {
  // dynamic tags that describe entity; reduces testing new attribute from 1 week to 1 minute
  repeated ArbitraryTag arbitrary_tags = 1;
}

// meta data of each dynamic attribute may be required so create embedded message for flexibility
message ArbitraryTag {
  // metadata of tag
  TagMetaData tag_meta_data = 1;
  // dynamic tag that describe entity; reduces testing new attribute from 1 week to 1 minute
  string tag = 2;
}

// tags that involve catering info
message CateringTags {
  // metadata of tag
  TagMetaData tag_meta_data = 1;
  // determines if this entity is part of the "catering menu"
  bool is_catering = 2;
  // determines the minimum amount of hours it requires to be ordered in advance
  google.protobuf.Int32Value min_lead_time = 3;
}

// describes the type of course of the item
enum CourseType {
  // unspecified
  COURSE_TYPE_UNSPECIFIED = 0;
  // entity is considered to be an entree
  COURSE_TYPE_ENTREE = 1;
  // entity is considered to be a side
  COURSE_TYPE_SIDE = 2;
  // entity is considered to be an appetizer
  COURSE_TYPE_APPETIZER = 3;
  // entity is considered to be a dessert
  COURSE_TYPE_DESSERT = 4;
}
