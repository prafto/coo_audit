syntax = "proto3";

import "common/common.proto";
import "common/money.proto";
import "common/restriction_rules.proto";
import "google/protobuf/wrappers.proto";
import "doordash.retail.consumer.v1alpha1/constants.proto";
import "doordash.retail.consumer.v1alpha1/common.proto";

package doordash.retail.consumer.v1alpha1;

// based on grocery fields from
// https://github.com/doordash/merchant-apis/blob/master/definitions/merchant-data-service/consumer-api.yaml
// https://github.com/doordash/merchant-apis/blob/master/definitions/merchant-data-service/components/consumer-api.yaml


// NOTE: should we add a tracking payload to help build analytics?

// based on GroceryItem
message RetailItem {
    // unsure if we'll use this
    message RetailEntityDetails {
        // when constructing the URL
        // /(vertical-prefix)/store/(store-slug)/(item-type)/(item-slug)
        BusinessVertical vertical = 1;
        // restaurant - no prefix; grocery/convenience - add prefix
        string vertical_prefix = 2;
        // store
        string store_type = 3;
        // opaque string, my-description-some-id
        string store_slug = 4;
        // item
        string item_type = 5;
        // opaque string, my-description-some-id
        string item_slug = 6;
    }

    // internal identifier, for tracking purposes only
    string id = 1;
    // canonical URL for the item - /convenience/store/<id>/item/<url_slug>
    string url = 2;
    // entity details
    RetailEntityDetails entity_details = 3;
    // ordering/fulfilllment (required by cart/order service)
    OrderCartFields order_cart_fields = 4;
    RetailItemPricing pricing = 10;
    // product metadata
    // primary image
    ProductImage primary_image = 20;
    // additional images (does not include primary)
    repeated ProductImage additional_images = 21;
    // product name
    string name = 22;
    // product description
    string description = 23;
    // ProductVariants variants = 24;
    // weighted item unit
    ItemUnit unit = 24;
    // increment unit for weighted item
    Decimal increment = 25;
    RetailItemEstimateInfo estimate_info = 26;
    RetailItemSoldAsInfo sold_as_info = 27;
    common.restriction_rules.v1.RestrictionInfoWRules restriction_info_w_rules = 28;
}

message RetailItemPricing {
    // pricing/availability
    // price for the item
    money.MonetaryFields price = 1;
    // optional original price (shown as strike-through)
    // money.MonetaryFields original_price = 2;
}

// product image
message ProductImage {
    // internal identifier
    string id = 1;
    // default CDN url
    string src = 2; // image CDN url
    // source sets used to display images at various densities/widths
    repeated ImageSourceSet srcset = 3;
    // can be used in the BFF, if needed
    string original_image_url = 4;
    // accessibility text, not show to user
    string title = 5;
    // optional description of the image
    // show to the user if there are different views (ie. Front/Back/etc)
    string description = 6;
}

// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/source#attr-srcset
message ImageSourceSet {
    // image CDN url
    string url = 1;
    // optional width
    string width = 2;
    // optional density
    string density = 3;
}

// fields to be passed to order cart APIs
message OrderCartFields {
    // internal
    string id = 1;
    // item revision number for reconciliation
    string item_version = 2;
    // if true, enable cart stepper; not relevant for restaurant menu items
    bool enable_quick_add = 3;
    // used for global cart quantity
    string sku_id = 4;
    // MDS item id
    string item_id = 5;
    // MDS store id
    string store_id = 6;
    // MDS menu id
    string menu_id = 7; 
}
