syntax = "proto3";

package doordash.retail.consumer.v1alpha1;

import "common/money.proto";
import "doordash.retail.consumer.v1alpha1/constants.proto";
import "google/protobuf/wrappers.proto";
// Moving this from common to mitigate common package upgrade issue
// https://docs.google.com/document/d/1FrC3d3an9T1H65x5f6C876FUC_lx195tJzz5D_XFu0o/edit

// Represents a Decimal number.
// unitAmount equivalent to BigDecimal(10.2).unscaled() == 102.
// decimalPlaces equivalent to BigDecimal(10.2).scale() == 1
message Decimal {
  // decimal precision given a decimal. ie decimal_places = 2 for 1.25
  google.protobuf.Int32Value decimal_places = 1;
  // unscale value of the decimal, ie. decimal is 1.25 then the unit_amount is 125
  google.protobuf.Int32Value unit_amount = 2;
}

// Additional information describing DD consumer app price and how it is derived.
message RetailItemEstimateInfo {
  // approximate sold quantity
  Decimal approximate_sold_as_quantity = 1;
  // approximate sold unit
  ItemUnit approximate_sold_as_unit = 2;
}

// Indicates how a merchant (in-store) sells an item.
// Used when DD Consumer App sells it in a different manner.
message RetailItemSoldAsInfo {
  // generically support items that are sold differently at the merchant;
  // identical to item.price for all legacy use cases
  // store as cents but with decimal
  money.MonetaryFields measurement_price = 1;
  // can be any measurement unit that indicates mass or volume (distance)
  ItemUnit measurement_unit = 2;
  // if in store they are sold in multiple increment of unit i.e. 16 oz
  Decimal measurement_factor = 3;
}

// enumerations of QuantityInfo
enum QuantityInfoType {
  // unsupported
  QUANTITY_INFO_TYPE_UNSPECIFIED = 0;
  // sold and fulfilled by unit (ea)
  QUANTITY_INFO_TYPE_QUANTITY = 1;
  // sold and fulfilled by weight Ex: $1.00/lbs
  QUANTITY_INFO_TYPE_MEASUREMENT = 2;
  // sold by unit, but fulfilled by weight and loosely packed (e.g.bananas).
  QUANTITY_INFO_TYPE_UNIT_TO_MEASUREMENT_LOOSE_PACKAGING = 3;
  // sold by unit, but fulfilled by weight and come in fixed packaging (e.g. packaged beef)
  QUANTITY_INFO_TYPE_UNIT_TO_MEASUREMENT_FIXED_PACKAGING = 4;
}

// QuantityInfo with support for loose/fixed weighted item packaging
message QuantityInfoV2 {
  // type of quantity info
  QuantityInfoType quantity_info_type = 1;
  // quantity info with respect to type
  oneof quantity {
    // QUANTITY_INFO_TYPE_QUANTITY for buying an integer number of items.
    DiscreteQuantity unit_quantity = 2;
    // QUANTITY_INFO_TYPE_MEASUREMENT for buying weighted items.
    ContinuousQuantity measurement_quantity = 3;
    // QUANTITY_INFO_TYPE_UNIT_TO_MEASUREMENT_LOOSE_PACKAGING for buying an integer number of items but paid by weight.
    QuantityGroup unit_to_measurement_quantity = 4;
    // QUANTITY_INFO_TYPE_UNIT_TO_MEASUREMENT_FIXED_PACKAGING for buying multiple prepackaged weighted items.
    MultipleQuantityGroup unit_to_measurement_quantities = 5;
  }
}

// Unit Items
message DiscreteQuantity {
  // Number of items
  int32 quantity = 1;
  // Unit
  DiscreteQuantityUnit unit = 2;
  // Min value allowed
  int32 minimum_quantity = 3;
  // Max value allowed
  int32 maximum_quantity = 4;
}

// Weighted Item
message ContinuousQuantity {
  // Weight value
  double quantity = 1;
  // Weight unit
  ContinuousQuantityUnit unit = 2;
  // Min value allowed
  double minimum_quantity = 3;
  // Max value allowed
  double maximum_quantity = 4;
}

// Unit Items ordered but paid by weight
message QuantityGroup {
  // Number of items
  DiscreteQuantity discrete_quantity = 1;
  // Total weight
  ContinuousQuantity continuous_quantity = 2;
}

// Buying multiple prepackaged packages of a weighted item
message MultipleQuantityGroup {
  // List of items bought
  repeated QuantityGroup quantity_group = 1;
  // Min value allowed
  int32 minimum_quantity = 2;
  // Max value allowed
  int32 maximum_quantity = 3;
}

// Units for Discrete Quantities
enum DiscreteQuantityUnit {
  // unsupported
  DISCRETE_QUANTITY_UNIT_UNSPECIFIED = 0;
  // Unit Each
  DISCRETE_QUANTITY_UNIT_EA = 1;
  // Unit Quantity
  DISCRETE_QUANTITY_UNIT_QTY = 2;
  // Unit Package
  DISCRETE_QUANTITY_UNIT_PACKAGE = 3;
  // Unit Bag
  DISCRETE_QUANTITY_UNIT_BAG = 4;
  // Unit Bunch
  DISCRETE_QUANTITY_UNIT_BUNCH = 5;
  // Unit Box
  DISCRETE_QUANTITY_UNIT_BOX = 6;
  // Unit Tray
  DISCRETE_QUANTITY_UNIT_TRAY = 7;
  // Unit Bouquet
  DISCRETE_QUANTITY_UNIT_BOUQUET = 8;
  // Unit Pot
  DISCRETE_QUANTITY_UNIT_POT = 9;
}

// Units for Continuous Quantities
enum ContinuousQuantityUnit {
  // unsupported
  CONTINUOUS_QUANTITY_UNIT_UNSPECIFIED = 0;
  // Unit Pounds
  CONTINUOUS_QUANTITY_UNIT_LB = 1;
  // Unit Ounces
  CONTINUOUS_QUANTITY_UNIT_OZ = 2;
  // Unit Kilograms
  CONTINUOUS_QUANTITY_UNIT_KG = 3;
  // Unit Grams
  CONTINUOUS_QUANTITY_UNIT_GRAM = 4;
}

// substitution quantity info
message QuantityInfoV3 {
  // this value is set for items with purchaseType = unit (Cx) / unit_to_measurement (Cx)
  DiscreteQuantity discrete_quantity = 1;
  // this value is set for items with purchaseType = measurement (Cx) / unit_to_measurement (Dx)
  ContinuousQuantity continuous_quantity = 2;
  // type of quantity info
  QuantityInfoType quantity_info_type = 3;
  // ratio of sub quantity to original quantity
  google.protobuf.DoubleValue ratio_sub_quantity_to_original = 4;

  // discrete quantity is an integer and Cx/Dx update it using -+ 1 stepper
  message DiscreteQuantity {
    // Number of items
    int32 quantity = 1;
    // Max number of items allowed
    int32 maximum_quantity = 2;
  }

  // continuous quantity is a double in 2 decimal places.
  // Cx updates it using -+ 0.25 stepper, and Dx updates it by typing in the value
  message ContinuousQuantity {
    // Weight of items
    double quantity = 1;
    // Max weight of items allowed
    double maximum_quantity = 2;
    // Unit, e.g. lb, oz, kg, g
    google.protobuf.StringValue unit = 3;
  }
}
