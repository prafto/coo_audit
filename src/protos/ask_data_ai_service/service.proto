syntax = "proto3";

package ask_data_ai_service.v1;

import "ask_data_ai_service/common.proto";
import "common/service_client_config.proto";
import "doordash.api/annotations.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option go_package = "ask_data_ai_service";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.ask_data_ai_service";

// This is a placeholder
// The greeting service definition
service GreeterService {
  // Sends a greeting
  rpc SayHello(SayHelloRequest) returns (SayHelloResponse) {}
}

// The request message containing the user's name
message SayHelloRequest {
  // name
  string name = 1;
}

// The response message containing the greetings
message SayHelloResponse {
  // name
  string message = 1;
}

// Service to communicate with ask data ai agents
service AskDataAIService {
  option (doordash.api.service) = {
    name: "ask-data-ai-service"
    url: "ask-data-ai-service-grpc-gateway.service.prod.ddsd"
    port: 50051
    name_spaces: [
      "chat",
      "query",
      "user-preference"
    ]
    owner: {
      name: "ask-data-ai-service"
      id: "ask-data-ai-service"
      slack_channel: "#team-askdata"
      email_alias: "eng-data-core@doordash.com"
    }
    target_products: [INTERNAL]
  };
  // Converse with agents
  rpc Conversation(ConversationRequest) returns (ConversationResponse) {
    option (google.api.http) = {
      post: "/chat/v1/conversation"
      body: "*"
    };

    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      target_products: [INTERNAL]
      inject_user_roles: true
    };
    option (service_client.client_method_config).response_attempt_timeout_millis = 60000;
  }
  // Execute SQL queries
  rpc ExecuteQuery(ExecuteQueryRequest) returns (ExecuteQueryResponse) {}
  // Submit Async SQL query
  rpc SubmitAsyncQuery(SubmitAsyncQueryRequest) returns (SubmitAsyncQueryResponse) {
    option (google.api.http) = {
      post: "/query/v1/submit"
      body: "*"
    };

    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      target_products: [INTERNAL]
      inject_user_roles: true
    };
  }
  // Get Async SQL query result
  rpc GetAsyncQueryResult(GetAsyncQueryResultRequest) returns (GetAsyncQueryResultResponse) {
    option (google.api.http) = {
      post: "/query/v1/results"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      target_products: [INTERNAL]
      inject_user_roles: true
    };
  }
  // Cancel Async SQL queries
  rpc CancelAsyncQuery(CancelAsyncQueryRequest) returns (CancelAsyncQueryResponse) {
    option (google.api.http) = {
      post: "/query/v1/cancel"
      body: "*"
    };

    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      target_products: [INTERNAL]
      inject_user_roles: true
    };
  }
  // Get agents
  rpc GetAgents(GetAgentsRequest) returns (GetAgentsResponse) {
    option (google.api.http) = {get: "/chat/v1/agents"};
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      target_products: [INTERNAL]
      inject_user_roles: true
    };
  }
  // Set user preference
  rpc SetUserPreference(SetUserPreferenceRequest) returns (SetUserPreferenceResponse) {
    option (google.api.http) = {
      post: "/user-preference/v1/set-preference"
      body: "*"
    };

    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      target_products: [INTERNAL]
      inject_user_roles: true
    };
  }
  // Get user preference
  rpc GetUserPreference(GetUserPreferenceRequest) returns (GetUserPreferenceResponse) {
    option (google.api.http) = {get: "/user-preference/v1/get-preference"};
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      target_products: [INTERNAL]
      inject_user_roles: true
    };
  }
  // Save favorite message
  rpc SaveFavoriteMessage(SaveFavoriteMessageRequest) returns (SaveFavoriteMessageResponse) {
    option (google.api.http) = {
      post: "/user-preference/v1/save-favorite-message",
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      target_products: [INTERNAL]
      inject_user_roles: true
    };
  }
  // Get favorite messages
  rpc GetFavoriteMessages(GetFavoriteMessagesRequest) returns (GetFavoriteMessagesResponse) {
    option (google.api.http) = {get: "/user-preference/v1/get-favorite-messages"};
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      target_products: [INTERNAL]
      inject_user_roles: true
    };
  }

  // Get Chat Sessions
  rpc GetChatSessions(GetChatSessionsRequest) returns (GetChatSessionsResponse) {
    option (google.api.http) = {get: "/chat/v1/get-chat-sessions"};
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      target_products: [INTERNAL]
      inject_user_roles: true
    };
  }
  // Save response feedback
  rpc SaveResponseFeedback(SaveResponseFeedbackRequest) returns (SaveResponseFeedbackResponse) {
    option (google.api.http) = {
      post: "/chat/v1/store-response-feedback",
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      target_products: [INTERNAL]
      inject_user_roles: true
    };
  }
}

// enums
// Sender Type
enum SenderType {
  // Unspecified sender type
  SENDER_TYPE_UNSPECIFIED = 0;
  // Human type sender
  SENDER_TYPE_HUMAN = 1;
  // System type sender
  SENDER_TYPE_SYSTEM = 2;
  // AI type sender
  SENDER_TYPE_AI = 3;
}

// messages

// Save Favorite Message Request
message SaveFavoriteMessageRequest {
  // message id
  google.protobuf.StringValue message_id = 1;
  // favorite
  google.protobuf.BoolValue favorite = 2;
}

// Save Favorite Message Response
message SaveFavoriteMessageResponse {
  // error
  google.protobuf.StringValue error = 1;
}

// Get Favorite Messages Request
message GetFavoriteMessagesRequest {
  // filter object
  FilterObject filter_object = 1;
  // page object
  PageObject page_object = 2;
}

// Get Favorite Messages Response
message GetFavoriteMessagesResponse {
  // starred messages
  repeated ChatMessage starred_messages = 1;
  // page object
  PageObject page_object = 2;
  // error
  google.protobuf.StringValue error = 3;
}

// Get Chat Sessions Request
message GetChatSessionsRequest {
  // chat session id
  google.protobuf.StringValue chat_session_id = 1;
  // filter object
  FilterObject filter_object = 2;
  // page object
  PageObject page_object = 3;
}

// Chat Session
message ChatSession {
  // chat session id
  google.protobuf.StringValue chat_session_id = 1;
  // timestamp
  google.protobuf.Timestamp timestamp = 2;
  // chat session summary
  google.protobuf.StringValue chat_session_summary = 3;
  // chat history
  repeated ChatMessage chat_message = 4 [deprecated = true];
  // chat messages
  repeated ChatMessage chat_messages = 5;
  // agent id
  google.protobuf.StringValue agent_id = 6;
}

// Get Chat Sessions Response
message GetChatSessionsResponse {
  // chat session
  repeated ChatSession chat_session = 1 [deprecated = true];
  // page object
  PageObject page_object = 2;
  // error
  google.protobuf.StringValue error = 3;
  // chat sessions
  repeated ChatSession chat_sessions = 4;
}

// Chat History
message ChatHistory {
  // message id
  google.protobuf.StringValue message_id = 1;
  // message
  google.protobuf.StringValue message = 2;
  // sender
  SenderType sender = 3;
  // timestamp
  google.protobuf.Timestamp timestamp = 4;
}

// Chat Message
message ChatMessage {
  // message id
  google.protobuf.StringValue message_id = 1;
  // parent message id
  google.protobuf.StringValue parent_message_id = 2;
  // text
  google.protobuf.StringValue text = 3;
  // sender type
  SenderType sender_type = 4;
  // agent id
  google.protobuf.StringValue agent_id = 5;
  // chat session id
  google.protobuf.StringValue chat_session_id = 6;
  // platform transfer id
  google.protobuf.StringValue platform_transfer_id = 7;
  // timestamp
  google.protobuf.Timestamp timestamp = 8;
}

// Intermediate Step
message IntermediateStep {
  // step
  google.protobuf.StringValue step = 1;
  // result
  google.protobuf.StringValue result = 2;
}

// Request
message ConversationRequest {
  // agent_id
  google.protobuf.StringValue agent_id = 1;
  // query
  google.protobuf.StringValue query = 2;
  // chat history
  repeated ChatHistory chat_history = 3;
  // chat session id
  google.protobuf.StringValue chat_session_id = 4;
  // message
  google.protobuf.StringValue message = 5;
}

// Response
message ConversationResponse {
  // response
  google.protobuf.StringValue repsone_text = 1 [deprecated = true];
  // error
  google.protobuf.StringValue error = 2;
  // intermediate steps
  repeated IntermediateStep intermediate_steps = 3;
  // response
  google.protobuf.StringValue response_text = 4;
  // message id
  google.protobuf.StringValue message_id = 5;
}

// Request
message ExecuteQueryRequest {
  // query
  google.protobuf.StringValue query = 1;
  // extras
  google.protobuf.StringValue extras = 2;
}

// Response
message ExecuteQueryResponse {
  // response
  google.protobuf.StringValue repsone_text = 1 [deprecated = true];
  // error
  google.protobuf.StringValue error = 2;
  // response
  google.protobuf.StringValue response_text = 3;
}

// Submit Async Query Request
message SubmitAsyncQueryRequest {
  // query
  google.protobuf.StringValue query = 1;
  // extras
  google.protobuf.StringValue extras = 2;
  // agent_id
  google.protobuf.StringValue agent_id = 3;
}

// Submit Async Query Response
message SubmitAsyncQueryResponse {
  // query id
  google.protobuf.StringValue query_id = 1;
  // error
  google.protobuf.StringValue error = 2;
}

// Async Query Result Request
message GetAsyncQueryResultRequest {
  // query id
  google.protobuf.StringValue query_id = 1;
  // extras
  google.protobuf.StringValue extras = 2;
  // agent_id
  google.protobuf.StringValue agent_id = 3;
}

// Async Query Result Response
message GetAsyncQueryResultResponse {
  // response
  google.protobuf.StringValue response_text = 1;
  // status
  google.protobuf.StringValue status = 2;
  // error
  google.protobuf.StringValue error = 3;
}

// Cancel Async Query Request
message CancelAsyncQueryRequest {
  // query id
  google.protobuf.StringValue query_id = 1;
  // agent_id
  google.protobuf.StringValue agent_id = 2;
}

// Cancel Async Query Response
message CancelAsyncQueryResponse {
  // error
  google.protobuf.StringValue error = 1;
}

// Semantic Collection
message SemanticCollection {
  // collection name
  google.protobuf.StringValue collection_name = 1;
  // k
  google.protobuf.Int32Value k = 2;
  // tool name
  google.protobuf.StringValue tool_name = 3;
  // instructions
  google.protobuf.StringValue instructions = 4;
  // post search instructions
  google.protobuf.StringValue post_search_instructions = 5;
}

// Feedback Detail
message FeedbackDetail {
  // feedback
  google.protobuf.StringValue feedback = 1;
  // feedback sentiment
  google.protobuf.StringValue feedback_sentiment = 2;
}

// Feedback Category
message FeedbackCategory {
  // feedback type
  google.protobuf.StringValue feedback_type = 1;
  // feedback list
  repeated FeedbackDetail feedback_list = 2;
}

// Feedback Config
message FeedbackConfig {
  // agent feedback
  FeedbackCategory agent_feedback = 1;
  // conversation feedback
  FeedbackCategory conversation_feedback = 2;
  // response feedback
  FeedbackCategory response_feedback = 3;
}

// Agent Config
message AgentConfig {
  // agent id
  google.protobuf.StringValue agent_id = 1;
  // agent name
  google.protobuf.StringValue agent_name = 2;
  // team
  google.protobuf.StringValue team = 3;
  // agent description
  google.protobuf.StringValue agent_description = 4;
  // conversation starter
  google.protobuf.StringValue conversation_starter = 5;
  // semantic collections
  repeated SemanticCollection semantic_collections = 6;
  // agent description summary
  google.protobuf.StringValue agent_description_summary = 7;
  // stage - dev, prod, preview etc
  google.protobuf.StringValue stage = 8;
  // extras
  google.protobuf.StringValue extras = 9;
  // feedback config
  FeedbackConfig feedback_config = 10;
}

// Agent
message Agent {
  // Agent Config
  AgentConfig config = 1;
  // prompt
  google.protobuf.StringValue prompt = 2;
}

// GetAgentsRequest
message GetAgentsRequest {}

// GetAgentsResponse
message GetAgentsResponse {
  // agents
  repeated Agent agents = 1;
  // error
  google.protobuf.StringValue error = 2;
}

// SetUserPreferenceRequest
message SetUserPreferenceRequest {
  // preference
  google.protobuf.StringValue preference = 1;
  // extras
  google.protobuf.StringValue extras = 2;
}

// SetUserPreferenceResponse
message SetUserPreferenceResponse {
  // success
  google.protobuf.BoolValue success = 1;
  // error
  google.protobuf.StringValue error = 2;
}

// GetUserPreferenceRequest
message GetUserPreferenceRequest {}

// GetUserPreferenceResponse
message GetUserPreferenceResponse {
  // preference
  google.protobuf.StringValue preference = 1;
  // error
  google.protobuf.StringValue error = 2;
}

// SaveResponseFeedbackRequest
message SaveResponseFeedbackRequest {
  // feedback
  google.protobuf.StringValue feedback = 2;
  // feedback text
  google.protobuf.StringValue feedback_text = 3;
  // message id
  google.protobuf.StringValue message_id = 4;
}

// SaveResponseFeedbackResponse
message SaveResponseFeedbackResponse {
  // error
  google.protobuf.StringValue error = 1;
}
