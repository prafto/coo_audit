syntax = "proto3";
package component_catalog.cx.self_help.v1;

import "component-catalog.cx/self_help/photo_proof_camera.proto";
import "google/protobuf/any.proto";
import "google/protobuf/wrappers.proto";

option go_package = "github.com/doordash/services-protobuf/generated/component-catalog.cx/self_help";
option java_multiple_files = true;
option java_package = "com.doordash.rpc.component_catalog.cx.self_help";

// Photo proof collection component
message PhotoProofCollection {
  // The type of photos in the collection
  enum PhotoType {
    // Unspecified
    PHOTO_TYPE_UNSPECIFIED = 0;
    // Represents a photo of the order or items
    PHOTO_TYPE_ORDER = 1;
    // Represents a photo of the receipt
    PHOTO_TYPE_RECEIPT = 2;
  }

  // The self help use case for this component
  enum UseCase {
    // Unspecified
    USE_CASE_UNSPECIFIED = 0;
    // `Issue with items` self help use case
    USE_CASE_ISSUE_WITH_ITEMS = 1;
    // `Received someone else's order` self help use case (eg. WOD)
    USE_CASE_WRONG_ORDER_DELIVERED = 2;
  }

  // Deprecated field numbers
  reserved 1, 5, 6;
  // Deprecated field names
  reserved "is_photo_required", "title", "subtitle";

  // The maximum photos the user is allowed to add
  google.protobuf.Int32Value max_photos = 2;
  // The type of photos in the collection
  PhotoType photo_type = 3;
  // The self help use case of the photo collection
  UseCase use_case = 4;
  // The client state key for determining whether photos are required in the collection.
  google.protobuf.StringValue is_photo_required_key = 7;
  // The client state key for the entire collection. Used to communicate the collection between different components.
  google.protobuf.StringValue photo_collection_key = 8;
  // Determines whether the user is allowed to add or remove photos from the collection
  google.protobuf.BoolValue is_read_only = 9;
  // Lego block that comprises the header of the photo collection (ex. title, subtitle, etc)
  google.protobuf.Any header = 10;
  // The client state key for tracking the number of photos the user has added.
  google.protobuf.StringValue photo_count_key = 11;
  // The client state key for tracking the number of photo validation attempts
  google.protobuf.StringValue validation_attempts_key = 12;
  // Lego block that comprises the error to show when a photo does not pass validation
  google.protobuf.Any validation_error = 13;
  // The client state key for determining whether to show the validation error
  google.protobuf.StringValue validation_error_visibility_key = 14;
  // The client state key for determining whether to show the photo required error.
  google.protobuf.StringValue photo_required_error_visibility_key = 15;
  // The client state key for determining whether to show an error if
  // the user tries to add more than the maximum number of photos allowed.
  google.protobuf.StringValue max_photos_error_visibility_key = 16;
  // The client state key for tracking the number of photos that have succeeded validation.
  google.protobuf.StringValue validated_photo_count_key = 17;
  // The consumer's ID.
  google.protobuf.StringValue consumer_id = 18;
  // The unique ID of the delivery.
  google.protobuf.StringValue delivery_uuid = 19;
  // The camera component to use for capturing photos.
  // Note: This will be eventually migrated to a separate component.
  PhotoProofCamera camera = 20;
}
