syntax = "proto3";

package component_catalog.cx.common.text.v1;

import "component-catalog.common/prism/components/text.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/doordash/services-protobuf/generated/component-catalog.cx/common/text";
option java_multiple_files = true;
option java_package = "com.doordash.rpc.component_catalog.cx.common.text";

/**
 * Text component with dynamic client-driven behavior.
 * Contains the core text and references a style that determines its dynamic behavior.
 *
 * Clients are responsible for:
 * - Interpreting the style parameters
 * - Implementing the specified dynamic behavior
 */
message DynamicText {
  // Text configuration including content and typography
  component_catalog.common.prism.components.v1.Text text = 1;

  // Reference to the dynamic style to apply
  DynamicTextStyle style = 2;
}

/**
 * Style that determines the dynamic behavior of text.
 * Only one dynamic behavior can be active at a time.
 */
message DynamicTextStyle {
  // The different types of dynamic behaviors available
  oneof value {
    // A countdown timer behavior
    CountdownStyle countdown = 1;
  }
}

/**
 * Style that makes text display a countdown timer.
 * Clients should ensure that the text dynamically updates to show the remaining time until expiration.
 * The client-driven countdown formatter should handle the time appropriately based on the remaining duration.
 *
 * Clients should ensure that the specified format is used, which determines how time components
 * are displayed (ex: positional, abbreviated, or full)
 */
message CountdownStyle {
  // The timestamp when the countdown reaches zero
  google.protobuf.Timestamp expiration_time = 1;

  // The placeholder token to identify in DynamicText.text that should be replaced with the countdown value.
  // IMPORTANT: DynamicText.text MUST contain this exact placeholder string for the countdown to work.
  //
  // Examples (depending on the format):
  // If placeholder = "{expiration_time}":
  //   - With DynamicText.text.value = "{expiration_time} mins remaining" → "4:30 mins remaining"
  //   - With DynamicText.text.value = "Expires in {expiration_time}" → "Expires in 2m 30s"
  //   - With DynamicText.text.value = "Offer ends in {expiration_time}" → "Offer ends in 1h 15m"
  //
  string placeholder = 2;

  // Format configuration for the countdown display
  Format format = 3;

  /**
   * Format to apply to the countdown timer
   */
  message Format {
    // Different types of formatting to apply
    oneof value {
      // Timer format - positional style with default zero formatting
      TimerFormat timer_format = 1;
    }
  }
}

// Timer format for displaying countdown time in hh:mm:ss format
//
// Uses positional style that drops leading zeroes but pads middle and trailing values with zeros as needed
//
// Examples:
// - 0h 0m 45s → "0:45"
// - 0h 30m 45s → "30:45"
message TimerFormat {
  // Whether to show the hours unit when hours = 0
  //
  // Example when show_zero_hours = true:
  // - 0h 30m 45s → "0:30:45"
  //
  // Example when show_zero_hours = false:
  // - 0h 30m 45s → "30:45"
  bool show_zero_hours = 1;
}
