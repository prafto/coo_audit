syntax = "proto3";

package component_catalog.cx.common.chip.v1;

import "action-catalog/common/deep_link_navigate.proto";
import "component-catalog.common/prism/components/text.proto";
import "component-catalog.common/prism/shared/icon.proto";
import "component-catalog.common/prism/tokens/color.proto";
import "component-catalog.common/prism/tokens/size.proto";
import "component-catalog.common/prism/tokens/space.proto";
import "component-catalog.common/shared/components/image.proto";
import "component-catalog.cx/common/chip/chip_button.proto";
import "component-catalog.cx/common/chip/chip_filter.proto";
import "component-catalog.cx/common/chip/chip_toggle.proto";
import "google/protobuf/struct.proto";

option go_package = "github.com/doordash/services-protobuf/generated/component-catalog.cx/common/chip";
option java_multiple_files = true;
option java_package = "com.doordash.rpc.component_catalog.cx.common.chip";

// Chip component for displaying selectable or informational elements.
// Chips can be used to display attributes, filters, or actions in a compact form.
// Component Spec: https://docs.google.com/document/d/10o3ZTATVXJDmpzg_rmjMQbtt9JHo3sVT4vxzoxVusqU/edit?tab=t.0#heading=h.z6kkozb7q7ii
// Figma: https://www.figma.com/design/kGchHR9WS1vOKaIFhEi9Pn/branch/qfH2i5rpXM3soEePa8q3b8/Cx-Subsystem?node-id=31288-83585&t=CCSB6mceupylFK9f-0
message Chip {
  // Title text configuration
  ChipText title = 1;

  // Optional subtitle text configuration
  ChipText subtitle = 2;

  // Optional leading content to be rendered to the left of the title/subtitle
  LeadingContent leading_content = 3;

  // Action to take when the chip is clicked
  ChipActions on_click = 4;

  // Background color configuration
  ColorConfiguration background_color = 5;

  // Size of the chip
  ChipSize size = 6;

  // Chip behavior configuration
  ChipBehavior chip_behavior = 7;

  // Padding of chip content
  ChipPadding chip_padding = 8;

  // Logging
  google.protobuf.Struct logging = 9;

  /**
   * Set of variations of different chip behaviors
   */
  message ChipBehavior {
    // Different chip behaviors
    oneof value {
      // Button-style chip: Used for chips that act as a button to perform an action.
      ChipButton button = 1;

      // Filter-style chip: Used for filtering content with multi-selection capabilities.
      // When used in a group, multiple filter chips can be selected simultaneously.
      ChipFilter filter = 2;

      // Toggle-style chip: Used for binary state (on/off) selection with single-select behavior.
      // When used in a group, only one toggle chip can be selected at a time (radio button behavior).
      ChipToggle toggle = 3;
    }
  }

  /**
   * Text configuration for title and subtitle with selected/unselected states
   */
  message ChipText {
    // Text for unselected state
    component_catalog.common.prism.components.v1.Text unselected = 1;

    // Optional text for selected state. Only used for filter & toggle chips.
    component_catalog.common.prism.components.v1.Text selected = 2;
  }

  /**
   * Color configuration with selected and unselected states
   */
  message ColorConfiguration {
    // Color for unselected state
    component_catalog.common.prism.tokens.v1.Color unselected = 1;

    // Optional color for selected state. Only used for filter & toggle chips.
    component_catalog.common.prism.tokens.v1.Color selected = 2;
  }

  /**
   * Size of the chip.
   */
  enum ChipSize {
    // Undefined
    CHIP_SIZE_UNSPECIFIED = 0;
    // Small (32px height)
    CHIP_SIZE_SMALL = 1;
    // Large (48px height)
    CHIP_SIZE_LARGE = 2;
  }

  /**
   * Action that a chip can perform.
   */
  message ChipActions {
    // Variants of ChipActions
    oneof value {
      // Navigate via deep link.
      action_catalog.common.v1.DeepLinkNavigateAction deep_link_navigate = 1;
    }
  }

  /**
   * Set of variations to render content to the left of (leading) the title/subtitle
   */
  message LeadingContent {
    // Variants of LeadingContent
    oneof value {
      // An image to display with a given size.
      ImageConfiguration image_configuration = 1;
      // A Prism Icon to display with selected/unselected states.
      IconConfiguration icon_configuration = 2;
    }
  }

  /**
   * Image configuration with size options.
   */
  message ImageConfiguration {
    // A remote image to display
    component_catalog.common.shared.components.v1.RemoteImage image = 1;

    // Size of the image
    Size size = 2;

    /**
     * Size of the image.
     */
    enum Size {
      // Undefined
      SIZE_UNSPECIFIED = 0;
      // Small (24px x 24px)
      SIZE_SMALL = 1;
      // Large (32px x 32px)
      SIZE_LARGE = 2;
    }
  }

  /**
   * Icon configuration with selected/unselected states
   */
  message IconConfiguration {
    // Icon for unselected state
    component_catalog.common.prism.shared.v1.Icon unselected = 1;

    // Optional Icon for selected state. Only used for filter & toggle chips.
    component_catalog.common.prism.shared.v1.Icon selected = 2;
  }

  /**
   * Padding of chip content
   */
  message ChipPadding {
    // Optional - The amount of padding to add to the left of chip content
    component_catalog.common.prism.tokens.v1.Space leading = 1;
  }
}
