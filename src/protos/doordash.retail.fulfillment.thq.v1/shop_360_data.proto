syntax = "proto3";
package doordash.retail.fulfillment.thq.v1;

import "common/marketplace_purchase.proto";
import "common/money.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.shop_360";

// A group of order items
message OrderItemGroup {
  // Unique UUID to identify the group
  string group_uuid = 1;
  // Name of group
  string name = 2;
  // Sort ordering of the group to display on the client. Sort in ascending order.
  int32 sort_order = 3;
}

// Represents an item in a customer's order, along with it's category and possible substitutions
message ItemRequested {
  // OrderItemUuid from retail DB order_items table
  string order_item_uuid = 1;
  // Contain the properties of the item like name, image, price, etc
  ThqStoreItem thq_store_item = 2;
  // Quantity requested by the consumer
  QuantityInfoV2 quantity_requested = 3;
  // Unit for purchased item
  FulfillmentUnit unit_requested = 4;
  // Unit for fulfilled item
  FulfillmentUnit unit_fulfilled = 5;
  // Price for this item
  money.MonetaryFields price_fulfilled = 6;
  // approximate fulfillment quantity
  double approximate_fulfill_quantity = 7;
  // Item substitution information
  ItemSubstitutionInformation substitution_info = 8;
  // Sort ordering to display in the client within each group. Sort in ascending order.
  int32 sort_order = 9;
  // Group of item
  string group_uuid = 10;
  // Business merchant supplied id
  //  string merchant_supplied_id = 15;
  // item store location, with info like aisle, l1, etc
  string item_store_location = 11;
  // short description of the item: $12/lbs PLU # 123
  google.protobuf.StringValue description_label = 12;
  reserved 13;
  reserved "pick_status";
  // item note
  google.protobuf.StringValue item_note = 14;
  reserved 15;
  reserved "scanned_at";
  // selected substituted item
  ItemSubstituted selected_substituted_item = 16;
  // quantity picked (for original item or sub item)
  QuantityInfoV2 quantity_picked = 17;
  // pick state string
  google.protobuf.StringValue pick_state_string = 18;
  // missing and incorrect data for store items
  repeated MissingAndIncorrectData missing_and_incorrect_data = 19;
}

// model to represent selected substitution
message ItemSubstituted {
  // store item
  ThqStoreItem store_item = 1;
  // substitution status
  SubstitutionStatus substitution_status = 2;
  // substitution type
  SubstitutionType substitution_type = 3;
}

// model to represent store item properties
message ThqStoreItem {
  // business merchant supplied id
  google.protobuf.StringValue merchant_supplied_id = 1;
  // dd menu item id
  int64 menu_item_id = 2;
  // item name
  string name = 3;
  reserved 4;
  reserved "image_url";
  reserved 5;
  reserved "price";
  // purchase type
  .common.marketplace_purchase.v1.PurchaseType purchase_type = 6;
  // price unit of item
  FulfillmentUnit unit = 7;
  // approximate weight for each unit
  double approximate_unit_weight = 8;
  // price unit amount
  money.MonetaryFields price_unit_amount = 9;
  // measurement price
  money.MonetaryFields measurement_price = 10;
  // measurement unit
  google.protobuf.StringValue measurement_unit = 12;
  // item image url
  google.protobuf.StringValue item_image_url = 13;
}

// Fulfillment Unit to determine pick type
enum FulfillmentUnit {
  // UNSPECIFIED
  FULFILLMENT_UNIT_FIXED_PACKAGE_UNSPECIFIED = 0;
  // each
  FULFILLMENT_UNIT_FIXED_PACKAGE_EACH = 1;
  // package
  FULFILLMENT_UNIT_FIXED_PACKAGE_PACKAGE = 2;
  // loose package Measurement by pounds (lbs)
  FULFILLMENT_UNIT_LOOSE_PACKAGE_MEASUREMENT_LBS = 10;
  // loose package Measurement by Ounces (oz)
  FULFILLMENT_UNIT_LOOSE_PACKAGE_MEASUREMENT_OZ = 11;
  // loose package Measurement by KG (kg)
  FULFILLMENT_UNIT_LOOSE_PACKAGE_MEASUREMENT_KG = 12;
  // loose package Measurement by Gram (g)
  FULFILLMENT_UNIT_LOOSE_PACKAGE_MEASUREMENT_GRAM = 13;
  // pre packaged Measurement by pounds (lbs)
  FULFILLMENT_UNIT_FIXED_PACKAGE_MEASUREMENT_LBS = 20;
  // pre package Measurement by Ounces (oz)
  FULFILLMENT_UNIT_FIXED_PACKAGE_MEASUREMENT_OZ = 21;
  // pre package Measurement by KG (kg)
  FULFILLMENT_UNIT_FIXED_PACKAGE_MEASUREMENT_KG = 22;
  // pre package Measurement by Gram (g)
  FULFILLMENT_UNIT_FIXED_PACKAGE_MEASUREMENT_GRAM = 23;
}

// supported item pick statuses
enum PickStatus {
  //  not supported
  PICK_STATUS_UNSPECIFIED = 0;
  //  mark item as picked
  //  required fields: delivery_uuid, order_item_uuid, picked_quantity
  PICK_STATUS_PICKED = 1;
  //  mark item as refunded
  //  required fields: delivery_uuid, order_item_uuid
  PICK_STATUS_REFUNDED = 2;
  //  marks item as substituted.
  //  required fields: delivery_uuid, order_item_uuid, substitute_menu_item_id, picked_quantity
  PICK_STATUS_SUBSTITUTED = 3;
  //  notifies the Cx to select a sub/refund
  //  required fields: delivery_uuid, order_item_uuid
  PICK_STATUS_REVIEW_SUBS = 4;
  //  the Dx indicated the item was unavailable, but could still choose a substitute
  PICK_STATUS_SUBS_PENDING = 5;
  //  the Dx indicated the item was available, but has not yet submitted weight information
  PICK_STATUS_WEIGHT_PENDING = 6;
  //  the Cx has submitted subs and they are all unavailable, waiting for customer message
  PICK_STATUS_SUBS_UNAVAILABLE = 7;
  //  the Cx has selected a substitute via frictionless comms
  PICK_STATUS_SUBS_SUBMITTED = 8;
  //  the Dx indicated the item was unavailable, and is awaiting Cx input
  PICK_STATUS_FRICTIONLESS_SUBS_PENDING = 9;
  // Dx added a new item to shopping list, pending for picking the item
  PICK_STATUS_DX_ADDED_PENDING = 10;
  // Dx picked the new item added by Dx
  PICK_STATUS_DX_ADDED_PICKED = 11;
  //  notifies the Cx to review the picture of the shelf and chat with Dx
  //  required fields: delivery_uuid, order_item_uuid
  PICK_STATUS_REVIEW_SUBS_PICTURE = 12;
}

// Status for what kind of substitution option the consumer selected.
enum SubstitutionStatus {
  // Unspecified Substitution Status
  SUBSTITUTION_STATUS_UNSPECIFIED = 0;
  // contact customer
  SUBSTITUTION_STATUS_CONTACT_CUSTOMER = 1;
  // refund customer
  SUBSTITUTION_STATUS_REFUND_CUSTOMER = 2;
  // Consumer requested to substitute with a known in-catalog item
  SUBSTITUTION_STATUS_SELECT_SUBSTITUTION = 3;
  // Substitution Status for Frictionless Comms
  SUBSTITUTION_STATUS_FRICTIONLESS_COMMS = 4;
  // if substitutions are doordash recommended
  SUBSTITUTION_STATUS_DOORDASH_CHOICE = 5;
  // if substitutions are doordash recommended
  SUBSTITUTION_STATUS_GENERIC_CATEGORY = 6;
  // if substitutions are merchant recommended
  SUBSTITUTION_STATUS_MX_RECOMMENDED = 7;
}

// substitution type
enum SubstitutionType {
  // substitution type unspecified
  SUBSTITUTION_TYPE_UNSPECIFIED = 0;
  // substitution type cx approved
  SUBSTITUTION_TYPE_CX_APPROVED = 1;
  // substitution type doordash choice
  SUBSTITUTION_TYPE_DOORDASH_CHOICE = 2;
  // substitution type for a specific sub item under generic category
  SUBSTITUTION_TYPE_GENERIC_CATEGORY_SUB_ITEM = 3;
  // substitution type for any item under generic category
  SUBSTITUTION_TYPE_GENERIC_CATEGORY_ANY = 4;
  // substitution type for item searched & selected for substituting
  SUBSTITUTION_TYPE_MANUAL_SUB_SEARCH = 5;
  // substitution type for item manually scanned & selected for substituting
  SUBSTITUTION_TYPE_MANUAL_SUB_SCAN = 6;
  // substitution type when dx adds this item after barcode scanning failure
  // and choosing "I have the right item" option
  SUBSTITUTION_TYPE_MANUAL_SUB_WRONG_ITEM_SCAN = 7;
  // substitution type for a substitution item that came as a recommendation from the merchant
  SUBSTITUTION_TYPE_MX_RECOMMENDED = 8;
}

// Substitution information of the item used for fulfillment
message ItemSubstitutionInformation {
  // Substitution preference selected for the given item.
  SubstitutionStatus substitution_status = 1;
  // list of eligible substitution choices for dasher to choose from
  repeated EligibleSubstitution eligible_substitutions = 2;
}

// A possible substitution for a given order item
message EligibleSubstitution {
  // Contain the properties of the item like name, image, price, etc
  ThqStoreItem store_item = 1;

  // type of substitution
  SubstitutionType substitution_type = 2;

  // label to show on the substitution
  SubstitutionLabel substitution_label = 3;
  // indicates which label should be set on the sub
  enum SubstitutionLabel {
    // not supported or no label
    SUBSTITUTION_LABEL_UNSPECIFIED = 0;
    // marks if the sub needs to show doordash choice tag
    SUBSTITUTION_LABEL_DOORDASH_CHOICE = 1;
  }
}

// QuantityInfo with support for loose/fixed weighted item packaging
message QuantityInfoV2 {
  // enumerations of QuantityInfo
  enum QuantityInfoType {
    // unsupported
    QUANTITY_INFO_TYPE_UNSPECIFIED = 0;
    // sold and fulfilled by unit (ea)
    QUANTITY_INFO_TYPE_QUANTITY = 1;
    // sold and fulfilled by weight Ex: $1.00/lbs
    QUANTITY_INFO_TYPE_MEASUREMENT = 2;
    // sold by unit, but fulfilled by weight and loosely packed (e.g.bananas).
    QUANTITY_INFO_TYPE_UNIT_TO_MEASUREMENT_LOOSE_PACKAGING = 3;
    // sold by unit, but fulfilled by weight and come in fixed packaging (e.g. packaged beef)
    QUANTITY_INFO_TYPE_UNIT_TO_MEASUREMENT_FIXED_PACKAGING = 4;
  }

  // type of quantity info
  QuantityInfoType quantity_info_type = 1;
  // quantity info with respect to type
  oneof quantity {
    // QUANTITY_INFO_TYPE_QUANTITY for buying an integer number of items.
    DiscreteQuantity unit_quantity = 2;
    // QUANTITY_INFO_TYPE_MEASUREMENT for buying weighted items.
    ContinuousQuantity measurement_quantity = 3;
    // QUANTITY_INFO_TYPE_UNIT_TO_MEASUREMENT_LOOSE_PACKAGING for buying an integer number of items but paid by weight.
    QuantityGroup unit_to_measurement_quantity = 4;
    // QUANTITY_INFO_TYPE_UNIT_TO_MEASUREMENT_FIXED_PACKAGING for buying multiple prepackaged weighted items.
    MultipleQuantityGroup unit_to_measurement_quantities = 5;
  }
}

// Unit Items
message DiscreteQuantity {
  // Number of items
  int32 quantity = 1;
  // Unit
  DiscreteQuantityUnit unit = 2;
  // Min value allowed
  int32 minimum_quantity = 3;
  // Max value allowed
  int32 maximum_quantity = 4;
}

// Weighted Item
message ContinuousQuantity {
  // Weight value
  double quantity = 1;
  // Weight unit
  ContinuousQuantityUnit unit = 2;
  // Min value allowed
  double minimum_quantity = 3;
  // Max value allowed
  double maximum_quantity = 4;
  // Soft limit for min value allowed
  double minimum_quantity_soft = 5;
  // Soft limit for max value allowed
  double maximum_quantity_soft = 6;
}

// Unit Items ordered but paid by weight
message QuantityGroup {
  // Number of items
  DiscreteQuantity discrete_quantity = 1;
  // Total weight
  ContinuousQuantity continuous_quantity = 2;
}

// Buying multiple prepackaged packages of a weighted item
message MultipleQuantityGroup {
  // List of items bought
  repeated QuantityGroup quantity_group = 1;
  // Min value allowed
  int32 minimum_quantity = 2;
  // Max value allowed
  int32 maximum_quantity = 3;
  // Max total weight allowed. Eg. FE sums the weight of all the packages and compares it to this value
  double maximum_total_weight = 4;
}

// model to represent missing and incorrect data for store items
message MissingAndIncorrectData {
  // problem name
  google.protobuf.StringValue problem_name = 1;
  // description of problem
  google.protobuf.StringValue problem_description = 2;
}

// Units for Discrete Quantities
enum DiscreteQuantityUnit {
  // unsupported
  DISCRETE_QUANTITY_UNIT_UNSPECIFIED = 0;
  // Unit Each
  DISCRETE_QUANTITY_UNIT_EA = 1;
  // Unit Quantity
  DISCRETE_QUANTITY_UNIT_QTY = 2;
  // Unit Package
  DISCRETE_QUANTITY_UNIT_PACKAGE = 3;
  // Unit Bag
  DISCRETE_QUANTITY_UNIT_BAG = 4;
  // Unit Bunch
  DISCRETE_QUANTITY_UNIT_BUNCH = 5;
  // Unit Box
  DISCRETE_QUANTITY_UNIT_BOX = 6;
  // Unit Tray
  DISCRETE_QUANTITY_UNIT_TRAY = 7;
  // Unit Bouquet
  DISCRETE_QUANTITY_UNIT_BOUQUET = 8;
  // Unit Pot
  DISCRETE_QUANTITY_UNIT_POT = 9;
}

// Units for Continuous Quantities
enum ContinuousQuantityUnit {
  // unsupported
  CONTINUOUS_QUANTITY_UNIT_UNSPECIFIED = 0;
  // Unit Pounds
  CONTINUOUS_QUANTITY_UNIT_LB = 1;
  // Unit Ounces
  CONTINUOUS_QUANTITY_UNIT_OZ = 2;
  // Unit Kilograms
  CONTINUOUS_QUANTITY_UNIT_KG = 3;
  // Unit Grams
  CONTINUOUS_QUANTITY_UNIT_GRAM = 4;
}
