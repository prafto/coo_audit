syntax = "proto3";

package storage_self_serve.v1;

import "storage_self_serve.v1/operation_events.proto";
import "storage_self_serve.v1/operations.proto";
import "storage_self_serve.v1/validations.proto";

option go_package = "github.com/doordash/services-protobuf/generated/storage_self_serve.v1";

// Service by the Storage Infrastructure team to handle backend work associated
// with storage self service (SSS). This was created after
// `StorageSelfServeService` and is kept separate for better logical separation.
service StorageOperationsService {
  // Update Status of an operation
  rpc UpdateStatusForStorageOperation(UpdateStatusForStorageOperationRequest) returns (UpdateStatusForStorageOperationResponse) {}

  // Create a generic operation. Intended for storage admin use and
  // experimentation. Users should use the specific operation APIs instead.
  rpc CreateGenericOperation(CreateGenericOperationRequest) returns (CreateGenericOperationResponse) {}

  // Read request
  rpc GetGenericOperation(GetGenericOperationRequest) returns (GetGenericOperationResponse) {}

  // Update request
  rpc UpdateGenericOperation(UpdateGenericOperationRequest) returns (UpdateGenericOperationResponse) {}

  // Get all operations matching filter
  rpc GetAllOperations(GetAllOperationsRequest) returns (GetAllOperationsResponse) {}

  /**
   * CRUD for schema change operations.
   * These APIs could be folded together with the generic operations but are
   * intentionally separately defined to provide users with a clear
   * request/response spec.
   **/
  // Create a schema change operation.
  rpc CreateSchemaChangeOperation(CreateSchemaChangeOperationRequest) returns (CreateSchemaChangeOperationResponse) {}

  // Update non-functional metadata for a schema change operation.
  rpc UpdateSchemaChangeOperationMetadata(UpdateSchemaChangeOperationMetadataRequest) returns (UpdateSchemaChangeOperationMetadataResponse) {}

  // Update the SQL queries for a schema change operation.
  rpc UpdateQueriesForSchemaChangeOperation(UpdateQueriesForSchemaChangeOperationRequest) returns (UpdateQueriesForSchemaChangeOperationResponse) {}

  // Read request
  rpc GetSchemaChangeOperation(GetSchemaChangeOperationRequest) returns (GetSchemaChangeOperationResponse) {}

  /**
   * CRUD for operation validations.
   **/
  // Create a validation for an operation.
  rpc CreateValidation(CreateValidationRequest) returns (CreateValidationResponse) {}

  // Update the status for validation.
  rpc UpdateValidationStatus(UpdateValidationStatusRequest) returns (UpdateValidationStatusResponse) {}

  // Update the non-functional metadata
  rpc UpdateValidationMetadata(UpdateValidationMetadataRequest) returns (UpdateValidationMetadataResponse) {}

  // Read request
  rpc GetValidation(GetValidationRequest) returns (GetValidationResponse) {}

  // Get all validations associated with an operation.
  rpc GetAllValidationsForOperation(GetAllValidationsForOperationRequest) returns (GetAllValidationsForOperationResponse) {}

  // Run validations for an operation that match the provided filter.
  // Leave all fields empty to get all.
  rpc RunValidationsForOperation(RunValidationsForOperationRequest) returns (RunValidationsForOperationResponse) {}

  /**
   * CRUD for operation event log.
   **/
  // Create an operation event.
  rpc CreateOperationEvent(CreateOperationEventRequest) returns (CreateOperationEventResponse) {}

  // Get event by id
  rpc GetOperationEvent(GetOperationEventRequest) returns (GetOperationEventResponse) {}

  // Get all events matching filter. Leave all fields empty to get all events.
  rpc GetAllOperationEvents(GetAllOperationEventsRequest) returns (GetAllOperationEventsResponse) {}

  // Approve an operation.
  rpc ApproveOperation(ApproveOperationRequest) returns (ApproveOperationResponse) {}

  // Request a change to an operation.
  rpc RequestChangeOperation(RequestChangeOperationRequest) returns (RequestChangeOperationResponse) {}
}
