syntax = "proto3";
package order_accuracy_service.v1;

import "google/protobuf/wrappers.proto";

option go_package = "github.com/doordash/services-protobuf/generated/order_accuracy_service/v1";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.order_accuracy";

// Request to retrieve metadata information for items.
// If Delivery UUID or Store ID is present, the API would also return Delivery level and Store level item metadata.
// The item metadata could be different for the same Item ID for different deliveries and stores.
message GetMetadataForItemsRequest {
  // List of item IDs
  repeated int64 item_ids = 1;
  // The granularity for item tags - item tags, store item tags, delivery item tags, all tags etc.
  oneof granularity {
    // Store details
    StoreItemTags store_tags = 2;
    // Delivery details
    DeliveryItemTags delivery_tags = 3;
    // Details to fetch tags at all granularity
    AllItemTags all_tags = 4;
  }
}

// Store details
message StoreItemTags {
  // Store ID
  int64 store_id = 1;
}

// Delivery details
message DeliveryItemTags {
  // Delivery UUID
  string delivery_uuid = 1;
}

// All item, store-item, delivery-item tags
message AllItemTags {
  // Store ID
  int64 store_id = 1;
  // Delivery UUID
  string delivery_uuid = 2;
}

// Enumeration of item tags
enum ItemTagType {
  // No matching tags found
  ITEM_TAG_TYPE_UNSPECIFIED = 0;
  // Any other item type
  ITEM_TAG_TYPE_OTHER = 1;
  // Item is a drink
  ITEM_TAG_TYPE_DRINK = 2;
  // Item is a dessert
  ITEM_TAG_TYPE_DESSERT = 3;
  // Item is a High M&I items
  ITEM_TAG_TYPE_FREQUENTLY_MISSING = 4;
  // Item reported as Out of Stock
  ITEM_TAG_TYPE_OUT_OF_STOCK = 5;
  // Item reported as Out of Stock
  ITEM_TAG_TYPE_SUBSTITUTED = 6;
  // Item is a condiment
  ITEM_TAG_TYPE_CONDIMENT = 7;
  // Item is a combo but contains a drink
  ITEM_TAG_TYPE_COMBO_WITH_DRINK = 8;
  // Item is a beverage - Inferred using beverages-2.0 model
  ITEM_TAG_TYPE_BEVERAGE = 9;
  // Item is a dessert - Inferred using dish_type-2.0 model
  ITEM_TAG_TYPE_DISH = 10;
}

// Item tag and it's metadata
message ItemTag {
  // Item Tag type
  ItemTagType item_tag_type = 1;
  // Additional detail. Populated for concept scheme 1.2
  google.protobuf.StringValue details = 2;
}

// Object representing a items and the corresponding metadata
message ItemMetadata {
  // Delivery UUID, if present in the request
  google.protobuf.StringValue delivery_uuid = 1;
  // Store ID, if present in the request
  google.protobuf.Int64Value store_id = 2;
  // Item Metadata
  repeated Item items = 3;
}

// Item tags at different granularity
message Item {
  // Menu Item ID
  int64 item_id = 1;
  // Item level tags
  repeated ItemTag item_level_tags = 2;
  // Store level tags
  repeated ItemTag store_level_tags = 3;
  // Delivery level tags
  repeated ItemTag delivery_level_tags = 4;
}

// Response for GetMetadataForItems
message GetMetadataForItemsResponse {
  // Delivery UUID, if present in the request
  google.protobuf.StringValue delivery_uuid = 1;
  // Store ID, if present in the request
  google.protobuf.Int64Value store_id = 2;
  // Item Metadata
  repeated Item items = 3;
}

// Request context to upsert tags for item at store level
message PutMetadataForItemStoreContext {
  // Store id
  int64 store_id = 1;
}

// Request context to upsert tags for item at delivery level
message PutMetadataForItemDeliveryContext {
  // Delivery UUID
  string delivery_uuid = 1;
}

// Request context to upsert tags for item and no other context associated with it
message PutMetadataForItemEmptyContext {}

// Request to upsert tags for item
message PutMetadataForItemRequest {
  // Menu item id
  int64 item_id = 1;
  // Tags to upsert
  repeated ItemTag tags = 2;
  // Upsert context
  oneof context {
    // Upsert tags at store level
    PutMetadataForItemStoreContext store = 3;
    // Upsert tags at delivery level
    PutMetadataForItemDeliveryContext delivery = 4;
    // Upsert tags for item
    PutMetadataForItemEmptyContext empty = 5;
  }
}

// Response to upsert tags for item
message PutMetadataForItemResponse {
  // Menu item id
  int64 item_id = 1;
}

// Service for all item level operations
service ItemMetadataService {
  // Retrieves tags for given items
  rpc GetMetadataForItems(GetMetadataForItemsRequest) returns (GetMetadataForItemsResponse);
  // Upserts item tags
  rpc PutMetadataForItem(PutMetadataForItemRequest) returns (PutMetadataForItemResponse);
}
