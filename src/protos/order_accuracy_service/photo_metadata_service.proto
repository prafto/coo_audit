syntax = "proto3";
package order_accuracy_service.v1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option go_package = "github.com/doordash/services-protobuf/generated/order_accuracy_service/v1";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.order_accuracy";

// Request to add photo metadata
message AddPhotosMetadataRequest {
  // task_group_id for the request
  string task_group_id = 1;
  // Dx who submitted request
  int64 dasher_id = 2;
  // address of the photo taking
  string address = 3;
  // building_id of the photo taking
  string building_id = 4;
  // poi_id of the photo taking
  string poi_id = 5;
  // building_name of the photo taking
  string building_name = 6;
  // building_type of the photo taking
  string building_type = 7;
  // task_group_id for the request
  repeated PhotoTakingResult photo_tasking_result = 8;
  // Sub task type
  string sub_task_type = 9;
}

// PhotoTakingResult for specific angle, angle is unique in task group but can have several photos uploaded
message PhotoTakingResult {
  // angle the photo was taken
  string angle = 1;
  // photo metadata
  oneof metadata {
    // successful photo taking
    UploadPhotoMetadata image_upload_metadata = 4;
    // Dx experiences issue during photo taking
    IssueTakingPhotoMetadata issue_taking_photo_metadata = 5;
  }
}

// Dx successful upload photo
message UploadPhotoMetadata {
  // Photo upload (id)
  string photo_identifier = 1;
  // Course of Dx during photo taking
  google.protobuf.DoubleValue course = 2;
  // Course of Dx during photo taking
  google.protobuf.DoubleValue latitude = 3;
  // Course of Dx during photo taking
  google.protobuf.DoubleValue longitude = 4;
  // Course of Dx during photo taking
  google.protobuf.DoubleValue altitude = 5;
  // Time when the metadata was uploaded
  google.protobuf.Timestamp timestamp = 8;
  // Azimuth of Dx during photo taking
  google.protobuf.DoubleValue azimuth = 9;
  // Horizontal Accuracy of Dx during photo taking
  google.protobuf.DoubleValue horizontal_accuracy = 10;
  // Vertical Accuracy of Dx during photo taking
  google.protobuf.DoubleValue vertical_accuracy = 11;
  // Optional - Final image url
  google.protobuf.StringValue image_url = 12;
}

// Dx experiences issue during photo taking
message IssueTakingPhotoMetadata {
  // Free text reason of the issue
  string reason = 1;
}

// Response for AddPhotoMetadata request
message AddPhotosMetadataResponse {
  // task_group_id for the request
  string task_group_id = 1;
}

// Request message for fetching tasks
message FetchPhotoTakingTasksRequest {
  // Id by which the tasks need to be fetched
  oneof id {
    // Data for task group
    string task_group_id = 1;
    // All tasks completed by dasher
    int64 dasher_id = 2;
    // All tasks for a given building id
    string building_id = 3;
    // All tasks for a given poi
    string poi_id = 4;
    // Internal task identifier
    string identifier = 5;
  }
  // Optional - Tasks completed after
  google.protobuf.Timestamp completed_after = 8;
  // Include results - if false only task data will be returned
  bool include_results = 9;
}

// Dx successful upload photo
message PhotoTakingTaskDetails {
  // Identifier of the task
  string id = 1;
  // task_group_id for the request
  string task_group_id = 2;
  // Dx who submitted request
  int64 dasher_id = 3;
  // address of the photo taking
  string address = 4;
  // building_id of the photo taking
  string building_id = 5;
  // poi_id of the photo taking
  string poi_id = 6;
  // building_name of the photo taking
  string building_name = 7;
  // building_type of the photo taking
  string building_type = 8;
  // time at which the task was completed
  google.protobuf.Timestamp completion_timestamp = 9;
  // task_group_id for the request
  repeated PhotoTakingResult result = 10;
}

// Response to fetch task
message FetchPhotoTakingTasksResponse {
  // List of matching tasks
  repeated PhotoTakingTaskDetails tasks_details = 1;
}

// Request for creating photo taking taks
message CreatePhotoTaskingTaskRequest {
  // Address line 1
  string street_address = 1;
  // Address line 2
  google.protobuf.StringValue unit_number = 2;
  // City
  string city = 3;
  // State
  string state = 4;
  // Zip code
  string zip_code = 5;
  // Building Identifier
  string building_id = 6;
  // POI id
  string poi_id = 7;
  // Property name
  string property_name = 8;
  // Property type
  string property_type = 9;
  // Sub task type
  string sub_task_type = 10;
  // Window start time as local time string (2024-11-22 18:50:00). When null start time will be an hour from submission.
  google.protobuf.StringValue window_start_local_time_string = 15;
  // Window end time as local time string (2024-11-22 18:50:00). When null end time will be two hours from start time.
  google.protobuf.StringValue window_end_local_time_string = 16;
  // Submitter email
  string submitter_email = 13;
  // Manually assign
  bool manual_assign = 14;

  reserved 12;
  reserved "window_end_local_timestamp";
  reserved 11;
  reserved "window_start_local_timestamp";
}

// Response for create photo taking task
message CreatePhotoTaskingTaskResponse {
  // Id of the created task group
  string task_group_id = 1;
}

// Service for all item level operations
service PhotoTakingMetadataService {
  // set the photo for the task
  rpc AddPhotosMetadata(AddPhotosMetadataRequest) returns (AddPhotosMetadataResponse);
  // Fetches the photo tasking task results by one of id
  rpc FetchPhotoTakingTasks(FetchPhotoTakingTasksRequest) returns (FetchPhotoTakingTasksResponse);
  // Creates panorama task based on operator input
  rpc CreatePhotoTaskingTask(CreatePhotoTaskingTaskRequest) returns (CreatePhotoTaskingTaskResponse);
}
