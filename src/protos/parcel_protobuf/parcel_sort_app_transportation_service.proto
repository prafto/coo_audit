syntax = "proto3";

package parcel_service.v1;

import "common/common.proto";
import "common/service_client_config.proto";
import "doordash.api/annotations.proto";
import "doordash.api/client.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "parcel_protobuf/common.proto";
import "parcel_protobuf/parcel_sort_app.proto";

option go_package = "drive_parcel_service";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.parcel";

// service for all truck related operations within parcel sort app
service ParcelSortAppTransportationService {
  option (doordash.api.service) = {
    name: "parcel-sort-app-transportation"
    url: "parcel-service-web.service.prod.ddsd"
    port: 50051
    api_key_name: "API_KEY_FOR_PARCEL_SERVICE"
    owner: {
      id: "drive-parcels"
      name: "parcel"
      slack_channel: "#drive-parcels-alerts"
      email_alias: "drive-eng-parcel-plus@doordash.com"
    }
    name_spaces: ["parcel"]
    vertical_domains: [CX]
    target_products: [CX]
  };
  option (doordash.api.service_forward_headers) = {
    forward: [
      {field: "X-Application-Name"}]
  };

  // Get outbound truck query
  rpc GetOutboundStats(GetOutboundStatsRequest) returns (GetOutboundStatsResponse) {
    option (google.api.http) = {
      post: "/parcel/v1/parcel_sort_app/get-outbound-stats"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [CX_USER]
      role_based_authorization: {
        mode: ANY,
        roles: ["perm_parcel_operator"]
      }
      slo_config: {
        critical_alerts_enabled: true
        critical_5m_burn_threshold: 3000
        critical_5m_burn_sustain_seconds: 300
        p99_latency: 3
      }
    };
    option (service_client.client_method_config).response_attempt_timeout_millis = 10000;
  }

  // Move parcel to container
  rpc MoveParcelToContainer(MoveParcelToContainerRequest) returns (MoveParcelToContainerResponse) {
    option (google.api.http) = {
      post: "/parcel/v1/parcel_sort_app/move-parcel-to-container"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [CX_USER]
      // no role_based_authorization
      slo_config: {
        critical_alerts_enabled: true
        critical_5m_burn_threshold: 3000
        critical_5m_burn_sustain_seconds: 300
        p99_latency: 3
      }
    };
  }

  // create a new parcel container
  rpc CreateContainer(CreateContainerRequest) returns (CreateContainerResponse) {
    option (google.api.http) = {
      post: "/parcel/v1/parcel_sort_app/create-container"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [CX_USER]
      slo_config: {
        critical_alerts_enabled: true
        critical_5m_burn_threshold: 3000
        critical_5m_burn_sustain_seconds: 300
        p99_latency: 3
      }
    };
  }

  // Batch generate container labels
  rpc BatchGenerateContainerLabels(BatchGenerateContainerLabelsRequest) returns (BatchGenerateContainerLabelsResponse) {
    option (google.api.http) = {
      post: "/parcel/v1/parcel_sort_app/batch-generate-container-labels"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [CX_USER]
      role_based_authorization: {
        mode: ANY,
        roles: ["perm_parcel_operator"]
      }
      slo_config: {
        critical_alerts_enabled: true
        critical_5m_burn_threshold: 3000
        critical_5m_burn_sustain_seconds: 300
        p99_latency: 3
      }
    };
  }

  // scan container
  rpc ScanContainer(ScanContainerRequest) returns (ScanContainerResponse) {
    option (google.api.http) = {
      post: "/parcel/v1/parcel_sort_app/scan-container"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [CX_USER]
      // no role_based_authorization
      slo_config: {
        critical_alerts_enabled: true
        critical_5m_burn_threshold: 3000
        critical_5m_burn_sustain_seconds: 300
        p99_latency: 3
      }
    };
  }

  // move container to truck
  rpc MoveContainerToTruck(MoveContainerToTruckRequest) returns (MoveContainerToTruckResponse) {
    option (google.api.http) = {
      post: "/parcel/v1/parcel_sort_app/move-container-to-truck"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [CX_USER]
      // no role_based_authorization
      slo_config: {
        critical_alerts_enabled: true
        critical_5m_burn_threshold: 3000
        critical_5m_burn_sustain_seconds: 300
        p99_latency: 3
      }
    };
  }

  // list containers for facility by destination facility
  rpc ListContainersForFacilityByDestination(ListContainersForFacilityByDestinationRequest) returns (ListContainersForFacilityByDestinationResponse) {
    option (google.api.http) = {
      post: "/parcel/v1/parcel_sort_app/list-containers-for-facility-by-destination"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [CX_USER]
      role_based_authorization: {
        mode: ANY,
        roles: ["perm_parcel_operator"]
      }
      slo_config: {
        critical_alerts_enabled: true
        critical_5m_burn_threshold: 3000
        critical_5m_burn_sustain_seconds: 300
        p99_latency: 3
      }
    };
  }

  // get container details
  rpc GetContainerDetails(GetContainerDetailsRequest) returns (GetContainerDetailsResponse) {
    option (google.api.http) = {
      post: "/parcel/v1/parcel_sort_app/get-container-details"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [CX_USER]
      role_based_authorization: {
        mode: ANY,
        roles: ["perm_parcel_operator"]
      }
      slo_config: {
        critical_alerts_enabled: true
        critical_5m_burn_threshold: 3000
        critical_5m_burn_sustain_seconds: 300
        p99_latency: 3
      }
    };
  }

  // list containers for facility by origin facility
  rpc ListContainersForFacilityByOrigin(ListContainersForFacilityByOriginRequest) returns (ListContainersForFacilityByOriginResponse) {
    option (google.api.http) = {
      post: "/parcel/v1/parcel_sort_app/list-containers-for-facility-by-origin"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [CX_USER]
      role_based_authorization: {
        mode: ANY,
        roles: ["perm_parcel_operator"]
      }
      slo_config: {
        critical_alerts_enabled: true
        critical_5m_burn_threshold: 3000
        critical_5m_burn_sustain_seconds: 300
        p99_latency: 3
      }
    };
  }

  // Batch generate container labels
  rpc BatchUpdateContainerStatus(BatchUpdateContainerStatusRequest) returns (BatchUpdateContainerStatusResponse) {
    option (google.api.http) = {
      post: "/parcel/v1/parcel_sort_app/batch-update-container-status"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [CX_USER]
      role_based_authorization: {
        mode: ANY,
        roles: ["perm_parcel_operator"]
      }
      slo_config: {
        critical_alerts_enabled: true
        critical_5m_burn_threshold: 3000
        critical_5m_burn_sustain_seconds: 300
        p99_latency: 3
      }
    };
  }

  // Batch generate container labels
  rpc BatchRescheduleContainer(BatchRescheduleContainerRequest) returns (BatchRescheduleContainerResponse) {
    option (google.api.http) = {
      post: "/parcel/v1/parcel_sort_app/batch-reschedule-container-request"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [CX_USER]
      role_based_authorization: {
        mode: ANY,
        roles: ["perm_parcel_operator"]
      }
      slo_config: {
        critical_alerts_enabled: true
        critical_5m_burn_threshold: 3000
        critical_5m_burn_sustain_seconds: 300
        p99_latency: 3
      }
    };
  }

  // unload container
  rpc UnloadContainer(UnloadContainerRequest) returns (UnloadContainerResponse) {
    option (google.api.http) = {
      post: "/parcel/v1/parcel_sort_app/unload-container"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [CX_USER]
      slo_config: {
        critical_alerts_enabled: true
        critical_5m_burn_threshold: 3000
        critical_5m_burn_sustain_seconds: 300
        p99_latency: 3
      }
    };
  }

  // consolidate pallets. move parcels from one pallet to another pallet
  rpc ConsolidateContainers(ConsolidateContainersRequest) returns (ConsolidateContainersResponse) {
    option (google.api.http) = {
      post: "/parcel/v1/parcel_sort_app/consolidate-containers"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [CX_USER]
      role_based_authorization: {
        mode: ANY,
        roles: ["perm_parcel_operator"]
      }
      slo_config: {
        critical_alerts_enabled: true
        critical_5m_burn_threshold: 3000
        critical_5m_burn_sustain_seconds: 300
        p99_latency: 3
      }
    };
  }

  // list eligible containers for truck
  rpc ListEligibleContainersToLoadForTruck(ListEligibleContainersToLoadForTruckRequest) returns (ListEligibleContainersToLoadForTruckResponse) {
    option (google.api.http) = {
      post: "/parcel/v1/parcel_sort_app/list-eligible-containers-to-load-for-truck"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [CX_USER]
      slo_config: {
        critical_alerts_enabled: true
        critical_5m_burn_threshold: 3000
        critical_5m_burn_sustain_seconds: 300
        p99_latency: 3
      }
    };
  }
}

// scan container request
message ScanContainerRequest {
  // facility id
  int32 facility_id = 1;
  // container id
  google.protobuf.StringValue container_id = 2;
}

// scan container response
message ScanContainerResponse {
  // container
  Container container = 1;
  // scan status
  ContainerScanStatus container_scan_status = 2;
}

// container scan status
enum ContainerScanStatus {
  // unspecified container scan status
  CONTAINER_SCAN_STATUS_UNSPECIFIED = 0;
  // container is at origin
  CONTAINER_SCAN_STATUS_CONTAINER_AT_ORIGIN = 1;
  // container at intermediate location between origin and destination
  CONTAINER_SCAN_STATUS_CONTAINER_AT_INTERMEDIATE_HUB = 2;
  // container at destination
  CONTAINER_SCAN_STATUS_CONTAINER_AT_DESTINATION = 3;
  // container is at incorrect facility
  CONTAINER_SCAN_STATUS_CONTAINER_AT_INCORRECT_FACILITY = 4;
}

// outbound truck request
message GetOutboundStatsRequest {
  // facility id
  int32 facility_id = 1;
  // Scan start end time
  TimeInterval scan_interval = 2; // TODO: deprecate after UI migration
  // scheduled departure interval
  TimeInterval scheduled_departure_interval = 3;
}

// outbound truck response
message GetOutboundStatsResponse {
  // outbound stats
  repeated OutboundStats outbound_stats = 1;
}

// Truck stats
message OutboundStats {
  reserved 3; // removing/deprecating total_weight_in_grams field
  // deprecated
  reserved "total_weight_in_grams";
  // destination facility code
  google.protobuf.StringValue destination_facility_code = 1;
  // parcel counts
  google.protobuf.Int64Value parcel_count = 2;
  // total weight
  google.protobuf.FloatValue total_weight_in_lbs = 4;
  // is destination facility connected spoke for hub
  google.protobuf.BoolValue is_spoke = 5;
  // palletized parcels count
  google.protobuf.Int64Value palletized_parcel_count = 6;
  // container count by their type and status
  repeated ContainerStatsByStatus container_stats_by_status = 7 [deprecated = true];
  // containers to load count
  google.protobuf.Int64Value containers_to_load_count = 8;
  // departed containers count
  google.protobuf.Int64Value departed_containers_count = 9;
  // total container count
  google.protobuf.Int64Value total_container_count = 10;
}

// container stats by status
message ContainerStatsByStatus {
  // container type
  ContainerType container_type = 1;
  // container status count
  repeated ContainerStatusCount container_status_count = 2;
}

// container status count
message ContainerStatusCount {
  // container status
  ContainerStatus container_status = 1;
  // count
  google.protobuf.Int64Value container_count = 2;
}

// move parcel to container request
message MoveParcelToContainerRequest {
  // facility id
  int32 facility_id = 1;
  // parcel id
  google.protobuf.StringValue parcel_id = 2;
  // container id
  google.protobuf.StringValue container_id = 3;
  // facility code
  google.protobuf.StringValue facility_code = 4;
}

// move parcel to container response
message MoveParcelToContainerResponse {}

// create a new container for given container type and origin location
message CreateContainerRequest {
  // facility id
  int32 facility_id = 1;
  // container type
  ContainerType container_type = 2;
  // origin facility name for the container
  google.protobuf.StringValue origin_location = 3; // prefer using ContainerFacilityInput
  // destination facility name for the container
  google.protobuf.StringValue destination_location = 4; // prefer using ContainerFacilityInput
  // container creation parameters
  oneof container_creation_parameters {
    // container route input
    ContainerRouteInput container_route_input = 5;
    // container facility input
    ContainerFacilityInput container_facility_input = 6;
  }
}

// container route input
message ContainerRouteInput {
  // route id
  google.protobuf.StringValue route_id = 1;
  // dock-door id
  google.protobuf.StringValue dock_door_id = 2;
}

// container facility input
message ContainerFacilityInput {
  // origin facility name for the container
  google.protobuf.StringValue origin_location = 1;
  // destination facility name for the container
  google.protobuf.StringValue destination_location = 2;
}

// container type
enum ContainerType {
  // unspecified container type
  CONTAINER_TYPE_UNSPECIFIED = 0;
  // pallet container
  CONTAINER_TYPE_PALLET = 1;
  // truck container
  CONTAINER_TYPE_TRUCK = 2;
  // truck set container
  CONTAINER_TYPE_TRUCK_SET = 3;
}

// create container response
message CreateContainerResponse {
  // container
  Container container = 1;
}

// container object
// This is a light weight container object for any aggregate/complex queries prefer using ContainerStats
message Container {
  // container id
  google.protobuf.StringValue container_id = 1;
  // container type
  ContainerType container_type = 2;
  // origin location
  google.protobuf.StringValue origin_location = 3;
  // destination location
  google.protobuf.StringValue destination_location = 4;
  // created time
  google.protobuf.Timestamp created_at = 5;
  // updated time
  google.protobuf.Timestamp last_updated_at = 6;
  // container status
  ContainerStatus status = 7;
  // parent container id
  google.protobuf.StringValue parent_container_id = 8;
  // destination address
  common.CommonAddress destination_address = 9;
  // current location
  google.protobuf.StringValue current_location = 10;
  // stowed child container count
  google.protobuf.Int64Value stowed_child_container_count = 11;
}

// container status
enum ContainerStatus {
  reserved 2;
  // container is loading
  reserved "CONTAINER_STATUS_LOADING";
  // unspecified container status
  CONTAINER_STATUS_UNSPECIFIED = 0;
  // container is created and not used
  CONTAINER_STATUS_INACTIVE = 1;
  // container is staging
  CONTAINER_STATUS_STAGING = 4;
  // container is done staging
  CONTAINER_STATUS_DONE_STAGING = 5;
  // container is in transit
  CONTAINER_STATUS_IN_TRANSMIT = 6;
  // unloading container
  CONTAINER_STATUS_UNLOADING = 7;
  // container is completely unloaded
  CONTAINER_STATUS_COMPLETE = 3;
  // container departed
  CONTAINER_STATUS_DEPARTED = 8;
}

// batch generate container request
message BatchGenerateContainerLabelsRequest {
  // container type
  ContainerType container_type = 1;
  // origin facility name for the container
  google.protobuf.StringValue origin_location = 2;
  // destination facility name for the container
  google.protobuf.StringValue destination_location = 3;
  // number of labels to generate
  google.protobuf.Int32Value label_count = 4;
}

// batch generate container response
message BatchGenerateContainerLabelsResponse {
  // container list
  repeated Container container = 1;
}

// methods to load a container(pallet)
enum ContainerLoadingMethod {
  // default
  CONTAINER_LOADING_METHOD_UNSPECIFIED = 0;
  // when a pallet qr code is scanned
  CONTAINER_LOADING_METHOD_PALLET = 1;
  // when a route qr code is scanned
  CONTAINER_LOADING_METHOD_ROUTE = 2;
  // when a dock door qr is scanned
  CONTAINER_LOADING_METHOD_DOCK_DOOR = 3;
}

// move container to truck request
message MoveContainerToTruckRequest {
  // facility id
  int32 facility_id = 1;
  // container id
  google.protobuf.StringValue container_id = 2;
  // route id
  google.protobuf.StringValue route_id = 3;
  // container loading method id
  google.protobuf.StringValue loading_method_id = 6;
  // container loading method
  ContainerLoadingMethod loading_method = 7;
  // force load container to truck
  google.protobuf.BoolValue force_load_container_to_truck = 4;
  // optional if we moving pallets using a dock door
  google.protobuf.StringValue dock_door_id = 5 [(doordash.api.client.optional) = true];
  // optional if we moving pallets using a resource_id
  google.protobuf.StringValue resource_id = 8 [(doordash.api.client.optional) = true];
}

// move container to truck response
message MoveContainerToTruckResponse {
  // container
  google.protobuf.StringValue truck_container_id = 1;
}

// list containers for facility request
message ListContainersForFacilityByDestinationRequest {
  reserved 1; // changed/removed facility id field
  // deprecated
  reserved "facility_id";
  // facility code
  google.protobuf.StringValue facility_code = 5;
  // scheduled stat interval
  TimeInterval scheduled_departure_interval = 2;
  // container type
  ContainerType container_type = 3;
  // destination for the container
  google.protobuf.StringValue destination_facility_code = 4;
}

// list containers for facility response
message ListContainersForFacilityByDestinationResponse {
  // containers stat
  repeated ContainerStats container_stats = 1;
}

// container stat
message ContainerStats {
  reserved 16; // last_docked_at_id
  // deprecated
  reserved "last_docked_at_id";
  reserved 17; // last_docked_at_name
  // deprecated
  reserved "last_docked_at_name";
  // deprecated
  reserved 19;
  reserved "eligible_child_container_count";
  // pallet id or truck id
  google.protobuf.StringValue container_id = 1;
  // container status
  ContainerStatus status = 2;
  // truck id assigned to pallet
  google.protobuf.StringValue parent_container_id = 3;
  // final destination of container
  google.protobuf.StringValue destination_location = 4;
  // Stowed child container count (pallets in truck, parcels in pallet, etc)
  google.protobuf.Int64Value stowed_child_container_count = 5;
  // scheduled departure for truck or pallet
  google.protobuf.Timestamp scheduled_departure_time = 6;
  // total weight of pallet or weight of pallets on truck
  google.protobuf.FloatValue total_weight_in_lbs = 7;
  // type of container
  ContainerType container_type = 8;
  // last scanned container location
  google.protobuf.StringValue last_scanned_location = 9;
  // container origin location
  google.protobuf.StringValue origin_location = 10;
  // child container stats
  ChildContainerStats child_container_stats = 11;
  // list of ordered route facility codes for the container
  // this is relevant only for truck containers today.
  repeated google.protobuf.StringValue route_facility_codes = 12;
  // actual departure time
  google.protobuf.Timestamp actual_departure_time = 13;
  // last updated by user
  UserInfo last_updated_by = 14;
  // last loaded by
  UserInfo last_loaded_by = 15;
  // last dock door number it was docked at
  int32 last_dock_door_number = 18;
  // eligible child container count to load
  google.protobuf.Int64Value eligible_child_containers_to_load_count = 20;
}

// child container stats
message ChildContainerStats {
  // Stowed child container count (ex: pallets for truck, parcels for pallet, etc)
  google.protobuf.Int64Value stowed_child_container_count = 1;
  // total num of parcels on the container (for trucks this is going to be the total num of parcels on all pallets)
  google.protobuf.Int64Value loaded_parcels_count = 2;
}

// get container details request
message GetContainerDetailsRequest {
  // container id
  google.protobuf.StringValue container_id = 1;
}

// container details
message ContainerDetails {
  // container id
  google.protobuf.StringValue container_id = 1;
  // parcel details for the container
  repeated ParcelDetails parcel_details = 2;
  // name of the asx loaded the pallet
  google.protobuf.StringValue loaded_by = 3;
  // last scanned facility
  google.protobuf.StringValue last_scanned_facility = 4;
  // container loaded time
  google.protobuf.Timestamp container_loaded_time = 5;
  // container status
  ContainerStatus container_status = 6;
  // container origin location
  google.protobuf.StringValue origin_location = 7;
  // container destination location
  google.protobuf.StringValue destination_location = 8;
  // container created at
  google.protobuf.Timestamp created_at = 9;
  // scheduled departure time
  google.protobuf.Timestamp scheduled_departure_time = 10;
}

// get container details response
message GetContainerDetailsResponse {
  // container details
  ContainerDetails container_details = 1;
}

// list containers for facility request
message ListContainersForFacilityByOriginRequest {
  // facility code
  google.protobuf.StringValue origin_facility_code = 1;
  // scheduled departure interval
  TimeInterval scheduled_departure_interval = 2;
  // container type
  ContainerType container_type = 3;
}

// list containers for facility response
message ListContainersForFacilityByOriginResponse {
  // containers stat
  repeated ContainerStats container_stats = 1;
}

// batch update container status request
message BatchUpdateContainerStatusRequest {
  // list of update container status requests
  repeated UpdateContainerStatusRequest update_container_status_requests = 1;
  // container type
  ContainerType container_type = 2;
}

// update container status request
message UpdateContainerStatusRequest {
  // container id
  google.protobuf.StringValue container_id = 1;
  // container status
  ContainerStatus status = 2;
  // reason code for status update
  ContainerStatusUpdateReasonCode container_status_update_reason_code = 3 [(doordash.api.client.optional) = true];
  // facility-code
  google.protobuf.StringValue facility_code = 4;
}

// batch update container status response
// response will be empty, in future we might want to return a list of succeeded and failed updates
message BatchUpdateContainerStatusResponse {}

// container status update reason code
enum ContainerStatusUpdateReasonCode {
  // unspecified container status reason code
  CONTAINER_STATUS_UPDATE_REASON_CODE_UNSPECIFIED = 0;
  // delayed because of weather
  CONTAINER_STATUS_UPDATE_REASON_CODE_WEATHER = 1;
  // truck out of capacity
  CONTAINER_STATUS_UPDATE_REASON_CODE_TRUCK_OUT_OF_CAPACITY = 2;
  // facility out of capacity
  CONTAINER_STATUS_UPDATE_REASON_CODE_DESTINATION_OUT_OF_CAPACITY = 3;
  // missing container
  CONTAINER_STATUS_UPDATE_REASON_CODE_MISSING = 4;
  // equipment malfunction
  CONTAINER_STATUS_UPDATE_REASON_CODE_EQUIPMENT_MALFUNCTION = 5;
}

// batch reschedule container request
message BatchRescheduleContainerRequest {
  // list of reschedule requests
  repeated RescheduleContainerRequest reschedule_container_requests = 1;
  // facility code
  google.protobuf.StringValue facility_code = 2;
}

// reschedule container request
message RescheduleContainerRequest {
  // container id
  google.protobuf.StringValue container_id = 1;
  // scheduled departure time
  google.protobuf.Timestamp scheduled_departure_time = 2;
  // reschedule reason
  ContainerStatusUpdateReasonCode container_status_update_reason_code = 3;
}

// batch reschedule container response
message BatchRescheduleContainerResponse {}

// unload container request
// ex: remove pallet from a container
message UnloadContainerRequest {
  // facility code
  google.protobuf.StringValue facility_code = 1;
  // container id
  google.protobuf.StringValue container_id = 2;
}

// unload container response
message UnloadContainerResponse {}

// user info details
message UserInfo {
  // first name
  google.protobuf.StringValue first_name = 1;
  // last name
  google.protobuf.StringValue last_name = 2;
}

// validation error codes for move container to truck endpoint
enum MoveContainerToTruckValidationErrorCodes {
  // UNSPECIFIED
  MOVE_CONTAINER_TO_TRUCK_VALIDATION_ERROR_CODES_UNSPECIFIED = 0;
  // error when pallet is scanned to a stale truck
  // buf:lint:ignore ENUM_VALUE_PREFIX
  STALE_TRUCK = 1;
  // error when pallet is scanned to a departed truck
  // buf:lint:ignore ENUM_VALUE_PREFIX
  TRUCK_DEPARTED_FOR_CURRENT_DAY_OUTBOUND = 2;
  // error when no active truck is assigned to the dock door
  // buf:lint:ignore ENUM_VALUE_PREFIX
  NO_ACTIVE_TRUCK = 3;
  // error when pallet is not loaded to truck and being used to load another pallet
  // buf:lint:ignore ENUM_VALUE_PREFIX
  MISSING_TRUCK_FOR_PALLET = 4;
}

// relocate parcels from one pallet to another request
message ConsolidateContainersRequest {
  // facility code
  google.protobuf.StringValue facility_code = 1;
  // source pallet id
  google.protobuf.StringValue source_container_id = 2;
  // destination pallet id
  google.protobuf.StringValue destination_container_id = 3;
}

// relocate parcels from one pallet to another response
message ConsolidateContainersResponse {
  // relocated parcels count
  int64 parcel_count = 1;
  // destination pallet id
  google.protobuf.StringValue destination_container_id = 2;
}

// list eligible containers for truck request
message ListEligibleContainersToLoadForTruckRequest {
  // facility id
  string facility_code = 1;
  // truck id
  google.protobuf.StringValue truck_id = 2;
}

// list eligible containers for truck response
// this includes all containers that are intended to be going to destinations served by truck
message ListEligibleContainersToLoadForTruckResponse {
  // NOTE: This is a light weight container response
  repeated Container container = 1;
}
