syntax = "proto3";

package parcel_service.v1;

import "doordash.api/annotations.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";

option go_package = "drive_parcel_service";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.parcel";

// service for all automation related APIs
service ParcelAutomationService {
  option (doordash.api.service) = {
    name: "parcel-automation"
    url: "parcel-service-web.service.prod.ddsd"
    port: 50051
    api_key_name: "API_KEY_FOR_PARCEL_SERVICE"
    owner: {
      id: "drive-parcels"
      name: "parcel"
      slack_channel: "#drive-parcels-alerts"
      email_alias: "drive-eng-parcel-plus@doordash.com"
    }
    name_spaces: ["parcel"]
    target_products: [INTERNAL]
  };

  // Automation API for scan parcels
  rpc ScanParcelAutomation(ScanParcelAutomationRequest) returns (ScanParcelAutomationResponse) {
    option (google.api.http) = {
      post: "/parcel/v1/parcel-automation/scan-parcel"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [CLIENT_TOKEN]
      slo_config: {
        critical_alerts_enabled: true
        critical_5m_burn_threshold: 3000
        critical_5m_burn_sustain_seconds: 300
        p99_latency: 3
      }
    };
  }

  // Automation API for sort confirmation
  rpc SortConfirmation(SortConfirmationRequest) returns (SortConfirmationResponse) {
    option (google.api.http) = {
      post: "/parcel/v1/parcel-automation/sort-confirmation"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [CLIENT_TOKEN]
      slo_config: {
        critical_alerts_enabled: true
        critical_5m_burn_threshold: 3000
        critical_5m_burn_sustain_seconds: 300
        p99_latency: 3
      }
    };
  }

  // Automation API to verify container destination
  rpc VerifyContainerDestination(VerifyContainerDestinationRequest) returns (VerifyContainerDestinationResponse) {
    option (google.api.http) = {
      post: "/parcel/v1/parcel-automation/verify-container-destination"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [CLIENT_TOKEN]
      slo_config: {
        critical_alerts_enabled: true
        critical_5m_burn_threshold: 3000
        critical_5m_burn_sustain_seconds: 300
        p99_latency: 3
      }
    };
  }

  // Automation API to move parcels to container in bulk
  rpc MoveParcelsToContainerInBulk(MoveParcelsToContainerInBulkRequest) returns (MoveParcelsToContainerInBulkResponse) {
    option (google.api.http) = {
      post: "/parcel/v1/parcel-automation/move-parcels-to-container-in-bulk"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [CLIENT_TOKEN]
      slo_config: {
        critical_alerts_enabled: true
        critical_5m_burn_threshold: 3000
        critical_5m_burn_sustain_seconds: 300
        p99_latency: 3
      }
    };
  }
}

// Request for ScanParcelAutomation API
message ScanParcelAutomationRequest {
  // facility id
  string facilityId = 1;
  // barcode
  string packageId = 2;
  // Date and time of the message: yyyy-MM-dd'T'HH:mm:ss.SSS'Z
  google.protobuf.Timestamp messageDateTime = 3;
  // Facility for hub_spoke to avoid query facility_code by facility_id
  string facilityCode = 4;
  // length of the package in mm
  string packageLength = 5;
  // width of the package in mm
  string packageWidth = 6;
  // height of the package in mm
  string packageHeight = 7;
  // weight of the package in grams
  string packageWeight = 8;
}

// Response for ScanParcelAutomation API
message ScanParcelAutomationResponse {
  // Date and time of the message: yyyy-MM-dd'T'HH:mm:ss.SSS'Z
  google.protobuf.Timestamp messageDateTime = 1;
  // barcode of the package / parcel
  string packageId = 2;
  // Destination in which the package needs to be dropped. This consists of the following values
  // 1. Facility code (for Mid-mile)
  // 2. Cart number (for Last-mile)
  // 3. missort, not_found, incorrect_facility (For hospital lane)
  string destinationLocationId = 3;
}

// Request for SortConfirmation API
message SortConfirmationRequest {
  // Date and time of the message: yyyy-MM-dd'T'HH:mm:ss.SSS'Z
  google.protobuf.Timestamp messageDateTime = 1;
  // barcode of the package
  string packageId = 2;
  // Destination in which the package is dropped. This consists of the following values
  // 1. Facility code (for Mid-mile)
  // 2. Cart number (for Last-mile)
  // 3. missort, not_found, incorrect_facility (For hospital lane)
  string destinationLocationId = 3;
  // Container id to confirm the package is dropped into a container/pallet for mid-mile
  string containerId = 4;
  // facility code of the request client for tracking
  string facilityCode = 5;
}

// Response for SortConfirmation API
message SortConfirmationResponse {}

// Request for VerifyContainerDestination API
message VerifyContainerDestinationRequest {
  // Facility code of the request client for tracking
  string facilityCode = 1;
  // Container id to verify
  string containerId = 2;
  // Destination facility code to verify
  string destinationFacilityCode = 3;
}

// Response for VerifyContainerDestination API
message VerifyContainerDestinationResponse {
  // Verification result - true means correct match, false means incorrect match
  bool result = 1;
}

// Request for MoveParcelsToContainerInBulk API
message MoveParcelsToContainerInBulkRequest {
  // Facility code of the request client for tracking
  string facilityCode = 1;
  // List of parcel barcodes/ids
  repeated string parcelBarcodes = 2;
  // Container id
  string containerId = 3;
}

// Response for MoveParcelsToContainerInBulk API
message MoveParcelsToContainerInBulkResponse {
  // reserved
  reserved 1;
  // reserved
  reserved "incorrectBarcodes";

  // A list of barcodes that moved successfully
  repeated string succeededParcelBarcodes = 2;
  // A list of barcodes that didn't get moved
  repeated string failedParcelBarcodes = 3;
}
