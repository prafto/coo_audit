syntax = "proto3";

package parcel_service.v1;

import "common/service_client_config.proto";
import "doordash.api/annotations.proto";
import "doordash.api/client.proto";
import "doordash.api/field_validate.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "parcel_protobuf/common.proto";

option go_package = "drive_parcel_service";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.parcel";

// Service with defined endpoints for Parcel Sort App
service ParcelSortAppService {
  option (doordash.api.service) = {
    name: "parcel-sort-app"
    url: "parcel-service-web.service.prod.ddsd"
    port: 50051
    api_key_name: "API_KEY_FOR_PARCEL_SERVICE"
    owner: {
      id: "drive-parcels"
      name: "parcel"
      slack_channel: "#drive-parcels-alerts"
      email_alias: "drive-eng-parcel-plus@doordash.com"
    }
    name_spaces: ["parcel"]
    vertical_domains: [CX]
    target_products: [CX]
  };
  option (doordash.api.service_forward_headers) = {
    forward: [
      {field: "X-Application-Name"}]
  };

  // Get parcels for a facility
  rpc GetParcelsForFacility(GetParcelsForFacilityRequest) returns (GetParcelsForFacilityResponse) {
    option (google.api.http) = {
      post: "/parcel/v1/parcel_sort_app/get-parcels-for-facility"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: PROD
      authorization: [CX_USER]
      // no role_based_authorization
      role_based_authorization: {
        mode: ANY,
        roles: ["perm_parcel_operator"]
      }
      slo_config: {
        critical_alerts_enabled: true
        critical_5m_burn_threshold: 3000
        critical_5m_burn_sustain_seconds: 300
        p99_latency: 3
      }
    };
  }

  // Get various parcel stats for a facility
  rpc GetParcelStatsForFacility(GetParcelStatsForFacilityRequest) returns (GetParcelStatsForFacilityResponse) {
    option (google.api.http) = {
      post: "/parcel/v1/parcel_sort_app/get-parcel-stats-for-facility"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: PROD
      authorization: [CX_USER]
      // no role_based_authorization
      role_based_authorization: {
        mode: ANY,
        roles: ["perm_parcel_operator"]
      }
      slo_config: {
        critical_alerts_enabled: true
        critical_5m_burn_threshold: 3000
        critical_5m_burn_sustain_seconds: 300
        p99_latency: 3
      }
    };
  }

  // Get parcel batches for a facility by batch_status_type or search term
  rpc GetParcelBatchesForFacility(GetParcelBatchesForFacilityRequest) returns (GetParcelBatchesForFacilityResponse) {
    option (google.api.http) = {
      post: "/parcel/v1/parcel_sort_app/get-parcel-batches-for-facility"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: PROD
      authorization: [CX_USER]
      // no role_based_authorization
      slo_config: {
        critical_alerts_enabled: true
        critical_5m_burn_threshold: 3000
        critical_5m_burn_sustain_seconds: 300
        p99_latency: 3
      }
    };
  }

  // Get various counts of parcel batches for a facility
  rpc GetParcelBatchStatusCountsForFacility(GetParcelBatchStatusCountsForFacilityRequest) returns (GetParcelBatchStatusCountsForFacilityResponse) {
    option (google.api.http) = {
      post: "/parcel/v1/parcel_sort_app/get-parcel-batch-status-counts-for-facility"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: PROD
      authorization: [CX_USER]
      // no role_based_authorization
      role_based_authorization: {
        mode: ANY,
        roles: ["perm_parcel_operator"]
      }
      slo_config: {
        critical_alerts_enabled: true
        critical_5m_burn_threshold: 3000
        critical_5m_burn_sustain_seconds: 300
        p99_latency: 3
      }
    };
  }

  // Scan parcels at a facility
  rpc ScanParcel(ScanParcelRequest) returns (ScanParcelResponse) {
    option (google.api.http) = {
      post: "/parcel/v1/parcel_sort_app/scan-parcel"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: PROD
      authorization: [CX_USER]
      // no role_based_authorization
      slo_config: {
        critical_alerts_enabled: true
        critical_5m_burn_threshold: 3000
        critical_5m_burn_sustain_seconds: 300
        p99_latency: 3
      }
    };
  }

  // Complete quality check by reschedule all missorted/missing parcels
  rpc CompleteQualityCheck(CompleteQualityCheckRequest) returns (CompleteQualityCheckResponse) {
    option (google.api.http) = {
      post: "/parcel/v1/parcel_sort_app/complete-quality-check"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: PROD
      authorization: [CX_USER]
      // no role_based_authorization
      role_based_authorization: {
        mode: ANY,
        roles: ["perm_parcel_operator"]
      }
      slo_config: {
        critical_alerts_enabled: true
        critical_5m_burn_threshold: 3000
        critical_5m_burn_sustain_seconds: 300
        p99_latency: 3
      }
    };
  }

  // Request redelivery of a parcel
  rpc RequestParcelRedelivery(RequestParcelRedeliveryRequest) returns (RequestParcelRedeliveryResponse) {
    option (google.api.http) = {
      post: "/parcel/v1/parcel_sort_app/request-parcel-redelivery"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: PROD
      authorization: [CX_USER]
      // no role_based_authorization:
      slo_config: {
        critical_alerts_enabled: true
        critical_5m_burn_threshold: 3000
        critical_5m_burn_sustain_seconds: 300
        p99_latency: 3
      }
    };
  }

  // scan parcel in a QA process
  rpc ScanParcelForQa(ScanParcelForQaRequest) returns (ScanParcelForQaResponse) {
    option (google.api.http) = {
      post: "/parcel/v1/parcel_sort_app/scan-parcel-for-qa"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: PROD
      authorization: [CX_USER]
      // no role_based_authorization
      slo_config: {
        critical_alerts_enabled: true
        critical_5m_burn_threshold: 3000
        critical_5m_burn_sustain_seconds: 300
        p99_latency: 3
      }
    };
  }

  // complete the QA process for a batch
  rpc CompleteBatchQa(CompleteBatchQaRequest) returns (CompleteBatchQaResponse) {
    option (google.api.http) = {
      post: "/parcel/v1/parcel_sort_app/complete-batch-qa"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: PROD
      authorization: [CX_USER]
      // no role_based_authorization
      role_based_authorization: {
        mode: ANY,
        roles: ["perm_parcel_operator"]
      }
      slo_config: {
        critical_alerts_enabled: true
        critical_5m_burn_threshold: 3000
        critical_5m_burn_sustain_seconds: 300
        p99_latency: 3
      }
    };
  }

  // mark one parcel as lost for bin batch QA
  rpc MarkParcelMissingForBatchQa(MarkParcelMissingForBatchQaRequest) returns (MarkParcelMissingForBatchQaResponse) {
    option (google.api.http) = {
      post: "/parcel/v1/parcel_sort_app/mark-parcel-lost-batch-qa"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: PROD
      authorization: [CX_USER]
      // no role_based_authorization
      slo_config: {
        critical_alerts_enabled: true
        critical_5m_burn_threshold: 3000
        critical_5m_burn_sustain_seconds: 300
        p99_latency: 3
      }
    };
  }

  // restore the missing parcels in the batch QA process
  rpc RestoreBatchMissingParcel(RestoreBatchMissingParcelRequest) returns (RestoreBatchMissingParcelResponse) {
    option (google.api.http) = {
      post: "/parcel/v1/parcel_sort_app/restore-batch-missing-parcel"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: PROD
      authorization: [CX_USER]
      // no role_based_authorization
      role_based_authorization: {
        mode: ANY,
        roles: ["perm_parcel_operator"]
      }
      slo_config: {
        critical_alerts_enabled: true
        critical_5m_burn_threshold: 3000
        critical_5m_burn_sustain_seconds: 300
        p99_latency: 3
      }
    };
  }

  // get batch bin qa details for facility
  rpc GetBatchBinQaDetailsForFacility(GetBatchBinQaDetailsForFacilityRequest) returns (GetBatchBinQaDetailsForFacilityResponse) {
    option (google.api.http) = {
      post: "/parcel/v1/parcel_sort_app/get-batch-bin-qa-details-for-facility"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: PROD
      authorization: [CX_USER]
      // no role_based_authorization
      slo_config: {
        critical_alerts_enabled: true
        critical_5m_burn_threshold: 3000
        critical_5m_burn_sustain_seconds: 300
        p99_latency: 3
      }
    };
  }

  // get batch details for facility
  rpc GetBatchDetailsForFacility(GetBatchDetailsForFacilityRequest) returns (GetBatchDetailsForFacilityResponse) {
    option (google.api.http) = {
      post: "/parcel/v1/parcel_sort_app/get-batch-details-for-facility"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: PROD
      authorization: [CX_USER]
      // no role_based_authorization
      role_based_authorization: {
        mode: ANY,
        roles: ["perm_parcel_operator"]
      }
      slo_config: {
        critical_alerts_enabled: true
        critical_5m_burn_threshold: 3000
        critical_5m_burn_sustain_seconds: 300
        p99_latency: 3
      }
    };
  }

  // reset the parcel qa status and other data for a batch
  rpc ResetQaStatusForBatch(ResetQaStatusForBatchRequest) returns (ResetQaStatusForBatchResponse) {
    option (google.api.http) = {
      post: "/parcel/v1/parcel_sort_app/reset-qa-status-for-batch"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: PROD
      authorization: [CX_USER]
      // no role_based_authorization
      role_based_authorization: {
        mode: ANY,
        roles: ["perm_parcel_operator"]
      }
      slo_config: {
        critical_alerts_enabled: true
        critical_5m_burn_threshold: 3000
        critical_5m_burn_sustain_seconds: 300
        p99_latency: 3
      }
    };
  }

  // Set parcel to returned to mx state
  rpc SetParcelReturnedToMx(SetParcelReturnedToMxRequest) returns (SetParcelReturnedToMxResponse) {
    option (google.api.http) = {
      post: "/parcel/v1/parcel_sort_app/set-parcel-returned-to-mx"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: PROD
      authorization: [CX_USER]
      // no role_based_authorization
      slo_config: {
        critical_alerts_enabled: true
        critical_5m_burn_threshold: 3000
        critical_5m_burn_sustain_seconds: 300
        p99_latency: 3
      }
    };
  }

  // Unassign runner and reschedule for a single parcel
  rpc UnassignAndRescheduleSingleParcel(UnassignAndRescheduleSingleParcelRequest) returns (UnassignAndRescheduleSingleParcelResponse) {
    option (google.api.http) = {
      post: "/parcel/v1/parcel_sort_app/unassign-parcel"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: PROD
      authorization: [CX_USER]
      // no role_based_authorization
      slo_config: {
        critical_alerts_enabled: true
        critical_5m_burn_threshold: 3000
        critical_5m_burn_sustain_seconds: 300
        p99_latency: 3
      }
    };
  }

  // Unassigns all parcels assigned to a dasher shift (could be single or multiple batches)
  rpc UnassignParcelsFromShift(UnassignParcelsFromShiftRequest) returns (UnassignParcelsFromShiftResponse) {
    option (google.api.http) = {
      post: "/parcel/v1/parcel_sort_app/unassign-parcels-from-shift"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: PROD
      authorization: [CX_USER]
      // no role_based_authorization
      slo_config: {
        critical_alerts_enabled: true
        critical_5m_burn_threshold: 3000
        critical_5m_burn_sustain_seconds: 300
        p99_latency: 3
      }
    };
  }

  // Get sortation sets for the given facility and time range
  rpc GetSortationSetsForFacility(GetSortationSetsForFacilityRequest) returns (GetSortationSetsForFacilityResponse) {
    option (google.api.http) = {
      post: "/parcel/v1/parcel_sort_app/get-sortation-sets-for-facility"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: PROD
      authorization: [CX_USER]
      // no role_based_authorization
      role_based_authorization: {
        mode: ANY,
        roles: ["perm_parcel_operator"]
      }
      slo_config: {
        critical_alerts_enabled: true
        critical_5m_burn_threshold: 3000
        critical_5m_burn_sustain_seconds: 300
        p99_latency: 3
      }
    };
  }

  // Update sets dispatch time from the sort app
  rpc UpdateSetsDispatchTime(UpdateSetsDispatchTimeRequest) returns (UpdateSetsDispatchTimeResponse) {
    option (google.api.http) = {
      post: "/parcel/v1/parcel_sort_app/update-sets-dispatch-time"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: PROD
      authorization: [CX_USER]
      // no role_based_authorization
      role_based_authorization: {
        mode: ANY,
        roles: ["perm_parcel_operator"]
      }
      slo_config: {
        critical_alerts_enabled: true
        critical_5m_burn_threshold: 3000
        critical_5m_burn_sustain_seconds: 300
        p99_latency: 3
      }
    };
  }

  // Update automatic dispatch toggle status
  rpc UpdateAutomaticDispatchStatus(UpdateAutomaticDispatchStatusRequest) returns (UpdateAutomaticDispatchStatusResponse) {
    option (google.api.http) = {
      post: "/parcel/v1/parcel_sort_app/update-automatic-dispatch-status"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: PROD
      authorization: [CX_USER]
      // no role_based_authorization
      role_based_authorization: {
        mode: ANY,
        roles: ["perm_parcel_operator"]
      }
      slo_config: {
        critical_alerts_enabled: true
        critical_5m_burn_threshold: 3000
        critical_5m_burn_sustain_seconds: 300
        p99_latency: 3
      }
    };
  }

  // Get dispatch summary stats
  rpc GetDispatchSummaryStats(GetDispatchSummaryStatsRequest) returns (GetDispatchSummaryStatsResponse) {
    option (google.api.http) = {
      post: "/parcel/v1/parcel_sort_app/get-dispatch-summary-stats"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: PROD
      authorization: [CX_USER]
      // no role_based_authorization
      role_based_authorization: {
        mode: ANY,
        roles: ["perm_parcel_operator"]
      }
      slo_config: {
        critical_alerts_enabled: true
        critical_5m_burn_threshold: 3000
        critical_5m_burn_sustain_seconds: 300
        p99_latency: 3
      }
    };
  }

  // Request an adhoc parcel planner run for the next 10 minutes
  rpc RequestParcelPlannerRun(RequestParcelPlannerRunRequest) returns (RequestParcelPlannerRunResponse) {
    option (google.api.http) = {
      post: "/parcel/v1/parcel_sort_app/request-parcel-planner-run"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: PROD
      authorization: [CX_USER]
      // no role_based_authorization
      role_based_authorization: {
        mode: ANY,
        roles: ["perm_parcel_operator"]
      }
      slo_config: {
        critical_alerts_enabled: true
        critical_5m_burn_threshold: 5000
        critical_5m_burn_sustain_seconds: 300
        p99_latency: 3
      }
    };
    // It needs to retrieve all parcels for a facility, and needs a large time out (UG default is 5 secs)
    option (service_client.client_method_config).response_attempt_timeout_millis = 10000;
  }

  // Get active parcel planner run for a facility with run logs on deepred end
  rpc GetActiveParcelPlannerRunByFacilityIdWithEvents(GetActiveParcelPlannerRunByFacilityIdWithEventsRequest) returns (GetActiveParcelPlannerRunByFacilityIdWithEventsResponse) {
    option (google.api.http) = {
      post: "/parcel/v1/parcel_sort_app/get-active-parcel-planner-run-by-facility-id-with-events"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: PROD
      authorization: [CX_USER]
      // no role_based_authorization
      role_based_authorization: {
        mode: ANY,
        roles: ["perm_parcel_operator"]
      }
      slo_config: {
        critical_alerts_enabled: true
        critical_5m_burn_threshold: 3000
        critical_5m_burn_sustain_seconds: 300
        p99_latency: 3
      }
    };
  }

  // Get parcels by forceBatchId
  rpc GetParcelsByForceBatchId(GetParcelsByForceBatchIdRequest) returns (GetParcelsByForceBatchIdResponse) {
    option (google.api.http) = {
      post: "/parcel/v1/parcel_sort_app/get-parcels-by-force-batch-id"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: PROD
      authorization: [CX_USER]
      // no role_based_authorization
      slo_config: {
        critical_alerts_enabled: true
        critical_5m_burn_threshold: 3000
        critical_5m_burn_sustain_seconds: 300
        p99_latency: 3
      }
    };
  }

  // Request reschedule of all missing parcels for a Mx in given time range at a facility
  rpc RescheduleMissingInSortSetFromMx(RescheduleMissingInSortSetFromMxRequest) returns (RescheduleMissingInSortSetFromMxResponse) {
    option (google.api.http) = {
      post: "/parcel/v1/parcel_sort_app/reschedule-missing-in-sort-set-from-mx"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: PROD
      authorization: [CX_USER]
      // no role_based_authorization
      role_based_authorization: {
        mode: ANY,
        roles: ["perm_parcel_operator"]
      }
      slo_config: {
        critical_alerts_enabled: true
        critical_5m_burn_threshold: 3000
        critical_5m_burn_sustain_seconds: 300
        p99_latency: 3
      }
    };
  }

  // Get inbound stats for a facility
  rpc GetInboundStats(GetInboundStatsRequest) returns (GetInboundStatsResponse) {
    option (google.api.http) = {
      post: "/parcel/v1/parcel_sort_app/get-inbound-stats"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: PROD
      authorization: [CX_USER]
      // no role_based_authorization
      role_based_authorization: {
        mode: ANY,
        roles: ["perm_parcel_operator"]
      }
      slo_config: {
        critical_alerts_enabled: true
        critical_5m_burn_threshold: 3000
        critical_5m_burn_sustain_seconds: 300
        p99_latency: 10
      }
    };
    // Bumping timeout to 30 seconds
    option (service_client.client_method_config).response_attempt_timeout_millis = 30000;
  }

  // Scan runner checkin code
  rpc ScanRunnerCheckinByShiftId(ScanRunnerCheckinByShiftIdRequest) returns (ScanRunnerCheckinByShiftIdResponse) {
    option (google.api.http) = {
      post: "/parcel/v1/parcel_sort_app/scan-runner-checkin-by-shift-id"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: PROD
      authorization: [CX_USER]
      // no role_based_authorization
      slo_config: {
        critical_alerts_enabled: true
        critical_5m_burn_threshold: 3000
        critical_5m_burn_sustain_seconds: 300
        p99_latency: 3
      }
    };
  }

  // Get parcel config for entity
  rpc GetParcelConfigForEntity(GetParcelConfigForEntityRequest) returns (GetParcelConfigForEntityResponse) {
    option (google.api.http) = {
      post: "/parcel/v1/parcel_sort_app/get-config-for-entity"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: PROD
      authorization: [CX_USER]
      // no role_based_authorization
      role_based_authorization: {
        mode: ANY,
        roles: ["perm_parcel_operator"]
      }
      slo_config: {
        critical_alerts_enabled: true
        critical_5m_burn_threshold: 3000
        critical_5m_burn_sustain_seconds: 300
        p99_latency: 3
      }
    };
  }

  // Get parcel config(s) for facility
  rpc GetFacilityConfigsByFacilityId(GetFacilityConfigsByFacilityIdRequest) returns (GetFacilityConfigsByFacilityIdResponse) {
    option (google.api.http) = {
      post: "/parcel/v1/parcel_sort_app/get-facility-configs-by-facility-id"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: PROD
      authorization: [CX_USER]
      // no role_based_authorization
      role_based_authorization: {
        mode: ANY,
        roles: ["perm_parcel_operator"]
      }
      slo_config: {
        critical_alerts_enabled: true
        critical_5m_burn_threshold: 3000
        critical_5m_burn_sustain_seconds: 300
        p99_latency: 3
      }
    };
  }

  // Update parcel config for entity
  rpc UpdateParcelConfigForEntity(UpdateParcelConfigForEntityRequest) returns (UpdateParcelConfigForEntityResponse) {
    option (google.api.http) = {
      post: "/parcel/v1/parcel_sort_app/update-config-for-entity"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: PROD
      authorization: [CX_USER]
      // no role_based_authorization
      role_based_authorization: {
        mode: ANY,
        roles: ["perm_parcel_operator"]
      }
      slo_config: {
        critical_alerts_enabled: true
        critical_5m_burn_threshold: 3000
        critical_5m_burn_sustain_seconds: 300
        p99_latency: 3
      }
    };
  }

  // Update parcel config for facility
  //
  // This is identical to UpdateParcelConfigForEntity but only operates on facilities and permits site lead
  // access, unlike UpdateParcelConfigForEntity which only permits admin access.
  rpc UpdateParcelConfigForFacility(UpdateParcelConfigForFacilityRequest) returns (UpdateParcelConfigForFacilityResponse) {
    option (google.api.http) = {
      post: "/parcel/v1/parcel_sort_app/update-config-for-facility"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: PROD
      authorization: [CX_USER]
      // no role_based_authorization
      role_based_authorization: {
        mode: ANY,
        roles: ["perm_parcel_operator"]
      }
      slo_config: {
        critical_alerts_enabled: true
        critical_5m_burn_threshold: 3000
        critical_5m_burn_sustain_seconds: 300
        p99_latency: 3
      }
    };
  }

  // List all facilities
  rpc ListFacilities(ListFacilitiesRequest) returns (ListFacilitiesResponse) {
    option (google.api.http) = {
      post: "/parcel/v1/parcel_sort_app/list-facilities"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: PROD
      authorization: [CX_USER]
      // no role_based_authorization
      slo_config: {
        critical_alerts_enabled: true
        critical_5m_burn_threshold: 3000
        critical_5m_burn_sustain_seconds: 300
        p99_latency: 3
      }
    };
  }

  // Get parcel details
  rpc GetParcelDetails(GetParcelDetailsRequest) returns (GetParcelDetailsResponse) {
    option (google.api.http) = {
      post: "/parcel/v1/parcel_sort_app/get-parcel-details"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: PROD
      authorization: [CX_USER]
      // no role_based_authorization
      slo_config: {
        critical_alerts_enabled: true
        critical_5m_burn_threshold: 3000
        critical_5m_burn_sustain_seconds: 300
        p99_latency: 3
      }
    };
  }

  // Set Parcel As Disposed
  rpc SetParcelDisposed(SetParcelDisposedRequest) returns (SetParcelDisposedResponse) {
    option (google.api.http) = {
      post: "/parcel/v1/parcel_sort_app/set-parcel-disposed"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: PROD
      authorization: [CX_USER]
      // no role_based_authorization
      role_based_authorization: {
        mode: ANY,
        roles: ["perm_parcel_operator"]
      }
      slo_config: {
        critical_alerts_enabled: true
        critical_5m_burn_threshold: 3000
        critical_5m_burn_sustain_seconds: 300
        p99_latency: 3
      }
    };
  }

  // Set Parcel As Damaged
  rpc SetParcelDamaged(SetParcelDamagedRequest) returns (SetParcelDamagedResponse) {
    option (google.api.http) = {
      post: "/parcel/v1/parcel_sort_app/set-parcel-damaged"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: PROD
      authorization: [CX_USER]
      // no role_based_authorization
      role_based_authorization: {
        mode: ANY,
        roles: ["perm_parcel_operator"]
      }
      slo_config: {
        critical_alerts_enabled: true
        critical_5m_burn_threshold: 3000
        critical_5m_burn_sustain_seconds: 300
        p99_latency: 3
      }
    };
  }

  // Get Parcel user roles
  rpc GetUserRoles(GetUserRolesRequest) returns (GetUserRolesResponse) {
    option (google.api.http) = {
      post: "/parcel/v1/parcel_sort_app/get-user-roles"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [CX_USER]
      // no role_based_authorization
      role_based_authorization: {
        mode: ANY,
        roles: ["perm_parcel_operator"]
      }
      slo_config: {
        critical_alerts_enabled: true
        critical_5m_burn_threshold: 3000
        critical_5m_burn_sustain_seconds: 300
        p99_latency: 3
      }
    };
  }

  // Get required handback parcels by shiftId (list of parcels scanned by runner that need to be returned back to facility)
  rpc GetRequiredHandbackParcelsByShiftId(GetRequiredHandbackParcelsByShiftIdRequest) returns (GetRequiredHandbackParcelsByShiftIdResponse) {
    option (google.api.http) = {
      post: "/parcel/v1/parcel_sort_app/get-required-handback-parcels-by-shift-id"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [CX_USER]
      // no role_based_authorization
      slo_config: {
        critical_alerts_enabled: true
        critical_5m_burn_threshold: 3000
        critical_5m_burn_sustain_seconds: 300
        p99_latency: 3
      }
    };
  }

  // Edit any field of a parcel order (used for testing, not exposed to REST)
  rpc EditParcelFields(EditParcelFieldsRequest) returns (EditParcelFieldsResponse);

  // Map zipcode to currently active facility code
  rpc MapZipcodeToFacility(MapZipcodeToFacilityRequest) returns (MapZipcodeToFacilityResponse);

  // Upsert zipcode mapping
  rpc UpsertZipcodeMapping(UpsertZipcodeMappingRequest) returns (UpsertZipcodeMappingResponse);

  // Delete zipcode mapping
  rpc DeleteZipcodeMapping(DeleteZipcodeMappingRequest) returns (DeleteZipcodeMappingResponse);

  // Block zipcode
  rpc UpdateZipcodeBlockedStatus(UpdateZipcodeBlockedStatusRequest) returns (UpdateZipcodeBlockedStatusResponse);

  // Onboard Mx To Facility -- moved to parcel_onboarding_service.proto
  rpc OnboardMxToFacility(OnboardMxToFacilityRequest) returns (OnboardMxToFacilityResponse);
}

// GetActiveParcelPlannerRunByFacilityIdWithEventsRequest is the request to get active parcel planner run for a facility with run logs on deepred end
message GetActiveParcelPlannerRunByFacilityIdWithEventsRequest {
  // facility id
  int32 facility_id = 1;
}

// GetActiveParcelPlannerRunByFacilityIdWithEventsResponse returns a list of active parcel planner run requests
message GetActiveParcelPlannerRunByFacilityIdWithEventsResponse {
  // Active parcel planner run request, null if there's no active run
  ParcelPlannerRun parcel_planner_run = 1;
  // error message if there's any error
  google.protobuf.StringValue error_message = 2;
}

// RequestParcelPlannerRunRequest is the request to request an adhoc parcel planner run for the next few minutes
message RequestParcelPlannerRunRequest {
  // facility id
  int32 facility_id = 1;
  // start_time indicates the start time of parcel planner run, optional
  google.protobuf.Timestamp start_time = 2 [(doordash.api.client.nullable) = true];
  // end_time indicates the end time of parcel planner run, optional
  google.protobuf.Timestamp end_time = 3 [(doordash.api.client.nullable) = true];
  // run mode
  ParcelPlannerRunMode run_mode = 4;
  // start time range for parcels to include in parcel planner run
  google.protobuf.Timestamp parcel_range_start_time = 5 [(doordash.api.client.nullable) = true];
  // end time range for parcels to include in parcel planner run
  google.protobuf.Timestamp parcel_range_end_time = 6 [(doordash.api.client.nullable) = true];
}

// RequestParcelPlannerRunResponse is the response to request an adhoc parcel planner run for the next few minutes
message RequestParcelPlannerRunResponse {
  // parcel planner run id
  string id = 1;
  // facility id
  int32 facility_id = 2;
  // start_time indicates the start time of parcel planner run, optional
  google.protobuf.Timestamp start_time = 3;
  // end_time indicates the end time of parcel planner run, optional
  google.protobuf.Timestamp end_time = 4;
  // run mode
  ParcelPlannerRunMode run_mode = 5;
  // error message
  google.protobuf.StringValue error_message = 6;
}

// ParcelFulfillmentStatus
enum ParcelFulfillmentStatus {
  // The default status that gets applied if this is not set. This is not expected to be used.
  PARCEL_FULFILLMENT_STATUS_UNSPECIFIED = 0;
  // Indicates the parcel is ready for fulfillment (and can be placed on a shelf)
  PARCEL_FULFILLMENT_STATUS_READY = 1;
  // Indicates the parcel is not yet ready for fulfillment (and should be set aside for the next day)
  PARCEL_FULFILLMENT_STATUS_NOT_READY = 2;
  // Indicates the parcel has already been scanned in and should therefore be prepared for redelivery
  PARCEL_FULFILLMENT_STATUS_REDELIVERY_REQUIRED = 3;
  // Indicates the parcel is pending redelivery and does not need to retry redelivery again
  PARCEL_FULFILLMENT_STATUS_PENDING_REDELIVERY = 4;
  // Indicates the parcel is received at hub site for hub-spoke model
  PARCEL_FULFILLMENT_STATUS_HUB_RECEIVED_FOR_SPOKE = 5;
  // Indicates the parcel is received at an incorrect site
  PARCEL_FULFILLMENT_STATUS_INCORRECT_FACILITY = 6;
  // Indicates the parcel is returned to mx
  PARCEL_FULFILLMENT_STATUS_RETURNED_TO_MX = 7;
  // Indicates the parcel is to be unassigned
  PARCEL_FULFILLMENT_STATUS_RNX_UNASSIGN_NEEDED = 8;
  // Indicates that a delivery was initiated on the backend already
  PARCEL_FULFILLMENT_STATUS_REDELIVERY_INITIATED = 9;
  // Indicates that there is no available bin in the system
  PARCEL_FULFILLMENT_STATUS_NO_AVAILABLE_BIN = 10;
  // Indicates that parcel should be returned to hub
  PARCEL_FULFILLMENT_STATUS_RETURN_TO_HUB = 11;
  // Indicates that is returned at incorrect facility
  PARCEL_FULFILLMENT_STATUS_INCORRECT_RETURN = 12;
  // Indicates that the parcel has already been disposed
  PARCEL_FULFILLMENT_STATUS_DISPOSED = 13;
}

// Request for getting sortation sets for the given facility and time range
message GetSortationSetsForFacilityRequest {
  // facility id
  int32 facility_id = 1;
  // Look for distinct quoted_pickup_time between time range - [start_time and end_time]
  google.protobuf.Timestamp start_time = 2;
  // end_time indicates the end of this time range; included in search range
  google.protobuf.Timestamp end_time = 3;
}

// Response containing a list of sortation set time intervals
message GetSortationSetsForFacilityResponse {
  // List of details containing time intervals and dispatch times
  repeated SortationSetDetail sortation_set_details = 1;
}

// Sorttation set type
enum SortationSetType {
  // unspecified, same as default
  SORTATION_SET_TYPE_UNSPECIFIED = 0;
  // default set for dispatch , can have multiple default set
  SORTATION_SET_TYPE_DEFAULT = 1;
  // set for rollover, usually have a different dispatch time, earlier than default set, for FIFO
  SORTATION_SET_TYPE_ROLLOVER = 2;
}

// Information about sortation set time range and dispatch time
message SortationSetDetail {
  // Start and end of the sortation set time range
  TimeInterval sortation_set_interval = 1;
  // Dispatch time / Quoted Pickup time of the sortation set
  google.protobuf.Timestamp dispatch_time = 2;
  // id
  google.protobuf.StringValue id = 3;
  // Sortation set type
  SortationSetType type = 4;
}

// Request for ScanParcelForQa API
message ScanParcelForQaRequest {
  // facility id
  int32 facility_id = 1;
  // barcode
  string barcode = 2;
  // force batch id for QA
  string force_batch_id = 3;
  // start_time indicates the start time of this sortation window
  google.protobuf.Timestamp start_time = 4;
  // end_time indicates the start time of this sortation window
  google.protobuf.Timestamp end_time = 5;
}

// Response for ScanParcelForQa API
message ScanParcelForQaResponse {
  // Parcel's Qa status
  ParcelQaStatus parcel_qa_status = 1;
  // The bin name of parcels original batch
  google.protobuf.StringValue bin_name = 2;
  // Parcel object
  Parcel parcel = 3;
}

// Request for ScanParcel API
message ScanParcelRequest {
  // facility id
  int32 facility_id = 1;
  // barcode
  string barcode = 2;
  // Flag to indicate if hub_spoke is enabled
  google.protobuf.BoolValue is_hub_spoke_enabled = 3;
  // Facility for hub_spoke to avoid query facility_code by facility_id
  google.protobuf.StringValue facility_code = 4;
}

// Response for ScanParcel API
message ScanParcelResponse {
  // indicates whether or not the parcel delivery can be fulfilled by a runner (returned to the frontend so that it can render a different UI depending on the result)
  ParcelFulfillmentStatus fulfillment_status = 1;
  // always set i.e. if the parcel is not found, we'll throw NOT_FOUND and we won't use this contract, so this is effectively always set
  string customer_name = 2;
  // parcel id in uuid format, always set for the same reason as customer_name
  string parcel_id = 3;
  // the name of the bin where the store associate is to place the parcel, only set if fulfillment_status is READY
  google.protobuf.StringValue bin_name = 4;
  // optionally return all the parcel data if necessary, e.g. webapp need parcel data for returned parcels
  Parcel parcel = 5;
  // optionally return facility_code if the found parcel doesn't match current facility
  google.protobuf.StringValue assigned_facility_code = 6;
  // Parcel drive order id
  int64 drive_order_id = 7;
  // Parcel stowed/QAed or not
  bool is_parcel_stowed = 8;
  // parent container id
  google.protobuf.StringValue parent_container_id = 9;
  // It means the hub code of the current scan site, if current scan site is a spoke.
  google.protobuf.StringValue hub_facility_code = 10;
  // indicates if a parcel could be perishable. Not that it has already expired
  google.protobuf.BoolValue is_perishable = 11;
}

// Request for CompleteBatchQa API
message CompleteBatchQaRequest {
  // facility id
  int32 facility_id = 1;
  // force_batch_id for the qa batch
  string force_batch_id = 2;
  // start_time indicates the start time of this sortation window
  google.protobuf.Timestamp start_time = 3;
  // end_time indicates the start time of this sortation window
  google.protobuf.Timestamp end_time = 4;
}

// Response for CompleteBatchQa API
message CompleteBatchQaResponse {}

// Request for MarkParcelMissingForBatchQa API
message MarkParcelMissingForBatchQaRequest {
  // facility id
  int32 facility_id = 1;
  // force_batch_id for the qa batch
  string force_batch_id = 2;
  // parcel barcode
  string barcode = 3;
  // start_time indicates the start time of this sortation window
  google.protobuf.Timestamp start_time = 4;
  // end_time indicates the start time of this sortation window
  google.protobuf.Timestamp end_time = 5;
}

// Response for MarkParcelMissingForBatchQa API
message MarkParcelMissingForBatchQaResponse {}

// Request for ResetQaStatusForBatch API
message ResetQaStatusForBatchRequest {
  // force batch id for QA
  string force_batch_id = 1;
  // batch Qa status
  BatchQaStatus batch_qa_status = 2;
  //facility id
  int32 facility_id = 3;
}

// Response for ResetQaStatusForBatch API
message ResetQaStatusForBatchResponse {}

// Request for RestoreBatchMissingParcel API
message RestoreBatchMissingParcelRequest {
  // force batch id for QA
  string force_batch_id = 1;
  //Parcel's Qa status
  ParcelQaStatus parcel_qa_status = 2;
  // Parcel drive order id
  int64 drive_order_id = 3;
  //facility id
  int32 facility_id = 4;
}

// Response for RestoreBatchMissingParcel API
message RestoreBatchMissingParcelResponse {}

// Request for GetBatchBinQaDetailsForFacility API
message GetBatchBinQaDetailsForFacilityRequest {
  // facility id
  int32 facility_id = 1;
  // start_time indicates the start of the time range where we should look for batches matching this range.
  google.protobuf.Timestamp start_time = 2;
  // end_time is similar to the above, this is just the end of the range
  google.protobuf.Timestamp end_time = 3;
  // Pagination offset. The frontend should set is to 0 if don't want to use it
  int64 offset = 4;
  // Pagination page size. The frontend should set is to a large value if don't want to use it
  int64 page_size = 5;
}

// Response for GetBatchBinQaDetailsForFacility API
message GetBatchBinQaDetailsForFacilityResponse {
  // parcels list
  repeated BatchBinQaDetail batch_bin_qa_details = 1;
}

// Request for GetBatchDetailsForFacility API
message GetBatchDetailsForFacilityRequest {
  reserved "offset"; // deprecates offset based pagination
  reserved 4; // deprecates offset based pagination
  // facility id
  google.protobuf.Int32Value facility_id = 1;
  // start_time indicates the start of the time range where we should look for batches matching this range.
  google.protobuf.Timestamp start_time = 2;
  // end_time is similar to the above, this is just the end of the range
  google.protobuf.Timestamp end_time = 3;
  // Pagination page size. The frontend should set is to a large value if don't want to use it
  google.protobuf.Int64Value page_size = 5 [(doordash.api.client.optional) = true];
  // Pagination token.
  google.protobuf.StringValue next_token = 6 [(doordash.api.client.optional) = true];
}

// Response for GetBatchDetailsForFacility API
message GetBatchDetailsForFacilityResponse {
  // parcels list
  repeated BatchDetail batch_details = 1;
  // Next token for pagination
  google.protobuf.StringValue next_token = 2;
}

// Request for GetParcelsForFacility API
message GetParcelsForFacilityRequest {
  reserved 2, 3; // deprecates the quoted_pickup_time_start, end columns
  // facility id
  int32 facility_id = 1;
  // start_time indicates the start of the time range where we should look for orders that have *either* a quoted_pickup_time or last_scanned_at matching this range.
  google.protobuf.Timestamp start_time = 4;
  // end_time is similar to the above, this is just the end of the range
  google.protobuf.Timestamp end_time = 5;
  // Pagination offset. Limit controlled by the server
  google.protobuf.StringValue next_token = 6;
}

// Response for GetParcelsForFacility API
message GetParcelsForFacilityResponse {
  // parcels
  repeated Parcel parcels = 1;
  // Next token offset. Limit controlled by the server
  google.protobuf.StringValue next_token = 2;
}

// Request to get various parcel counts for a given time range and facility
message GetParcelStatsForFacilityRequest {
  // facility id
  int32 facility_id = 1;
  // Look for various parcel counts within the given search time range - [start_time, end_time]
  // start_time marks the beginning of the search time range
  google.protobuf.Timestamp start_time = 2;
  // end_time marks the end of the search time range; included in time range
  google.protobuf.Timestamp end_time = 3;
  // business_id
  google.protobuf.Int64Value business_id = 4;
}

// Response to get various parcel counts for a given time range and facility
message GetParcelStatsForFacilityResponse {
  // count of total scanned parcels that are expected to be delivered and ready within given time range
  int32 total_scanned = 1;
  // count of total missorted parcels that are not expected to be delivered within given time range but are last scanned in the time range
  int32 total_missorted = 2;
  // count of total remaining parcels expected to be delivered that are neither scanned nor noBatch
  int32 total_remaining = 3;
  // count of total parcels without a forceBatchId and expected to be delivered within given time range
  int32 total_no_batch = 4;
  // count of all parcels which are expected to be delivered during the given time range
  int32 total_expected_to_be_delivered = 5;
  // count of all parcels with either quoted pickup time or last scanned time within given time range
  int32 total_parcel_count = 6;
  // Earliest scan time of parcels in the facility within given time range
  google.protobuf.Timestamp earliest_scan_time = 7;
  // Latest scan time of parcels in the facility within given time range
  google.protobuf.Timestamp latest_scan_time = 8;
  // count of ready to stow parcels that are expected to be delivered
  int32 total_ready_to_stow = 9;
  // count of parcels that are expected to be delivered and are QAed
  int32 total_stowed_for_dispatch = 10;
}

// Batch Bin QA detail
message BatchBinQaDetail {
  // force batch id for the batch
  string force_batch_id = 1;
  // bin name for the batch
  google.protobuf.StringValue bin_name = 2;
  // qa start time
  google.protobuf.Timestamp qa_start_time = 3 [(doordash.api.client.nullable) = true];
  // qa end time
  google.protobuf.Timestamp qa_end_time = 4 [(doordash.api.client.nullable) = true];
  // batch size
  int32 batch_size = 5;
  // correct parcel scanned
  int32 correct_parcel_scanned = 6;
}

// Request to get parcel batches for the given time range
message GetParcelBatchesForFacilityRequest {
  // facility id
  int32 facility_id = 1;
  // Look for various parcel batches within the given search time range - [start_time, end_time]
  // start_time marks the beginning of the search time range
  google.protobuf.Timestamp start_time = 2;
  // end_time marks the end of the search time range; included in time range
  google.protobuf.Timestamp end_time = 3;
  // filter based on the batch_status_type
  BatchStatusType batch_status_type = 4;
  // Pagination offset
  int32 pagination_offset = 5;
  // Number of parcel batches to be displayed per page
  int32 page_size = 6;
}

// Response to get parcel batches for the given time range
message GetParcelBatchesForFacilityResponse {
  // list of parcel batches
  repeated ParcelBatch parcel_batches = 1;
}

// Details of a parcel batch
message ParcelBatch {
  // force_batch_id of the parcel batch
  google.protobuf.StringValue force_batch_id = 1;
  // Shift id of the runner associated with this parcel batch
  google.protobuf.Int64Value shift_id = 2;
  // Current status of the parcel batch
  BatchStatusType batch_status_type = 3;
  // display name of a bin
  google.protobuf.StringValue bin_name = 4;
  // First and Last names of the runner for the parcel batch
  google.protobuf.StringValue dasher_name = 5;
  // Error associated with this parcel batch if it exists
  ParcelBatchErrorMessage parcel_batch_error_message = 6;
  // Total number of parcels with the same force_batch_id
  int32 total_parcels_count = 7;
  // Total number of parcels with the same force_batch_id + dasher_shift_id
  int32 partial_parcels_count = 8;
  // Time at which the dasher has checked in for this parcel batch
  google.protobuf.Timestamp dasher_check_in_time = 9;
  // Time at which the current batch status was last updated
  google.protobuf.Timestamp current_batch_status_timestamp = 10;
  // Flag to indicate if any require hand back parcels are present for this parcel batch
  google.protobuf.BoolValue has_require_hand_back_parcels = 11 [(doordash.api.client.optional) = true];
}

// ParcelBatchErrorMessage
message ParcelBatchErrorMessage {
  // Error occurred
  ParcelBatchError error = 1;
  // Description of the specific error that occurred
  string description = 2;
}

// Enum to indicate the error type associated with the parcel batch
enum ParcelBatchError {
  // Not to be used
  PARCEL_BATCH_ERROR_UNSPECIFIED = 0;
  // Multiple runners associated with a single parcel batch
  PARCEL_BATCH_ERROR_MULTIPLE_RUNNERS = 1;
}

// Request to get parcel batches counts for the given time range
message GetParcelBatchStatusCountsForFacilityRequest {
  // facility id
  int32 facility_id = 1;
  // Look for various parcel batches within the given search time range - [start_time, end_time]
  // start_time marks the beginning of the search time range
  google.protobuf.Timestamp start_time = 2;
  // end_time marks the end of the search time range; included in time range
  google.protobuf.Timestamp end_time = 3;
}

// Response to get various parcel batch counts for a given time range and facility
message GetParcelBatchStatusCountsForFacilityResponse {
  // count of all parcel batches which are not yet assigned to a runner
  int32 total_unassigned = 1;
  // count of all parcel batches for which a runner has confirmed but not near sortation center
  int32 total_assigned = 2;
  // count of all parcel batches for which a dasher has crossed into geofence of sortation center
  int32 total_approaching = 3;
  // count of all parcel batches for which a dasher has been checked in but not yet scanned any parcel
  int32 total_waiting_for_batch = 4;
  // count of all parcel batches for which a dasher has scanned first parcel
  int32 total_scanning_batch = 5;
  // count of all parcel batches for which dasher has left the geofence of sortation center
  int32 total_handoff_complete = 6;
}

// Request for CompleteQualityCheck API
message CompleteQualityCheckRequest {
  reserved 4; // removing task_id field
  // facility id
  int32 facility_id = 1;
  // start_time indicates the start time of a certain time period. We will use this property to filter out which parcels we want to reschedule
  google.protobuf.Timestamp start_time = 2;
  // end_time indicates the end time of a certain time period. We will use this property to filter out which parcels we want to reschedule
  google.protobuf.Timestamp end_time = 3;
  // business_id for complete truck level
  google.protobuf.Int64Value business_id = 5;
  // facility code
  google.protobuf.StringValue facility_code = 6;
  // set id if we want to move it to a new set today/tomorrow, null to the default set tomorrow
  google.protobuf.StringValue set_id = 7;
}

// Response for CompleteQualityCheck API
message CompleteQualityCheckResponse {
  // task_id of the async reschedule task
  google.protobuf.StringValue task_id = 1;
}

// ParcelRedeliveryReasonCode
enum ParcelRedeliveryReasonCode {
  // Should never be used. Reason code must be set
  PARCEL_REDELIVERY_REASON_CODE_UNSPECIFIED = 0;
  // Don't know
  PARCEL_REDELIVERY_REASON_CODE_DO_NOT_KNOW = 1;
  // No safe place to leave parcel
  PARCEL_REDELIVERY_REASON_CODE_NO_SAFE_PLACE = 2;
  // Delivery wrong address
  PARCEL_REDELIVERY_REASON_CODE_WRONG_ADDRESS = 3;
  // Customer unavailable to meet delivery
  PARCEL_REDELIVERY_REASON_CODE_CUSTOMER_UNAVAILABLE = 4;
  // App crashed
  PARCEL_REDELIVERY_REASON_CODE_APP_CRASH = 5;
  // Runner refused parcel for some reason
  PARCEL_REDELIVERY_REASON_CODE_RUNNER_REFUSE = 6;
  // Customer refused parcel for some reason
  PARCEL_REDELIVERY_REASON_CODE_CUSTOMER_REFUSE = 7;
  // Runner encountered family emergency
  PARCEL_REDELIVERY_REASON_CODE_FAMILY_EMERGENCY = 8;
  // Weather or safety concerns
  PARCEL_REDELIVERY_REASON_CODE_WEATHER_OR_SAFETY = 9;
  // NEW REASON CODES
  // Access blocked
  PARCEL_REDELIVERY_REASON_CODE_ACCESS_BLOCKED = 10;
  // Route too long or late
  PARCEL_REDELIVERY_REASON_CODE_ROUTE_TOO_LONG = 11;
  // Emergency
  PARCEL_REDELIVERY_REASON_CODE_EMERGENCY = 12;
  // Business closed
  PARCEL_REDELIVERY_REASON_CODE_BUSINESS_CLOSED = 13;
  // Inaccessible destination
  PARCEL_REDELIVERY_REASON_CODE_INACCESSIBLE_DESTINATION = 14;
  // Language barrier
  PARCEL_REDELIVERY_REASON_CODE_LANGUAGE_BARRIER = 15;
  // Other
  PARCEL_REDELIVERY_REASON_CODE_OTHER = 16;
  // Late induction
  PARCEL_REDELIVERY_REASON_CODE_LATE_INDUCTION = 17;
  // Overnight return
  PARCEL_REDELIVERY_REASON_CODE_OVERNIGHT_RETURN = 18;
  // Incorrect mx inject (injected at wrong facility) - used by setting returnToMx
  PARCEL_REDELIVERY_REASON_CODE_INCOREECT_MX_INJECT = 19;
}

// Request for RequestParcelRedelivery API
message RequestParcelRedeliveryRequest {
  // facility id
  int32 facility_id = 1;
  // parcel_id
  string parcel_id = 2;
  // drive_order_id
  int64 drive_order_id = 3;
  // reason for redelivery
  ParcelRedeliveryReasonCode reason_code = 4;
  // optional comments about redelivery
  google.protobuf.StringValue comments = 5;
}

// Response for RequestParcelRedelivery API
message RequestParcelRedeliveryResponse {
  // task_id of the async redeliver task
  string task_id = 1;
}

// Request for SetParcelReturnedToMx
message SetParcelReturnedToMxRequest {
  // parcel_id
  string parcel_id = 1;
  // facility_id
  int32 facility_id = 2;
  // drive_order_id
  int64 drive_order_id = 3;
  // reason for returning to mx
  ParcelRedeliveryReasonCode reason_code = 4;
  // optional comments about returning to mx
  google.protobuf.StringValue comments = 5;
}

// Response for SetParcelReturnedToMx
message SetParcelReturnedToMxResponse {
  // task_id of the return to Mx task
  google.protobuf.StringValue task_id = 1;
}

// ParcelUnassignReasonCode
enum ParcelUnassignReasonCode {
  // Should never be used. Reason code must be set
  PARCEL_UNASSIGN_REASON_CODE_UNSPECIFIED = 0;
  // Vehicle trouble
  PARCEL_UNASSIGN_REASON_CODE_VEHICLE_TROUBLE = 1;
  // Parcel doesn't fit vehicle
  PARCEL_UNASSIGN_REASON_CODE_PARCEL_NOT_FIT = 2;
  // App crash or tech issue
  PARCEL_UNASSIGN_REASON_CODE_APP_TECH_ISSUE = 3;
  // Family emergency
  PARCEL_UNASSIGN_REASON_CODE_FAMILY_EMERGENCY = 4;
  // Weather or safety issue
  PARCEL_UNASSIGN_REASON_CODE_WEATHER = 5;
  // Damaged parcel
  PARCEL_UNASSIGN_REASON_CODE_DAMAGED_PARCEL = 6;
  // Driving distance too far
  PARCEL_UNASSIGN_REASON_CODE_DISTANCE_TOO_FAR = 7;
  // Languague barrier
  PARCEL_UNASSIGN_REASON_CODE_LANGUAGE_BARRIER = 8;
  // Other reason
  PARCEL_UNASSIGN_REASON_CODE_OTHER = 9;
  // NEW REASONS CODES
  // Emergency
  PARCEL_UNASSIGN_REASON_CODE_EMERGENCY = 10;
  // Accidentally accepted parcels route
  PARCEL_UNASSIGN_REASON_CODE_ACCIDENTALLY_ACCEPTED_ROUTE = 11;
  // Suspected cherry picking
  PARCEL_UNASSIGN_REASON_CODE_SUSPECTED_CHERRY_PICKING = 12;
  // Bad/inaccessible address
  PARCEL_UNASSIGN_REASON_CODE_BAD_ADDRESS_SUSPECTED = 13;
  // Dasher ID not valid
  PARCEL_UNASSIGN_REASON_CODE_NO_VALID_ID = 14;
}

// Request for UnassignAndRescheduleSingleParcel
message UnassignAndRescheduleSingleParcelRequest {
  // Facility id
  int32 facility_id = 1;
  // Parcel drive order id
  int64 drive_order_id = 2;
  // Reason for unassign
  ParcelUnassignReasonCode reason_code = 3;
  // optional comments about unassign reason
  google.protobuf.StringValue comments = 4;
}

// Response for UnassignAndRescheduleSingleParcel
message UnassignAndRescheduleSingleParcelResponse {}

// Information about sortation set dispatch time update
message SetDispatchTimeUpdate {
  // Current dispatch time of the sortation set
  google.protobuf.Timestamp current_dispatch_time = 1;
  // New dispatch time of the sortation set
  google.protobuf.Timestamp new_dispatch_time = 2;
  // Start and end of the sortation set time range
  TimeInterval set_interval = 3;
}

// ParcelUnassignmentInfo to hold information about each parcel
message ParcelUnassignmentInfo {
  // delivery_id of the parcel
  int64 delivery_id = 1;
  // drive_order_id of the parcel
  int64 drive_order_id = 2;
  // assignment service package_id of the parcel
  int64 package_id = 3;
  // optional force_batch_id of the parcel
  google.protobuf.StringValue force_batch_id = 4;
  // optional comments
  google.protobuf.StringValue comments = 5;
}

// Request for UnassignParcelsFromShift
message UnassignParcelsFromShiftRequest {
  // facility id of the parcel
  int32 facility_id = 1;
  // shift_id of dasher that parcels are assigned to
  int64 shift_id = 2;
  // Reason for unassign
  ParcelUnassignReasonCode reason_code = 3;
  // optional comments about unassign reason
  google.protobuf.StringValue comments = 4;
}

// Response for UnassignParcelsFromShift
message UnassignParcelsFromShiftResponse {
  // List of parcels successfully unassigned
  repeated ParcelUnassignmentInfo success_parcels = 1;
  // List of parcels failed to get unassigned
  repeated ParcelUnassignmentInfo failed_parcels = 2;
}

// Request for UpdateSetsDispatchTime
message UpdateSetsDispatchTimeRequest {
  // Facility id
  int32 facility_id = 1;
  // List of set dispatch time updates
  repeated SetDispatchTimeUpdate set_dispatch_times = 2;
}

// SetDispatchTimeUpdate status
enum SetDispatchTimeUpdateStatus {
  // Should never be used. Status must be set
  SET_DISPATCH_TIME_UPDATE_STATUS_UNSPECIFIED = 0;
  // Dispatch time update success
  SET_DISPATCH_TIME_UPDATE_STATUS_SUCCESS = 1;
  // Dispatch time update validation error
  SET_DISPATCH_TIME_UPDATE_STATUS_VALIDATION_ERROR = 2;
}

// Response for UpdateSetsDispatchTime
message UpdateSetsDispatchTimeResponse {
  // Update result - If there is any validation failure, no update will happen for any set. Therefore one result for all sets.
  SetDispatchTimeUpdateStatus result = 1;
  // Optionally return error message if validaiton fails
  google.protobuf.StringValue error_msg = 2;
  // Optionally return the dispatch time of the first erroneous set
  google.protobuf.Timestamp set_dispatch_time = 3 [(doordash.api.client.nullable) = true];
}

// Request for UpdateAutomaticDispatchStatus
message UpdateAutomaticDispatchStatusRequest {
  // Facility id
  int32 facility_id = 1;
  // Auto dispatch status to set
  bool automatic_dispatch_status = 2;
  // Time interval - used to filter out the batches to update
  TimeInterval interval = 3;
}

// Response for UpdateAutomaticDispatchStatus
message UpdateAutomaticDispatchStatusResponse {}

// Request for GetDispatchSummaryStats
message GetDispatchSummaryStatsRequest {
  // Facility id
  int32 facility_id = 1;
  // Time interval - used to filter result
  TimeInterval interval = 2;
}

// Response for GetDispatchSummaryStats
message GetDispatchSummaryStatsResponse {
  // Auto dispatch status to return
  bool automatic_dispatch_status = 1;
  // Num of unsorted batches
  int32 batch_unsorted_count = 2;
  // Num of sorted batches
  int32 batch_sorted_count = 3;
  // Num of QAed batches
  int32 batch_qaed_count = 4;
  // Num of dispatching batches
  int32 batch_dispatching_count = 5;
  // Num of assigned batches
  int32 batch_assigned_count = 6;
}

// Request for GetParcelsByForceBatchId
message GetParcelsByForceBatchIdRequest {
  // facility id
  int32 facility_id = 1;
  // force batch id for parcels
  string force_batch_id = 2;
}

// Response for GetParcelsByForceBatchId
message GetParcelsByForceBatchIdResponse {
  // parcels
  repeated Parcel parcels = 1;
  // batch detail
  BatchDetail batch_detail = 2 [(doordash.api.validate.rules).missing_value = {action: USE_DEFAULT_VALUE}];
}

// Request for RescheduleMissingInSortSetFromMx API
message RescheduleMissingInSortSetFromMxRequest {
  // facility id
  int32 facility_id = 1;
  // start_time indicates the start time of a certain time period.
  google.protobuf.Timestamp start_time = 2;
  // end_time indicates the end time of a certain time period.
  google.protobuf.Timestamp end_time = 3;
  // business id
  google.protobuf.Int64Value business_id = 4;
  // is same day reschedule or not
  google.protobuf.BoolValue is_same_day_reschedule = 5;
  // Facility for hub_spoke to avoid query facility_code by facility_id
  google.protobuf.StringValue facility_code = 6;
}

// Response for RescheduleMissingInSortSetFromMx API
message RescheduleMissingInSortSetFromMxResponse {
  // task_id of the async reschedule task
  google.protobuf.StringValue task_id = 1;
}

// Request for GetInboundStats API
message GetInboundStatsRequest {
  // facility id
  int32 facility_id = 1;
  // Start end time
  TimeInterval sortation_set_interval = 2;
  // page size
  int32 page_size = 3;
  // page offset
  int32 page_offset = 4;
  // Scan start end time
  TimeInterval scan_interval = 5;
}

// Response for GetInboundStats API
message GetInboundStatsResponse {
  // inbound stats
  repeated InboundStats inbound_stats = 1;
}

// InboundStats
message InboundStats {
  // reserved
  reserved 8, 9, 10;
  // reserved
  reserved "quoted_pickup_time", "leftovers_scanned", "leftovers_not_scanned";
  // origin
  string origin = 1;
  // sort_set_number
  int32 sort_set_number = 2;
  // time_arrived
  google.protobuf.Timestamp time_arrived = 3 [(doordash.api.client.nullable) = true];
  // scanned
  int32 scanned = 4;
  // missort
  int32 missorts = 5;
  // remaining
  int32 remaining = 6;
  // business_id
  google.protobuf.Int64Value business_id = 7;
  // earliest qpt of all parcels in row
  google.protobuf.Timestamp earliest_qpt = 11;
  // latest qpt of all parcels in row
  google.protobuf.Timestamp latest_qpt = 12;
}

// Request for ScanRunnerCheckinByShiftId
message ScanRunnerCheckinByShiftIdRequest {
  // facility id - which facility is the call coming from?
  int32 facility_id = 1;
  // shift_id of dasher that parcels are assigned to
  int64 shift_id = 2;
}

// Response for ScanRunnerCheckinByShiftId
message ScanRunnerCheckinByShiftIdResponse {
  // dx name
  google.protobuf.StringValue runner_name = 1;
  // list of bin names assigned to the runner
  repeated google.protobuf.StringValue bin_name = 2;
}

// Parcel Fields
message EditParcelFields {
  // edit parcel by parcel_id. This is the only required field
  string parcel_id = 1;
  // drive_order_id
  google.protobuf.Int64Value drive_order_id = 2;
  // hub_facility_id
  google.protobuf.Int32Value hub_facility_id = 3;
  // hub_external_store_id
  google.protobuf.StringValue hub_external_store_id = 4;
  // business_name
  google.protobuf.StringValue business_name = 5;
  // force_batch_id
  google.protobuf.StringValue force_batch_id = 6;
  // delivery_id
  google.protobuf.Int64Value delivery_id = 7;
  // delivery_uuid
  google.protobuf.StringValue delivery_uuid = 8;
  // dasher_name
  google.protobuf.StringValue dasher_name = 9;
  // barcode
  google.protobuf.StringValue barcode = 10;
  // first_scanned_at
  google.protobuf.Timestamp first_scanned_at = 11 [(doordash.api.client.nullable) = true];
  // last_scanned_at
  google.protobuf.Timestamp last_scanned_at = 12 [(doordash.api.client.nullable) = true];
  // customer_name
  google.protobuf.StringValue customer_name = 14;
  // dasher_confirmed_time
  google.protobuf.Timestamp dasher_confirmed_time = 15 [(doordash.api.client.nullable) = true];
  // cancelled_at
  google.protobuf.Timestamp cancelled_at = 16 [(doordash.api.client.nullable) = true];
  // actual_pickup_time
  google.protobuf.Timestamp actual_pickup_time = 17 [(doordash.api.client.nullable) = true];
  // actual_dropoff_time
  google.protobuf.Timestamp actual_dropoff_time = 18 [(doordash.api.client.nullable) = true];
  // estimated_pickup_time
  google.protobuf.Timestamp estimated_pickup_time = 19 [(doordash.api.client.nullable) = true];
  // quoted_pickup_time
  google.protobuf.Timestamp quoted_pickup_time = 20 [(doordash.api.client.nullable) = true];
  // redelivery_attempts
  google.protobuf.Int32Value redelivery_attempts = 21;
  // redelivery_requested_at
  google.protobuf.Timestamp redelivery_requested_at = 22 [(doordash.api.client.nullable) = true];
  // created_at
  google.protobuf.Timestamp created_at = 23 [(doordash.api.client.nullable) = true];
  // bin_name
  google.protobuf.StringValue bin_name = 24;
  // first_ready_at
  google.protobuf.Timestamp first_ready_at = 25 [(doordash.api.client.nullable) = true];
  // last_ready_at
  google.protobuf.Timestamp last_ready_at = 26 [(doordash.api.client.nullable) = true];
  // last_qa_time
  google.protobuf.Timestamp last_qa_time = 27 [(doordash.api.client.nullable) = true];
  // last_qa_status
  ParcelQaStatus last_qa_status = 28;
  // last_qa_force_batch_id
  google.protobuf.StringValue last_qa_force_batch_id = 29;
  // business_id
  google.protobuf.Int64Value business_id = 30;
  // first_quoted_pickup_time
  google.protobuf.Timestamp first_quoted_pickup_time = 31 [(doordash.api.client.nullable) = true];
  // last_scanned_facility_code
  google.protobuf.StringValue last_scanned_facility_code = 32;
  // lower_barcode
  google.protobuf.StringValue lower_barcode = 33;
  // returned_to_mx_at
  google.protobuf.Timestamp returned_to_mx_at = 34 [(doordash.api.client.nullable) = true];
  // dasher_shift_id
  google.protobuf.Int64Value dasher_shift_id = 35;
  // current_batch_status
  BatchStatusType current_batch_status = 36;
  // current_batch_status_timestamp
  google.protobuf.Timestamp current_batch_status_timestamp = 37 [(doordash.api.client.nullable) = true];
  // return_delivery_id
  google.protobuf.Int64Value return_delivery_id = 38;
  // return_delivery_uuid
  google.protobuf.StringValue return_delivery_uuid = 39;
  // return_delivery_actual_dropoff_time
  google.protobuf.Timestamp return_delivery_actual_dropoff_time = 40 [(doordash.api.client.nullable) = true];
  // expiration_date
  google.protobuf.Timestamp expiration_date = 41 [(doordash.api.client.nullable) = true];
  // marked_damaged_at
  google.protobuf.Timestamp marked_damaged_at = 42 [(doordash.api.client.nullable) = true];
  // disposed_at
  google.protobuf.Timestamp disposed_at = 43 [(doordash.api.client.nullable) = true];
}

// Request for EditParcelFields
message EditParcelFieldsRequest {
  // edit parcel by parcel_id. This is the only required field
  string parcel_id = 1;
  // fields to update
  EditParcelFields fields = 2;
}

// Response for EditParcelFields
message EditParcelFieldsResponse {
  // updated parcel fields
  EditParcelFields fields = 1;
}

// Request for GetParcelConfigForEntity
message GetParcelConfigForEntityRequest {
  // Type like business, facility
  ParcelEntityType entity_type = 1;
  // Entity id like biz_id, facility_id
  string entity_id = 2;
  // Config type
  ParcelConfigType config_type = 3;
}

// Response for GetParcelConfigForEntity
message GetParcelConfigForEntityResponse {
  // Type like business, facility
  ParcelEntityType entity_type = 1;
  // Entity id like biz_id, facility_id
  string entity_id = 2;
  // Config type
  ParcelConfigType config_type = 3;
  // Config value to return
  string config_value_response = 4;
  // Config value format (for caller to parse config value)
  ConfigValueFormat value_format = 5;
}

// Entity granularity to configs
enum ParcelEntityType {
  // UNSPECIFIED
  PARCEL_ENTITY_TYPE_UNSPECIFIED = 0;
  // business entity
  PARCEL_ENTITY_TYPE_BUSINESS = 1;
  // parcel facility entity
  PARCEL_ENTITY_TYPE_PARCEL_FACILITY = 2;
  // store entity
  PARCEL_ENTITY_TYPE_STORE = 3;
}

// Config Types for parcel
enum ParcelConfigType {
  // UNSPECIFIED
  PARCEL_CONFIG_TYPE_UNSPECIFIED = 0;
  // max batch size for a delivery
  PARCEL_CONFIG_TYPE_MAX_BATCH_SIZE = 1;
  // store capacity / runner caps
  PARCEL_CONFIG_TYPE_STORE_CAPACITY = 2;
  // Parcel exclusion zone
  PARCEL_CONFIG_TYPE_PARCEL_EXCLUSION_ZONE = 3;
  // Max time on road
  PARCEL_CONFIG_TYPE_MAX_TIME_ON_ROAD = 4;
}

// Config value format
enum ConfigValueFormat {
  // UNSPECIFIED
  CONFIG_VALUE_FORMAT_UNSPECIFIED = 0;
  // int format
  CONFIG_VALUE_FORMAT_INT = 1;
  // string format
  CONFIG_VALUE_FORMAT_STRING = 2;
  // bool format
  CONFIG_VALUE_FORMAT_BOOLEAN = 3;
  // json format
  CONFIG_VALUE_FORMAT_JSON = 4;
  // float format
  CONFIG_VALUE_FORMAT_FLOAT = 5;
}

// Integer validation
message IntegerValidation {
  // min
  int64 min = 1;
  // max
  int64 max = 2;
}

// Config update validation
message ConfigUpdateValidation {
  // validation
  oneof validation {
    // integer_validation
    IntegerValidation integer_validation = 1;
  }
}

// Config update modal
message ConfigUpdateModal {
  // config_modal_title: "Set Driver Cap"
  string config_modal_title = 1;
  // config_modal_description: "Control the area where runners can receive offers..."
  google.protobuf.StringValue config_modal_description = 2;
  // config_modal_input_label: "How many drivers do you want to allow on site?"
  google.protobuf.StringValue config_modal_input_label = 3;
  // config_modal_placeholder_input: "Inner ring distance" when input field is empty
  google.protobuf.StringValue config_modal_placeholder_input = 4;
  // config_update_validations
  ConfigUpdateValidation config_update_validations = 5;
  // config_update_error_messages: "This exceeds the allowed amount of drivers."
  google.protobuf.StringValue config_update_error_messages = 6;
}

// Facility config
message FacilityConfig {
  // facility_id
  int32 facility_id = 1;
  // config_type
  ParcelConfigType config_type = 2;
  // config_value: "{"intervals":[{"startTime":"...","endTime":"...","value":"10"}]}"
  string config_value = 3;
  // config_value_format
  ConfigValueFormat config_value_format = 4;
  // config_title: "Driver caps"
  string config_title = 5;
  // config_description: "Adjust the number of drivers allowed on site."
  google.protobuf.StringValue config_description = 6;
  // config_label: "Drivers allowed"
  google.protobuf.StringValue config_label = 7;
  // config_suffix: "meters"
  google.protobuf.StringValue config_suffix = 8;
  // config_note: "To change the max batch size..."
  google.protobuf.StringValue config_note = 9;
  // config_is_editable
  bool config_is_editable = 10;
  // config_update_modal
  ConfigUpdateModal config_update_modal = 11;
}

// Request for GetFacilityConfigsByFacilityId
message GetFacilityConfigsByFacilityIdRequest {
  // facility_id
  string facility_id = 1;
  // list of configs
  repeated ParcelConfigType facility_config_types = 2;
}

// Response for GetFacilityConfigsByFacilityId
message GetFacilityConfigsByFacilityIdResponse {
  // successfully fetched configs
  repeated FacilityConfig successful_facility_configs = 1;
  // failed to fetch configs
  repeated FacilityConfig failed_facility_configs = 2;
}

// Request for UpdateParcelConfigForEntity
message UpdateParcelConfigForEntityRequest {
  // Type like business, facility
  ParcelEntityType entity_type = 1;
  // Entity id like biz_id, facility_id
  string entity_id = 2;
  // Config type
  ParcelConfigType config_type = 3;
  // Config value to set
  string config_value = 4;
  // Config value format
  ConfigValueFormat value_format = 5;
}

// Response for UpdateParcelConfigForEntity
message UpdateParcelConfigForEntityResponse {}

// Request for UpdateParcelConfigForFacility
message UpdateParcelConfigForFacilityRequest {
  // Facility code
  string facility_code = 1;
  // Config type
  ParcelConfigType config_type = 2;
  // Config value to set
  string config_value = 3;
  // Config value format
  ConfigValueFormat value_format = 4;
}

// Response for UpdateParcelConfigForFacility
message UpdateParcelConfigForFacilityResponse {}

// Request for SetParcelDisposed
message SetParcelDisposedRequest {
  // parcel_id
  string parcel_id = 1;
  // facility_id
  int32 facility_id = 2;
  // drive_order_id
  int64 drive_order_id = 3;
  // reason for disposing
  ParcelRedeliveryReasonCode reason_code = 4;
  // optional comments about disposal
  google.protobuf.StringValue comments = 5;
}

// Response for SetParcelDisposed
message SetParcelDisposedResponse {
  // task_id of the return to Mx task
  google.protobuf.StringValue task_id = 1;
}

// Request for SetParcelDamaged
message SetParcelDamagedRequest {
  // parcel_id
  string parcel_id = 1;
  // facility_id
  int32 facility_id = 2;
  // drive_order_id
  int64 drive_order_id = 3;
}

// Response for SetParcelDamaged
message SetParcelDamagedResponse {
  // task_id of the return to Mx task
  google.protobuf.StringValue task_id = 1;
  // damaged_next_step enum for next step of the parcel
  ParcelDamagedNextStep damaged_next_step = 2;
}

// Enum describing potential next steps for a damaged parcel
enum ParcelDamagedNextStep {
  // damaged parcel next step unspecified
  PARCEL_DAMAGED_NEXT_STEP_UNSPECIFIED = 0;
  // damaged parcel next step return to merchant
  PARCEL_DAMAGED_NEXT_STEP_RETURN_TO_MERCHANT = 1;
  // damaged parcel next step dispose
  PARCEL_DAMAGED_NEXT_STEP_DISPOSE = 2;
  // damaged parcel next step return to hub
  PARCEL_DAMAGED_NEXT_STEP_RETURN_TO_HUB = 3;
}

// ZipcodeMapping
message ZipcodeMapping {
  // Deprecated: Use individual fields in requests instead
  option deprecated = true;
  // zipcode
  string zipcode = 1;
  // business_id
  string business_id = 2;
  // start_at
  google.protobuf.Timestamp start_at = 3;
  // end_at
  google.protobuf.Timestamp end_at = 4;
}

// MapZipcodeToFacilityRequest
message MapZipcodeToFacilityRequest {
  // zipcode
  string zipcode = 1;
  // business_id. can be 'default'
  string business_id = 2;
}

// MapZipcodeToFacilityResponse
message MapZipcodeToFacilityResponse {
  // active mapped facility_code
  string facility_code = 1;
}

// UpsertZipcodeMappingRequest
message UpsertZipcodeMappingRequest {
  // mapping shouldn't be used
  reserved 1;
  // mapping shouldn't be used
  reserved "mapping";

  // facility_code
  string facility_code = 2;
  // zipcode
  string zipcode = 3;
  // business_id
  google.protobuf.StringValue business_id = 4;
  // start_at
  google.protobuf.Timestamp start_at = 5;
  // end_at
  google.protobuf.Timestamp end_at = 6;
  // comments
  google.protobuf.StringValue comments = 7;
}

// UpsertZipcodeMappingResponse
message UpsertZipcodeMappingResponse {
  // mapping shouldn't be used
  reserved 1;
  // mapping shouldn't be used
  reserved "mapping";

  // facility_code
  string facility_code = 2;
  // zipcode
  string zipcode = 3;
  // business_id. can be 'default'
  string business_id = 4;
  // start_at
  google.protobuf.Timestamp start_at = 5;
  // end_at
  google.protobuf.Timestamp end_at = 6;
  // comments
  google.protobuf.StringValue comments = 7;
}

// DeleteZipcodeMappingRequest
message DeleteZipcodeMappingRequest {
  // mapping shouldn't be used
  reserved 1;
  // mapping shouldn't be used
  reserved "mapping";

  // zipcode
  string zipcode = 2;
  // business_id
  google.protobuf.StringValue business_id = 3;
  // delete_at
  google.protobuf.Timestamp delete_at = 4;
  // only delete scheduled mappings
  bool only_delete_scheduled_mappings = 5;
}

// DeleteZipcodeMappingResponse
message DeleteZipcodeMappingResponse {}

// UpdateZipcodeBlockedStatusRequest
message UpdateZipcodeBlockedStatusRequest {
  // zipcode
  string zipcode = 1;
  // is_blocked
  bool is_blocked = 2;
  // blocked_reason
  google.protobuf.StringValue blocked_reason = 3;
  // comments
  google.protobuf.StringValue comments = 4;
}

// UpdateZipcodeBlockedStatusResponse
message UpdateZipcodeBlockedStatusResponse {}

// Request to list all facilities
message ListFacilitiesRequest {}

// List of all facilities
message ListFacilitiesResponse {
  // list of facilities, originating from Dashmart
  repeated Facility facilities = 1;
  // list of V2 facilities, originating from Parcel warehouses
  repeated FacilityV2 facilities_v2 = 2;
}

// Request to get user roles
message GetUserRolesRequest {}

// Response for user roles
message GetUserRolesResponse {
  // List of user roles
  repeated string user_roles = 1;
}

// Request for OnboardMxToFacility
message OnboardMxToFacilityRequest {
  // developer id
  int64 developer_id = 1;
  // store name, optional if empty → [MX_NAME] [FACILITY_CODE]
  google.protobuf.StringValue name = 2;
  // is sandbox or prod store
  bool is_test = 3;
  // external store id
  string facility_code = 4;
}

// Response for OnboardMxToFacility
message OnboardMxToFacilityResponse {
  // return either error or data
  oneof result {
    // error code
    Error error = 1;
    // data
    Store data = 2;
  }
}

// Store object
message Store {
  // developer id
  int64 developer_id = 1;
  // test store or not
  bool is_test = 2;
  // external business id
  string external_business_id = 3;
  // internal business ID
  int64 doordash_business_id = 4;
  // external store ID aka facility code in Parcel world
  string external_store_id = 5;
  // doordash store ID aka our internal ID
  int64 doordash_store_id = 6;
  // name of store
  string name = 7;
  // timestamp of creation date
  google.protobuf.Timestamp created_at = 8;
  // store phone number
  google.protobuf.StringValue phone_number = 9;
  // store address
  google.protobuf.StringValue address = 10;
}

// Generic error structure capturing error code and message
message Error {
  // error code enum
  enum ErrorCode {
    // base error code, unmapped
    ERROR_CODE_INTERNAL_ERROR_UNSPECIFIED = 0;
    // try to create a exist store
    ERROR_CODE_DUPLICATE_STORE = 1;
    // failed validation
    ERROR_CODE_INVALID_REQUEST = 2;
  }
  // error code
  ErrorCode error_code = 1;
  // detailed error message.
  google.protobuf.StringValue error_details = 2;
}

// request to fetch basic details about parcel
message GetParcelDetailsRequest {
  // barcode
  string barcode = 1;
}

// detailed parcel response
message GetParcelDetailsResponse {
  // Parcel
  ParcelDetails parcel = 1;
}

// Request for GetRequiredHandbackParcelsByShiftId
message GetRequiredHandbackParcelsByShiftIdRequest {
  // shift_id of dasher that parcels are scanned by
  int64 shift_id = 1;
  // facility code
  google.protobuf.StringValue facility_code = 2 [(doordash.api.client.optional) = true];
}

// Response for GetRequiredHandbackParcelsByShiftId
message GetRequiredHandbackParcelsByShiftIdResponse {
  // parcels
  repeated Parcel parcels = 1;
}
