syntax = "proto3";

package parcel_service.v1;

import "common/common.proto";
import "drive_order_service/drive_order.proto";
import "drive_order_service/parcel.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "parcel_protobuf/common.proto";

option go_package = "drive_parcel_service";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.parcel";

// Service with defined endpoints for use outside of the sort app
service ParcelDataService {
  // Gets unassigned routes for a certain date by facility code
  rpc GetAvailableParcelRoutes(GetAvailableParcelRoutesRequest) returns (GetAvailableParcelRoutesResponse);
  // Gets unassigned routes for that day by facility code
  rpc GetAvailableParcelRoutesToday(GetAvailableParcelRoutesTodayRequest) returns (GetAvailableParcelRoutesTodayResponse);
  // Gets facility related meta data from parcel service
  rpc GetWaitlistMetadata(GetWaitlistMetadataRequest) returns (GetWaitlistMetadataResponse);
  // Gets facility related meta data from parcel service in batch
  rpc GetWaitlistMetadatasByFacilityIds(GetWaitlistMetadatasByFacilityIdsRequest) returns (GetWaitlistMetadatasByFacilityIdsResponse);
  // Gets facilityIds given a list of storeIds
  rpc GetFacilitiesByStoreIds(GetFacilitiesByStoreIdsRequest) returns (GetFacilitiesByStoreIdsResponse);
  // Gets facilityIds given a list of storeIds. Allows Null facilityIds
  rpc GetFacilitiesByStoreIdsV2(GetFacilitiesByStoreIdsV2Request) returns (GetFacilitiesByStoreIdsV2Response);
  // Gets storeIds given a facilityId
  rpc GetStoreIdsByFacilityId(GetStoreIdsByFacilityIdRequest) returns (GetStoreIdsByFacilityIdResponse);
  // Gets dashers attributes on parcel db
  rpc GetDasherAttributes(GetDasherAttributesRequest) returns (GetDasherAttributesResponse);
  // Gets facility Ids by Starting Point Id
  rpc GetFacilitiesByStartingPoints(GetFacilitiesByStartingPointsRequest) returns (GetFacilitiesByStartingPointsResponse);
  // For deep-red, get a list of (facility id, store id list) for the next parcel planner run
  rpc GetActiveParcelPlannerRunByFacilityId(GetActiveParcelPlannerRunByFacilityIdRequest) returns (GetActiveParcelPlannerRunByFacilityIdResponse) {}
  // For deep-red, update parcel planner run status to indicate that the run is complete
  rpc UpdateParcelPlannerRunStatus(UpdateParcelPlannerRunStatusRequest) returns (UpdateParcelPlannerRunStatusResponse) {}
  // Update the configurations related to the parcel waitlist
  rpc UpdateFacilityAttributes(UpdateFacilityAttributesRequest) returns (UpdateFacilityAttributesResponse) {}
  // Gets Assignments related data for a facility
  rpc GetFacilitiesAssignmentDetails(GetFacilitiesAssignmentDetailsRequest) returns (GetFacilitiesAssignmentDetailsResponse);
  // unset return_to_mx_at, temporary endpoint for fixing orders that were accidently set to return to Mx At
  rpc UnSetReturnToMx(UnSetReturnToMxRequest) returns (UnSetReturnToMxResponse);
  // Insert the mapping of facility_id and store_id mapping
  rpc InsertFacilityStoreIdMapping(InsertFacilityStoreIdMappingRequest) returns (InsertFacilityStoreIdMappingResponse) {}
  // Gets configuration from parcel-service for parcel delivery
  rpc GetParcelDeliveryConfiguration(GetParcelDeliveryConfigurationRequest) returns (GetParcelDeliveryConfigurationResponse);
  // Get the PDF shipping_label for a parcel order
  rpc GetParcelShippingLabel(GetParcelShippingLabelRequest) returns (GetParcelShippingLabelResponse);
  // Get sortation set ids by delivery ids
  rpc GetSortationSetIdsByDeliveryIds(GetSortationSetIdsByDeliveryIdsRequest) returns (GetSortationSetIdsByDeliveryIdsResponse);
  // Get required handback barcodes for a given shift id
  rpc GetRequiredHandbackBarcodes(GetRequiredHandbackBarcodesRequest) returns (GetRequiredHandbackBarcodesResponse);
}

// GetActiveParcelPlannerRunByFacilityIdRequest is ...
message GetActiveParcelPlannerRunByFacilityIdRequest {
  // facility id
  int32 facility_id = 1;
}

// GetActiveParcelPlannerRunByFacilityIdResponse returns if there's an active parcel planner run for the facility
message GetActiveParcelPlannerRunByFacilityIdResponse {
  // Active parcel planner run request, null if there's no active run
  ParcelPlannerRun parcel_planner_run = 1;
  // error message if there's any error
  google.protobuf.StringValue error_message = 2;
}

// UpdateParcelPlannerRunStatusRequest is to update parcel planner run status
message UpdateParcelPlannerRunStatusRequest {
  // request uuid generated by parcel service
  string parcel_planner_run_request_id = 1;
  // parcel planner run event
  ParcelPlannerRunEventType event = 2;
  // assignment run id for analytical purpose
  google.protobuf.StringValue assignment_run_id = 3;
}

// UpdateParcelPlannerRunStatusResponse is the response for updating parcel planner run status
message UpdateParcelPlannerRunStatusResponse {
  // request uuid generated by parcel service
  string parcel_planner_run_request_id = 1;
  // parcel planner run event
  ParcelPlannerRunEventType event = 2;
  // assignment run id for analytical purpose
  google.protobuf.StringValue assignment_run_id = 3;
  // error message if there's any error
  google.protobuf.StringValue error_message = 4;
}

// Request for getting unassigned routes by facility on given date
message GetAvailableParcelRoutesRequest {
  // facility id of the sortation center
  int32 facility_id = 1;
  // date in "YYYY-MM-DD" format
  google.protobuf.StringValue date = 2;
}

// Response for getting unassigned routes by facility on given date
message GetAvailableParcelRoutesResponse {
  //  number of assigned routes for that facility that are left today
  int32 num_available_routes = 1;
}

// Request for getting unassigned routes by facility that day
message GetAvailableParcelRoutesTodayRequest {
  //  facility id of the sortation center
  int32 facility_id = 1;
}

// Response for getting unassigned routes by facility that day
message GetAvailableParcelRoutesTodayResponse {
  //  number of assigned routes for that facility that are left today
  int32 num_available_routes = 1;
}

// Object that contains driver pay related information at a facility level
message AverageOrderEarnings {
  // estimated min pay for an order
  google.protobuf.Int64Value estimated_pay_min = 1;
  // estimated min pay for an order
  google.protobuf.Int64Value estimated_pay_max = 2;
  // upper bound of estimated travel distance for an order
  google.protobuf.Int64Value mileage_max = 3;
  // time in utc for when order needs to be delivered by
  google.protobuf.StringValue delivered_by = 4;
}

// Request GetWaitlistMetadataRequest
message GetWaitlistMetadataRequest {
  //  facility id of the sortation center
  int32 facility_id = 1;
}

// Request GetWaitlistMetadatasByFacilityIdsRequest
message GetWaitlistMetadatasByFacilityIdsRequest {
  //  facility ids of the sortation center
  repeated int32 facility_ids = 1;
}

// Response GetWaitlistMetadata
message GetWaitlistMetadatasByFacilityIdsResponse {
  // list of waitlist metadatas
  repeated GetWaitlistMetadataResponse waitlist_metadatas = 1;
}

// WaitlistMetadata object
message GetWaitlistMetadataResponse {
  // facility name - ex DAL-5
  google.protobuf.StringValue facility_name = 1;
  // Earnings related information for the entire facility
  AverageOrderEarnings average_order_earnings = 2;
  // pickup address of the facility
  common.CommonAddress pickup_address = 3;
  // time in utc of when orders will start getting assigned from the waitlist for this facility
  google.protobuf.Timestamp scheduled_pickup_time = 4;
  // average time in minutes from one assignment to next
  google.protobuf.Int64Value average_pickup_time_per_order = 5;
  // facility id - ex 01
  int32 facility_id = 6;
  // facility time zone - ex Adaka/Alaska
  google.protobuf.StringValue facility_time_zone = 7;
  // is facility dispatch toggle on - facilities turn this on to enable dispatching sorted & QAd routes
  google.protobuf.BoolValue is_dispatching = 8;
}

// Request for GetFacilityForStore
message GetFacilitiesByStoreIdsRequest {
  //  list of store ids that we want to get facility for
  repeated int32 store_ids = 1;
}

// Request for GetFacilitiesByStoreIdsV2
message GetFacilitiesByStoreIdsV2Request {
  //  list of store ids that we want to get facility for
  repeated int32 store_ids = 1;
}

// Request for GetStoreIdsByFacilityId
message GetStoreIdsByFacilityIdRequest {
  //  facility id of the sortation center
  int32 facility_id = 1;
}

// Response for GetFacilitiesByStartingPoints
message GetFacilitiesByStartingPointsRequest {
  // list of starting point ids
  repeated int32 starting_point_ids = 1;
}

// Response for GetFacilitiesByStartingPoints
message GetFacilitiesByStartingPointsResponse {
  // mapping of starting_point_id to facility_id
  message StartingPointToFacilityIdMapping {
    // store id of the store passed in
    int32 starting_point_id = 1;
    // facility id that maps to the store id
    repeated int32 facility_ids = 2;
  }
  // list of starting points with their facility ids
  repeated StartingPointToFacilityIdMapping starting_point_to_facility_id_mapping = 1;
}

// Response for GetFacilityForStore
message GetFacilitiesByStoreIdsResponse {
  // mapping of store_id to facility_id
  message FacilityToStoreMapping {
    // store id of the store passed in
    int32 store_id = 1;
    // facility id that maps to the store id
    int32 facility_id = 2;
  }
  // list of store_id to facility_id mapping. Returns no mapping when facility_id is not found for a store
  repeated FacilityToStoreMapping facility_to_store_map = 1;
}

// Response for GetFacilitiesByStoreIdsV2
message GetFacilitiesByStoreIdsV2Response {
  // mapping of store_id to facility_id
  message StoreToFacilityMapping {
    // store id of the store passed in
    int32 store_id = 1;
    // facility id that maps to the store id. Can be null if no facility is found for the store
    google.protobuf.Int64Value facility_id = 2;
  }
  // list of store_id to facility_id mapping. Returns no mapping when facility_id is not found for a store
  repeated StoreToFacilityMapping store_to_facility_map = 1;
}

// Response for GetStoreIdsByFacilityId
message GetStoreIdsByFacilityIdResponse {
  // list of store ids that are mapped to the facility id
  repeated int32 store_ids = 1;
}

// Preferential Assignment Status
enum PreferentialAssignmentStatus {
  // assignment status is not specified
  PREFERENTIAL_ASSIGNMENT_STATUS_UNSPECIFIED = 0;
  // assignment status is preferred
  PREFERENTIAL_ASSIGNMENT_STATUS_PREFERRED = 1;
  // assignment status is not preferred
  PREFERENTIAL_ASSIGNMENT_STATUS_NOT_PREFERRED = 2;
  // assignment status is blocked
  PREFERENTIAL_ASSIGNMENT_STATUS_BLOCKED = 3;
  // assignment status is new runner
  PREFERENTIAL_ASSIGNMENT_STATUS_NEW_RUNNER = 4;
  // assignment status is LCSP runner
  PREFERENTIAL_ASSIGNMENT_STATUS_LCSP_RUNNER = 5;
  // assignment status is employee
  PREFERENTIAL_ASSIGNMENT_STATUS_EMPLOYEE = 6;
}

// get dasher attributes response
message GetDasherAttributesResponse {
  // preferential assignment status
  PreferentialAssignmentStatus dasher_attributes = 1;
}

// get dasher attributes request
message GetDasherAttributesRequest {
  // dasher id
  string dasher_id = 1;
  // facility id of the sortation center
  google.protobuf.Int32Value facility_id = 2;
}

// request to update waitlist metadata
message UpdateFacilityAttributesRequest {
  //  facility id of the sortation center
  int32 facility_id = 1;
  // New waitlist metadata for facility
  FacilityAttributes facility_attributes = 2;
}

// Attributes stored in the facility_attributes in the facility_metatdata table
message FacilityAttributes {
  // Waitlist specific attributes related to the facility
  WaitlistFacilityAttributes waitlist_attributes = 1;
}

// Waitlist specific attributes related to a facility
message WaitlistFacilityAttributes {
  // Route details related to waitlist at a facility level
  WaitlistRouteDetails waitlist_route_details = 1;

  // Scheduling data related to waitlist at a facility level
  WaitlistSchedulingData waitlist_scheduling_data = 2;
}

// Route details related to waitlist at a facility level
message WaitlistRouteDetails {
  // max miles a runner can expect a route to be from a facility
  google.protobuf.Int64Value mileage_max = 1;

  // pay related details in relation to waitlist routes in a facility
  WaitlistRoutePayDetails waitlist_route_pay_details = 2;

  // pay related details in relation to waitlist routes in a facility
  message WaitlistRoutePayDetails {
    // The estimated min pay the runner can expect for routes from this facility
    google.protobuf.Int64Value estimated_min_pay = 1;
    // The estimated min pay the runner can expect for routes from this facility
    google.protobuf.Int64Value estimated_max_pay = 2;
  }
}

// Scheduling data related to waitlist at a facility level
message WaitlistSchedulingData {
  // scheduled pickup time that routes start getting assigned from this facility
  google.protobuf.StringValue scheduled_pickup_time = 1;

  // average time it takes for a runner to pickup an order from a facility in seconds
  google.protobuf.Int64Value average_pickup_time_per_order = 2;
}

// update waitlist metadata response
message UpdateFacilityAttributesResponse {}

// request for getting the assignment details for a list of facilities
message GetFacilitiesAssignmentDetailsRequest {
  // facility id of the sortation center
  repeated int32 facility_ids = 1;
}

// request to unSet return to mx at
message UnSetReturnToMxRequest {
  // Parcel drive order id
  int64 drive_order_id = 7;
  // unSet return to mx reason
  UnSetReturnToMxReason reason = 1;
  // comment for the unSet return to mx
  google.protobuf.StringValue comment = 2;
}

// unSet return to mx reason
enum UnSetReturnToMxReason {
  // unSet return to mx reason is not specified
  UN_SET_RETURN_TO_MX_REASON_UNSPECIFIED = 0;
  // unSet return to mx reason is due to a tech issue
  UN_SET_RETURN_TO_MX_REASON_TECH_ISSUE = 1;
  // unSet return to mx reason is due to an user error
  UN_SET_RETURN_TO_MX_REASON_USER_ERROR = 2;
  // unSet return to mx reason is due to mx request
  UN_SET_RETURN_TO_MX_REASON_MX_REQUEST = 3;
  // unSet return to mx reason to recreate the order
  UN_SET_RETURN_TO_MX_REASON_RECREATE_ORDER = 4;
}

// response to unSet return to mx at
message UnSetReturnToMxResponse {}

// response for getting the assignment details for a list of facilities
message GetFacilitiesAssignmentDetailsResponse {
  // assignment details at a facility level
  message FacilityAssignmentDetails {
    // one facility Id from the request
    int32 facility_id = 1;
    // max route time in minutes for the facility id
    google.protobuf.Int32Value time_on_road_constraint_in_minutes = 4;
  }
  // list of facility_id mappings with facilities attributes. Invalid facility_id will make it missing from the response
  repeated FacilityAssignmentDetails facilities_attributes = 1;
}

// request to insert the store_id and facility_id mapping
message InsertFacilityStoreIdMappingRequest {
  // facility code of the sortation center
  string facility_code = 1;
  // new store_id for facility
  int32 store_id = 2;
}

// response for insert the store_id and facility_id mapping
message InsertFacilityStoreIdMappingResponse {}

// request to get parcel delivery configuration
message GetParcelDeliveryConfigurationRequest {
  // removing int32 business_id field
  reserved 1;
  // removing int32 business_id field
  reserved "business_id";
  // external store id
  google.protobuf.StringValue external_store_id = 2;
  // zipcode
  google.protobuf.StringValue zipcode = 3;
  // business id of parcel order
  string mx_business_id = 4;
}

// response for get parcel delivery configuration
message GetParcelDeliveryConfigurationResponse {
  // facility_code
  string external_store_id = 1;
  // route_id
  google.protobuf.StringValue route_id = 2;
  // Delivery Window to be returned to drive
  DeliveryWindow expected_delivery_window = 3;
}

// Delivery Window that will be retured in the drive response
message DeliveryWindow {
  // start time of the delivery window
  google.protobuf.Timestamp pickup_window_start_time = 1;
  // end time of the delivery window
  google.protobuf.Timestamp pickup_window_end_time = 2;
  // end time of the delivery window
  google.protobuf.Timestamp delivery_window_end_time = 3;
}

// request to get parcel shipping label
message GetParcelShippingLabelRequest {
  reserved 4;
  reserved "shipped_date";
  // format of the shipping label
  ShippingLabelFormat format = 1;
  // parcel barcode
  string barcode = 2;
  // facility code
  string facility_code = 3;
  // customer name
  string customer_name = 5;
  // customer address
  string customer_address = 6;
  // item weight
  google.protobuf.DoubleValue item_weight = 7;
  // item reference id
  google.protobuf.StringValue item_reference_id = 8;
  // midmile provider
  drive_order_service.v1.MidmileProvider midmile_provider = 9;
  // business name
  string business_name = 10;
  // shipped date in local timezone, "MM/dd/YYYY"
  string local_shipped_date = 11;
  // Metadata to support Shipping Label Information
  drive_order_service.v1.ShippingLabelMetadata shipping_label_metadata = 12;
}

// response to get parcel shipping label
message GetParcelShippingLabelResponse {
  // shipping label in based64 encoded format
  google.protobuf.StringValue shipping_label = 1;
  // error message if there's any error
  google.protobuf.StringValue error_message = 2;
}

// format of the shipping label
enum ShippingLabelFormat {
  // format of the shipping label is not specified
  SHIPPING_LABEL_FORMAT_UNSPECIFIED = 0;
  // format of the shipping label is pdf
  SHIPPING_LABEL_FORMAT_PDF = 1;
}

// request to get sortation set by delivery ids
message GetSortationSetIdsByDeliveryIdsRequest {
  // List of delivery IDs, max 1000 id at a time
  repeated int64 delivery_ids = 1;
}

// response to get sortation set by delivery ids
message GetSortationSetIdsByDeliveryIdsResponse {
  // key: delivery ID | value: sortation set ID
  map<int64, string> sortation_set_ids_by_delivery_ids = 1;
}

// Request message for GetRequiredHandbackBarcodes message
message GetRequiredHandbackBarcodesRequest {
  // The shift ID for which to retrieve required handback barcodes.
  string shift_id = 1;
}

// Response message for GetRequiredHandbackBarcodes
message GetRequiredHandbackBarcodesResponse {
  // List of barcodes required for handback.
  repeated string barcodes = 1;
}
