syntax = "proto3";

// buf:lint:ignore DIRECTORY_SAME_PACKAGE
package doordash_c3po_service;

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

option go_package = "c3po";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.c3po_service";

service C3POService {
  rpc RefreshI18nStrings(RefreshI18nStringsRequest) returns (RefreshI18nStringResponse);
  rpc GetBatchedI18nStrings(GetBatchedI18nStringsRequest) returns (GetBatchedI18nStringResponse);
  rpc GetI18nStrings(NamespaceRequest) returns (NamespaceResponse);
  rpc GetCompressedI18nStrings(NamespaceRequest) returns (CompressedNamespaceResponse);

  rpc RequestStringTranslation(StringTranslationRequest) returns (StringTranslationResponse);
  rpc SearchBySourceString(SearchBySourceStringRequest) returns (SearchStringResponse);
  rpc SearchByStringId(SearchByStringIdRequest) returns (SearchStringResponse);
  rpc ManuallyAddStringTranslation(ManuallyAddStringTranslationRequest) returns (StringTranslationResponse);
  rpc ManuallyUpdateStringTranslation(ManuallyUpdateStringTranslationRequest) returns (StringTranslationResponse);
  rpc RetranslateString(RetranslateStringRequest) returns (StringTranslationResponse);
  rpc ManuallyPollTranslationUpdates(ManuallyPollTranslationUpdatesRequest) returns (EmptyResponse);
  rpc GetSupportedNamespaces(google.protobuf.Empty) returns (GetSupportedNamespacesResponse);

  rpc GetSupportedLocales(GetSupportedLocalesRequest) returns (GetSupportedLocalesResponse);
  rpc Get18nStringsForLocale(GetI18nStringsForLocaleRequest) returns (GetI18nStringsForLocaleResponse);

  rpc EnqueueAllStringsForLocale(EnqueueAllStringsForLocaleRequest) returns (EnqueueAllStringsForLocaleResponse);

  rpc DetectLanguage(DetectLanguageRequest) returns (DetectLanguageResponse);

  rpc GetRealTimeTranslation(GetRealTimeTranslationRequest) returns (GetRealTimeTranslationResponse);

  rpc ReSyncTranslationFromSmartling(ReSyncTranslationFromSmartlingRequest) returns (ReSyncTranslationFromSmartlingResponse);
}

/* Translated strings for requested namespaces */
message GetBatchedI18nStringsRequest {
  repeated NamespaceRequest namespaces = 1;
}

/* Latest translated strings for requested namespaces */
message RefreshI18nStringsRequest {
  repeated NamespaceRequest namespaces = 1;
}

/* Request for a namespace */
message NamespaceRequest {
  string name = 1;
  string checksum = 2;
  enum KeyType {
    PREMIGRATE = 0;
    STRING_ID = 1;
    SOURCE_STRING = 2;
  }
  KeyType key_type = 3;
}

/* Translated strings by namespace */
message GetBatchedI18nStringResponse {
  map<string, NamespaceResponse> namespaces = 1;
}

/* Latest translated strings by namespace*/
message RefreshI18nStringResponse {
  map<string, NamespaceResponse> namespaces = 1;
}

/* Response for a namespace */
message NamespaceResponse {
  string namespace = 1;
  string checksum = 2;
  Status status = 4;
  enum Status {
    UPDATED = 0;
    NO_CHANGE = 1;
  }
  // Map of locale code to locale resources
  map<string, LocaleStringResource> locale_resources = 3;
}

/* Compressed response for a namespace */
message CompressedNamespaceResponse {
  bytes compressed_namespace_response = 1;
}

message LocaleStringResource {
  string locale = 1;

  // String and String ID data
  map<string, StringResource> string_resources = 2;
}

message StringResource {
  string id = 1;
  string message = 2;
}

/*** PROTOS FOR V2: SMARTLING INTEGRATION ***/
/* was the string translated by a human or a machine */
enum TranslationType {
  HUMAN = 0;
  MACHINE = 1;
  MANUAL = 2;
}

/* request a new string translation */
message StringTranslationRequest {
  string source_string = 1;
  string context = 2;
  string namespace = 3;
  TranslationType translation_type = 4;
  string author_email = 5;
}

/* return the string_id of a translation request */
message StringTranslationResponse {
  string string_id = 1;
}

/* search for a string translation by source string */
message SearchBySourceStringRequest {
  string source_string = 1;
  string namespace = 2;
}

/* data associated with a string translation */
message StringTranslationInfo {
  string target_locale = 1;
  string context = 2;
  string namespace = 3;
  string string_id = 4;
  Status status = 5;
  enum Status {
    NEW_REQUEST = 0;
    TRANSLATION_IN_PROGRESS = 1;
    TRANSLATION_COMPLETE = 2;
    CLARIFICATION_REQUEST = 3;
    MANUAL = 4;
  }
  string source_string = 6;
  string translated_string = 7;
  string job_id = 8;
  string job_name = 9;
  google.protobuf.Timestamp submitted_at = 10;
  google.protobuf.Timestamp translated_at = 11;
  google.protobuf.Timestamp updated_at = 12;
  google.protobuf.Timestamp due_at = 13;
  string source_locale = 14;
  TranslationType translation_type = 15;
  string author_email = 16;
}

/* list of string translation info */
message SearchStringResponse {
  repeated StringTranslationInfo string_translation_info_list = 1;
}

/* search for a string by id */
message SearchByStringIdRequest {
  string string_id = 1;
  string namespace = 2;
}
// Response: SearchStringResponse

/* manually add a string translation. must include a translation for each locale. */
message ManuallyAddStringTranslationRequest {
  string namespace = 1;
  string source_string = 2;
  map<string, string> locale_to_translated_string = 3;
  string context = 4;
}
// Response: StringTranslationResponse

/* manually update a string translation for a specific locale */
message ManuallyUpdateStringTranslationRequest {
  string namespace = 1;
  string string_id = 2;
  string locale = 3;
  string translated_string = 4;
}
// Response: StringTranslationResponse

/* request to retranslate a string with a different translation_type or context */
message RetranslateStringRequest {
  string string_id = 1;
  string namespace = 2;
  string context = 3;
  TranslationType translation_type = 4;
}
// Response: StringTranslationResponse

/* request to manually poll and update statuses of translations  */
message ManuallyPollTranslationUpdatesRequest {
  int32 days_to_poll = 1;
}

message GetSupportedNamespacesResponse {
  repeated NamespaceInfo namespace_info = 1;
}

message NamespaceInfo {
  string name = 1;
  string description = 2;
}
// Response: EmptyResponse

message EmptyResponse {}

// Request to get supported locales for a given namespace
message GetSupportedLocalesRequest {
  string namespace = 1 [deprecated = true];
}

//a list of locales
message Locales {
  repeated string locales = 1;
}

// response for GetSupportedLocaleRequest
message GetSupportedLocalesResponse {
  repeated string locales = 1;
  repeated string optional_locales = 2;
  map<string, Locales> locale_fallbacks = 3;
}

// Request to get translations for locale
message GetI18nStringsForLocaleRequest {
  string namespace = 1;
  string locale = 2;
}

// Response for GetI18nStringsForLocaleRequest
message GetI18nStringsForLocaleResponse {
  string namespace = 1;
  LocaleStringResource string_resources = 2;
}

// Request to enqueue all the strings for a locale
message EnqueueAllStringsForLocaleRequest {
  string locale = 1;
}

/* return the status of enqueuing all strings for a locale request */
message EnqueueAllStringsForLocaleResponse {
  bool status = 1;
}

message ReSyncTranslationFromSmartlingRequest {
  string source_text = 1;
  repeated string target_locales = 2;
}

message ReSyncTranslationFromSmartlingResponse {}

// Labels to distinguish each translation endpoint usage
// See https://doordash.atlassian.net/wiki/spaces/DEGROWTH/pages/2863235250/Real+time+translations+endpoints+handoff+doc#Cost-measuring-using-labels for more details.
message RequestLabels {
  string caller = 1;
  string owner = 2;
  string project = 3;
}

// Request to detect language of a string
message DetectLanguageRequest {
  string content = 1;
  // Translation Use Case (Team Name & Use Case)
  TranslationUseCase use_case = 2;
}
// Response: DetectLanguageResponse

// Response of DetectLanguageRequest
message DetectLanguageResponse {
  repeated DetectedLanguage languages = 1;
}

// Part of the DetectLanguageResponse
message DetectedLanguage {
  string language_code = 1;
  float confidence = 2;
}

// The translation engine used in detecting languages
enum Engine {
  GOOGLE_CLOUD_TRANSLATE = 0;
}

enum RealTimeTranslationLanguageCode {
  UNSPECIFIED_LANGUAGE = 0;
  EN_US = 1;
  ES_US = 2;
  FR_CA = 3;
  ZH_CN = 4;
}

enum TranslationUseCase {
  I18N_REAL_TIME_TRANSLATION = 0;
  DX_HANDOFFS_CX_DROPOFF_INSTRUCTIONS = 1;
  DX_PICKUP_INSTRUCTIONS = 2;
  DRIVE_CX_DROPOFF_INSTRUCTIONS = 3;
  ORDER_ACCURACY_CX_PICKUP_REQUEST = 4;
}

// Request to get a realtime translation of a string to another language.
message GetRealTimeTranslationRequest {
  // Strings to be translated
  repeated string contents = 1;
  // Translated String Language Code (ISO 639-1)
  RealTimeTranslationLanguageCode target_language_code = 2;
  // Source String Language Code (ISO 639-1) (Optional - will be auto detected if not passed in request)
  RealTimeTranslationLanguageCode source_language_code = 3;
  // Translation Use Case (Team Name & Use Case)
  TranslationUseCase use_case = 4;
}

// Response of GetRealTimeTranslationRequest.
message GetRealTimeTranslationResponse {
  repeated Translation translations = 1;
}

// Part of the GetRealTimeTranslationResponse.
message Translation {
  string translated_text = 1;
  // Translated String Language Code (ISO 639-1)
  RealTimeTranslationLanguageCode translated_language_code = 2;
  string source_text = 3;
  // Source String Language Code (ISO 639-1)
  string source_language_code = 4;
}

message C3poBackupConfig {
  repeated NamespaceConfig namespace_configs = 1;
}

message NamespaceConfig {
  string namespace = 1;
  NamespaceRequest.KeyType key_type = 2;
}
