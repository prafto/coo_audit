syntax = "proto3";

// buf:lint:ignore PACKAGE_VERSION_SUFFIX
package nv.internal;

import "common/service_client_config.proto";
import "doordash.api/annotations.proto";
import "google/api/annotations.proto";
import "google/protobuf/wrappers.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.presentation_gateway.nv";

// buf:lint:ignore SERVICE_SUFFIX
// Retail Feed Internal
service RetailFeedInternal {
  option (doordash.api.service) = {
    port: 50051
    name_spaces: ["nv-internal"]
    owner: {
      id: "new-verticals-shopex"
      name: "new-verticals-shopex"
      slack_channel: "#nv-shop-ex-be-oncall"
      email_alias: "nv-grocery-eng@doordash.com"
    }
    target_products: [INTERNAL]
  };

  // Get a list of all L1 categories by store/business
  rpc GetCategories(GetCategoriesRequest) returns (GetCategoriesResponse) {
    option (google.api.http) = {get: "/nv-internal/v1/get_categories"};
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      target_products: [INTERNAL]
      hostname: "nv-internal-retail-feed-internal-get-categories.service.prod.ddsd"
      port: 50051
      presentation_gateway_endpoint: true
    };
    option (doordash.api.inject_headers) = {
      inject: [
        {field: "cx_id"},
        {field: "platform"},
        {field: "is_employee"}]
    };
  }

  // Get a list of retail items by store/business
  rpc GetSearchResults(GetSearchResultsRequest) returns (GetSearchResultsResponse) {
    option (google.api.http) = {get: "/nv-internal/v1/get_search_results"};
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      target_products: [INTERNAL]
      hostname: "nv-internal-retail-feed-internal-get-search-results.service.prod.ddsd"
      port: 50051
      presentation_gateway_endpoint: true
    };
    option (doordash.api.inject_headers) = {
      inject: [
        {field: "cx_id"},
        {field: "platform"},
        {field: "is_employee"}]
    };
  }
}

// Categories Request
message GetCategoriesRequest {
  reserved 3;
  // used for deprecated field names
  reserved "include_item_count";
  // business id
  google.protobuf.StringValue business_id = 1;
  // store id
  google.protobuf.StringValue store_id = 2;
  // if true, returns whether the category has items
  google.protobuf.BoolValue include_category_item_check = 4;
}

// Categories Response
message GetCategoriesResponse {
  // categories
  repeated RetailCategory categories = 1;
}

// Category Obj
message RetailCategory {
  reserved 3;
  // used for deprecated field names
  reserved "item_count";
  // category id
  google.protobuf.StringValue id = 1;
  // category name
  google.protobuf.StringValue name = 2;
  // category has items
  google.protobuf.BoolValue has_items = 4;
}

// Search Request
message GetSearchResultsRequest {
  // business id
  google.protobuf.StringValue business_id = 1;
  // store id
  google.protobuf.StringValue store_id = 2;
  // search query string
  google.protobuf.StringValue query_string = 3;
  // limit results
  google.protobuf.Int32Value limit = 4;
}

// Search Response
message GetSearchResultsResponse {
  // items
  repeated RetailStoreItem items = 1;
}

// Retail Item Obj
message RetailStoreItem {
  // item id
  google.protobuf.StringValue item_id = 1;
  // item name
  google.protobuf.StringValue item_name = 2;
  // item merchant supplied id
  google.protobuf.StringValue item_merchant_supplied_id = 3;
  // item price
  google.protobuf.Int32Value price_unit_amount = 4;
  // item image url
  google.protobuf.StringValue image_url = 5;
}
