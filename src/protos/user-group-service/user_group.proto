syntax = "proto3";

package user_group_service.v1;

import "doordash.api/annotations.proto";
import "doordash.api/client.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_outer_classname = "UserGroupServiceApi";
option java_package = "com.doordash.rpc.user_group_service.v1";

// UserGroupService endpoints
service UserGroupService {
  option (doordash.api.service) = {
    name: "talleyrand-controller"
    url: "talleyrand-controller-web.service.prod.ddsd"
    port: 80
    name_spaces: ["talleyrand-controller"]
    owner: {
      id: "dynamic-values-alerts"
      name: "app-decision-systems"
      slack_channel: "#team-decision-systems"
      email_alias: "team-decision-systems@doordash.com"
    }
    target_products: [INTERNAL]
  };

  // get user group by id
  rpc GetUserGroup(GetUserGroupRequest) returns (GetUserGroupResponse) {
    option (google.api.http) = {
      post: "/talleyrand-controller/v1/get-user-group"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [DD_USER]
      target_products: [INTERNAL]
    };
  }
  // get user groups by an array of ids
  rpc GetUserGroups(GetUserGroupsRequest) returns (GetUserGroupsResponse) {
    option (google.api.http) = {
      post: "/talleyrand-controller/v1/get-user-groups"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [DD_USER]
      target_products: [INTERNAL]
    };
  }
  // list user groups via pagination
  rpc ListUserGroups(ListUserGroupsRequest) returns (ListUserGroupsResponse) {
    option (google.api.http) = {
      post: "/talleyrand-controller/v1/list-user-groups"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [DD_USER]
      target_products: [INTERNAL]
    };
  }
  // update user group
  rpc UpdateUserGroup(UpdateUserGroupRequest) returns (UpdateUserGroupResponse) {
    option (google.api.http) = {
      post: "/talleyrand-controller/v1/update-user-group"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [DD_USER]
      target_products: [INTERNAL]
    };
  }
  // create user group and members
  rpc CreateUserGroup(CreateUserGroupRequest) returns (CreateUserGroupResponse) {
    option (google.api.http) = {
      post: "/talleyrand-controller/v1/create-user-group"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [DD_USER]
      target_products: [INTERNAL]
    };
  }
  // List users for typeahead
  rpc ListUsers(ListUsersRequest) returns (ListUsersResponse) {
    option (google.api.http) = {
      post: "/talleyrand-controller/v1/list-users"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [DD_USER]
      target_products: [INTERNAL]
    };
  }
  // add individual group member
  rpc AddUserGroupMember(AddUserGroupMemberRequest) returns (AddUserGroupMemberResponse) {
    option (google.api.http) = {
      post: "/talleyrand-controller/v1/add-user-group-member"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [DD_USER]
      target_products: [INTERNAL]
    };
  }
  // bulk add group members
  rpc BulkAddUserGroupMembers(BulkAddUserGroupMembersRequest) returns (BulkAddUserGroupMembersResponse) {
    option (google.api.http) = {
      post: "/talleyrand-controller/v1/bulk-add-user-group-members"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [DD_USER]
      target_products: [INTERNAL]
    };
  }
  // bulk remove group members
  rpc BulkRemoveUserGroupMembers(BulkRemoveUserGroupMembersRequest) returns (BulkRemoveUserGroupMembersResponse) {
    option (google.api.http) = {
      post: "/talleyrand-controller/v1/bulk-remove-user-group-members"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [DD_USER]
      target_products: [INTERNAL]
    };
  }
  // update individual group member
  rpc UpdateUserGroupMember(UpdateUserGroupMemberRequest) returns (UpdateUserGroupMemberResponse) {
    option (google.api.http) = {
      post: "/talleyrand-controller/v1/update-user-group-member"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [DD_USER]
      target_products: [INTERNAL]
    };
  }
  // remove individual group member
  rpc RemoveUserGroupMember(RemoveUserGroupMemberRequest) returns (RemoveUserGroupMemberResponse) {
    option (google.api.http) = {
      post: "/talleyrand-controller/v1/remove-user-group-member"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [DD_USER]
      target_products: [INTERNAL]
    };
  }
}

// User Group definition
message UserGroup {
  // User group uuid
  string id = 1;
  // user group name
  google.protobuf.StringValue name = 2;
  // user group description
  google.protobuf.StringValue description = 3;
  // user group created at timestamp
  google.protobuf.Timestamp created_at = 4;
  // user group updated at timestamp
  google.protobuf.Timestamp updated_at = 5;
  // list of user group members
  repeated GroupMember group_members = 6;
  // group slack channel id
  google.protobuf.StringValue slack_channel_id = 7;
}

// User definition
message User {
  // user string id
  google.protobuf.StringValue id = 1;
  // user name
  google.protobuf.StringValue name = 2;
  // Email of user. Currently, at Doordash, there is no stable ID of a user.
  // Email is the best we have. Use this as the identifier.
  google.protobuf.StringValue email = 3;
  // Human friendly full name of the user.
  google.protobuf.StringValue preferred_full_name = 4;
  // First name
  google.protobuf.StringValue first_name = 5;
  // GoCleary ID e.g. 13255
  google.protobuf.StringValue gocleary_id = 6;
  // Slack Username.
  google.protobuf.StringValue slack_name = 7;
  // Github Username.
  google.protobuf.StringValue github_name = 8;
  // Jira Username (If it exists).
  google.protobuf.StringValue jira_name = 9;
  // Pagerduty ID.
  google.protobuf.StringValue pagerduty_id = 10;
  // Title
  google.protobuf.StringValue title = 11;
  // The city that they work from.
  google.protobuf.StringValue city = 12;
  // url to a user profile pic
  google.protobuf.StringValue display_pic_url = 13;
  // The type of worker. e.g. 'Employee' or 'Contingent Worker'
  google.protobuf.StringValue worker_type = 14;
  // Their preferred pronoun
  google.protobuf.StringValue pronoun = 15;
  // The start date of the employee.
  google.protobuf.Timestamp start_date = 16;
  // Timezone of the user e.g. 'America/New_York'
  google.protobuf.StringValue current_timezone = 17;
  // Slack id
  google.protobuf.StringValue slack_id = 18;
}

// Group member definition
message GroupMember {
  // user group role
  google.protobuf.StringValue role = 1;
  // user attributes
  User user = 2;
}

// paginated request for list endpoints
message Pagination {
  // items in list
  int32 page_size = 1;
  // page in list
  int32 page_number = 2;
  // total pages
  int32 total_pages = 3;
  // total items
  int32 total_items = 4;
}

// request for GetUserGroup
message GetUserGroupRequest {
  // user group uuid
  string id = 1;
}

// response for GetUserGroup
message GetUserGroupResponse {
  // user group
  UserGroup user_group = 1;
}

// request for GetUserGroups
message GetUserGroupsRequest {
  // user group uuids
  repeated string ids = 1;
  // user group names
  repeated string names = 2;
}

// response for GetUserGroups
message GetUserGroupsResponse {
  // user groups
  repeated UserGroup user_groups = 1;
}

// Request for ListUserGroups
message ListUserGroupsRequest {
  // fields to filter on
  enum Field {
    // unspecified
    FIELD_UNSPECIFIED = 0;
    // name
    FIELD_NAME = 1;
  }

  // filter
  message Filter {
    // field type
    Field field = 1;
    // field value
    string value = 2;
  }

  // page number
  google.protobuf.Int32Value page = 1;
  // page size
  google.protobuf.Int32Value size = 2;
  // filters
  repeated Filter filter = 3;
}

// Response for ListUserGroups
message ListUserGroupsResponse {
  // pagination
  Pagination pagination = 1;
  // list of user groups
  repeated UserGroup user_groups = 2;
}

// Request for ListUsers
message ListUsersRequest {
  // fields to filter on
  enum Field {
    // unspecified
    FIELD_UNSPECIFIED = 0;
    // name
    FIELD_NAME = 1;
    // prefered full name retured by asset service
    FIELD_PREFERRED_FULL_NAME = 2;
  }

  // filter
  message Filter {
    // field type
    Field field = 1;
    // field value
    string value = 2;
  }
  // page number
  google.protobuf.Int32Value page = 1;
  // page size
  google.protobuf.Int32Value size = 2;
  // filters
  repeated Filter filters = 3;
}

// Response for ListUsers
message ListUsersResponse {
  // pagination
  Pagination pagination = 1;
  // list of users
  repeated User users = 2;
}

// Request for CreateUser
message CreateUserRequest {
  // User name
  string name = 1;
  // user email
  string email = 2;
}

// Response for CreateUser
message CreateUserResponse {
  // user
  User user = 1;
}

// Request for CreateUserGroup
message CreateUserGroupRequest {
  // user group name
  google.protobuf.StringValue name = 1;
  // user group description
  google.protobuf.StringValue description = 2;
  // initial user group members
  repeated GroupMember group_members = 3;
  // group slack channel id
  google.protobuf.StringValue slack_channel_id = 4;
}

// Response for CreateUserGroup
message CreateUserGroupResponse {
  // UserGroup
  UserGroup user_group = 1;
}

// Request for UpdateUserGroup
message UpdateUserGroupRequest {
  // user group uuid
  string id = 1;
  // group name
  google.protobuf.StringValue name = 2;
  // group description
  google.protobuf.StringValue description = 3;
  // members of the user group
  repeated GroupMember group_members = 4;
  // group slack channel id
  google.protobuf.StringValue slack_channel_id = 5;
}

// Response for UpdateUserGroup
message UpdateUserGroupResponse {
  // user group
  UserGroup user_group = 1;
}

// Request for AddUserGroupMember
message AddUserGroupMemberRequest {
  // user group uuid
  string user_group_id = 1;
  // group member
  GroupMember group_member = 2;
}

// Response for AddUserGroupMember
message AddUserGroupMemberResponse {
  // group member
  GroupMember group_member = 1;
}

// Request for BulkAddUserGroupMembersRequest
message BulkAddUserGroupMembersRequest {
  // user group id
  string user_group_id = 1;
  // list of group members
  repeated GroupMember group_members = 2;
}

// Response for BulkAddUserGroupMembers
message BulkAddUserGroupMembersResponse {
  // group member
  repeated GroupMember group_member = 1;
}

// Request for UpdateUserGroupMember
message UpdateUserGroupMemberRequest {
  // user_group_uuid
  string user_group_id = 1;
  // user uuid
  string user_id = 2;
  // role
  string role = 3;
}

// Response for UpdateUserGroupMember
message UpdateUserGroupMemberResponse {
  // group member
  GroupMember group_member = 1;
}

// Request RemoveUserGroupMember
message RemoveUserGroupMemberRequest {
  // user_group uuid
  string user_group_id = 1;
  // user uuid
  string user_id = 2;
}

// Response RemoveUserGroupMember
message RemoveUserGroupMemberResponse {}

// Request BulkRemoveUserGroupMembers
message BulkRemoveUserGroupMembersRequest {
  // user_group uuid
  string user_group_id = 1;
  // user uuid
  repeated string user_id = 2;
}

// Response BulkRemoveUserGroupMember
message BulkRemoveUserGroupMembersResponse {}
