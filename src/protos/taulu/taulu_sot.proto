syntax = "proto3";

package taulu.v1;

import "taulu/taulu_types.proto";

option go_package = "github.com/doordash/services-protobuf/generated/taulu";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.taulu";

// The source of truth that is shared with argo workflows to operate on a taulu table
message SourceOfTruth {
  // The table definition (schema)
  TableDefinition table_definition = 1;

  // Services that will be accessing the table
  repeated Service clients = 2;

  // The environment that the SOT will be applied to
  Environment environment = 3;

  // Information about the version that will be deployed
  VersionInfo version_info = 4;
}

// Service
message Service {
  // name
  string name = 1;
}

// Specifies the type of an environment
enum EnvironmentType {
  // Unspecified environment type
  ENVIRONMENT_TYPE_UNSPECIFIED = 0;
  // Environment that is used for testing
  ENVIRONMENT_TYPE_TESTING = 1;
  // Environment that is used for production
  ENVIRONMENT_TYPE_PRODUCTION = 2;
}

// Environment specifies the environment in which a Taulu table is deployed
message Environment { // TODO(dakota): consider renaming "Environment" to "Supercluster"
  // The name of the environment
  string name = 1;
  // The type of the environment
  EnvironmentType type = 2;
  // The clusters in the environment
  repeated Cluster clusters = 3;
}

// Cluster specifies the data required to connect to a cluster
message Cluster {
  // Cluster specific hidden columns that are added to the schema
  repeated ColumnDefinition columns = 1;
  // Cert manager certificates
  repeated ClusterCert certs = 2;
  // The type of the cluster
  oneof config {
    // Specifies the data required to connect to a CRDB cluster
    CRDBClusterConfig crdb = 3;
    // Specifies the data required to connect to a Cassandra cluster
    CassandraClusterConfig cassandra = 4;
  }
}

// CRDBClusterConfig specifies the data required to connect to a CRDB cluster
message CRDBClusterConfig {
  // The url should encode all the data needed to connect to a cluster
  string url = 1;
  // The change feed url
  string change_feed_url = 2;
}

// CassandraClusterConfig specifies the data required to connect to a Cassandra cluster
message CassandraClusterConfig {
  // The url should encode all the data needed to connect to a cluster
  string url = 1;
  // The table's keyspace in this cluster
  string keyspace = 2;
}

// Cert manager cluster certificate information
message ClusterCert {
  // Certificate endpoint name
  string endpoint = 1;
  // Certificate subject name
  string subject_name = 2;
}

// VersionInfo specifies information about the version that will be deployed
message VersionInfo {
  // The UUID of the version
  string uuid = 1;
  // The semver of the version (empty string if no semver assigned)
  string semver = 2;
}

// TableDefinition
message TableDefinition {
  // The name of the table
  string name = 1;

  // The table columns
  repeated ColumnDefinition columns = 2;

  // The primary key
  PrimaryKeyDefinition primary_key = 4;

  // Secondary indexes
  repeated IndexDefinition indexes = 5;
}

// PrimaryKeyDefinition
message PrimaryKeyDefinition {
  // The names of the columns contained in the partition key
  repeated string partition_columns = 1;

  // The names of the columns contained in the sort key
  repeated string sort_columns = 2;

  // Defines the clustering order for the table, specifying sorting direction (ASC or DESC) for each column in sort key.
  repeated OrderBy sort_columns_order = 3;
}

// IndexDefinition
message IndexDefinition {
  // A unique identifier for this index (as hex-formatted UUID string) which will be used to generate it's name
  string uuid = 1;

  // The names of the columns contained in the index
  repeated string columns = 2;

  // Whether it's a unique index
  bool is_unique = 3;
}

// ColumnDefinition
message ColumnDefinition {
  // The name of the column. This uniquely identifies the column within the table
  string name = 1;

  // The type of the column's value
  Type type = 2;

  // If this column contains PII
  bool pii = 3;
}
