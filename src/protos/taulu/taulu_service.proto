syntax = "proto3";

package taulu.v1;

import "google/protobuf/wrappers.proto";
import "taulu/taulu_entities.proto";
import "taulu/taulu_sot.proto";

option go_package = "github.com/doordash/services-protobuf/generated/taulu";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.taulu";

// TauluService is the GRPC service for the Taulu web API
service TauluService {
  // Creates a new table. Table is a container for a specific schema.
  rpc CreateTable(CreateTableRequest) returns (CreateTableResponse);
  // Retrieves a single table.
  rpc GetTable(GetTableRequest) returns (GetTableResponse);
  // Edits a single table.
  rpc EditTable(EditTableRequest) returns (EditTableResponse);
  // List all Taulu tables. Optional pagination. Optional current version info included.
  rpc ListTables(ListTablesRequest) returns (ListTablesResponse);
  // Deletes a single table.
  rpc DeleteTable(DeleteTableRequest) returns (DeleteTableResponse);

  // Creates a new version. Every time a change is made a new version is created. Akin to a git commit.
  rpc CreateVersion(CreateVersionRequest) returns (CreateVersionResponse);
  // Retrieves a single version.
  rpc GetVersion(GetVersionRequest) returns (GetVersionResponse);
  // Lists versions for a single table.
  rpc ListVersions(ListVersionsRequest) returns (ListVersionsResponse);

  // Gets all the currently deployed versions for a table in each environment
  rpc ListCurrentVersions(ListCurrentVersionsRequest) returns (ListCurrentVersionsResponse);

  // Deploys a version of a table to an environment.
  rpc Deploy(DeployRequest) returns (DeployResponse);
  // Gets deployments by filters.
  rpc ListDeployments(ListDeploymentsRequest) returns (ListDeploymentsResponse);
  // Allows argo to update the status of a deployment.
  rpc ArgoWorkflowCallback(ArgoWorkflowCallbackRequest) returns (ArgoWorkflowCallbackResponse);

  // Lists tags for a version
  rpc ListTags(ListTagsRequest) returns (ListTagsResponse);
}

// CreateTableRequest ...
message CreateTableRequest {
  // Table name
  string name = 1;
  // Table description
  string description = 2;
  // Service that owns the table
  string service = 3;
  // List of owners or owner groups
  repeated string owners = 4;
}

// CreateTableResponse ...
message CreateTableResponse {
  // UUID of the created table
  string table_uuid = 1;
  // Name of the created table, for convenience
  string table_name = 2;
}

// GetTableRequest ...
message GetTableRequest {
  // UUID of the table to retrieve
  string table_uuid = 1;
}

// GetTableResponse ...
message GetTableResponse {
  // Retrieved table entity
  TableEntity table = 1;
}

// EditTableRequest ...
message EditTableRequest {
  // UUID of the table to edit
  string table_uuid = 1;
  // Table name NOT EDITABLE AFTER CREATION
  // google.protobuf.StringValue name = 2;
  // Table description
  /*optional*/
  google.protobuf.StringValue description = 3;
  // Service that owns the table NOT EDITABLE AFTER CREATION
  // google.protobuf.StringValue service = 4;
  // List of owners or owner groups
  repeated string owners = 5;
}

// EditTableResponse ...
message EditTableResponse {
  // UUID of the created table
  string table_uuid = 1;
  // Name of the created table, for convenience
  string table_name = 2;
}

// DeleteTableRequest ...
message DeleteTableRequest {
  // UUID of the table to delete
  string table_uuid = 1;
}

// DeleteTableResponse ...
message DeleteTableResponse {
  // Response is intentionally empty
}

// ListTablesRequest ...
message ListTablesRequest {
  // Optional pagination offset
  /*optional*/
  google.protobuf.UInt64Value offset = 1;
  // Optional pagination limit
  /*optional*/
  google.protobuf.UInt64Value limit = 2;
  // Optionaly include current versions
  /*optional*/
  google.protobuf.BoolValue include_current_versions = 3;
}

// ListTablesResponse ...
message ListTablesResponse {
  // TableWithCurrentVersion ...
  message TableWithCurrentVersion {
    // Table entity
    TableEntity table = 1;
    // Optional current version entity
    /*optional*/
    CurrentVersionEntity current_version = 2;
  }
  // List of retrieved tables
  repeated TableWithCurrentVersion tables = 1;
}

// CreateVersionRequest ...
message CreateVersionRequest {
  // UUID of the table to create a version for
  string table_uuid = 1;
  // The UUID of the parent version. If this is the first version, this field should be empty.
  /*optional*/
  google.protobuf.StringValue parent_version_uuid = 2;
  // The definition of the table for this version
  TableDefinition table_definition = 3;
}

// CreateVersionResponse ...
message CreateVersionResponse {
  // UUID of the created version
  string version_uuid = 1;
}

// GetVersionRequest ...
message GetVersionRequest {
  // UUID of the version to retrieve
  string version_uuid = 1;
}

// GetVersionResponse ...
message GetVersionResponse {
  // Retrieved version entity
  VersionEntity version = 1;
}

// ListVersionsRequest ...
message ListVersionsRequest {
  // UUID of the table to list versions for
  string table_uuid = 1;
  // Optional pagination offset
  /*optional*/
  google.protobuf.UInt64Value offset = 2;
  // Optional pagination limit
  /*optional*/
  google.protobuf.UInt64Value limit = 3;
}

// ListVersionsResponse ...
message ListVersionsResponse {
  // List of retrieved versions
  repeated VersionEntity versions = 1;
}

// ListCurrentVersionsRequest ...
message ListCurrentVersionsRequest {
  // UUID of the table to list current versions for
  string table_uuid = 1;
}

// ListCurrentVersionsResponse ...
message ListCurrentVersionsResponse {
  // List of retrieved current versions
  repeated CurrentVersionEntity current_versions = 1;
}

// DeployRequest ...
message DeployRequest {
  // UUID of the version to deploy
  string version_uuid = 1;
  // Name of the environment to deploy the version to
  string environment = 2;
}

// DeployResponse ...
message DeployResponse {
  // UUID of the created deployment
  string deployment_uuid = 1;
}

// ListDeploymentsRequest ...
message ListDeploymentsRequest {
  // UUID of the table to retrieve deployments for
  string table_uuid = 1;
  // Optional UUID of the version to retrieve deployments for
  /*optional*/
  google.protobuf.StringValue version_uuid = 2;
  // Optional status of the deployments to retrieve
  /*optional*/
  google.protobuf.StringValue argo_workflow_status = 3;
  // Optional environment of the deployments to retrieve
  /*optional*/
  google.protobuf.StringValue environment = 4;
}

// ListDeploymentsResponse ...
message ListDeploymentsResponse {
  // List of retrieved deployments
  repeated DeploymentEntity deployments = 1;
}

// ArgoWorkflowCallbackRequest ...
message ArgoWorkflowCallbackRequest {
  // Name of the Argo workflow to update the status of
  string argo_workflow_name = 1;
  // The new status of the Argo workflow
  string argo_workflow_status = 2;
}

// ArgoWorkflowCallbackResponse ...
message ArgoWorkflowCallbackResponse {
  // Empty
}

// ListTagsRequest ...
message ListTagsRequest {
  // UUID of the version to list tags for
  string version_uuid = 1;
  // Optional pagination offset
  google.protobuf.UInt64Value offset = 2;
  // Optional pagination limit
  google.protobuf.UInt64Value limit = 3;
}

// ListTagsResponse ...
message ListTagsResponse {
  // A list of tags in semver format
  repeated string tags = 1;
}
