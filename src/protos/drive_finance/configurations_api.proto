syntax = "proto3";

// To prevent name collision "inside" of protobuf project
// The package of the generated code will be overwritten by java_package
// buf:lint:ignore DIRECTORY_SAME_PACKAGE
package drive_configuration_service.v1;

// It is suggested to start package name with com.doordash.drive.grpc
// The reason is that, a message name might be conflict with a class name defined in application code,
// without the name "rpc", it would be hard to pick the correct one from the hints provided by your IDE.
option java_package = "com.doordash.drive.grpc.finance";

// This defines the name of the "wrapper class", whch is usually not used at all when java_multiple_files=true.
// If not defined, it will be generated based on your .proto filename, which might not be good due to conflict names.
// So, for drive_golden.proto file, we call it DriveGoldenProtos
option java_outer_classname = "DriveConfigurationProtos";

// With is set to true, each "service" definition will be in its own class, instead of being nested into "wrapper class"
// This is suggested to be set to true
option java_multiple_files = true;

// Please set to true when service definition exists in this proto
option java_generic_services = true;

import "google/protobuf/wrappers.proto";
import "drive_finance/config_types.proto";
import "drive_finance/common.proto";
import "google/protobuf/field_mask.proto";

// Drive finance configuration api. note: this is fundamentally different from the drive_protobuf config api.
service DriveConfigurationsApiService {
  // Create a new configuration
  rpc CreateConfiguration (CreateConfigurationRequest) returns (CreateConfigurationResponse);
  // Get a configuration. This will get the actual configuration attached to the related entity and not
  // fully build out the configuration chain. eg: if I'm getting a store config, we will not look at business or
  // developer.
  rpc GetConfiguration (GetConfigurationRequest) returns (GetConfigurationResponse);
  // Get an applied configuration, a configuration with all inheritance applied to it.
  // eg: if I'm getting a store, we will look at the relevant business and developer configs and merge together
  rpc GetAppliedConfiguration (GetAppliedConfigurationRequest) returns (GetAppliedConfigurationResponse);
}

// Create a new configuration for a given entity id and type
message CreateConfigurationRequest {
  // Related entity ID, the Id of the drive element we are attaching it to. Required.
  google.protobuf.StringValue related_entity_id = 1;
  // The entity type. Required.
  finance.common.v1.EntityType related_entity_type = 2;
  // Configuration Type Wrapper
  drive_config_types.v1.ConfigurationTypes configuration_types = 3;
  // The user ID of the user making this change. Required.
  google.protobuf.StringValue user_id = 5;
  // which service is doing the creation
  CreateMethod create_method = 6;
  // The flag indicates user has admin privileges.
  google.protobuf.BoolValue admin_user_flag = 7;
}

// Create a new configuration for a given entity id and type
message CreateConfigurationResponse {
  // data
  Result data = 2;
}

// Get a configuration. This will get the actual configuration attached to the related entity and not
// fully build out the configuration chain. eg: if I'm getting a store config, we will not look at business or
// developer.
message GetConfigurationRequest {
  // Related entity ID, the UUID of the drive element we are attaching it to.
  google.protobuf.StringValue related_entity_id = 1;
  // The entity type
  finance.common.v1.EntityType related_entity_type = 2;
  // This field mask will only select config types that are passed into the mask
  // If no mask is passed in, we will select every config attached to the related entity
  // see: https://developers.google.com/protocol-buffers/docs/reference/java/com/google/protobuf/FieldMask.html
  google.protobuf.FieldMask field_mask = 3;
  // The user ID of the user getting the configuration.
  google.protobuf.StringValue user_id = 4;
  // The flag indicates user has admin privileges.
  google.protobuf.BoolValue admin_user_flag = 5;
}

// Get a configuration
message GetConfigurationResponse {
  // data
  Result data = 2;
}

// Get an applied configuration, a configuration with all inheritance applied to it.
// eg: if I'm getting a store, we will look at the relevant business and developer configs and merge together
message GetAppliedConfigurationRequest {
  // Related entity ID, the UUID of the drive element we are attaching it to.
  google.protobuf.StringValue related_entity_id = 1;
  // The entity type
  finance.common.v1.EntityType related_entity_type = 2;
  // This field mask will only select config types that are passed into the mask
  // If no mask is passed in, we will select every config attached to the related entity
  // see: https://developers.google.com/protocol-buffers/docs/reference/java/com/google/protobuf/FieldMask.html
  google.protobuf.FieldMask field_mask = 3;
  // The user ID of the user getting the configuration.
  google.protobuf.StringValue user_id = 4;
  // The flag indicates user has admin privileges.
  google.protobuf.BoolValue admin_user_flag = 5;
}

// Get a merged configuration
message GetAppliedConfigurationResponse {
    // data
    Result data = 2;
}

// Get the final configuration for a given store
message GetMergedConfigurationRequest {
  // store UUID
  google.protobuf.StringValue store_id = 1;
}

// Get the merged configuration
message GetMergedConfigurationResponse {
  // data
  Result data = 2;
}

// Result data holder
message Result {
  // Related entity ID, the UUID of the drive element we are attaching it to.
  google.protobuf.StringValue related_entity_id = 1;
  // The entity type
  finance.common.v1.EntityType related_entity_type = 2;
  // Configuration Type Wrapper
  drive_config_types.v1.ConfigurationTypes configuration_types = 3;
}

// Which service or tool created this config change
enum CreateMethod {
  // Nothing, will break
  CREATE_METHOD_UNSPECIFIED = 0;
  // Developer Portal
  CREATE_METHOD_DEVELOPER_PORTAL = 1;
  // Merchant portal
  CREATE_METHOD_MERCHANT_PORTAL = 2;
}
