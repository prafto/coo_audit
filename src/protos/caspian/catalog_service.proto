syntax = "proto3";

package caspian.v1;

import "caspian/catalog.proto";
import "common/code.proto";
import "google/protobuf/wrappers.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.caspian";

// Service for managing Caspian Catalog
service CatalogService {
  // Create or Update a database in Data Lake
  rpc CreateUpdateDatabase(CreateUpdateDatabaseRequest) returns (CreateUpdateDatabaseResponse);
  // Get a database in Data Lake
  rpc GetDatabase(GetDatabaseRequest) returns (GetDatabaseResponse);
  // Create a Snowflake Iceberg table
  rpc RegisterIcebergTableInCatalogs(RegisterIcebergTableInCatalogsRequest) returns (RegisterIcebergTableInCatalogsResponse);
  // Get all snowflake tables by source catalog
  rpc GetSnowflakeRegistrationStatusByCatalog(GetSnowflakeRegistrationStatusByCatalogRequest) returns (GetSnowflakeRegistrationStatusByCatalogResponse);
  // Delete a Catalog registration entry
  rpc DeleteCatalogRegistration(DeleteCatalogRegistrationRequest) returns (DeleteCatalogRegistrationResponse);
  // Upload a Glue to Snowflake mapping entry
  rpc CreateCatalogMapping(CreateCatalogMappingRequest) returns (CreateCatalogMappingResponse);
}

// Currently supported catalog types
enum CatalogType {
  // Default
  CATALOG_TYPE_UNSPECIFIED = 0;

  // AWS Glue Catalog
  CATALOG_TYPE_GLUE = 1;

  // Snowflake Catalog
  CATALOG_TYPE_SNOWFLAKE = 2;

  // UC Catalog
  CATALOG_TYPE_UC = 3;
}

// Catalog registration status
enum CatalogRegistrationStatus {
  // Default
  CATALOG_REGISTRATION_STATUS_UNSPECIFIED = 0;

  // Catalog registration is successful
  CATALOG_REGISTRATION_STATUS_REGISTERED = 1;

  // Catalog registration failed
  CATALOG_REGISTRATION_STATUS_FAILED = 2;

  // Catalog registration is in progress
  CATALOG_REGISTRATION_STATUS_IN_PROGRESS = 3;

  // Catalog registration succeeded
  CATALOG_REGISTRATION_STATUS_SUCCEEDED = 4;
}

// Request for Create or Update a Database
message CreateUpdateDatabaseRequest {
  // Database name
  google.protobuf.StringValue database_name = 1;
  // S3 Location of the database
  google.protobuf.StringValue location = 2;
  // A description of the database.
  google.protobuf.StringValue description = 3;
}

// Response for Create or Update Database
message CreateUpdateDatabaseResponse {
  // Create or Update Database
  Database database = 1;
}

// Request for Get a Database
message GetDatabaseRequest {
  // Database name
  google.protobuf.StringValue database_name = 1;
}

// Response for Get a Database
message GetDatabaseResponse {
  // Databse object for a database within Data Lake
  Database database = 1;
}

// Register Iceberg table from source catalog to target catalogs
message RegisterIcebergTableInCatalogsRequest {
  // source catalog of the table
  CatalogType source = 1;

  // target catalogs
  repeated CatalogType target_catalogs = 2;

  // Specs for Snowflake Catalog
  SnowflakeSpec snowflake_spec = 3;
}

// Response for register iceberg table in catalog
message RegisterIcebergTableInCatalogsResponse {
  // the snowflake query id that was executed
  string snowflake_query_id = 1;

  // the snowflake catalog registration status
  CatalogRegistrationStatus snowflake_catalog_registration_status = 2;
}

// Information needed to register an iceberg table in Snowflake
message SnowflakeSpec {
  // snowflake full table path. In format of <db>.<schema>.<table>
  string snowflake_full_table_path = 1;

  // catalog name
  string catalog = 2;

  // catalog namespace
  string catalog_namespace = 3;

  // catalog table name
  string catalog_table_name = 4;

  // external volume
  string external_volume = 5;
}

// Entry to be deleted
message DeleteCatalogRegistrationRequest {
  // catalog namespace
  string catalog_namespace = 1;

  // catalog table name
  string catalog_table_name = 2;

  // source catalog of the table
  CatalogType source = 3;
}

// Snowflake catalog registration status
message SnowflakeCatalogRegistrationStatus {
  // snowflake table path
  string snowflake_table_path = 1;

  // snowflake catalog registration status
  CatalogRegistrationStatus snowflake_catalog_registration_status = 2;
}

// Request for get all snowflake unmanaged iceberg tables by catalog
message GetSnowflakeRegistrationStatusByCatalogRequest {
  // source catalog
  CatalogType source_catalog = 1;
}

// Response for get all snowflake unmanaged iceberg tables by catalog
message GetSnowflakeRegistrationStatusByCatalogResponse {
  // list of catalog registration status
  repeated SnowflakeCatalogRegistrationStatus snowflake_catalog_registration_status = 1;
}

// response of the deletion
message DeleteCatalogRegistrationResponse {
  // delete catalog registration response
  code.Code result = 1;
}

// request for create a new catalog mapping
message CreateCatalogMappingRequest {
  // source catalog
  CatalogType source_catalog = 1;

  // identifier of the dataset in source catalog
  string source_id = 2;

  // snowflake database - required if the mapping is for Glue -> Snowflake
  string snowflake_database = 3;

  // snowflake schema - required if the mapping is for Glue -> Snowflake
  string snowflake_schema = 4;

  // snowflake external volume - required if the mapping is for Glue -> Snowflake
  string snowflake_external_volume = 5;

  // snowflake catalog integration - required if the mapping is for Glue -> Snowflake
  string snowflake_catalog_integration = 6;
}

// response for create a new catalog mapping
message CreateCatalogMappingResponse {
  // status of the call
  code.Code result = 1;
}
