syntax = "proto3";

package testsmetadata.v1;

import "testsmetadata/testsmetadata_tests_common.proto";

option java_multiple_files = true;
option java_package = "com.doordash.testsmetadata.v1";

// FailureDetails
message FailureDetails {
  // More details that describing the failure
  string failure_description = 1;
  //  Stack trace of the failed test
  // IMPORTANT: should be truncated to some reasonable length
  string stack_trace = 2;

  // Path to a failure description of the failed test
  RelativePath failure_description_path = 9;

  // Path to a stack trace of the failed test
  RelativePath stack_trace_path = 10;
}

// Test outcome
message TestOutcome {
  // Tests outcome (passed/failed/skipped/errored/unknown)
  string test_outcome = 1;

  // If applicable, the standard output of the test
  // IMPORTANT: should be truncated to some reasonable length
  string standard_out = 2;

  // If applicable, the standard error of the test
  // IMPORTANT: should be truncated to some reasonable length
  string standard_err = 3;

  // If applicable, a short summary of why the test failed/skipped/etc
  string reason = 4;

  // A more detailed explanation of why the test failed
  FailureDetails failure_details = 5;

  // Path to a standard output of the test
  RelativePath standard_out_path = 10;
  // Path to a standard error of the test
  RelativePath standard_err_path = 11;
}

// End to end test result (test suite) options
message EndToEndOptions {
  reserved 1;
  reserved "max_parallelization";

  // The metadata associated with the test attempt.
  TestAttemptMetadata test_attempt_metadata = 2;

  // The metadata associated with the test itself.
  TestMetadata test_metadata = 3;
}

// TestAttemptMetadata contains the metadata for an individual attempt of an E2E test.
// This metadata holds values that are relevant within the execution of the attempt itself.
message TestAttemptMetadata {
  // The tenant ID used in the execution of the attempt.
  string tenant_id = 1;

  // The Dynamic Value overrides used in the execution of the attempt.
  map<string, string> dynamic_value_overrides = 2;

  // The Routing Contexts used in the execution of the attempt.
  repeated RoutingContext routing_contexts = 3;

  // The randomly generated TraceID for the execution of the attempt.
  string trace_id = 4;

  // The runtime overrides used in the execution of the attempt.
  map<string, string> runtime_overrides = 5;

  // dd-market-id used in the execution of the attempt.
  string dd_market_id = 6;
}

// TestMetadata contains the metadata for an E2E test. An E2E may have none, or many attempts associated.
message TestMetadata {
  reserved 7;
  reserved 'is_non_blocking';

  // The retry policy utilized for the execution of this test.
  RetryPolicy retry_policy = 6;

  // If the test is a critical test.
  bool is_critical = 8;
}

// RoutingContext contains the routing context for a test attempt.
message RoutingContext {
  // The service to set the routing context of.
  string service = 1;

  // The app of the service to set the routing context of.
  string app = 2;

  // The hostname to route to.
  string host = 3;

  // The port to set the routing context of.
  string port = 4;
}

// RetryPolicy contains the retry policy for a test.
message RetryPolicy {
  // The policy itself.
  oneof policy {
    // IntervalRetryPolicy represents a retry policy that retries at a fixed interval.
    IntervalRetryPolicy interval_retry_policy = 1;

    // ExponentialBackoffRetryPolicy represents a retry policy that retries with exponential backoff.
    ExponentialBackoffRetryPolicy exponential_backoff_retry_policy = 2;
  }
}

// An interval retry policy.
message IntervalRetryPolicy {
  // The maximum number of attempts.
  int32 max_attempts = 1;

  // The delay between attempts in milliseconds.
  int32 interval_ms = 2;

  // If the test should be retried at the end of the main test run.
  bool retry_at_end = 3;
}

// An exponential backoff retry policy.
message ExponentialBackoffRetryPolicy {
  // The maximum number of attempts.
  int32 max_attempts = 1;

  // The initial interval in milliseconds.
  int32 initial_interval_ms = 2;

  // The multiplier for the interval.
  double multiplier = 3;

  // If the test should be retried at the end of the main test run.
  bool retry_at_end = 4;
}

// Test result event
message TestResultEvent {
  // Tests execution id
  TestsExecutionId tests_execution_id = 1;
  // Event's emitted time in ms
  int64 emitted_time_ms = 2;

  // Test name
  string test_name = 3;

  // Test display name ( It may be the same as or different from the test name.)
  string test_display_name = 4;

  // Name of the test suite (e.g. class name or folder name)
  string test_suite_name = 5;

  // Name of the test type (e.g. test case or test suite)
  string test_type = 6;

  // End to end test options (ex: specific options for tests suite)
  EndToEndOptions end_to_end_options = 8;

  // Name of test parent (e.g. for parameterized tests, the parent is the test suite that is equals to class name that contains the parameterized test)
  string parent_name = 7;

  // The file and line number where the test originates, separated by a colon (:) (e.g. ./tests/Dasher/DasherTest.kt:32)
  string location = 10;

  // The file where the test originates
  string file_name = 20;

  // Test execution started timestamp in ms
  int64 start_time = 30;

  // Test duration in ms
  int64 duration = 31;

  // If the test is a retry
  bool is_retry = 32;

  // Test outcome
  TestOutcome test_outcome = 40;

  // Concatenated list of test ancestors for Snowflake (e.g. for parameterized tests, the ancestors are the test suite and the test parent)
  string ancestry_names_string = 50;

  // List of test ancestors (e.g. for parameterized tests, the ancestors are the test suite and the test parent)
  repeated string ancestry_names = 51;
}
