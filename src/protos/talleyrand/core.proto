syntax = "proto3";
package talleyrand;

import "google/protobuf/timestamp.proto";
import "talleyrand/common.proto";

option java_multiple_files = true;
option java_package = "com.doordash.talleyrand.core";

// Talleyrand source
message Source {
  // Name
  string name = 1;
  // Alias
  string alias = 2;
  // Description
  string description = 3;
  // UserGroup Owner
  UserGroup owner = 4;
  // Tags
  repeated string tags = 5;
  // Identifiers
  repeated Identifier identifiers = 6;
  // Measures
  repeated Measure measures = 7;
  // Dimensions
  repeated Dimension dimensions = 8;
  // Compute Spec
  ComputeSpec compute_spec = 9;
  // Unique source Id
  string id = 10;
  // advanced
  map<string, string> advanced = 11;
  // owner emails
  repeated string owner_emails = 12;
  // Platform that defined this source
  PlatformType platform = 13;
  // User Group Owners
  repeated string group_owner_ids = 14;
  // Materialization
  SourceMaterializationSpec materialization_spec = 15;
  // Firefly settings
  FireflySourceSettings firefly_settings = 16;
  // Git config url
  string git_config_url = 17;
  // associations
  repeated SourceAssociation associations = 18;
  // failure notification methods
  FailureNotificationMethods failure_notification_methods = 19;
  // source insights
  SourceInsights insights = 20;
}

// MetricInsights
message MetricInsights {
  // number of experiments that used the metric in the last 90 days
  int32 experiment_count = 1;
  // popularity rank of the metric based on experiment usage
  int32 popularity_rank = 2;
  // overall popularity score of the metric
  double popularity_score = 3;
  // overall quality score of the metric
  double quality_score = 4;
  // overall efficiency score of the metric
  double efficiency_score = 5;
  // completion of sensitivity check of the metric
  int32 sensitivity_check = 6;
  // average experiment SQL latency in minutes
  int32 exp_sql_latency_minutes = 7;
  // average experiment success rate
  double exp_success_rate = 8;
  // costs associated with the metric in the last 90d
  double cost = 9;
}

// metric pack insights
message MetricPackInsights {
  // number of experiments that used the metric pack in the last 90 days
  int32 experiment_count = 1;
  // overall popularity score of the metric pack
  double popularity_score = 2;
  // popularity rank of the metric pack based on experiment usage
  int32 popularity_rank = 3;
  // overall quality score of the metric pack
  double quality_score = 4;
  // costs associated with the metric pack in the last 90d
  double cost = 5;
  // average experiment SQL latency in minutes
  int32 exp_sql_latency_minutes = 6;
  // average experiment success rate
  double exp_success_rate = 7;
}

// source insights
message SourceInsights {
  // number of experiments that used the source in the last 90 days
  int32 experiment_count = 1;
  // overall popularity score of the source
  double popularity_score = 2;
  // popularity rank of the source based on experiment usage
  int32 popularity_rank = 3;
  // overall quality score of the source
  double quality_score = 4;
  // costs associated with the source in the last 90d
  double cost = 5;
  // average experiment SQL latency in minutes
  int32 exp_sql_latency_minutes = 6;
  // average experiment success rate
  double exp_success_rate = 7;
}

// Metric
message Metric {
  reserved 28;
  reserved "impact_formulas";
  // name
  string name = 1;
  // alias
  string alias = 2;
  // description
  string description = 3;
  // UserGroup Owner
  UserGroup owner = 4;
  // Tags
  repeated string tags = 5;
  // Metric tier
  Tier tier = 6;
  // Metric type parameters
  MetricSpec metric_spec = 7;
  // advanced
  map<string, string> advanced = 8;
  // unique metric id
  string id = 9;
  // owner emails
  repeated string owner_emails = 10;
  // desired direction
  MetricDirectionality desired_direction = 11;
  // curie advanced settings
  CurieMetricSettings curie_settings = 12;
  // Identifiers
  repeated Identifier identifiers = 13;
  // window period in days (set only for window metric)
  int32 window = 14;
  // parent_metric_id (unique id of the main metric definition)
  string parent_metric_id = 15;
  // domain (currently set only for Firefly metrics)
  string domain = 16;
  // Firefly advanced settings
  FireflySettings firefly_settings = 17;
  // Platform that defined this metric
  PlatformType platform = 18;
  // User Group Owners
  repeated string group_owner_ids = 19;
  // Window Params for this metric
  WindowParams window_params = 20;
  // Window metrics derived from this metric
  repeated WindowMetric window_metrics = 21;
  // Git config url
  string git_config_url = 22;
  // Hubble metadata
  HubbleMetadata hubble_metadata = 23;
  // group
  string group = 24;
  // Business User Group Owners
  repeated string business_group_owner_ids = 25;
  // Insights
  MetricInsights insights = 26;
  // Filter Expression
  string filter_expr = 27;
  // impact formula
  repeated FormulaSet formula_sets = 29;
}

// Covariate
message Covariate {
  // Covariate Type
  enum CovariateType {
    // COVARIATE_TYPE_UNSPECIFIED
    COVARIATE_TYPE_UNSPECIFIED = 0;
    // COVARIATE_TYPE_METRIC
    COVARIATE_TYPE_METRIC = 1;
    // COVARIATE_TYPE_FORECAST
    COVARIATE_TYPE_FORECAST = 2;
  }
  // id
  string id = 1;
  // name
  string name = 2;
  // covariate_type
  CovariateType covariate_type = 3;
}

// CurieMetricSettings
message CurieMetricSettings {
  // name
  repeated int32 windows = 1;
  // covariate metric ids
  repeated string covariate_metric_ids = 2;
  // include entities without events
  bool include_entities_without_events = 3;
  // use global denominator
  bool use_global_denominator = 4;
  // covariates
  repeated Covariate covariates = 5;
  // use number of events as denominator for Curie
  bool use_entity_weighted_average = 6;
}

// FireflySourceSettings
message FireflySourceSettings {
  // FireflySourceAssociation
  message FireflySourceAssociation {
    // name
    string name = 1;
    // dimension_def
    string dimension_def = 2;
    // join_expr
    string join_expr = 3;
    // alias
    string alias = 4;
  }

  // Firefly source associations
  repeated FireflySourceAssociation associations = 1;
  // validation SQL
  string validation_sql = 2;
  // filter expression
  string filter_expr = 3;
  // Is DimensionSource, meaning the source cannot include Measures (Default = False)
  bool is_dimension_source = 4;
}

// FireflySettings
message FireflySettings {
  // PeriodWindow
  enum PeriodWindow {
    // PERIOD_WINDOW_PRIOR_1D
    PERIOD_WINDOW_PRIOR_1D = 0;
    // PERIOD_WINDOW_PRIOR_7D
    PERIOD_WINDOW_PRIOR_7D = 1;
    // PERIOD_WINDOW_PRIOR_28D
    PERIOD_WINDOW_PRIOR_28D = 2;
    // PERIOD_WINDOW_PRIOR_84D
    PERIOD_WINDOW_PRIOR_84D = 3;
    // PERIOD_WINDOW_PRIOR_1Y
    PERIOD_WINDOW_PRIOR_1Y = 4;
    // PERIOD_WINDOW_LAST_7D
    PERIOD_WINDOW_LAST_7D = 5;
    // PERIOD_WINDOW_LAST_28D
    PERIOD_WINDOW_LAST_28D = 6;
    // PERIOD_WINDOW_MONTH_TO_D
    PERIOD_WINDOW_MONTH_TO_D = 7;
    // PERIOD_WINDOW_WEEK_TO_D
    PERIOD_WINDOW_WEEK_TO_D = 8;
    // PERIOD_WINDOW_QUARTER_TO_D
    PERIOD_WINDOW_QUARTER_TO_D = 9;
    // PERIOD_WINDOW_YEAR_TO_D
    PERIOD_WINDOW_YEAR_TO_D = 10;
    // PERIOD_WINDOW_LAST_13W_PRIOR_26W
    PERIOD_WINDOW_LAST_13W_PRIOR_26W = 11;
    // PERIOD_WINDOW_LAST_13W_PRIOR_52W
    PERIOD_WINDOW_LAST_13W_PRIOR_52W = 12;
    // PERIOD_WINDOW_LAST_13W_PRIOR_104W
    PERIOD_WINDOW_LAST_13W_PRIOR_104W = 13;
    // PERIOD_WINDOW_LAST_13W
    PERIOD_WINDOW_LAST_13W = 14;
    // PERIOD_WINDOW_PRIOR_26W
    PERIOD_WINDOW_PRIOR_26W = 15;
    // PERIOD_WINDOW_PRIOR_52W
    PERIOD_WINDOW_PRIOR_52W = 16;
    // PERIOD_WINDOW_PRIOR_104W
    PERIOD_WINDOW_PRIOR_104W = 17;
  }

  // group
  string group = 1;
  // start_date
  string start_date = 2;
  // is additive
  bool is_additive = 3;
  // period windows
  repeated PeriodWindow period_windows = 4;
  // maximum rows allowed
  int64 max_rows_allowed = 5;
  // validation SQL
  string validation_sql = 6;
}

// WindowMetric
message WindowMetric {
  // id
  string id = 1;
  // name
  string name = 2;
  // window params
  WindowParams window_params = 3;
}

// Window Params
message WindowParams {
  // Window Type
  enum WindowType {
    // WINDOW_TYPE_UNSPECIFIED
    WINDOW_TYPE_UNSPECIFIED = 0;
    // WINDOW_TYPE_ROLLING
    WINDOW_TYPE_ROLLING = 1;
    // WINDOW_TYPE_EXPOSURE
    WINDOW_TYPE_EXPOSURE = 2;
  }

  // Window Unit
  enum WindowUnit {
    // WINDOW_UNIT_UNSPECIFIED
    WINDOW_UNIT_UNSPECIFIED = 0;
    // WINDOW_UNIT_MINUTE
    WINDOW_UNIT_MINUTE = 1;
    // WINDOW_UNIT_HOUR
    WINDOW_UNIT_HOUR = 2;
    // WINDOW_UNIT_DAY
    WINDOW_UNIT_DAY = 3;
    // WINDOW_UNIT_WEEK
    WINDOW_UNIT_WEEK = 4;
    // WINDOW_UNIT_MONTH
    WINDOW_UNIT_MONTH = 5;
    // WINDOW_UNIT_YEAR
    WINDOW_UNIT_YEAR = 6;
  }

  // Window Range
  message WindowRange {
    // Lower Bound
    int32 lower_bound = 1;
    // Upper Bound
    int32 upper_bound = 2;
    // Window unit
    WindowUnit window_unit = 3;
  }

  // window type
  WindowType window_type = 1;
  // numerator window
  WindowRange numerator_window = 2;
  // denominator window
  WindowRange denominator_window = 3;
  // include pre experiment events
  bool include_pre_experiment_events = 4;
  // is retention metric
  bool is_retention_metric = 5;
}

// Metric spec
message MetricSpec {
  // Metric type enum
  MetricType type = 1;
  // Params for different metric types
  oneof param {
    // Metric param for ratio metric
    RatioParam ratio_param = 2;
    // Metric param for total metric
    TotalParam total_param = 3;
    // Metric param for simple metric
    SimpleParam simple_param = 4;
    // Metric param for Prometheus metric
    PrometheusParam prometheus_param = 5;
  }
  // filter
  MetricFilter filter = 6;
}

// AggregationExpression
message AggregationExpression {
  // Input SQL expression from config
  string sql_expr = 1;
  // Expanded SQL expression based on input SQL
  string expanded_sql_expr = 2;
  // Measure references
  repeated Measure measure_refs = 3;
  // Metric references
  repeated Metric metric_refs = 4;
}

// Ratio metric param
message RatioParam {
  // Numerator
  Measure numerator_measure = 1;
  // Numerator aggregation
  AggregationType numerator_aggregation = 2;
  // Denominator
  Measure denominator_measure = 3;
  // Denominator aggregation
  AggregationType denominator_aggregation = 4;
  // Denominator type enum
  DenominatorType denominator_type = 5;
  // Numerator expression
  AggregationExpression numerator_expr = 6;
  // Denominator expression
  AggregationExpression denominator_expr = 7;
}

// Total metric param
message TotalParam {
  // Numerator
  Measure numerator_measure = 1;
  // Numerator aggregation
  AggregationType numerator_aggregation = 2;
}

// Simple metric param
message SimpleParam {
  // measure
  Measure measure = 1;
  // aggregation
  AggregationType aggregation = 2;
  // Numerator expression
  AggregationExpression aggregation_expr = 3;
}

// Prometheus param
message PrometheusParam {
  // PromQL
  string prom_ql = 1;
}

// Metric Type enum
enum MetricType {
  // Unknown
  METRIC_TYPE_UNSPECIFIED = 0;
  // Ratio
  METRIC_TYPE_RATIO = 1;
  // Expression
  METRIC_TYPE_EXPRESSION = 2;
  // TOTAL (Firefly Only)
  METRIC_TYPE_TOTAL = 3;
  // TOTAL_UNIQUE (Firefly Only)
  METRIC_TYPE_TOTAL_UNIQUE = 4;
  // Simple metrics
  METRIC_TYPE_SIMPLE = 5;
  // Prometheus metrics
  METRIC_TYPE_PROMETHEUS = 6;
  // incremental metrics
  METRIC_TYPE_INCREMENTAL = 7;
}

// Tier enum
enum Tier {
  // Tier Zero
  TIER_ZERO = 0;
  // Tier One
  TIER_ONE = 1;
  // Tier Two
  TIER_TWO = 2;
  // Tier Three
  TIER_THREE = 3;
  // Unknown
  TIER_UNSPECIFIED = 4;
  // Tier Gold
  TIER_GOLD = 5;
  // Tier Silver
  TIER_SILVER = 6;
  // Tier Bronze
  TIER_BRONZE = 7;
}

// Identifier
message Identifier {
  // Name
  string name = 1;
  // Identifier Type
  IdentifierType type = 2;
  // Description
  string description = 3;
}

// Identifier type enum
enum IdentifierType {
  // Unknown
  IDENTIFIER_TYPE_UNSPECIFIED = 0;
  // Primary Key
  IDENTIFIER_TYPE_PRIMARY = 1;
  // Foreign
  IDENTIFIER_TYPE_FOREIGN = 2;
}

// Measure
message Measure {
  reserved 7;
  reserved "is_used";
  // name
  string name = 1;
  // description
  string description = 2;
  // aggregation type enum
  AggregationType aggregation = 3;
  // measure id
  string id = 4;
  // source id
  string source_id = 5;
  // alias
  string alias = 6;
  // usage
  string in_use = 8;
  // archived or not, default is false
  bool is_archived = 9;
}

// Aggregation type enum
enum AggregationType {
  // Unknown
  AGGREGATION_TYPE_UNSPECIFIED = 0;
  // Sum
  AGGREGATION_TYPE_SUM = 1;
  // Min
  AGGREGATION_TYPE_MIN = 2;
  // Max
  AGGREGATION_TYPE_MAX = 3;
  // Average
  AGGREGATION_TYPE_AVERAGE = 4;
  // Count distinct
  AGGREGATION_TYPE_COUNT_DISTINCT = 5;
  // Count
  AGGREGATION_TYPE_COUNT = 6;
  // Null if zero count distinct
  AGGREGATION_TYPE_NULL_IF_ZERO_COUNT_DISTINCT = 7;
  // Null if zero count
  AGGREGATION_TYPE_NULL_IF_ZERO_COUNT = 8;
}

// Metric Directionality Enum
enum MetricDirectionality {
  // Unknown
  METRIC_DIRECTIONALITY_UNKNOWN = 0;
  // Increase
  METRIC_DIRECTIONALITY_INCREASE = 1;
  // Decrease
  METRIC_DIRECTIONALITY_DECREASE = 2;
  // No change
  METRIC_DIRECTIONALITY_NO_CHANGE = 3;
}

// Dimension
message Dimension {
  // Name
  string name = 1;
  // Description
  string description = 2;
  // Dimension Type enum
  DimensionType type = 3;
  // Dimension type param
  DimensionTypeParam type_param = 4;
  // Dimension unique Id
  string id = 5;
  // Dimension source Id
  string source_id = 6;
  // Dimension type param
  DataModelType model_type = 7;
  // alias
  string alias = 8;
  // optional metric insights object that contains metadata on cost, popularity, quality
  MetricInsights insights = 9;
  // list of cuts
  repeated string cuts = 10;
  // archived or not, default is false
  bool is_archived = 11;
}

// Use Case Type enum
enum PlatformType {
  // Unknown
  PLATFORM_TYPE_UNSPECIFIED = 0;
  // Curie
  PLATFORM_TYPE_CURIE = 1;
  // Firefly
  PLATFORM_TYPE_FIREFLY = 2;
  // Operational
  PLATFORM_TYPE_OPERATIONAL = 3;
  // Wolt
  PLATFORM_TYPE_WOLT = 4;
}

// Dimension Type enum
enum DimensionType {
  // Unknown
  DIMENSION_TYPE_UNSPECIFIED = 0;
  // Time
  DIMENSION_TYPE_TIME = 1;
  // Categorical
  DIMENSION_TYPE_CATEGORICAL = 2;
}

// Data model type enum
enum DataModelType {
  // Unknown
  DATA_MODEL_TYPE_UNSPECIFIED = 0;
  // Event type
  DATA_MODEL_TYPE_EVENT = 1;
  // Entity type
  DATA_MODEL_TYPE_ENTITY = 2;
  // Exposure type
  DATA_MODEL_TYPE_EXPOSURE = 3;
}

// Dimension type param
message DimensionTypeParam {
  // Is Time primary
  bool time_primary = 1;
  // Time format
  string time_format = 2;
}

// Materialization update strategy
enum UpdateStrategy {
  // UPDATE_STRATEGY_UNSPECIFIED
  UPDATE_STRATEGY_UNSPECIFIED = 0;
  // UPDATE_STRATEGY_INCREMENTAL
  UPDATE_STRATEGY_INCREMENTAL = 1;
  // UPDATE_STRATEGY_REBUILD
  UPDATE_STRATEGY_REBUILD = 2;
  // UPDATE_STRATEGY_SCD_TYPE2
  UPDATE_STRATEGY_SCD_TYPE2 = 3;
}

// Defines the unit for the lookback period.
enum LookBackUnit {
  // Unknown
  LOOK_BACK_UNIT_UNSPECIFIED = 0;
  // Days
  LOOK_BACK_UNIT_DAYS = 1;
  // Hours
  LOOK_BACK_UNIT_HOURS = 2;
}

// Compute spec for source
message ComputeSpec {
  // Compute type enum
  ComputeType type = 1;
  // Snowflake spec
  SnowflakeSpec snowflake_spec = 2;
  // Trigger spec
  TriggerSpec trigger_spec = 3;
  // Lookback Period
  int32 look_back_period = 4;
  // Lookback Period SQL
  string look_back_period_sql = 5;
  // Update Strategy
  UpdateStrategy update_strategy = 6;
  // compute platform
  PlatformType compute_platform = 7;
  // Snowflake spec
  SparkSpec spark_spec = 8;
  // lookback units (default should be days)
  LookBackUnit look_back_unit = 9;
  // Cluster Key
  string cluster_key = 10;
}

// Compute type
enum ComputeType {
  // Unknown
  COMPUTE_TYPE_UNSPECIFIED = 0;
  // Spark
  COMPUTE_TYPE_SPARK = 1;
  // Snowflake Sql
  COMPUTE_TYPE_SNOWFLAKE_SQL = 2;
}

// Snowflake spec
message SnowflakeSpec {
  // SQL
  string sql = 1;
  // custom warehouse name for materialization
  string warehouse = 2;
}

// Executor Capacity
enum ExecutorCapacity {
  // Unspecified
  EXECUTOR_CAPACITY_UNSPECIFIED = 0;
  // XS
  EXECUTOR_CAPACITY_XS = 1;
  // Small
  EXECUTOR_CAPACITY_S = 2;
  // Medium
  EXECUTOR_CAPACITY_M = 3;
  // Large
  EXECUTOR_CAPACITY_L = 4;
  // XL
  EXECUTOR_CAPACITY_XL = 5;
  // 2XL
  EXECUTOR_CAPACITY_2XL = 6;
  // 4XL
  EXECUTOR_CAPACITY_4XL = 7;
}

// Cloud Provider
enum CloudProvider {
  // Unspecified
  CLOUD_PROVIDER_UNSPECIFIED = 0;
  // DBR
  CLOUD_PROVIDER_DBR = 1;
  // DBR Photon
  CLOUD_PROVIDER_DBR_PHOTON = 2;
  // EMR EC2
  CLOUD_PROVIDER_EMR_EC2 = 3;
}

// Spark spec
message SparkSpec {
  // SQL
  string sql = 1;
  // Executor capacity
  ExecutorCapacity executor_capacity = 2;
  // Cloud Provider
  CloudProvider cloud_provider = 3;
  // Auto-parameter selection version
  int32 aps_version = 4;
}

// Storage spec
message StorageSpec {
  // Storage type enum
  StorageType type = 1;

  // For Datalake, this is the prefix path to the table. Default is "prod/ml/"
  // For Snowflake, this is the prefix to the table. Default is "PRODDB.PUBLIC"
  string partition = 2;

  // For Datalake, this is the path to table's parquet files. Eg: "fact_fraud_ml"
  // For Snowflake, this is the name of the table. Eg : "FACT_FRAUD_ML"
  string table_name = 3;

  // Column in the table schema mapping to a time field.
  // For Datalake and Snowflake tables, this defaults to "ACTIVE_DATE"
  string timestamp_column = 4;
}

// Storage type enum
enum StorageType {
  // Unknown
  STORAGE_TYPE_UNSPECIFIED = 0;
  // Datalake
  STORAGE_TYPE_DATALAKE = 1;
  // Snowflake
  STORAGE_TYPE_SNOWFLAKE = 2;
}

// Upstream Spec
message UpstreamSpec {
  // upstream table
  StorageSpec upstreams = 1;
  // Offset for freshness tolerance
  int32 low_offset = 2;
  // SQL to check non Airflow dependency
  string source_query = 3;
}

// Trigger spec
message TriggerSpec {
  // Specify only one of the three fields below
  string schedule = 1;
  // Storage spec
  repeated StorageSpec upstreams = 2;
  // Upstream pipeline
  string pipeline = 3;
  // Upstream Spec
  repeated UpstreamSpec upstream_dependencies = 4;
  // failure notification methods
  FailureNotificationMethods failure_notification_methods = 5;
}

// Materialization Type
enum MaterializationType {
  // Unknown
  MATERIALIZATION_TYPE_UNSPECIFIED = 0;
  // View
  MATERIALIZATION_TYPE_VIEW = 1;
  // Table
  MATERIALIZATION_TYPE_TABLE = 2;
}

// Source Materialization Spec
message SourceMaterializationSpec {
  // Materialization table metadata
  StorageSpec materialization_table = 1;
  // MaterializationType
  MaterializationType materialization_type = 2;
}

// Validation Spec
message ValidationSpec {
  // validation_sql
  string validation_sql = 1;
}

// Denominator type enum
enum DenominatorType {
  // Unknown
  DENOMINATOR_TYPE_UNSPECIFIED = 0;
  // Entity unit
  DENOMINATOR_TYPE_ENTITY_UNIT = 1;
  // Measure
  DENOMINATOR_TYPE_MEASURE = 2;
}

// Hubble Maturity Level
enum HubbleMaturityLevel {
  // Unknown
  HUBBLE_MATURITY_LEVEL_UNSPECIFIED = 0;
  // Hubble Gold
  HUBBLE_MATURITY_LEVEL_GOLD = 1;
  // Hubble Silver
  HUBBLE_MATURITY_LEVEL_SILVER = 2;
  // Hubble Bronze
  HUBBLE_MATURITY_LEVEL_BRONZE = 3;
}

// Hubble Metadata
message HubbleMetadata {
  // Hubble Maturity Level
  HubbleMaturityLevel hubble_maturity_level = 1;
}

// Metrics reference in a cube
message CubeMetricReference {
  // reference id
  string ref_id = 1;
  // metric id
  string metric_id = 2;
  // name
  string name = 3;
  reserved 'source';
  reserved 4;
  // alias
  string alias = 5;
}

// Dimension reference
message DimensionReference {
  // dimension id
  string dimension_id = 1;
}

// Identifier reference
message IdentifierReference {
  // source id
  string source_id = 1;
  // identifier name
  string identifier_name = 2;
  // Identifier Type
  IdentifierType type = 3;
  // source name
  string source_name = 4;
}

// Dimension reference in a cube
message CubeDimensionReference {
  // reference id
  string ref_id = 1;
  // reference
  oneof reference {
    // unique id of dimension
    DimensionReference dimension_ref = 2;
    // unique id of identifier
    IdentifierReference identifier_ref = 3;
  }
  // name
  string name = 4;
  // source
  string source = 5;
}

// Cube Metric Dimension Set
message CubeDimensionSet {
  // list of dimensions
  repeated CubeDimensionReference dimension_set = 1;
}

// Cube Metric Configuration
message CubeMetricConfig {
  // metric reference
  CubeMetricReference metric_ref = 1;
  // dimension references
  repeated CubeDimensionReference dimension_refs = 2;
  // list of comma separate dimension names
  repeated CubeDimensionSet dimension_sets = 3;
  // period windows
  repeated FireflySettings.PeriodWindow period_windows = 4;
  // Look back Period
  int32 look_back_period = 5;
  // Look back Period SQL
  string look_back_period_sql = 6;
  // Filter Expression
  string filter_expr = 7;
  // Watchtower Validation Config
  WatchtowerValidationConfig watchtower_config = 8;
}

// MetricFilter
message MetricFilter {
  // unique ids of dimensions
  repeated DimensionReference dimension_refs = 1;
  // unique identifier of identifiers
  repeated IdentifierReference identifier_refs = 2;
  // sql expression for filter
  string filter_expr = 3;
}

// Metric Cube Definition
message MetricCube {
  // Id
  string id = 1;
  // Name
  string name = 2;
  // Description
  string description = 3;
  // dimension references
  repeated CubeDimensionReference global_dimensions = 4;
  // metric config
  repeated CubeMetricConfig metric_configs = 5;
  reserved 6;
  reserved "filter_expr";
  // period windows
  repeated FireflySettings.PeriodWindow period_windows = 7;
  reserved 8;
  reserved "storage_spec";
  // User Group Owners
  repeated string group_owner_ids = 9;
  // compute_spec
  ComputeSpec compute_spec = 10;
  // validation SQL
  string validation_sql = 11;
  // Time zone
  string time_zone = 12;
  // max_rows_allowed
  int32 max_rows_allowed = 13;
  // filter expressions using dimensions and identifiers
  MetricFilter filter = 14;
  // Tags
  repeated string tags = 15;
  // list of dimension sets
  repeated CubeDimensionSet global_dimension_sets = 16;
  // Whether to skip the computation of a pivot view for the cube. Default = False
  bool skip_pivot_view = 17;
  // Watchtower Config
  WatchtowerCubeConfig watchtower_config = 18;
}

// Failure Notification Methods
message FailureNotificationMethods {
  // Slack channels
  repeated string slack_channels = 1;
  // Emails
  repeated string emails = 2;
  // Pager Duty Emails
  repeated string pager_duty_emails = 3;
}

// Watchtower Cube Config
message WatchtowerCubeConfig {
  // is enabled
  bool enabled = 1;
  // filter expression
  string filter_expr = 2;
  // exclude metrics
  repeated string exclude_metric = 3;
  // include metrics
  repeated string include_metric = 4;
  // enable forecast check
  bool enable_forecast_check = 5;
  // ignore previous n days
  int32 ignore_prev_n_days = 6;
  // look back period
  int32 look_back_period = 7;
  // validation config
  WatchtowerValidationConfig validation_config = 8;
  // slack alert look back days
  int32 slack_alert_look_back_days = 9;
}

// Validation Config for Watchtower
message WatchtowerValidationConfig {
  // Z Score Check
  ZScoreCheck zscore = 1;
  // Orca Check
  OrcaCheck orca = 2;
  // Variance Check
  VarianceCheck variance = 3;
  // Freshness Check
  FreshnessCheck freshness = 4;
}

// Z Score Check Config
message ZScoreCheck {
  // is enabled
  bool enabled = 1;
  // score
  float score = 2;
  reserved 3;
  reserved "lower_bound";
  reserved 4;
  reserved "upper_bound";
  // data period
  int32 data_period = 5;
  // look back period
  int32 look_back_period = 6;
  // ignore previous n days
  int32 ignore_prev_n_days = 7;
  // lower bound
  float lower_bound_float = 8;
  // upper bound
  float upper_bound_float = 9;
}

// Orca Check Config
message OrcaCheck {
  // is enabled
  bool enabled = 1;
  // score
  float score = 2;
  // look back period
  int32 look_back_period = 3;
  // data period
  int32 data_period = 4;
  // lower cutoff percentile
  float lower_cutoff_percentile = 5;
  // upper cutoff percentile
  float upper_cutoff_percentile = 6;
  // ignore previous n days
  int32 ignore_prev_n_days = 7;
}

// Variance Check Config
message VarianceCheck {
  // is enabled
  bool enabled = 1;
  // score
  float score = 2;
  // dictionary of checks to perform
  map<string, float> checks = 3;
  // whether to ignore drops
  bool ignore_drops = 4;
  // whether to ignore spikes
  bool ignore_spikes = 5;
  // look back period
  int32 look_back_period = 6;
  // ignore previous n days
  int32 ignore_prev_n_days = 7;
  // whether all variance checks must fail to fail the overall check
  bool all_var_checks_must_fail_to_fail_check = 8;
}

// Freshness Check Config
message FreshnessCheck {
  // is enabled
  bool enabled = 1;
  // score
  float score = 2;
  // look back period
  int32 look_back_period = 3;
  // ignore previous n days
  int32 ignore_prev_n_days = 4;
  reserved 5;
  reserved 'score_override_prev_n_days';
  // whether a zero value is considered fresh
  bool is_zero_value_fresh = 6;
  reserved 'score_override_prev_n_days_dict';
  reserved 7;
  // new score and number of previous days to override the score
  map<string, float> score_override_prev_n_days_map = 8;
}

// Alert Subscription
message AlertSubscription {
  // Alert Destination
  AlertDestination alert_destination = 1;
  // muted - can be used to mute individual alert subscription
  bool is_muted = 2;
}

// EntityMonitor represents a specific check (Job failure/Freshness/...) enabled on an entity (Source/Metric/Cube)
message EntityMonitor {
  // unique id for the monitor
  string id = 1;
  // entity id (metric_id/source_id/cube_id)
  string entity_id = 2;
  // entity type (metric/source/cube)
  UMPEntityType entity_type = 3;
  // email or slack or pagerduty
  repeated AlertSubscription subscriptions = 4;
  // type of entity monitor
  EntityMonitorType monitor_type = 5;
  // is active? Can be used to pause the entire monitor
  bool is_active = 6;
  // update metadata
  UpdateMetaData update_metadata = 7;
}

// SourceAssociation
message SourceAssociation {
  // dimension source id
  string source_id = 1;
  // source name
  string source_name = 2;
  // join_expr
  string join_expr = 3;
  // alias
  string alias = 4;
}

// SourceAssociation
message MetricPack {
  // id
  string id = 1;
  // name
  string name = 2;
  // current_version
  MetricPackVersion current_version = 3;
  // pending_version
  MetricPackVersion pending_version = 4;
  // owner_names
  repeated string owner_names = 5;
  // is_hidden
  bool is_hidden = 6;
  // User Group Owners
  repeated string group_owner_ids = 7;
  // archived_at
  google.protobuf.Timestamp archived_at = 8;
  // update metadata
  UpdateMetaData update_metadata = 9;
  // metric pack insights
  MetricPackInsights insights = 10;
}

// MetricPackSummary
message MetricPackSummary {
  // id
  string id = 1;
  // name
  string name = 2;
  // current_version_id
  string current_version_id = 3;
  // pending_version_id
  string pending_version_id = 4;
  // owner_names
  repeated string owner_names = 5;
  // is_hidden
  bool is_hidden = 6;
  // group_owner_ids
  repeated string group_owner_ids = 7;
  // archived_at
  google.protobuf.Timestamp archived_at = 8;
  // update_metadata
  UpdateMetaData update_metadata = 9;
}

// MetricPackName
message MetricPackName {
  // id
  string id = 1;
  // name
  string name = 2;
}

// GetAllMetricPacksResponse
message GetAllMetricPacksResponse {
  // metric_packs
  repeated MetricPackName metric_packs = 1;
}

// DimensionDetails
message DimensionDetails {
  // id
  string id = 1;
  // source_id
  string source_id = 2;
  // name
  string name = 3;
  // description
  string description = 4;
  // created_at
  google.protobuf.Timestamp created_at = 5;
  // updated_at
  google.protobuf.Timestamp updated_at = 6;
  // created_by
  string created_by = 7;
  // updated_by
  string updated_by = 8;
  // type
  DimensionType type = 9;
}

// ItemizedFilterValue
message ItemizedFilterValue {
  // value
  string value = 1;
  // metric_label
  MetricLabel metric_label = 2;
  // tolerance_threshold
  ToleranceThreshold tolerance_threshold = 3;
}

// ItemizedFilterValues
message ItemizedFilterValues {
  // values
  repeated ItemizedFilterValue values = 1;
}

// AggregatedFilterValues
message AggregatedFilterValues {
  // values
  repeated string values = 1;
  // metric_label
  MetricLabel metric_label = 2;
}

// FilterStrategy
message FilterStrategy {
  // type
  FilterType type = 1;
  // strategy
  oneof strategy {
    // itemized_values
    ItemizedFilterValues itemized_values = 2;
    // aggregated_values
    AggregatedFilterValues aggregated_values = 3;
  }
}

// ToleranceThreshold
message ToleranceThreshold {
  // ToleranceType enum
  enum ToleranceType {
    // TOLERANCE_TYPE_UNSPECIFIED
    TOLERANCE_TYPE_UNSPECIFIED = 0;
    // TOLERANCE_TYPE_ABSOLUTE
    TOLERANCE_TYPE_ABSOLUTE = 1;
    // TOLERANCE_TYPE_RELATIVE
    TOLERANCE_TYPE_RELATIVE = 2;
  }

  // type
  ToleranceType type = 1;
  // tolerance
  string tolerance = 2;
}

// Filter
message Filter {
  reserved 6, 7;
  reserved "desired_directionality", "tolerance_threshold";
  // operator
  Operator operator = 1;
  // values
  repeated string values = 2; /* deprecated in future */
  // type
  FilterType type = 3; /* deprecated in future */
  // alias
  string alias = 4;
  // filter_strategy
  FilterStrategy filter_strategy = 5;
}

// EntityDimension
message EntityDimension {
  // id
  string id = 1;
  // name
  string name = 2;
  // entity_unit
  string entity_unit = 3;
  // source_id
  string source_id = 4;
  // source_name
  string source_name = 5;
  // filters
  repeated Filter filters = 6;
  // metric insights that contains popularity statistics
  MetricInsights insights = 7;
  // global denominator setting
  bool use_global_denominator = 8;
}

// PackedDimensions
message PackedDimensions {
  // id
  string id = 1;
  // name
  string name = 2;
  // description
  string description = 3;
  //dimensions
  repeated EntityDimension dimensions = 4;
}

// PackedMetric
message PackedMetric {
  // id
  string id = 1;
  // pack_version_id
  string pack_version_id = 2;
  // metric_id
  string metric_id = 3;
  // metric_label
  MetricLabel metric_label = 4;
  // metric_name
  string metric_name = 5;
  // entity_dimensions
  repeated EntityDimension entity_dimensions = 6; // TODO deprecate after packed_dimensions is actively used
  // cuped_lags
  repeated int32 cuped_lags = 7; // TODO[Stas] deprecate after cuped windows is actively used
  // metric_direction_string
  string metric_direction_string = 8;
  // quantiles
  repeated double quantiles = 9;
  // covariates
  repeated Covariate covariates = 10;
  // cuped_windows
  repeated string cuped_windows = 11;
  // desired_directionality
  MetricDirectionality desired_directionality = 12;
  // tolerance_threshold
  ToleranceThreshold tolerance_threshold = 13;
  // packed_dimensions
  repeated PackedDimensions packed_dimensions = 14;
  // used for filtering metrics in adhoc analyses or metrics in a metric pack
  repeated string metric_filter = 15;
  // keep incomplete exposures. used to disable filtering of incomplete exposures that don't have a full window of data
  bool include_non_fully_baked_cohort = 16 [deprecated = true];
  // from which metric pack this metric comes
  string parent_metric_pack_id = 17;
  // Alternative Timestamp Column (default = event_ts)
  string timestamp_column = 18;
  // Window metric configs
  WindowMetricNonFullyBakedCohortOption window_metric_non_fully_baked_cohort_option = 19;
  // Option to keep events after experiment ends
  bool keep_events_after_experiment_end_date = 20;
}

// MetricPackVersion
message MetricPackVersion {
  // id
  string id = 1;
  // metric_pack_id
  string metric_pack_id = 2;
  // description
  string description = 3;
  // packed_metrics
  repeated PackedMetric packed_metrics = 4;
  // update_metadata
  UpdateMetaData update_metadata = 5;
}

// LabeledMetric
message LabeledMetric {
  // metric_id
  string metric_id = 1;
  // metric_label
  MetricLabel metric_label = 2;
  // entity_dimensions
  repeated EntityDimension entity_dimensions = 3; // TODO deprecate after packed_dimensions is actively used
  // cuped_lags
  repeated int32 cuped_lags = 4 [deprecated = true];
  // quantiles
  repeated double quantiles = 5;
  // covariates
  repeated Covariate covariates = 6;
  // cuped_windows
  repeated string cuped_windows = 7;
  // desired_directionality
  MetricDirectionality desired_directionality = 8;
  // tolerance_threshold
  ToleranceThreshold tolerance_threshold = 9;
  // packed_dimensions
  repeated PackedDimensions packed_dimensions = 10;
  // used for filtering metrics in adhoc analyses or metrics in a metric pack
  repeated string metric_filter = 11;
  // keep incomplete exposures. used to disable filtering of incomplete exposures that don't have a full window of data
  bool include_non_fully_baked_cohort = 12 [deprecated = true];
  // from which metric pack this metric comes
  string parent_metric_pack_id = 13;
  // Alternative Timestamp Column (default = event_ts)
  string timestamp_column = 14;
  // Window metric configs
  WindowMetricNonFullyBakedCohortOption window_metric_non_fully_baked_cohort_option = 15;
  // Option to keep events after experiment ends
  bool keep_events_after_experiment_end_date = 16;
}

// simplified metrics
message SimplifiedMetric {
  // name
  string name = 1;
  // id
  string id = 2;
}

// simplified dimensions
message SimplifiedDimension {
  // name
  string name = 1;
  // id
  string id = 2;
}

// formula set
message FormulaSet {
  // name
  string name = 1;
  // id
  string id = 2;
  // formula
  repeated Formula impact_formulas = 3;
  // is_default
  bool is_default = 4;
  // description
  string description = 5;
}

// metric impact formula
message Formula {
  reserved 2;
  reserved 'name';
  // id
  string id = 1;
  // user inputted formula string
  string formula_str = 3;
  // transformed ast tree
  string tree = 4;
  // referenced metrics
  repeated SimplifiedMetric reference_metric = 5;
  // referenced dimensions
  repeated SimplifiedDimension reference_dimension = 6;
  // metric id
  string metric_id = 7;
  // description
  string description = 8;
  // type
  FormulaType type = 9;
  // formula name
  string formula_name = 10;
}

// formula type
enum FormulaType {
  // IN_EXPEIRMENT
  FORMULA_TYPE_IN_EXPERIMENT = 0;
  // ANNUALIZED
  FORMULA_TYPE_ANNUALIZED = 1;
}
