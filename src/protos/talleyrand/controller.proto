syntax = "proto3";

package talleyrand;

import "doordash.api/annotations.proto";
import "doordash.api/client.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "talleyrand/common.proto";
import "talleyrand/core.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.talleyrand.api.controller";

//add rpc here, has ins and outs
// Talleyrand controller service
service TalleyrandControllerService {
  option (doordash.api.service) = {
    name: "configurator-talleyrand"
    port: 50051
    name_spaces: ["decision-systems"]
    owner: {
      id: "dynamic-values-alerts"
      name: "app-decision-systems"
      slack_channel: "#team-decision-systems"
      email_alias: "team-decision-systems@doordash.com"
    }
    target_products: [INTERNAL]
  };

  // Upsert source
  rpc UpsertSource(UpsertSourceRequest) returns (UpsertSourceResponse) {
    option (google.api.http) = {
      post: "/decision-systems/v1/metrics-platform/upsert-source"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [DD_USER]
      target_products: [INTERNAL]
    };
  }
  // Upsert metric
  rpc UpsertMetric(UpsertMetricRequest) returns (UpsertMetricResponse) {
    option (google.api.http) = {
      post: "/decision-systems/v1/metrics-platform/upsert-metric"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [DD_USER]
      target_products: [INTERNAL]
    };
  }
  // Bulk upsert
  rpc BulkUpsert(BulkUpsertRequest) returns (BulkUpsertResponse) {
    option (google.api.http) = {
      post: "/decision-systems/v1/metrics-platform/bulk-upsert"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [DD_USER]
      target_products: [INTERNAL]
    };
  }
  // Get sources
  rpc GetSources(GetSourcesRequest) returns (GetSourcesResponse) {
    option (google.api.http) = {
      post: "/decision-systems/v1/metrics-platform/sources"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [DD_USER]
      target_products: [INTERNAL]
    };
  }
  // Get metrics
  rpc GetMetrics(GetMetricsRequest) returns (GetMetricsResponse) {
    option (google.api.http) = {
      post: "/decision-systems/v1/metrics-platform/metrics"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [DD_USER]
      target_products: [INTERNAL]
    };
  }
  // Get source list index
  rpc GetSourceList(GetSourceListRequest) returns (GetSourceListResponse) {
    option (google.api.http) = {
      post: "/decision-systems/v1/metrics-platform/source-list"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [DD_USER]
      target_products: [INTERNAL]
    };
  }
  // Get metric list index
  rpc GetMetricList(GetMetricListRequest) returns (GetMetricListResponse) {
    option (google.api.http) = {
      post: "/decision-systems/v1/metrics-platform/metric-list"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [DD_USER]
      target_products: [INTERNAL]
    };
  }
  // Get measures
  rpc GetMeasures(GetMeasuresRequest) returns (GetMeasuresResponse) {
    option (google.api.http) = {
      post: "/decision-systems/v1/metrics-platform/measures"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [DD_USER]
      target_products: [INTERNAL]
    };
  }
  // Get dimensions
  rpc GetDimensions(GetDimensionsRequest) returns (GetDimensionsResponse) {
    option (google.api.http) = {
      post: "/decision-systems/v1/metrics-platform/dimensions"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [DD_USER]
      target_products: [INTERNAL]
    };
  }
  // Get measure list index
  rpc GetMeasureList(GetMeasureListRequest) returns (GetMeasureListResponse);
  // Get dimension list index
  rpc GetDimensionList(GetDimensionListRequest) returns (GetDimensionListResponse);
  // Get dimension list index
  rpc GetDimensionsForMetrics(GetDimensionsForMetricsRequest) returns (GetDimensionsForMetricsResponse) {
    option (google.api.http) = {
      post: "/decision-systems/v1/metrics-platform/get-dimensions-for-metrics"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [DD_USER]
      target_products: [INTERNAL]
    };
  }
  // Create Forecast
  rpc CreateForecast(CreateForecastRequest) returns (CreateForecastResponse);
  // Trigger api to render the jinja output given template and jinja parameters
  rpc RenderJinja(RenderJinjaRequest) returns (RenderJinjaResponse);
  //  Metrics archival
  rpc ArchiveMetrics(ArchiveMetricsRequest) returns (ArchiveMetricsResponse);
  // API to process (parse, format, validate and optimize) the provided SQL
  rpc ProcessSQL(ProcessSQLRequest) returns (ProcessSQLResponse);
  // API to archive different entities (sources, metrics and packs)
  rpc ArchiveEntities(ArchiveEntitiesRequest) returns (ArchiveEntitiesResponse);
  // API to un-archive different entities (sources and packs)
  rpc UnArchiveEntities(UnArchiveEntitiesRequest) returns (UnArchiveEntitiesResponse);
  // Upsert metric cubes
  rpc UpsertMetricCube(UpsertMetricCubeRequest) returns (UpsertMetricCubeResponse);
  // Get metric cubes
  rpc GetMetricCubes(GetMetricCubesRequest) returns (GetMetricCubesResponse);
  // Get metric cube list
  rpc GetMetricCubeList(GetMetricCubeListRequest) returns (GetMetricCubeListResponse);
  // Upsert entity monitors
  rpc UpsertEntityMonitors(UpsertEntityMonitorsRequest) returns (UpsertEntityMonitorsResponse);
  // Upsert entity monitors
  rpc DeleteEntityMonitors(DeleteEntityMonitorsRequest) returns (DeleteEntityMonitorsResponse);
  // Get Entity Monitors
  rpc GetEntityMonitors(GetEntityMonitorsRequest) returns (GetEntityMonitorsResponse);
  // GetMetricPacks
  rpc GetMetricPacks(GetMetricPacksRequest) returns (GetMetricPacksResponse);
  // GetMetricPackList
  rpc GetMetricPackList(GetMetricPackListRequest) returns (GetMetricPackListResponse);
  // AddMetricPack
  rpc AddMetricPack(AddMetricPackRequest) returns (AddMetricPackResponse);
  // UpdateMetricPack
  rpc UpdateMetricPack(UpdateMetricPackRequest) returns (UpdateMetricPackResponse);
  // ApproveMetricPack
  rpc ApproveMetricPack(ApproveMetricPackRequest) returns (ApproveMetricPackResponse);
  // RejectMetricPack
  rpc RejectMetricPack(RejectMetricPackRequest) returns (RejectMetricPackResponse);
  // GetPacksContainingMetric
  rpc GetPacksContainingMetric(GetPacksContainingMetricRequest) returns (GetPacksContainingMetricResponse);
  // UpdateEntityStatus
  rpc UpdateEntityStatus(UpdateEntityStatusRequest) returns (UpdateEntityStatusResponse);
  // Create Firefly Backfill
  rpc CreateFireflyBackfill(CreateFireflyBackfillRequest) returns (CreateFireflyBackfillResponse) {
    option (google.api.http) = {
      post: "/decision-systems/v1/metrics-platform/create-firefly-backfill"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [DD_USER]
      target_products: [INTERNAL]
    };
  }
  // Check Firefly Backfill Status
  rpc GetFireflyBackfillStatus(GetFireflyBackfillStatusRequest) returns (GetFireflyBackfillStatusResponse) {
    option (google.api.http) = {
      post: "/decision-systems/v1/metrics-platform/get-firefly-backfill-status",
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [DD_USER]
      target_products: [INTERNAL]
    };
  }
  // BookmarkEntity
  rpc BookmarkEntity(BookmarkEntityRequest) returns (BookmarkEntityResponse);
  // UnbookmarkEntity
  rpc UnbookmarkEntity(UnbookmarkEntityRequest) returns (UnbookmarkEntityResponse);
  // CanUserApproveEntity
  rpc CanUserApproveEntity(CanUserApproveEntityRequest) returns (CanUserApproveEntityResponse) {
    option (google.api.http) = {
      post: "/decision-systems/v1/metrics-platform/can-user-approve-entity"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [DD_USER]
      target_products: [INTERNAL]
    };
  }
  // Review entity (such as metric or source)
  rpc ReviewEntity(ReviewEntityRequest) returns (ReviewEntityResponse) {
    option (google.api.http) = {
      post: "/decision-systems/v1/metrics-platform/review-entity"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [DD_USER]
      target_products: [INTERNAL]
    };
  }
  // Get entity changes
  rpc GetEntityChanges(GetEntityChangesRequest) returns (GetEntityChangesResponse) {
    option (google.api.http) = {
      post: "/decision-systems/v1/metrics-platform/get-entity-changes"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [DD_USER]
      target_products: [INTERNAL]
    };
  }
  // Get entity history
  rpc GetEntityHistory(GetEntityHistoryRequest) returns (GetEntityHistoryResponse) {
    option (google.api.http) = {
      post: "/decision-systems/v1/metrics-platform/get-entity-history"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [DD_USER]
      target_products: [INTERNAL]
    };
  }
  // Add cuts to dimension
  rpc AddDimensionCuts(AddDimensionCutsRequest) returns (AddDimensionCutsResponse);
  // Ask UMP AI
  rpc AskUMPAi(AskUMPAiRequest) returns (AskUMPAiResponse) {
    option (google.api.http) = {
      post: "/decision-systems/v1/metrics-platform/ask-ump-ai"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [DD_USER]
      target_products: [INTERNAL]
    };
  }
  // GetIdentifierList
  rpc GetIdentifierList(GetIdentifierListRequest) returns (GetIdentifierListResponse);
}

// Archive Metrics Request
message ArchiveMetricsRequest {
  // Archive Metric
  message ArchiveMetric {
    // metric id
    string metric_id = 1;
    // archive message
    string message = 2;
  }
  // list of archive metrics
  repeated ArchiveMetric archive_metrics = 1;
  // for dry update to test
  bool dry = 2;
  // archive user
  UserGroup user = 3;
  // approved
  bool is_approved = 4;
  // pr_number
  string pr_number = 5;
}

// Response for Archive metrics request
message ArchiveMetricsResponse {
  // archive response message
  string message = 1;
  // response code
  StatusCode code = 2;
  // pull request number
  string pr_number = 3;
}

// Upsert source request
message UpsertSourceRequest {
  // source
  Source source = 1;
  // for dry update to test
  bool dry = 2;
  // Update user
  UserGroup user = 3;
  // approved
  bool is_approved = 4;
  // pr number
  string pr_number = 5;
}

// Upsert source response
message UpsertSourceResponse {
  // Upsert response message
  string message = 1;
  // Response enum code
  StatusCode code = 2;
  // Source unique id
  string id = 3;
}

// Get source
message GetSource {
  // source
  Source source = 1;
  // update metadata
  UpdateMetaData update_metadata = 2;
}

// Get source request
message GetSourcesRequest {
  // one of
  // ids
  repeated string ids = 1;
  // names
  repeated string names = 2;
  // Include unapproved
  bool include_unapproved = 3;
  // Platform filter (Curie/Firefly)
  PlatformType platform_filter = 4;
  // Include only source that are materialized (False by default)
  bool include_only_materialized_sources = 5;
  // Include archived (False by default)
  bool include_archived = 6;
  // Include mesaure usage (False by default)
  bool include_measure_usage = 7;
}

// Get source response
message GetSourcesResponse {
  // Get source
  repeated GetSource sources = 1;
  // response status code
  StatusCode code = 2;
  // response message
  string message = 3;
}

// Upsert metric request
message UpsertMetricRequest {
  // metric
  Metric metric = 1;
  // dry update
  bool dry = 2;
  // update user
  UserGroup user = 3;
  // approved
  bool is_approved = 4;
  // pr_number
  string pr_number = 5;
}

// Upsert metric response
message UpsertMetricResponse {
  // upsert message response
  string message = 1;
  // response code
  StatusCode code = 2;
  // metric unique id
  string id = 3;
}

// Get metric request
message GetMetricsRequest {
  // ids
  repeated string ids = 1;
  // names
  repeated string names = 2;
  // source id
  string source_id = 3;
  // Include unapproved
  bool include_unapproved = 4;
  // Platform filter (Curie/Firefly)
  PlatformType platform_filter = 5;
  // Include Identifiers (False by default)
  bool include_identifiers = 6;
  // Include archived (False by default)
  bool include_archived = 7;
  // Include window metrics (False by default)
  bool include_window_metrics = 8;
  // Include impact formulas (False by default)
  bool include_impact_formulas = 9;
}

// Get metric
message GetMetric {
  // metric
  Metric metric = 1;
  // update metadata
  UpdateMetaData update_metadata = 2;
}

// Get metric response
message GetMetricsResponse {
  // Metrics
  repeated GetMetric metrics = 1;
  // response code
  StatusCode code = 2;
  // response message
  string message = 3;
}

// Bulk Upsert request
message BulkUpsertRequest {
  // metrics
  repeated Metric metrics = 1;
  // sources
  repeated Source sources = 2;
  // update user
  UserGroup user = 3;
}

// Bulk Upsert response
message BulkUpsertResponse {
  // upsert message reponse
  string message = 1;
  // response code
  StatusCode code = 2;
  // pull request number
  string pr_number = 3;
}

// Filter field
enum FilterField {
  // Unknown
  FILTER_FIELD_UNSPECIFIED = 0;
  // Name
  FILTER_FIELD_NAME = 1;
  // Owner
  FILTER_FIELD_OWNER = 2;
  // Status
  FILTER_FIELD_STATUS = 3;
  // Source Name
  FILTER_FIELD_SOURCE = 4;
  // Platform
  FILTER_FIELD_PLATFORM = 5;
  // Identifier Name
  FILTER_FIELD_IDENTIFIER = 6;
  // Tag values - comma separate tag values
  FILTER_FIELD_TAG = 7;
}

// Index Filter
message IndexFilter {
  // Filter Field
  FilterField field = 1;
  // Filter value
  string value = 2;
}

// Pagination
message Pagination {
  // Page number
  int32 page_number = 1;
  // Page size
  int32 page_size = 2;
  // Total items
  int32 total_items = 3;
  // Total Pages
  int32 total_pages = 4;
}

// Get source list request
message GetSourceListRequest {
  // Toggle/Boolean based filters
  message ToggleFilters {
    // Include unapproved
    bool include_unapproved = 1;
    // If True, Include only if source has materialization
    bool include_only_materialized_sources = 2;
    // Include archived (False by default)
    bool include_archived = 3;
    // Include only Firefly DimensionSources (False by default)
    bool include_only_firefly_dimension_sources = 4;
  }

  // Filters
  repeated IndexFilter filters = 1;
  // Pagination
  Pagination pagination = 2;
  // Include unapproved
  bool include_unapproved = 3; // Will be deprecated. Use ToggleFilters
  // ToggleFilters
  ToggleFilters toggle_filters = 4;
  // If provided, the API will only return metrics bookmarked by at least one included user. If empty, no filter
  repeated string bookmark_filter_emails = 5;
}

// Get source list response
message GetSourceListResponse {
  // Get source
  repeated GetSource sources = 1;
  // Pagination
  Pagination pagination = 2;
}

// Get metric list request
message GetMetricListRequest {
  // Toggle/Boolean based filters
  message ToggleFilters {
    // Include window metrics (False by default)
    bool include_window_metrics = 1;
    // Include unapproved (False by default)
    bool include_unapproved = 2;
    // Include Identifiers (False by default)
    bool include_identifiers = 3;
    // Include archived (False by default)
    bool include_archived = 4;
    // Include impact formulas (False by default)
    bool include_impact_formulas = 5;
  }

  // List of Field based Filters
  repeated IndexFilter filters = 1;
  // Pagination
  Pagination pagination = 2;
  // List of toggle based filters
  ToggleFilters toggles = 3;
  // If provided, the API will only return metrics bookmarked by at least one included user. If empty, no filter
  repeated string bookmark_filter_emails = 5;
}

// Get metric list response
message GetMetricListResponse {
  // Get metric
  repeated GetMetric metrics = 1;
  // Pagination
  Pagination pagination = 2;
}

// Get measures request
message GetMeasuresRequest {
  // one of
  // ids
  repeated string ids = 1;
  // names
  repeated string names = 2;
  // Platform filter (Curie/Firefly)
  PlatformType platform_filter = 3;
  // Include only measures whose sources are materialized (False by default)
  bool include_only_materialized_measures = 4;
}

// Get measure
message GetMeasure {
  // measure
  Measure measure = 1;
  // source id
  string source_id = 2;
  // update metadata
  UpdateMetaData update_metadata = 3;
  // source alias
  string source_alias = 4;
  // source name
  string source_name = 5;
  // Platform that defined this measure
  PlatformType platform = 6;
}

// Get measure response
message GetMeasuresResponse {
  // Measures
  repeated GetMeasure measures = 1;
  // response code
  StatusCode code = 2;
  // response message
  string message = 3;
}

// Get dimensions request
message GetDimensionsRequest {
  // one of
  // ids
  repeated string ids = 1;
  // names
  repeated string names = 2;
  // Platform filter (Curie/Firefly)
  PlatformType platform_filter = 3;
  // Include archived (False by default)
  bool include_archived = 4;
  // source id
  string source_id = 5;
  // filter
  bool include_dimension_cuts = 6;
}

// Get Dimension
message GetDimension {
  // dimension
  Dimension dimension = 1;
  // source id
  string source_id = 2;
  // update metadata
  UpdateMetaData update_metadata = 3;
  // source alias
  string source_alias = 4;
}

// Get dimension response
message GetDimensionsResponse {
  // Dimensions
  repeated GetDimension dimensions = 1;
  // response code
  StatusCode code = 2;
  // response message
  string message = 3;
}

// Get measure list request
message GetMeasureListRequest {
  // Toggle/Boolean based filters
  message ToggleFilters {
    // If True, Include only if source of the measure has materialization
    bool include_only_materialized_measures = 1;
    // Include archived (False by default)
    bool include_archived = 2;
  }

  // Name filter
  string name_filter = 1;
  // Pagination
  Pagination pagination = 2;
  // Filters
  repeated IndexFilter filters = 3;
  // ToggleFilters
  ToggleFilters toggle_filters = 4;
}

// Get measure list response
message GetMeasureListResponse {
  // Get measures
  repeated GetMeasure measures = 1;
  // Pagination
  Pagination pagination = 2;
}

// Get dimension list request
message GetDimensionListRequest {
  // Toggle/Boolean based filters
  message ToggleFilters {
    // Include archived (False by default)
    bool include_archived = 1;
  }

  // Name filter
  string name_filter = 1;
  // Pagination
  Pagination pagination = 2;
  // Filters
  repeated IndexFilter filters = 3;
  // ToggleFilters
  ToggleFilters toggle_filters = 4;
  // If provided, the API will only return metrics bookmarked by at least one included user. If empty, no filter
  repeated string bookmark_filter_emails = 5;
}

// Get dimension list response
message GetDimensionListResponse {
  // Get dimensions
  repeated GetDimension dimensions = 1;
  // Pagination
  Pagination pagination = 2;
}

// Get dimensions
message GetDimensionsForMetricsRequest {
  // metric ids
  repeated string metric_ids = 1;
  // include identifiers
  bool include_identifiers = 2;
}

// GetDimensionsForMetricsResponse
message GetDimensionsForMetricsResponse {
  // DimensionDetails
  message DimensionDetails {
    // Dimension unique Id
    string id = 1;
    // Name
    string name = 2;
    // Dimension Identifier
    Identifier identifier = 3;
    // Dimension source Id
    string source_id = 4;
    // Dimension source name
    string source_name = 5;
    // Dimension
    // TODO: Need to deprecate other dimension fields
    Dimension dimension = 6;
  }

  // MetricDimensions
  message MetricDimensions {
    // metric_id
    string metric_id = 1;
    // dimensions
    repeated DimensionDetails dimensions = 2;
    // dimensions
    repeated IdentifierReference identifiers = 3;
  }

  // MetricsDimensions
  repeated MetricDimensions metric_dimensions = 1;
}

// Forecast schedule type enum
enum ForecastSchedule {
  // Unknown
  FORECAST_SCHEDULE_UNSPECIFIED = 0;
  // Sunday
  FORECAST_SCHEDULE_SUNDAY = 1;
  // Monday
  FORECAST_SCHEDULE_MONDAY = 2;
  // Tuesday
  FORECAST_SCHEDULE_TUESDAY = 3;
  // Wednesday
  FORECAST_SCHEDULE_WEDNESDAY = 4;
  // Thursday
  FORECAST_SCHEDULE_THURSDAY = 5;
  // Friday
  FORECAST_SCHEDULE_FRIDAY = 6;
  // Saturday
  FORECAST_SCHEDULE_SATURDAY = 7;
}

// Create Forecast Request
message CreateForecastRequest {
  // forecast name
  string forecast_name = 1;
  // metric id
  string metric_id = 2;
  // dimension ids
  repeated string dimension_ids = 3;
  // schedule
  repeated ForecastSchedule schedule = 4;
  // group owner id
  string group_owner_id = 5;
  // boolean flag experimentation use case
  bool for_experimentation = 6; // Will be deprecated
  // entity_unit
  string entity_unit = 7; // Will be deprecated in favor of entity_units
  // multiple entity units
  repeated string entity_units = 8;
  // Onboarding user
  UserGroup user = 9;
}

// Create Forecast Response
message CreateForecastResponse {
  // Forecast onboarding response
  message ForecastOnboarding {
    // forecast name
    string forecast_name = 1;
    // pr link
    string pr_link = 2;
    // actual sql
    string actual_sql = 3;
  }
  // forecast name
  string forecast_name = 1; // Deprecate after migration to bulk flow
  // pr link
  string pr_link = 2; // Deprecate after migration to bulk flow
  // actual sql
  string actual_sql = 3; // Deprecate after migration to bulk flow
  // response code
  StatusCode code = 4;
  // response message
  string message = 5;
  // forecast onboarding
  repeated ForecastOnboarding forecast_onboarding = 6;
}

// request that takes a template and jinja parameters
message RenderJinjaRequest {
  // string template
  string template = 1;
  // Json payload with jinja parameters
  string jinja_parameters = 2;
}

// request that returns the rendered template
message RenderJinjaResponse {
  // The rendered template applies jinja parameters to the template
  string rendered_template = 1;
}

// SQLValidationRule enum
enum SQLValidationRule {
  // Unknown
  SQL_VALIDATION_RULE_UNSPECIFIED = 0;
  // Rule to validate if Snowflake tables names are fully qualified with database and schema names
  SQL_VALIDATION_RULE_TABLE_NAMES = 1;
  // Rule to validate if the SQL uses wildcard in the result set
  SQL_VALIDATION_RULE_WILDCARD_PROJECTION = 2;
  // need to validate the sql
  SQL_VALIDATION_RULE_EXECUTION = 3;
  // Rule to validate if Datalake table names are fully qualified with database
  SQL_VALIDATION_RULE_DATALAKE_TABLE_NAMES = 4;
}

// ProcessSQLRequest - Request to parse, format, validate and optimize the provided SQL based on the provided rules
message ProcessSQLRequest {
  // SQL string template with jinja parameters
  string sql = 1;
  // Optional string representation of Json payload with jinja parameters
  string jinja_parameters = 2;
  // Optional list of validation rules
  repeated SQLValidationRule validation_rules = 3;
}

// ParseAndValidateSQLResponse
message ProcessSQLResponse {
  // Processed SQL template without applying jinja params
  string processed_sql = 1;
  // Processed SQL after applying jinja params
  string rendered_sql = 2;
  // Markdown representation of validation errors for each rules
  repeated string validation_errors = 3;
  // List of column projections from the sql
  repeated string projections = 4;
}

// Archive Entities Request
message ArchiveEntitiesRequest {
  // list of sources to be archived
  repeated string source_ids = 1;
  // list of metrics to be archived
  repeated string metric_ids = 2;
  // list of packs to be archived
  repeated string pack_ids = 3;
  // Reason for archival
  string message = 4;
  // for dry update to test
  bool dry = 5;
  // archive user
  UserGroup user = 6;
  // approved
  bool is_approved = 7;
  // pr_number
  string pr_number = 8;
}

// Response for Archive entities request
message ArchiveEntitiesResponse {
  // archive response message
  string message = 1;
  // response code
  StatusCode code = 2;
  // pull request number
  string pr_number = 3;
}

// Archive Entities Request
message UnArchiveEntitiesRequest {
  // list of sources to be unarchived
  repeated string source_ids = 1;
  // list of packs to be unarchived
  repeated string metric_ids = 2;
  // list of packs to be unarchived
  repeated string pack_ids = 3;
  // Reason for archival
  string message = 4;
  // for dry update to test
  bool dry = 5;
  // archive user
  UserGroup user = 6;
  // approved
  bool is_approved = 7;
  // pr_number
  string pr_number = 8;
}

// Response for Archive entities request
message UnArchiveEntitiesResponse {
  // archive response message
  string message = 1;
  // response code
  StatusCode code = 2;
  // pull request number
  string pr_number = 3;
}

// Upsert cube definition request
message UpsertMetricCubeRequest {
  // list of cubes
  MetricCube cube = 1;
  // for dry update to test
  bool dry = 2;
  // Update user
  UserGroup user = 3;
  // approved
  bool is_approved = 4;
  // pr number
  string pr_number = 5;
}

// Response for Archive entities request
message UpsertMetricCubeResponse {
  // archive response message
  string message = 1;
  // response code
  StatusCode code = 2;
  // id
  string id = 3;
}

// Get metric cubes request
message GetMetricCubesRequest {
  // cube id
  repeated string ids = 1;
  // cube name
  repeated string names = 2;
  reserved 3;
  reserved "cube_table";
  // list of metrics ids
  repeated string metric_ids = 4;
  // list of dimension ids
  repeated string dimension_ids = 5;
}

// Get Cube
message GetMetricCube {
  // cube
  MetricCube cube = 1;
  // update metadata
  UpdateMetaData update_metadata = 2;
}

// Get metric cubes response
message GetMetricCubesResponse {
  // list of cubes
  repeated GetMetricCube cubes = 1;
  // response code
  StatusCode code = 2;
  // response message
  string message = 3;
}

// Get metric cube list request
message GetMetricCubeListRequest {
  // Toggle/Boolean based filters
  message ToggleFilters {
    // Include unapproved (False by default)
    bool include_unapproved = 1;
    // Include archived (False by default)
    bool include_archived = 2;
  }

  // List of Field based Filters
  repeated IndexFilter filters = 1;
  // Pagination
  Pagination pagination = 2;
  // List of toggle based filters
  ToggleFilters toggles = 3;
}

// Get metric cube list response
message GetMetricCubeListResponse {
  // Get metric
  repeated GetMetricCube cubes = 1;
  // Pagination
  Pagination pagination = 2;
}

// Get identifier list request
message GetIdentifierListRequest {
  // Filters
  repeated IndexFilter filters = 1;
  // Pagination
  Pagination pagination = 2;
}

// Get identifier list response
message GetIdentifierListResponse {
  // Identifiers
  repeated IdentifierReference identifiers = 1;
  // Pagination
  Pagination pagination = 2;
}

// Upsert Entity Monitor Request
message UpsertEntityMonitorsRequest {
  // entity monitor checks
  repeated EntityMonitor monitors = 1;
  // update user
  UserGroup user = 2;
}

// Upsert Entity Monitor Response
message UpsertEntityMonitorsResponse {
  // id
  repeated string ids = 1;
  // response message
  string message = 2;
  // response code
  StatusCode code = 3;
}

// Delete Entity Monitor Request
message DeleteEntityMonitorsRequest {
  // entity monitor ids
  repeated string monitor_ids = 1;
  // update user
  UserGroup user = 2;
}

// Delete Entity Monitor Response
message DeleteEntityMonitorsResponse {
  // id
  repeated string ids = 1;
  // response message
  string message = 2;
  // response code
  StatusCode code = 3;
}

// Get Entity Monitors Request
message GetEntityMonitorsRequest {
  // entity monitor ids
  repeated string monitor_ids = 1;
  // entity monitor ids
  repeated string entity_ids = 2;
  // entity_type
  UMPEntityType entity_type = 3;
  // monitor_type
  EntityMonitorType monitor_type = 4;
}

// Delete Entity Monitor Response
message GetEntityMonitorsResponse {
  // entity monitors
  repeated EntityMonitor monitors = 1;
  // response message
  string message = 2;
  // response code
  StatusCode code = 3;
}

// GetMetricPacksRequest
message GetMetricPacksRequest {
  // ids
  repeated string ids = 1;
  // names
  repeated string names = 2;
  // allow_hidden
  bool allow_hidden = 3;
  // Include impact formulas (False by default)
  bool include_impact_formulas = 4;
}

// GetMetricPacksResponse
message GetMetricPacksResponse {
  // packs
  repeated MetricPack metric_packs = 1;
  // response code
  StatusCode code = 2;
  // response message
  string message = 3;
}

// GetMetricPackListRequest
message GetMetricPackListRequest {
  // Toggle/Boolean based filters
  message ToggleFilters {
    // Include hidden packs (False by default)
    bool include_hidden_packs = 1;
    // Include archived (False by default)
    bool include_archived = 2;
    // Include impact formulas (False by default)
    bool include_impact_formulas = 3;
  }

  // List of Field based Filters
  repeated IndexFilter filters = 1;
  // Pagination
  Pagination pagination = 2;
  // List of toggle based filters
  ToggleFilters toggles = 3;
  // If provided, the API will only return metrics bookmarked by at least one included user. If empty, no filter
  repeated string bookmark_filter_emails = 4;
}

// GetMetricPackListResponse
message GetMetricPackListResponse {
  // Get metric
  repeated MetricPackSummary metric_pack_summaries = 1;
  // Pagination
  Pagination pagination = 2;
}

// AddMetricPackRequest
message AddMetricPackRequest {
  // id
  string id = 1;
  // name
  string name = 2;
  // description
  string description = 3;
  // owner_names
  repeated string owner_names = 4;
  // group_owner_ids
  repeated string group_owner_ids = 5;
  // labeled_metrics
  repeated LabeledMetric labeled_metrics = 6;
  // user
  string user = 7;
  // is_hidden
  bool is_hidden = 8;
}

// AddMetricPackResponse
message AddMetricPackResponse {
  // metric_pack
  string pack_id = 1;
  // code
  StatusCode code = 2;
}

// UpdateMetricPackRequest
message UpdateMetricPackRequest {
  // id
  string id = 1;
  // name
  string name = 2;
  // description
  string description = 3;
  // labeled_metrics
  repeated LabeledMetric labeled_metrics = 4;
  // user
  string user = 5;
  // is_hidden
  bool is_hidden = 6;
  // group_owner_ids
  repeated string group_owner_ids = 7;
}

// UpdateMetricPackResponse
message UpdateMetricPackResponse {
  // metric_pack
  string pack_id = 1;
  // code
  StatusCode code = 2;
}

// ApproveMetricPackRequest
message ApproveMetricPackRequest {
  // pack_id
  string pack_id = 1;
  // user
  string user = 2;
}

// ApproveMetricPackResponse
message ApproveMetricPackResponse {
  // pack_id
  string pack_id = 1;
  // code
  StatusCode code = 2;
}

// RejectMetricPackRequest
message RejectMetricPackRequest {
  // pack_id
  string pack_id = 1;
  // user
  string user = 2;
}

// RejectMetricPackResponse
message RejectMetricPackResponse {
  // pack_id
  string pack_id = 1;
  // code
  StatusCode code = 2;
}

// Get metric packs that contain metric Request
message GetPacksContainingMetricRequest {
  // Toggle/Boolean based filters
  message ToggleFilters {
    // Include archived (False by default)
    bool include_archived = 1;
    // Include hidden (False by default)
    bool include_hidden = 2;
  }
  // metric_id
  string id = 1;
  // Pagination
  Pagination pagination = 2;
  // ToggleFilters
  ToggleFilters toggle_filters = 3;
}

// Get metric packs that contain metric Response
message GetPacksContainingMetricResponse {
  // Metric Pack Summaries
  repeated MetricPackSummary metric_pack_summaries = 1;
  // Pagination
  Pagination pagination = 2;
}

// UpdateEntityStatusRequest - Used for auto-archival of entities
message UpdateEntityStatusRequest {
  reserved 1;
  reserved "entity_id";
  reserved 2;
  reserved "entity_type";
  // list of sources to be updated
  repeated string source_ids = 5;
  // list of metrics to be updated
  repeated string metric_ids = 6;
  // list of packs to be updated
  repeated string pack_ids = 7;
  // status - Can be either ENTITY_STATUS_MARKED_FOR_ARCHIVAL / ENTITY_STATUS_DEPLOYED
  EntityStatus status = 3;
  // user
  string user = 4;
}

// UpdateEntityStatusResponse
message UpdateEntityStatusResponse {
  reserved 1;
  reserved "entity_id";
  // list of sources updated successfully
  repeated string source_ids = 3;
  // list of metrics updated successfully
  repeated string metric_ids = 4;
  // list of packs updated successfully
  repeated string pack_ids = 5;
  // code
  StatusCode code = 2;
  // response message
  string message = 6;
}

// Create Firefly Backfill Request
message CreateFireflyBackfillRequest {
  // Compute Platform enum
  enum ComputePlatform {
    // Unspecified
    COMPUTE_PLATFORM_UNSPECIFIED = 0;
    // Snowflake compute
    COMPUTE_PLATFORM_SNOWFLAKE = 1;
    // Datalake compute
    COMPUTE_PLATFORM_DATALAKE = 2;
  }
  // Entity type Enum
  enum EntityType {
    // Unspecified
    ENTITY_TYPE_UNSPECIFIED = 0;
    // Source entity
    ENTITY_TYPE_SOURCE = 1;
    // Cube Entity
    ENTITY_TYPE_CUBE = 2;
  }
  // source or cube name
  string entity_name = 1;
  reserved 2;
  reserved "entity_id";
  // type source or cube
  EntityType entity_type = 3;
  // compute platform - snowflake or datalake
  ComputePlatform compute_platform = 4;
  // Backfill start date in YYY-MM-DD format
  string backfill_start_date = 5;
  // Backfill end date in YYY-MM-DD format
  string backfill_end_date = 6;
  // requested_by
  string requested_by = 7;
  // Backfill properties, can add any additional properties such as warehouse for snowflake etc. ToDo: Narendra
  map<string, string> properties = 8;
  // ID of the entity
  string entity_id_str = 9 [(doordash.api.client.optional) = true];
}

// Create Firefly Backfill Response
message CreateFireflyBackfillResponse {
  // archive response message
  string message = 1;
  // response code
  StatusCode code = 2;
}

// Check status of Firefly Backfill Request
message GetFireflyBackfillStatusRequest {
  // Entity type Enum source or cube
  enum EntityType {
    // Unspecified
    ENTITY_TYPE_UNSPECIFIED = 0;
    // Source entity
    ENTITY_TYPE_SOURCE = 1;
    // Cube Entity
    ENTITY_TYPE_CUBE = 2;
  }
  // source or cube name
  string entity_name = 1;
  // source or cube id
  string entity_id = 2 [(doordash.api.client.optional) = true];
  // type source or cube
  EntityType entity_type = 3;
}

// Check status of Firefly Backfill Response
message GetFireflyBackfillStatusResponse {
  // Backfill Status enum for backfill creation
  enum FireflyBackfillStatus {
    // Unknown
    FIREFLY_BACKFILL_STATUS_UNSPECIFIED = 0;
    // Created
    FIREFLY_BACKFILL_STATUS_CREATED = 1;
    // In Progress
    FIREFLY_BACKFILL_STATUS_IN_PROGRESS = 2;
    // Success
    FIREFLY_BACKFILL_STATUS_SUCCESS = 3;
    // Pending
    FIREFLY_BACKFILL_STATUS_PENDING = 4;
    // Cancelled
    FIREFLY_BACKFILL_STATUS_CANCELLED = 5;
    // Failure
    FIREFLY_BACKFILL_STATUS_FAILURE = 6;
  }
  // archive response message
  string message = 1;
  // backfil status
  FireflyBackfillStatus status = 2;
  // airflow_dag_run_url
  string airflow_dag_run_url = 3;
  // backfill start time stamp
  google.protobuf.Timestamp backfill_started_at = 4;
  // backfill end time stamp
  google.protobuf.Timestamp backfill_completed_at = 5;
}

// Bookmark Entity Request
message BookmarkEntityRequest {
  // User to associate with the bookmarked entity
  string user_email = 1;
  // ID of the entity
  string entity_id = 2;
  // Entity type: metric, source, dimension, or metric_pack
  string entity_type = 3;
}

// Bookmark Entity Response
message BookmarkEntityResponse {
  // Response status code
  StatusCode status_code = 1;
  // Id of the new bookmarked_entity
  string id = 2;
}

// Unbookmark Entity Request
message UnbookmarkEntityRequest {
  // User associated with the bookmarked entity
  string user_email = 1;
  // ID of the entity
  string entity_id = 2;
  // Entity type: metric, source, dimension, or metric_pack
  string entity_type = 3;
  // ID of the bookmarked_entity. Optional: can delete with id or entity_type + entity_id
  string id = 4;
}

// Unbookmark Entity Response
message UnbookmarkEntityResponse {
  // Response status code
  StatusCode status_code = 1;
}

// Can User Approve Entity Request
message CanUserApproveEntityRequest {
  // ID of the entity
  string entity_id = 1;
  // user information so we can verify if users is allowed to approve
  UserGroup user = 2;
}

// Can User Approve Entity Response
message CanUserApproveEntityResponse {
  // Whether the User is authorized to review the entity
  bool can_approve = 1;
  // response message
  string message = 2;
  // response code
  StatusCode code = 3;
}

// Review entity request
message ReviewEntityRequest {
  // the id of the entity a user is reviewing
  string entity_id = 1;
  // entity type (metric or source)
  UMPEntityType entity_type = 2;
  // user information so we can verify if users is allowed to approve/reject
  UserGroup user = 3;
  // review action (approve, reject)
  ReviewAction action = 4;
}

// Review entity response
message ReviewEntityResponse {
  // response message
  string message = 1;
  // response code
  StatusCode code = 2;
}

// Get entity changes request
message GetEntityChangesRequest {
  // revision id
  string revision_id = 1;
  // string entity id (if review is not provided, we will get the latest entity changes compared to active version)
  string entity_id = 2;
}

// Get entity changes response
message GetEntityChangesResponse {
  // current configuration
  string current_version = 1;
  // pending version
  string pending_version = 2;
  // response code
  StatusCode code = 3;
  // response message
  string message = 4;
}

// Get entity history request
message GetEntityHistoryRequest {
  // entity id
  string entity_id = 1;
  // pagination
  Pagination pagination = 2;
}

// Get entity history response
message GetEntityHistoryResponse {
  // entity history
  repeated EntityHistory entity_history = 1;
  // pagination
  Pagination pagination = 2;
  // response code
  StatusCode code = 3;
  // response message
  string message = 4;
}

// Entity History
message EntityHistory {
  // entity id
  string entity_id = 1;
  // entity type
  UMPEntityType entity_type = 2;
  // review id
  string review_id = 3;
  // user who initiated the review
  UserGroup author = 4;
  // user who reviewed
  UserGroup reviewer = 5;
  // timestamp
  google.protobuf.Timestamp updated_at = 6;
  // description (system generated description of what changed)
  string description = 7;
  // whether the change was rejected or approved
  ReviewAction action = 8;
  // indicates the status of the entity
  EntityStatus status = 9;
}

// add cut to dimension request
message AddDimensionCutsRequest {
  // dimension name
  string dimension_name = 1;
  // dimension id
  string dimension_id = 2;
  // cut values
  repeated string cut_values = 3;
  // Platform that defined this measure
  PlatformType platform = 4;
  // override
  bool override = 5;
}

// add cut to dimension response
message AddDimensionCutsResponse {
  // response message
  string message = 1;
  // response code
  StatusCode code = 2;
}

// ask UMP AI request
message AskUMPAiRequest {
  // question
  string question_key = 1;
  // data
  map<string, string> data = 8;
}

// ask UMP AI response
message AskUMPAiResponse {
  // response message
  string message = 1;
  // response code
  StatusCode code = 2;
}
