syntax = "proto3";

package cloud_control_plane.v1;

import "cloud_control_plane/common.proto";
import "google/protobuf/wrappers.proto";

option go_package = "github.com/doordash/services-protobuf/generated/cloud_control_plane/api/v1";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.cloud_control_plane.rpc.api";

// ECRRepoConfig defines the configuration values for an ECR repo
message ECRRepoConfig {
  // enable_aggressive_lifecycle_policy determines whether or not to enable garbage collection on images
  google.protobuf.BoolValue enable_aggressive_lifecycle_policy = 1;

  // additional_aws_account_access are the additional AWS accounts IDs that will be able to pull the image
  repeated google.protobuf.StringValue additional_aws_account_access = 2;

  // enable_multi_region determines whether or not to enable multi region for the repo
  google.protobuf.BoolValue enable_multi_region = 3;

  // enable_lambda_deployment determines whether or not to enable lambda deployments for the repo
  google.protobuf.BoolValue enable_lambda_deployment = 4;

  // enable_tag_mutability determines whether or not to enable tag mutability for the repo
  google.protobuf.BoolValue enable_tag_mutability = 5;

  // num_images_retained is the maximum number of images a repo should retain
  google.protobuf.Int32Value num_images_retained = 6;

  // num_rc_images_retained is the maximum number of release candidate images a repo should retain
  google.protobuf.Int32Value num_rc_images_retained = 7;

  // enable_force_delete determines whether or not a repo can be deleted if it contains images
  google.protobuf.BoolValue enable_force_delete = 8;

  // tags are the tags to associate with the repo
  repeated Tag tags = 9;

  // name is the name of the ECR repo
  google.protobuf.StringValue name = 10;
}

// ECRRepoOutputs defines the output values for an ECR repo
message ECRRepoOutputs {
  // arn is the AWS ARN of the repo
  google.protobuf.StringValue arn = 1;

  // url is the URL of the repo
  google.protobuf.StringValue url = 2;
}

// CreateECRRepoRequest defines the request for creating a new ECR repo for a microservice
message CreateECRRepoRequest {
  // environment is the environment in which the repo should be created
  Environment environment = 1;

  // service_name is the name of the service that will own the repo
  google.protobuf.StringValue service_name = 2;

  // owning_group is the name of the Okta group that owns the repo
  google.protobuf.StringValue owning_group = 3;

  // config is the desired configuration of the repo
  ECRRepoConfig config = 4;
}

// CreateECRRepoResponse defines the response for creating a new ECR repo for a microservice
message CreateECRRepoResponse {
  // metadata is the metadata for the repo
  ResourceMetadata metadata = 1;
}

// GetECRRepoRequest defines the request for getting an ECR repo for a microservice
message GetECRRepoRequest {
  // id is the id of the ECR repo
  google.protobuf.StringValue id = 1;
}

// GetECRRepoResponse defines the response for getting an ECR repo for a microservice
message GetECRRepoResponse {
  // config is the configuration of ECR repo
  ECRRepoConfig config = 1;

  // outputs are the outputs of the repo
  ECRRepoOutputs outputs = 2;

  // metadata is the metadata for the repo
  ResourceMetadata metadata = 3;
}

// UpdateECRRepoRequest defines the request for updating an ECR repo for a microservice
message UpdateECRRepoRequest {
  // id is the id of the ECR repo
  google.protobuf.StringValue id = 1;

  // config is the desired configuration of the repo
  ECRRepoConfig config = 2;
}

// UpdateECRRepoResponse defines the response for updating an ECR repo for a microservice
message UpdateECRRepoResponse {
  // metadata is the metadata for the repo
  ResourceMetadata metadata = 1;
}

// ListECRReposRequest defines the request for listing ECR repos
message ListECRReposRequest {
  // page is the 1-based page to retrieve
  google.protobuf.Int32Value page = 1;
  // limit is the number of items to retrieve per page
  google.protobuf.Int32Value limit = 2;
}

// ListECRReposResponse defines the response for listing ECR repos
message ListECRReposResponse {
  // Repo is a container for all repo-related information
  message Repo {
    // config is the configuration of ECR repo
    ECRRepoConfig config = 1;

    // outputs are the outputs of the repo
    ECRRepoOutputs outputs = 2;

    // metadata is the metadata for the repo
    ResourceMetadata metadata = 3;
  }

  // repos are the returned repos
  repeated Repo repos = 1;

  // next_page is the number of the next page to retrieve, or 0 if there are no more pages
  google.protobuf.Int32Value next_page = 2;

  // limit is the limit that was used to generate the page
  google.protobuf.Int32Value limit = 3;
}

// ImportECRRepoRequest defines the request for importing an existing ECR repo
message ImportECRRepoRequest {
  // infra_service_resource_id is the ID of the infra service resource
  google.protobuf.StringValue infra_service_resource_id = 1;

  // environment is the environment in which the repo should be created
  Environment environment = 2;

  // service_name is the name of the service that will own the repo
  google.protobuf.StringValue service_name = 3;

  // owning_group is the name of the Okta group that owns the repo
  google.protobuf.StringValue owning_group = 4;
}

// ImportECRRepoResponse defines the response for importing an existing ECR repo
message ImportECRRepoResponse {
  // metadata is the metadata for the repo
  ResourceMetadata metadata = 1;
}
