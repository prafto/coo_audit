syntax = "proto3";

package cloud_control_plane.v1;

import "cloud_control_plane/common.proto";
import "google/protobuf/wrappers.proto";

option go_package = "github.com/doordash/services-protobuf/generated/cloud_control_plane/api/v1";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.cloud_control_plane.rpc.api";

// SFTPServerConfig defines the configuration values for an SFTP server
message SFTPServerConfig {
  // EndpointType defines the type of endpoint
  enum EndpointType {
    // ENDPOINT_TYPE_UNSPECIFIED is an unspecified endpoint type
    ENDPOINT_TYPE_UNSPECIFIED = 0;
    // ENDPOINT_TYPE_PUBLIC is a public endpoint type
    ENDPOINT_TYPE_PUBLIC = 1;
    // ENDPOINT_TYPE_VPC is a VPC endpoint type
    ENDPOINT_TYPE_VPC = 2;
  }

  // VPCConfig defines the VPC configuration for the server
  message VPCConfig {
    // ExistingVPC defines configuration values for using an existing VPC for the server
    message ExistingVPC {
      // vpc_id is the ID of the existing VPC
      google.protobuf.StringValue vpc_id = 1;
      // vpc_cidr is the CIDR of the existing VPC
      google.protobuf.StringValue vpc_cidr = 2;
      // vpc_subnet_ids is the IDs of the existing VPC subnets
      repeated google.protobuf.StringValue vpc_subnet_ids = 3;
      // vpc_subnet_eip_ids is the IDs of the existing VPC subnets' EIPs
      repeated google.protobuf.StringValue vpc_subnet_eip_ids = 4;
      // internal is whether the VPC is internal
      google.protobuf.BoolValue internal = 5;
    }

    // NewVPC defines configuration values for creating a new VPC for the server
    message NewVPC {
      // vpc_cidr is the CIDR of the new VPC
      google.protobuf.StringValue vpc_cidr = 1;
      // vpc_subnet_cidrs is the CIDRs of the new VPC subnets
      repeated google.protobuf.StringValue vpc_subnet_cidrs = 2;
    }

    // config is the VPC configuration
    oneof config {
      // existing_vpc is the configuration for using an existing VPC
      ExistingVPC existing_vpc = 1;
      // new_vpc is the configuration for creating a new VPC
      NewVPC new_vpc = 2;
    }
  }

  // User defines a user for the server
  message User {
    // name is the name of the user
    google.protobuf.StringValue name = 1;
    // home_dir is the home directory of the user
    google.protobuf.StringValue home_dir = 2;
    // public_keys are the public keys for the user
    repeated google.protobuf.StringValue public_keys = 3;
  }

  // server_name is the name of the server
  google.protobuf.StringValue server_name = 1;
  // service_name is the name of the service that will own the server
  google.protobuf.StringValue service_name = 2;
  // endpoint_type is the type of endpoint for the server
  EndpointType endpoint_type = 3;
  // vpc_config is the VPC configuration for the server
  VPCConfig vpc_config = 4;
  // access_cidrs are the CIDRs that can access the server
  repeated google.protobuf.StringValue access_cidrs = 5;
  // use_unified_bucket is whether to use the unified bucket in the environment for server storage
  google.protobuf.BoolValue use_unified_bucket = 6;
  // customer_provided_s3_bucket_name is the name of the customer-provided S3 bucket for server storage
  google.protobuf.StringValue customer_provided_s3_bucket_name = 7;
  // users are the users for the server
  repeated User users = 8;
  // use_vended_log_group is whether to use the vended log group for server logs
  google.protobuf.BoolValue use_vended_log_group = 9;
  // tags are the tags for the server
  repeated Tag tags = 10;
}

// SFTPServerOutputs defines the output values for an S3 bucket
message SFTPServerOutputs {
  // server_id is the ID of the server
  google.protobuf.StringValue server_id = 1;
  // server_name is the name of the server
  google.protobuf.StringValue server_endpoint = 2;
  // endpoint_alias is the alias of the server endpoint
  google.protobuf.StringValue endpoint_alias = 3;
  // endpoint_name is the name of the server endpoint
  google.protobuf.StringValue endpoint_name = 4;
  // user_names are the names of the users
  repeated google.protobuf.StringValue user_names = 5;
}

// CreateSFTPServerRequest defines the request for creating a new S3 bucket for a microservice
message CreateSFTPServerRequest {
  // environment is the environment in which the bucket should be created
  Environment environment = 1;

  // service_name is the name of the service that will own the bucket
  google.protobuf.StringValue service_name = 2;

  // owning_group is the name of the Okta group that owns the bucket
  google.protobuf.StringValue owning_group = 3;

  // config is the desired configuration of the bucket
  SFTPServerConfig config = 4;
}

// CreateSFTPServerResponse defines the response for creating a new S3 bucket for a microservice
message CreateSFTPServerResponse {
  // metadata is the metadata for the bucket
  ResourceMetadata metadata = 1;
}

// GetSFTPServerRequest defines the request for getting an S3 bucket for a microservice
message GetSFTPServerRequest {
  // id is the id of the S3 bucket
  google.protobuf.StringValue id = 1;
}

// GetSFTPServerResponse defines the response for getting an S3 bucket for a microservice
message GetSFTPServerResponse {
  // config is the configuration of S3 bucket
  SFTPServerConfig config = 1;

  // outputs are the outputs of the bucket
  SFTPServerOutputs outputs = 2;

  // metadata is the metadata for the bucket
  ResourceMetadata metadata = 3;
}

// UpdateSFTPServerRequest defines the request for updating an S3 bucket for a microservice
message UpdateSFTPServerRequest {
  // id is the id of the S3 bucket
  google.protobuf.StringValue id = 1;

  // config is the desired configuration of the bucket
  SFTPServerConfig config = 2;
}

// UpdateSFTPServerResponse defines the response for updating an S3 bucket for a microservice
message UpdateSFTPServerResponse {
  // metadata is the metadata for the bucket
  ResourceMetadata metadata = 1;
}

// ListSFTPServersRequest defines the request for listing S3 buckets
message ListSFTPServersRequest {
  // page is the 1-based page to retrieve
  google.protobuf.Int32Value page = 1;
  // limit is the number of items to retrieve per page
  google.protobuf.Int32Value limit = 2;
}

// ListSFTPServersResponse defines the response for listing S3 buckets
message ListSFTPServersResponse {
  // Bucket is a container for all bucket-related information
  message Bucket {
    // config is the configuration of S3 bucket
    SFTPServerConfig config = 1;

    // outputs are the outputs of the bucket
    SFTPServerOutputs outputs = 2;

    // metadata is the metadata for the bucket
    ResourceMetadata metadata = 3;
  }

  // Server is a container for all server-related information
  message Server {
    // config is the configuration of S3 bucket
    SFTPServerConfig config = 1;

    // outputs are the outputs of the bucket
    SFTPServerOutputs outputs = 2;

    // metadata is the metadata for the bucket
    ResourceMetadata metadata = 3;
  }

  // servers are the returned servers
  repeated Server servers = 1;

  // next_page is the number of the next page to retrieve, or 0 if there are no more pages
  google.protobuf.Int32Value next_page = 2;

  // limit is the limit that was used to generate the page
  google.protobuf.Int32Value limit = 3;
}

// ImportSFTPServerRequest defines the request for importing an existing SFTP server
message ImportSFTPServerRequest {
  // infra_service_resource_id is the ID of the infra service resource
  google.protobuf.StringValue infra_service_resource_id = 1;

  // environment is the environment in which the server lives
  Environment environment = 2;

  // service_name is the name of the service that owns the server
  google.protobuf.StringValue service_name = 3;

  // owning_group is the name of the Okta group that owns the server
  google.protobuf.StringValue owning_group = 4;
}

// ImportSFTPServerResponse defines the response for importing an existing SFTP server
message ImportSFTPServerResponse {
  // metadata is the metadata for the server
  ResourceMetadata metadata = 1;
}
