syntax = "proto3";

package component_catalog.dx.nv.common.primitives.v1;

import "action-catalog/dx/action.proto";
import "component-catalog.dx/lego_logging_deprecated.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/wrappers.proto";

option go_package = "github.com/doordash/services-protobuf/generated/component-catalog.dx/nv/common/primitives";
option java_multiple_files = true;
option java_package = "com.doordash.rpc.component_catalog.dx.nv.common.primitives";

// a local image asset
message LocalImage {
  // an asset type that will be mapped to the actual image asset in frontend
  enum ImageType {
    // default
    IMAGE_TYPE_UNSPECIFIED = 0;
    /**
     * Checkout images
     */
    // pay with red card (credit)
    IMAGE_TYPE_RED_CARD_CREDIT = 1;
    // pay with red card (debit)
    IMAGE_TYPE_RED_CARD_DEBIT = 2;
    // proceed to delivery
    IMAGE_TYPE_PROCEED_TO_DELIVERY = 3;
    // self-checkout or cashier
    IMAGE_TYPE_SELF_CHECKOUT_OR_CASHIER = 4;
    // cashier checkout only
    IMAGE_TYPE_CASHIER_CHECKOUT = 5;
    // do not use red card to checkout
    IMAGE_TYPE_NO_RED_CARD = 6;
    // put ambient/cold/frozen items in different bags
    IMAGE_TYPE_AMBIENT_COLD_FROZEN = 7;
    // put a label on bag
    IMAGE_TYPE_ATTACH_LABEL_TO_BAG = 8;
    // put bags in the staging area
    IMAGE_TYPE_ORDER_STAGING_AREA = 9;
    // do not put receipt in the bag
    IMAGE_TYPE_NO_RECEIPT_IN_BAG = 10;
    // put an alcohol label on the bag
    IMAGE_TYPE_ALCOHOL_BAG = 11;
    // ask cashier to remove taxes
    IMAGE_TYPE_MANUAL_TAX_REMOVAL = 12;
    // ask dasher to go to curbside pickup
    IMAGE_TYPE_ORDER_CURBSIDE_PICKUP = 13;
    // ask cashier to provide bags
    IMAGE_TYPE_ASK_FOR_BAGS = 14;

    /**
     * PFQ(Poor Food Quality) images
     */
    // images for expired milk
    IMAGE_TYPE_EXPIRED_MILK = 15;
    // images for expired meat
    IMAGE_TYPE_EXPIRED_MEAT = 16;
    // images for bad produce
    IMAGE_TYPE_BAD_PRODUCE = 17;
    // images for broken eggs
    IMAGE_TYPE_BROKEN_EGGS = 18;

    /**
     * Add additional images below.
     */
    // put receipt in bag
    IMAGE_TYPE_KEEP_RECEIPT_IN_BAG = 19;
    // use virtual or physical red card
    IMAGE_TYPE_VIRTUAL_OR_PHYSICAL_RED_CARD = 20;
    // image to identify PLU of the produce item
    IMAGE_TYPE_FIND_PLU_OF_PRODUCE = 21;
    // a red hotbag image
    IMAGE_TYPE_USE_YOUR_BAG = 22;
    // image of a receipt, for receipt capture
    IMAGE_TYPE_RECEIPT_CAPTURE_INSTRUCTIONS = 23;
    // image for grocery pro refund prevention
    IMAGE_TYPE_GOOD_BAD_PHOTO_SHELF_EXAMPLE = 24;
    // bag with label A on it, for batched orders
    IMAGE_TYPE_BAG_LABEL_A = 25;
    // bag with label B on it, for batched orders
    IMAGE_TYPE_BAG_LABEL_B = 26;
    // bag with label C on it, for batched orders
    IMAGE_TYPE_BAG_LABEL_C = 27;
    // bag with label D on it, for batched orders
    IMAGE_TYPE_BAG_LABEL_D = 28;
    // image of a scanner with QR code
    IMAGE_TYPE_SCANNER_WITH_QR_CODE = 29;
    // image of a good and bad example of receipt for receipt capture
    IMAGE_TYPE_RECEIPT_CAPTURE_GOOD_BAD_EXAMPLE = 30;

    /**
     * Dx send perishable photo images
     */
    // take photo of the package meat example
    IMAGE_TYPE_TAKE_PHOTO_PACKAGE_MEAT_EXAMPLE = 31;
    // take photo of the butcher counter example
    IMAGE_TYPE_TAKE_PHOTO_BUTCHER_COUNTER_EXAMPLE = 32;
    // take photo of the produce example
    IMAGE_TYPE_TAKE_PHOTO_PRODUCE_EXAMPLE = 33;

    /**
     * Checkout images for Audit Lane
     */
    // Signage showing where to look for audit lane
    IMAGE_TYPE_AUDIT_LANE_SIGNAGE = 34;
    // Image to show Audit work is in progress
    IMAGE_TYPE_AUDIT_LANE_WORK_IN_PROGRESS = 35;
    // A green check image indicating audit success
    IMAGE_TYPE_AUDIT_LANE_SUCCESS = 36;

    /**
     * PFQ Images for live seafood
     */
    // image for 3 fishes
    IMAGE_TYPE_THREE_FISH = 37;
    //image for crab and lobster
    IMAGE_TYPE_CRAB_LOBSTER = 38;
    //image for clam and mussel
    IMAGE_TYPE_CLAMS_MUSSELS = 39;

    //image for pro shopper reward
    IMAGE_TYPE_PRO_SHOPPER_REWARD = 40;

    // image for checkout lane
    IMAGE_TYPE_CHECKOUT_LANE = 41;

    /**
     * Images for batched orders
     */
    // two orders
    IMAGE_TYPE_CART_GUIDANCE_AB = 42;
    // three orders
    IMAGE_TYPE_CART_GUIDANCE_ABC = 43;

    // image for self-checkout only
    IMAGE_TYPE_SELF_CHECKOUT = 44;

    /**
     * Images for Single Order Shopping Instructions
     */
    // image with basket and red card
    IMAGE_TYPE_DSD_BASKET_WITH_RED_CARD = 45;
    // image with only basket
    IMAGE_TYPE_DSD_BASKET_WITHOUT_RED_CARD = 46;
    // image with pharmacy counter
    IMAGE_TYPE_DSD_PHARMACY_COUNTER = 47;
    // image with car
    IMAGE_TYPE_DSD_CAR_WITH_DASHER = 48;
    // image with qr code
    IMAGE_TYPE_DSD_PAY_WITH_QR_CODE = 49;

    /**
       Images for Shop Handoff
       **/
    // image for handing off to store associate
    IMAGE_TYPE_HANDOFF_TO_ASSOCIATE = 50;
  }
  // asset type
  ImageType image_type = 1;
  // use full screen width or not
  google.protobuf.BoolValue use_full_screen_width = 2;
}

// a remote image with reloading options and UI
message ReloadableImage {
  // config for when image needs to be reloaded
  message ReloadConfig {
    // text to display when loading
    google.protobuf.StringValue loading_text = 1;
    // text to display when loading failed
    google.protobuf.StringValue failure_text = 2;
    // text to display on reload button
    google.protobuf.StringValue reload_label = 3;
    // text to display on skip button
    google.protobuf.StringValue skip_label = 4;
    // what happens when “skip” button is tapped
    repeated action_catalog.dx.v1.DxAction skip_actions = 5;
    // max number of retries
    uint32 max_retry_count = 6;
  }

  // URL to fetch image
  string url = 1;
  // alt text
  google.protobuf.StringValue alt_text = 2;
  // text to be displayed over image
  google.protobuf.StringValue text_overlay = 3;
  // content to display when reloading
  ReloadConfig reload_config = 4;
  // logging on image load success
  component_catalog.dx.v1.Logging success_logging = 5;
  // logging on image load failure
  component_catalog.dx.v1.Logging failure_logging = 6;
}

// Image definition on item details page
message ItemRemoteImage {
  // placeholder image type
  enum PlaceHolder {
    //default
    PLACE_HOLDER_ICON_UNSPECIFIED = 0;
    //item detail placeholders image
    PLACE_HOLDER_ICON_SHOP_AND_DELIVER = 1;
  }
  // Overlay icon for batched orders
  message OverlayIcon {
    // overlay icon text image label
    enum Icon {
      //default
      ICON_UNSPECIFIED = 0;
      // A
      ICON_A_BADGE_FILL = 1;
      // B
      ICON_B_BADGE_FILL = 2;
      // C
      ICON_C_BADGE_FILL = 3;
      // D
      ICON_D_BADGE_FILL = 4;
    }
    // positions where overlay icons could be placed
    enum Position {
      //default
      POSITION_UNSPECIFIED = 0;
      //top left
      POSITION_TOP_LEFT = 1;
      //top right
      POSITION_TOP_RIGHT = 2;
      //bottom left
      POSITION_BOTTOM_LEFT = 3;
      //bottom right
      POSITION_BOTTOM_RIGHT = 4;
    }
    // batch icon
    Icon icon = 1;
    // color of the badge #HEX value
    string color = 2;
    // position of icon
    Position position = 3;
  }

  // bounding box for a shelf tag in image, also contains source image and crop info
  message ItemBoundingBox {
    // x center of bounding box in absolute pixels
    google.protobuf.Int32Value bbox_center_x = 1;
    // y center of bounding box in absolute pixels
    google.protobuf.Int32Value bbox_center_y = 2;
    // bounding box width in absolute pixels
    google.protobuf.Int32Value bbox_width = 3;
    // bounding box height in absolute pixels
    google.protobuf.Int32Value bbox_height = 4;
    // timestamp string of photo from which attributes are derived. Follow yyyy-MM-dd HH:mm:ss format
    google.protobuf.StringValue time_stamp_string = 5;
    // original image width in absolute pixels
    google.protobuf.Int32Value image_width = 6;
    // original image height in absolute pixels
    google.protobuf.Int32Value image_height = 7;
    // crop area width in absolute pixels
    google.protobuf.Int32Value crop_width = 8;
    // crop area height in absolute pixels
    google.protobuf.Int32Value crop_height = 9;
    // offset distance from edge of crop area (from edge toward the interior) in absolute pixels
    google.protobuf.Int32Value edge_offset = 10;
  }

  // URL of the image
  string url = 1;
  // placeholder image
  PlaceHolder placeholder = 2;
  // Overlay icon with position
  OverlayIcon overlay_icon = 3;
  //Item Details Image Actions
  repeated action_catalog.dx.v1.DxAction actions = 4;
  // logs to display when success
  component_catalog.dx.v1.Logging success_logging = 5;
  // logs to display when failure
  component_catalog.dx.v1.Logging failure_logging = 6;
  // logs to display when image is tapped
  component_catalog.dx.v1.Logging image_tap_logging = 7;
  // logs to display when image is viewed by user
  component_catalog.dx.v1.Logging viewed_logging = 8;
  // list of bounding boxes
  repeated ItemBoundingBox item_bounding_boxes = 9;
  // image id
  google.protobuf.StringValue image_id = 10;
  // text to be displayed under image
  google.protobuf.StringValue image_text = 11;
}

// Image list definition on item details page
message ItemRemoteImages {
  // list of images
  repeated ItemRemoteImage images = 1;
}
