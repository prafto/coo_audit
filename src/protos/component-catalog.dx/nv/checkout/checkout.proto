syntax = "proto3";

package component_catalog.dx.nv.checkout.v1;

import "action-catalog/dx/action.proto";
import "component-catalog.dx/common/colors.proto";
import "component-catalog.dx/common/icon.proto";
import "component-catalog.dx/nv/common/primitives/buttons.proto";
import "component-catalog.dx/nv/common/primitives/images.proto";
import "component-catalog.dx/nv/common/prism_text.proto";
import "google/protobuf/any.proto";
import "google/protobuf/wrappers.proto";

option go_package = "github.com/doordash/services-protobuf/generated/component-catalog.dx/nv/checkout";
option java_multiple_files = true;
option java_package = "com.doordash.rpc.component_catalog.dx.nv.checkout";

// the top navigation bar on every Checkout Step
message CheckoutStepNavigationBar {
  // navigation bar title
  string title = 1;
  // buttons on the left side of nav bar
  repeated CheckoutStepNavigationBarButton left_bar_buttons = 2;
  // buttons on the right side of nav bar
  repeated CheckoutStepNavigationBarButton right_bar_buttons = 3;
}

// each button in the nav bar
message CheckoutStepNavigationBarButton {
  // an asset ID that will be mapped to the actual image asset in frontend
  enum AssetID {
    // default
    ASSET_ID_UNSPECIFIED = 0;
    // back button
    ASSET_ID_BACK = 1;
    // help button
    ASSET_ID_HELP = 2;
    // chat button
    ASSET_ID_CHAT = 3;
    // self-help button
    ASSET_ID_SELF_HELP = 4;
    // menu button
    ASSET_ID_MENU = 5;
    // close button
    ASSET_ID_CLOSE = 6;
    // info button
    ASSET_ID_INFO = 7;
  }
  // button type
  AssetID asset_id = 1;
  // button actions on tap
  repeated action_catalog.dx.v1.DxAction actions = 2;
}

// display of PST number or barcode number when barcode scan fails
message CheckoutNumberCard {
  // title explaining what this number is
  google.protobuf.StringValue title = 1;
  // the actual number value, in string format
  string value = 2;
}

// an alert area with text
message ReactiveContent {
  // button style
  enum Type {
    // default unspecified
    TYPE_UNSPECIFIED = 0;
    // grey banner with an information mark
    TYPE_INFORMATION = 1;
    // yellow banner with a warning mark
    TYPE_WARNING = 2;
    // red banner with an error mark
    TYPE_ERROR = 3;
    // highlight the text
    TYPE_HIGHLIGHT = 4;
    // blank background
    TYPE_HINT = 5;
  }
  // Leading Icon types
  enum LeadingIcon {
    // Default
    LEADING_ICON_UNSPECIFIED = 0;
    // [DEPRECATED] Notes line icon
    LEADING_ICON_ICON_NOTES_LINE = 1;
    // Hint line icon
    LEADING_ICON_INSIGHT_LINE = 2;
    // Noted line icon
    LEADING_ICON_NOTES_LINE = 3;
    // QR code scanner icon
    LEADING_ICON_SCANNER_QR_CODE = 4;
  }
  // optional primary text
  google.protobuf.StringValue title = 1;
  // secondary text
  string subtitle = 2;
  // type
  Type type = 3;
  // optional actions
  repeated action_catalog.dx.v1.DxAction actions = 4;
  // optional leading icon before text
  LeadingIcon leading_icon = 5;
}

// image banner
message ImageBanner {
  // optional primary text
  google.protobuf.StringValue title = 1;
  // secondary text
  string subtitle = 2;
  // optional actions
  repeated action_catalog.dx.v1.DxAction actions = 4;
  // optional local image
  reserved 5;
  reserved "leading_image";
  // background color
  component_catalog.dx.common.v1.PrismTextColor background_color = 6;
  // image type
  ImageType image_type = 7;

  // an asset type that will be mapped to the actual image asset in frontend
  enum ImageType {
    // default
    IMAGE_TYPE_UNSPECIFIED = 0;
    /**
     * Checkout images
     */
    // pay with red card (credit)
    IMAGE_TYPE_RED_CARD_CREDIT = 1;
    // pay with red card (debit)
    IMAGE_TYPE_RED_CARD_DEBIT = 2;
    // proceed to delivery
    IMAGE_TYPE_PROCEED_TO_DELIVERY = 3;
    // self-checkout or cashier
    IMAGE_TYPE_SELF_CHECKOUT_OR_CASHIER = 4;
    // cashier checkout only
    IMAGE_TYPE_CASHIER_CHECKOUT = 5;
    // do not use red card to checkout
    IMAGE_TYPE_NO_RED_CARD = 6;
    // put ambient/cold/frozen items in different bags
    IMAGE_TYPE_AMBIENT_COLD_FROZEN = 7;
    // put a label on bag
    IMAGE_TYPE_ATTACH_LABEL_TO_BAG = 8;
    // put bags in the staging area
    IMAGE_TYPE_ORDER_STAGING_AREA = 9;
    // do not put receipt in the bag
    IMAGE_TYPE_NO_RECEIPT_IN_BAG = 10;
    // put an alcohol label on the bag
    IMAGE_TYPE_ALCOHOL_BAG = 11;
    // ask cashier to remove taxes
    IMAGE_TYPE_MANUAL_TAX_REMOVAL = 12;
    // ask dasher to go to curbside pickup
    IMAGE_TYPE_ORDER_CURBSIDE_PICKUP = 13;
    // ask cashier to provide bags
    IMAGE_TYPE_ASK_FOR_BAGS = 14;

    /**
     * PFQ(Poor Food Quality) images
     */
    // images for expired milk
    IMAGE_TYPE_EXPIRED_MILK = 15;
    // images for expired meat
    IMAGE_TYPE_EXPIRED_MEAT = 16;
    // images for bad produce
    IMAGE_TYPE_BAD_PRODUCE = 17;
    // images for broken eggs
    IMAGE_TYPE_BROKEN_EGGS = 18;

    /**
     * Add additional images below.
     */
    // put receipt in bag
    IMAGE_TYPE_KEEP_RECEIPT_IN_BAG = 19;
    // use virtual or physical red card
    IMAGE_TYPE_VIRTUAL_OR_PHYSICAL_RED_CARD = 20;
    // image to identify PLU of the produce item
    IMAGE_TYPE_FIND_PLU_OF_PRODUCE = 21;
    // a red hotbag image
    IMAGE_TYPE_USE_YOUR_BAG = 22;

    /**
     * Checkout images for QR code payment
     */
    IMAGE_TYPE_QR_CODE_SCANNER_GUN = 23;
    // image of a receipt
    IMAGE_TYPE_RECEIPT_CAPTURE = 24;

    /**
     * Checkout images for Audit Lane
     */
    // Signage showing where to look for audit lane
    IMAGE_TYPE_AUDIT_LANE_SIGNAGE = 25;
    // Image to show Audit work is in progress
    IMAGE_TYPE_AUDIT_LANE_WORK_IN_PROGRESS = 26;
    // A green check image indicating audit success
    IMAGE_TYPE_AUDIT_LANE_SUCCESS = 27;
  }
}

// batch item carousel on the top of each checkout step
message BatchItemCarousel {
  // leading icon
  dx.common.v1.PrismIcon icon = 1;
  // batch label, e.g. "Order A"
  string batch_label = 2;
  // item label, e.g. "5 items found"
  string item_label = 3;
  // action on tap,e.g. load bottom modal
  action_catalog.dx.v1.DxAction open_action = 4;
  // image urls of order items
  repeated string image_url_list = 5;
  // a scrollable horizontal container with item images
  google.protobuf.Any container = 6;
}

// batch item carousel on the Batch Home Screen
message BatchHomeScreenItemCarousel {
  // leading icon
  dx.common.v1.PrismIcon icon = 1;
  // batch label, e.g. "Order A"
  string batch_label = 2;
  // item label, e.g. "5 items found"
  string item_label = 3;
  // action on tap,e.g. load bottom modal
  action_catalog.dx.v1.DxAction open_action = 4;
  // image urls of order items
  repeated string image_url_list = 5;
  // button to display before checkout flow is completed
  common.primitives.v1.StyledTextButton pre_checkout_content = 6;
  // text to display after checkout flow is completed
  common.v1.PrismText post_checkout_content = 7;
  // delivery UUID
  string delivery_uuid = 8;
  // a scrollable horizontal container with item images
  google.protobuf.Any container = 9;
}

// Bypass Code form that takes in a set of digits to validate audit as a fallback option
message BypassCodeForm {
  // Guardrail values will be 0-9
  message GuardrailValues {
    // Hard min guardrail value
    int32 hard_min = 1;
    // Hard max guardrail value
    int32 hard_max = 2;
  }

  // BypassCode input section
  message BypassCodeInputSection {
    // BypassCode Input length
    int32 bypass_code_length = 1;
    // Guardrail values
    GuardrailValues guardrail_values = 2;
  }

  // List of text at top of the BypassCode input form
  repeated google.protobuf.Any bypass_code_section_text_list = 1;
  // BypassCode input section
  BypassCodeInputSection bypass_code_input_section = 2;
  // Error Message to be displayed for incorrect code, deprecated as it must be any
  google.protobuf.StringValue error_message = 3 [deprecated = true];
  // Error Text to be displayed for incorrect code
  google.protobuf.Any error_text = 4;
}
