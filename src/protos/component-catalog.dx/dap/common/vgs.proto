syntax = "proto3";

package component_catalog.dx.dap.common.v1;

import "component-catalog.dx/dap/common/common.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/wrappers.proto";

option go_package = "github.com/doordash/services-protobuf/generated/component-catalog.dx/dap/common";
option java_multiple_files = true;
option java_package = "com.doordash.rpc.component_catalog.dx.dap.common";

// VGS component of text input
message DAPComponentVgsTextInput {
  // The VGS vault ID.
  string vault_id = 1;
  // The name of the key in the data bag where the tokenized value will be stored.
  string data_bag_key = 2;
  // The VGS field type, if nil, the default value is VGS_FIELD_TYPE_NONE.
  VGSFieldType field_type = 3;
  // If true the field is required to be non-empty and non-nil prior to tokenization.
  google.protobuf.BoolValue is_required = 4;
  // If true the field is required to be valid prior to tokenization.
  google.protobuf.BoolValue is_required_valid_only = 5;
  // Describes the visual formatting to apply to the field during user input.
  string format_pattern = 6;
  // Replaces the default format_pattern divider character prior to tokenization.
  string format_divider = 7;
  // The maximum number of characters that can be entered into the field.
  google.protobuf.Int32Value character_limit = 8;
  // An optional initial value that will be assigned to the text field on first appearance.
  string initial_value = 9;
  // The size of the control.
  FieldSize size = 10;
  // Hidden if nil.
  string label = 11;
  // Hidden if nil.
  string placeholder = 12;
  // Hidden if nil.
  string description = 13;
  // Hidden if nil.
  string hint = 14;
  // Displays errors live during editing.
  google.protobuf.BoolValue shows_errors_when_active = 15;
  // Turns the text field into a “password” style field.
  google.protobuf.BoolValue is_secure = 16;
  // The type of keyboard to display.
  KeyboardType keyboard_type = 17;
  // Disables auto-correct.
  google.protobuf.BoolValue disable_autocorrect = 18;
  // Changes the capitalization behavior.
  AutoCapitalizationType auto_capitalization_type = 19;
  // VGS validation rules that determine if a field is in a valid state.
  repeated VGSValidationRule validations = 20;
  // The key in the data bag where the validation state will be stored.
  string is_valid_field_key = 21;
  // The key in the data bag where the error state will be stored.
  string error_state_key = 22;
  // The name of the key in the data bag where the last 4 characters of an SSN or credit card number will be stored.
  string last4_data_bag_key = 23;
  // The name of the key in the data bag where the length of the input text will be stored.
  string text_length_data_bag_key = 24;
  // The name of the key in the data bag where the dirty state of the field will be stored.
  string is_dirty_data_bag_key = 25;
  // The name of the key in the data bag where the brand of credit card will be stored.
  string card_brand_data_bag_key = 26;
  // The name of the key in the data bag where the credit card “bin” will be stored.
  string bin_data_bag_key = 27;
  // An array of error state keys that are related to this field and that needs to be cleared when this field gets focus.
  repeated string related_error_state_keys = 28;
  // Keyboard return key type
  component_catalog.dx.dap.common.v1.ReturnKeyType return_key_type = 29;
  // An optional error message to be shown when user enters invalid value
  string error_message = 30;
}

// VGSFieldType represents the types of fields that require specific formatting and validation.
enum VGSFieldType {
  // Unspecified field type, default value and don't use.
  VGS_FIELD_TYPE_UNSPECIFIED = 0;
  // Field type that doesn't require any input formatting and validation.
  VGS_FIELD_TYPE_NONE = 1;
  // Field type that requires Credit Card Number input formatting and validation.
  VGS_FIELD_TYPE_CARD_NUMBER = 2;
  // Field type that requires Expiration Date input formatting and validation.
  VGS_FIELD_TYPE_EXPIRATION_DATE = 3;
  // Field type that requires Date input formatting and validation.
  VGS_FIELD_TYPE_DATE = 4;
  // Field type that requires Credit Card CVC input formatting and validation.
  VGS_FIELD_TYPE_CVC = 5;
  // Field type that requires Cardholder Name input formatting and validation.
  VGS_FIELD_TYPE_CARD_HOLDER_NAME = 6;
  // Field type that requires US Social Security Number input formatting and validation.
  VGS_FIELD_TYPE_SSN = 7;
}

// ValidationRule is a message that encapsulates various types of validation rules.
message VGSValidationRule {
  // The type of validation rule.
  VGSValidation type = 1;
  // The actual rule which depends on the type. Can be any VGSValidationRuleXXX message.
  google.protobuf.Struct rule = 2;
}

// VGSValidation represents the types of validation rules.
enum VGSValidation {
  // Unspecified validation type, default value and don't use.
  VGS_VALIDATION_UNSPECIFIED = 0;
  // VGS Validation type for length validation.
  VGS_VALIDATION_LENGTH = 1;
  // VGS Validation type for length match validation.
  VGS_VALIDATION_LENGTH_MATCH = 2;
  // VGS Validation type for regex pattern validation.
  VGS_VALIDATION_PATTERN = 3;
  // VGS Validation type for payment card validation.
  VGS_VALIDATION_PAYMENT_CARD = 4;
  // VGS Validation type for Luhn algorithm check validation.
  VGS_VALIDATION_LUHN_CHECK = 5;
  // VGS Validation type for card expiration date validation.
  VGS_VALIDATION_CARD_EXPIRATION_DATE = 6;
  // VGS Validation type for date range validation.
  VGS_VALIDATION_DATE_RANGE = 7;
}

// VGSValidationRuleLength is a message for length validation rule.
message VGSValidationRuleLength {
  // Min input length required
  google.protobuf.Int32Value min = 1;
  // Max input length required
  google.protobuf.Int32Value max = 2;
  // Validation error message
  string error = 3;
}

// VGSValidationRuleLengthMatch is a message for length match validation rule.
message VGSValidationRuleLengthMatch {
  // Array of valid lengths
  repeated google.protobuf.Int32Value lengths = 1;
  // Validation error message
  string error = 2;
}

// VGSValidationRulePattern is a message for regex pattern validation rule.
message VGSValidationRulePattern {
  // Regex pattern
  string pattern = 1;
  // Validation error message
  string error = 2;
}

// VGSValidationRulePaymentCard is a message for payment card validation rule.
message VGSValidationRulePaymentCard {
  // Validates card number
  google.protobuf.BoolValue validate_unknown_card_brand = 1;
  // Validation error message
  string error = 2;
}

// VGSValidationRuleLuhnCheck is a message for Luhn algorithm check validation rule.
message VGSValidationRuleLuhnCheck {
  // Validation error message
  string error = 1;
}

// VGSValidationRuleCardExpirationDate is a message for card expiration date validation rule.
message VGSValidationRuleCardExpirationDate {
  // Expected date format
  VGSCardExpirationDateFormat format = 1;
  // Validation error message
  string error = 2;
}

// VGSValidationRuleDateRange is a message for date range validation rule.
message VGSValidationRuleDateRange {
  // Start of the date range
  VGSDate start = 1;
  // End of the date range
  VGSDate end = 2;
  // Expected date format
  VGSDateFormat format = 3;
  // Validation error message
  string error = 4;
}

// VGSDate is a message that represents a date.
message VGSDate {
  // The day component
  google.protobuf.Int32Value day = 1;
  // The month component
  google.protobuf.Int32Value month = 2;
  // The year component
  google.protobuf.Int32Value year = 3;
}

// VGSCardExpirationDateFormat represents the formats for card expiration dates.
enum VGSCardExpirationDateFormat {
  // Unspecified format, default value.
  VGS_CARD_EXPIRATION_DATE_FORMAT_UNSPECIFIED = 0;
  // Format with short year, e.g., "01/22".
  VGS_CARD_EXPIRATION_DATE_FORMAT_SHORT_YEAR = 1;
  // Format with long year, e.g., "01/2022".
  VGS_CARD_EXPIRATION_DATE_FORMAT_LONG_YEAR = 2;
  // Format with short year then month, e.g., "22/01".
  VGS_CARD_EXPIRATION_DATE_FORMAT_SHORT_YEAR_THEN_MONTH = 3;
  // Format with long year then month, e.g., "2022/01".
  VGS_CARD_EXPIRATION_DATE_FORMAT_LONG_YEAR_THEN_MONTH = 4;
}

// VGSDateFormat represents the formats for general date fields.
enum VGSDateFormat {
  // Unspecified format, default value.
  VGS_DATE_FORMAT_UNSPECIFIED = 0;
  // Format for month/day/year, e.g., "MMDDYYYY".
  VGS_DATE_FORMAT_MMDDYYYY = 1;
  // Format for day/month/year, e.g., "DDMMYYYY".
  VGS_DATE_FORMAT_DDMMYYYY = 2;
  // Format for year/month/day, e.g., "YYYYMMDD".
  VGS_DATE_FORMAT_YYYYMMDD = 3;
}

// VGS component of drivers license input
message DAPComponentVgsDriversLicenseInput {
  // The VGS vault ID.
  string vault_id = 1;
  // The name of the key in the data bag where the tokenized value will be stored.
  string data_bag_key = 2;
  // The VGS field type, if nil, the default value is VGS_FIELD_TYPE_NONE.
  VGSFieldType field_type = 3;
  // If true the field is required to be non-empty and non-nil prior to tokenization.
  google.protobuf.BoolValue is_required = 4;
  // If true the field is required to be valid prior to tokenization.
  google.protobuf.BoolValue is_required_valid_only = 5;
  // Describes the visual formatting to apply to the field during user input.
  string format_pattern = 6;
  // Replaces the default format_pattern divider character prior to tokenization.
  string format_divider = 7;
  // The maximum number of characters that can be entered into the field.
  google.protobuf.Int32Value character_limit = 8;
  // An optional initial value that will be assigned to the text field on first appearance.
  string initial_value = 9;
  // The size of the control.
  FieldSize size = 10;
  // Hidden if nil.
  string label = 11;
  // Hidden if nil.
  string placeholder = 12;
  // Hidden if nil.
  string description = 13;
  // Hidden if nil.
  string hint = 14;
  // Displays errors live during editing.
  google.protobuf.BoolValue shows_errors_when_active = 15;
  // Turns the text field into a “password” style field.
  google.protobuf.BoolValue is_secure = 16;
  // The type of keyboard to display.
  KeyboardType keyboard_type = 17;
  // Disables auto-correct.
  google.protobuf.BoolValue disable_autocorrect = 18;
  // Changes the capitalization behavior.
  AutoCapitalizationType auto_capitalization_type = 19;
  // VGS validation rules that determine if a field is in a valid state.
  repeated VGSValidationRule validations = 20;
  // The key in the data bag where the validation state will be stored.
  string is_valid_field_key = 21;
  // The key in the data bag where the error state will be stored.
  string error_state_key = 22;
  // The name of the key in the data bag where the last 4 characters of an SSN or credit card number will be stored.
  string last4_data_bag_key = 23;
  // The name of the key in the data bag where the length of the input text will be stored.
  string text_length_data_bag_key = 24;
  // The name of the key in the data bag where the dirty state of the field will be stored.
  string is_dirty_data_bag_key = 25;
  // The name of the key in the data bag where the brand of credit card will be stored.
  string card_brand_data_bag_key = 26;
  // The name of the key in the data bag where the credit card “bin” will be stored.
  string bin_data_bag_key = 27;
  // A map regexes keyed by an ID stored in the data bag.
  google.protobuf.Struct regex_map = 28;
  // The key in the data bag that will hold the regex ID.
  string regex_id_key = 29;
  // The default error to display if validation fails and there isn’t a custom message in the regex_error_map.
  string regex_error = 30;
  // A map of error messages keyed by the ID of the regex_map.
  google.protobuf.Struct regex_error_map = 31;
  // The default regex ID to use if one has not been set.
  string default_regex_id = 32;
  // A dictionary of placeholder strings keyed by a regex ID.
  google.protobuf.Struct placeholder_map = 33;
  // A dictionary of format pattern strings keyed by a regex ID.
  google.protobuf.Struct format_pattern_map = 34;
  // An array of error state keys that are related to this field and that needs to be cleared when this field gets focus.
  repeated string related_error_state_keys = 35;
  // Keyboard return key type
  component_catalog.dx.dap.common.v1.ReturnKeyType return_key_type = 36;
}
