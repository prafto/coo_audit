syntax = "proto3";

package component_catalog.dx.dap.common.v1;

import "action-catalog/dx/action.proto";
import "google/protobuf/any.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/wrappers.proto";

option go_package = "github.com/doordash/services-protobuf/generated/component-catalog.dx/dap/common";
option java_multiple_files = true;
option java_package = "com.doordash.rpc.component_catalog.dx.dap.common";

// A Lego block that wraps another block and enables/disables it based on a JSON Predicate.
message DAPComponentEnableEffect {
  // The Lego block that will be enabled or disabled.
  google.protobuf.Any block = 1;
  // The predicate that will be evaluated with the contents of the data bag.
  google.protobuf.Struct predicate = 2;
  // The default enabled state of the view if evaluation fails with an error.
  google.protobuf.BoolValue default_enabled = 3;
}

// A Lego block that wraps another block and hides(gone)/shows it based on a JSON Predicate.
message DAPComponentVisibleEffect {
  // The Lego block that will be hidden or shown.
  google.protobuf.Any block = 1;
  // The predicate that will be evaluated with the contents of the data bag.
  google.protobuf.Struct predicate = 2;
  // The default visibility of the view if evaluation fails with an error.
  google.protobuf.BoolValue default_visibility = 3;
  // Enables visibility animation.
  google.protobuf.BoolValue is_animated = 4;
}

// A Lego block that wraps another block and runs a set of actions when the block is rendered
message DAPComponentOnAppearEffect {
  // The Lego block to render
  google.protobuf.Any block = 1;
  // The actions to run on the rendering of the lego block
  repeated action_catalog.dx.v1.DxAction actions = 2;
}

// A Lego block that will execute a set of actions when the data bag changes
message DAPComponentOnDataBagChangedEffect {
  // The actions to run on the rendering of the lego block
  map<string, LegoActions> actions = 1;
}

// A list of lego actions
message LegoActions {
  // The actions to run on the rendering of the lego block
  repeated action_catalog.dx.v1.DxAction actions = 1;
}

// Side effect that executes conditionally on an event
message DAPComponentSideEffect {
  // The actions to run when the side effect is activated
  repeated action_catalog.dx.v1.DxAction actions = 1;
  // The predicate that will be evaluated for the side effect to be activated.
  google.protobuf.Struct predicate = 2;
}

// A Lego block that wraps another block and runs a set of actions when the block appears or disappears
message DAPComponentOnVisibilityChangeEffect {
  // The Lego block to render
  google.protobuf.Any block = 1;
  // The side effect when the block is visible
  repeated component_catalog.dx.dap.common.v1.DAPComponentSideEffect on_appear = 2;
  // The side effect when the block becomes invisible
  repeated component_catalog.dx.dap.common.v1.DAPComponentSideEffect on_disappear = 3;
}
