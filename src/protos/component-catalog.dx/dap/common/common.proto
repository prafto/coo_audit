syntax = "proto3";

package component_catalog.dx.dap.common.v1;

import "action-catalog/dx/action.proto";
import "action-catalog/dx/dap/required_field_check.proto";
import "component-catalog.common/layout/components/vertical_container.proto";
import "component-catalog.common/prism/components/tag.proto";
import "component-catalog.common/prism/components/text.proto";
import "component-catalog.common/prism/shared/button_size.proto";
import "component-catalog.common/prism/shared/button_type.proto";
import "component-catalog.common/prism/shared/icon.proto";
import "component-catalog.common/prism/shared/state.proto";
import "component-catalog.common/prism/tokens/border_width.proto";
import "component-catalog.common/prism/tokens/color.proto";
import "component-catalog.common/prism/tokens/space.proto";
import "component-catalog.common/prism/tokens/typography.proto";
import "component-catalog.dx/dap/util/dynamic_effects.proto";
import "google/protobuf/any.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/wrappers.proto";

option go_package = "github.com/doordash/services-protobuf/generated/component-catalog.dx/dap/common";
option java_multiple_files = true;
option java_package = "com.doordash.rpc.component_catalog.dx.dap.common";

// Title
message DAPComponentTitle {
  // Title text field
  string text = 1;
}

// Body
message DAPComponentBody {
  // Body text field
  string text = 1;
}

// Subtitle
message DAPComponentSubtitle {
  // Subtitle text field
  string text = 1;
}

// Dividing Line
message DAPComponentDividingLine {}

// Button Group
message DAPComponentButtonGroup {
  // A button in the button group
  message DAPComponentButton {
    // A button style
    enum ButtonStyle {
      // Unspecified button style
      BUTTON_STYLE_UNSPECIFIED = 0;
      // Primary button style
      BUTTON_STYLE_PRIMARY = 1;
      // Secondary button style
      BUTTON_STYLE_SECONDARY = 2;
      // Tertiary button style
      BUTTON_STYLE_TERTIARY = 3;
      // Plain button style
      BUTTON_STYLE_PLAIN = 4;
      // Flat primary button style
      BUTTON_STYLE_FLAT_PRIMARY = 5;
      // Flat secondary button style
      BUTTON_STYLE_FLAT_SECONDARY = 6;
      // Floating secondary button style
      BUTTON_STYLE_FLOATING = 7;
      // Link button style
      BUTTON_STYLE_LINK = 8;
    }
    // button label text
    string text = 1;
    // button action on press
    repeated action_catalog.dx.v1.DxAction actions = 2;
    // button style
    ButtonStyle style = 3;
    // Dynamic effects
    component_catalog.dx.dap.util.v1.DynamicEffects dynamic_effects = 4;
    // Is loading key, optional
    google.protobuf.StringValue is_loading_key = 5;
  }
  // A list of buttons
  repeated DAPComponentButton buttons = 1;
}

// Image
message DAPComponentImage {
  // uri for the image
  string uri = 1;
  // uri for the image in dark mode
  string uri_dark = 2;
  // width of the image
  google.protobuf.Int32Value width = 3;
  // height of the image
  google.protobuf.Int32Value height = 4;
  // preserves the legacy padding in iOS
  google.protobuf.BoolValue preserves_padding = 5;
}

// Caption
message DAPComponentCaption {
  // the text to display
  string text = 1;
}

// Text Input
message DAPComponentTextInput {
  // label of the text input e.g. "Date of Birth"
  string label = 1;
  // description of the text input e.g. "Required"
  string description = 2;
  // Placeholder in the input field
  string placeholder = 3;
  // databag keys
  string data_bag_key = 4;
  // [Deprecated]
  DataBagType data_bag_type = 5;
  // type for client validation e.g. "Date"
  InputValidation validation = 6;
  // Dynamic effects
  component_catalog.dx.dap.util.v1.DynamicEffects dynamic_effects = 7;
  // Initial value optional
  string initial_value = 8;
  // size
  FieldSize size = 9;
  // shows error when active
  google.protobuf.BoolValue shows_errors_when_active = 10;
  // is secure
  google.protobuf.BoolValue is_secure = 11;
  //keyboard input type
  KeyboardType keyboard_type = 12;
  // extra description if needed
  string hint = 13;
  // Allows the system to provide autofill suggestions
  AutofillHint autofill_hint = 14;
  // disable_autocorrect
  google.protobuf.BoolValue disable_autocorrect = 15;
  // auto capitalization type
  AutoCapitalizationType auto_capitalization_type = 16;
  // error state key
  string error_state_key = 17;
  // validation group
  ValidationGroup validation_group = 18;
  // (optional) input mask configuration
  InputMask input_mask = 19;
  // Keyboard return key type
  ReturnKeyType return_key_type = 20;
}

// Text Input Mask
message InputMask {
  // The string that is used to format and validate input text.
  string pattern = 1;
  // (optional) in strict mode, the input string must match the pattern string exactly
  google.protobuf.BoolValue strict = 2;
  // (optional) A key in the data bag to store a Bool value indicating that the string is fully formatted and valid.
  google.protobuf.StringValue is_valid_key = 3;
}

// validations to be attached
message ValidationGroup {
  // validations
  repeated action_catalog.dx.dap.v1.Validation validations = 1;
  // error key
  string error_key = 2;
  // result key
  string result_key = 3;
  // failure message
  string failure_message = 4;
}

// Image Card Compnoent
message DAPComponentImageCard {
  // image on the left side of the card
  google.protobuf.Any image = 1;
  // text lines on the right side of the card. The first line is the title.
  repeated google.protobuf.Any text_lines = 2;
}

// Top Bar Component
message DAPComponentNavBar {
  // A button in the top bar
  message BarButton {
    // Button display type
    enum BarButtonDisplayMode {
      // Unspecified button display type
      BAR_BUTTON_DISPLAY_MODE_UNSPECIFIED = 0;
      // Displays the item in the action bar if there is room for it, otherwise displayed in the “kebab” menu.
      BAR_BUTTON_DISPLAY_MODE_ICON = 1;
      // Always displays the item in the action bar.
      BAR_BUTTON_DISPLAY_MODE_TITLE = 2;
      // Always displays the item in the “kebab” menu.
      BAR_BUTTON_DISPLAY_MODE_ICON_AND_TITLE = 3;
    }

    // Button placement
    enum BarButtonPlacement {
      // Unspecified button placement
      BAR_BUTTON_PLACEMENT_UNSPECIFIED = 0;
      // Displays the item in the action bar if there is room for it, otherwise displayed in the “kebab” menu.
      BAR_BUTTON_PLACEMENT_ACTION_IF_ROOM = 1;
      // Always displays the item in the action bar.
      BAR_BUTTON_PLACEMENT_ALWAYS_ACTION = 2;
      // Always displays the item in the “kebab” menu.
      BAR_BUTTON_PLACEMENT_ALWAYS_MENU = 3;
    }
    // A button title
    google.protobuf.StringValue title = 1;
    // A button icon
    google.protobuf.StringValue icon = 2;
    // Button actions
    repeated action_catalog.dx.v1.DxAction actions = 3;
    // Button placement
    BarButtonPlacement placement = 4;
    // Button display type (title or icon)
    BarButtonDisplayMode display_mode = 5;
    // Dynamic effects
    component_catalog.dx.dap.util.v1.DynamicEffects dynamic_effects = 6;
  }
  // Title display type
  enum TitleDisplayMode {
    // Unspecified display mode
    TITLE_DISPLAY_MODE_UNSPECIFIED = 0;
    // Displays the navigation bar title inline with the bar button items
    TITLE_DISPLAY_MODE_INLINE = 1;
    // Displays the navigation bar title below the leading bar button items
    TITLE_DISPLAY_MODE_LARGE = 2;
  }
  // Top bar title
  google.protobuf.StringValue title = 1;
  // Nav bar leading button
  BarButton leading_button = 2;
  // Nav bar trailing buttons
  repeated BarButton trailing_buttons = 3;
  // Title display mode
  TitleDisplayMode title_display_mode = 4;
}

// type for client validation
message InputValidation {
  // A predicate that will be evaluated with the entire contents of the data bag.
  google.protobuf.Struct predicate = 1;
  // An error message to display if the predicate evaluates to false.
  string message = 2;
  // Allows this validation to be skipped if predicate evaluation fails with an error.
  // default to false
  google.protobuf.BoolValue bypass_on_failure = 3;
}

// json type for data bag values
enum DataBagType {
  // unspecified type. Do not use this.
  DATA_BAG_TYPE_UNSPECIFIED = 0;
  // string type
  DATA_BAG_TYPE_STRING = 1;
  // Long type
  DATA_BAG_TYPE_NUMBER = 2;
  // Boolean type
  DATA_BAG_TYPE_BOOLEAN = 3;
}

// Dropdown Input component
message DAPComponentDropDown {
  // label of the dropdown e.g. "Car Make"
  string label = 1;
  // description of the dropdown e.g. "Required"
  string description = 2;
  // Options for the dropdown selection
  repeated string options = 3;
  // databag keys
  string data_bag_key = 4;
  // type of the databag value e.g. "String"
  DataBagType data_bag_type = 5;
  // Dynamic effects
  component_catalog.dx.dap.util.v1.DynamicEffects dynamic_effects = 6;
}

// Dropdown Input component
message DAPComponentDropDownWithDependency {
  // label of the dropdown e.g. "Car Make"
  string label = 1;
  // description of the dropdown e.g. "Required"
  string description = 2;
  // Options for the dropdown selection with dependency
  google.protobuf.Struct options = 3;
  // databag keys
  string data_bag_key = 4;
  // type of the databag value e.g. "String"
  DataBagType data_bag_type = 5;
  // Option depends on another databag key
  string depends_on_key = 6;
  // Dynamic effects
  component_catalog.dx.dap.util.v1.DynamicEffects dynamic_effects = 7;
}

// Radio Group vertical alignment
enum RadioOptionAlign {
  // Unspecified Radio Group vertical alignment
  RADIO_OPTION_ALIGN_UNSPECIFIED = 0;
  // Top Radio Group vertical alignment
  RADIO_OPTION_ALIGN_TOP = 1;
  // Center Radio Group vertical alignment
  RADIO_OPTION_ALIGN_CENTER = 2;
  // Bottom Radio Group vertical alignment
  RADIO_OPTION_ALIGN_BOTTOM = 3;
}

// Radio selection
message DAPComponentRadioSelection {
  // title label of the radio selection
  string label = 1;
  // Options for the radio selection
  repeated Option options = 2;
  // databag key
  string data_bag_key = 3;
  // Sets the default selected option. Defaults to the first option if nil.
  string initial_value = 4;
  // radio button style
  RadioGroupStyle style = 5;
  // Typography for radio button title
  component_catalog.common.prism.tokens.v1.Typography option_display_value_font = 6;
  // Typography for radio button subtitle
  component_catalog.common.prism.tokens.v1.Typography option_subtitle_font = 7;
  // Typography for radio button subtitle
  RadioOptionAlign option_vertical_alignment = 8;
}

// The option object we use for selection components
message Option {
  // The key of the option to store in databag
  string key = 1;
  //The text value that is displayed to the end user
  string display_value = 2;
  // An optional subtitle. Hidden if nil.
  string subtitle = 3;
  // An optional trailing Prism icon asset.
  string trailing_icon = 4 [deprecated = true];
  // An optional trailing Prism icon asset - prism icon type
  component_catalog.common.prism.shared.v1.Icon trailing_prism_icon = 5;
}

// Radio button style
enum RadioGroupStyle {
  // Unspecified radio group style
  RADIO_GROUP_STYLE_UNSPECIFIED = 0;
  // Compact radio group style
  RADIO_GROUP_STYLE_COMPACT = 1;
  // Large radio group style. This also adds the border.
  RADIO_GROUP_STYLE_LARGE = 2;
}

// Represents an unspecified field size.
enum FieldSize {
  // Represents an unspecified field size.
  FIELD_SIZE_UNSPECIFIED = 0;
  // Represents a small field size.
  FIELD_SIZE_SMALL = 1;
  // Represents a medium field size.
  FIELD_SIZE_MEDIUM = 2;
  // Represents a large field size.
  FIELD_SIZE_LARGE = 3;
}

// Represents an unspecified keyboard type.
enum KeyboardType {
  // Represents an unspecified keyboard type.
  KEYBOARD_TYPE_UNSPECIFIED = 0;
  // Represents a default keyboard type.
  KEYBOARD_TYPE_DEFAULT = 1;
  // Represents a phone keyboard type.
  KEYBOARD_TYPE_PHONE = 2;
  // Represents an email keyboard type.
  KEYBOARD_TYPE_EMAIL = 3;
  // Represents a number keyboard type.
  KEYBOARD_TYPE_NUMBER = 4;
  // Represents a decimal keyboard type.
  KEYBOARD_TYPE_DECIMAL = 5;
}

// Represents an unspecified auto-capitalization type.
enum AutoCapitalizationType {
  // Represents an unspecified auto-capitalization type.
  AUTO_CAPITALIZATION_TYPE_UNSPECIFIED = 0;
  // Represents the default auto-capitalization type.
  AUTO_CAPITALIZATION_TYPE_DEFAULT = 1;
  // Represents never auto-capitalization.
  AUTO_CAPITALIZATION_TYPE_NEVER = 2;
  // Represents auto-capitalization of words.
  AUTO_CAPITALIZATION_TYPE_WORDS = 3;
  // Represents auto-capitalization of sentences.
  AUTO_CAPITALIZATION_TYPE_SENTENCES = 4;
  // Represents auto-capitalization of characters.
  AUTO_CAPITALIZATION_TYPE_CHARACTERS = 5;
}

// Represents an unspecified autofill hint.
enum AutofillHint {
  // Represents an unspecified autofill hint.
  AUTOFILL_HINT_UNSPECIFIED = 0;
  // Represents a name prefix autofill hint.
  AUTOFILL_HINT_NAME_PREFIX = 1;
  // Represents a name autofill hint.
  AUTOFILL_HINT_NAME = 2;
  // Represents a name suffix autofill hint.
  AUTOFILL_HINT_NAME_SUFFIX = 3;
  // Represents a given name autofill hint.
  AUTOFILL_HINT_GIVEN_NAME = 4;
  // Represents a middle name autofill hint.
  AUTOFILL_HINT_MIDDLE_NAME = 5;
  // Represents a middle initial autofill hint.
  AUTOFILL_HINT_MIDDLE_INITIAL = 6;
  // Represents a family name autofill hint.
  AUTOFILL_HINT_FAMILY_NAME = 7;
  // Represents an organization name autofill hint.
  AUTOFILL_HINT_ORG_NAME = 8;
  // Represents a job title autofill hint.
  AUTOFILL_HINT_JOB_TITLE = 9;
  // Represents a gender autofill hint.
  AUTOFILL_HINT_GENDER = 10;
  // Represents a location autofill hint.
  AUTOFILL_HINT_LOCATION = 11;
  // Represents an address autofill hint.
  AUTOFILL_HINT_ADDRESS = 12;
  // Represents a street address line 1 autofill hint.
  AUTOFILL_HINT_STREET_ADDRESS_1 = 13;
  // Represents a street address line 2 autofill hint.
  AUTOFILL_HINT_STREET_ADDRESS_2 = 14;
  // Represents a city autofill hint.
  AUTOFILL_HINT_CITY = 15;
  // Represents a state autofill hint.
  AUTOFILL_HINT_STATE = 16;
  // Represents a postal code autofill hint.
  AUTOFILL_HINT_POSTAL_CODE = 17;
  // Represents a country autofill hint.
  AUTOFILL_HINT_COUNTRY = 18;
  // Represents a sublocality autofill hint.
  AUTOFILL_HINT_SUBLOCALITY = 19;
  // Represents a username autofill hint.
  AUTOFILL_HINT_USER_NAME = 20;
  // Represents a password autofill hint.
  AUTOFILL_HINT_PASSWORD = 21;
  // Represents a new password autofill hint.
  AUTOFILL_HINT_NEW_PASSWORD = 22;
  // Represents a one-time code autofill hint.
  AUTOFILL_HINT_ONE_TIME_CODE = 23;
  // Represents a promo code autofill hint.
  AUTOFILL_HINT_PROMO_CODE = 24;
  // Represents an email address autofill hint.
  AUTOFILL_HINT_EMAIL_ADDRESS = 25;
  // Represents a phone number autofill hint.
  AUTOFILL_HINT_PHONE_NUMBER = 26;
  // Represents a phone country code autofill hint.
  AUTOFILL_HINT_PHONE_COUNTRY_CODE = 27;
  // Represents a credit card number autofill hint.
  AUTOFILL_HINT_CC_NUMBER = 28;
  // Represents a credit card expiration date autofill hint.
  AUTOFILL_HINT_CC_EXPIRATION = 29;
  // Represents a credit card expiration month autofill hint.
  AUTOFILL_HINT_CC_EXPIRATION_MONTH = 30;
  // Represents a credit card expiration year autofill hint.
  AUTOFILL_HINT_CC_EXPIRATION_YEAR = 31;
  // Represents a credit card security code autofill hint.
  AUTOFILL_HINT_CC_SECURITY_CODE = 32;
  // Represents a credit card type autofill hint.
  AUTOFILL_HINT_CC_TYPE = 33;
  // Represents a credit card name autofill hint.
  AUTOFILL_HINT_CC_NAME = 34;
  // Represents a credit card given name autofill hint.
  AUTOFILL_HINT_CC_GIVEN_NAME = 35;
  // Represents a credit card middle name autofill hint.
  AUTOFILL_HINT_CC_MIDDLE_NAME = 36;
  // Represents a credit card family name autofill hint.
  AUTOFILL_HINT_CC_FAMILY_NAME = 37;
  // Represents a birthdate autofill hint.
  AUTOFILL_HINT_BIRTHDATE = 38;
  // Represents a birthdate day autofill hint.
  AUTOFILL_HINT_BIRTHDATE_DAY = 39;
  // Represents a birthdate month autofill hint.
  AUTOFILL_HINT_BIRTHDATE_MONTH = 40;
  // Represents a birthdate year autofill hint.
  AUTOFILL_HINT_BIRTHDATE_YEAR = 41;
  // Represents a date and time autofill hint.
  AUTOFILL_HINT_DATE_TIME = 42;
  // Represents a tracking number autofill hint.
  AUTOFILL_HINT_TRACKING_NUMBER = 43;
}

// Represent the keyboard return key type
enum ReturnKeyType {
  // Default return ket type. OS will decide the context specific text
  RETURN_KEY_TYPE_UNSPECIFIED = 0;
  // Return button will have label continue
  RETURN_KEY_TYPE_CONTINUE = 1;
  // Return button will have label done
  RETURN_KEY_TYPE_DONE = 2;
}

// Text Input
message DAPComponentMultiLineTextInput {
  reserved 14;
  reserved "validation";
  // The key that will store the String value.
  string data_bag_key = 1;
  // An optional initial value that will be inserted into the data bag when the view is shown.
  string initial_value = 2;
  // The size of the control. Defaults to FIELD_SIZE_MEDIUM if nil.
  FieldSize size = 3;
  // Sets the height of the control in points. If nil defaults to Prism standard value (120 pt on iOS)
  google.protobuf.DoubleValue height = 4;
  // Sets the maximum number of characters that can be entered. If nil, there is no limit.
  google.protobuf.Int32Value character_limit = 5;
  // Hidden if nil.
  string label = 6;
  // Hidden if nil.
  string placeholder = 7;
  // Hidden if nil.
  string description = 8;
  // Hidden if nil.
  string hint = 9;
  // The type of keyboard to display. Defaults to KEYBOARD_TYPE_DEFAULT if nil.
  KeyboardType keyboard_type = 10;
  // Disables auto-correct. Defaults to false if nil
  google.protobuf.BoolValue disable_autocorrect = 11;
  // Changes the capitalization behavior. Defaults to AUTO_CAPITALIZATION_TYPE_DEFAULT if nil.
  AutoCapitalizationType auto_capitalization_type = 12;
  // Allows the system to provide autofill suggestions based on the type of content that will be entered into the field.
  AutofillHint autofill_hint = 13;
  // error state key
  string error_state_key = 15;
  // Keyboard return key type
  ReturnKeyType return_key_type = 16;
  // Validation group for input
  ValidationGroup validation_group = 17;
  // enables the character count view to be visible eg: 5/1000
  google.protobuf.BoolValue character_count_visible = 18;
}

// Date Input
message DAPComponentDateInputField {
  // The key that will store the Date value.
  string data_bag_key = 1;
  // An optional initial value that will be inserted into the data bag when the view is shown.
  // If nil, the current date will be used.
  string initial_value = 2;
  // Sets the size of the control. Client should default to FIELD_SIZE_MEDIUM.
  FieldSize size = 3;
  // Hidden if nil.
  string title = 4;
  // The minimum date that is allowed to be selected.
  string min_date = 5;
  // The maximum date that is allowed to be selected.
  string max_date = 6;
}

// Time Input
message DAPComponentTimeInputField {
  // The key that will store the Time value.
  string data_bag_key = 1;
  // An optional initial value that will be inserted into the data bag when the view is shown.
  // If nil, the current time will be used.
  string initial_value = 2;
  // An optional minimum time that is allowed to be selected.
  string min_time = 3;
  // An optional maximum time that is allowed to be selected.
  string max_time = 4;
  // An optional key that will control the minimum allowed time based on a key stored on data bag
  string min_time_bag_key = 5;
  // An optional key that will control the maximum allowed time based on a key stored on data bag
  string max_time_bag_key = 6;
  // error state key
  string error_state_key = 7;
  // validation group
  ValidationGroup validation_group = 8;
  // Hidden if nil.
  string title = 9;
  // Used to show or hide the time picker
  // Deprecated
  google.protobuf.BoolValue is_picker_visible = 10;
  // The key to identify this picker and control if it is shown or hidden
  string expanded_state_key = 11;
  // Actions to run when the picker is activated (focused)
  repeated action_catalog.dx.v1.DxAction on_activate_actions = 12;
}

// Checkbox
message DAPComponentCheckbox {
  // The key that will store the Bool value.
  string data_bag_key = 1;
  // An optional initial value that will be inserted into the data bag when the view is shown.
  string initial_value = 2;
  // The title displayed next to the checkbox
  string title = 3;
  // An optional subtitle text value.
  string subtitle = 4;
}

// A Lego block that wraps another block within a Card
message DAPComponentCard {
  // The Lego blocks that will be shown within this card.
  google.protobuf.Any block = 1;
  // The style of the card.
  CardStyle style = 2;
  // An optional Lego block that will be shown as the background of the card.
  // The background is shown behind the `block` but is still clipped to the shape of the card.
  google.protobuf.Any background_block = 3;
  // An optional color that will be shown as the background of the card.
  // The color is shown behind the `block` and the `background_block` but is still clipped to the shape of the card.
  component_catalog.common.prism.tokens.v1.Color background_color = 4;
}

// The style of the card.
enum CardStyle {
  // Unspecified card style
  CARD_STYLE_UNSPECIFIED = 0;
  // A card with a shadow
  CARD_STYLE_SHADOW = 1;
  // A card with a outline
  CARD_STYLE_OUTLINE = 2;
}

// Info Label
message DAPComponentInfoLabel {
  // A static message to display.
  string static_message = 1;
  // A key in the data bag that contains the message to display.
  string dynamic_message_key = 2;
}

// List cell component
message DAPListCell {
  // List image for light mode
  string image_uri = 1;
  // List image for dark mode
  string dark_image_uri = 2;
  // Title for list cell
  string label = 3;
  // Body for list cell
  google.protobuf.StringValue description = 4;
  // Trailing icon for list cell
  google.protobuf.StringValue trailing_icon_name = 5;
  // Actions to perform when list cell is tapped
  repeated action_catalog.dx.v1.DxAction actions = 6;
  // Determines whether the separator at the bottom will be shown
  bool hide_separator = 7;
  // Typography for label
  component_catalog.common.prism.tokens.v1.Typography label_typography = 8;
  // Space between content and bottom divider
  component_catalog.common.prism.tokens.v1.Space divider_spacing = 9;
  // The width & height of the leading image (square)
  component_catalog.common.prism.tokens.v1.Space leading_image_padding = 10;
  // Icon that is shown on top right of the leading image
  component_catalog.common.prism.shared.v1.Icon leading_image_icon = 11;
  // Databag Key for dynamic images
  google.protobuf.StringValue image_databag_key = 12;
}

// Bulleted list cell component
message DAPTextBulletItemListCell {
  // Bullet text for the item. Can be numbered or unicode text
  string bullet_text = 1;
  // Actual text to show
  string item_text = 2;
  // reserve 3 for backwards compatibility
  reserved 3;
  reserved "typography";
  // reserve 4 for backwards compatibility
  reserved 4;
  reserved "color";
}

// Scroll Offset Effect component block
message ScrollOffsetEffectBlockId {
  // The block id used to identify this block in the scroll view
  string id = 1;
  // The Lego block that is inside a scroll view
  google.protobuf.Any block = 2;
}

// Spacer component block
message DAPComponentSpacer {
  // The height of the spacer in points.
  SpacerAxis axis = 1;
  // The width/height of the spacer in points.
  google.protobuf.DoubleValue size = 2;
}

// Spacer axis determines how the size will be applied to the spacer.
enum SpacerAxis {
  // Unspecified spacer axis
  SPACER_AXIS_UNSPECIFIED = 0;
  // Horizontal spacer axis
  SPACER_AXIS_HORIZONTAL = 1;
  // Vertical spacer axis
  SPACER_AXIS_VERTICAL = 2;
}

// Dasher app carousel component
message DAPCarousel {
  reserved 1;
  reserved "pages";
  // Title for the primary CTA
  google.protobuf.StringValue primary_button_title = 2;
  // Action to be performed when tutorial is complete
  repeated action_catalog.dx.v1.DxAction on_primary_action = 3;
  // List of items in the carousel
  repeated google.protobuf.Any items = 4;
  // Horizontal padding for the controls container
  component_catalog.common.prism.tokens.v1.Space controls_horizontal_padding = 5;
  // Vertical padding for the controls container
  component_catalog.common.prism.tokens.v1.Space controls_vertical_padding = 6;
  // Push controls to the bottom of the container
  bool anchor_controls_to_bottom = 7;
  // The color to be used for the active page indicator
  CarouselActivePageIndicatorColor active_page_indicator_color = 8;
}

// The Carousel Active Page Indicator Color
enum CarouselActivePageIndicatorColor {
  // Primary
  CAROUSEL_ACTIVE_PAGE_INDICATOR_COLOR_UNSPECIFIED = 0;
  // Primary
  CAROUSEL_ACTIVE_PAGE_INDICATOR_COLOR_PRIMARY = 1;
  // Dark
  CAROUSEL_ACTIVE_PAGE_INDICATOR_COLOR_DARK = 2;
  // Secondary
  CAROUSEL_ACTIVE_PAGE_INDICATOR_COLOR_SECONDARY = 3;
}

// Dasher app activity timeline component
message DAPComponentActivityTimeline {
  // Size of point to mark activity
  component_catalog.common.prism.tokens.v1.Space point_size = 1;
  // Color of point to mark activity
  component_catalog.common.prism.tokens.v1.Color point_color = 2;
  // DEPRECATED
  component_catalog.common.prism.tokens.v1.Space line_width = 3;
  // Color of line to connect activities
  component_catalog.common.prism.tokens.v1.Color line_color = 4;
  // Style of line to connect activities
  ActivityTimelineLineStyle line_style = 5;
  // List of activities to present in timeline
  repeated google.protobuf.Any activities = 6;
  // Width of line to connect activities
  component_catalog.common.prism.tokens.v1.BorderWidth line_border_width = 7;
}

// Line style to connect activities in the activity timeline
enum ActivityTimelineLineStyle {
  // Unspecified
  ACTIVITY_TIMELINE_LINE_STYLE_UNSPECIFIED = 0;
  // Dotted
  ACTIVITY_TIMELINE_LINE_STYLE_DOTTED = 1;
  // Solid
  ACTIVITY_TIMELINE_LINE_STYLE_SOLID = 2;
}

// Timer Button
message DAPComponentTimerButton {
  // reserve 9 for backwards compatibility
  reserved 9;
  reserved "timer_duration";
  // reserve 1 for backwards compatibility
  reserved 1;
  reserved "type";
  // reserve 2 for backwards compatibility
  reserved 2;
  reserved "size";
  // reserve 12 for backwards compatibility
  reserved 12;
  reserved "circular_progress_bar_color";
  // reserve 13 for backwards compatibility
  reserved 13;
  reserved "circular_progress_bar_stroke_color";
  // reserve 15 for backwards compatibility
  reserved 15;
  reserved "circular_progress_bar_label_typography";
  // reserve 16 for backwards compatibility
  reserved 16;
  reserved "circular_progress_bar_label_color";
  // reserve 17 for backwards compatibility
  reserved 17;
  reserved "button_type";
  // reserve 18 for backwards compatibility
  reserved 18;
  reserved "button_size";
  // reserve 23 for backwards compatibility
  reserved 23;
  reserved "button_style";
  // reserve 24 for backwards compatibility
  reserved 24;
  reserved "button_field_size";
  // reserve 19 timer circular progress bar color
  reserved 19;
  reserved "circular_progress_bar_color_value";
  // reserve 20 timer circular progress bar stroke color
  reserved 20;
  reserved "circular_progress_bar_stroke_color_value";
  // reserve 21 timer circular progress bar label typography
  reserved 21;
  reserved "circular_progress_bar_label_typography_value";
  // reserve 22 timer circular progress bar label color
  reserved 22;
  reserved "circular_progress_bar_label_color_value";
  // reserve 11 circular progress size
  reserved 11;
  reserved "circular_progress_size";
  // reserve 14 circular progress bar stroke width
  reserved 14;
  reserved "circular_progress_bar_stroke_width";
  // button type
  component_catalog.common.prism.shared.v1.ButtonType b_type = 27;
  // button size
  component_catalog.common.prism.shared.v1.ButtonSize b_size = 28;
  // is fixed width
  google.protobuf.BoolValue is_fixed_width = 3;
  // button state
  component_catalog.common.prism.shared.v1.State state = 4;
  // label of the button
  google.protobuf.StringValue label = 5;
  // An icon to be displayed on the leading edge of the button
  // The left side in left-to-right languages, and right side in right-to-left languages
  component_catalog.common.prism.shared.v1.Icon leading_icon = 6;
  // An icon to be displayed on the trailing edge of the button
  // The right side in left-to-right languages, and left side in right-to-left languages
  component_catalog.common.prism.shared.v1.Icon trailing_icon = 7;
  // button actions
  repeated action_catalog.dx.v1.DxAction actions = 8;
  // timer expiration date time
  google.protobuf.StringValue timer_expiration_date_time = 10;
  // Nullable float value for timer expiration in seconds. If not present, timer_expiration_date_time will be used.
  google.protobuf.Int32Value timer_expiration_in_seconds = 35;
  // timer circular progress size
  google.protobuf.FloatValue circular_progress_size_value = 33;
  // timer circular progress bar color
  component_catalog.common.prism.tokens.v1.Color circular_progress_bar_color_v2 = 29;
  // timer circular progress stroke color
  component_catalog.common.prism.tokens.v1.Color circular_progress_bar_stroke_color_v2 = 30;
  // timer circular progress stroke width
  google.protobuf.FloatValue circular_progress_bar_stroke_width_value = 34;
  // timer circular progress bar label typography
  component_catalog.common.prism.tokens.v1.Typography circular_progress_bar_label_typography_v2 = 31;
  // timer circular progress bar label color
  component_catalog.common.prism.tokens.v1.Color circular_progress_bar_label_color_v2 = 32;
  // timer countdown finish actions
  repeated action_catalog.dx.v1.DxAction timer_finish_actions = 25;
  // timer circular progress bar indicator direction to set counter clock wise
  google.protobuf.BoolValue is_progress_direction_counter_clock_wise = 26;
}

// Video player component
message DAPVideoPlayer {
  // Enum to represent video gravity
  enum Gravity {
    // Unspecificied gravity. Client should default to RESIZE.
    GRAVITY_UNSPECIFIED = 0;
    // When the video needs to be resized to fit
    GRAVITY_RESIZE = 1;
    // When the video needs to resized preserving aspect ratio
    GRAVITY_ASPECT = 2;
    // When video needs to stretch while maintaining aspect ratio
    GRAVITY_ASPECT_FILL = 3;
  }

  // Url of the video to be played
  string video_url = 1;
  // Url of the video for dark mode
  google.protobuf.StringValue dark_mode_video_url = 2;
  // Volume of the video
  google.protobuf.DoubleValue volume = 3;
  // Whether the video has audio in it
  bool has_audio = 4;
  // Position of the video
  Gravity video_gravity = 5;
  // Aspect ratio of the video
  google.protobuf.DoubleValue aspect_ratio = 6;
}
