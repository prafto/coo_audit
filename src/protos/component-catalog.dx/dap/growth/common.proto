syntax = "proto3";

package component_catalog.dx.dap.growth.v1;

import "action-catalog/dx/action.proto";
import "component-catalog.common/prism/tokens/space.proto";
import "component-catalog.dx/dap/common/common.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/wrappers.proto";

option go_package = "github.com/doordash/services-protobuf/generated/component-catalog.dx/dap/growth";
option java_multiple_files = true;
option java_package = "com.doordash.rpc.component_catalog.dx.dap.growth";

// Represents an unspecified field size.
enum FieldSize {
  // Represents an unspecified field size.
  FIELD_SIZE_UNSPECIFIED = 0;
  // Represents a small field size.
  FIELD_SIZE_SMALL = 1;
  // Represents a medium field size.
  FIELD_SIZE_MEDIUM = 2;
  // Represents a large field size.
  FIELD_SIZE_LARGE = 3;
}

// Progress bar component
message ProgressBar {
  // The completed amount of the task to this point, in a range of `0.0` to `total`.
  double complete = 1;
  // The total amount of tasks to be completed.
  double total = 2;
}

// TEMPORARY - will be replaced by common component catalog
message Padding {
  // Optional - The amount of padding to add to the top of the block
  component_catalog.common.prism.tokens.v1.Space top = 1;
  // Optional - The amount of padding to add to the left of the block
  component_catalog.common.prism.tokens.v1.Space leading = 2;
  // Optional - The amount of padding to add to the right of the block
  component_catalog.common.prism.tokens.v1.Space trailing = 3;
  // Optional - The amount of padding to add to the bottom of the block
  component_catalog.common.prism.tokens.v1.Space bottom = 4;
}

// Text Block component that supports an html anchor tag to be rendered with a list of actions to be triggered on click
message TextBlock {
  // The text to display.
  string text = 1;
  // Prism text style - use prism constant
  string text_style = 2;
  // Text foreground color
  string text_color = 3;
  // Inset padding for text block
  Padding padding = 4;
  // Actions to be triggered on click of text block
  repeated action_catalog.dx.v1.DxAction actions = 5;
  // Optional - Flag indicates whether the text block should take the full width of its parent
  google.protobuf.BoolValue is_full_width = 6;
}

// Dropdown component that supports autocomplete
message DropdownWithField {
  // The identifier as the user’s input value’s key
  string data_bag_key = 1;
  // List of possible values
  repeated string options = 2;
  // Initial value in field
  string initial_value = 3;
  // Field's name
  string label = 4;
  // Placeholder when field value is empty
  string placeholder = 5;
  // Description of field
  string description = 6;
  // The size of the control. Defaults to FIELD_SIZE_MEDIUM if nil.
  FieldSize field_size = 7;
  // Error message to be shown when user enters invalid value (value not present in the options list)
  string error_message = 8;
  //Validation group
  component_catalog.dx.dap.common.v1.ValidationGroup validation_group = 9;
  //Error state Key
  string error_state_key = 10;
}

// List cell component for bgc disclosures
message ListCell {
  // The text to display.
  string label = 1;
  // The sub header text
  string sub_header = 2;
  // description of the cell
  string description = 3;
  // leading icon name
  string leading_icon_name = 4;
  // trailing icon name
  string trailing_icon_name = 5;
  // vertical alignment of the cell top / center
  string alignment = 6;
  // Separator to be rendered below the cell
  string separator = 7;
  // size of inset - small / medium / large
  string container_inset = 8;
  // Actions to be triggered on click of the list cell
  repeated action_catalog.dx.v1.DxAction actions = 9;
}

// Lottie Animation
message LottieAnimation {
  // The name of lottie animation if client have it
  string name = 1;
  // The url of lottie animation
  string url = 2;
  // The flag for enable loop animation
  google.protobuf.BoolValue is_loop_mode = 3;
  // The animation width
  google.protobuf.Int32Value width = 4;
  // The animation height
  google.protobuf.Int32Value height = 5;
  // Actions to be triggered when animation finished
  repeated action_catalog.dx.v1.DxAction actions = 6;
}

// IDVPersona
message IDVPersona {
  // The reference id unique link of dasher applicant.
  string reference_id = 1;
  // The template id for start new inquiry if inquiry id did not set or error when resume.
  string template_id = 2;
  // The inquiry id for resume process.
  string inquiry_id = 3;
  // The inquiry session token for resume process.
  string inquiry_session_token = 15;
  // Additional fields attached to the inquiry.
  google.protobuf.Struct fields = 4;
  // A list of event names, for update progress bar.
  repeated EventProgress events_progress = 5;
  // The name of the key in the data bag where the inquiry id will be stored.
  string inquiry_id_data_bag_key = 6;
  // The name of the key in the data bag where the inquiry status is stored when completed.
  string inquiry_status_data_bag_key = 7;
  // Actions to be triggered when the inquiry is completed.
  repeated action_catalog.dx.v1.DxAction completed_actions = 8;
  // Actions to be triggered when the inquiry is canceled.
  repeated action_catalog.dx.v1.DxAction canceled_actions = 9;
  // Actions to be triggered when the inquiry is created.
  repeated action_catalog.dx.v1.DxAction created_actions = 10;
  // Actions to be triggered when page event occurs in the Persona SDK.
  repeated EventLegoActions events_actions = 11;
  // Flag indicating whether the action should be triggered by the internal Persona SDK back action, if possible.
  google.protobuf.BoolValue allow_persona_sdk_back = 12;
  // Back Actions to be triggered page event occurs.
  repeated EventLegoActions events_back_actions = 13;
  // Default back actions to be triggered if no specific events back actions are triggered.
  repeated action_catalog.dx.v1.DxAction back_actions = 14;
  // The flag indicate if client should start new inquiry if resume is failed.
  google.protobuf.BoolValue allow_start_new_inquiry = 16;
}

// EventLegoActions
message EventLegoActions {
  // The list of event names.
  repeated string names = 1;
  // The actions to be executed when the event is triggered.
  repeated action_catalog.dx.v1.DxAction actions = 2;
}

// EventProgress
message EventProgress {
  // The list of event names.
  repeated string names = 1;
  // The progress value.
  double progress = 2;
}
