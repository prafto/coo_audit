syntax = "proto3";

package component_catalog.dx.dap.on_dash.v1;

import "action-catalog/dx/action.proto";
import "action-catalog/dx/dap/required_field_check.proto";
import "component-catalog.common/prism/components/tag.proto";
import "component-catalog.common/prism/components/text.proto";
import "component-catalog.common/prism/shared/icon.proto";
import "component-catalog.common/prism/tokens/color.proto";
import "component-catalog.dx/dap/util/dynamic_effects.proto";
import "google/protobuf/any.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/wrappers.proto";

option go_package = "github.com/doordash/services-protobuf/generated/component-catalog.dx/dap/on_dash";
option java_multiple_files = true;
option java_package = "com.doordash.rpc.component_catalog.dx.dap.on_dash";

// Section Title
message OnDashComponentSectionTitle {
  reserved 4;
  reserved "trace_context";
  // An optional leading Prism icon asset - prism icon type
  component_catalog.common.prism.shared.v1.Icon icon = 1;
  // Title text field
  string title = 2;
  // Photo group
  PhotoGroup photos = 3;
  // Trace Details for client-side analytics
  TraceDetails trace_details = 5;
}

// A class to provide information for client-side analytics events
message TraceDetails {
  // A string used to identify the trace
  string trace_context = 1;
  // The owning team of the trace
  string trace_owner = 2;
  // The tier of the trace
  string trace_tier = 3;
}

// Callout Text
message OnDashComponentCalloutText {
  // text field
  string text = 1;
}

// Address
message OnDashComponentAddress {
  // An optional leading Prism icon asset - prism icon type
  component_catalog.common.prism.shared.v1.Icon icon = 1;
  // Title text field
  string title = 2;
  // Subtitle text field (optional)
  string subtitle = 3;
  // Photo group
  PhotoGroup photos = 4;
  // Copyable Address
  string copyable_location = 5;
  // List of actions to execute when the component is tapped
  repeated action_catalog.dx.v1.DxAction tap_actions = 6;
  // A list of Lego-blocked tags
  repeated google.protobuf.Any tag_blocks = 7;
}

// Header
message OnDashComponentHeader {
  // Title text field
  string title = 1;
  // Subtitle text field (optional)
  string subtitle = 2;
}

// A Lego block that defines a 2d coordinate
message OnDashMapCoordinate {
  // Latitude
  double latitude = 1;
  // Longitude
  double longitude = 2;
}

// A Lego block that defines a map marker
message OnDashMapMarker {
  // Lat/lng at which the marker should be placed
  OnDashMapCoordinate coordinate = 1;
  // Icon for the marker
  component_catalog.common.prism.shared.v1.Icon icon = 2;
}

// A Lego block that defines a map poly line
message OnDashPolyLine {
  reserved 1;
  reserved "path";
  // Defines the color of the poly line - optional
  component_catalog.common.prism.tokens.v1.Color line_color = 2;
  // Defines the encoded polyline path
  string encoded_path = 3;
}

// A Lego block that defines a destination for inapp navigation
message Destination {
  // The latitude of destination
  double latitude = 1;
  // The longitude of destination
  double longitude = 2;
  // The address of destination
  string address = 3;
  // The name of destination
  string name = 4;
  // A boolean controlling the polyline end
  bool draw_route_end_polyline = 5;
  // Custom waypoint marker image.
  component_catalog.common.prism.shared.v1.Icon waypoint_marker_image = 6;
  // Subpremise of the destination
  google.protobuf.StringValue subpremise = 7;
  // The navigation latitude of destination
  google.protobuf.DoubleValue navigation_latitude = 8;
  // The navigation longitude of destination
  google.protobuf.DoubleValue navigation_longitude = 9;
  // The navigation pin metadata
  google.protobuf.StringValue navigation_pin_metadata = 10;
}

// A Lego block that defines the inapp configuration
message InAppNavigationConfiguration {
  // whether to auto launch navi
  bool auto_launch = 1;
  // The destination to route to.
  Destination destination = 2;
  // A key in the data store that is written to (Bool) when in-app navigation has been launched at least once.
  string data_bag_key = 3;
  // The task group ID used for attribution.  If null you must provide a delivery_id
  string task_group_id = 4;
  // The delivery ID used for attribution. If null you must provide a task_group_id
  string delivery_id = 5;
}

// A lego block that defines a map
message OnDashComponentMap {
  // used for deprecated field numbers
  reserved 7;
  // used for deprecated field names
  reserved "is_user_interaction_enabled";
  // Determines whether the users current location should be shown
  bool show_current_location = 1;
  // Markers to place on the map
  repeated OnDashMapMarker markers = 2;
  // Poly lines to draw on the map
  repeated OnDashPolyLine poly_lines = 3;
  // Max zoom level of the map - optional
  google.protobuf.Int32Value max_zoom_level = 4;
  // The predefined key that tells the view whether the accuracy ring should be shown
  google.protobuf.StringValue should_show_accuracy_ring_key = 5;
  // The nav configuration used to open up navigation providers
  InAppNavigationConfiguration in_app_nav_configuration = 6;
  // Determines if the user can interact with the map using various gestures.
  google.protobuf.BoolValue is_map_interactable = 8;
  // Center location of the map
  MapCenter center = 9;
  // The provider type of the map
  google.protobuf.StringValue map_provider_type = 10;
  // The use case of the map like drop_off, or tasks
  google.protobuf.StringValue use_case = 11;
}

// A lego block that defines the map center. We can define the center location of the map and the zoom level.
// show_current_location should be false if we want to show the center location of the map.
message MapCenter {
  // Centralized Location of the Map
  OnDashMapCoordinate location = 1;
  // The key of the data store which is updated when the map center has been updated at least once.
  string updated_latitude_data_bag_key = 2;
  // The key of the data store which is updated when the map center has been updated at least once.
  string updated_longitude_data_bag_key = 3;
  // Zoom Level of the map when we define
  google.protobuf.Int32Value zoom_level = 4;
}

// Structure defining an order item within the order
message OrderItem {
  // The formatted quantity.
  string quantity = 1;
  // Typically the item name.
  string title = 2;
  // Typically a description of the item.
  string subtitle = 3;
  // An array of tag elements.
  // Deprecated. Use tag_blocks instead.
  repeated component_catalog.common.prism.components.v1.Tag tags = 4;
  // An image of the item.
  string image = 5;
  // A list of Lego-blocked tags
  // NOT WORKING in V1 dropoff workflow client
  repeated google.protobuf.Any tag_blocks = 6;
}

// Enum defining the order detail sheet layout
enum OrderDetailsSheetLayout {
  // Default layout
  ORDER_DETAILS_SHEET_LAYOUT_UNSPECIFIED = 0;
  // Default layout
  ORDER_DETAILS_SHEET_LAYOUT_DEFAULT = 1;
  // Detailed layout
  ORDER_DETAILS_SHEET_LAYOUT_DETAILED = 2;
}

// Structure defining the order
message Order {
  // An icon that is displayed on the leading edge.
  component_catalog.common.prism.shared.v1.Icon leading_icon = 1;
  // An image to display in place of the leading icon
  string leading_image_url = 2;
  // The store name.
  string title = 3;
  // Typically the index number of the order.
  string subtitle = 4;
  // An array of tag elements.
  // Deprecated. Use tag_blocks instead.
  repeated component_catalog.common.prism.components.v1.Tag tags = 5;
  // If true, a carousel of images will be shown below the store info.
  bool shows_images = 6;
  // The list of items in the order.
  repeated OrderItem order_items = 7;
  // Typically the number of items in the order.
  string description = 8;
  // A list of Lego-blocked tags
  // NOT WORKING in V1 dropoff workflow client
  repeated google.protobuf.Any tag_blocks = 9;
  // The layout of the order details sheet
  OrderDetailsSheetLayout order_details_sheet_layout = 10;
  // The size of the photo thumbnail
  PhotoSize photo_size = 11;
}

// Lego block defining the order component
message OnDashComponentOrderList {
  reserved 2;
  reserved "order_details_sheet_layout";
  // list of orders
  repeated Order orders = 1;
}

// Structure defining the item inside the info grid component
message OnDashInfoGridItem {
  // title field
  string title = 1;
  // value field
  string value = 2;
}

// Lego block defining the info grid component
message OnDashComponentInfoGrid {
  // info grid items
  repeated OnDashInfoGridItem items = 1;
  // List of actions to execute when the component is tapped
  repeated action_catalog.dx.v1.DxAction tap_actions = 2;
}

// Structure defining the photos inside the section title and address component
message PhotoGroup {
  // The list of photos
  repeated PhotoItem images = 1;
}

// Structure defining the photo item
message PhotoItem {
  // The URL of the photo
  string url = 1;
}

// Size options for photo thumbnails
enum PhotoSize {
  // Default unspecified size
  PHOTO_SIZE_UNSPECIFIED = 0;
  // Regular sized photo thumbnail
  PHOTO_SIZE_REGULAR = 1;
  // Large sized photo thumbnail (70)
  PHOTO_SIZE_LARGE = 2;
  // Extra large sized photo thumbnail (100)
  PHOTO_SIZE_EXTRA_LARGE = 3;
}

// A block displaying an image. Upon tapping, the image(s) are presented in a full screen image viewer.
message OnDashComponentPhotosThumbnail {
  // Contains photos and other visual metadata
  PhotoGroup photos = 1;
  // The size of the photo thumbnail
  PhotoSize photo_size = 2;
}

// A lego block representing various contact options
message OnDashComponentContactButtonGroup {
  // The contact configuration used to setup the buttons
  ContactConfiguration configuration = 1;
}

// A lego block representing a contact button
message ContactConfiguration {
  // The delivery or Task Group ID
  string resource_id = 1;
  // The location in the app where the contacts are displayed
  string trace_context = 2;
  // An ordered array of contacts. The first contact is the primary contact.
  repeated Contact phone_contacts = 3;
  // An ordered array of contacts. The first contact is the primary contact.
  repeated Contact sms_contacts = 4;
  // Whether in-app chat is allowed
  google.protobuf.BoolValue allows_in_app_chat = 5;
}

// A lego block representing a phone/sms contact
message Contact {
  // The ID passed to the backend to fetch the masked number
  string mask_id = 1;
  // The title of the button in the bottom sheet when multiple contacts are displayed
  string button_title = 2;
}
