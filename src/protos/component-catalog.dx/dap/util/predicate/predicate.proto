syntax = "proto3";

package component_catalog.dx.dap.util.predicate.v1;

import "google/protobuf/descriptor.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/wrappers.proto";

option go_package = "github.com/doordash/services-protobuf/generated/component-catalog.dx/dap/util/predicate";
option java_multiple_files = true;
option java_package = "com.doordash.rpc.component_catalog.dx.dap.util.predicate";

// Predicate type
enum PredicateType {
  // Do not use
  PREDICATE_TYPE_UNSPECIFIED = 0;
  // Comparison
  comparison = 1;
  // Compound
  compound = 2;
  // Constant
  constant = 3;
}

// Expression type
enum ExpressionType {
  // Do not use
  EXPRESSION_TYPE_UNSPECIFIED = 0;
  // Constant
  constant_value = 1;
  // KEY_PATH
  key_path = 2;
  // Function Type
  function = 3;
}

// Compound
enum CompoundType {
  // Do not use
  COMPOUND_TYPE_UNSPECIFIED = 0;
  // And
  and = 1;
  // Or
  or = 2;
  // Not
  not = 3;
}

// Constant value
enum ConstantValueType {
  // Do not use
  CONSTANT_VALUE_TYPE_UNSPECIFIED = 0;
  // bool
  bool_type = 1;
  // double
  double_type = 2;
  // int
  int_type = 3;
  // string
  string_type = 4;
  // array
  array_type = 5;
  // object
  object_type = 6;
  // null
  null_type = 7;
  // date
  date_type = 8;
}

// Defines the types of comparison operators that can be used.
enum Operation {
  // Default, unspecified operator.
  OPERATOR_UNSPECIFIED = 0;
  // Less than operator.
  less_than = 1;
  // Less than or equal to operator.
  less_than_or_equal = 2;
  // Greater than operator.
  greater_than = 3;
  // Greater than or equal to operator.
  greater_than_or_equal = 4;
  // Equality operator.
  is_equal = 5;
  // Contains operator.
  contains = 6;
  // Matches operator (for REGEX pattern matching).
  matches = 7;
}

// Function type
enum FunctionType {
  // Default function type, don't use
  FUNCTION_TYPE_UNSPECIFIED = 0;
  // Function type count
  count = 1;
  // Function type math
  math = 2;
  // Function type filter
  filter = 3;
  // Function type convert
  convert = 4;
  // Function type condition
  condition = 5;
}

// Math Operation for Functions
enum MathOperation {
  // Default math operation, don't use
  MATH_OPERATION_UNSPECIFIED = 0;
  // Math operation add
  add = 1;
  // Math operation subtract
  subtract = 2;
  // Math operation multiply
  multiply = 3;
  // Math operation divide
  divide = 4;
  // Math operation remainder
  remainder = 5;
  // Math operation min
  min = 6;
  // Math operation max
  max = 7;
}
