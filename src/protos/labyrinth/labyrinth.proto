syntax = "proto3";

package labyrinth.v1;

import "common/service_client_config.proto";
import "labyrinth/qdrant.proto";
import "labyrinth/qdrant_collections.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.labyrinth.api";

service Labyrinth {
  option (service_client.client_config).service_name = "labyrinth";
  option (service_client.client_config).response_attempt_timeout_millis = 2000;
  option (service_client.client_config).retry_config.max_attempts = 3;
  option (service_client.client_config).circuit_breaker_config.failure_rate_threshold = 0.1;
  option (service_client.client_config).circuit_breaker_config.minimum_request_threshold = 50;
  option (service_client.client_config).circuit_breaker_config.counter_sliding_window_millis = 60000;
  option (service_client.client_config).circuit_breaker_config.circuit_open_window_millis = 30000;
  // Endpoint to get nearest k vectors to list of input vectors
  rpc GetNearestVectors(GetNearestVectorsRequest) returns (GetNearestVectorsResponse);
  // Endpoint to get nearest k vectors to list of input vectors
  rpc GetNearestVector(GetNearestVectorRequest) returns (GetNearestVectorResponse);
  // Endpoint to upsert points
  rpc UpsertVectors(UpsertVectorsRequest) returns (PointsOperationResponse);
  // Endpoint to delete points
  rpc DeleteVectors(DeleteVectorsRequest) returns (PointsOperationResponse);
  // Endpoint to retrieve points
  rpc GetVectors(GetVectorsRequest) returns (GetResponse);
  // Endpoint to create a collection (ONLY creating a new collection, not recreate)
  rpc CreateCollection(CreateCollectionRequest) returns (CollectionOperationResponse);
}

// Query for single input vector
message VectorQuery {
  // Each dimension of the vector represented by a float
  oneof query {
    SearchPoints qsearch_point_v1 = 1;
  }
}

// For a single input vector, this is a list of k nearest neighbors
message VectorResponse {
  // Each dimension of the vector represented by a float
  oneof response {
    SearchResponse qsearch_response_v1 = 1;
  }
}

// Batch query for k nearest neighbors (all must be from the same collection).
message VectorBatchQuery {
  // Each dimension of the vector represented by a float
  oneof query {
    SearchBatchPoints qsearch_batch_point_v1 = 1;
  }
}

// Batch response for batch vector query.
message VectorBatchResponse {
  // Each dimension of the vector represented by a float
  oneof response {
    SearchBatchResponse qsearch_batch_response_v1 = 1;
  }
}

// For a single input vector, list of k nearest neighbors
message GetNearestVectorResponse {
  VectorResponse vector_response = 1;
}

// Request for top k nearest neighbors for a single vector
message GetNearestVectorRequest {
  VectorQuery vector_query = 1;
  string use_case = 2;
}

// For many input vectors, list of lists of k nearest neighbors
message GetNearestVectorsResponse {
  // vector response is ordered same as list of input vectors
  VectorBatchResponse vector_batch_response = 1;
}

// Request for top k nearest neighbors
message GetNearestVectorsRequest {
  // list of input vectors
  VectorBatchQuery vector_batch_query = 1;
  string use_case = 2;
}

// Request for retrieving certain vectors from collection
message GetVectorsRequest {
  // reuse Qdrant proto
  GetPoints get_request = 1;
  // use case
  string use_case = 2;
}

// Request for retrieving certain vectors from collection
message DeleteVectorsRequest {
  // reuse Qdrant proto
  DeletePoints delete_request = 1;
  // use case
  string use_case = 2;
}

// Request for retrieving certain vectors from collection
message UpsertVectorsRequest {
  // reuse Qdrant proto
  UpsertPoints upsert_request = 1;
  // use case
  string use_case = 2;
}

// Request for retrieving certain vectors from collection
message CreateCollectionRequest {
  // reuse Qdrant proto
  CreateCollection create_request = 1;
  // use case
  string use_case = 2;
}
