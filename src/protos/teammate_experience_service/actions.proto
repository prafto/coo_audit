syntax = "proto3";
package teammate_experience_service.api.v1;

option java_multiple_files = true;
option java_generic_services = true;

option java_package = "com.doordash.tes.api.v1";

import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

import "common/service_client_config.proto";

// Teammate Action Service
service TeammateActionService {
  // for reference: https://github.com/doordash/dd-util-java/wiki/Hermes#hermes-default-behavior
  option (service_client.client_config).service_name = "teammate-experience-service";
  option (service_client.client_config).retry_config.max_attempts = 3;
  option (service_client.client_config).response_attempt_timeout_millis = 30000;
  option (service_client.client_config).circuit_breaker_config.failure_rate_threshold = 1.0;
  option (service_client.client_config).retry_config.initial_wait_millis = 500;
  option (service_client.client_config).retry_config.wait_multiplier = 2.0;

  // This endpoint logs a teammate's action against a certain target.
  rpc LogTeammateAction (LogTeammateActionRequest) returns (LogTeammateActionResponse);

  // This endpoint validates whether a teammate can perform some action against a target.
  // Will verify that the number of actions against target between start and end is less than count.
  rpc ValidateTeammateAction (ValidateTeammateActionRequest) returns (ValidateTeammateActionResponse);
}

// Request object for LogTeammateAction rpc
message LogTeammateActionRequest {
  // the type of action
  ActionType action_type = 1;
  // user ID of action taker
  google.protobuf.Int64Value user_id = 2;
  // type of target the action is being taken on
  TargetType target_type = 3;
  // identifier of target the action is being taken on
  TargetIdentifier target_id = 4;
}

// Response object for LogTeammateAction rpc
message LogTeammateActionResponse {

}

// Request object for ValidateTeammateAction rpc
message ValidateTeammateActionRequest {
  // the type of action
  ActionType action_type = 1;
  // the type of target
  TargetType target_type = 2;
  // identifier of the target
  TargetIdentifier target_id = 3;
  // start time
  google.protobuf.Timestamp start = 4;
  // end time
  google.protobuf.Timestamp end = 5;
  // the maximum count of actions allowed
  google.protobuf.Int32Value count = 6;
}

// Response object for ValidateTeammateAction rpc
message ValidateTeammateActionResponse {
  // whether or not the action is permitted or not
  bool is_permitted = 1;
}

// Action types
enum ActionType {
  // default unspecified
  ACTION_TYPE_UNSPECIFIED = 0;
  // waiving a review
  ACTION_TYPE_WAIVE_REVIEW = 1;
  // overriding top dasher
  ACTION_TYPE_OVERRIDE_TOP_DASHER = 2;
  // waive completion rating
  ACTION_TYPE_WAIVE_COMPLETION_RATING = 3;
}

// Target types
enum TargetType {
  // default unspecified
  TARGET_TYPE_UNSPECIFIED = 0;
  // delivery
  TARGET_TYPE_DELIVERY = 1;
  // consumer
  TARGET_TYPE_CONSUMER = 2;
  // dasher
  TARGET_TYPE_DASHER = 3;
}

// Target identifiers
message TargetIdentifier {
  // identifier
  oneof id {
    // delivery UUID
    google.protobuf.StringValue delivery_uuid = 1;
    // consumer ID
    google.protobuf.Int64Value consumer_id = 2;
    // dasher ID
    google.protobuf.Int64Value dasher_id = 3;
  }
}




