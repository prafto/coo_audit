syntax = "proto3";
package teammate_experience_service.api.v1;

import "common/service_client_config.proto";
import "customer_enablement_internal_tools_bff/picasso_paintbrush.proto";
import "doordash.api/annotations.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "teammate_experience_service/common.proto";
import "teammate_experience_service/pagination.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.tes.api.v1";

// Announcement Service
service THQAnnouncementService {
  // for reference: https://github.com/doordash/dd-util-java/wiki/Hermes#hermes-default-behavior
  option (service_client.client_config).service_name = "teammate-experience-service";
  option (service_client.client_config).retry_config.max_attempts = 3;
  option (service_client.client_config).response_attempt_timeout_millis = 30000;
  option (service_client.client_config).circuit_breaker_config.failure_rate_threshold = 1.0;
  option (service_client.client_config).retry_config.initial_wait_millis = 500;
  option (service_client.client_config).retry_config.wait_multiplier = 2.0;
  option (doordash.api.service) = {
    name: "teammate-experience-service"
    url: "teammate-experience-service-web.service.prod.ddsd"
    port: 50051
    name_spaces: ["teammate-experience-service"]
    api_key_name: "TEAMMATE_EXPERIENCE_SERVICE_API_KEY"
    owner: {
      name: "teammate-experience-service"
      id: "teammate-experience-alerts"
      slack_channel: "#ask-teammate-experience"
      email_alias: "team-teammate-experience@doordash.com"
    }
    target_products: [INTERNAL]
  };

  // Retrieves a list of announcements for THQ
  rpc GetAnnouncements(GetAnnouncementsRequest) returns (GetAnnouncementsResponse) {
    option (google.api.http) = {
      post: "/teammate-experience-service/v1/get-announcements"
      body: "*"
    };

    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: TEST
      authorization: [DD_USER]
      target_products: [INTERNAL]
      role_based_authorization: {
        mode: ANY,
        roles: [
          "perm_access_teammate_headquarters",
          "perm_risk_workstation"
        ]
      }
      authentication_config: {enable_okta_verification: true}
    };
  }

  // Gets announcement
  rpc GetAnnouncement(GetAnnouncementRequest) returns (GetAnnouncementResponse) {
    option (google.api.http) = {
      post: "/teammate-experience-service/v1/get-announcement"
      body: "*"
    };

    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: TEST
      authorization: [DD_USER]
      target_products: [INTERNAL]
      role_based_authorization: {
        mode: ANY,
        roles: [
          "perm_access_teammate_headquarters",
          "perm_risk_workstation"
        ]
      }
      authentication_config: {enable_okta_verification: true}
    };
  }

  // Updates announcement
  rpc UpdateAnnouncement(UpdateAnnouncementRequest) returns (UpdateAnnouncementResponse) {
    option (google.api.http) = {
      post: "/teammate-experience-service/v1/update-announcement"
      body: "*"
    };

    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: TEST
      authorization: [DD_USER]
      target_products: [INTERNAL]
      role_based_authorization: {
        mode: ANY,
        roles: ["perm_picasso_editor"]
      }
      authentication_config: {enable_okta_verification: true}
    };
  }

  // Acknowledge an announcement
  rpc AcknowledgeAnnouncement(AcknowledgeAnnouncementRequest) returns (AcknowledgeAnnouncementResponse) {
    option (google.api.http) = {
      post: "/teammate-experience-service/v1/acknowledge-announcement"
      body: "*"
    };

    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: TEST
      authorization: [DD_USER]
      target_products: [INTERNAL]
      role_based_authorization: {
        mode: ANY,
        roles: [
          "perm_access_teammate_headquarters",
          "perm_risk_workstation"
        ]
      }
      authentication_config: {enable_okta_verification: true}
    };
  }

  // Get announcement details
  // This endpoint is intended to be used by admins of announcements
  rpc GetAnnouncementDetails(GetAnnouncementDetailsRequest) returns (GetAnnouncementDetailsResponse) {
    option (google.api.http) = {
      post: "/teammate-experience-service/v1/get-announcement-details"
      body: "*"
    };

    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: TEST
      authorization: [DD_USER]
      target_products: [INTERNAL]
      role_based_authorization: {
        mode: ANY,
        roles: ["perm_picasso_editor"]
      }
      authentication_config: {enable_okta_verification: true}
    };
  }
}

// GetAnnouncements request object
message GetAnnouncementsRequest {
  // pagination options
  PaginationOptions pagination_options = 1;
  // client
  Client client = 2;
}

// GetAnnouncements response object
message GetAnnouncementsResponse {
  // list of announcements
  repeated Announcement announcements = 1;
}

// GetAnnouncement request object
message GetAnnouncementRequest {
  // content ID
  google.protobuf.StringValue id = 1;
  // extended fields only
  google.protobuf.BoolValue extended_fields_only = 2;
}

// GetAnnouncement response object
message GetAnnouncementResponse {
  // announcement
  Announcement announcement = 1;
}

// Get announcement details request object
message GetAnnouncementDetailsRequest {
  // content ID
  google.protobuf.StringValue id = 1;
}

// Get announcement details response object
message GetAnnouncementDetailsResponse {
  // announcement details
  AnnouncementDetails announcement_details = 1;
}

// UpdateAnnouncement request object
message UpdateAnnouncementRequest {
  // content ID to update
  google.protobuf.StringValue id = 1;
  // details to update
  AnnouncementDetails details = 2;
}

// UpdateAnnouncement response object
message UpdateAnnouncementResponse {}

// AcknowledgeAnnouncement request object
message AcknowledgeAnnouncementRequest {
  // content ID to acknowledge
  google.protobuf.StringValue id = 1;
}

// AcknowledgeAnnouncement response object
message AcknowledgeAnnouncementResponse {}

// THQ announcement
message Announcement {
  // id
  google.protobuf.StringValue id = 1;
  // category
  google.protobuf.StringValue category = 2;
  // created at
  google.protobuf.Timestamp created_at = 3;
  // updated at
  google.protobuf.Timestamp updated_at = 4;
  // title
  google.protobuf.StringValue title = 5;
  // text body
  google.protobuf.StringValue text_body = 6;
  // due date
  google.protobuf.Timestamp due_date = 7;
  // read at
  google.protobuf.Timestamp read_at = 8;
  // thumbnail image url
  google.protobuf.StringValue thumbnail_image_url = 9;
  // picasso paintbrush content
  customer_enablement_internal_tools_bff.picasso_paintbrush.v1.GetContentByIdResponse picasso_paintbrush_content = 10;
}

// THQ announcement details
message AnnouncementDetails {
  // due date
  google.protobuf.Timestamp due_date = 1;
  // thumbnail image url
  google.protobuf.StringValue thumbnail_image_url = 2;
  // target properties
  TargetProperties target_properties = 3;
}
