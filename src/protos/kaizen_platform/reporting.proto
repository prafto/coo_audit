syntax = "proto3";

package kaizen_platform.v1;

import "common/service_client_config.proto";
import "google/protobuf/wrappers.proto";

// go_package enabled for use in TAS go proxy
option go_package = "github.com/doordash/services-protobuf/generated/kaizen_platform";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.kaizen_platform";

// KaizenReportingService provides gRPC endpoints for querying and updating Kaizen Reporting related data.
service KaizenReportingService {
  // GetServiceCoverage returns Kaizen service coverage data for the given service.
  rpc GetServiceCoverage(GetServiceCoverageRequest) returns (GetServiceCoverageResponse);

  // GetEndpointAdoptionPlans returns the adoption plans for the endpoints associated to the given service.
  rpc GetEndpointAdoptionPlans(GetEndpointAdoptionPlansRequest) returns (GetEndpointAdoptionPlansResponse);

  // UpdateEndpointAdoptionPlan updates the adoption plan for the given endpoint.
  rpc UpdateEndpointAdoptionPlan(UpdateEndpointAdoptionPlanRequest) returns (UpdateEndpointAdoptionPlanResponse);

  // GetOrganizationCoverages returns the coverage data for all organizations.
  rpc GetOrganizationCoverages(GetOrganizationCoveragesRequest) returns (GetOrganizationCoveragesResponse);
}

// GetServiceCoverageRequest is the request message for the GetServiceCoverage method.
// It contains the name of the service for which to get coverage data.
message GetServiceCoverageRequest {
  // service_name is the name of the service to get coverage data for.
  string service_name = 1;
}

// GetServiceCoverageResponse is the response message for the GetServiceCoverage method.
// It contains the service coverage data for the given service.
message GetServiceCoverageResponse {
  // service_name is the name of the service for which the coverage data is returned.
  string service_name = 1;
  // namespace_coverage is the list of NamespaceCoverage data for the given service.
  repeated NamespaceCoverage namespace_coverage = 2;
}

// GetEndpointAdoptionPlansRequest is the request message for the GetEndpointAdoptionPlans method.
// It contains the name of the service for which to get endpoint adoption plans.
message GetEndpointAdoptionPlansRequest {
  // service_name is the name of the service to get endpoint adoption plans for.
  string service_name = 1;
}

// GetEndpointAdoptionPlansResponse is the response message for the GetEndpointAdoptionPlans method.
// It contains the endpoint adoption plans for the given service.
message GetEndpointAdoptionPlansResponse {
  // service_name is the name of the service for which the endpoint adoption plans are returned.
  string service_name = 1;
  // namespace_adoption_plans is the list of NamespaceAdoptionPlans for the given service.
  repeated NamespaceAdoptionPlans namespace_adoption_plans = 2;
}

// UpdateEndpointAdoptionPlanRequest is the request message for the UpdateEndpointAdoptionPlan method.
// It contains the details of the endpoint and its adoption plan to be updated.
message UpdateEndpointAdoptionPlanRequest {
  // namespace is the namespace of the endpoint.
  string namespace = 1;
  // endpoint is the name of the endpoint.
  string endpoint = 2;
  // adoption_plan is the adoption plan for the endpoint.
  AdoptionPlan adoption_plan = 3;
}

// UpdateEndpointAdoptionPlanResponse is the response message for the UpdateEndpointAdoptionPlan method.
// It contains the updated adoption plan for the endpoint.
message UpdateEndpointAdoptionPlanResponse {
  // adoption_plan is the updated adoption plan for the endpoint.
  AdoptionPlan adoption_plan = 1;
}

// NamespaceCoverage contains the coverage data for a namespace.
message NamespaceCoverage {
  // namespace is the name of the namespace.
  string namespace = 1;
  // covered_endpoints is the number of endpoints covered in the namespace.
  int32 covered_endpoints = 2;
  // traffic_coverage is the percentage of traffic in the namespace that is covered.
  double traffic_coverage = 3;
  // total_endpoints is the total number of endpoints in the namespace.
  int32 total_endpoints = 4;
  // endpoints is the list of EndpointData for the namespace.
  repeated EndpointCoverage endpoints = 5;
}

// EndpointData contains the data for an endpoint.
message EndpointCoverage {
  // endpoint is the name of the endpoint.
  string endpoint = 1;
  // traffic_percentage is the percentage of traffic for the entire namespace that the endpoint receives.
  double traffic_percentage = 2;
  // covered indicates if the endpoint is covered (hit).
  bool covered = 3;
  // hits is the list of workflows and actions that hit the endpoint (only non-empty if covered == true).
  repeated EndpointHit hits = 4;
}

// EndpointHit contains data about a particular (workflow, action) pair that hit the endpoint.
message EndpointHit {
  // workflow is the name of the workflow that hit the endpoint.
  string workflow = 1;
  // action is the name of the action within the workflow that hit the endpoint.
  string action = 2;
}

// NamespaceAdoptionPlans contains the adoption plans for the endpoints in a namespace.
message NamespaceAdoptionPlans {
  // namespace is the name of the namespace.
  string namespace = 1;
  // adoption_plans is the list of EndpointAdoptionPlan for the namespace.
  repeated EndpointAdoptionPlan adoption_plans = 2;
}

// EndpointAdoptionPlan contains the adoption plan for an endpoint.
message EndpointAdoptionPlan {
  // endpoint is the name of the endpoint.
  string endpoint = 1;
  // adoption_plan is the adoption plan for the endpoint.
  AdoptionPlan adoption_plan = 2;
}

// PlannedCompletion contains the year and the quarter by which the endpoint is planned to be done.
message PlannedCompletion {
  // The year of the plan.
  int32 year = 1;
  // The quarter of the plan.
  PlannedQuarter quarter = 2;
}

// PlannedQuarter represents the quarter of the year.
enum PlannedQuarter {
  // PLANNED_QUARTER_UNSPECIFIED is an unspecified quarter.
  PLANNED_QUARTER_UNSPECIFIED = 0;

  // PLANNED_QUARTER_1 is the first quarter of the year.
  PLANNED_QUARTER_1 = 1;

  // PLANNED_QUARTER_2 is the second quarter of the year.
  PLANNED_QUARTER_2 = 2;

  // PLANNED_QUARTER_3 is the third quarter of the year.
  PLANNED_QUARTER_3 = 3;

  // PLANNED_QUARTER_4 is the fourth quarter of the year.
  PLANNED_QUARTER_4 = 4;
}

// AdoptionPlan contains the adoption plan for an endpoint.
message AdoptionPlan {
  // include_in_gwf indicates if the endpoint should be included in the GWF.
  bool include_in_gwf = 1;
  // planned_completion is the year and quarter by which the endpoint is planned to be done.
  PlannedCompletion planned_completion = 2;
}

// GetOrganizationCoveragesRequest is the request message for the GetOrganizationCoverages method.
message GetOrganizationCoveragesRequest {}

// GetOrganizationCoveragesResponse is the response message for the GetOrganizationCoverages method.
message GetOrganizationCoveragesResponse {
  // organization_coverages is the list of OrganizationCoverage data.
  repeated OrganizationCoverage organization_coverages = 1;
}

// OrganizationCoverage contains the coverage data for an organization.
message OrganizationCoverage {
  // organization is the name of the organization.
  string organization = 1;
  // services_covered is the number of services covered in the organization.
  int32 services_covered = 2;
  // total_services is the total number of services in the organization.
  int32 total_services = 3;
  // endpoints_covered is the number of endpoints covered in the organization.
  int32 endpoints_covered = 4;
  // total_endpoints is the total number of endpoints in the organization.
  int32 total_endpoints = 5;
  // tier_coverages is the list of TierCoverage data for the organization.
  repeated TierCoverage tier_coverages = 6;
}

// TierCoverage contains the coverage data for a tier.
message TierCoverage {
  // tier is the tier level.
  Tier tier = 1;
  // services_covered is the number of services covered in the tier.
  int32 services_covered = 2;
  // total_services is the total number of services in the tier.
  int32 total_services = 3;
  // endpoints_covered is the number of endpoints covered in the tier.
  int32 endpoints_covered = 4;
  // total_endpoints is the total number of endpoints in the tier.
  int32 total_endpoints = 5;
  // service_coverages is the list of ServiceCoverage data for the tier.
  repeated ServiceCoverage service_coverages = 6;
}

// ServiceCoverage contains the coverage data for a service.
message ServiceCoverage {
  // service_name is the name of the service.
  string service_name = 1;
  // endpoints_covered is the number of endpoints covered in the service.
  int32 endpoints_covered = 2;
  // total_endpoints is the total number of endpoints in the service.
  int32 total_endpoints = 3;
}

// Tier represents the tier level.
enum Tier {
  // TIER_UNSPECIFIED is an unspecified tier.
  TIER_UNSPECIFIED = 0;
  // TIER_0 is the tier 0.
  TIER_0 = 1;
  // TIER_1 is the tier 1.
  TIER_1 = 2;
  // TIER_2 is the tier 2.
  TIER_2 = 3;
  // TIER_3 is the tier 3.
  TIER_3 = 4;
}
