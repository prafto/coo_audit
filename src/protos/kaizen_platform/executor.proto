syntax = "proto3";

package kaizen_platform.v1;

import "common/service_client_config.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/wrappers.proto";
import "kaizen_modules/context_primitive.proto";
import "kaizen_platform/workflow.proto";

// go_package enabled for use in TAS go proxy
option go_package = "github.com/doordash/services-protobuf/generated/kaizen_platform";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.kaizen_platform";

// The Kaizen Executor Service, the gRPC Service that serves as the entry point for running synchronous Kaizen Workflow
service KaizenExecutorService {
  // Synchronously starts a new Kaizen Workflow Execution
  rpc StartWorkflow(StartWorkflowRequest) returns (StartWorkflowResponse);
}

// Request object for the StartWorkflow gRPC method
message StartWorkflowRequest {
  // workflow parameters, including workflow id, action parameters override and context
  WorkflowParameters workflow_parameters = 1;

  // request uuid
  string request_uuid = 2;

  // workflow type
  WorkflowType workflow_type = 3;
}

// workflow run status
enum WorkflowRunStatus {
  // unspeicified status
  WORKFLOW_RUN_STATUS_UNSPECIFIED = 0;

  // The workflow run has completed successfully
  WORKFLOW_RUN_STATUS_COMPLETED = 1;

  // The workflow run has failed
  WORKFLOW_RUN_STATUS_FAILED = 2;
}

// Response object for the StartWorkflow gRPC method
message StartWorkflowResponse {
  // deprecated context field, use context_value instead
  reserved 3;
  reserved "context_field";

  // the status of the worklflo run
  WorkflowRunStatus workflow_run_status = 1;

  // context for the workflow executed
  // context will be deprecated in the future, please use context_value instead
  string context = 2;

  // error message if the workflow run failed
  string error_message = 4;

  // context value for the workflow executed
  // context will be deprecated in the future, please use context_value instead
  kaizen_modules.v1.ContextValue context_value = 5;
}

// workflow type enum
enum WorkflowType {
  // unspecified workflow type
  WORKFLOW_TYPE_UNSPECIFIED = 0;

  // The default workflow type, if not specified, the workflow passed in workflow parameter will be executed
  WORKFLOW_TYPE_DEFAULT = 1;

  // workflow type used for release test resource generated through the workflow
  WORKFLOW_TYPE_RELEASE_TEST_RESOURCE = 2;

  // workflow type used for refresh test resource attribute
  WORKFLOW_TYPE_REFRESH_TEST_RESOURCE_ATTRIBUTE = 3;
}
