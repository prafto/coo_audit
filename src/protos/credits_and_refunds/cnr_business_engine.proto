syntax = "proto3";
package credits_and_refunds.api.v1;

import "common/service_client_config.proto";
import "credits_and_refunds/cnr_common.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/wrappers.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.cnr.api.v1";

// Credits Refunds Service
service BusinessEngineService {
  // endpoint for the validation step of preview service in the business rules engine
  rpc ValidateDelivery(BusinessEngineServiceValidateDeliveryRequest) returns (BusinessEngineServiceValidateDeliveryResponse);
}

//values for different business source types
enum SourceType {
  // source is unspecified
  SOURCE_TYPE_UNSPECIFIED = 0;
  // source is self help
  SOURCE_TYPE_SELF_HELP = 1;
  // source is agent
  SOURCE_TYPE_DISPATCH = 2;
  // source is storefront
  SOURCE_TYPE_STOREFRONT = 3;
}

// values for different types of requests
enum RequestType {
  // unspecified request type
  REQUEST_TYPE_UNSPECIFIED = 0;
  // dasher is late
  REQUEST_TYPE_DASHER_LATE = 1;
  // dasher never arrived
  REQUEST_TYPE_DASHER_NEVER_ARRIVED = 2;
  // problem with the dasher
  REQUEST_TYPE_DASHER_PROBLEM = 3;
  // agent request
  REQUEST_TYPE_DISPATCH = 4;
  // incorrect order
  REQUEST_TYPE_INCORRECT = 5;
  // missing order
  REQUEST_TYPE_MISSING = 6;
  // missing/incorrect order for mobile app
  REQUEST_TYPE_MISSING_INCORRECT = 7;
  // quality issue
  REQUEST_TYPE_QUALITY = 8;
  // other issue
  REQUEST_TYPE_SOMETHING_ELSE = 9;
  // redcard issue
  REQUEST_TYPE_REDCARD = 10;
  // order delivered past promised time for users with dashpass
  REQUEST_TYPE_DASHPASS_ON_TIME_DELIVERY_PROMISE_LATENESS = 11;
}

// values for different types of status codes
enum StatusCode {
  // unspecified status code
  STATUS_CODE_UNSPECIFIED = 0;
  // access denied
  STATUS_CODE_ACCESS_DENIED = 1;
  // credits only
  STATUS_CODE_CREDITS_ONLY = 2;
  // delivery cancelled
  STATUS_CODE_DELIVERY_CANCELLED = 3;
  // delivery not cancelled
  STATUS_CODE_DELIVERY_NOT_CANCELLED = 4;
  // delivery too old
  STATUS_CODE_DELIVERY_TOO_OLD = 5;
  // drive order
  STATUS_CODE_DRIVE_ORDER = 6;
  // first time delivery and over order amount
  STATUS_CODE_FIRST_TIME_DELIVERY_AND_OVER_ORDER_AMOUNT = 7;
  // escalate to chat
  STATUS_CODE_ESCALATE_TO_CHAT = 8;
  // forbidden
  STATUS_CODE_FORBIDDEN = 9;
  // incorrect zero credit
  STATUS_CODE_INCORRECT_ZERO_CREDIT = 10;
  // M and I 50 percent refund
  STATUS_CODE_M_AND_I_50_PERCENT_REFUND = 11;
  // never delivered
  STATUS_CODE_NEVER_DELIVERED = 12;
  // no valid problems
  STATUS_CODE_NO_VALID_PROBLEMS = 13;
  // not found
  STATUS_CODE_NOT_FOUND = 14;
  // pickup order
  STATUS_CODE_PICKUP_ORDER = 15;
  // preview not valid
  STATUS_CODE_PREVIEW_NOT_VALID = 16;
  // redelivery not allowed
  STATUS_CODE_REDELIVERY_NOT_ALLOWED = 17;
  // resolution already handled
  STATUS_CODE_RESOLUTION_ALREADY_HANDLED = 18;
  // self help is not allowed
  STATUS_CODE_SELF_HELP_NOT_ALLOWED = 19;
  // send to chat
  STATUS_CODE_SEND_TO_CHAT = 20;
  // store is not eligible
  STATUS_CODE_STORE_NOT_ELIGIBLE = 21;
  // time to report over
  STATUS_CODE_TIME_TO_REPORT_OVER = 22;
  // wrong user
  STATUS_CODE_WRONG_USER = 23;
  // block apology credits
  STATUS_CODE_BLOCK_APOLOGY_CREDITS = 24;
  // block credit and refund abuser
  STATUS_CODE_BLOCK_C_R_ABUSER = 25;
  // request sms mfa
  STATUS_CODE_REQUEST_SMS_MFA = 26;
  // holding tank
  STATUS_CODE_HOLDING_TANK = 27;
  // status code that we must send to ORT in order for it to display the correct message to support agent
  STATUS_CODE_ORT_C_R_ABUSER = 28;
  // invalid refund amount
  STATUS_CODE_INVALID_REFUND_AMOUNT = 29;
  // ban cancellation dispute
  STATUS_CODE_BAN_CANCELLATION_DISPUTE = 30;
}

// values for different possible next steps
enum NextStepType {
  // next step unspecified
  NEXT_STEP_TYPE_UNSPECIFIED = 0;
  // no preview was created
  NEXT_STEP_TYPE_NO_PREVIEW = 1;
  // preview was rejected
  NEXT_STEP_TYPE_REJECT_PREVIEW = 2;
  // continue to next step of order resolution flow
  NEXT_STEP_TYPE_CONTINUE = 3;
}

// request object for deliveryValidation endpoint
message BusinessEngineServiceValidateDeliveryRequest {
  // business source
  SourceType business_source = 1;
  // ID used to get delivery status
  google.protobuf.Int64Value delivery_id = 2;
  // Used for validating delivery ownership for self-help
  google.protobuf.Int32Value user_id = 3 [deprecated = true];
  // list of problems used to create preview
  repeated google.protobuf.StringValue problems = 4;
  // details of request used for workflow
  google.protobuf.StringValue details = 5;
  // request type used to create preview and check for handled resolutions
  RequestType request_type = 6;
  // new int64 user_id to replace existing int32 user_id
  google.protobuf.Int64Value user_id_int64 = 7;
}

// response object for deliveryValidation endpoint
message BusinessEngineServiceValidateDeliveryResponse {
  // status code
  StatusCode status_code = 1;
  // description for status code
  string message = 2;
  // don't create previews if resolution had not already been handled
  NextStepType next_step = 3;
}
