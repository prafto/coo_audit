syntax = "proto3";

package servicemap.v1;

import "google/protobuf/timestamp.proto";

option go_package = "github.com/doordash/services-protobuf/generated/servicemap";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.servicemap";

// Type is the kind of node.
// buf:lint:ignore ENUM_VALUE_PREFIX
// buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
enum Type {
  // UNSPECIFIED is not a valid type and shall be at least ignored or throw an
  // error during processing.
  UNSPECIFIED = 0;
  // SERVICE represents an internal microservice in DoorDash's backend.
  SERVICE = 1;
  // REMOTE represents any external, third-party service.
  REMOTE = 2;
  // DATABASE represents any stateful, non-volatile datastore.
  DATABASE = 3;
  // CACHE represents any stateful, volatile, datastore.
  CACHE = 4;
  // MESSAGE_BUS represents any queueing technology like Kafka or SQS.
  MESSAGE_BUS = 5;
  // APPLICATION represents any front-end application such as Dasher or Consumer mobile application.
  APPLICATION = 6;
}

// Node represents one side of an edge.
message Node {
  // type is the type of the node.
  Type type = 1;
  // name is the name of the node.  Each `Type` has different conventions.
  // SERVICE: microservice's name as typically defined in the catalog.
  // REMOTE: the domain name of the external service.
  // DATABASE: the name of the database.
  // CACHE: the type of cache, such as "redis".
  // MESSAGE_BUS: the type of bus, such as "kafka".
  // APPLICATION: the name of the application.
  string name = 2;
  // context provides additional clarity on the node.
  // Each type has different conventions.
  // SERVICE: the endpoint processing request.
  // REMOTE: HTTP method of the request.
  // DATABASE: Operation + table name.
  // CACHE: Operation such as "GET" or "SET".
  // MESSAGE_BUS: the particular topic/queue used.
  // APPLICATION: the particular screen/view/function that initiated connection.
  string context = 3;
  // is_error captures if this node was determined to be in an error state.
  bool is_error = 4;
  // duration_ns is the length of the span that was used to discover this node.
  // as indicated by suffix, it is measured in nanoseconds.
  uint64 duration_ns = 5;
  // tier is the importance of the service as described in the catalog.
  // it will be -1 where unknown.
  sint32 tier = 6;
  // span_id is the span id that was used to detect this node.
  bytes span_id = 7;
}

// Edge represents an interaction between two systems.
message Edge {
  // source is the creator of the interaction/request.
  Node source = 1;
  // target is the handler of the interaction/request.
  Node target = 2;
  // trace_id on Edge is deprecated/unused.
  // Use EdgeBatch's trace_id field to discover this.
  bytes trace_id = 3 [deprecated = true];
}

// EdgeBatch is a wrapper for a list of edges.
// Typically used during ingestion.
message EdgeBatch {
  // created_at is the time the batch was created.
  google.protobuf.Timestamp created_at = 1;
  // edges is a list of edeges, likely discovered together during
  // trace processing.
  repeated Edge edges = 2;
  // trace_id is the OpenTelemetry trace id that was
  // analyzed to discover this batch of edges.
  bytes trace_id = 3;
}
