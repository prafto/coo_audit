syntax = "proto3";

package servicemap.v1;

import "servicemap/service_map.proto";

option go_package = "github.com/doordash/services-protobuf/generated/servicemap";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.servicemap";

// ServiceMapService returns information related to the service map calculated
// by OpenTelemetry tracing data.
service ServiceMapService {
  // ListServices lists all known services by the service map.
  rpc ListServices(ListServicesRequest) returns (ListServicesResponse);

  // GetNodes returns all nodes for a particular service, typically representing
  // GRPC or HTTP endpoints.
  rpc GetNodes(GetNodesRequest) returns (GetNodesResponse);

  // GetConnections returns all nodes that a particular node is connected to.
  // This includes both clients and dependencies.
  rpc GetConnections(GetConnectionsRequest) returns (GetConnectionsResponse);
}

// ListServicesRequest is an empty request.
message ListServicesRequest {}

// ListServicesResponse is response from GetServices
message ListServicesResponse {
  // services returns a complete list of all services known by service map.
  repeated string services = 1;
}

// MapNode represents a node in the service map.
// It is heavily related to `Node` object, but loses some of the specific event
// information in favor of future aggregated views. See `Node` for explanation.
message MapNode {
  // Metadata is additional, context dependent data about a MapNode.
  message Metadata {
    // Key values are the keys available in the metadata field.
    // buf:lint:ignore ENUM_VALUE_PREFIX
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    enum Key {
      // UNUSED - this key should not exist in the map and is an error if
      // it does.
      UNUSED = 0;
      // SERVICE_PROTOCOL - if this key exists, then the value is `http`|`grpc`.
      SERVICE_PROTOCOL = 1;
    }

    // key is the type of the metadata being presented.
    Key key = 1;

    // value is the value associated with the key.
    string value = 2;
  }

  // type is the type of node, such as `Service`
  Type type = 1;
  // name is the name of node, such as the name of the `Service`
  string name = 2;
  // context
  string context = 3;

  // metadata provides additional information about the node.
  repeated Metadata metadata = 4;
}

// GetNodesRequest is a request for GetNodes
message GetNodesRequest {
  // service is a required field. If the service is blank, an error shall be
  // returned.
  string service = 1;
}

// GetNodesResponse is a response for GetNodes.
message GetNodesResponse {
  // nodes are all nodes that exist for a particular service.
  repeated MapNode nodes = 1;
}

// GetConnectionsRequest is a response for GetDependencies
message GetConnectionsRequest {
  // node
  MapNode node = 1;
}

// GetConnectionsResponse is a response for GetDependencies.
message GetConnectionsResponse {
  // clients are all nodes that have the request node as a dependency.
  repeated MapNode clients = 1;

  // dependencies are all nodes that the request node has as a dependency.
  repeated MapNode dependencies = 2;
}
