syntax = "proto3";

package dashlens.model_serve.v1;

import "common/service_client_config.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option go_package = "github.com/doordash/services-protobuf/generated/dashlens/v1";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.dashlens";

// Model Serve through argil
service ModelServeService {
  // Run model endpoint that can run one or more models
  // If multiple are passed in, they will be run in parallel and a response will be given once its been obtained
  rpc RunModel(RunModelRequest) returns (RunModelResponse);
}

// Run Model Request
message RunModelRequest {
  // Models to run
  repeated ModelRequest models = 1;
  // Delivery UUID
  google.protobuf.StringValue delivery_uuid = 2;
}

// Model Request
message ModelRequest {
  // Model Name (optional)
  google.protobuf.StringValue model_name = 1;
  // Model Version (optional will use latest if not specified)
  google.protobuf.StringValue model_version = 2;
  // Model
  oneof standardized_model_request {
    // Image classification model
    ImageClassification image_classification = 3;
    // Image similarity model
    ImageSimilarity image_similarity = 4;
  }
}

// Model Response
message ModelResponse {
  // Model Name
  google.protobuf.StringValue model_name = 1;
  // Model Version
  google.protobuf.StringValue model_version = 2;
  // Raw response from argil
  google.protobuf.StringValue raw_response = 3;
  // Model response
  oneof standardized_model_response {
    // Image classification response
    ImageClassificationResponse image_classification_response = 4;
    // Image similarity response
    ImageSimilarityResponse image_similarity_response = 5;
  }
}

// Image Verification Response
message RunModelResponse {
  // Decisions that are obtained from the chosen models to run
  repeated ModelResponse responses = 1;
}

// Decision
message Decision {
  // Model score
  google.protobuf.DoubleValue score = 1;
  // Raw response
  google.protobuf.StringValue raw_response = 2;
}

// Image classification request
message ImageClassification {
  // A signed url that contains the image to classify
  google.protobuf.StringValue signed_image_url = 1;
}

// Image classification response
message ImageClassificationResponse {
  // Photo type decision if its garbage
  google.protobuf.StringValue photo_type_decision = 1;
  // What is best represented in the photo
  PhotoType photo_type = 2;
  // Photo type probabilities
  repeated google.protobuf.FloatValue photo_type_probabilities = 3;
}

// Types of photo for classification
enum PhotoType {
  // Required
  PHOTO_TYPE_UNSPECIFIED = 0;
  // Good info
  PHOTO_TYPE_CONTACTLESS_GOOD_INFORMATION = 1;
  // Nonsense
  PHOTO_TYPE_NONSENSE = 2;
  // Little info
  PHOTO_TYPE_CONTACTLESS_LITTLE_INFORMATION = 3;
  // Cant tell delivery
  PHOTO_TYPE_CANNOT_TELL_DELIVERY_TYPE = 4;
  // Contactless other
  PHOTO_TYPE_CONTACTLESS_OTHER = 5;
  // HITM
  PHOTO_TYPE_HITM = 6;
  // Good information bad quality
  PHOTO_TYPE_CONTACTLESS_GOOD_INFORMATION_BAD_QUALITY = 7;
}

// Image similarity model params
message ImageSimilarity {
  // The current image
  ComparisonImage current_comparison_image = 1;
  // An array of images to compare against
  repeated ComparisonImage reference_images = 2;
  // A consumer address lat (manual lat or default)
  google.protobuf.DoubleValue consumer_lat = 3;
  // A consumer address lng (manual lng or default)
  google.protobuf.DoubleValue consumer_lng = 4;
  // Horizontal accuracy of the Dx when they uploaded the photo
  google.protobuf.DoubleValue horizontal_accuracy = 5;
}

// Comparison image defenition
message ComparisonImage {
  // A signed url that contains an image
  google.protobuf.StringValue signed_image_url = 1;
  // A lat of the image (optional)
  google.protobuf.DoubleValue lat = 2;
  // A lng of the image (optional)
  google.protobuf.DoubleValue lng = 3;
  // Add in time of upload
}

// Image similarity response
message ImageSimilarityResponse {
  // Distance from photos
  google.protobuf.DoubleValue distance = 1;
  // Score from the model
  google.protobuf.FloatValue score = 2;
}
