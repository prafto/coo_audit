syntax = "proto3";

package lego.v1;

import "google/protobuf/wrappers.proto";
import "lego/action.proto";
import "lego/action_system.proto";
import "lego/component.proto";
import "lego/extension_value.proto";
import "lego/log.proto";
import "lego/pagination.proto";

option go_package = "github.com/doordash/services-protobuf/generated/lego";
option java_multiple_files = true;
option java_package = "com.doordash.rpc.lego";

// The top-level Lego page
message LegoPage {
  // Specifies different page areas.
  repeated Group groups = 1;
  // Logging info at the page level.
  lego.v1.Logging logging = 2;
  // Pagination information about this LegoPage.
  lego.v1.PaginationResponse pagination = 3;
}

// Grouping of sections that represent an area of the page, could just be one group representing the whole screen.
message Group {
  // A unique semantic name of this instance of this element.
  string group_name = 1;
  // List of sections that are in the group.
  repeated Section sections = 2;
  // Logging info at the group level.
  Logging logging = 3;
}

// Group of legos.
message Section {
  // ID of this instance of this element.
  string section_id = 1;
  // List of legos in this section
  repeated Lego content = 2;
  // Logging info at the section level.
  Logging logging = 3;
}

// Building block for components within a page.
message Lego {
  // Data model actually used to render this view
  Component content = 1;
  // Logging info at the lego level.
  Logging logging = 2;
  // FailureMode enum
  enum FailureMode {
    // If not specified, will default to OPTIONAL
    UNSPECIFIED = 0;
    // When a response contains this element and a client is unable to render it, the
    // entire lego page should be excluded from the UI. The client application must
    // provide a suitable failover, ideally a fully tested native implementation.
    REQUIRED = 1;
    // Attempt to render a client default where one is registered. In the event the
    // registered default view isn’t compatible, REQUIRED will be used.
    DEGRADABLE_REQUIRED = 2;
    // Attempt to render a client default where one is registered. In the event the
    // registered default view isn’t compatible, OPTIONAL will be used.
    DEGRADABLE_OPTIONAL = 3;
    // Indicates that when a response contains this element and a client is unable to
    // render it, this component and its subtree should be excluded from the UI.
    OPTIONAL = 4;
  }

  // The FailureMode field is to define the strategy of failure handling semantics on client side
  FailureMode failure_mode = 3;
  // The extension field is to provide a component's context, which will outlive the lifespan of a single screen
  repeated Extension extensions = 4;
  // The system actions
  repeated SystemAction actions = 5;
}

// Extension message
message Extension {
  // The enum of the type of the extension
  enum ExtensionType {
    // If not specified, will default to the key state type
    KEY_STATE_UNSPECIFIED = 0;
    // dynamic effect type
    DYNAMIC_EFFECT = 1;
    // replace text type
    REPLACE_TEXT = 2;
    // single selection type
    SELECTION_SINGLE = 3;
    // Mosaic UI Effect
    MOSAIC_UI_EFFECT = 4;
  }
  // extension type
  ExtensionType type = 1;
  // The value of the extension. Similar as adding a new component, user needs to add the customized extension
  // value protobuf in lego/client_extensions and also append it into the extension_value.proto oneof lineage
  ExtensionValue value = 2;
}
