syntax = "proto3";

package lego.v1;

import "doordash.api/annotations.proto";
import "google/api/annotations.proto";
import "google/protobuf/wrappers.proto";
import "lego/lego.proto";

option go_package = "github.com/doordash/services-protobuf/generated/lego";
option java_multiple_files = true;
option java_package = "com.doordash.rpc.lego";

// Mosaic model service definition.
// This service contains one endpoint that returns a MosaicServicePageResponse containing a LegoPage.
// Onboarding this service to Unified Gateway will generate OpenAPI spec containing endpoints from this service definition.
// and generate Web (Typescript), iOS, and Kotlin interfaces for LegoPage including all it's child components (Groups, Sections) e.t.c
service MosaicService {
  //  option (doordash.api.service) = {
  //    name: "mosaic"
  //    // Using web-infra's gRPC service until when Mosaic has its own gRPC service
  //    // Url property is required by Unified Gateway to generate OpenAPI spec. The value is not important right now as it
  //    // just provides us with a way to pass CI
  //    url: "web-grpc-service-playground-web.service.prod.ddsd"
  //    port: 50051
  //    // Using web-infra's namespace until when Mosaic has its own namespace
  //    // Namespace property is required by Unified Gateway to generate OpenAPI spec. The value "web-grpc-service-playground"
  //    // is not important right now as it just provides us with a way to pass CI
  //    name_spaces: ["web-grpc-service-playground"]
  //    owner: {
  //      id: "mosaic"
  //      name: "mosaic"
  //      slack_channel: "#ask-mosaic"
  //      email_alias: "sdui-leads@doordash.com"
  //    }
  //    target_products: [
  //      CX,
  //      DX,
  //      MX
  //    ]
  //  };

  // [This rpc is never called]
  // The intention of this rpc is to return a MosaicServicePageResponse that contains a LegoPage.
  // Unified Gateway generates OpenAPI spec containing endpoints from this service definition. Since this endpoint
  // is included in the OpenAPI spec, Web (Typescript), iOS, and Kotlin interfaces are generated for LegoPage including
  // all it's child components.
  // Clients can then use the generated interfaces to write type-safe code.
  rpc Page(MosaicServicePageRequest) returns (MosaicServicePageResponse) {
    //    option (google.api.http) = {get: "/mosaic/v1/page"};
    //    option (doordash.api.endpoint) = {
    //      tier: T3
    //      lifecycle: DEV
    //      authorization: [NONE]
    //    };
  }
}

// a dummy request message
message MosaicServicePageRequest {
  // dummy property
  string name = 1;
}

// a response message that contains a LegoPage.
message MosaicServicePageResponse {
  // lego page
  LegoPage page = 1;
}
