syntax = "proto3";
package gtmt_f2c_rate_management_service.v1;

import "common/service_client_config.proto";
import "doordash.api/annotations.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option go_package = "github.com/doordash/services-protobuf/generated/gtmt_f2c_rate_management_service/api/v1";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.gtmt_f2c_rate_management_service.rpc.api";

// ContractManagementService is the service for managing contracts for RAMP 1.0
service ContractManagementService {
  option (doordash.api.service) = {
    url: "gtmt-f2c-rate-management-service-api.service.prod.ddsd"
    name: "gtmt-f2c-rate-management-service"
    port: 50051
    name_spaces: ["ramp"]
    owner: {
      id: "gtmt-f2c-rate-management-service"
      name: "gtmt-f2c-rate-management-service"
      slack_channel: "#gtmt-engineering"
      email_alias: "bizapps-all@doordash.com"
    }
    target_products: [INTERNAL]
  };

  option (service_client.client_config).response_attempt_timeout_millis = 2000;
  option (service_client.client_config).retry_config.max_attempts = 4;
  option (service_client.client_config).retry_config.do_retry_grpc_code = 8;
  option (service_client.client_config).circuit_breaker_config.failure_rate_threshold = 0.8;
  option (service_client.client_config).circuit_breaker_config.do_ignore_grpc_code = 5;

  // OnboardContract onboards a new contract or updates an existing one
  rpc OnboardContract(OnboardContractRequest) returns (OnboardContractResponse) {
    option (google.api.http) = {
      post: "/ramp/v1/onboard_contract"
      body: "*"
    };

    option (doordash.api.endpoint) = {
      tier: T1
      lifecycle: DEV
      authorization: [API_KEY]
    };
  }
}

// Source system identifier enum
enum SourceSystem {
  // Default value
  SOURCE_SYSTEM_UNSPECIFIED = 0;
  // Salesforce
  SOURCE_SYSTEM_SFDC = 1;
  // Mx Bonus
  SOURCE_SYSTEM_MX = 2;
  // Other systems
  SOURCE_SYSTEM_OTHER = 3;
}

// Contract type enum
enum ContractType {
  // Default value
  CONTRACT_TYPE_UNSPECIFIED = 0;
  // New contract creation
  CONTRACT_TYPE_CREATE = 1;
  // Contract update
  CONTRACT_TYPE_UPDATE = 2;
  // Contract amendment
  CONTRACT_TYPE_AMENDMENT = 3;
}

// Contract status enum
enum ContractStatus {
  // Default value
  CONTRACT_STATUS_UNSPECIFIED = 0;
  // Contract is in draft state
  CONTRACT_STATUS_DRAFT = 1;
  // Contract is active
  CONTRACT_STATUS_ACTIVE = 2;
  // Contract is paused
  CONTRACT_STATUS_PAUSED = 3;
  // Contract is completed
  CONTRACT_STATUS_COMPLETED = 4;
  // Contract is terminated
  CONTRACT_STATUS_TERMINATED = 5;
  // Contract is expired
  CONTRACT_STATUS_EXPIRED = 6;
}

// Deal term type enum
enum DealTermType {
  // Default value
  DEAL_TERM_TYPE_UNSPECIFIED = 0;
  // Mx Bonus deal term
  DEAL_TERM_TYPE_MX_BONUS = 1;
  // Sign-on deal term
  DEAL_TERM_TYPE_SIGNON = 2;
  // New Store Expansion deal term
  DEAL_TERM_TYPE_NSE = 3;
  // Sign-on + NSE deal term
  DEAL_TERM_TYPE_SIGNON_NSE = 4;
}

// Deal term status enum
enum DealTermStatus {
  // Default value
  DEAL_TERM_STATUS_UNSPECIFIED = 0;
  // Deal term is new
  DEAL_TERM_STATUS_NEW = 1;
  // Deal term is pending
  DEAL_TERM_STATUS_PENDING = 2;
  // Deal term is in progress
  DEAL_TERM_STATUS_INPROGRESS = 3;
  // Deal term is completed
  DEAL_TERM_STATUS_COMPLETED = 4;
  // Deal term is abandoned
  DEAL_TERM_STATUS_ABANDONED = 5;
}

// Error code enum
enum ErrorCode {
  // Default value
  ERROR_CODE_UNSPECIFIED = 0;
  // Not found
  ERROR_CODE_NOT_FOUND = 1;
  // Invalid request
  ERROR_CODE_INVALID_REQUEST = 2;
  // Unauthorized access
  ERROR_CODE_UNAUTHORIZED = 3;
  // Failed to create
  ERROR_CODE_CREATE_FAILURE = 4;
  // Contract already exists
  ERROR_CODE_ALREADY_EXISTS = 5;
  // Internal server error
  ERROR_CODE_INTERNAL_ERROR = 6;
}

// Installment schedule for payments
message InstallmentSchedule {
  // Payment date in YYYY-MM-DD format
  google.protobuf.StringValue pay_period = 1;
  // Amount to be paid
  google.protobuf.Int32Value payment_amount = 2;
}

// Business detail information
message BusinessDetail {
  // Business ID
  google.protobuf.StringValue business_id = 1;
  // Business name
  google.protobuf.StringValue name = 2;
}

// Deal term wrapper that can contain any type of deal term
message DealTerm {
  // Unique identifier for deal term
  google.protobuf.StringValue deal_term_id = 1;
  // Type of deal term
  DealTermType term_type = 2;
  // Status of deal term
  DealTermStatus status = 3;
  // Target number of stores to activate (moved from MxBonusTerms)
  google.protobuf.Int32Value total_stores_target = 4;
  // Total signing bonus amount (moved from MxBonusTerms)
  google.protobuf.Int32Value signing_bonus = 5;
  // Amount per new store expansion (moved from MxBonusTerms)
  google.protobuf.Int32Value new_store_expansion_amount = 6;
  // Payment schedule (moved from MxBonusTerms)
  repeated InstallmentSchedule installment_schedule = 7;
  // Associated businesses (moved from MxBonusTerms)
  repeated BusinessDetail business_details = 8;
  // Whether this deal term depends on another deal term
  google.protobuf.StringValue depends_on_term_id = 9;
  // When this deal term was last evaluated
  google.protobuf.Timestamp last_evaluated_at = 10;
  // When this deal term was created
  google.protobuf.Timestamp created_at = 11;
  // When this deal term was last updated
  google.protobuf.Timestamp updated_at = 12;
}

// Contract details with core contract information
message ContractDetails {
  // Unique identifier from the source system
  google.protobuf.StringValue source_contract_id = 1;
  // Associated opportunity ID
  google.protobuf.StringValue opportunity_id = 2;
  // Contract start date in YYYY-MM-DD format
  google.protobuf.StringValue contract_start_date = 3;
  // Contract end date in YYYY-MM-DD format
  google.protobuf.StringValue contract_end_date = 4;
  // All active deal terms associated with this contract
  repeated DealTerm deal_terms = 5;
  // User who created this contract
  google.protobuf.StringValue created_by = 6;
  // User who last updated this contract
  google.protobuf.StringValue updated_by = 7;
}

// Error details
message Error {
  // Error code
  ErrorCode error_code = 1;
  // Detailed error message
  google.protobuf.StringValue error_details = 2;
}

// Contract result details
message ContractResult {
  // Internal contract UUID
  google.protobuf.StringValue ramp_uuid = 1;
  // SFDC contract ID
  google.protobuf.StringValue source_contract_id = 2;
  // Opportunity ID
  google.protobuf.StringValue opportunity_id = 3;
  // Contract status
  ContractStatus status = 4;
}

// Request to onboard a new contract or update an existing one
message OnboardContractRequest {
  // Source system identifier
  SourceSystem source = 3;
  // Contract type
  ContractType contract_type = 4;
  // Contract status
  ContractStatus contract_status = 5;
  // Description of the contract
  google.protobuf.StringValue contract_description = 6;
  // Whether this is a test contract
  google.protobuf.BoolValue is_test = 7;
  // Contract details containing all deal terms
  repeated ContractDetails contract_details = 8;
}

// Response to contract onboarding request
message OnboardContractResponse {
  // Result of the onboarding request
  oneof result {
    // Error details if request failed
    Error error = 1;
    // Contract details if request succeeded
    ContractResult contract = 2;
  }
}
