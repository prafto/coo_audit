syntax = "proto3";

option java_package = "com.doordash.rpc.inventory";
package inventory_service;

import "google/protobuf/timestamp.proto";
import "inventory_service/common.proto";
option java_generic_services = true;

service InventoryService {
  rpc UpdateInventoryQuantity (UpdateInventoryQuantityRequest) returns (UpdateInventoryQuantityResponse);
  rpc GetCurrentInventoryQuantity (GetInventoryQuantityRequest) returns (GetInventoryQuantityResponse);
  rpc TestItemDeactivation (TestItemDeactivationRequest) returns (TestItemDeactivationResponse);
  rpc VerifyUpdateInventoryQuantity (VerifyUpdateInventoryQuantityRequest) returns (VerifyUpdateInventoryQuantityResponse);
  rpc DisableCurrentInventoryQuantity (DisableCurrentInventoryQuantityRequest) returns (DisableCurrentInventoryQuantityResponse);
  rpc GetInventoryForStore (GetInventoryForStoreRequest) returns (GetInventoryForStoreResponse);
}

// Set of business logic errors
enum InventoryErrorCode {
  // Unspecified error
  INVENTORY_ERROR_CODE_UNSPECIFIED = 0;
  // Invalid quantity error
  INVENTORY_ERROR_CODE_INVALID_QUANTITY = 1;
  // Insufficient quantity error
  INVENTORY_ERROR_CODE_INSUFFICIENT_QUANTITY = 2;
  // Not found error
  INVENTORY_ERROR_CODE_NOT_FOUND = 3;
}

message InventoryErrorMessage {
  InventoryErrorCode code = 1;
  string message = 2;
}

message InventoryAdjustmentOperation {
  Entity entity = 1;
  float quantity = 2;
  InventoryOperation operation = 3;
}

message InventoryAdjustmentStatus {
  bool success = 1;
  Entity entity = 2;
  float difference = 3;
}

message InventoryBucket {
  Entity entity = 1;
  float quantity = 2;
  bool isSoldOut = 3;
  bool disabled = 4;
}

message UpdateInventoryQuantityRequest {
  repeated InventoryAdjustmentOperation actions = 1;
  google.protobuf.Timestamp scheduled_at = 2;
}

message UpdateInventoryQuantityResult {
  bool success = 1;
}

message UpdateInventoryQuantityResponse {
  bool success = 1;
  // return result or error
  oneof value {
    UpdateInventoryQuantityResult result = 2;
    InventoryErrorMessage error = 3;
  }
}

message GetInventoryQuantityRequest {
  Entity entity = 1;
}

message GetInventoryQuantityResult {
  InventoryBucket bucket = 1;
}

message GetInventoryQuantityResponse {
  Entity entity = 1;
  float quantity = 2;
  bool isSoldOut = 3;
  bool disabled = 4;
  // return result or error
  oneof value {
    GetInventoryQuantityResult result = 5;
    InventoryErrorMessage error = 6;
  }
}

message TestItemDeactivationRequest {
  string storeId = 1;
  string itemId = 2;
  google.protobuf.Timestamp endTime = 3;
  int64 userId = 4;
}

message TestItemDeactivationResponse {
  bool success = 1;
}

message VerifyUpdateInventoryQuantityRequest {
  repeated InventoryAdjustmentOperation actions = 1;
  google.protobuf.Timestamp scheduled_at = 2;
}

message VerifyUpdateInventoryQuantityResult {
  repeated InventoryAdjustmentStatus statuses = 1;
}

message VerifyUpdateInventoryQuantityResponse {
  repeated InventoryAdjustmentStatus statuses = 1;

  // return result or error
  oneof value {
    VerifyUpdateInventoryQuantityResult result = 2;
    InventoryErrorMessage error = 3;
  }
}

message DisableCurrentInventoryQuantityRequest {
  Entity entity = 1;
}

message DisableCurrentInventoryQuantityResult {
  Entity entity = 1;
  bool disabled = 2;
}

message DisableCurrentInventoryQuantityResponse {
  Entity entity = 1;
  bool disabled = 2;

  // return result or error
  oneof value {
    DisableCurrentInventoryQuantityResult result = 3;
    InventoryErrorMessage error = 4;
  }
}

message GetInventoryForStoreRequest {
  string storeId = 1;
  google.protobuf.Timestamp scheduled_at = 2;
}

message GetInventoryForStoreResponse {
  // return result or error
  oneof value {
    GetInventoryForStoreResult result = 1;
    InventoryErrorMessage error = 2;
  }
}

message GetInventoryForStoreResult {
  repeated InventoryBucket buckets = 1;
}
