syntax = "proto3";

option java_package = "com.doordash.rpc.inventory";
package inventory_service;

import "google/protobuf/timestamp.proto";
import "inventory_service/common.proto";
option java_generic_services = true;

// All endpoints relate to premium order pacing
service OrderPacingService {
  rpc SetPacingScheduleSource (SetPacingScheduleSourceRequest) returns (SetPacingScheduleSourceResponse);
  rpc SyncPacingSchedule (SyncPacingScheduleRequest) returns (SyncPacingScheduleResponse);
  rpc OverridePacingSchedule (OverridePacingScheduleRequest) returns (OverridePacingScheduleResponse);
  rpc GetAvailablePacingSlots (GetAvailablePacingSlotsRequest) returns (GetAvailablePacingSlotsResponse);
  rpc BookPacingSlot (BookPacingSlotRequest) returns (BookPacingSlotResponse);
  rpc ReleasePacingSlot (ReleasePacingSlotRequest) returns (ReleasePacingSlotResponse);
}

// Set of business logic errors
enum OrderPacingErrorCode {
  // Unspecified error
  ORDER_PACING_ERROR_CODE_UNSPECIFIED = 0;
  // Schedule source already existed
  ORDER_PACING_ERROR_CODE_SCHEDULE_SOURCE_ALREADY_EXISTED = 1;
  // Unsupported incremented end_seconds
  ORDER_PACING_ERROR_CODE_UNSUPPORTED_INCREMENT_SECONDS = 2;
  // Order time slot already full
  ORDER_PACING_ERROR_CODE_SLOT_ALREADY_FULL = 3;
  // Order already existed
  ORDER_PACING_ERROR_CODE_ORDER_ALREADY_EXISTED = 4;
  // Order does not exist
  ORDER_PACING_ERROR_CODE_ORDER_NOT_EXISTED = 5; 
  // Invalid request Input
  ORDER_PACING_ERROR_CODE_INVALID_REQUEST = 6;
}

message OrderPacingErrorMessage {
  OrderPacingErrorCode code = 1;
  string message = 2;
}

message OrderPacingSlot {
  int32 start_second = 1;
  int32 end_second = 2;
  int32 pacing_cap_per_increment_seconds = 3;
}

message SetPacingScheduleSourceRequest {
  int32 store_id = 1;
  int32 day_of_week = 2;
  repeated OrderPacingSlot order_caps = 3;
  int32 increment_seconds = 4;
}

message SetPacingScheduleSourceResponse {
  bool success = 1;
  OrderPacingErrorMessage error = 2;
}

message SyncPacingScheduleRequest {
  int32 store_id = 1;
  int32 start_date = 2;
  int32 end_date = 3;
}

message SyncPacingScheduleResponse {
  bool success = 1;
  OrderPacingErrorMessage error = 2;
} 

message OverridePacingScheduleRequest {
  int32 store_id = 1;
  int32 calendar_date = 2;
  repeated OrderPacingSlot override_order_caps = 3;
} 

message OverridePacingScheduleResponse {
  bool success = 1;
  OrderPacingErrorMessage error = 2;
}

message GetAvailablePacingSlotsRequest {
  int32 store_id = 1;
  google.protobuf.Timestamp order_time = 2;
}

message GetAvailablePacingSlotsResponse {
  int32 store_id = 1;
  repeated TimeInterval available_pacing_slots = 2;
}

message BookPacingSlotRequest {
  int32 store_id = 1;
  string order_uuid = 2;
  google.protobuf.Timestamp booked_slot_start_time = 3;
}

message BookPacingSlotResponse {
  bool success = 1;
  int32 number_of_slot_booked = 2;
  OrderPacingErrorMessage error = 3;
}

message ReleasePacingSlotRequest {
  int32 store_id = 1;
  string order_uuid = 2;
}

message ReleasePacingSlotResponse {
  bool success = 1;
  int32 number_of_slot_released = 2;
  OrderPacingErrorMessage error = 3;
}