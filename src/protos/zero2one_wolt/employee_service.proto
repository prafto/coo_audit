syntax = "proto3";

package zero2one_wolt.v1beta1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "zero2one_common/employee.proto";

option go_package = "github.com/doordash/services-protobuf/generated/zero2one_wolt";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.zero2one_wolt";

// Error message to be one of the option to be returned in the responses
message Error {
  // Code of the error
  string error_code = 1;
  // Reason for the error
  string reason = 2;
  // Details of the error
  string details = 3;
}

// Filter list employees results
message ListEmployeesFilter {
  // Include deactivated employees in the response
  google.protobuf.BoolValue include_deactivated = 1;
  // Include ghost employees in the response
  google.protobuf.BoolValue include_ghost = 2;
}

// Request to get all employees' details for the store
message ListEmployeesRequest {
  // Store id
  string store_id = 1;
  // employees filtering options
  ListEmployeesFilter filter = 2;
}

// Response with all employees' details for the store
message ListEmployeesResponse {
  // List of employee details
  repeated zero2one_common.v1.EmployeesDetails employees = 1;
}

// Create or update an employee
message UpsertEmployeeRequest {
  // if passed, will try to find and update existing employee
  string employee_id = 1;
  // Store id (required)
  string store_id = 2;
  // Employee given (first) name
  string given_name = 3;
  // Employee family (last) name
  string family_name = 4;
  // Employee PIN for accessing POS
  string pin = 5;
  // Employee role
  zero2one_common.v1.EmployeeRole role = 6;
  // Employee Role id
  string role_id = 7;
  // Whether this employee is a ghost employee (does not show up in reports, and list of employees)
  google.protobuf.BoolValue is_ghost = 8;
}

// Response to create or update an Employee
message UpsertEmployeeResponse {
  // UUID of employee created or updated
  string employee_id = 1 [deprecated = true];
  // Result of the upsert is either success or error
  oneof result_or_error {
    // UUID of employee created or updated
    string result_employee_id = 2;
    // Error if the operation failed
    Error error = 3;
  }
}

// Request to delete employee profile (if exists)
message DeleteEmployeeRequest {
  // UUID of employee to delete
  string employee_id = 1;
}

// Response to delete employee profile (if exists)
message DeleteEmployeeResponse {}

// Request to create or update an employee shift
message UpsertShiftRequest {
  // Shift UUID (required)
  string shift_id = 1;
  // Employee UUID (required)
  string employee_id = 2;
  // Store id (required)
  string store_id = 3;
  // Shift start time (required)
  google.protobuf.Timestamp start_time = 4;
  // Shift end time
  google.protobuf.Timestamp end_time = 5;
}

// Response to create or update an employee shift
message UpsertShiftResponse {}

// Request to create or update an employee break
message UpsertBreakRequest {
  // Break UUID (required)
  string break_id = 1;
  // Shift UUID (required)
  string shift_id = 2;
  // Store id (required)
  string store_id = 3;
  // Break start time (required)
  google.protobuf.Timestamp start_time = 4;
  // Break end time
  google.protobuf.Timestamp end_time = 5;
  // Employee UUID (required)
  string employee_id = 6;
}

// Response to create or update employee Break
message UpsertBreakResponse {}

// Request to get current shifts and breaks
message GetCurrentShiftsAndBreaksRequest {
  // Store id (required)
  string store_id = 1;
}

// Response to get current shifts and breaks
message GetCurrentShiftsAndBreaksResponse {
  // List of current active shifts
  repeated zero2one_common.v1.PosShift shifts = 1;
  // List of current active breaks
  repeated zero2one_common.v1.PosBreak breaks = 2;
}

// Request to get store employee work reports
message GetEmployeeWorkReportsRequest {
  // Store id (required)
  string store_id = 1;
  // Start time (required)
  google.protobuf.Timestamp start_time = 2;
  // End time (required)
  google.protobuf.Timestamp end_time = 3;
}

// Request to generate a passcode for a store
message GeneratePasscodeRequest {
  // Store for which to generate the passcode
  string store_id = 1;
}

// Response to generate a passcode for a store
message GeneratePasscodeResponse {
  // Generated passcode
  string passcode = 1;
}

// Response to store employees work report
message GetEmployeeWorkReportsResponse {
  // List of employee work reports (overall for the selected time period)
  repeated zero2one_common.v1.EmployeeWorkReport employee_work_reports = 1;
  // List of employee work reports (by day, for the selected time period)
  repeated zero2one_common.v1.EmployeeWorkReport employee_work_reports_daily = 2;
  // Work report for shifts during time range
  repeated zero2one_common.v1.ShiftWorkReport shifts = 3;
  // Work report for breaks during time range
  repeated zero2one_common.v1.BreakWorkReport breaks = 4;
}

// Employee management API
service EmployeeService {
  // Get all employees' details for the store
  rpc ListEmployees(ListEmployeesRequest) returns (ListEmployeesResponse);
  // Create or update employee profile
  rpc UpsertEmployee(UpsertEmployeeRequest) returns (UpsertEmployeeResponse);
  // Delete employee profile (if exists)
  rpc DeleteEmployee(DeleteEmployeeRequest) returns (DeleteEmployeeResponse);
  // Create update employee shift
  rpc UpsertShift(UpsertShiftRequest) returns (UpsertShiftResponse);
  // Create or update employee break
  rpc UpsertBreak(UpsertBreakRequest) returns (UpsertBreakResponse);
  // Get current shifts and breaks
  rpc GetCurrentShiftsAndBreaks(GetCurrentShiftsAndBreaksRequest) returns (GetCurrentShiftsAndBreaksResponse);
  // Get current shifts and breaks
  rpc GetEmployeeWorkReports(GetEmployeeWorkReportsRequest) returns (GetEmployeeWorkReportsResponse);
  // Generate a new shared passcode for a store
  rpc GeneratePasscode(GeneratePasscodeRequest) returns (GeneratePasscodeResponse);
}
