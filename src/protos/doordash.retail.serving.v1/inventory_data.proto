syntax = "proto3";

// buf:lint:ignore DIRECTORY_SAME_PACKAGE
package doordash.retail.serving.v1;

import "common/common.proto";
import "common/inventory.proto";
import "common/marketplace_purchase.proto";
import "common/money.proto";
import "common/restriction_rules.proto";
import "doordash.retail.serving.v1/common.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option go_package = "github.com/doordash/services-protobuf/generated/doordash/retail/serving/v1";
option java_generic_services = true;
option java_multiple_files = true;

// Inventory Data
message InventoryData {
  // availability info
  AvailabilityInfo availability_info = 1;
  // price-related info
  common.marketplace_purchase.v1.ItemPurchaseInfo purchase_info = 2;
  // location info
  LocationInfo location_info = 3;
  // visibility info
  Visibility visibility = 4;
  // item fees
  repeated money.ItemFee item_fees = 5;
  // last updated at
  google.protobuf.Timestamp last_updated_at = 6;
  // dynamic properties
  repeated DynamicProperty dynamic_properties = 7;
  // backwards compatibility fields
  BackwardsCompatibilityFields backwards_compatibility_fields = 8;
  // item restriction type
  common.restriction_rules.v1.RestrictedItemType restriction_type = 9;
  // item promotion info
  repeated common.inventory.v1.ItemPromotionInfo item_promotions = 10;
  // item supported vehicle types
  repeated VehicleType supported_vehicle_types = 11;
  // item restrictions e.g. Health + High
  repeated common.restriction_rules.v1.RestrictedTypeWLevel applied_restrictions = 12;
}

// Vehicle Type
enum VehicleType {
  // Unspecified
  VEHICLE_TYPE_UNSPECIFIED = 0;
  // Car
  VEHICLE_TYPE_CAR = 1;
  // Scooter
  VEHICLE_TYPE_SCOOTER = 2;
  // Bicycle
  VEHICLE_TYPE_BICYCLE = 3;
  // Motorcycle
  VEHICLE_TYPE_MOTORCYCLE = 4;
  // Walking
  VEHICLE_TYPE_WALKING = 5;
  // PMD
  VEHICLE_TYPE_PMD = 6;
  // Robot
  VEHICLE_TYPE_ROBOT = 8;
  // Ebike
  VEHICLE_TYPE_EBIKE = 10;
  // Pizza Bicycle
  VEHICLE_TYPE_PIZZA_BICYCLE = 11;
  // Zippy Scooter
  VEHICLE_TYPE_ZIPPY_SCOOTER = 12;
  // Kiwi Bot
  VEHICLE_TYPE_KIWI_BOT = 13;
  // Adv
  VEHICLE_TYPE_ADV = 14;
}

// location info
message LocationInfo {
  // aisle
  google.protobuf.StringValue aisle = 1;
  // rack
  google.protobuf.StringValue rack = 2;
}

// availability info
message AvailabilityInfo {
  // is active
  bool is_active = 1;
  // stock level info
  repeated StockLevelInfo stock_level_info = 2;
  // quantity in stock
  google.protobuf.Int64Value quantity_in_stock = 3;
}

// stock level info
message StockLevelInfo {
  // stock level
  StockLevel stock_level = 1;
  // stock level source
  StockLevelSource source = 2;
  // experiment
  google.protobuf.StringValue experiment = 3;
  // expire at
  google.protobuf.Timestamp expire_at = 4;
  // model id
  google.protobuf.StringValue model_id = 5;
  // model scoring
  google.protobuf.StringValue score = 6;
  // To support different badges through the day we need
  // start_at and expire_at timestamp to decide the
  // relevant badge at the given time
  google.protobuf.Timestamp start_at = 7;
}

// stock level source
enum StockLevelSource {
  // unspecified
  STOCK_LEVEL_SOURCE_UNSPECIFIED = 0;
  // oos classifier
  STOCK_LEVEL_SOURCE_OOS_CLASSIFIER = 1;
  // dasher informed
  STOCK_LEVEL_SOURCE_DASHER_INFORMED = 2;
  // merchant informed
  STOCK_LEVEL_SOURCE_MERCHANT_INFORMED = 3;
}

// stock level
enum StockLevel {
  // unspecified
  STOCK_LEVEL_UNSPECIFIED = 0;
  // in stock
  STOCK_LEVEL_IN_STOCK = 1;
  // low stock
  STOCK_LEVEL_LOW_STOCK = 2;
  // The item is high in stock
  STOCK_LEVEL_HIGH_STOCK = 3;
  // The item is out of stock
  STOCK_LEVEL_OUT_OF_STOCK = 4;
  // The item is restocking soon
  STOCK_LEVEL_RESTOCKING_SOON = 5;
}

// visibility hours
message VisibilityHours {
  // start date
  google.protobuf.Int64Value start_date = 1;
  // end date
  google.protobuf.Int64Value end_date = 2;
  // hours
  repeated Hours hours = 3;
}

// hours
message Hours {
  // days bit array
  repeated bool days_bit_array = 1;
  // start time
  google.protobuf.Int64Value start_time = 2;
  // end time
  google.protobuf.Int64Value end_time = 3;
}

// visibility
message Visibility {
  // visibility hours
  repeated VisibilityHours hours = 1;
}

// Backwards Compatibility Fields
message BackwardsCompatibilityFields {
  // legacy item description
  google.protobuf.StringValue legacy_item_description = 1;
  // menu ID
  google.protobuf.StringValue legacy_menu_id = 2;
  // restriction info - to be deprecated by restriction type soon
  RestrictionInfo restriction_info = 3;
  // has_required_extras `true` if the menu item has modifiers enable and have extra entities, `false` otherwise
  google.protobuf.BoolValue has_required_extras = 4;
}

// Identifies the type of a restricted menu item.
enum RestrictionType {
  // No restriction.
  RESTRICTION_TYPE_UNSPECIFIED = 0;
  // Item is alcohol
  RESTRICTION_TYPE_ALCOHOL = 1;
}

// restriction info
message RestrictionInfo {
  // restriction type
  RestrictionType restriction_type = 2;
  // restriction level
  common.AlcoholFoodConstraintItemLevel alcohol_food_constraint_item_level = 1;
}
