syntax = "proto3";
package growth.appbadging.v1;

import "common/service_client_config.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "growth/appbadging/event.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.growth.appbadging";

// Service definition of notification hub
service AppBadgingService {
  // Endpoint to generate consumer campaign mapping for all available campaigns
  rpc GenerateQualifiedCampaignsForConsumers(GenerateQualifiedCampaignsForConsumersRequest) returns (GenerateQualifiedCampaignsForConsumersResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 300000; // 5min
    option (service_client.client_method_config).retry_config.max_attempts = 1;
    option (service_client.client_method_config).retry_config.initial_wait_millis = 1000;
    option (service_client.client_method_config).circuit_breaker_config.failure_rate_threshold = 0.25;
  }
  // Endpoint to generate consumer campaign mapping for one campaign
  rpc GenerateQualifiedCampaign(GenerateQualifiedCampaignRequest) returns (GenerateQualifiedCampaignResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 900000; // 15min
    option (service_client.client_method_config).retry_config.max_attempts = 1;
    option (service_client.client_method_config).retry_config.initial_wait_millis = 1000;
    option (service_client.client_method_config).circuit_breaker_config.failure_rate_threshold = 0.25;
  }
  // Endpoint to send an app badging Kafka event with consumer_id and a list of campaign_id
  rpc SendAppBadgingEvent(SendAppBadgingEventRequest) returns (SendAppBadgingEventResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 5000;
    option (service_client.client_method_config).retry_config.max_attempts = 1;
    option (service_client.client_method_config).retry_config.initial_wait_millis = 1000;
    option (service_client.client_method_config).circuit_breaker_config.failure_rate_threshold = 0.25;
  }
  // Endpoint to send app badging Kafka event with consumer_id and a list of campaign_id
  rpc SendAppBadgingEvents(SendAppBadgingEventsRequest) returns (SendAppBadgingEventsResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 300000; // 5min
    option (service_client.client_method_config).retry_config.max_attempts = 1;
    option (service_client.client_method_config).retry_config.initial_wait_millis = 1000;
    option (service_client.client_method_config).circuit_breaker_config.failure_rate_threshold = 0.25;
  }
  // Endpoint to handle app badging Kafka event for testing purpose
  rpc HandleAppBadgingEvent(HandleAppBadgingEventRequest) returns (HandleAppBadgingEventResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 5000;
    option (service_client.client_method_config).retry_config.max_attempts = 1;
    option (service_client.client_method_config).retry_config.initial_wait_millis = 1000;
    option (service_client.client_method_config).circuit_breaker_config.failure_rate_threshold = 0.25;
  }
}

// Request used by scheduler cronjob to generate consumer campaign mapping snowflake table
message GenerateQualifiedCampaignsForConsumersRequest {
  // the time to generate the consumer campaign mapping, usually current time
  google.protobuf.Timestamp generated_at = 1;
}

// Response used by scheduler cronjob to generate consumer campaign mapping snowflake table
message GenerateQualifiedCampaignsForConsumersResponse {
  // number of records generated on consumer campaign mapping table
  google.protobuf.Int64Value num_of_generated = 1;
}

// Request used to manually generate consumer campaign mapping snowflake table for a single campaign
message GenerateQualifiedCampaignRequest {
  // consumer campaign mapping table name
  google.protobuf.StringValue table_name = 1;
  // the campaign that is used for querying consumers who are qualified for
  google.protobuf.StringValue campaign_id = 2;
  // the time to generate the consumer campaign mapping, usually current time
  google.protobuf.Timestamp generated_at = 3;
}

// Response used to manually generate consumer campaign mapping snowflake table for a single campaign
message GenerateQualifiedCampaignResponse {
  // number of records generated on consumer campaign mapping table
  google.protobuf.Int64Value num_of_generated = 1;
}

// Request to send the app badging event for a given consumer
message SendAppBadgingEventRequest {
  // consumer_id who will receive app badging
  google.protobuf.StringValue consumer_id = 1;
  // List of unique ids of campaign
  repeated google.protobuf.StringValue campaign_ids = 2;
}

// Response to send the app badging event for a given consumer
message SendAppBadgingEventResponse {}

// Request used by scheduler cronjob to send the app badging event from the mapping table on snowflake
message SendAppBadgingEventsRequest {
  // the time of the mapping table on snowflake (xx_mapping_2023_09_02 e.g) in which the cx of events are
  google.protobuf.Timestamp generated_at = 1;
}

// Response used by scheduler cronjob to send the app badging event from the mapping table on snowflake
message SendAppBadgingEventsResponse {}

// Request to handle app badging event for testing purpose
message HandleAppBadgingEventRequest {
  // the app badging event to be handled
  AppBadgingEvent app_badging_event = 1;
  // the timestamp of the handling happens
  google.protobuf.Timestamp handled_at = 2;
}

// Response to handle app badging event for testing purpose
message HandleAppBadgingEventResponse {}
