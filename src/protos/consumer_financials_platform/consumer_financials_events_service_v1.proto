syntax = "proto3";
// buf:lint:ignore DIRECTORY_SAME_PACKAGE
package doordash.consumer_financials_platform.event.v1;

import "common/common.proto";
import "common/money.proto";
import "consumer_financials_platform/event_v1.proto";
import "data_classification.v1/data_classification.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "payin/common_v1.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.consumer_financials_platform.event.v1";

// Consumer Financials Events V1 Service
service ConsumerFinancialsEventsV1Service {
  // allow send of consumer financials events
  rpc SendKafkaConsumerFinancialsEvents(SendKafkaConsumerFinancialsEventsRequest) returns (SendKafkaConsumerFinancialsEventsResponse);

  // send dashcard dashpass subscription events during a particular time frame
  rpc SendDashCardDashPassSubscriptionCxFinancialsEvents(SendDashCardDashPassSubscriptionCxFinancialsEventsRequest) returns (SendDashCardDashPassSubscriptionCxFinancialsEventsResponse);
}

// Request for sendKafkaConsumerFinancialsEvents
message SendKafkaConsumerFinancialsEventsRequest {
  // List of event types with event ids to publish again via kafka
  repeated KafkaConsumerFinancialsEvent events = 1;
}

// Response for sendKafkaConsumerFinancialsEvents
message SendKafkaConsumerFinancialsEventsResponse {
  // List of event types with event ids that were successful/failed to publish again via kafka
  repeated KafkaConsumerFinancialsEventResult result = 1;
}

// Request for SendDashCardDashPassSubscriptionCxFinancialsEvents
message SendDashCardDashPassSubscriptionCxFinancialsEventsRequest {
  // Time period request
  TimePeriodRequest time_period_request = 1;
  // Plan Type whether trial or 10K
  DashCardDashPassSubscriptionPlanType dashcard_dashpass_subscription_plan_type = 2;
}

// Response for SendDashCardDashPassSubscriptionCxFinancialsEvents
message SendDashCardDashPassSubscriptionCxFinancialsEventsResponse {
  // Deprecated as it is not descriptive for our usecase
  repeated KafkaConsumerFinancialsEventResult result = 1 [deprecated = true];
  // Events that were successfully sent
  repeated DashCardDashPassDataResult successful_dashcard_dashpass_data_result = 2;
  // Events that failed to send
  repeated DashCardDashPassDataResult failed_dashcard_dashpass_data_result = 3;
}

// TimePeriodRequest which has start and end time
message TimePeriodRequest {
  // Start time from which we want to fetch records
  google.protobuf.Timestamp start_time = 1;
  // End time until which we want to fetch records
  google.protobuf.Timestamp end_time = 2;
}

// ConsumerIdAndSubscriptionPlanId
message DashCardDashPassDataResult {
  // Consumer Id
  google.protobuf.StringValue consumer_id = 1;
  // Subscription Plan Id
  google.protobuf.StringValue subscription_plan_id = 2;
}

// Type of DashCardDashPassSubscriptionPlan
enum DashCardDashPassSubscriptionPlanType {
  // Unspecified
  DASH_CARD_DASH_PASS_SUBSCRIPTION_PLAN_TYPE_UNSPECIFIED = 0;
  // Trial subscription plan (10002417, 10002435)
  DASH_CARD_DASH_PASS_SUBSCRIPTION_PLAN_TYPE_TRIAL = 1;
  // Trial subscription plan (10002487, 10002488)
  DASH_CARD_DASH_PASS_SUBSCRIPTION_PLAN_TYPE_10K = 2;
}
