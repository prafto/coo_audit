syntax = "proto3";
// buf:lint:ignore DIRECTORY_SAME_PACKAGE
package doordash.consumer_financials_platform.v1;

import "consumer_financials_platform/common.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "payin/payment_method_v1.proto";

option go_package = "consumer_financials_platform";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.consumer_financials_platform";

// Card Linking Service V1
service CardLinkingV1Service {
  // get payment methods is currently linked to the reward program and eligible payment method for card linking
  rpc GetPaymentMethods(GetPaymentMethodsRequest) returns (GetPaymentMethodsResponse);

  // updateCardLinking including link and unlink the card
  rpc UpdateCardLinking(UpdateCardLinkingRequest) returns (UpdateCardLinkingResponse);
}

// request to get payment methods for the program
message GetPaymentMethodsRequest {
  // entity details, include entity_id and entity type
  EntityInfo entity = 1;
  // reward program associated with card linking
  RewardProgram reward_program = 2;
}

// response of create dashpass card
message GetPaymentMethodsResponse {
  // CardLinkingPaymentMethod list
  repeated CardLinkingPaymentMethod card_linking_payment_methods = 1;
}

// CardLinkingPaymentMethod
message CardLinkingPaymentMethod {
  // Card holder payment method ID
  google.protobuf.StringValue payment_method_id = 1;
  // Payment Method type, e.g. Venmo, PayPal or Card. Model from payin/payment_method_v1
  doordash.payin.payment_method.v1.PaymentMethodType payment_method_type = 2;
  // details about the card. Model from payin/payment_method_v1
  doordash.payin.payment_method.v1.Card card = 3;
  // Card Linking Provider
  CardLinkingProvider card_linking_provider = 4;
  // card linking status
  CardLinkingStatus card_linking_status = 5;
  // (Optional) card linking error. If the card linking failed for the payment method, return the failure reason
  CardLinkingError card_linking_error = 6;
}

// card linking supported reward program
enum RewardProgram {
  // unspecified
  REWARD_PROGRAM_UNSPECIFIED = 0;
  // Going out
  REWARD_PROGRAM_GOING_OUT = 1;
}

// CardLinkingProvider
enum CardLinkingProvider {
  // unspecified
  CARD_LINKING_PROVIDER_UNSPECIFIED = 0;
  // fidel
  CARD_LINKING_PROVIDER_FIDEL = 1;
}

// CardLinkingStatus
enum CardLinkingStatus {
  // Unspecified
  CARD_LINKING_STATUS_UNSPECIFIED = 0;
  // actively linked
  CARD_LINKING_STATUS_LINKED = 1;
  // unlinked, including never linked and previously linked
  CARD_LINKING_STATUS_UNLINKED = 2;
  // failed to link due to network or BE errors, retriable
  CARD_LINKING_STATUS_FAILED = 3;
}

// CardLinkingError
enum CardLinkingError {
  // Unspecified
  CARD_LINKING_ERROR_UNSPECIFIED = 0;
  // failed to link card due to unsupported card
  CARD_LINKING_ERROR_UNSUPPORTED = 1;
  // failed to link card due to invalid card number
  CARD_LINKING_ERROR_INVALID = 2;
  // failed to link card due to card already linked
  CARD_LINKING_ERROR_CARD_ALREADY_LINKED = 3;
  // program not exist, not retriable
  CARD_LINKING_ERROR_CARD_PROGRAM_NOT_EXIST = 4;
  // unknown error, retriable
  CARD_LINKING_ERROR_UNKNOWN = 5;
}

// UpdateCardLinkingRequest
message UpdateCardLinkingRequest {
  // entity details, include entity_id and entity type
  EntityInfo entity = 1;
  // reward program associated with card linking
  RewardProgram reward_program = 2;
  // updates of card linking. cards with np updates could be passed in too. BE will filter out status that remains the same
  repeated CardLinkingDetail card_linking_details = 3;
}

// UpdateCardLinkingResponse
message UpdateCardLinkingResponse {
  // Payment methods requested for updates
  repeated CardLinkingPaymentMethod card_linking_details = 1;
}

// CardLinkingDetail
message CardLinkingDetail {
  // Card holder payment method ID
  google.protobuf.StringValue payment_method_id = 1;
  // link or unlink
  CardLinkingAction action = 2;
}

// CardLinkingAction
enum CardLinkingAction {
  // unspecified
  CARD_LINKING_ACTION_UNSPECIFIED = 0;
  // action link
  CARD_LINKING_ACTION_LINK = 1;
  // action unlink
  CARD_LINKING_ACTION_UNLINK = 2;
}

// entity applying for financial service
message EntityInfo {
  // entity type
  common.v1.EntityType entity_type = 1;
  // entity id, cx id in this case
  google.protobuf.StringValue entity_id = 2;
  // (Optional) entity id that is shared with the external partner in metadata to identify a user.
  google.protobuf.StringValue custom_entity_id = 3;
}
