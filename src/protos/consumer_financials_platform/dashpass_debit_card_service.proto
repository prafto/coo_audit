syntax = "proto3";
// buf:lint:ignore DIRECTORY_SAME_PACKAGE
package doordash.consumer_financials_platform.v1;

import "common/common.proto";
import "consumer_financials_platform/common.proto";
import "consumer_financials_platform/dashpass_debit_card.proto";
import "consumer_financials_platform/financial_vendor_service.proto";
import "consumer_financials_platform/kyc.proto";
import "doordash.api/annotations.proto";
import "google/api/annotations.proto";
import "google/protobuf/wrappers.proto";
import "lego.response/lego_response.proto";
import "payin/common_v1.proto";

option go_package = "consumer_financials_platform";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.consumer_financials_platform";

// dashpass debit card service
service DashPassCardV1Service {
  option (doordash.api.service) = {
    name: "dashpass-card-v1-grpc-service"
    url: "gifting-service-dashcard.service.prod.ddsd"
    port: 50051
    name_spaces: ["dashpass_card"]
    // api_key_name should follow a format similar to
    api_key_name: "CONSUMER_FINANCIALS_SERVICE_API_KEY"
    owner: {
      id: "cx-financials-alert-monitoring"
      name: "opex-cx-financials-platform"
      slack_channel: "#ask-cx-financials-platform"
      email_alias: "eng-cx-financials@doordash.com"
    }
    target_products: [CX]
  };
  // CreateDashPassCard
  rpc CreateDashPassCard(CreateDashPassCardRequest) returns (CreateDashPassCardResponse) {
    option (google.api.http) = {post: "/dashpass_card/v1/create"};

    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [CX_USER]
      target_products: [CX]
    };

    option (doordash.api.inject_headers) = {
      inject: [
        {field: "platform"},
        {field: "is_employee"},
        {field: "cx_id"},
        {field: "cx_geo_submarket_id"}]
    };
    option (doordash.api.forward_headers) = {
      forward: [
        {field: "dd_device_id"},
        {field: "DD-GEO-INFO"}]
    };
  }

  // CreateKnowYourCustomer
  rpc CreateKnowYourCustomer(CreateKnowYourCustomerRequest) returns (CreateKnowYourCustomerResponse) {
    option (google.api.http) = {post: "/dashpass_card/v1/kyc"};

    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [
        CX_USER,
        CX_GUEST,
        CX_LITE_GUEST
      ]
      target_products: [CX]
    };

    option (doordash.api.inject_headers) = {
      inject: [
        {field: "platform"},
        {field: "is_guest"},
        {field: "is_employee"},
        {field: "cx_id"},
        {field: "cx_geo_submarket_id"}]
    };
    option (doordash.api.forward_headers) = {
      forward: [
        {field: "dd_device_id"},
        {field: "DD-GEO-INFO"}]
    };
  }

  // GetKnowYourCustomerResult
  rpc GetKnowYourCustomerResult(GetKnowYourCustomerResultRequest) returns (GetKnowYourCustomerResultResponse) {
    option (google.api.http) = {get: "/dashpass_card/v1/kyc/status"};

    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [
        CX_USER,
        CX_GUEST,
        CX_LITE_GUEST
      ]
      target_products: [CX]
    };

    option (doordash.api.inject_headers) = {
      inject: [
        {field: "platform"},
        {field: "is_guest"},
        {field: "is_employee"},
        {field: "cx_id"},
        {field: "cx_geo_submarket_id"}]
    };
    option (doordash.api.forward_headers) = {
      forward: [
        {field: "dd_device_id"},
        {field: "DD-GEO-INFO"}]
    };
  }

  // GetLandingPageFeed for the cx id, determined by the account status of the cx's dashpass card
  rpc GetDashPassCardLandingPageFeed(GetDashPassCardLandingPageFeedRequest) returns (GetDashPassCardLandingPageFeedResponse) {
    option (google.api.http) = {get: "/dashpass_card/v1/landing_page_feed"};

    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [
        CX_USER,
        CX_GUEST,
        CX_LITE_GUEST
      ]
      target_products: [CX]
    };

    option (doordash.api.inject_headers) = {
      inject: [
        {field: "platform"},
        {field: "is_guest"},
        {field: "is_employee"},
        {field: "cx_id"},
        {field: "cx_geo_submarket_id"}]
    };
    option (doordash.api.forward_headers) = {
      forward: [
        {field: "dd_device_id"},
        {field: "DD-GEO-INFO"}]
    };
  }

  // GetDashPassCardAccountStatus fetches the account status of the dashpass card for the cx id
  rpc GetDashPassCardAccountStatus(GetDashPassCardAccountStatusRequest) returns (GetDashPassCardAccountStatusResponse) {
    option (google.api.http) = {get: "/dashpass_card/v1/account_status"};

    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [
        CX_USER,
        CX_GUEST,
        CX_LITE_GUEST
      ]
      target_products: [CX]
    };

    option (doordash.api.inject_headers) = {
      inject: [
        {field: "platform"},
        {field: "is_guest"},
        {field: "is_employee"},
        {field: "cx_id"},
        {field: "cx_geo_submarket_id"}]
    };
    option (doordash.api.forward_headers) = {
      forward: [
        {field: "dd_device_id"},
        {field: "DD-GEO-INFO"}]
    };
  }
}

// GetDashPassCardLandingPageFeedRequest
message GetDashPassCardLandingPageFeedRequest {
  // consumer id for the cx
  string consumer_id = 1 [(doordash.api.inject_id) = CX_ID];
}

// GetDashPassCardLandingPageFeedResponse
message GetDashPassCardLandingPageFeedResponse {
  // lego page response for the landing page
  lego.response.v1.LegoPageResponse lego_page_response = 1;
}

// GetDashPassCardAccountStatusRequest
message GetDashPassCardAccountStatusRequest {
  // consumer id for the cx
  string consumer_id = 1 [(doordash.api.inject_id) = CX_ID];
}

// GetDashPassCardAccountStatusResponse
message GetDashPassCardAccountStatusResponse {
  // account status of the dashpass card
  DashPassCardAccountStatus account_status = 1;
}

// request to apply for a dashpass debit card
message CreateDashPassCardRequest {
  // (will not be used) entity applies for the card
  common.v1.EntityType entity = 1 [deprecated = true];
  // what type of dashpass card product it is
  ProductLine product_line = 2;
  // only for decoupled debit card, provide payment account that will be linked to the card
  LinkedPaymentInfo linked_payment_info = 3;
  // kyc transaction_id
  google.protobuf.StringValue kyc_transaction_id = 4;
  // entity applies for the card
  Entity applicant_entity = 5;
}

// entity applying for card
message Entity {
  // entity type
  common.v1.EntityType entity_type = 1;
  // entity id
  google.protobuf.StringValue entity_id = 2;
}

// CreateKnowYourCustomerRequest
message CreateKnowYourCustomerRequest {
  // first name of cx we're running kyc on
  google.protobuf.StringValue first_name = 1;
  // last name of cx we're running kyc on
  google.protobuf.StringValue last_name = 2;
  // Shipping address of the cx
  .common.CommonAddress shipping_address = 3;
  // phone number of cx we're running kyc on
  google.protobuf.StringValue phone_number = 4;
  // email of cx we're running kyc on
  google.protobuf.StringValue email = 5;
  // country where cx is applying from
  google.protobuf.StringValue user_country = 6;
  // entity applying for the card
  Entity entity = 7;
}

// CreateKnowYourCustomerResponse
message CreateKnowYourCustomerResponse {
  // boolean of whether the request was successful
  google.protobuf.BoolValue success = 1;
  // kyc transaction id
  google.protobuf.StringValue transaction_id = 2;
}

// GetKnowYourCustomerResultRequest
message GetKnowYourCustomerResultRequest {
  // kyc transaction id
  google.protobuf.StringValue transaction_id = 1;
}

// GetKnowYourCustomerResultResponse
message GetKnowYourCustomerResultResponse {
  // kyc result
  KycResult kyc_result = 1;
}

// product line for the debit card
enum ProductLine {
  // unspecified
  PRODUCT_LINE_UNSPECIFIED = 0;
  // decoupled debit card
  PRODUCT_LINE_DECOUPLED_DEBIT = 1;
}

// linked payment method's provider
enum PaymentProviderType {
  // unspecified
  PAYMENT_PROVIDER_TYPE_UNSPECIFIED = 0;
  // FISERV pay by bank
  PAYMENT_PROVIDER_TYPE_FISERV_PAY_BY_BANK = 1;
}

// info of linked payment method that will be used as fund source for decoupled debit card
message LinkedPaymentInfo {
  // DD payment method id
  google.protobuf.StringValue payment_method_id = 1;
  // linked payment method's provider
  PaymentProviderType payment_provider_type = 2;
}

//response of create dashpass card
message CreateDashPassCardResponse {
  // success
  google.protobuf.BoolValue success = 1;
  // error details, optional
  ErrorDetails error_details = 2;
}

// error details
message ErrorDetails {
  // error code
  google.protobuf.StringValue error_code = 1;
  // cx facing error details
  google.protobuf.StringValue error_details = 2;
}
