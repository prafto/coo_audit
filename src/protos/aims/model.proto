syntax = "proto3";

package aims.v1;

import "google/protobuf/timestamp.proto";

option go_package = "github.com/doordash/services-protobuf/generated/aims/api/v1";

// Represents the environment in which the model is trained
enum ModelTrainingEnvironment {
  // Unspecified model training environment
  MODEL_TRAINING_ENVIRONMENT_UNSPECIFIED = 0;
  // Databricks training environment
  MODEL_TRAINING_ENVIRONMENT_DBR = 1;
  // Feast training environment
  MODEL_TRAINING_ENVIRONMENT_FW = 2;
}

// Represents the bucket in which the model is stored
enum ModelBucket {
  // Unspecified model bucket
  MODEL_BUCKET_UNSPECIFIED = 0;
  // Model bucket for adhoc models
  MODEL_BUCKET_ADHOC = 1;
  // Model bucket for production models
  MODEL_BUCKET_PROD = 2;
  // Model bucket for argil models
  MODEL_BUCKET_ARGIL = 3;
}

// Represents a feature dependency in the model
message FeatureDependency {
  // Name of the feature
  string feature_name = 1;
  // Data type of the feature
  string feature_type = 2;
  // Description of how this feature is used
  string description = 3;
}

// Represents join key configuration for data merging
message JoinKey {
  // Name of the join key field
  string key_name = 1;
  // Name of the source table containing the key
  string source_table = 2;
  // Name of the target table to join with
  string target_table = 3;
}

// Configuration for splitting data into train/test/eval sets
message DataSplitConfig {
  // Ratio of data to use for training (0-1)
  double train_ratio = 1;
  // Ratio of data to use for testing (0-1)
  double test_ratio = 2;
  // Ratio of data to use for evaluation (0-1)
  double eval_ratio = 3;
  // Strategy used to split the data (e.g. random, time-based)
  string split_strategy = 4;
  // Key-value pairs of filter conditions to apply before splitting
  map<string, string> filter_conditions = 5;
}

// Model hyperparameters configuration
message Hyperparameters {
  // Key-value pairs of hyperparameter names and values
  map<string, string> params = 1;
}

// Configuration for a training metric to track
message TrainingMetric {
  // Name of the metric
  string metric_name = 1;
  // Type of metric (e.g. accuracy, loss, etc)
  string metric_type = 2;
  // Whether this is the primary metric for optimization
  bool primary = 3;
}

// External dependency required by the model
message ModelDependency {
  // Name of the required package
  string package_name = 1;
  // Version of the required package
  string version = 2;
  // Whether this dependency is required or optional
  bool required = 3;
}

// Configuration for the training environment
message TrainingEnvironment {
  // Docker image to use for training
  string docker_image = 1;
  // Environment variables to set in the training container
  map<string, string> env_variables = 2;
  // List of resource requirements (CPU, memory, etc)
  repeated string resource_requirements = 3;
  // Training environment
  ModelTrainingEnvironment training_environment = 4;
}

// Represents the type of the model
enum ModelType {
  // Unspecified model type
  MODEL_TYPE_UNSPECIFIED = 0;
  // Classification model
  MODEL_TYPE_CLASSIFICATION = 1;
  // Regression model
  MODEL_TYPE_REGRESSION = 2;
}

// Represents the architecture of the model
enum ModelArchitecture {
  // Unspecified model architecture
  MODEL_ARCHITECTURE_UNSPECIFIED = 0;
  // Neural network architecture
  MODEL_ARCHITECTURE_NEURAL_NETWORK = 1;
  // Random forest architecture
  MODEL_ARCHITECTURE_RANDOM_FOREST = 2;
}

// Base model configuration message
message ModelConfig {
  // Name of the model
  string model_name = 1;
  // Name of the project this model belongs to
  string project_name = 2;
  // Name of the predictor service that will serve this model
  string predictor_name = 3;
  // Type of the model (e.g. classification, regression, etc)
  ModelType model_type = 4;
  // Architecture of the model (e.g. neural network, random forest, etc)
  ModelArchitecture model_architecture = 5;
  // Owner/DRI of the model
  string owner = 6;
  // Path for storing prediction logs
  string prediction_logging_path = 7;
  // Timestamp when the model config was created
  google.protobuf.Timestamp creation_time = 8;
  // Timestamp when the model config was last updated
  google.protobuf.Timestamp update_time = 9;
}

// Main model configuration message
message ModelVersionConfig {
  // Reference to the base model configuration
  ModelConfig model_config = 1;

  // Basic Information
  // Unique identifier for the model
  string model_id = 2;
  // Name of the model class implementation
  string model_class_name = 3;
  // Version identifier for the model
  int64 version = 4;
  // Detailed description of the model's purpose and functionality
  string description = 5;

  // Code and Location Information
  // Location of the model code repository/directory
  string model_code_location = 6;
  // Path to the training script within the code location
  string training_script_path = 7;

  // Features and Data Configuration
  // List of features required by the model
  repeated FeatureDependency feature_dependencies = 8;
  // Target variables/labels used for training
  repeated string labels = 9;
  // Keys used for joining different data sources
  repeated JoinKey join_keys = 10;
  // Configuration for splitting data into train/test/eval sets
  DataSplitConfig data_split_config = 11;

  // Training Configuration
  // Loss function used during model training
  string loss_function = 12;
  // Metrics to track during training
  repeated TrainingMetric training_metrics = 13;
  // Metrics to track during evaluation
  repeated TrainingMetric eval_metrics = 14;
  // Model hyperparameters configuration
  Hyperparameters hyperparameters = 15;

  // Environment and Dependencies
  // Configuration for the training environment
  TrainingEnvironment training_environment = 16;
  // External package dependencies required by the model
  repeated ModelDependency dependencies = 17;

  // Metadata
  // Team responsible for the model
  string team = 18;
  // Timestamp when the model config was created
  google.protobuf.Timestamp created_at = 19;
  // Timestamp when the model config was last updated
  google.protobuf.Timestamp last_updated = 20;
  // Custom key-value pairs for model metadata
  map<string, string> tags = 21;

  // Deployment Configuration
  // Indicates if this is the default/production model configuration
  bool is_production = 22;
  // Indicates if this model should run in shadow mode (for testing/validation)
  bool is_shadow = 23;
  // Timestamp when the model was deployed
  google.protobuf.Timestamp deployed_at = 24;
  // Timestamp when the model was undeployed
  google.protobuf.Timestamp reverted_at = 25;

  // Which bucket this model is stored in
  ModelBucket model_bucket = 26;

  // The s3 path where this model is stored in the bucket (without bucket e.g. toy_predictor/toy_model_1/toy_model_1.model)
  string model_path = 27;

  // Name of the experiment this predictor is part of
  string experiment_name = 28;
}

// RPC Request Messages

// Request message for getting a model by ID
message GetModelByIdRequest {
  // ID of the model to get
  string model_id = 1;
}

// Response message for GetModelById
message GetModelByIdResponse {
  // Model version config
  ModelVersionConfig model_version_config = 1;
}

// Request message for getting models by model class name
message GetModelsByModelClassNameRequest {
  // Name of the model class
  string model_class_name = 1;
}

// Response message for GetModelsByModelClassName
message GetModelsByModelClassNameResponse {
  // List of model version configs
  repeated ModelVersionConfig model_version_configs = 1;
}

// Request message for creating a new ModelVersionConfig
message CreateModelVersionConfigRequest {
  // The model version to create
  ModelVersionConfig model_version_config = 1;
}

// Response message for CreateModelVersionConfig
message CreateModelVersionConfigResponse {
  // ID of the created model version config
  string model_id = 1;
}

// Request message for getting the production model version ID
message GetProductionModelVersionIdRequest {
  // Name of the model
  string model_name = 1;
  // Name of the predictor service
  string predictor_name = 2;
  // Whether to get the latest model version ID or the production model version ID
  bool get_latest = 3;
}

// Response message for GetProductionModelVersionId
message GetProductionModelVersionIdResponse {
  // ID of the production model version
  string model_version_id = 1;
}

// Request message for getting the training job reference by model ID
message GetTrainingJobReferenceRequest {
  // ID of the model
  string model_id = 1;
}

// Response message for GetTrainingJobReference
message GetTrainingJobReferenceResponse {
  // Reference to the training job (e.g., Databricks job ID, MLflow run ID)
  string training_job_reference = 1;
  // Training environment where the job was run
  ModelTrainingEnvironment training_environment = 2;
  // Timestamp when the training job started
  google.protobuf.Timestamp training_start_time = 3;
  // Timestamp when the training job completed
  google.protobuf.Timestamp training_end_time = 4;
}

// Request message for getting active experiments by predictor name
message GetActiveExperimentsRequest {
  // Name of the predictor service
  string predictor_name = 1;
}

// Response message for GetActiveExperiments
message GetActiveExperimentsResponse {
  // Name of active experiment
  string experiment_name = 1;
}

// Request message for getting associated experiments by model ID
message GetAssociatedExperimentsRequest {
  // ID of the model
  string model_id = 1;
}

// Response message for GetAssociatedExperiments
message GetAssociatedExperimentsResponse {
  // List of associated experiment names
  repeated string experiment_names = 1;
}

// Request message for getting prediction events logging location by model ID
message GetPredictionEventsLoggingLocationRequest {
  // ID of the model
  string model_id = 1;
}

// Response message for GetPredictionEventsLoggingLocation
message GetPredictionEventsLoggingLocationResponse {
  // Path for storing prediction logs
  string prediction_logging_path = 1;
}
