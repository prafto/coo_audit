syntax = "proto3";

package aims.v1;

import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/doordash/services-protobuf/generated/aims/api/v1";

// Enum for event_type
enum EventType {
  // Unspecified event type.
  EVENT_TYPE_UNSPECIFIED = 0;
  // Predictor logging/shadow config event (predictor_name).
  EVENT_TYPE_PREDICTOR_LOGGING = 1;
  // Model Deployment event (predictor_name, model_id, model_version_id).
  EVENT_TYPE_DEPLOYMENT = 2;
  // Experiment Update event (model_id, model_version_id).
  EVENT_TYPE_EXPERIMENT_UPDATE = 3;
  // Source Upload event (source_name, feature_id, row_count).
  EVENT_TYPE_SOURCE_UPLOAD = 4;
}

// An entry in the event log.
message Event {
  // Predictor name of model.
  string predictor_name = 1;
  // Model Id.
  string model_id = 2;
  // Source Name of the feature.
  string source_name = 3;
  // Model Version Id.
  string model_version_id = 4;
  // JSON Payload of the Event (i.e. row_count for SOURCE_UPLOAD).
  google.protobuf.Struct payload = 5;
  // Event type
  EventType event_type = 6;
  // User/System who created the event.
  string user = 7;
}

// Feature metadata needed to create a new feature.
message Feature {
  // Name of the feature.
  string name = 1;
  // Source Name of the feature. FK to Source.name
  string source_name = 2;
  // Feature type
  string feature_type = 3;
  // Feature group
  string feature_group = 4;
  // Table Name / Location
  string table_name = 5;
  // Sink (Fabricator sink)
  string sink_name = 6;
  // Active status
  bool is_active = 7;
  // System tags
  string system_tags = 8;
  // User tags
  string user_tags = 9;
}

// Source entity - pertains to a feature soruce.
message Source {
  // Unique source name.
  string name = 1;
  // Update frequency of source
  string update_frequency = 2;
  // Code that generates the source
  string code_location = 3;
  // Owner of the source
  string owner = 4;
  // System tags
  string system_tags = 5;
  // User tags
  string user_tags = 6;
}

// Filter to be used for GetEvents related queries.
message EventFilter {
  // Name of the event.
  string name = 1;
  // Predictor name of model.
  string predictor_name = 2;
  // Model Id.
  string model_id = 3;
  // Source Name of the feature.
  string source_name = 4;
  // Model Version Id.
  string model_version_id = 5;
  // Event type
  EventType event_type = 6;
  // User
  string user = 7;
}

// Filter to be used for feature related queries.
message FeatureFilter {
  // Name of the feature.
  string name = 1;
  // Source Name of the feature.
  string source_name = 2;
  // Feature type
  string feature_type = 3;
  // Feature group
  string feature_group = 4;
  // Table Name / Location
  string table_name = 5;
  // Sink (Fabricator sink)
  string sink_name = 6;
  // Owner of feature -> source
  string owner = 7;
}

// Request for CreateEvent
message CreateEventRequest {
  // Event to be Createed.
  Event event = 1;
}

// Response for CreateEvent
message CreateEventResponse {
  // ID of the created event.
  string id = 1;
}

// Request for CreateSource
message CreateSourceRequest {
  // Source to be Createed.
  Source source = 1;
}

// Response for CreateSource
message CreateSourceResponse {
  // ID of the Createed source.
  string id = 1;
}

// Request for CreateFeature
message CreateFeatureRequest {
  // Feature to be Createed.
  Feature feature = 1;
}

// Response for CreateFeature
message CreateFeatureResponse {
  // ID of the Createed feature.
  string id = 1;
}

// Request for GetEvents
message GetEventsRequest {
  // Filter for events.
  EventFilter filter = 1;
}

// Response for GetEvents
message GetEventsResponse {
  // Events that match the filter.
  repeated Event events = 1;
}

// Request for GetFeatures
message GetFeaturesRequest {
  // Filter for features.
  FeatureFilter filter = 1;
}

// Response for GetFeatures
message GetFeaturesResponse {
  // Features that match the filter.
  repeated Feature features = 1;
}
