syntax = "proto3";

package aims.v1;

import "aims/feature.proto";
import "aims/model.proto";
import "common/service_client_config.proto";
import "doordash.api/annotations.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option go_package = "github.com/doordash/services-protobuf/generated/aims/api/v1";

// Service proto for AIMS
service AIMetadataService {
  // Timeout after 700 milliseconds.
  option (service_client.client_config).response_attempt_timeout_millis = 700;
  // Make a total 4 attempts (initial + three retries).
  option (service_client.client_config).retry_config.max_attempts = 4;
  // Add RESOURCE_EXHAUSTED to the set of retriable codes.
  option (service_client.client_config).retry_config.do_retry_grpc_code = 8;
  // Break the circuit if the error rate exceeds 80%.
  option (service_client.client_config).circuit_breaker_config.failure_rate_threshold = 0.8;
  // Ignore NOT_FOUND from circuit breaker error rate calculation.
  option (service_client.client_config).circuit_breaker_config.do_ignore_grpc_code = 5;

  // Get features by table name
  rpc GetFeaturesByTable(GetFeaturesBySourceTableRequest) returns (GetFeaturesByTableResponse);

  // Get feature metadata by feature name
  rpc GetFeatureByName(GetFeatureByNameRequest) returns (GetFeatureByNameResponse);

  // Get features by team or user owner
  rpc GetFeaturesByOwner(GetFeaturesByOwnerRequest) returns (GetFeaturesByOwnerResponse);

  // Get feature upload time for a specific date
  rpc GetFeatureUploadTime(GetFeatureUploadTimeRequest) returns (GetFeatureUploadTimeResponse);

  // Create a new feature node in the ai-metadata-store
  rpc CreateFeatureNode(CreateFeatureNodeRequest) returns (CreateFeatureNodeResponse);

  // Create a new feature source node in the ai-metadata-store
  rpc CreateFeatureSourceNode(CreateFeatureSourceNodeRequest) returns (CreateFeatureSourceNodeResponse);

  // Get a model by ID
  rpc GetModelById(GetModelByIdRequest) returns (GetModelByIdResponse);

  // Get models by model class name
  rpc GetModelsByModelClassName(GetModelsByModelClassNameRequest) returns (GetModelsByModelClassNameResponse);

  // Create a new model version config in the ai-metadata-store
  rpc CreateModelVersionConfig(CreateModelVersionConfigRequest) returns (CreateModelVersionConfigResponse);

  // Get the production model version ID for a given model name and predictor name
  rpc GetProductionModelVersionId(GetProductionModelVersionIdRequest) returns (GetProductionModelVersionIdResponse);

  // Get the training job reference for a given model ID
  rpc GetTrainingJobReference(GetTrainingJobReferenceRequest) returns (GetTrainingJobReferenceResponse);

  // Get all active experiments for a given predictor name
  rpc GetActiveExperiments(GetActiveExperimentsRequest) returns (GetActiveExperimentsResponse);

  // Get all associated experiments for a given model ID
  rpc GetAssociatedExperiments(GetAssociatedExperimentsRequest) returns (GetAssociatedExperimentsResponse);

  // Get the prediction events logging location for a given model ID
  rpc GetPredictionEventsLoggingLocation(GetPredictionEventsLoggingLocationRequest) returns (GetPredictionEventsLoggingLocationResponse);
}
