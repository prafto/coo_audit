syntax = "proto3";

package aims.v1;

import "google/protobuf/timestamp.proto";

option go_package = "github.com/doordash/services-protobuf/generated/aims/api/v1";

// FeatureTypes
enum FeatureType {
  // Default unspecified feature type
  FEATURE_TYPE_UNSPECIFIED = 0;
  // Numeric feature type (integers, floats)
  FEATURE_TYPE_FLOAT = 1;
  // Categorical feature type (strings, enums)
  FEATURE_TYPE_CATEGORICAL = 2;
  // Boolean feature type
  FEATURE_TYPE_INT = 3;
  // String feature type
  FEATURE_TYPE_STRING = 4;
  // Array/List feature type
  FEATURE_TYPE_INT_LIST = 5;
  // Float Array feature type
  FEATURE_TYPE_FLOAT_LIST = 6;
  // Embedding feature type
  FEATURE_TYPE_EMBEDDING = 7;
  // Dependent feature type
  FEATURE_TYPE_DEPENDENT = 8;
}

// Represents the update frequency of a feature
enum UpdateFrequency {
  // Default unspecified update frequency
  UPDATE_FREQUENCY_UNSPECIFIED = 0;
  // Real-time update frequency
  UPDATE_FREQUENCY_REAL_TIME = 1;
  // Hourly update frequency
  UPDATE_FREQUENCY_HOURLY = 2;
  // Daily update frequency
  UPDATE_FREQUENCY_DAILY = 3;
  // Weekly update frequency
  UPDATE_FREQUENCY_WEEKLY = 4;
  // Monthly update frequency
  UPDATE_FREQUENCY_MONTHLY = 5;
}

// Represents the sink type for feature storage
enum SinkType {
  // Default unspecified sink type
  SINK_TYPE_UNSPECIFIED = 0;
  // Redis sink type
  SINK_TYPE_REDIS = 1;
  // Datalake sink type
  SINK_TYPE_DATALAKE = 2;
  // Both Redis and Datalake sink types
  SINK_TYPE_BOULDER = 3; // For RT features that go to both Boulder
}

// Represents a feature's schema
message FeatureSchema {
  // Unique identifier for the schema
  string schema_id = 1;
  // Version of the schema
  string schema_version = 2;
  // Format of the schema (e.g., Avro, Protobuf)
  string schema_format = 3;
}

// Represents system tags for governance and metadata
message SystemTagsFeature {
  // Indicates if the data contains personally identifiable information
  bool pii_data = 1;
  // Indicates if the data contains sensitive information
  bool sensitive_data = 2;
  // List of compliance-related tags
  repeated string risk_tags = 3;
  // List of business-related tags
  repeated string business_tags = 4;
  // Team responsible for the data
  string team_owner = 5;
}

// Represents the main feature metadata
message FeatureNode {
  // Unique identifier for the feature
  string feature_id = 1;
  // Basic feature information
  // Name of the feature
  string feature_name = 2;
  // Group the feature belongs to
  string feature_group = 3;
  // Represents the data type of a feature
  FeatureType feature_type = 4;
  // Whether the feature is currently active
  bool is_active = 5;

  // Source information
  // Name of the source table
  string source_table = 6;
  // Table name in the source
  string table_name = 7;
  // List of columns extracted from the source
  repeated string extracted_columns = 8;
  // S3 location where the feature data is stored
  string s3_location = 9;
  // Schema information for the feature
  FeatureSchema schema = 10;

  // Event information
  // Name of the event
  string event_name = 11;
  // Timestamp when the event occurred
  //   12 is reserved currently for DataSourceType
  google.protobuf.Timestamp event_time = 13;
  // Timestamp when the event was processed
  google.protobuf.Timestamp process_time = 14;

  // Feature characteristics
  // Frequency at which the feature is updated
  UpdateFrequency update_frequency = 15;
  // Time-to-live in seconds
  int64 ttl_seconds = 16;
  // Type of storage sink used
  SinkType sink_type = 17;

  // Governance and metadata
  // System-level tags for the feature
  SystemTagsFeature system_tags_feature = 18;
  // Custom metadata key-value pairs
  map<string, string> custom_metadata = 19;

  // Audit information
  // Timestamp when the feature was created
  google.protobuf.Timestamp created_at = 20;
  // Timestamp when the feature was last updated
  google.protobuf.Timestamp updated_at = 21;
  // User who created the feature
  string created_by = 22;
  // User who last updated the feature
  string updated_by = 23;
}

// Collection of features
message FeatureGroup {
  // List of feature nodes
  repeated FeatureNode features = 1;
}

// Represents a source node containing multiple features
message FeatureSourceNode {
  // Name of the feature source/table
  string source_name = 1;

  // Unique identifier for the feature set
  string feature_set_id = 2;

  // Unique identifier for the feature source
  string feature_source_id = 10;

  // Frequency at which the features in this source are updated
  UpdateFrequency update_frequency = 3;

  // Location of the source code (e.g., GitHub repository URL)
  string code_location = 4;

  // Owner of the feature source
  string owner = 5;

  // System-level tags for the feature source
  SystemTagsFeature system_tags = 6;

  // Collection of features in this source
  repeated FeatureNode features = 7;

  // Timestamp when the feature source was created
  google.protobuf.Timestamp created_at = 8;

  // Timestamp when the feature source was last updated
  google.protobuf.Timestamp updated_at = 9;
}

// RPC Request Messages

// Request message for GetFeaturesByTable RPC
message GetFeaturesBySourceTableRequest {
  // Name of the table to query features for
  string source_name = 1;
}

// Response message for GetFeaturesByTable RPC
message GetFeaturesByTableResponse {
  // List of features extracted from the specified table
  repeated FeatureNode features = 1;
}

// Request message for GetFeatureByName RPC
message GetFeatureByNameRequest {
  // Name of the feature to retrieve metadata for
  string feature_name = 1;
}

// Response message for GetFeatureByName RPC
message GetFeatureByNameResponse {
  // Metadata for the requested feature
  FeatureNode feature = 1;
}

// Request message for GetFeatureById RPC
message GetFeatureByIdRequest {
  // ID of the feature to retrieve metadata for
  string feature_id = 1;
}

// Response message for GetFeatureById RPC
message GetFeatureByIdResponse {
  // Metadata for the requested feature
  FeatureNode feature = 1;
}

// Request message for GetFeaturesByOwner RPC
message GetFeaturesByOwnerRequest {
  // Name of the team or user to query features for
  string owner_name = 1;

  // Flag to indicate whether to search by team owner or created_by user
  bool is_team = 2;
}

// Response message for GetFeaturesByOwner RPC
message GetFeaturesByOwnerResponse {
  // List of features owned/created by the specified team or user
  repeated FeatureNode features = 1;
}

// Request message for GetFeatureUploadTime RPC
message GetFeatureUploadTimeRequest {
  // ID of the feature to query upload time for
  string feature_id = 1;

  // Active date to check when the feature was uploaded
  google.protobuf.Timestamp active_date = 2;
}

// Response message for GetFeatureUploadTime RPC
message GetFeatureUploadTimeResponse {
  // Timestamp when the feature was uploaded
  google.protobuf.Timestamp upload_time = 1;
}

// Request message for creating a new FeatureNode
message CreateFeatureNodeRequest {
  // The feature node to create
  FeatureNode feature_node = 1;
}

// Response message for CreateFeatureNode
message CreateFeatureNodeResponse {
  // ID of the created feature node
  string feature_id = 1;
}

// Request message for creating a new FeatureSourceNode
message CreateFeatureSourceNodeRequest {
  // The feature source node to create
  FeatureSourceNode feature_source_node = 1;
}

// Response message for CreateFeatureSourceNode
message CreateFeatureSourceNodeResponse {
  // ID of the created feature source node
  string feature_source_id = 1;
}
