syntax = "proto3";

package authorization.authorization_management_service.v2;

import "authorization/common.proto";
import "doordash.api/annotations.proto";
import "google/api/annotations.proto";

option go_package = "github.com/doordash/services-protobuf/generated/authorization/authorization_management_service";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.authorization";

/*
   Retrieves Users information within the Authorization Platform.
*/
service UserService {
  // Setup this service to be exposed via Unified Gateway.
  option (doordash.api.service) = {
    name: "authorization-management-user-service"
    url: "authorization-management-service-web.service.prod.ddsd"
    port: 50051
    name_spaces: [
      "authorization",
      "authorization-management",
      "access-management"
    ]
    owner: {
      name: "identity-platform"
      id: "identity-platform-team"
      slack_channel: "#ask-access-management"
      email_alias: "identity-platform@doordash.com"
    }
    api_key_name: "AUTHORIZATION-MANAGEMENT-SERVICE-API-KEY"
    target_products: [INTERNAL]
  };

  // Get a specific user by the associated email address.
  rpc GetUserByEmail(GetUserByEmailRequest) returns (GetUserByEmailResponse) {
    option (google.api.http) = {get: "/authorization-management/v1/user/email/{email}"};
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_USER]
      role_based_authorization: {
        mode: ANY,
        roles: ["security-raven-managed-authorization"]
      }
      target_products: [INTERNAL]
      authentication_config: {enable_okta_verification: true}
    };
  }
}

// Get a specific User by email
message GetUserByEmailRequest {
  // The email for the request
  string email = 1;
}

// Target User
message GetUserByEmailResponse {
  // Target User
  authorization.v2.User user = 1;
}
