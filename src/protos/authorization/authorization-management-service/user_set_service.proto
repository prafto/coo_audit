syntax = "proto3";

package authorization.authorization_management_service.v2;

import "authorization/authorization-management-service/authorization_management.proto";
import "doordash.api/annotations.proto";
import "doordash.api/client.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option go_package = "github.com/doordash/services-protobuf/generated/authorization/authorization_management_service";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.authorization";

/*
   Manage User Sets within the Authorization Platform.
   A User Set defines the users, services, or any other entities which request access to a resource.
*/
service UserSetService {
  // Setup this service to be exposed via Unified Gateway.
  option (doordash.api.service) = {
    name: "authorization-management-user-set-service"
    url: "authorization-management-service-web.service.prod.ddsd"
    port: 50051
    name_spaces: [
      "authorization",
      "authorization-management",
      "access-management"
    ]
    owner: {
      name: "identity-platform"
      id: "identity-platform-team"
      slack_channel: "#ask-access-management"
      email_alias: "identity-platform@doordash.com"
    }
    api_key_name: "AUTHORIZATION-MANAGEMENT-SERVICE-API-KEY"
    target_products: [INTERNAL]
  };

  // Create a new User Set in the Authorization platform, attached to a specific Application.
  rpc CreateUserSet(CreateUserSetRequest) returns (CreateUserSetResponse) {
    option (google.api.http) = {
      post: "/authorization-management/v1/user-set"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_USER]
      role_based_authorization: {
        mode: ANY,
        roles: ["security-raven-managed-authorization"]
      }
      target_products: [INTERNAL]
      authentication_config: {enable_okta_verification: true}
    };
  }

  // Update an existing User Set
  rpc UpdateUserSet(UpdateUserSetRequest) returns (UpdateUserSetResponse) {
    option (google.api.http) = {
      patch: "/authorization-management/v1/user-set"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_USER]
      role_based_authorization: {
        mode: ANY,
        roles: ["security-raven-managed-authorization"]
      }
      target_products: [INTERNAL]
      authentication_config: {enable_okta_verification: true}
    };
  }

  // Get a specific User Set
  rpc GetUserSet(GetUserSetRequest) returns (GetUserSetResponse) {
    option (google.api.http) = {get: "/authorization-management/v1/user-set/{id}"};
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_USER]
      role_based_authorization: {
        mode: ANY,
        roles: ["security-raven-managed-authorization"]
      }
      target_products: [INTERNAL]
      authentication_config: {enable_okta_verification: true}
    };
  }

  // Get a list of all User Sets in a specific Application that a user has access to.
  rpc ListUserSets(ListUserSetsRequest) returns (ListUserSetsResponse) {
    option (google.api.http) = {get: "/authorization-management/v1/user-sets"};
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_USER]
      role_based_authorization: {
        mode: ANY,
        roles: ["security-raven-managed-authorization"]
      }
      target_products: [INTERNAL]
      authentication_config: {enable_okta_verification: true}
    };
  }

  // Soft delete a User Set. A User Set cannot be deleted if it is used in a Policy.
  rpc DeleteUserSet(DeleteUserSetRequest) returns (DeleteUserSetResponse) {
    option (google.api.http) = {delete: "/authorization-management/v1/user-sets"};
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_USER]
      role_based_authorization: {
        mode: ANY,
        roles: ["security-raven-managed-authorization"]
      }
      target_products: [INTERNAL]
      authentication_config: {enable_okta_verification: true}
    };
  }
}

// Create a new User Set in the Authorization platform.
message CreateUserSetRequest {
  reserved 5, 7;
  reserved "attributes", "condition";
  // The Application to which the User Set will be attached.
  string application_id = 2;
  // The name of the User Set. This value must be unique within the Application
  string name = 3;
  // [Optional] The description of the User Set.
  google.protobuf.StringValue description = 4;
  // The scope of the user set.
  UserType user_type = 6;
  // The criteria that need be met for a user to be in this User Set.
  AttributeCriteria criteria = 8;
}

// Responds with the created User Set.
message CreateUserSetResponse {
  // The created User Set.
  UserSet user_set = 3;
}

// Update an existing User Set
message UpdateUserSetRequest {
  reserved 5, 6;
  reserved "requirements", "condition";

  // The target User Set to update.
  string id = 2;
  // The Application to which the User Set will be attached.
  string application_id = 7;
  // [Optional] The new name of the User Set.
  google.protobuf.StringValue name = 3;
  // [Optional] The new description of the User Set.
  google.protobuf.StringValue description = 4;
  // [Optional] The new criteria that need be met for a user to be in this User Set.
  AttributeCriteria criteria = 8;
}

// Responds with the updated User Set.
message UpdateUserSetResponse {
  // The updated User Set.
  UserSet user_set = 1;
}

// Get a specific User Set
message GetUserSetRequest {
  // Target User Set ID
  string id = 1;
  // The Application to which the User Set will be attached.
  string application_id = 2;
}

// Target User Set
message GetUserSetResponse {
  // Target User Set
  UserSet user_set = 1;
}

// Get a list of all User Sets registered in target Application that a user has access to
message ListUserSetsRequest {
  // Target Application ID
  string application_id = 1;
  // The minimum created_at time to filter the user sets
  google.protobuf.Timestamp created_at_from = 2 [(doordash.api.client.optional) = true];
  // The page size for the list of user sets
  google.protobuf.Int64Value page_size = 3;
}

// Responds with a list of User Sets that the user has access to
message ListUserSetsResponse {
  // List of User Sets
  repeated UserSet user_sets = 1;
}

// Soft delete a User Set
message DeleteUserSetRequest {
  // Target User Set ID
  string id = 1;
  // The Application to which the User Set will be attached.
  string application_id = 2;
}

// Status code indicates deletion status
message DeleteUserSetResponse {}
