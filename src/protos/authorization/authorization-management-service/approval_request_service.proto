syntax = "proto3";

package authorization.authorization_management_service.v2;

import "authorization/authorization-management-service/authorization_management.proto";
import "authorization/authorization-management-service/policy_service.proto";
import "authorization/authorization-management-service/resource_set_service.proto";
import "authorization/authorization-management-service/user_set_service.proto";
import "authorization/common.proto";
import "common/service_client_config.proto";
import "doordash.api/annotations.proto";
import "doordash.api/client.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option go_package = "github.com/doordash/services-protobuf/generated/authorization/authorization_management_service";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.authorization";

// Manage requests within the Authorization Platform
service ApprovalRequestService {
  // Setup this service to be exposed via Unified Gateway.
  option (doordash.api.service) = {
    name: "authorization-management-approval-request-service"
    url: "authorization-management-service-web.service.prod.ddsd"
    port: 50051
    name_spaces: [
      "authorization",
      "authorization-management",
      "access-management"
    ]
    owner: {
      name: "identity-platform"
      id: "identity-platform-team"
      slack_channel: "#ask-access-management"
      email_alias: "identity-platform@doordash.com"
    }
    api_key_name: "AUTHORIZATION-MANAGEMENT-SERVICE-API-KEY"
    target_products: [INTERNAL]
  };

  // for reference: https://github.com/doordash/dd-util-java/wiki/Hermes#hermes-default-behavior
  option (service_client.client_config).service_name = "authorization-management-service";
  option (service_client.client_config).retry_config.max_attempts = 3;
  option (service_client.client_config).response_attempt_timeout_millis = 30000;
  option (service_client.client_config).circuit_breaker_config.failure_rate_threshold = 1.0;
  option (service_client.client_config).retry_config.initial_wait_millis = 500;
  option (service_client.client_config).retry_config.wait_multiplier = 2.0;

  // is the component active or not
  rpc IsComponentActive(IsComponentActiveRequest) returns (IsComponentActiveResponse) {
    option (google.api.http) = {get: "/authorization-management/v1/is-component-active"};
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_USER]
      role_based_authorization: {
        mode: ANY,
        roles: ["security-raven-managed-authorization"]
      }
      target_products: [INTERNAL]
      authentication_config: {enable_okta_verification: true}
    };
  }

  // Get affected resources for a component if this component is updated
  rpc GetAffectedResources(GetAffectedResourcesRequest) returns (GetAffectedResourcesResponse) {
    option (google.api.http) = {get: "/authorization-management/v1/affected-resources"};
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_USER]
      role_based_authorization: {
        mode: ANY,
        roles: ["security-raven-managed-authorization"]
      }
      target_products: [INTERNAL]
      authentication_config: {enable_okta_verification: true}
    };
  }

  // Get affected user sets for a component if this component is updated
  rpc GetAffectedUserSets(GetAffectedUserSetsRequest) returns (GetAffectedUserSetsResponse) {
    option (google.api.http) = {get: "/authorization-management/v1/affected-user-sets"};
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_USER]
      role_based_authorization: {
        mode: ANY,
        roles: ["security-raven-managed-authorization"]
      }
      target_products: [INTERNAL]
      authentication_config: {enable_okta_verification: true}
    };
  }

  // Request to update an existing active Resource Set
  rpc CreateUpdateResourceSetApprovalRequest(CreateUpdateResourceSetApprovalRequestRequest) returns (CreateUpdateResourceSetApprovalRequestResponse) {
    option (google.api.http) = {
      post: "/authorization-management/v1/resource-set/request-update"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_USER]
      role_based_authorization: {
        mode: ANY,
        roles: ["security-raven-managed-authorization"]
      }
      target_products: [INTERNAL]
      authentication_config: {enable_okta_verification: true}
    };
  }

  // Request to update an existing active User Set
  rpc CreateUpdateUserSetApprovalRequest(CreateUpdateUserSetApprovalRequestRequest) returns (CreateUpdateUserSetApprovalRequestResponse) {
    option (google.api.http) = {
      post: "/authorization-management/v1/user-set/request-update"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_USER]
      role_based_authorization: {
        mode: ANY,
        roles: ["security-raven-managed-authorization"]
      }
      target_products: [INTERNAL]
      authentication_config: {enable_okta_verification: true}
    };
  }

  // Request to delete an existing active User Set
  rpc CreateDeleteUserSetApprovalRequest(CreateDeleteUserSetApprovalRequestRequest) returns (CreateDeleteUserSetApprovalRequestResponse) {
    option (google.api.http) = {
      post: "/authorization-management/v1/user-set/request-delete"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_USER]
      role_based_authorization: {
        mode: ANY,
        roles: ["security-raven-managed-authorization"]
      }
      target_products: [INTERNAL]
      authentication_config: {enable_okta_verification: true}
    };
  }

  // Request to update existing policies
  rpc CreateUpdatePoliciesApprovalRequest(CreateUpdatePoliciesApprovalRequestRequest) returns (CreateUpdatePoliciesApprovalRequestResponse) {
    option (google.api.http) = {
      post: "/authorization-management/v1/policies/request-update"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_USER]
      role_based_authorization: {
        mode: ANY,
        roles: ["security-raven-managed-authorization"]
      }
      target_products: [INTERNAL]
      authentication_config: {enable_okta_verification: true}
    };
  }

  // Request to access a resource (not the Resource in the Resource Set)
  // For example, like 'THQ' tile in the Unity home or the "Dasher Reactivation" button in THQ
  rpc CreateAccessResourceApprovalRequest(CreateAccessResourceApprovalRequestRequest) returns (CreateAccessResourceApprovalRequestResponse) {
    option (google.api.http) = {
      post: "/authorization-management/v1/access-request"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_USER]
      role_based_authorization: {
        mode: ANY,
        roles: ["security-raven-managed-authorization"]
      }
      target_products: [INTERNAL]
      authentication_config: {enable_okta_verification: true}
    };
  }

  // Get an component(User Set/Resource Set/Policy)'s reviewers
  rpc GetComponentReviewers(GetComponentReviewersRequest) returns (GetComponentReviewersResponse) {
    option (google.api.http) = {get: "/authorization-management/v1/component-reviewers"};
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_USER]
      role_based_authorization: {
        mode: ANY,
        roles: ["security-raven-managed-authorization"]
      }
      target_products: [INTERNAL]
      authentication_config: {enable_okta_verification: true}
    };
  }

  // List the requests for which the logged-in user is the approver
  rpc ListApprovalRequests(ListApprovalRequestsRequest) returns (ListApprovalRequestsResponse) {
    option (google.api.http) = {get: "/authorization-management/v1/requests"};
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_USER]
      role_based_authorization: {
        mode: ANY,
        roles: ["security-raven-managed-authorization"]
      }
      target_products: [INTERNAL]
      authentication_config: {enable_okta_verification: true}
    };
  }

  // Get the details of a request
  rpc GetApprovalRequest(GetApprovalRequestRequest) returns (GetApprovalRequestResponse) {
    option (google.api.http) = {get: "/authorization-management/v1/request/{id}"};
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_USER]
      role_based_authorization: {
        mode: ANY,
        roles: ["security-raven-managed-authorization"]
      }
      target_products: [INTERNAL]
      authentication_config: {enable_okta_verification: true}
    };
  }

  // Decide a request by the approver
  rpc DecideApprovalRequest(DecideApprovalRequestRequest) returns (DecideApprovalRequestResponse) {
    option (google.api.http) = {
      post: "/authorization-management/v1/decide-request"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_USER]
      role_based_authorization: {
        mode: ANY,
        roles: ["security-raven-managed-authorization"]
      }
      target_products: [INTERNAL]
      authentication_config: {enable_okta_verification: true}
    };
  }

  // Cancel a request by the requester
  rpc CancelApprovalRequest(CancelApprovalRequestRequest) returns (CancelApprovalRequestResponse) {
    option (google.api.http) = {
      post: "/authorization-management/v1/cancel-request"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_USER]
      role_based_authorization: {
        mode: ANY,
        roles: ["security-raven-managed-authorization"]
      }
      target_products: [INTERNAL]
      authentication_config: {enable_okta_verification: true}
    };
  }
}

// The component type
enum ComponentType {
  // Unspecified
  COMPONENT_TYPE_UNSPECIFIED = 0;
  // User Set
  COMPONENT_TYPE_USER_SET = 1;
  // Resource Set
  COMPONENT_TYPE_RESOURCE_SET = 2;
  // Policy
  COMPONENT_TYPE_POLICY = 3;
  // Attribute
  COMPONENT_TYPE_ATTRIBUTE = 4;
}

// can be a Resource, User Set, or Policy
message Component {
  // The component type: can be Resource/User Set/Policy
  ComponentType type = 1;
  // The UUID for the component
  string id = 2;
}

// Check whether the component is active or not
message IsComponentActiveRequest {
  // The application id
  string application_id = 1;
  // The component
  Component component = 2;
}

// Responds with the whether the component is active or not
message IsComponentActiveResponse {
  // The active status
  google.protobuf.BoolValue active = 1;
}

// Get affected resources for a component if this component is updated
message GetAffectedResourcesRequest {
  // The application id
  string application_id = 1;
  // The component
  Component component = 2;
}

// The affected resources for a component if this component is updated
message GetAffectedResourcesResponse {
  // The affected resources
  repeated ResourceSet affected_resources = 1;
}

// Get affected user sets for a component if this component is updated
message GetAffectedUserSetsRequest {
  // The application id
  string application_id = 1;
  // The component
  Component component = 2;
}

// The affected user sets for a component if this component is updated
message GetAffectedUserSetsResponse {
  // The affected user sets
  repeated UserSet affected_user_sets = 1;
}

// Request to update an existing active Resource Set
message CreateUpdateResourceSetApprovalRequestRequest {
  // the change
  UpdateResourceSetRequest update = 1;
  // The reason for the update request.
  string reason = 2;
}

// Status code indicates the update request status
message CreateUpdateResourceSetApprovalRequestResponse {
  // The created change request
  ApprovalRequest approval_request = 1;
}

// Request to update an existing active User Set
message CreateUpdateUserSetApprovalRequestRequest {
  // the change
  UpdateUserSetRequest update = 1;
  // The reason for the update request.
  string reason = 2;
}

// Status code indicates the update request status
message CreateUpdateUserSetApprovalRequestResponse {
  // The created change request
  ApprovalRequest approval_request = 1;
}

// Request to soft delete an existing active User Set
message CreateDeleteUserSetApprovalRequestRequest {
  // The user set id
  string user_set_id = 1;
  // The application id
  string application_id = 2;
  // The reason for the delete request.
  string reason = 3;
}

// Status code indicates the delete request status
message CreateDeleteUserSetApprovalRequestResponse {
  // The created change request
  ApprovalRequest approval_request = 1;
}

// Request to update policies
message CreateUpdatePoliciesApprovalRequestRequest {
  // the change
  UpdatePoliciesRequest update = 1;
  // The reason for the update request.
  string reason = 3;
}

// Status code indicates the update request status
message CreateUpdatePoliciesApprovalRequestResponse {
  reserved 1;
  reserved "approval_request";

  // The created change request
  repeated ApprovalRequest approval_requests = 2;
}

// Request to access a resource (not the Resource in the Resource Set)
message CreateAccessResourceApprovalRequestRequest {
  // The application that the request is for.
  string application_id = 1;
  // The component under the application
  Component component = 2;
  // The reason for the request.
  string reason = 3;
}

// Status code indicates the access request status
message CreateAccessResourceApprovalRequestResponse {
  // The created change request
  ApprovalRequest approval_request = 1;
}

// Get the approvers for a component
message GetComponentReviewersRequest {
  // The application id
  string application_id = 1;
  // The component
  Component component = 2;
}

// The reviewers for a component
message GetComponentReviewersResponse {
  // The reviewers
  repeated authorization.v2.User reviewers = 1;
}

// Status code indicates the request status
enum RequestStatus {
  reserved 5;
  reserved "REQUEST_STATUS_ABORTED";

  // Unspecified
  REQUEST_STATUS_UNSPECIFIED = 0;
  // The request is pending for review.
  REQUEST_STATUS_PENDING = 1;
  // The request is approved.
  REQUEST_STATUS_APPROVED = 2;
  // The request is rejected.
  REQUEST_STATUS_REJECTED = 3;
  // The request is closed by the requester.
  REQUEST_STATUS_CLOSED = 4;
}

// Request to list requests
message ListApprovalRequestsRequest {
  reserved 1, 2, 5;
  reserved "page", "status", "user_set_id";

  // The approver id
  // necessary for the approver to list the requests
  google.protobuf.StringValue approver_user_id = 3 [(doordash.api.client.optional) = true];
  // The application id
  google.protobuf.StringValue application_id = 4 [(doordash.api.client.optional) = true];
  // The status of the requests to list.
  repeated RequestStatus statuses = 6;
  // The list of components
  repeated Component components = 7 [(doordash.api.client.optional) = true];
  // The minimum created_at time to filter the application history
  google.protobuf.Timestamp created_at_from = 8 [(doordash.api.client.optional) = true];
  // The page size for the list of approval requests. Default is 50
  google.protobuf.Int64Value page_size = 9 [(doordash.api.client.optional) = true];
}

// The category of the request.
enum RequestCategory {
  // Unspecified
  REQUEST_CATEGORY_UNSPECIFIED = 0;
  // Request for access to a resource.
  REQUEST_CATEGORY_ACCESS = 1;
  // Request for update to a resource.
  REQUEST_CATEGORY_UPDATE = 2;
  // Request to delete a resource
  REQUEST_CATEGORY_DELETE = 3;
}

// The summary information of a request for browsing
message ApprovalRequestBrief {
  // The request ID (randomly generated UUID)
  string id = 1;
  // The request application ID
  string application_id = 2;
  // The user name who made the request.
  authorization.v2.User requester = 3;
  // The category of the request
  RequestCategory category = 4;
  // The time the request was created.
  google.protobuf.Timestamp created_at = 5;
  // The category of the request
  RequestStatus status = 6;
  // The component that the request is for.
  Component component = 7;
}

// Responds with a list of brief requests
message ListApprovalRequestsResponse {
  reserved 1;
  reserved "request";

  // The list of requests.
  repeated ApprovalRequestBrief requests = 2;
}

// Get the details of a request
message GetApprovalRequestRequest {
  reserved 1;
  reserved "request_uuid";

  //  The request UUID
  string id = 2;
}

// The review decision
enum ReviewDecisionResult {
  // Unspecified
  REVIEW_DECISION_RESULT_UNSPECIFIED = 0;
  // Reviewer has approved
  REVIEW_DECISION_RESULT_APPROVED = 1;
  // Reviewer has rejected
  REVIEW_DECISION_RESULT_REJECTED = 2;
}

// Review decision metadata
message ReviewDecision {
  // Decision result
  ReviewDecisionResult result = 1;
  // Time when the reviewer made a decision
  google.protobuf.Timestamp created_at = 2;
  // The business justification for the decision
  google.protobuf.StringValue reason = 3;
}

// A individual request review
message Review {
  reserved 2, 3;
  reserved "pending", "review_decision";

  // Reviewer identity
  authorization.v2.User reviewer = 1;
  // Decision status. If pending, `review_decision` should be empty.
  bool is_pending = 4;
  // If populated, `pending` should be false.
  ReviewDecision decision = 5;
}

// Request to modify a Component
message ApprovalRequest {
  // The request ID (randomly generated UUID)
  string id = 1;
  // The application that the request is for
  google.protobuf.StringValue application_id = 2;
  // The requesting user's identity
  authorization.v2.User requester = 3;
  // The time the request was created
  google.protobuf.Timestamp created_at = 4;
  // The status of the request
  RequestStatus status = 5;
  // The reviews
  repeated Review reviews = 6;
  // The category of the request
  RequestCategory category = 7;
  // The component that the request is for
  Component component = 8;
  // Before change
  google.protobuf.StringValue before_change = 9;
  // After change
  google.protobuf.StringValue after_change = 10;
  // The affected resources
  repeated ResourceSet affected_resources = 11;
  // Business justification for this change
  string reason = 12;
  // Diffs between before and after
  google.protobuf.StringValue change_diff = 13;
}

// Responds with the details of a request
message GetApprovalRequestResponse {
  reserved 1;
  reserved "request_detail";

  // The change request
  ApprovalRequest approval_request = 2;
}

// Decide a request
message DecideApprovalRequestRequest {
  reserved 1, 2, 3;
  reserved "request_uuid", "decision", "reason";

  //  The request UUID
  string id = 4;
  // The decision
  ReviewDecision review_decision = 5;
  // Add the requester to the user set
  // Only populated for access resource request
  google.protobuf.StringValue user_set_id_to_add = 6 [(doordash.api.client.optional) = true];
}

// Status code indicates the decide request status
message DecideApprovalRequestResponse {}

// Cancel a request
message CancelApprovalRequestRequest {
  reserved 1;
  reserved "request_uuid";

  //  The request UUID
  string id = 2;
}

// Status code indicates the cancel request status
message CancelApprovalRequestResponse {}
