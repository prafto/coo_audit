syntax = "proto3";

package authorization.authorization_management_service.v2;

import "authorization/authorization-management-service/authorization_management.proto";
import "authorization/common.proto";
import "doordash.api/annotations.proto";
import "google/api/annotations.proto";

option go_package = "github.com/doordash/services-protobuf/generated/authorization/authorization_management_service";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.authorization";

// Manage Policies within the Authorization Platform
service PolicyService {
  // Setup this service to be exposed via Unified Gateway.
  option (doordash.api.service) = {
    name: "authorization-management-policy-service"
    url: "authorization-management-service-web.service.prod.ddsd"
    port: 50051
    name_spaces: [
      "authorization",
      "authorization-management",
      "access-management"
    ]
    owner: {
      name: "identity-platform"
      id: "identity-platform-team"
      slack_channel: "#ask-access-management"
      email_alias: "identity-platform@doordash.com"
    }
    api_key_name: "AUTHORIZATION-MANAGEMENT-SERVICE-API-KEY"
    target_products: [INTERNAL]
  };

  // Create a new Policies in the Authorization platform, attached to a specific Application.
  rpc CreatePolicies(CreatePoliciesRequest) returns (CreatePoliciesResponse) {
    option (google.api.http) = {
      post: "/authorization-management/v1/policies"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_USER]
      role_based_authorization: {
        mode: ANY,
        roles: ["security-raven-managed-authorization"]
      }
      target_products: [INTERNAL]
      authentication_config: {enable_okta_verification: true}
    };
  }

  // Update existing Policies under an application
  rpc UpdatePolicies(UpdatePoliciesRequest) returns (UpdatePoliciesResponse) {
    option (google.api.http) = {
      patch: "/authorization-management/v1/policies"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_USER]
      role_based_authorization: {
        mode: ANY,
        roles: ["security-raven-managed-authorization"]
      }
      target_products: [INTERNAL]
      authentication_config: {enable_okta_verification: true}
    };
  }

  // Get a list of all Policies in a specific Application that a user has access to.
  rpc QueryPolicies(QueryPoliciesRequest) returns (QueryPoliciesResponse) {
    option (google.api.http) = {get: "/authorization-management/v1/policies"};
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_USER]
      role_based_authorization: {
        mode: ANY,
        roles: ["security-raven-managed-authorization"]
      }
      target_products: [INTERNAL]
      authentication_config: {enable_okta_verification: true}
    };
  }
}

// Create a new Policy in the Authorization platform.
message CreatePoliciesRequest {
  // The Application to which the Policy will be attached.
  string application_id = 2;
  // User Set ID for the policy
  string user_set_id = 3;
  // Resource Set ID for the policy
  string resource_set_id = 4;
}

// Responds with the created Policy.
message CreatePoliciesResponse {
  // The created Policy.
  repeated Policy policies = 3;
}

// The singleton of update policy
message UpdatePolicy {
  // User Set ID for the policy
  string user_set_id = 2;
  // Resource Set ID for the policy
  string resource_set_id = 3;
  // Action associate for the policy
  authorization.v2.Action action = 4;
  // The desired policy status
  PolicyStatus status = 5;
}

// Update an existing Policy
message UpdatePoliciesRequest {
  // The Application to which the Policy will be attached.
  string application_id = 1;
  // the policy to be updated
  repeated UpdatePolicy updated_policies = 2;
}

// Responds with the updated Policies.
message UpdatePoliciesResponse {
  // The updated Policies.
  repeated Policy policies = 1;
}

// Get a list of all Policies registered in target Application that a user has access to
message QueryPoliciesRequest {
  // Target Application ID
  string application_id = 1;
  // User Set IDs
  repeated string user_set_ids = 2;
}

// Responds with a list of Policies that the user has access to
message QueryPoliciesResponse {
  // List of Policies
  repeated Policy policies = 1;
}
