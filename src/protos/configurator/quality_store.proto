syntax = "proto3";
package configurator;

import "configurator/common.proto";
import "google/protobuf/timestamp.proto";

option java_multiple_files = true;
option java_package = "com.doordash.configurator.api.quality_store";

// get all sent metrics
message GetModelQualityConfigsRequest {
  // model predictor name
  string predictor_name = 1;
  // model id to store quality data for
  string model_id = 2;
  // a boolean parameter to indicate to store offline or online quality data
  bool is_offline = 3;
  // environment the quality data is store for: staging/prod/dev
  string environment = 4;
}

// response for GetModelQualityConfigsRequest
message GetModelQualityConfigsResponse {
  // set of model quality configs
  repeated ModelQualityConfig model_quality = 1;
}

// get a single metric result
message GetModelQualityMetricRequest {
  // model predictor name
  string predictor_name = 1;
  // model id to store quality data for
  string model_id = 2;
  // a boolean parameter to indicate to store offline or online quality data
  bool is_offline = 3;
  // environment the quality data is store for: staging/prod/dev
  string environment = 4;
  // a name of the metric the quality value is requested for
  string metric_name = 5;
}

// response for GetModelQualityMetricRequest
message GetModelQualityMetricResponse {
  // a value of the metric the quality data is requested for
  float metric_value = 1;
}

// get k latest for predictor
message GetKModelQualityConfigsPerPredictorRequest {
  // model predictor name
  string predictor_name = 1;
  // a boolean parameter to indicate to store offline or online quality data
  bool is_offline = 3;
  // environment the quality data is store for: staging/prod/dev
  string environment = 4;
  // a number of the latest records to return
  int64 limit = 5;
}

// response for GetKModelQualityConfigsPerPredictorRequest
message GetKModelQualityConfigsPerPredictorResponse {
  // a set of model quality packs with a config and more env info
  repeated ModelQualityConfigPack model_quality_config_pack = 1;
}

// set quality metrics per predictor and model id in specific offline/online environment
message SetModelQualityConfigsRequest {
  // model predictor name
  string predictor_name = 1;
  // model id to store quality data for
  string model_id = 2;
  // a boolean parameter to indicate to store offline or online quality data
  bool is_offline = 3; // offline vs online model metrics
  // environment the quality data is store for: staging/prod/dev
  string environment = 4;
  // a source of the service he data is being send from lucent/databricks/...
  string source = 5;
  // model quality records
  repeated ModelQualityConfig model_quality_config = 6;
  // additional metadata
  Metadata metadata = 7;
}

// response for SetModelQualityConfigsRequest
message SetModelQualityConfigsResponse {
  // result of setting records operation
  bool success = 1;
}

// a message type when quality being pulled for K latest
message ModelQualityConfigPack {
  // model predictor name
  string predictor_name = 1;
  // model id to store quality data for
  string model_id = 2;
  // a boolean parameter to indicate to store offline or online quality data
  bool is_offline = 3;
  // environment the quality data is store for: staging/prod/dev
  string environment = 4;
  // a source of the service he data is being send from lucent/databricks/...
  string source = 5;
  // model quality record
  ModelQualityConfig model_quality_config = 6;
  // additional metadata
  Metadata metadata = 7;
  // timestamp for update time
  google.protobuf.Timestamp timestamp = 8;
}

// a message for model quality record
message ModelQualityConfig {
  // a quality metric name
  string metric_name = 1;
  // a default value for the metric
  float default_value = 2;
  // a quality metric value
  float metric_value = 3;
}

// a message for additional metadata to store along with quality pack
message Metadata {
  // a link to the Dagster job when available
  string job_link = 1;
  // a link to the mlflow experiment link when exists
  string mlflow_link = 2;
}
