syntax = "proto3";
package configurator;

import "configurator/columbus_predictor_config.proto";
import "configurator/columbus_predictor_shard.proto";
import "configurator/common.proto";
import "configurator/curator_owner.proto";
import "configurator/curator_sfcopy_config.proto";
import "configurator/fabricator.proto";
import "configurator/fabricator_feature_config.proto";
import "configurator/fabricator_job_status.proto";
import "configurator/feature_quality_config.proto";
import "configurator/model_store.proto";
import "configurator/octopus_connector_fabricator.proto";
import "configurator/octopus_connector_forecast.proto";
import "configurator/octopus_connector_genai_policy.proto";
import "configurator/octopus_connector_lucent.proto";
import "configurator/octopus_connector_lucent_gpu_quota.proto";
import "configurator/octopus_connector_model_config.proto";
import "configurator/octopus_connector_predictor_config.proto";
import "configurator/octopus_connector_user.proto";
import "configurator/quality_store.proto";
import "configurator/talleyrand.proto";
import "doordash.api/annotations.proto";
import "google/api/annotations.proto";
import "google/protobuf/wrappers.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.configurator.api";

service Configurator {
  // Feature Quality Configurations
  rpc GetFeatureQualityConfigs(FeatureQualityConfigsGetRequest) returns (FeatureQualityConfigsGetResponse);
  rpc AddFeatureQualityConfigs(FeatureQualityConfigsSetRequest) returns (FeatureQualityConfigsSetResponse);
}

service Fabricator {
  // Fabricator
  rpc GetSinks(SinksGetRequest) returns (SinksGetResponse);
  rpc GetSources(SourcesGetRequest) returns (SourcesGetResponse);
  rpc GetAllFeatures(AllFeaturesGetRequest) returns (AllFeaturesGetResponse);
  rpc GetAllSources(AllSourcesGetRequest) returns (AllSourcesGetResponse);
  rpc GetFeatures(FeaturesGetRequest) returns (FeaturesGetResponse);
  rpc GetSignals(SignalGetRequest) returns (SignalGetResponse);
  rpc GetFeatureViews(FeatureViewsGetRequest) returns (FeatureViewsGetResponse);
  rpc GetEntities(EntitiesGetRequest) returns (EntitiesGetResponse);
  rpc GetUsers(UsersGetRequest) returns (UsersGetResponse);
  rpc GetGroups(GroupsGetRequest) returns (GroupsGetResponse);
  rpc GetAlerts(AlertsGetRequest) returns (AlertsGetResponse);
  rpc GetRepo(RepoGetRequest) returns (RepoGetResponse);

  rpc UpsertSink(SinkUpsertRequest) returns (SinkUpsertResponse);
  rpc UpsertEntity(EntityUpsertRequest) returns (EntityUpsertResponse);
  rpc UpsertSource(SourceUpsertRequest) returns (SourceUpsertResponse);
  rpc UpsertFeature(FeatureUpsertRequest) returns (FeatureUpsertResponse);
  rpc UpsertSignal(SignalUpsertRequest) returns (SignalUpsertResponse);
  rpc UpsertFeatureView(FeatureViewUpsertRequest) returns (FeatureViewUpsertResponse);
  rpc UpsertUser(UserUpsertRequest) returns (UserUpsertResponse);
  rpc UpsertGroup(GroupUpsertRequest) returns (GroupUpsertResponse);
  rpc UpsertAlert(AlertUpsertRequest) returns (AlertUpsertResponse);
  rpc UpsertRepo(RepoUpsertRequest) returns (RepoUpsertResponse);

  rpc DeleteSources(SourcesDeleteRequest) returns (SourcesDeleteResponse);
  rpc DeleteFeatures(FeaturesDeleteRequest) returns (FeaturesDeleteResponse);

  // Feature discovery configs
  rpc GetFeatureConfig(FeatureConfigsGetRequest) returns (FeatureConfigsResponse);
}

service Talleyrand {
  //Talleyrand
  rpc GetAllMetrics(GetAllMetricsRequest) returns (GetAllMetricsResponse);
  rpc GetMetricNames(GetMetricNamesRequest) returns (GetMetricNamesResponse);
  rpc GetMetrics(GetMetricsRequest) returns (GetMetricsResponse);
  rpc GetMetricDetails(GetMetricDetailsRequest) returns (GetMetricDetailsResponse);
  rpc UpsertMetricDetails(UpsertMetricDetailsRequest) returns (UpsertMetricDetailsResponse);
  rpc GetEventSource(GetEventSourceRequest) returns (GetEventSourceResponse);
  rpc GetEventSourceList(GetEventSourceListRequest) returns (GetEventSourceListResponse);
  rpc GetEventAggregates(GetEventAggregatesRequest) returns (GetEventAggregatesResponse);
  rpc UpsertEventSource(UpsertEventSourceRequest) returns (UpsertEventSourceResponse);
  rpc GetEvents(GetEventsRequest) returns (GetEventsResponse);
  rpc GetEventDetails(GetEventDetailsRequest) returns (GetEventDetailsResponse);
  rpc UpsertEventDetails(UpsertEventDetailsRequest) returns (UpsertEventDetailsResponse);
  rpc GetMetricsBySource(GetEventSourceRequest) returns (GetMetricsBySourceResponse);
  rpc GetWindowMetricsByParent(GetWindowMetricsByParentRequest) returns (GetWindowMetricsByParentResponse);

  rpc GetMetricPack(GetMetricPackRequest) returns (GetMetricPackResponse);
  rpc GetMetricPackList(GetMetricPackListRequest) returns (GetMetricPackListResponse);
  rpc GetAllMetricPacks(GetAllMetricPacksRequest) returns (GetAllMetricPacksResponse);
  rpc AddMetricPack(AddMetricPackRequest) returns (AddMetricPackResponse);
  rpc UpdateMetricPack(UpdateMetricPackRequest) returns (UpdateMetricPackResponse);
  rpc ApproveMetricPack(ApproveMetricPackRequest) returns (ApproveMetricPackResponse);
  rpc RejectMetricPack(RejectMetricPackRequest) returns (RejectMetricPackResponse);

  // Talleyrand dimensional support
  rpc GetDimensionDetails(GetDimensionDetailsRequest) returns (GetDimensionDetailsResponse);
  rpc UpsertDimensionDetails(UpsertDimensionDetailsRequest) returns (UpsertDimensionDetailsResponse);
  rpc GetApplicableDimensionsForMetrics(GetApplicableDimensionsForMetricsRequest) returns (GetApplicableDimensionsForMetricsResponse);
}

service Columbus {
  // Read configs
  rpc GetPredictorConfigs(PredictorConfigsGetRequest) returns (PredictorConfigsGetResponse);
  rpc GetPredictorConfigChangeSpec(PredictorConfigChangeSpecGetRequest) returns (PredictorConfigChangeSpecGetResponse);
  // Write configs
  rpc UpsertPredictorConfig(PredictorConfigUpsertRequest) returns (UpsertResponse);
  rpc UpsertPredictorConfigChangeSpec(PredictorConfigChangeSpecUpsertRequest) returns (UpsertResponse);
  rpc DeletePredictorConfig(PredictorConfigDeleteRequest) returns (UpsertResponse);

  // Read predictor shard mapping
  rpc GetPrimaryShardPredictor(PrimaryShardGetRequest) returns (PrimaryShardGetResponse);
  rpc GetAllShardsPredictor(AllShardsGetRequest) returns (AllShardsGetResponse);
  rpc GetPredictorsOnShard(PredictorsOnShardGetRequest) returns (PredictorsOnShardGetResponse);
  rpc GetAllShardsBatchPredictor(AllShardsBatchGetRequest) returns (AllShardsBatchGetResponse);
  // Write predictor shard mapping
  rpc UpsertPredictorShards(PredictorShardsUpsertRequest) returns (UpsertResponse);
}

service Octopus {
  // Read Fabricator Features Configuration
  rpc GetFabricatorFeatures(FabricatorConnectorGetFeaturesRequest) returns (FabricatorConnectorGetFeaturesResponse);

  // Write Fabricator Features Configuration
  rpc UpsertFabricatorFeatures(FabricatorConnectorUpsertFeaturesRequest) returns (UpsertResponse);

  // Delete Fabricator Feature Configuration
  rpc DeleteFabricatorFeatures(FabricatorConnectorDeleteFeaturesRequest) returns (FabricatorConnectorDeleteFeaturesResponse);

  // Read Fabricator Sources Configuration
  rpc GetFabricatorSources(FabricatorConnectorGetSourcesRequest) returns (FabricatorConnectorGetSourcesResponse);

  // Write Fabricator Sources Configuration
  rpc UpsertFabricatorSources(FabricatorConnectorUpsertSourcesRequest) returns (UpsertResponse);

  // Delete Fabricator Sources Configuration
  rpc DeleteFabricatorSources(FabricatorConnectorDeleteSourcesRequest) returns (FabricatorConnectorDeleteSourcesResponse);

  // Read User Info
  rpc GetUserInfo(UserConnectorGetUserInfoRequest) returns (UserConnectorGetUserInfoResponse);

  // Write User Info
  rpc UpsertUserInfo(UserConnectorUpsertUserInfoRequest) returns (UpsertResponse);

  // Read Lucent cluster
  rpc GetLucentCluster(LucentConnectorGetClusterRequest) returns (LucentConnectorGetClusterResponse);

  // Write Lucent cluster
  rpc UpsertLucentCluster(LucentConnectorUpsertClusterRequest) returns (UpsertResponse);

  // Read Lucent GPU quota
  rpc GetLucentGpuQuota(LucentConnectorGetGpuQuotaRequest) returns (LucentConnectorGetGpuQuotaResponse);

  // Upsert Lucent GPU quota
  rpc UpsertLucentGpuQuota(LucentConnectorUpsertGpuQuotaRequest) returns (UpsertResponse);

  // Increase Lucent GPU quota
  rpc IncreaseLucentGpuQuota(LucentConnectorIncreaseGpuQuotaRequest) returns (UpsertResponse);

  // Read forecast config
  rpc GetForecastConfig(GetForecastConfigRequest) returns (GetForecastConfigResponse);

  // Write forecast config
  rpc UpsertForecastConfig(UpsertForecastConfigRequest) returns (UpsertResponse);

  // Get Columbus/SPS predictor configs
  rpc GetOctopusPredictorConfigs(GetOctopusPredictorConfigsRequest) returns (GetOctopusPredictorConfigsResponse);

  // Write Predictor config (needs SPS/Columbus Predictor Config)
  rpc UpsertOctopusPredictorConfigs(UpsertOctopusPredictorConfigsRequest) returns (UpsertResponse);

  // Get SPS/Argil model configs
  rpc GetOctopusModelConfigs(GetOctopusModelConfigsRequest) returns (GetOctopusModelConfigsResponse);

  // Write Model config (needs SPS/Argil Model Config)
  rpc UpsertOctopusModelConfigs(UpsertOctopusModelConfigsRequest) returns (UpsertResponse);

  // Write new genai policy acknowledgement
  rpc AcknowledgeGenAiPolicy(GenAiPolicyAcknowledgementRequest) returns (GenAiPolicyAcknowledgementResponse);

  // Get latest genai policy acknowledgement
  rpc GetLatestGenAiPolicyAcknowledgement(GenAiPolicyGetLatestAcknowledgementRequest) returns (GenAiPolicyGetLatestAcknowledgementResponse);
}

service Curator {
  option (doordash.api.service) = {
    name: "configurator-curator"
    url: "configurator-curator.service.prod.ddsd"
    port: 50051
    name_spaces: ["curator"]
    owner: {
      name: "eng-analytics-engine"
      id: "analytics-engine-default-bucket"
      slack_channel: "#ask-analytics-engine"
      email_alias: "eng-analytics-engine@doordash.com"
    }
    target_products: [INTERNAL]
  };
  // Get sfcopy repo configurations
  rpc GetSfCopyRepoConfigs(GetSfCopyRepoConfigsRequest) returns (GetSfCopyRepoConfigsResponse) {
    option (google.api.http) = {get: "/curator/v1/sf-copy-configs"};
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      target_products: [INTERNAL]
    };
  }

  // Upsert sfcopy repo configuration
  rpc UpsertSfCopyRepoConfig(UpsertSfCopyRepoConfigRequest) returns (UpsertResponse) {
    option (google.api.http) = {
      post: "/curator/v1/sf-copy-configs"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      target_products: [INTERNAL]
    };
  }

  // Delete sfcopy repo configuration
  rpc DeleteSfCopyRepoConfig(DeleteSfCopyRepoConfigRequest) returns (DeleteResponse) {
    option (google.api.http) = {delete: "/curator/v1/sf-copy-configs"};
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      target_products: [INTERNAL]
    };
  }

  // Curator Owners API
  rpc GetCuratorOwners(GetCuratorOwnersRequest) returns (GetCuratorOwnersResponse) {
    option (google.api.http) = {get: "/curator/v1/owners"};
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      target_products: [INTERNAL]
    };
  }
  rpc UpsertCuratorOwner(UpsertCuratorOwnerRequest) returns (UpsertResponse) {
    option (google.api.http) = {
      post: "/curator/v1/owners"
      body: "*"
    };
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      target_products: [INTERNAL]
    };
  }
  rpc DeleteCuratorOwner(DeleteCuratorOwnerRequest) returns (DeleteResponse) {
    option (google.api.http) = {delete: "/curator/v1/owners/{name}"};
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: DEV
      authorization: [DD_EMPLOYEE]
      target_products: [INTERNAL]
    };
  }
}

service QualityStore {
  // get model quality logged per predictor/model_id/is_offline/environment
  rpc GetModelQualityConfigs(GetModelQualityConfigsRequest) returns (GetModelQualityConfigsResponse);

  // get a single model quality value (metric value) per predictor/model_id/is_offline/environment/metric_name
  rpc GetModelQualityMetric(GetModelQualityMetricRequest) returns (GetModelQualityMetricResponse);

  //  get k latest quality configs for predictor/is_offline/environment
  rpc GetKModelQualityConfigsPerPredictor(GetKModelQualityConfigsPerPredictorRequest) returns (GetKModelQualityConfigsPerPredictorResponse);

  // set model quality per predictor/model_id/is_offline/environment/source
  rpc SetModelQualityConfigs(SetModelQualityConfigsRequest) returns (SetModelQualityConfigsResponse);
}

service FabricatorJobStatus {
  // Fabricator
  rpc GetJobStatus(JobStatusGetRequest) returns (JobStatusGetResponse);
  rpc UpsertJobStatus(JobStatusUpsertRequest) returns (JobStatusUpsertResponse);
}

service ModelStore {
  // upload a model to the model store
  rpc UploadModel(UploadModelRequest) returns (UploadModelResponse);

  // retrieve a model that was previously uploaded to the model store
  rpc GetModel(GetModelRequest) returns (GetModelResponse);

  // list models that were previously uploaded to the model store
  rpc ListModels(ListModelsRequest) returns (ListModelsResponse);

  // request validation of a model
  rpc ValidateModel(ValidateModelRequest) returns (ValidateModelResponse);

  // get the status of a model validation
  rpc GetModelValidationStatus(GetModelValidationStatusRequest) returns (GetModelValidationStatusResponse);
}
