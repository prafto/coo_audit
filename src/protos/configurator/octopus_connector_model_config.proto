syntax = "proto3";
package configurator;

import "configurator/common.proto";
import "configurator/fabricator.proto";
import "configurator/octopus_common.proto";
import "configurator/sps_predictor_config.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option java_multiple_files = true;
option java_package = "com.doordash.configurator.api";

// Serving Platform being used for the model
enum ModelServingPlatform {
  SIBYL = 0;
  ARGIL = 1;
}

// Model Config Filter
message ModelConfigFilter {
  // Model Owner/DRI
  string owner = 1;
  // Team
  string team = 2;
  // serving platform
  ModelServingPlatform model_serving_platform = 3;
  // Model name
  string name = 4;
  // List of property filters
  repeated FeaturePropertyFilter data = 6;
}

message ModelFeatureUploadStatus {
  // feature name
  string feature_name = 1;
  // feature type
  ModelFeatureType feature_type = 2;
  // feature upload timestamp
  google.protobuf.Timestamp last_uploaded = 4;
}

// Model Training Metadata (Currently only SMTP)
message ModelTrainingConfig {
  // predictor name
  string predictor_name = 1;
  // model id
  string model_id = 2;
  // model version
  string model_version = 3;
  // training run
  google.protobuf.Timestamp last_trained = 4;
  // github commit
  string github_commit = 5;
  // mlflow url
  string mlflow_url = 6;
}

// Model ConfigurationSpec
message OctopusModelConfigSpec {
  // model id
  string model_id = 1;
  // SPS Version of Model Config
  ModelConfig sps_model_config = 2;
  // Model Training Config
  ModelTrainingConfig model_training_config = 3;
  // Feature Upload Status
  repeated ModelFeatureUploadStatus model_feature_upload_status = 4;
  // Model Configuration
  string model_configuration = 5;
  // Model Description
  string model_description = 6;
  // Dependent Entities
  repeated Entity entities = 7;
  // DEPRECATED: ml governance tags
  repeated GovernanceMetadataTagType governance_tags = 8;
  // ml governance review status
  MLGovernanceReviewStatus ml_governance_review_status = 9;
  // ml governance notes
  string ml_governance_notes = 10;
  // ml model governance tags
  repeated GovernanceModelMetadataTagType model_governance_tags = 11;
  // offline use-case flag
  bool is_offline = 12;
  // feature_importance
  map<string, string> feature_importance = 13;
  // Serving Platform: Sibyl, Argil, etc
  ModelServingPlatform model_serving_platform = 14;
  // Owner/DRI for the model
  string owner = 15;
  // Team responsible for the model
  string team = 16;
  // QPS if model is served live in production
  int64 qps_live = 17;
}

// GetModelConfig request
message GetOctopusModelConfigsRequest {
  // list of model_ids (empty to get all)
  repeated string models = 1;
  // Filter Models
  ModelConfigFilter filter = 2;
  // Page number/size for pagination (optional)
  google.protobuf.Int32Value page_number = 3;
  google.protobuf.Int32Value page_size = 4;
}

// GetModelConfig response
message GetOctopusModelConfigsResponse {
  // list of predictor config specs from get request (may be different order)
  repeated OctopusModelConfigSpec model_configs = 1;
  // status code of response
  StatusCode code = 2;
  // Pagination
  PageInfo page_info = 3;
}

// Upsert Request: Model Configs
message UpsertOctopusModelConfigsRequest {
  // List of model configs to be written
  repeated OctopusModelConfigSpec model_configs = 1;
  // Set true for a dry run
  bool dry = 2;
  // Partially update by preserving columns
  bool partial = 3;
}
