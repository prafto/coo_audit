syntax = "proto3";

package dx_promotion_platform.v1;

import "common/common.proto";
import "common/money.proto";
import "common/service_client_config.proto";
import "dx_promotion_platform/common.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.dx_promotion_platform";

// DasherPayCampaignService
service DasherPayCampaignService {
  option (service_client.client_config).service_name = "dx-promotion-platform";
  option (service_client.client_config).service_app = "web";
  option (service_client.client_config).response_attempt_timeout_millis = 1500;

  // Get active pay campaigns
  rpc GetActiveDasherPayCampaigns(GetActiveDasherPayCampaignsRequest) returns (GetActiveDasherPayCampaignsResponse);

  // Fetches all currently active pay campaigns for an onshift dasher’s current starting point
  rpc GetPayCampaignsForOnshiftDasher(GetPayCampaignsForOnshiftDasherRequest) returns (GetPayCampaignsForOnshiftDasherResponse);

  // Fetches all current and upcoming pay campaigns for the rest of the day, in the dasher’s default SP and all adjacent SPs
  // (or from whatever SPs the dasher has previously selected as their preference)
  rpc GetUpcomingPayCampaignsForDasher(GetUpcomingPayCampaignsForDasherRequest) returns (GetUpcomingPayCampaignsForDasherResponse);

  // Fetches dasher's starting point selections and whether there will be pay campaigns returned for each of them.
  rpc GetStartingPointSelectionsForDasher(GetStartingPointSelectionsForDasherRequest) returns (GetStartingPointSelectionsForDasherResponse);

  // Save starting point selections for dasher
  rpc SaveStartingPointSelectionsForDasher(SaveStartingPointSelectionsForDasherRequest) returns (SaveStartingPointSelectionsForDasherResponse);

  // Bulk create pay campaigns for multiple starting points
  rpc BulkCreateDasherPayCampaign(BulkCreateDasherPayCampaignRequest) returns (BulkCreateDasherPayCampaignResponse);

  // Create pay campaigns
  rpc CreateDasherPayCampaign(CreateDasherPayCampaignRequest) returns (CreateDasherPayCampaignResponse);

  // Get all pay campaigns
  rpc GetAllDasherPayCampaigns(GetAllDasherPayCampaignsRequest) returns (GetAllDasherPayCampaignsResponse);

  // Get all pay campaigns by SP
  rpc GetAllDasherPayCampaignsBySp(GetAllDasherPayCampaignsBySpRequest) returns (GetAllDasherPayCampaignsBySpResponse);

  // Get pay campaign by ID
  rpc GetPayCampaignsById(GetPayCampaignsByIdRequest) returns (GetPayCampaignsByIdResponse);

  // Update pay campaigns
  rpc UpdateDasherPayCampaigns(UpdateDasherPayCampaignsRequest) returns (UpdateDasherPayCampaignsResponse);

  // Delete pay campaigns
  rpc DeleteDasherPayCampaigns(DeleteDasherPayCampaignsRequest) returns (DeleteDasherPayCampaignsResponse);

  // List pay campaigns
  rpc ListDasherPayCampaigns(ListDasherPayCampaignsRequest) returns (ListDasherPayCampaignsResponse);

  // List pay campaigns by SP
  rpc ListDasherPayCampaignsByStartingPointId(ListDasherPayCampaignsByStartingPointIdRequest) returns (ListDasherPayCampaignsByStartingPointIdResponse);
}

// Dasher Pay Campaign Interval
message PayCampaignInterval {
  // ID
  google.protobuf.StringValue id = 1;

  // whether it's active
  google.protobuf.BoolValue is_active = 2;

  // starting point ID
  google.protobuf.Int32Value starting_point_id = 3;

  // Allowlisted dasher IDs
  repeated google.protobuf.Int64Value allowlist_dasher_ids = 4;

  // Start time
  google.protobuf.Timestamp activation_time = 5;

  // End time
  google.protobuf.Timestamp activation_until_time = 6;

  // Metadata
  map<string, string> metadata = 7;

  // Experiment variant
  google.protobuf.StringValue variant = 8;

  // Minimum hourly pay
  money.MonetaryFields minimum_hourly_pay = 10;

  // Delivery pay modification
  money.MonetaryFields delivery_pay_modification = 9;

  reserved 11;
  reserved "pay_multiplier_meters"; // deprecated
  // Effort pay per meter
  google.protobuf.DoubleValue pay_multiplier_per_meter = 12;
}

// Time mode pay campaign interval
message TimeModePayCampaignInterval {
  // is enabled
  google.protobuf.BoolValue is_enabled = 1;

  // Pay campaigns
  repeated PayCampaignInterval pay_campaigns = 2;
}

// Get Active pay campaigns request
message GetActiveDasherPayCampaignsRequest {
  // Starting point ID
  google.protobuf.Int32Value starting_point_id = 1;

  // Active time
  google.protobuf.Timestamp active_time = 2;

  // Active epoch
  google.protobuf.UInt64Value active_time_epoch = 3;

  // Dasher ID
  google.protobuf.Int64Value dasher_id = 4;
}

// GetPayCampaignsForOnshiftDasherRequest
message GetPayCampaignsForOnshiftDasherRequest {
  // Dasher ID
  google.protobuf.Int64Value dasher_id = 1;

  // Delivery ID
  google.protobuf.Int64Value delivery_id = 2;
}

// GetPayCampaignsForOnshiftDasherResponse
message GetPayCampaignsForOnshiftDasherResponse {
  // Pay campaigns
  repeated PayCampaignInterval pay_campaigns = 1;

  // Time mode pay campaigns
  TimeModePayCampaignInterval time_mode_pay_campaigns = 2;
}

// GetActiveDasherPayCampaignsResponse
message GetActiveDasherPayCampaignsResponse {
  // Pay campaigns
  repeated PayCampaignInterval pay_campaigns = 1;

  // Time mode pay campaigns
  TimeModePayCampaignInterval time_mode_pay_campaigns = 2;
}

// BulkCreateDasherPayCampaignRequest
message BulkCreateDasherPayCampaignRequest {
  // Starting point IDs
  repeated google.protobuf.Int32Value starting_point_ids = 1;

  // Allowlisted dasher IDs
  repeated google.protobuf.Int64Value allowlist_dasher_ids = 2;

  // Start time
  google.protobuf.Timestamp activation_time = 3;

  // End time
  google.protobuf.Timestamp activation_until_time = 4;

  // Metadata
  map<string, string> metadata = 5;

  // Minimum hourly pay
  money.MonetaryFields minimum_hourly_pay = 6;

  // Delivery pay modification
  money.MonetaryFields delivery_pay_modification = 7;
}

// BulkCreateDasherPayCampaignResponse
message BulkCreateDasherPayCampaignResponse {
  // Pay campaigns
  repeated PayCampaignInterval pay_campaigns = 1;
}

// CreateDasherPayCampaignRequest
message CreateDasherPayCampaignRequest {
  // Whether it's active
  google.protobuf.BoolValue is_active = 1;

  // Starting point ID
  google.protobuf.Int32Value starting_point_id = 2;

  // Allowlisted dasher IDs
  repeated google.protobuf.Int64Value allowlist_dasher_ids = 4;

  // Start time
  google.protobuf.Timestamp activation_time = 5;

  // End time
  google.protobuf.Timestamp activation_until_time = 6;

  // Metadata
  map<string, string> metadata = 8;

  // Experiment variant
  google.protobuf.StringValue variant = 9;

  // Minimum hourly pay
  money.MonetaryFields minimum_hourly_pay = 10;

  // Delivery pay modification
  money.MonetaryFields delivery_pay_modification = 11;
}

// CreateDasherPayCampaignResponse
message CreateDasherPayCampaignResponse {
  // Pay campaign
  PayCampaignInterval pay_campaign = 1;
}

// GetAllDasherPayCampaignsRequest
message GetAllDasherPayCampaignsRequest {
  // Starting point ID
  google.protobuf.Int32Value starting_point_id = 1;

  // Start time epoch
  google.protobuf.UInt64Value active_time_epoch_second = 2;

  // End time epoch
  google.protobuf.UInt64Value active_until_time_epoch_second = 3;

  // Dasher ID
  google.protobuf.Int64Value dasher_id = 4;
}

// GetAllDasherPayCampaignsResponse
message GetAllDasherPayCampaignsResponse {
  // Pay campaigns
  repeated PayCampaignInterval pay_campaigns = 1;
}

// GetAllDasherPayCampaignsBySpRequest
message GetAllDasherPayCampaignsBySpRequest {
  // Starting point ID
  repeated google.protobuf.Int32Value starting_point_id = 1;

  // Start time epoch
  google.protobuf.UInt64Value active_time_epoch_second = 2;

  // End time epoch
  google.protobuf.UInt64Value active_until_time_epoch_second = 3;

  // Dasher ID
  google.protobuf.Int64Value dasher_id = 4;
}

// GetAllDasherPayCampaignsBySpResponse
message GetAllDasherPayCampaignsBySpResponse {
  // Pay campaigns
  repeated PayCampaignInterval pay_campaigns = 1;

  // Time mode pay campaigns
  repeated PayCampaignInterval time_mode_pay_campaigns = 2;
}

// GetUpcomingPayCampaignsForDasherRequest
message GetUpcomingPayCampaignsForDasherRequest {
  // Dasher ID
  google.protobuf.Int64Value dasher_id = 1;
}

// GetUpcomingPayCampaignsForDasherResponse
message GetUpcomingPayCampaignsForDasherResponse {
  // Starting point pay campaigns
  map<int32, StartingPointPayCampaigns> starting_point_pay_campaigns = 1;
}

// GetStartingPointSelectionsForDasherRequest
message GetStartingPointSelectionsForDasherRequest {
  // Dasher ID
  google.protobuf.Int64Value dasher_id = 1;
}

// GetStartingPointSelectionsForDasherResponse
message GetStartingPointSelectionsForDasherResponse {
  // Starting point selection pay campaigns
  map<int32, StartingPointSelectionPayCampaigns> starting_point_selection_pay_campaigns = 1;
}

// SaveStartingPointSelectionsForDasherRequest
message SaveStartingPointSelectionsForDasherRequest {
  // Dasher ID
  google.protobuf.Int64Value dasher_id = 1;

  // Selected starting point IDs
  repeated google.protobuf.Int32Value selected_starting_point_ids = 2;
}

// GetPayCampaignsByIdRequest
message GetPayCampaignsByIdRequest {
  // Pay campaign IDs
  repeated google.protobuf.StringValue pay_campaign_ids = 1;
}

// GetPayCampaignsByIdResponse
message GetPayCampaignsByIdResponse {
  // Pay campaigns
  repeated PayCampaignInterval pay_campaigns = 1;
}

// UpdateDasherPayCampaignsRequest
message UpdateDasherPayCampaignsRequest {
  // Pay campaign patch requests
  repeated PayCampaignInterval patch_requests = 1;
}

// UpdateDasherPayCampaignsResponse
message UpdateDasherPayCampaignsResponse {
  // Updated pay campaigns
  repeated PayCampaignInterval pay_campaigns = 1;
}

// ListDasherPayCampaignsRequest
message ListDasherPayCampaignsRequest {
  // Total limit of challenges to be listed
  google.protobuf.Int32Value limit = 1;

  // Offset of challenges to be listed
  google.protobuf.Int32Value offset = 2;

  // Starting Point
  StartingPoint starting_point = 3;

  // Timestamp of the date to filter
  google.protobuf.Timestamp date = 4;
}

// ListDasherPayCampaignsResponse
message ListDasherPayCampaignsResponse {
  // Pay campaigns
  repeated PayCampaignInterval pay_campaigns = 1;
}

// ListDasherPayCampaignsByStartingPointIdRequest
message ListDasherPayCampaignsByStartingPointIdRequest {
  // Total limit of challenges to be listed
  google.protobuf.Int32Value limit = 1;

  // Offset of challenges to be listed
  google.protobuf.Int32Value offset = 2;

  // ID of starting Point
  google.protobuf.Int32Value starting_point_id = 3;
}

// ListDasherPayCampaignsByStartingPointIdResponse
message ListDasherPayCampaignsByStartingPointIdResponse {
  // Pay campaigns
  repeated PayCampaignInterval pay_campaigns = 1;
}

// DeleteDasherPayCampaignsRequest
message DeleteDasherPayCampaignsRequest {
  // Pay campaign IDs
  repeated google.protobuf.StringValue pay_campaign_ids = 1;
}

// DeleteDasherPayCampaignsResponse
message DeleteDasherPayCampaignsResponse {
  // Deleted pay campaign IDs
  repeated google.protobuf.StringValue pay_campaign_ids = 1;
}

// SaveStartingPointSelectionsForDasherResponse
message SaveStartingPointSelectionsForDasherResponse {}

// A list of pay campaigns available in a starting point
message StartingPointPayCampaigns {
  // Starting point
  StartingPoint starting_point = 1;

  // Starting point location
  common.Location starting_point_location = 2;

  // Pay campaigns
  repeated PayCampaignInterval pay_campaigns = 3;
}

// A starting point that indicates whether there will be pay campaigns
message StartingPointSelectionPayCampaigns {
  // Starting point
  StartingPoint starting_point = 1;

  // Starting point location
  common.Location starting_point_location = 2;

  // Is SP selected for promos
  google.protobuf.BoolValue is_selected_for_promos = 3;
}
