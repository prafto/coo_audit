syntax = "proto3";

package dx_promotion_platform.v1;

import "common/service_client_config.proto";
import "dasher_service/dasher_tier.proto";
import "dx_promotion_platform/incentive.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.dx_promotion_platform";

// RPCs defined to handle rewards
service DasherRewardService {
  option (service_client.client_config).service_name = "dx-promotion-platform";
  option (service_client.client_config).service_app = "web";
  option (service_client.client_config).response_attempt_timeout_millis = 2500;

  // Create a reward
  rpc CreateReward(CreateRewardRequest) returns (CreateRewardResponse);

  // Add reward for a dasher
  rpc AddRewardsForDasher(AddRewardsForDasherRequest) returns (AddRewardsForDasherResponse);

  // Expire Reward for a dasher
  rpc ExpireRewardsForDasher(ExpireRewardsForDasherRequest) returns (ExpireRewardsForDasherResponse);

  // Check if a dasher is eligible for a reward
  rpc CheckRewardEligibilityForDasher(CheckRewardEligibilityForDasherRequest) returns (CheckRewardEligibilityForDasherResponse);

  // Get dasher reward given an incentive type
  rpc GetRewards(GetRewardsRequest) returns (GetRewardsResponse);

  // Get rewards for a dasher
  rpc GetDasherRewards(GetDasherRewardsRequest) returns (GetDasherRewardsResponse);

  // Create and expire rewards for dasher
  rpc CreateAndExpireDasherRewards(CreateAndExpireDasherRewardsRequest) returns (CreateAndExpireDasherRewardsResponse);

  // Get Loyalty Pass Reward for a Dasher
  rpc GetLoyaltyPassForDasher(GetLoyaltyPassForDasherRequest) returns (GetLoyaltyPassForDasherResponse);

  // Redeem Loyalty Pass Reward for a Dasher
  rpc RedeemLoyaltyPassForDasher(RedeemLoyaltyPassForDasherRequest) returns (RedeemLoyaltyPassForDasherResponse);

  // Get reward promotion for dasher V2
  rpc GetRewardPromotionForDasherV2(GetRewardPromotionForDasherV2Request) returns (GetRewardPromotionForDasherV2Response);

  // Update MxOptOut reward for a Dasher
  rpc UpdateMxOptOutRewardForDasher(UpdateMxOptOutRewardForDasherRequest) returns (UpdateMxOptOutRewardForDasherResponse);
}

// CreateReward Request
message CreateRewardRequest {
  // Incentive Type
  IncentiveType incentive_type = 1;
  // Name of the incentive
  google.protobuf.StringValue incentive_name = 2;
  // Short Description of the incentive
  google.protobuf.StringValue incentive_description = 3;
  // Education text for the incentive
  google.protobuf.StringValue education = 5;
}

// CreateReward Response
message CreateRewardResponse {
  // Id of the incentive
  google.protobuf.StringValue incentive_id = 1;
}

// AddRewardsForDasher Request
message AddRewardsForDasherRequest {
  // ID of the dasher
  google.protobuf.StringValue dasher_id = 1;
  // List of rewards to add
  repeated IncentiveType rewards = 2;
  // Rating tier of the dasher
  google.protobuf.StringValue rating_tier = 3;
  // Timestamp of reward expire time
  google.protobuf.Timestamp end_time = 4;
}

// AddRewardsForDasher Response
message AddRewardsForDasherResponse {}

// ExpireRewardsForDasher Request
message ExpireRewardsForDasherRequest {
  // ID of the dasher
  google.protobuf.StringValue dasher_id = 1;
  // List of  rewards to expire
  repeated IncentiveType rewards = 2;
  // Timestamp of reward expire time
  google.protobuf.Timestamp end_time = 4;
}

// ExpireRewardsForDasher Response
message ExpireRewardsForDasherResponse {}

// CheckRewardEligibilityForDasher Request
message CheckRewardEligibilityForDasherRequest {
  // ID of the dasher
  google.protobuf.StringValue dasher_id = 1;
  // Type of the incentive
  IncentiveType incentive_type = 2;
  // Time to check for the eligibility
  google.protobuf.Timestamp time = 3;
}

// CheckRewardEligibilityForDasher Response
message CheckRewardEligibilityForDasherResponse {
  // Bool value for dasher's reward eligibility
  google.protobuf.BoolValue is_eligible_for_reward = 1;
}

// GetRewards Request
message GetRewardsRequest {
  // List of  incentive ID
  repeated google.protobuf.StringValue incentive_ids = 1;
}

// GetRewards Response
message GetRewardsResponse {
  // List of Dasher incentives
  repeated DasherIncentive incentives = 1;
}

// GetDasherRewards Request
message GetDasherRewardsRequest {
  // ID of the dasher
  google.protobuf.StringValue dasher_id = 1;
}

//GetDasherRewards Request
message GetDasherRewardsResponse {
  // List of Dasher incentives
  repeated DasherIncentive incentives = 1;
}

// CreateAndExpireDasherRewards request
message CreateAndExpireDasherRewardsRequest {
  // ID of the dasher
  string dasher_id = 1;
  // New tier of the dasher
  dasher_service.tier.TierType new_tier = 2;
  // List of new incentive IDs that we want to create
  repeated google.protobuf.StringValue new_incentive_ids = 3;
  // List of old incentive IDs that we want to expire
  repeated google.protobuf.StringValue old_incentive_ids = 4;
}

// Empty response
message CreateAndExpireDasherRewardsResponse {
  // List of new incentive IDs that got created
  repeated google.protobuf.StringValue created_incentive_ids = 3;
}

// GetLoyaltyPassForDasher Request
message GetLoyaltyPassForDasherRequest {
  // ID of the dasher
  google.protobuf.StringValue dasher_id = 1;
}

// GetLoyaltyPassForDasher Response
message GetLoyaltyPassForDasherResponse {
  // max number of passes that can be accrued or redeemed
  google.protobuf.Int32Value max_passes = 1;
  // Number of days required to accrue a pass
  google.protobuf.Int32Value accrual_criteria_days = 4;
  // State of the Loyalty Pass Reward - accruing or redeeming
  oneof state {
    // Accruing state
    PassAccrued pass_accrued = 2;
    // Redeeming state
    PassRedeemed pass_redeemed = 3;
  }
}

// Accrual state of Loyalty Pass Reward
message PassAccrued {
  // number of passes accrued
  google.protobuf.Int32Value passes_accrued = 1;
  // days to complete next accrual
  google.protobuf.Int32Value days_to_next_accrual = 2;
}

// Redeem state of Loyalty Pass Reward
message PassRedeemed {
  // number of passes that can be redeemed
  google.protobuf.Int32Value redeemable_passes = 1;
  // check if is redeemed state
  google.protobuf.BoolValue is_redeemed = 2;
  // expiry timestamp of current redemption, null if is_redeemed is false
  google.protobuf.Timestamp expiry_time = 3;
}

// max Passes reached state of Loyalty Pass Reward
message MaxPassesReached {
  // number of passes that can be redeemed
  google.protobuf.Int32Value redeemable_passes = 1;
}

// RedeemLoyaltyPassForDasher Request
message RedeemLoyaltyPassForDasherRequest {
  // ID of the dasher
  google.protobuf.StringValue dasher_id = 1;
}

// RedeemLoyaltyPassForDasher Response
message RedeemLoyaltyPassForDasherResponse {
  // Pass expiry timestamp
  google.protobuf.Timestamp expiry_time = 1;
}

//GetRewardPromotionForDasherV2 Request
message GetRewardPromotionForDasherV2Request {
  // ID of the dasher
  google.protobuf.StringValue dasher_id = 1;
}

//GetRewardPromotionForDasherV2 Response
message GetRewardPromotionForDasherV2Response {
  // List of rewards
  repeated Reward rewards = 1;
}

// Reward
message Reward {
  // incentive type
  IncentiveType reward_type = 1;
  // Promotion params
  oneof promotion_parameters {
    // MxOptOut params list
    MxOptOutPromotionParameters mx_opt_out_promotion_parameter_list = 2;
    // LoyaltyPass params
    LoyaltyPassPromotionParameters loyalty_pass_promotion_parameter = 4;
  }
  // Promotion progress
  oneof promotion_progress_state {
    // MxOptOut progress state
    MxOptOutPromotionProgressState mx_opt_out_progress_state = 3;
    // LoyaltyPass progress state
    LoyaltyPassPromotionProgressState loyalty_pass_progress_state = 5;
  }
}

// Reward params for MxOptOut
message MxOptOutPromotionParameters {
  // List of MxOptOutParamsForTier
  repeated MxOptOutParamsForTier mx_opt_out_params_for_tier = 1;
}

// Reward params for MxOptOut for a tier
message MxOptOutParamsForTier {
  // Tier type
  dasher_service.tier.TierType tier_type = 1;
  // max number of Mx can be blocked
  google.protobuf.Int32Value max_blocked_mx = 2;
  // default duration of blocking
  google.protobuf.Int64Value block_duration_seconds = 3;
}

// Progress state for MxOptOut
message MxOptOutPromotionProgressState {
  // Current blocked Mx list
  repeated BlockedMx current_blocked_mx_list = 3;
  // History blocked Mx list
  repeated BlockedMx history_blocked_mx_list = 4;
  // Dasher's current tier type
  dasher_service.tier.TierType tier_type = 5;
}

//Blocked Mx
message BlockedMx {
  // Mx id
  google.protobuf.Int32Value mx_id = 1;
  // expiry timestamp of blocking
  google.protobuf.Timestamp expiry_time = 2;
}

// UpdateMxOptOutRewardForDasher Request
message UpdateMxOptOutRewardForDasherRequest {
  // ID of the dasher
  google.protobuf.StringValue dasher_id = 1;
  // ID of the Mx
  google.protobuf.Int32Value mx_id = 2;
  // Action type (BLOCK, UNBLOCK)
  MxOptOutActionType action_type = 3;
  // MxOptOutActionType
  enum MxOptOutActionType {
    // invalid
    MX_OPT_OUT_ACTION_TYPE_UNSPECIFIED = 0;
    // block action
    MX_OPT_OUT_ACTION_TYPE_BLOCK = 1;
    // unblock action
    MX_OPT_OUT_ACTION_TYPE_UNBLOCK = 2;
  }
}

// UpdateMxOptOutRewardForDasher Response
message UpdateMxOptOutRewardForDasherResponse {
  // empty response
  google.protobuf.Empty empty = 1;
}

// LoyaltyPassPromotionParameters
message LoyaltyPassPromotionParameters {
  // max number of passes that can be accrued or redeemed
  google.protobuf.Int32Value max_passes = 1;
  // Number of days required to accrue a pass
  google.protobuf.Int32Value accrual_criteria_days = 2;
}

// LoyaltyPassPromotionProgressState
message LoyaltyPassPromotionProgressState {
  // State of the Loyalty Pass Reward - accruing or redeeming or max passes reached
  oneof state {
    // Accruing state
    PassAccrued pass_accrued = 1;
    // Redeeming state
    PassRedeemed pass_redeemed = 2;
    // Max passes reached state
    MaxPassesReached max_passes_reached = 3;
  }
}
