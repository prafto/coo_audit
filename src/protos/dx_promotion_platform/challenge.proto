syntax = "proto3";

package dx_promotion_platform.v1;

import "common/money.proto";
import "common/service_client_config.proto";
import "dx_promotion_platform/common.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.dx_promotion_platform";

// RPCs defined to handle dasher challenges
service DasherChallengeService {
  option (service_client.client_config).service_name = "dx-promotion-platform";
  option (service_client.client_config).service_app = "web";
  option (service_client.client_config).response_attempt_timeout_millis = 2500;

  // Get all challenges for a specific dasher at a specific location
  rpc GetAllChallenges(GetAllChallengesRequest) returns (GetAllChallengesResponse);

  // Get challenge progress for a specific challenge
  rpc GetChallengeProgress(GetChallengeProgressRequest) returns (GetChallengeProgressResponse);

  // Patch challenge progress's completion_shown_at field
  rpc PatchChallengeProgress(PatchChallengeProgressRequest) returns (PatchChallengeProgressResponse);

  // Get all challenge progresses a dasher qualified for based on his default starting point
  rpc GetAllChallengeProgress(GetAllChallengeProgressRequest) returns (GetAllChallengeProgressResponse);

  // Create multiple dasher challenges
  rpc CreateChallenges(CreateChallengesRequest) returns (CreateChallengesResponse);

  // Disable specific dasher challenges
  rpc DisableChallenges(DisableChallengesRequest) returns (DisableChallengesResponse);

  // Get dasher challenge by id
  rpc ListChallengesByIds(ListChallengesByIdsRequest) returns (ListChallengesByIdsResponse);

  // List dasher challenges
  rpc ListAllChallenges(ListAllChallengesRequest) returns (ListAllChallengesResponse);

  // Get streak pay for delivery if any
  rpc GetStreakPay(GetStreakPayRequest) returns (GetStreakPayResponse);
}

// Progress of a single rule of a challenge
message ChallengeRuleProgress {
  // Current progress completed so far
  double current = 1;

  // Goal to reach
  double goal = 2;

  // Short description
  string display_text = 3;
}

// A single rule for the challenge, with the rule progress
message ChallengeRule {
  // Rule type enumeration
  enum RuleType {
    // Empty rule type
    RULE_TYPE_UNSPECIFIED = 0;

    // Number of delivery dropoffs
    RULE_TYPE_NUM_DELIVERIES = 1;

    // Number of delivery dropoffs in peak hours
    RULE_TYPE_NUM_PEAK_DELIVERIES = 2;

    // Dasher's order acceptance rate
    RULE_TYPE_ACCEPTANCE_RATE = 3;

    // Dasher's order completion rate
    RULE_TYPE_COMPLETION_RATE = 4;

    // Acceptance-Streak challenge
    RULE_TYPE_ACCEPT_STREAK = 5;
  }

  // Rule type for this rule
  RuleType rule_type = 1;

  // Short description for the rule
  string display_text = 2;

  // Progress for this rule
  ChallengeRuleProgress rule_progress = 3;
}

// A dasher challenge
message DasherChallenge {
  // ID for the challenge
  google.protobuf.StringValue id = 1;

  // Name for the challenge
  string name = 2;

  // Reward amount if the challenge is completed
  money.MonetaryFields reward_amount = 3;

  // Eligible starting points
  repeated StartingPoint starting_points = 4;

  // Timestamp this challenge will become active
  google.protobuf.Timestamp activation_time = 5;

  // Timestamp this challenge is active until
  google.protobuf.Timestamp active_until_time = 6;
}

// A dasher challenge for display by forward
// contains both integer ID and uuid
message DasherChallengeForDisplay {
  // integer ID for the challenge
  google.protobuf.StringValue id = 1;

  // UUID for the challenge
  google.protobuf.StringValue uuid = 2;

  // Name for the challenge
  google.protobuf.StringValue name = 3;

  // Description for the challenge
  google.protobuf.StringValue description = 4;

  // Reward amount if the challenge is completed
  google.protobuf.Int32Value reward_amount = 5;

  // Rules for completing the challenge
  google.protobuf.StringValue rules = 6;

  // Eligible market ID
  google.protobuf.Int32Value market_id = 7;

  // Eligible submarket IDs
  repeated google.protobuf.Int32Value submarket_ids = 8;

  // Eligible starting point IDs
  repeated google.protobuf.Int32Value starting_point_ids = 9;

  // Eligible dasher IDs
  repeated google.protobuf.Int64Value dasher_ids = 10;

  // Whether is active
  google.protobuf.BoolValue is_active = 11;

  // Timestamp this challenge will become active
  google.protobuf.Timestamp activation_time = 12;

  // Timestamp this challenge is active until
  google.protobuf.Timestamp active_until_time = 13;

  // Creator's user id
  google.protobuf.Int32Value created_by = 14;

  // Dasher cohort information
  google.protobuf.StringValue dasher_cohort = 15;
}

// A dasher challenge for creation by admin upload tools
message DasherChallengeForCreating {
  // Name for the challenge
  google.protobuf.StringValue name = 1;

  // Description for the challenge
  google.protobuf.StringValue description = 2;

  // Reward amount if the challenge is completed
  google.protobuf.Int32Value reward_amount = 3;

  // Rules for completing the challenge
  google.protobuf.StringValue rules = 4;

  // Eligible market ID
  google.protobuf.Int32Value market_id = 5;

  // Eligible submarket IDs
  repeated google.protobuf.Int32Value submarket_ids = 6;

  // Eligible starting point IDs
  repeated google.protobuf.Int32Value starting_point_ids = 7;

  // Eligible dasher IDs
  repeated google.protobuf.Int64Value dasher_ids = 8;

  // Whether is active
  google.protobuf.BoolValue is_active = 9;

  // Timestamp this challenge will become active
  google.protobuf.Timestamp activation_time = 10;

  // Timestamp this challenge is active until
  google.protobuf.Timestamp active_until_time = 11;

  // Creator's user id
  google.protobuf.Int32Value created_by = 12;

  // Dasher cohort information
  google.protobuf.StringValue dasher_cohort = 13;
}

// Progress for a dasher challenge, with all its rules
message DasherChallengeProgress {
  // ID for the challenge
  google.protobuf.StringValue challenge_id = 1;

  // Name for the challenge
  string challenge_name = 2;

  // Reward amount if the challenge is completed
  money.MonetaryFields reward_amount = 3;

  // Eligible starting points
  repeated StartingPoint starting_points = 4;

  // Rules for the challenge
  repeated ChallengeRule rules = 5;

  // Eligible submarkets
  repeated Submarket submarkets = 6;

  // Timestamp this challenge will become active
  google.protobuf.Timestamp activation_time = 7;

  // Timestamp this challenge is active until
  google.protobuf.Timestamp active_until_time = 8;

  // Timestamp this challenge completes
  google.protobuf.Timestamp completed_at = 9;

  // Timestamp this challenge's completion message is shown to the dasher
  google.protobuf.Timestamp completion_shown_at = 10;

  // flag to tell if we want the banner to be clickable
  bool is_punch_card_challenge = 11;
}

// Request for challenges the dasher is qualified for
message GetAllChallengesRequest {
  // ID for the dasher
  google.protobuf.StringValue dasher_id = 1;

  // Latitude for the dasher
  double lat = 2;

  // Longitude for the dasher
  double lng = 3;
}

// Response for GetAllChallenges
message GetAllChallengesResponse {
  // Zero or more dasher challenges
  repeated DasherChallenge challenges = 1;
}

// Request for an individual challenge's progress
message GetChallengeProgressRequest {
  // ID for the dasher
  google.protobuf.StringValue dasher_id = 1;

  // ID for the challenge
  google.protobuf.StringValue challenge_id = 2;
}

// Response for GetChallengeProgress
message GetChallengeProgressResponse {
  // Challenge progress
  DasherChallengeProgress challenge_progress = 1;
}

// Patch request for a challenge progress's completion_shown_at field
message PatchChallengeProgressRequest {
  // ID for the dasher
  google.protobuf.StringValue dasher_id = 1;

  // ID for the challenge
  google.protobuf.StringValue challenge_id = 2;

  // Timestamp the challenge's completion message is shown to the dasher
  google.protobuf.Timestamp completion_shown_at = 3;
}

// Response for PatchChallengeProgress
message PatchChallengeProgressResponse {}

// Request for all challenge progresses a dasher is qualified for
message GetAllChallengeProgressRequest {
  // ID for the dasher
  google.protobuf.StringValue dasher_id = 1;

  // ID for dasher's starting point
  google.protobuf.StringValue starting_point_id = 2;

  // Dasher's current shift ID
  google.protobuf.StringValue shift_id = 3;
}

// Response for GetAllChallengeProgress
message GetAllChallengeProgressResponse {
  // Zero or more challenge progresses
  repeated DasherChallengeProgress challenge_progresses = 1;
}

// Request for CreateChallenges
message CreateChallengesRequest {
  // Zero or more DasherChallengeForCreating messages
  repeated DasherChallengeForCreating challenges = 1;
}

// Response for CreateChallenges
message CreateChallengesResponse {
  // Zero or more challenge IDs
  repeated google.protobuf.StringValue challenge_ids = 1;
}

// Request for DisableChallenges
message DisableChallengesRequest {
  // ID for the challenge (assumes it is UUID)
  repeated google.protobuf.StringValue challenge_id = 1;

  // User id of person who disables
  google.protobuf.Int32Value disabled_by = 2;
}

// Response for DisableChallenges
message DisableChallengesResponse {
  // ID for each successful challenge disable
  repeated google.protobuf.StringValue challenge_id = 1;
}

// Request for ListChallenges based on challenge id
message ListChallengesByIdsRequest {
  // ID for each challenge
  repeated google.protobuf.StringValue challenge_id = 1;
}

// Response for ListChallengesById
message ListChallengesByIdsResponse {
  // Resulting list of Challenges
  repeated DasherChallengeForDisplay challenge = 1;
}

// Request for ListChallenges with a generic listing
message ListAllChallengesRequest {
  // Total limit of challenges to be listed
  google.protobuf.Int32Value limit = 1;
  // Offset of challenges to be listed
  google.protobuf.Int32Value offset = 2;
}

// Response for ListAllChallenges
message ListAllChallengesResponse {
  // Resulting list of Challenges
  repeated DasherChallengeForDisplay challenge = 1;
}

// Get streak pay request
message GetStreakPayRequest {
  // dasher ID
  google.protobuf.StringValue dasher_id = 1;

  // delivery ID
  google.protobuf.StringValue delivery_id = 2;

  // shift ID
  google.protobuf.StringValue shift_id = 3;
}

// Get streak pay response
message GetStreakPayResponse {
  // streak pay monetary fields
  money.MonetaryFields streak_pay = 1;
}
