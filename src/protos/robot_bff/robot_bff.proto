syntax = "proto3";

package robot_bff.v1;

import "robot/fleet_payload.proto";
import "robot/remote_assist_payload.proto";
import "robot/robot_payload.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.robot_bff.v1";

// RobotBFFService services gRPC APIs for RobotBFF.
service RobotBFFService {
  // RobotCheckin updates the robot states
  rpc RobotCheckin(RobotCheckinRequest) returns (RobotCheckinResponse) {}
  // ListRobots returns a list of robot states
  rpc ListRobots(ListRobotsRequest) returns (ListRobotsResponse) {}
  // OperatorCheckin updates the operator(RAC) states
  rpc OperatorCheckin(OperatorCheckinRequest) returns (OperatorCheckinResponse);
  // Connect initiates a connection between a robot and an operator
  rpc Connect(ConnectRequest) returns (ConnectResponse);
  // Disconnect stops a remote assist connection between a robot and an operator
  rpc Disconnect(DisconnectRequest) returns (DisconnectResponse);
}

// RobotCheckinRequest updates the robot state
message RobotCheckinRequest {
  // Request data
  robot.v1.RobotCheckinRequestPayload payload = 1;
}

// RobotCheckinResponse response to a robot checkin
message RobotCheckinResponse {
  // Response data
  robot.v1.RobotCheckinResponsePayload payload = 1;
}

// ListRobotsRequest is used to get a list of robots
// It includes filters and other pagination options
message ListRobotsRequest {
  // Request data
  robot.v1.ListRobotsRequestPayload payload = 1;
}

// ListRobotsResponse is the response for a ListRobots query
message ListRobotsResponse {
  // Response data
  robot.v1.ListRobotsResponsePayload payload = 1;
}

// OperatorCheckinRequest updates the operator(RAC) state
message OperatorCheckinRequest {
  // Request data
  robot.v1.OperatorCheckinRequestPayload payload = 1;
}

// OperatorCheckinResponse response to an operator checkin
message OperatorCheckinResponse {
  // Response data
  robot.v1.OperatorCheckinResponsePayload payload = 1;
}

// ConnectRequest contains the necessary data to connect a robot to an operator
// This can only be issued from an operator.
message ConnectRequest {
  // Request data
  robot.v1.ConnectRequestPayload payload = 1;
}

// ConnectResponse is the confirmation of a successful connection to a robot
message ConnectResponse {
  // Response data
  robot.v1.ConnectResponsePayload payload = 1;
}

// DisconnectRequest signals to disconnect self from an operator or robot.
// This can be issued from either an operator or a robot.
message DisconnectRequest {
  // Request data
  robot.v1.DisconnectRequestPayload payload = 1;
}

// DisconnectResponse is issued when the disconnect was successful
message DisconnectResponse {
  // Response data
  robot.v1.DisconnectResponsePayload payload = 1;
}
