syntax = "proto3";
package workflow_platform.workflow_platform_test_framework.v1;

import "common/service_client_config.proto";
import "doordash.api/annotations.proto";
import "experience_reliability_service/workflow_platform.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.workflow_platform";

/**
   Workflow Test APIs. This service serve all endpoints necessary to execute tests against workflows
*/
service WorkflowPlatformTestFrameworkService {
  option (doordash.api.service) = {
    name: "workflow-platform"
    url: "workflow-platform-web.service.prod.ddsd"
    port: 50051
    name_spaces: ["workflow-platform"]
    api_key_name: "WORKFLOW_PLATFORM_UG_API_KEY"
    owner: {
      id: "workflow-platform-alerts"
      name: "workflow-platform"
      slack_channel: "#ask-workflow-platform-eng"
      email_alias: "team-customer-experience-platform@doordash.com"
    }
    target_products: [INTERNAL]
  };
  /**
     Create Test Parameters for a Test Suite
  */
  rpc CreateTestParameters(CreateTestParametersRequest) returns (CreateTestParametersResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 10000;
  }

  /**
     Get Parameters instance of a test suite
  */
  rpc GetTestParameters(GetTestParametersRequest) returns (GetTestParametersResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 10000;
  }

  /**
     Update Test Parameters
  */
  rpc UpdateTestParameters(UpdateTestParametersRequest) returns (UpdateTestParametersResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 10000;
  }

  /**
     Create Test Scenario
  */
  rpc CreateTestScenario(CreateTestScenarioRequest) returns (CreateTestScenarioResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 10000;
  }

  /**
     Get Test Scenarios
  */
  rpc GetTestScenarios(GetTestScenariosRequest) returns (GetTestScenariosResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 10000;
  }

  /**
     Update Test Scenario
  */
  rpc UpdateTestScenario(UpdateTestScenarioRequest) returns (UpdateTestScenarioResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 10000;
  }

  /**
     Delete Test Scenario
  */
  rpc DeleteTestScenario(DeleteTestScenarioRequest) returns (DeleteTestScenarioResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 10000;
  }

  /**
     Execute a test scenario
  */
  rpc ExecuteTestScenario(ExecuteTestScenarioRequest) returns (ExecuteTestScenarioResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 10000;
  }

  /**
     Execute all scenarios within the test suite
  */
  rpc ExecuteWorkflowTestSuite(ExecuteWorkflowTestSuiteRequest) returns (ExecuteWorkflowTestSuiteResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 60000;
  }

  /**
     Get Workflow Test Suite Summaries
  */
  rpc GetWorkflowTestSuiteSummaries(GetWorkflowTestSuiteSummariesRequest) returns (GetWorkflowTestSuiteSummariesResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 10000;
  }

  /**
     Get Test Scenario Result
  */
  rpc GetTestScenarioResult(GetTestScenarioResultRequest) returns (GetTestScenarioResultResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 10000;
  }

  /**
     Create a workflow test suite is a collection of test scenarios
  */
  rpc CreateWorkflowTestSuite(CreateWorkflowTestSuiteRequest) returns (CreateWorkflowTestSuiteResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 10000;
  }

  /**
     Delete a workflow test suite
  */
  rpc DeleteWorkflowTestSuite(DeleteWorkflowTestSuiteRequest) returns (DeleteWorkflowTestSuiteResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 10000;
  }

  /**
     Update a workflow test suite
  */
  rpc UpdateWorkflowTestSuite(UpdateWorkflowTestSuiteRequest) returns (UpdateWorkflowTestSuiteResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 10000;
  }

  /**
     Get All Test Suites by workflow
  */
  rpc GetWorkflowTestSuites(GetWorkflowTestSuitesRequest) returns (GetWorkflowTestSuitesResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 10000;
  }

  /**
     Get one Test Suite
  */
  rpc GetWorkflowTestSuite(GetWorkflowTestSuiteRequest) returns (GetWorkflowTestSuiteResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 10000;
  }

  /**
     Copy all test suites (including test scenarios and parameters) from one workflow to the other.
     This will skip copying test suites and test scenarios that already exist on the target workflow (checked by their names)
  */
  rpc CopyTestSuites(CopyTestSuitesRequest) returns (CopyTestSuitesResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 30000;
  }

  /**
     Get workflow configs. Basically list all workflows that have type WORKFLOW_TEST_FRAMEWORK.
     This will also list all of their previous (ARCHIVED) versions if client did not pass a workflow_test_suite_uuid.
  */
  rpc GetWorkflowBaseConfigs(GetWorkflowBaseConfigsRequest) returns (GetWorkflowBaseConfigsResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 30000;
    option (google.api.http) = {get: "/workflow-platform/v1/workflows/tests/base-configs"};
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: PROD
      authorization: [DD_USER]
      role_based_authorization: {
        mode: ANY,
        roles: ["perm_support_workflow_configurator"]
      }
      authentication_config: {enable_okta_verification: true}
      target_products: [INTERNAL]
      slo_config: {
        critical_alerts_enabled: false
        p99_latency: 3
      }
    };
  }

  /**
     Execute a collection of test suites.
  */
  rpc ExecuteTestSuiteCollection(ExecuteTestSuiteCollectionRequest) returns (ExecuteTestSuiteCollectionResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 300000; // 5min
    option (google.api.http) = {post: "/workflow-platform/v1/workflows/{workflow_id}/versions/{workflow_version}/tests/run"};
    option (doordash.api.endpoint) = {
      tier: T2
      lifecycle: TEST
      authorization: [DD_USER]
      role_based_authorization: {
        mode: ANY,
        roles: ["perm_support_workflow_configurator"]
      }
      authentication_config: {enable_okta_verification: true}
      target_products: [INTERNAL]
      slo_config: {
        critical_alerts_enabled: false
        p99_latency: 45
      }
    };
  }

  /**
     Get all test suite collection results
  */
  rpc GetTestSuiteCollectionResults(GetTestSuiteCollectionResultsRequest) returns (GetTestSuiteCollectionResultsResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 30000;
  }

  /**
     Get a detailed view of a test suite collection result
  */
  rpc GetDetailedTestSuiteCollectionResult(GetDetailedTestSuiteCollectionResultRequest) returns (GetDetailedTestSuiteCollectionResultResponse) {
    option (service_client.client_method_config).response_attempt_timeout_millis = 30000;
  }
}

message TestConfig {
  // uuid of config, used as primary key in db and is autogenerated by BE.
  google.protobuf.StringValue config_uuid = 1;

  // name of the config
  google.protobuf.StringValue config_name = 2;

  // explanation of this configuration
  google.protobuf.StringValue description = 3;

  // workflow of this configuration
  google.protobuf.Int32Value workflow_id = 4;

  // steps to be executed for this config
  repeated TestStep test_steps = 5;

  // when this config was created
  google.protobuf.Timestamp created_at = 6;

  // when this config was updated
  google.protobuf.Timestamp updated_at = 7;

  // user_id of the original creator of this config
  google.protobuf.StringValue created_by = 8;

  // user_id who recently updated this config
  google.protobuf.StringValue updated_by = 9;

  // version of the workflow this test_config is tied to
  google.protobuf.StringValue workflow_version = 10;
}

message TestStep {
  // node to execute
  experience_reliability_service.workflow_platform_api.SupportWorkflowNode node = 1;

  // expected output once the node is executed or choice to select if node is manual_decision.
  experience_reliability_service.workflow_platform_api.NodeOutput expected_output = 2;
}

message TestStepResult {
  // the executed step
  TestStep executed_step = 1;

  // result whether executed_step is a success or failure
  reserved 2;
  reserved 3;

  // output of the execution (this will be one of your node 'edges'
  // will be empty if it's the last node that got executed.
  google.protobuf.StringValue execution_result = 4;

  // additional information regarding the execution_result.
  GenericMetadata metadata = 5;

  google.protobuf.BoolValue is_success = 6;
}

message TestScenario {
  // uuid for this test scenario; will be auto-generated by the BE at creation.
  google.protobuf.StringValue test_scenario_uuid = 1;

  // the test name
  google.protobuf.StringValue test_scenario_name = 2;

  // explanation of this workflow test
  google.protobuf.StringValue description = 3;

  google.protobuf.Int32Value workflow_id = 4;

  // selected paths
  repeated TestStep test_steps = 7;

  google.protobuf.Timestamp created_at = 8;
  google.protobuf.Timestamp updated_at = 9;

  // user_id of the original creator of this test scenario
  google.protobuf.StringValue created_by = 10;

  // user_id who recently updated this test scenario
  google.protobuf.StringValue updated_by = 11;

  google.protobuf.StringValue workflow_version = 12;

  // uuid of the test suite this scenario belongs to (every test scenario is under a test suite)
  google.protobuf.StringValue workflow_test_suite_uuid = 13;

  reserved 14;
  reserved "latest_test_execution_result";

  // latest execution summary result either through ExecuteWorkflowTestSuite or ExecuteTestScenario
  TestScenarioSummary latest_test_scenario_summary = 15;
}

message CreateTestParametersRequest {
  // name of this config
  google.protobuf.StringValue config_name = 1;

  // explanation of this configuration
  google.protobuf.StringValue description = 2;

  // workflow of this configuration
  google.protobuf.Int32Value workflow_id = 3;

  // steps to be executed for this config
  repeated TestStep test_steps = 4;

  // version of the workflow this test_config is tied to
  google.protobuf.StringValue workflow_version = 5;

  google.protobuf.StringValue workflow_test_suite_uuid = 6;
}

message UpdateTestParametersRequest {
  // used to identify which test_config to update.
  google.protobuf.StringValue test_config_uuid = 1;

  // name of this config
  google.protobuf.StringValue config_name = 2;

  // explanation of this configuration
  google.protobuf.StringValue description = 3;

  google.protobuf.Int32Value workflow_id = 4;
  repeated TestStep test_steps = 5;
  google.protobuf.StringValue workflow_version = 6;
}

message UpdateTestParametersResponse {
  // updated test config
  TestConfig test_parameters = 1;
}

message CreateTestParametersResponse {
  // created config
  TestConfig test_parameters = 1;
}

message CreateTestScenarioRequest {
  // the test scenario name
  google.protobuf.StringValue test_scenario_name = 1;

  // explanation of this test scenario
  google.protobuf.StringValue description = 2;

  google.protobuf.Int32Value workflow_id = 3;

  google.protobuf.StringValue workflow_test_suite_uuid = 4;

  // selected paths users want to test
  repeated TestStep test_steps = 5;

  google.protobuf.StringValue workflow_version = 6;
}

message UpdateTestScenarioRequest {
  google.protobuf.StringValue test_scenario_uuid = 1;
  google.protobuf.StringValue test_scenario_name = 2;
  google.protobuf.StringValue description = 3;
  google.protobuf.Int32Value workflow_id = 4;
  google.protobuf.StringValue workflow_version = 7;
  repeated TestStep test_steps = 8;
  google.protobuf.StringValue workflow_test_suite_uuid = 9;
}

message UpdateTestScenarioResponse {
  TestScenario test_scenario = 1;
}

message CreateTestScenarioResponse {
  TestScenario test_scenario = 1;
}

message GetTestParametersRequest {
  // workflow_id
  google.protobuf.Int32Value workflow_id = 1;

  // workflow_version
  google.protobuf.StringValue workflow_version = 2;

  // workflow_test_suite_uuid
  google.protobuf.StringValue workflow_test_suite_uuid = 3;
}

message GetTestParametersResponse {
  TestConfig config = 1;
}

message GetTestScenariosRequest {
  google.protobuf.Int32Value workflow_id = 1;
  google.protobuf.StringValue workflow_version = 2;
  google.protobuf.StringValue workflow_test_suite_uuid = 3;
}

message GetTestScenariosResponse {
  repeated TestScenario test_scenarios = 1;
}

message ExecuteTestScenarioRequest {
  // uuid of the test scenario  to execute
  google.protobuf.StringValue test_scenario_uuid = 1;

  // optional contexts if available. Can be used to skip running test_prerequisite_config
  repeated experience_reliability_service.workflow_platform_api.WorkflowContextV2 workflow_contexts = 2;

  // optional metadata to be passed, same metadata we pass when we ExecuteWorkflow
  experience_reliability_service.workflow_platform_api.ExecuteWorkflowRequestMetadata metadata = 3;

  // optional to skip running the test_prerequisite_config,
  // if this is set, it will execute test right away, hence workflow_contexts might need to be populated by the client
  google.protobuf.BoolValue should_skip_prerequisite_config = 4;
}

message ExecuteTestScenarioResponse {
  TestScenarioResult test_scenario_result = 1;
}

message TestScenarioResult {
  reserved 1;
  reserved 2;

  // contexts used throughout the test scenario execution
  repeated experience_reliability_service.workflow_platform_api.WorkflowContextV2 workflow_contexts = 5;

  // additional information regarding the result. May contain additional error_messages not tied to specific test_step
  TestScenarioResultMetadata result_metadata = 6;

  // workflow id
  google.protobuf.Int32Value workflow_id = 7;

  // workflow version
  google.protobuf.StringValue workflow_version = 8;

  // uuid of the test scenario that was executed
  google.protobuf.StringValue test_scenario_uuid = 9;

  reserved 10;

  // reference to the test suite summary.
  google.protobuf.StringValue workflow_test_suite_summary_uuid = 11;

  // the name of test scenario
  google.protobuf.StringValue test_scenario_name = 12;

  repeated TestStepResult test_step_results = 13;
  google.protobuf.BoolValue is_success = 14;

  google.protobuf.StringValue test_scenario_result_uuid = 15;
}

message GetTestScenarioResultRequest {
  google.protobuf.StringValue test_scenario_result_uuid = 1;
}

message GetTestScenarioResultResponse {
  TestScenarioResult test_scenario_result = 1;
}

message TestScenarioResultMetadata {
  // the session_data used when executing test prerequisite. Will be useful for debugging what happened during test prereq execution (e.g. creating end-to-end delivery)
  experience_reliability_service.workflow_platform_api.ExecuteWorkflowSessionData test_prereq_session_data = 1;

  // session_data, will hold the entire session_data for the particular workflow execution
  experience_reliability_service.workflow_platform_api.ExecuteWorkflowSessionData session_data = 3;

  // optional logs that could provide helpful information
  repeated GenericMetadata logs = 4;
}

// the level of this metadata (similar how we treat log levels)
enum MetadataLevel {
  METADATA_LEVEL_UNSPECIFIED = 0;
  METADATA_LEVEL_INFO = 1;
  METADATA_LEVEL_WARN = 2;
  METADATA_LEVEL_ERROR = 3;
}

message GenericMetadata {
  // the level of this metadata (similar how we treat log levels)
  MetadataLevel level = 1;

  // the code of this message, will be helpful to debug WARN and ERROR messages. Can also be used in INFO level in some scenarios.
  google.protobuf.StringValue code = 2;

  // message
  google.protobuf.StringValue message = 3;
}

// Execute all scenarios in a test suite
message ExecuteWorkflowTestSuiteRequest {
  // test_suite_uuid
  google.protobuf.StringValue workflow_test_suite_uuid = 1;
}

message ExecuteWorkflowTestSuiteResponse {
  WorkflowTestSuiteSummary workflow_test_suite_summary = 1;
}

message WorkflowTestSuiteSummary {
  // uuid generated for the test suite execution
  google.protobuf.StringValue workflow_test_suite_summary_uuid = 1;

  // workflow id
  google.protobuf.Int32Value workflow_id = 2;

  // workflow version
  google.protobuf.StringValue workflow_version = 3;

  // test summary entry in db is created once the api ExecuteWorkflowTestsRequest is hit, so this is the source of truth of the start of the test executions
  google.protobuf.Timestamp created_at = 5;

  // this is updated before returning to clients, updated_at - created_at would be the measure of total runtime of the test suite.
  google.protobuf.Timestamp updated_at = 6;

  // anything extra we want to return to clients
  TestSuiteSummaryMetadata metadata = 7;

  // uuid of the test suite (the suite that we ran that resulted to this suite summary)
  google.protobuf.StringValue workflow_test_suite_uuid = 8;

  // name of the test suite
  google.protobuf.StringValue workflow_test_suite_name = 9;

  // is_success will only be to true iff all test scenarios under it were successful
  google.protobuf.BoolValue is_success = 10;

  // when a collection of test suites are run, they are bucket as workflow_test_suite_collection_result.
  google.protobuf.StringValue workflow_test_suite_collection_result_uuid = 11;
}

message TestSuiteSummaryMetadata {
  // deprecated, test_scenario_summary should be in test_scenario model
  repeated TestScenarioSummary test_scenarios_summary = 1 [deprecated = true];
  // number of successful test scenarios
  google.protobuf.Int32Value test_scenario_success_count = 2;

  // total number of test scenarios executed
  google.protobuf.Int32Value test_scenario_total_count = 3;
}

// light version of WorkflowTestResult
message TestScenarioSummary {
  google.protobuf.StringValue test_scenario_result_uuid = 1;

  // provides info if this specific test execution succeeded
  google.protobuf.BoolValue is_success = 2;

  // the name of the test scenario
  google.protobuf.StringValue test_name = 3;

  google.protobuf.StringValue test_scenario_uuid = 4;

  // shortened summary result of each test step.
  repeated TestStepResultShortenedSummary test_step_result_shortened_summaries = 5;

  // All contexts that have been used/generated during the execution.
  repeated experience_reliability_service.workflow_platform_api.WorkflowContextV2 workflow_contexts = 6;
}

message TestStepResultShortenedSummary {
  // the test_step.node.node_id
  google.protobuf.StringValue node_id = 1;

  // output of the execution (this will be one of your node 'edges')
  // will be empty if it's the last node that got executed.
  google.protobuf.StringValue execution_result = 2;

  // additional information regarding the execution_result.
  GenericMetadata metadata = 3;

  google.protobuf.BoolValue is_success = 4;

  // the id of the execution_result (expected_output) if applicable
  google.protobuf.StringValue node_output_id = 5;
}

message GetWorkflowTestSuiteSummariesRequest {
  // workflow id
  google.protobuf.Int32Value workflow_id = 1;

  // workflow version
  google.protobuf.StringValue workflow_version = 2;

  // filter by the last X executions, will default to 100.
  google.protobuf.Int32Value filter_by_last_x_executions = 3;

  // populate this field if you want to filter by test suite
  google.protobuf.StringValue workflow_test_suite_uuid = 4;
}

message GetWorkflowTestSuiteSummariesResponse {
  repeated WorkflowTestSuiteSummary test_suite_summaries = 1;
}

message CreateWorkflowTestSuiteRequest {
  // workflow_id
  google.protobuf.Int32Value workflow_id = 2;

  // workflow_version
  google.protobuf.StringValue workflow_version = 3;

  google.protobuf.StringValue workflow_test_suite_name = 4;

  // link to parameters instance.
  google.protobuf.StringValue test_config_uuid = 9;

  google.protobuf.StringValue description = 10;
}

message CreateWorkflowTestSuiteResponse {
  WorkflowTestSuite workflow_test_suite = 1;
}

message DeleteWorkflowTestSuiteRequest {
  google.protobuf.StringValue workflow_test_suite_uuid = 1;
}

message DeleteWorkflowTestSuiteResponse {
  google.protobuf.BoolValue is_success = 1;
}

message DeleteTestScenarioRequest {
  google.protobuf.StringValue test_scenario_uuid = 1;
}

message DeleteTestScenarioResponse {
  google.protobuf.BoolValue is_success = 1;
}

message UpdateWorkflowTestSuiteRequest {
  // used to identify this test_suite
  google.protobuf.StringValue workflow_test_suite_uuid = 1;

  google.protobuf.StringValue workflow_test_suite_name = 4;

  reserved 9;

  google.protobuf.StringValue description = 10;
}

message UpdateWorkflowTestSuiteResponse {
  WorkflowTestSuite workflow_test_suite = 1;
}

message GetWorkflowTestSuitesRequest {
  google.protobuf.Int32Value workflow_id = 1;
  google.protobuf.StringValue workflow_version = 2;
}

message GetWorkflowTestSuitesResponse {
  repeated WorkflowTestSuite workflow_test_suites = 1;
}

message GetWorkflowTestSuiteRequest {
  // used to identify this test_suite
  google.protobuf.StringValue workflow_test_suite_uuid = 1;

  google.protobuf.Int32Value workflow_id = 2;
  google.protobuf.StringValue workflow_version = 3;
}

message GetWorkflowTestSuiteResponse {
  WorkflowTestSuite workflow_test_suite = 1;
}

/**
   Represents a collection of test scenarios (collection of test scenarios)
*/
message WorkflowTestSuite {
  // used to identify this test_suite
  google.protobuf.StringValue workflow_test_suite_uuid = 1;

  // workflow_id
  google.protobuf.Int32Value workflow_id = 2;

  // workflow_version
  google.protobuf.StringValue workflow_version = 3;

  google.protobuf.StringValue workflow_test_suite_name = 4;

  google.protobuf.Timestamp created_at = 5;

  google.protobuf.StringValue created_by = 6;

  google.protobuf.Timestamp updated_at = 7;

  google.protobuf.StringValue updated_by = 8;

  // link to parameters instance.
  google.protobuf.StringValue test_config_uuid = 9;

  WorkflowTestSuiteMetadata metadata = 10;

  // The description of this workflow_test_suite
  google.protobuf.StringValue description = 11;
}

/**
   Additional information regarding test suite.
*/
message WorkflowTestSuiteMetadata {
  // contains summary of the latest test execution of this test suite
  WorkflowTestSuiteSummary last_executed_workflow_test_suite = 1;

  reserved 2; // used to be description field
}

message CopyTestSuitesRequest {
  google.protobuf.Int32Value source_workflow_id = 1;
  google.protobuf.StringValue source_workflow_version = 2;

  google.protobuf.Int32Value target_workflow_id = 3;
  google.protobuf.StringValue target_workflow_version = 4;
}

message CopyTestSuitesResponse {
  // Intentionally left blank
}

message GetWorkflowBaseConfigsRequest {
  // the current test_suite that is calling this endpoint. When passed, BE will return a more tailored list of workflows.
  // i.e. when passed by the client, workflow platform will return the current test_parameter's workflow base config, and the list of all current PUBLISHED versions of base configs.
  google.protobuf.StringValue workflow_test_suite_uuid = 1;
}

message GetWorkflowBaseConfigsResponse {
  repeated ShortenedSupportWorkflow workflows = 1;
}

/**
   Smaller version of SupportWorkflow only containing the fields we need.
*/
message ShortenedSupportWorkflow {
  google.protobuf.Int32Value workflow_id = 1;
  google.protobuf.StringValue version_number = 2;
  google.protobuf.StringValue workflow_name = 3;
  google.protobuf.StringValue workflow_uuid = 4;
}

/**
   Execute all tests in a workflow request
*/
message ExecuteTestSuiteCollectionRequest {
  google.protobuf.Int32Value workflow_id = 1;
  google.protobuf.StringValue workflow_version = 2;
}

/**
   Execute all tests in a workflow response
*/
message ExecuteTestSuiteCollectionResponse {
  // overall tests result
  WorkflowTestSuiteCollectionResult workflow_test_suite_collection_result = 1;
}

message WorkflowTestSuiteCollectionResult {
  google.protobuf.StringValue workflow_test_suite_collection_result_uuid = 1;
  google.protobuf.Int32Value workflow_id = 2;
  google.protobuf.StringValue workflow_version = 3;
  google.protobuf.FloatValue test_coverage_percentage = 4;
  google.protobuf.Timestamp created_at = 5;
  google.protobuf.Timestamp updated_at = 6;
  repeated WorkflowTestSuiteSummary test_suite_summaries = 7;
}

/**
   Get Test Suite Collection for the given workflow request
*/
message GetTestSuiteCollectionResultsRequest {
  google.protobuf.Int32Value workflow_id = 1;
  google.protobuf.StringValue workflow_version = 2;
}

/**
   Get Test Suite Collection for the given workflow response
*/
message GetTestSuiteCollectionResultsResponse {
  repeated WorkflowTestSuiteCollectionResult workflow_test_suite_collection_results = 1;
}

/**
   Get Detailed Test Suite Collection for the given workflow request
*/
message GetDetailedTestSuiteCollectionResultRequest {
  google.protobuf.StringValue workflow_test_suite_collection_result_uuid = 1;
}

/**
   Get Detailed Test Suite Collection for the given workflow response
*/
message GetDetailedTestSuiteCollectionResultResponse {
  WorkflowTestSuiteCollectionResult workflow_test_suite_collection_result = 1;
  // all successful test step results within the overall execution. duplicates are omitted.
  // This is solely used for the UI to highlight test coverage.
  repeated TestStepResultShortenedSummary successful_test_step_result_summaries = 2;
}
