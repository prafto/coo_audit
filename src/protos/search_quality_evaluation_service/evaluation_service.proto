syntax = "proto3";
package search_quality_evaluation_service.v1;

import "google/protobuf/timestamp.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.search_quality_evaluation_service.rpc";

/** This service is used for search quality evaluation */
service EvaluationService {
  /** health check api */
  rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse);

  /** monitor eval status */
  rpc MonitorEvalStatus(MonitorEvalStatusRequest) returns (MonitorEvalStatusResponse);

  /** initialize evaluation */
  rpc InitializeEvaluation(InitializeEvaluationRequest) returns (InitializeEvaluationResponse);

  /** Upload queryset */
  rpc UploadQuerySet(UploadQuerySetRequest) returns (UploadQuerySetResponse);

  /** Fetch result for eval */
  rpc FetchResultForEval(FetchResultForEvalRequest) returns (FetchResultForEvalResponse);

  /** Aggregate metrics for eval */
  rpc AggregateEvalMetrics(AggregateEvalMetricsRequest) returns (AggregateEvalMetricsResponse);

  /** Upload question */
  rpc UploadQuestion(UploadQuestionRequest) returns (UploadQuestionResponse);

  /** Upload question */
  rpc SubmitRatingTasks(SubmitRatingTasksRequest) returns (SubmitRatingTasksResponse);

  /** Upload question */
  rpc DownloadRatings(DownloadRatingsRequest) returns (DownloadRatingsResponse);

  /** Request Generator for Feature Extraction */
  rpc RequestGenerator(RequestGeneratorRequest) returns (RequestGeneratorResponse);

  /** List eval */
  rpc ListEval(ListEvalRequest) returns (ListEvalResponse);

  /** retrieve the eval queryset and query metrics*/
  rpc GetEvalSummaryMetrics(GetEvalSummaryMetricsRequest) returns (GetEvalSummaryMetricsResponse);

  /** retrieve query-level information to render query detail view page */
  rpc GetQueryDetailView(GetQueryDetailViewRequest) returns (GetQueryDetailViewResponse);

  /** Retrieve the queryset relevance breakdown by query intent */
  rpc GetQuerysetBreakdown(GetQuerysetBreakdownRequest) returns (GetQuerysetBreakdownResponse);
}

/** health check request */
message HealthCheckRequest {
  /** health check request input */
  string request_id = 1;
}

/** health check response */
message HealthCheckResponse {
  /** returns a string of status*/
  string result = 1;
}

/** monitoring eval status request */
message MonitorEvalStatusRequest {
  // The UUID of the eval to monitor the status.
  string eval_id = 1;

  // whether retrieve the whole eval metadata in the response.
  bool with_eval_metadata = 2;
}

/** monitoring eval status response */
message MonitorEvalStatusResponse {
  /** the current eval stage */
  string stage = 1;

  /** the status of the current eval stage */
  string stage_status = 2;

  /** total retried count of the current eval stage */
  int64 retry_count = 3;

  /** the detailed execution message of latest execution */
  string stage_execution_message = 4;

  /** the eval metadata of the eval_id in json string format */
  string eval_metadata = 5;
}

/** initialize evaluation request */
message InitializeEvaluationRequest {
  // The UUID of the eval. If it's not specified the id will be randomly generated.
  string eval_id = 1;

  // The evaluation type.
  string eval_type = 2;

  // The base side url to fetch from.
  string base_url = 3;

  // The test side url to fetch from. Not required for SINGLE_SIDE eval.
  string test_url = 4;

  // The querysets to be used in the eval. If multiple querysets would be used.
  repeated string querysets = 5;

  // The encoded json string of the metric configurations of the eval.
  string metric_configs = 6;

  // Experiment flags for the base side.
  repeated string base_experiment_flags = 7;

  // Experiment flags for the test side.
  repeated string test_experiment_flags = 8;

  // The eval series id for continuous evaluation.
  string series_id = 9;

  // Experiment flags for the base side.
  repeated string base_headers_override = 10;

  // Experiment flags for the test side.
  repeated string test_headers_override = 11;

  // The encoded json string of request params of the eval.
  string request_params = 12;

  // The rate limit for scraping in Queries Per Second (QPS). This value determines how many
  // queries can be made to the target server per second. It's used to prevent overloading the
  // server with too many requests in a short period of time.
  // Note: beyond this rate limit, the evaluation tool still have a global rate limiter to prevent
  // misconfigured qps evals from overloading the server.
  double scrape_rate_limiter_qps = 13;
}

/** initialize evaluation response */
message InitializeEvaluationResponse {
  // Response status code.
  StatusCode code = 1;

  // Response message.
  string message = 2;
}

/** upload queryset request */
message UploadQuerySetRequest {
  // The name of the queryset.
  string queryset_name = 1;

  // The version of the queryset. (queryset_name + version) is unique.
  int64 version = 2;

  // Description of the queryset.
  string description = 3;

  // List of encoded query entity bytes that belong to the queryset. If the query already exists in
  // the system, the query will link to the queryset instead of creating a duplicate query record.
  // Query format see: https://github.com/doordash/doordash-consumer-search/blob/8c7411749f223f7f25418abc3b92fbafe56436ee/search-quality-evaluation-service/src/main/kotlin/com/doordash/evaluation_service/common/entity/Query.kt
  repeated string query_bytes_list = 4;

  // The query deduplication strategy to link to existing queries. Since ratings are identified by
  // query_id + dd_entity_id + entity_type, deduplicate identical queries could reduce labeling
  // cost.
  string query_deduplication_strategy = 5;

  // The source of the queryset to be uploaded. eg. SNOWFLAKE, CSV_FILE.
  string queryset_source = 6;

  // The snowflake database of the queryset.
  string snowflake_queryset_database = 7;

  // The snowflake table of the queryset.
  string snowflake_queryset_table = 8;
}

/** upload queryset  response */
message UploadQuerySetResponse {
  // Response status code.
  StatusCode code = 1;

  // Response message.
  string message = 2;
}

/** upload question request */
message UploadQuestionRequest {
  // The name of the question.
  string question_name = 1;

  // The version of the question. (question + version) is unique.
  int64 version = 2;

  // Description of the question.
  string description = 3;

  // The question that will be sent to raters.
  string question = 4;
}

/** upload question response */
message UploadQuestionResponse {
  // Response status code.
  StatusCode code = 1;

  // Response message.
  string message = 2;
}

/** fetch result for eval request */
message FetchResultForEvalRequest {
  // The eval to fetch results.
  string eval_id = 1;
}

/** fetch result for eval response */
message FetchResultForEvalResponse {
  // Response status code.
  StatusCode code = 1;

  // Response message.
  string message = 2;
}

/** Aggregate eval metrics request */
message AggregateEvalMetricsRequest {
  // The eval to to aggregate metrics.
  string eval_id = 1;

  // The eval metrics to aggregate.
  repeated string eval_metrics_to_aggregate = 2;
}

/** Aggregate eval metrics response */
message AggregateEvalMetricsResponse {
  // Response status code.
  StatusCode code = 1;

  // Response message.
  string message = 2;
}

/** Submit rating task request */
message SubmitRatingTasksRequest {
  // The eval to generate ratings tasks and submit to Appen.
  string eval_id = 1;

  // The appen job id to which the system submit rating tasks.
  string job_id = 2;
}

/** Submit rating task response */
message SubmitRatingTasksResponse {
  // Response status code.
  StatusCode code = 1;

  // Response message.
  string message = 2;
}

/** Download ratings request */
message DownloadRatingsRequest {
  // Download ratings for the eval.
  string eval_id = 1;
}

/** Download ratings response */
message DownloadRatingsResponse {
  // Response status code.
  StatusCode code = 1;

  // Response message.
  string message = 2;
}

/** Request Generator request */
message RequestGeneratorRequest {
  //path to the folder where input csv is split into multiple csv(s)
  string folder_path = 1;

  //input csv file name
  string file_name = 2;

  //sep override
  string sep = 3;

  //search sandbox name
  string sandbox = 4;
}

/** Request Generator response */
message RequestGeneratorResponse {
  // Response status code.
  StatusCode code = 1;

  // Response message.
  string message = 2;
}

/** List eval request */
message ListEvalRequest {
  // optional searching filtering to partially match the eval id in creation timestamp descending
  // order. If it's not set or is empty it will return all evals.
  string eval_id_search_string = 1;

  // optional searching filtering to partially match the queryset name.
  string partial_match_queryset_name = 2;

  // the max number of evals to be returned.
  int64 limit = 3;

  // the searching offset that is used for pagination.
  int64 offset = 4;
}

/** List eval response */
message ListEvalResponse {
  // Response status code.
  StatusCode code = 1;

  // Response message.
  string message = 2;

  // List of serialized EvalMetadata entity bytes that matches searching criteria.
  // EvalMetadata format see: https://sourcegraph.prod.build.doordash.red/github.com/doordash/doordash-consumer-search/-/blob/search-quality-evaluation-service/src/main/kotlin/com/doordash/evaluation_service/common/entity/EvalMetadata.kt
  repeated string eval_metadata_bytes_list = 3;
}

/** GetEvalSummaryMetrics API request */
message GetEvalSummaryMetricsRequest {
  // the eval id to retrieve result
  string eval_id = 1;

  // optional searching filtering to partially match the query_text.
  string partial_match_query_text = 2;

  // the max number of query metrics to be returned.
  int64 limit = 3;

  // the query metric display offset that is used for pagination.
  int64 offset = 4;

  // optional searching filtering to match the query_intent.
  string query_intent_filter = 5;

  // optional searching filtering to match the query_segment.
  string query_segment_filter = 6;
}

/** GetEvalSummaryMetricsRequest API response */
message GetEvalSummaryMetricsResponse {
  // Response status code.
  StatusCode code = 1;

  // Response message.
  string message = 2;

  // queryset name -> wrapped QuerysetMetrics
  map<string, QuerysetMetrics> queryset_metric_map = 3;

  // Default metrics to display for this eval.
  repeated string default_metrics_to_display = 4;
}

/** GetQueryDetailView API request */
message GetQueryDetailViewRequest {
  // the eval id to retrieve result
  string eval_id = 1;

  // the query id of the eval to retrieve detail view results
  string query_id = 2;
}

/** GetQueryDetailView API response */
message GetQueryDetailViewResponse {
  // Response status code.
  StatusCode code = 1;

  // Response message.
  string message = 2;

  // serialized base Resultset entity.
  string base_resultset = 3;

  // serialized test Resultset entity.
  string test_resultset = 4;

  // query-level metrics are associated with the query.
  QueryMetrics query_metrics = 5;
}

// The wrapper of Queryset Metric
message QuerysetMetrics {
  // queryset json object
  string queryset = 1;

  // Deprecated: impact@ queryset metric
  string queryset_impact_metric = 2;

  // Deprecated: relevance@ queryset metric for base side
  string queryset_base_relevance_metric = 3;

  // Deprecated: relevance@ queryset metric for test side
  string queryset_test_relevance_metric = 4;

  // Deprecated: wpr@ queryset metric for base side
  string queryset_base_wpr_metric = 5;

  // Deprecated: wpr@ queryset metric for test side
  string queryset_test_wpr_metric = 6;

  // list of the QueryMetrics
  repeated QueryMetrics query_metrics = 7;

  // metric name to metric value mapping.
  map<string, string> queryset_metrics = 8;
}

// The wrapper of Query Metric
message QueryMetrics {
  // query json object
  string query = 1;

  // Deprecated: impact@ query metric
  string query_impact_metric = 2;

  // Deprecated: relevance@ query metric for base side
  string query_base_relevance_metric = 3;

  // Deprecated: relevance@ query metric for test side
  string query_test_relevance_metric = 4;

  // Deprecated: wpr@ query metric for base side
  string query_base_wpr_metric = 5;

  // Deprecated: wpr@ query metric for test side
  string query_test_wpr_metric = 6;

  // metric name to metric value mapping.
  map<string, string> query_metric_map = 8;

  // the scraped time of this query result
  google.protobuf.Timestamp scraped_at = 7;
}

/************ Message Proto for GetQuerysetBreakdown ************/
/** A single metric for a partition */
message PartitionMetric {
  // The score for this partition
  float score = 1;

  // The differential between corresponding metric on the control side.
  // If single-sided eval, will be null
  float diff = 2;
}

/** A single metric for a particular breakdown */
message BreakdownMetric {
  // The method used to calculate scores (e.g., Bucketed Average, Weighted Average)
  string scoring_fn = 1;

  // Metric scores by partition name (usually segment)
  map<string, PartitionMetric> partitions = 2;
}

/** A single breakdown result */
message BreakdownResult {
  // The bucket for a particular breakdown (typically, a query intent)
  string bucket = 1;

  // List of metrics for this bucket
  repeated BreakdownMetric metrics = 2;
}

/** Breakdown for a single queryset */
message QuerysetBreakdown {
  // The name of the queryset
  string queryset_name = 1;

  // The breakdown results corresponding to queryset
  repeated BreakdownResult results = 2;
}

/** GetQuerysetBreakdown API request */
message GetQuerysetBreakdownRequest {
  // The eval ID to retrieve breakdown information
  string eval_id = 1;

  // The selected metric for breakdown page view.
  string eval_metric = 2;
}

/** GetQuerysetBreakdown API response */
message GetQuerysetBreakdownResponse {
  // Response status code
  StatusCode code = 1;

  // Response message
  string message = 2;

  // Breakdown results
  repeated QuerysetBreakdown queryset_breakdowns = 3;
}

/** Server response status code */
enum StatusCode {
  // Unspecified status code.
  STATUS_CODE_UNSPECIFIED = 0;

  // Success status code.
  STATUS_CODE_SUCCESS = 1;

  // Error status code.
  STATUS_CODE_ERROR = 2;

  // No op status code.
  STATUS_CODE_NO_OP = 3;
}
