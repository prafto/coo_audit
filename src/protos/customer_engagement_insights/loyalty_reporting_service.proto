syntax = "proto3";

package customer_engagement_insights.v1;

import "common/common.proto";
import "common/money.proto";
import "common/service_client_config.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option go_package = "github.com/doordash/services-protobuf/generated/customer_engagement_insights/api/v1";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.customer_engagement_insights.rpc.api";

// Loyalty analytics service for powering Mx portal loyalty reporting page
service LoyaltyReportingService {
  // get top line metrics for Mx loyalty reporting
  rpc GetTopLineMetrics(GetTopLineMetricsRequest) returns (GetTopLineMetricsResponse);
  // get customer insights for Mx loyalty reporting
  rpc GetCustomerInsights(GetCustomerInsightsRequest) returns (GetCustomerInsightsResponse);
  // get customer count by total orders
  rpc GetCustomerCountByTotalOrders(GetCustomerCountByTotalOrdersRequest) returns (GetCustomerCountByTotalOrdersResponse);
  // get average order frequency
  rpc GetAverageOrderFrequency(GetAverageOrderFrequencyRequest) returns (GetAverageOrderFrequencyResponse);
  // get sales performance
  rpc GetSalesPerformance(GetSalesPerformanceRequest) returns (GetSalesPerformanceResponse);
}

// Lookback window
enum LookBackWindowGranularity {
  // default status when not specified
  LOOK_BACK_WINDOW_GRANULARITY_UNSPECIFIED = 0;
  // last 365 days
  LOOK_BACK_WINDOW_GRANULARITY_LAST_365_DAYS = 1;
  // last 90 days
  LOOK_BACK_WINDOW_GRANULARITY_LAST_90_DAYS = 2;
  // last 30 days
  LOOK_BACK_WINDOW_GRANULARITY_LAST_30_DAYS = 3;
}

// insights for specific channel
enum Channel {
  // default channel when not specified
  CHANNEL_UNSPECIFIED = 0;
  // marketplace channel
  CHANNEL_MARKETPLACE = 1;
  // drive channel
  CHANNEL_DRIVE = 2;
  // storefront channel
  CHANNEL_STOREFRONT = 3;
  // demand generation channel
  CHANNEL_DEMAND_GEN = 4;
  // doordash voice channel
  CHANNEL_VOICE = 5;
  // Doordash point of sale channel, named as such to match other services' usages and what's persisted in DB
  CHANNEL_DD_POS_CHANNEL = 6;
  // Self-serve kiosk channel
  CHANNEL_SELF_KIOSK_CHANNEL = 7;
  // In-store channel
  CHANNEL_IN_STORE = 8;
}

// Time granularity
enum TimeFilterGranularity {
  // default granularity when not specified
  TIME_FILTER_GRANULARITY_UNSPECIFIED = 0;
  // hourly granularity
  TIME_FILTER_GRANULARITY_HOURLY = 1;
  // daily granularity
  TIME_FILTER_GRANULARITY_DAILY = 2;
  // weekly granularity
  TIME_FILTER_GRANULARITY_WEEKLY = 3;
  // monthly granularity
  TIME_FILTER_GRANULARITY_MONTHLY = 4;
  // yearly granularity
  TIME_FILTER_GRANULARITY_YEARLY = 5;
  // quarterly granularity
  TIME_FILTER_GRANULARITY_QUARTERLY = 6;
}

// Delta fields
message DeltaFields {
  // True for + sign
  google.protobuf.BoolValue sign = 1;
  // delta value
  google.protobuf.FloatValue value = 2;
  // delta value (monetary amount)
  money.MonetaryFields monetary_value = 3;
}

// Request body to get top line metrics for Mx loyalty
message GetTopLineMetricsRequest {
  // business ids to fetch the metrics. business id always required
  repeated google.protobuf.Int64Value business_ids = 1;
  // optional store ids
  repeated google.protobuf.Int64Value store_ids = 2;
  // Optional channel (Marketplace, Storefront, in-store, etc.)
  Channel channel = 3;
}

// Response body to get top line metrics for Mx loyalty
message GetTopLineMetricsResponse {
  // Redeeming customers, ex: 59
  google.protobuf.Int64Value unique_redeemed_customers_count = 1;
  // Loyalty sales, ex: $768.04
  money.MonetaryFields loyalty_sales = 2;
  // Redeemed rewards , ex: $128.89
  money.MonetaryFields redeemed_rewards = 3;
  // Remaining free trial credits, ex: $55.30
  money.MonetaryFields remaining_free_trial_credits = 4;
  // total loyalty cx count
  google.protobuf.Int64Value num_loyalty_customers = 5;
}

// Get customer insights request
message GetCustomerInsightsRequest {
  // business ids to fetch customer insights for, business id always required
  repeated google.protobuf.Int64Value business_ids = 1;
  // optional store ids to fetch customer insights for
  repeated google.protobuf.Int64Value store_ids = 2;
  // Optional channel (Marketplace, Storefront)
  Channel channel = 3;
}

// Get customer insights response
message GetCustomerInsightsResponse {
  // structure of each redemption cohort
  message RedemptionCohort {
    // cohort name
    google.protobuf.StringValue cohort_name = 1;
    // customer count
    google.protobuf.Int64Value customer_count = 2;
    // lift
    DeltaFields lift = 3;
  }

  // redemption cohorts
  repeated RedemptionCohort redemption_cohorts = 1;
  // spend lift, calculated on the backend
  DeltaFields spend_lift = 2;
  // order frequency lift, calculated on the backend
  DeltaFields order_frequency_lift = 3;
  // redeemer average spend
  money.MonetaryFields redeemer_average_spend = 4;
  // non-redeemer average spend
  money.MonetaryFields nonredeemer_average_spend = 5;
  // redeemer average order frequency
  google.protobuf.FloatValue redeemer_average_order_frequency = 6;
  // non-redeemer average order frequency
  google.protobuf.FloatValue nonredeemer_average_order_frequency = 7;
}

// request body to get customer count by total orders
message GetCustomerCountByTotalOrdersRequest {
  // business id to fetch customer count information. business id always required
  google.protobuf.Int64Value business_id = 1 [deprecated = true];
  // optional store ids
  google.protobuf.Int64Value store_id = 2 [deprecated = true];
  // Optional channel (Marketplace, Storefront)
  Channel channel = 3;
  // business ids to fetch customer count information
  repeated google.protobuf.Int64Value business_ids = 4;
  // store ids to fetch customer count information
  repeated google.protobuf.Int64Value store_ids = 5;
}

// customer count by total orders
message GetCustomerCountByTotalOrdersResponse {
  // structure for customer count by total orders
  message CustomerCountByTotalOrders {
    // date
    google.protobuf.Timestamp date = 1;
    // customer count for 2 to 4 orders
    google.protobuf.Int64Value customer_count_2_to_4_orders = 2;
    // customer count for 5 or more orders
    google.protobuf.Int64Value customer_count_5_or_more_orders = 3;
  }

  // Customer count by total orders. Sorted by date.
  repeated CustomerCountByTotalOrders customer_count_by_total_orders = 1;
  // Order frequency lift
  DeltaFields lift = 2;
  // average spend for 2 to 4 orders
  money.MonetaryFields average_spend_2_to_4_orders = 3;
  // average spend for 5 or more orders
  money.MonetaryFields average_spend_5_or_more_orders = 4;
  // average order frequency for 2 to 4 orders
  google.protobuf.FloatValue average_order_frequency_2_to_4_orders = 5;
  // average order frequency for 5 or more orders
  google.protobuf.FloatValue average_order_frequency_5_or_more_orders = 6;
  // total customer count for 2 to 4 orders
  google.protobuf.Int64Value total_customer_count_2_to_4_orders = 7;
  // total customer count for 5 or more orders
  google.protobuf.Int64Value total_customer_count_5_or_more_orders = 8;
}

// request body to get average order frequency
message GetAverageOrderFrequencyRequest {
  // business id to fetch customer average order frequency. business id always required
  google.protobuf.Int64Value business_id = 1 [deprecated = true];
  // optional store id
  google.protobuf.Int64Value store_id = 2 [deprecated = true];
  // Optional channel (Marketplace, Storefront)
  Channel channel = 3;
  // business ids to fetch customer average order frequency
  repeated google.protobuf.Int64Value business_ids = 4;
  // store ids to fetch customer average order frequency
  repeated google.protobuf.Int64Value store_ids = 5;
}

// average order frequency
message GetAverageOrderFrequencyResponse {
  // structure for average order frequency
  message AverageOrderFrequency {
    // average order frequency
    google.protobuf.FloatValue average_order_frequency = 1;
    // is data incomplete
    google.protobuf.BoolValue is_data_incomplete = 2;
  }
  // averaged order frequency, sorted by the order of:
  // ORDERS_PRE_3, ORDERS_PRE_2, ORDERS_PRE_1, ORDERS_POST_1, ORDERS_POST_2, ORDERS_POST_3
  repeated AverageOrderFrequency average_order_frequency_by_month = 1;
  // order frequency lift. Lift will be calculated using ORDERS_PRE and ORDERS_POST columns.
  DeltaFields lift = 2;
  // is pre loyalty launch data incomplete
  google.protobuf.BoolValue is_pre_loyalty_launch_data_incomplete = 3;
  // average order frequency pre launch - deprecated
  google.protobuf.Int64Value average_order_frequency_pre_launch = 4 [deprecated = true];
  // average order frequency post launch - deprecated
  google.protobuf.Int64Value average_order_frequency_post_launch = 5 [deprecated = true];
  // average order frequency pre launch
  google.protobuf.FloatValue avg_order_frequency_pre_launch = 6;
  // average order frequency post launch
  google.protobuf.FloatValue avg_order_frequency_post_launch = 7;
}

// request body to get sales performance
message GetSalesPerformanceRequest {
  // business id to fetch customer average order frequency. business id always required
  repeated google.protobuf.Int64Value business_ids = 1;
  // optional store id
  repeated google.protobuf.Int64Value store_ids = 2;
  // time range to request the data for, such as last 90 days, etc.
  LookBackWindowGranularity look_back_window = 3;
  // time granularity used for group by, such as daily, weekly or monthly.
  TimeFilterGranularity group_by_time_filter = 4;
  // Optional channel (Marketplace, Storefront)
  Channel channel = 5;
}

// sales performance data
message GetSalesPerformanceResponse {
  // structure for sales performance data
  message SalesPerformance {
    // date
    google.protobuf.Timestamp date = 1;
    // sales attributed to loyalty
    money.MonetaryFields attributed_sales = 2;
    // cost of rewards spent
    money.MonetaryFields cost_of_rewards = 3;
  }

  // sales performance data
  repeated SalesPerformance sales_performance = 1;
  // total sales attributed to loyalty
  money.MonetaryFields total_attributed_sales = 2;
  // total cost of rewards spent
  money.MonetaryFields total_cost_of_rewards = 3;
}
