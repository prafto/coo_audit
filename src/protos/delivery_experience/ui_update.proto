syntax = "proto3";

package delivery_experience.v1;

import "delivery_experience/order_status.proto";
import "google/protobuf/any.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "delivery.experience";

/** Holds data for overriding the order tracking ui using our event driven architecture.
 *
 * See https://devconsole.doordash.team/codelabs/customizing+ui+on+the+order+tracking+page
 */
message OrderTrackingUiUpdate {
  // (required) An event type from the ui event type registry.
  // See https://devconsole.doordash.team/codelabs/customizing+ui+on+the+order+tracking+page
  google.protobuf.StringValue ui_event_type = 1;

  // Fields to merge into the existing order status. This operation is applied after `clear`.
  //
  // repeated fields will be appended to any existing repeated values.
  // To replace all existing repeated values, combine a `clear` and `merge` operation.
  // map fields will be merged with any existing map keys/values, recursively merging the value for keys which
  // already exist.
  // Enums set to the default value of 0 will be ignored. To set an enum value to 0, use the `clear` field below.
  OrderStatus merge = 2;

  // Fields to clear from the existing order status. This operation is applied before `merge`.
  //
  // Fields to clear.
  // If any of these fields are set to a non-default value, that field will be cleared.
  // Setting a value for a repeated field will clear all values for that repeated field.
  // Setting a value for a map to the default value will clear and remove that key.
  // Setting a value for a map a non-default value will recursively clear just the fields set in the value.
  OrderStatus clear = 3;

  // This field holds the rules to clear previous created uiEvent.
  // This operation will be applied to all the previous ui updates and clear the events which meet the condition.
  // This operation will NOT be applied to any future ui updates.
  ClearUiEvent clear_ui_event = 4;

  // Federated OTS by default filters events which were published less than 1 seconds ago.
  // This boolean field when set to true will bypass the filtering logic and force
  // Federated OTS to display the UI update immediately.
  google.protobuf.BoolValue bypass_conflict_resolution_delay = 5;

  // The name of the DIP delivery event category which this UI event was generated from.
  // If this UI event did not come from a DIP event, leave this field null.
  google.protobuf.StringValue source_delivery_event_category = 6;

  // The UUID of the DIP delivery event which this UI event was generated from.
  // If this UI event did not come from a DIP event, leave this field null.
  // We log this to make debugging easier.
  google.protobuf.StringValue source_delivery_event_uuid = 7;

  // The timestamp when the thing this UI event is in response to happened.
  //
  // We use this to sort UI events before merging them together.
  //
  // If this UI event is in response to a DIP event, use the `created_at` timestamp of the DIP event.
  //   DO NOT set it to the `updated_at` timestamp of the DIP event as they are different. For example for the
  //   `ORDER_CREATED` DIP event, `created_at` is the timestamp of when the order was created in order service, whereas
  //   `updated_at` is the timestamp of when the DIP event was written to the database.
  //
  // If this UI event didn't come from a DIP event, use the timestamp that is closest to the source as possible
  //   for example, the timestamp of when a request came in or the timestamp of some other kafka event that
  //   triggered this UI update.
  //
  // This field is required. If none of the above situations apply, set this timestamp to the current time.
  google.protobuf.Timestamp source_created_at = 8;

  // The timestamp of when the grace period for conflict resolution should start - if multiple UI updates from
  // different teams are triggered by the same thing, we want them to all have the same `source_updated_at`.
  //
  // If this UI event is in response to a DIP event, use the `updated_at` timestamp of the DIP event.
  //   DO NOT set it to the `created_at` timestamp of the DIP event as they are different. For example for the
  //   `ORDER_CREATED` DIP event, `created_at` is the timestamp of when the order was created in order service, whereas
  //   `updated_at` is the timestamp of when the DIP event was written to the database.
  //
  // If this UI event came from a non-kafka DIP event, use the timestamp of the event it was in response to.
  //
  // This field is required. If none of the above situations apply, set this timestamp to the current time.
  google.protobuf.Timestamp source_updated_at = 9;

  // If the following is set then we will only apply this UI Update while waiting
  // for the set future ui event type. This also allows to set OTS response loading
  // state to partial.
  SetupWaitForFutureUiEvent setup_wait_for_future_ui_event = 10;

  // Operation to clear an item from a repeated field in OrderStatus proto.
  RepeatedFieldRemoveOrReplace repeated_field_remove_or_replace = 11;

  // (Optional) The name of a boolean dynamic value to use to roll out this UI event. The ui event will be ignored
  // if this dynamic value evaluates to false. The dv must be shared with the delivery-experience namespace.
  google.protobuf.StringValue dynamic_value = 12;

  // (Optional) The name of a boolean dynamic value to use to enable shadow logging of this ui event.
  // The ui event will not be shadow logged if this dynamic value evaluates to false.
  // The dv must be shared with the delivery-experience namespace.
  google.protobuf.StringValue shadow_log_dynamic_value = 13;

  // (Optional) A JavaScript function to apply to the order status at read time.
  // Takes deliveryContext as input.
  Template template = 14;
}

// Holds conditions for the to be cleared ui event
message ClearUiEvent {
  // UI event types of the previous ui event update to be cleared from the existing order status.
  // Future ui update with the ui event types will NOT be cleared.
  repeated google.protobuf.StringValue ui_event_type = 1;
}

// Parameters to set up wait for a future ui_event_type.
// Design doc: https://docs.google.com/document/d/1JxDF_Rby-3HdWNhI5rWqY77sS9Hbf3zj1nrd2-YK8Lw/edit#
message SetupWaitForFutureUiEvent {
  // The amount of time to wait for the future ui_event_type.
  // The wait will automatically be cleared if this time much time has passed since the UiUpdate
  // was created even if the desired ui_event_type was not seen.
  // default: 30s
  google.protobuf.Duration expires_after = 1;

  // Any of the following ui_event_type can unlock the OrderStatus call.
  // If no unlocking ui event type is provided then the lock with automatically clear after expires_after period.
  // This can provide a fleeting ui updates that will only be applied for a duration.
  repeated google.protobuf.StringValue unlocking_ui_event_types = 2;

  // The loading state of order status response proto during the time the wait is un satisfied.
  // Will default to ORDER_STATUS_LOADING_STATE_PARTIAL_WAITING_FOR_UI_EVENT if not specified.
  // Currently there is no conflict resolution between the loading states. So,
  // if there is a conflict in locks attempting to set different loading state, we will revert to just use
  // ORDER_STATUS_LOADING_STATE_PARTIAL_WAITING_FOR_UI_EVENT value.
  OrderStatusLoadingState order_status_loading_state_during_wait = 3;
}

// Parameters to delete or modify items from a repeated field in OrderStatus
// Design doc: https://docs.google.com/document/d/18-MPGQbhSe0X086EjlOMz_Zqj1iAjidA8MWWGS6TIRE/edit?pli=1#
// TODO(nik.bhagat): Currently deletion is disabled. Please reach out to us in case deletion is required for your use
// case. We have so far not seen a need for deletion.
message RepeatedFieldRemoveOrReplace {
  // Should ony have selectors to only one of the repeated field in the OrderStatus.
  // e.g If the OrderStatus passed here is -
  // route_details: {detours: [{pin_type: STORE}, {pin_type: CUSTOMER}]}
  // then it match all the detours in the route details that have pin_type of STORE or CUSTOMER.
  // Only the repeated fields should be set. Any non repeated field will be ignored. The elements of repeated field
  // should be a message or leaf fields. Matching will be done only using leaf fields. Repeated/Map fields will not
  // be matched in the selector.
  OrderStatus selector = 1;
  // Maximum number of item to match. If set to zero(or unset), all element in the repeated field will
  // be removed/replaced.
  int32 max_match_count = 2;
  // (optional) If set in-place replacement for the matched element. If not set, the matched items will be removed.
  // Note that if only append at the end is sufficient using "merge" is also possible in the same UiUpdate.
  // Removal will be done before the merge operation is applied.
  // To in-place replace, pass a serialized byte array for the new proto.
  google.protobuf.Any replacement = 3;
}

// A JavaScript function to apply to the order status at read time.
// Takes deliveryContext as input.
//
// When to use this:
//
// Some fields, such as ETA and Dasher location, don't have delivery events every time they change. This is because
// they are updated frequently so the volume of events would be too high.
//
// Instead, you can define a 'template' which takes the delivery context as input and sets the relevant fields.
// At read time (when the user loads the order tracking page), the JavaScript function will be applied to the
// order status, passing in the current delivery context.
//
// See the codelab for details: https://devconsole.doordash.team/codelabs/customizing+ui+on+the+order+tracking+page
message Template {
  // The JavaScript function to apply to the order status at read time.
  // Takes deliveryContext as input.
  google.protobuf.StringValue javascript = 1;
}
