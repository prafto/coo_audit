# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from delivery_experience import order_tracker_service_pb2 as delivery__experience_dot_order__tracker__service__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in delivery_experience/order_tracker_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class OrderTrackerServiceStub(object):
    """The main OTS gRPC service. 
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetOrderStatus = channel.unary_unary(
                '/delivery_experience.v1.OrderTrackerService/GetOrderStatus',
                request_serializer=delivery__experience_dot_order__tracker__service__pb2.GetOrderStatusRequest.SerializeToString,
                response_deserializer=delivery__experience_dot_order__tracker__service__pb2.GetOrderStatusResponse.FromString,
                _registered_method=True)
        self.GetOrderStatusV2 = channel.unary_unary(
                '/delivery_experience.v1.OrderTrackerService/GetOrderStatusV2',
                request_serializer=delivery__experience_dot_order__tracker__service__pb2.GetOrderStatusV2Request.SerializeToString,
                response_deserializer=delivery__experience_dot_order__tracker__service__pb2.GetOrderStatusV2Response.FromString,
                _registered_method=True)
        self.AcceptERSOrderResolution = channel.unary_unary(
                '/delivery_experience.v1.OrderTrackerService/AcceptERSOrderResolution',
                request_serializer=delivery__experience_dot_order__tracker__service__pb2.AcceptERSOrderResolutionRequest.SerializeToString,
                response_deserializer=delivery__experience_dot_order__tracker__service__pb2.AcceptERSOrderResolutionResponse.FromString,
                _registered_method=True)
        self.SubmitOrderPromptInfo = channel.unary_unary(
                '/delivery_experience.v1.OrderTrackerService/SubmitOrderPromptInfo',
                request_serializer=delivery__experience_dot_order__tracker__service__pb2.SubmitOrderPromptInfoRequest.SerializeToString,
                response_deserializer=delivery__experience_dot_order__tracker__service__pb2.SubmitOrderPromptInfoResponse.FromString,
                _registered_method=True)


class OrderTrackerServiceServicer(object):
    """The main OTS gRPC service. 
    """

    def GetOrderStatus(self, request, context):
        """Returns the order status of the requested order. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetOrderStatusV2(self, request, context):
        """Retrieves information about the status of an order, for display on the order tracking page.

        Serves as the primary read API for order tracking pages across Marketplace, Drive and Storefront.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AcceptERSOrderResolution(self, request, context):
        """Returns the accept order resolution. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubmitOrderPromptInfo(self, request, context):
        """Returns the status of the prompt info submitted. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_OrderTrackerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetOrderStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOrderStatus,
                    request_deserializer=delivery__experience_dot_order__tracker__service__pb2.GetOrderStatusRequest.FromString,
                    response_serializer=delivery__experience_dot_order__tracker__service__pb2.GetOrderStatusResponse.SerializeToString,
            ),
            'GetOrderStatusV2': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOrderStatusV2,
                    request_deserializer=delivery__experience_dot_order__tracker__service__pb2.GetOrderStatusV2Request.FromString,
                    response_serializer=delivery__experience_dot_order__tracker__service__pb2.GetOrderStatusV2Response.SerializeToString,
            ),
            'AcceptERSOrderResolution': grpc.unary_unary_rpc_method_handler(
                    servicer.AcceptERSOrderResolution,
                    request_deserializer=delivery__experience_dot_order__tracker__service__pb2.AcceptERSOrderResolutionRequest.FromString,
                    response_serializer=delivery__experience_dot_order__tracker__service__pb2.AcceptERSOrderResolutionResponse.SerializeToString,
            ),
            'SubmitOrderPromptInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.SubmitOrderPromptInfo,
                    request_deserializer=delivery__experience_dot_order__tracker__service__pb2.SubmitOrderPromptInfoRequest.FromString,
                    response_serializer=delivery__experience_dot_order__tracker__service__pb2.SubmitOrderPromptInfoResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'delivery_experience.v1.OrderTrackerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('delivery_experience.v1.OrderTrackerService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class OrderTrackerService(object):
    """The main OTS gRPC service. 
    """

    @staticmethod
    def GetOrderStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/delivery_experience.v1.OrderTrackerService/GetOrderStatus',
            delivery__experience_dot_order__tracker__service__pb2.GetOrderStatusRequest.SerializeToString,
            delivery__experience_dot_order__tracker__service__pb2.GetOrderStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetOrderStatusV2(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/delivery_experience.v1.OrderTrackerService/GetOrderStatusV2',
            delivery__experience_dot_order__tracker__service__pb2.GetOrderStatusV2Request.SerializeToString,
            delivery__experience_dot_order__tracker__service__pb2.GetOrderStatusV2Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AcceptERSOrderResolution(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/delivery_experience.v1.OrderTrackerService/AcceptERSOrderResolution',
            delivery__experience_dot_order__tracker__service__pb2.AcceptERSOrderResolutionRequest.SerializeToString,
            delivery__experience_dot_order__tracker__service__pb2.AcceptERSOrderResolutionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SubmitOrderPromptInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/delivery_experience.v1.OrderTrackerService/SubmitOrderPromptInfo',
            delivery__experience_dot_order__tracker__service__pb2.SubmitOrderPromptInfoRequest.SerializeToString,
            delivery__experience_dot_order__tracker__service__pb2.SubmitOrderPromptInfoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
