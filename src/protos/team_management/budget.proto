syntax = "proto3";

package team_management;

import "common/date.proto";
import "common/dayparts.proto";
import "common/money.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "team_management/budget_address_info.proto";
import "team_management/common.proto";
import "team_management/team.proto";

option go_package = "team_management";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.team_management";

message Budget {
  string id = 1;
  string name = 2;

  // single address_id will be deprecated because of multiple address extension
  int64 address_id = 3 [deprecated = true];
  repeated dayparts.DayPart availabilities = 4;

  /**
   * maximum_allotment (5) should be deprecated in favor of fields 14/15 because its meaning is overloaded based on
   *  RPC.
   *
   *  In ordering contexts (where budget redemptions are considered), this value in practice represents the
   *   remaining amount a consumer can apply to their budget.  This concept is replaced by remaining_amount (15)
   *
   *  In other contexts (benefits overview and admin-facing RPCs), this value represents the total amount that can be
   *   spent per refresh interval.  This concept is replaced by total_amount (14).
   */
  money.MonetaryFields maximum_allotment = 5;

  // Each team account is linked to a consumer, who is holder of a payment method.
  // payer_consumer_id identifies virtual consumer ("ghost payer") which holds payment method to charge on behalf of the team account.
  // 3 fields below are used by Order Service for ordering flow. Portal APIs do not use those fields.
  int64 payer_consumer_id = 6;
  PaymentMethod payment_method = 7; // Describe payment method selected for Team Account
  int64 payment_account_id = 8; // For tracking Invoicing payments. ID is generated by Payment Service.

  // [Deprecated]: active_at should be date instead of timestamp
  google.protobuf.Timestamp active_at_timestamp = 9 [deprecated = true]; // UTC timestamp for when budget starts being active
  // [Deprecated]: inactive_at should be date instead of timestamp
  google.protobuf.Timestamp inactive_at_timestamp = 10 [deprecated = true]; // UTC timestamp for when budget is no longer active

  BudgetRefreshInterval refresh_interval = 11; // Budget refresh interval

  ExpenseCodeConfig expense_code_config = 12;

  BudgetConfig budget_config = 13;

  /**
   * total spendable amount per refresh interval.
   */
  money.MonetaryFields total_amount = 14;

  /**
   * Remaining spendable amount, in practice less than or equal to field 14.
   *  null if outside of an ordering context; specific to a consumer and time of the order.
   */
  money.MonetaryFields remaining_amount = 15;

  string team_id = 16;

  date.Date active_at_date = 17;
  date.Date inactive_at_date = 18;

  /**
   * the printable address that will be provided based on the budget address restriction settings
   * If the localized address could not be printed, it will be empty string.
   * If there's no budget restriction, it will display "Any address" or a variation of it.
   * If the client or BFF doesn't want to use the default message for any address,
   * it can still follow the current workflow and use
   * the address id to determine if there's no address restriction (i.e. address id is 0)
   */

  // single printable_address will be deprecated because of multiple address extension
  string printable_address = 19 [deprecated = true];
  google.protobuf.StringValue team_account_id = 20;
  google.protobuf.Timestamp created_at_timestamp = 21;
  BudgetType budget_type = 22;
  BudgetAddressInfoList budget_address_info_list = 23;
}

// voucher is a one-time budget with additional information
message VoucherBudget {
  Budget budget = 1;
  google.protobuf.Int32Value max_redemption_number = 2;
  google.protobuf.StringValue invitation_url_link = 3;
  google.protobuf.Int32Value claimed_count = 4;
  VoucherType voucher_type = 5;

  // count of individuals to whom we shared voucher unique links
  // default to 0 for generic link vouchers
  google.protobuf.Int32Value invited_count = 6;
}

// Voucher type
enum VoucherType {
  // unspecified when voucher is created and type not set
  VOUCHER_TYPE_UNSPECIFIED = 0;
  // voucher with generic link v1
  VOUCHER_TYPE_GENERIC_LINK = 1;
  // voucher with unique link v2
  VOUCHER_TYPE_UNIQUE_LINK = 2;
}

message VoucherBudgetWithRedemptionStats {
  VoucherBudget voucher_budget = 1;
  repeated VoucherBudgetRedemptionStats voucher_redemption_stats = 2;
}

message VoucherBudgetRedemptionStats {
  google.protobuf.StringValue receiver_team_member_id = 1;
  google.protobuf.StringValue receiver_email = 2;
  // optional, blank if receiver hasn't redeemed the voucher
  money.MonetaryFields voucher_redeemed_amount = 3;

  // for vouchers unique links - reporting the email to which we sent the voucher unique link
  google.protobuf.StringValue sent_to_email = 4;

  // for vouchers v2 generic links - reporting the email that claimed the voucher
  google.protobuf.StringValue claimed_by_email = 5;
}

message BudgetGroups {
  string budget_id = 1;
  repeated TeamAccountGroup team_account_groups = 2;
}

enum BudgetRefreshInterval {
  DEFAULT_INTERVAL = 0; // If no interval set, TMS backend sets interval to DAILY

  ONE_TIME = 1;
  DAILY = 2;
  WEEKLY = 3;
  MONTHLY = 4;
}

enum ExpenseCodeEnforcementMode {
  DEFAULT_NOT_REQUIRED = 0;

  OPTIONAL_CODE = 1;
  ENFORCED_CODE = 2;
  ENFORCED_PATTERN = 3;
  ENFORCED_LIST = 4;
}

// budget type like default default EM budget, vouchers, etc
// Note that this is different from budget refresh cadence
enum BudgetType {
  // This is the usual expensed meal budget
  DEFAULT_BUDGET = 0;
  // EM voucher aka adhoc EM budget
  VOUCHER = 1;
}

message ExpenseCodeConfig {
  ExpenseCodeEnforcementMode expense_code_enforcement_mode = 1;
  repeated string expense_code_valid_values = 2; // can be empty for DEFAULT_NOT_REQUIRED and OPTIONAL_CODE enforcement modes
}
