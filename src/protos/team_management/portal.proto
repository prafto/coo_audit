syntax = "proto3";

package team_management;

import "team_management/common.proto";
import "team_management/team.proto";

option go_package = "team_management";
option java_generic_services = true;
option java_multiple_files = true;
option java_package = "com.doordash.rpc.team_management";

// Represents a team member (active or pending)
message TeamMember {
  // this is polymorphic ID which may represent active or pending member
  // can be active_<UUID> or pending_<UUID>
  string id = 1;
  // for display purposes only
  string email = 2;

  enum TeamMemberStatus {
    ACTIVE = 0; // default
    PENDING = 1; // pending to accept join invite
  }

  enum TeamMemberRedemptionStatus {
    NONE = 0;
    HAS_REDEEMED_BUDGET = 1;
  }
  TeamMemberStatus status = 3;

  // Indicating if this team member has ordered with any budget/voucher
  TeamMemberRedemptionStatus team_member_redemption_status = 4;
  // in case we need to introduce specific properties of
  // team member we suggest following approach:
  // message ActiveMember {
  //   string data_specific_to_active_member_only = 1;
  // }
  // message PendingMember {
  //   string data_specific_to_pending_member_only = 1;
  // }
  // oneof {
  //    ActiveMember active_member = 1;
  //    PendingMember pending_member = 2;
  // }
}

// Represents a role of a team member in relation to a team account
message TeamAccountRole {
  enum TeamMemberRole {
    MEMBER = 0; // default
    ADMIN = 1;
  }
  TeamMemberRole role = 1;
  string team_account_id = 2;
}

// Representing the a team member's association with a team-account-group
message GroupMember {
  // this is a polymorphic ID which may represent active or pending membership
  // can be active_<UUID> or pending_<UUID>
  string id = 1;
  // ID from TeamAccountGroup
  string team_account_group_id = 2;
  TeamMember team_member = 3;
}

// Represents a dataset required for portal initial state.
// It provides basic current team member information and related roles.
// May be extended.
message TeamPortalData {
  // team member may be pending or active
  TeamMember team_member = 1;
  // list of roles is empty for pending member
  repeated TeamAccountRole team_member_roles = 2;
  // for active members: current team
  // for pending members: a team they are about to join
  Team team = 3;
  // Empty for pending team members.
  repeated TeamAccount team_accounts = 4;

  // map of team account id and invitation source
  map<string, InvitationSource> team_accounts_invitation_source = 5;
}

// Reasons adding a team member to the group can fail.
enum AddTeamMemberToGroupErrorCode {
  // This should not occur.
  ADD_TEAM_MEMBER_TO_GROUP_ERROR_CODE_UNSPECIFIED = 0;
  // If team-member ID not found in DB
  ADD_TEAM_MEMBER_TO_GROUP_ERROR_CODE_TEAM_MEMBER_NOT_FOUND = 1;
  // If team-member found but no membership found for the group's team-account.
  ADD_TEAM_MEMBER_TO_GROUP_ERROR_CODE_ACCOUNT_MEMBERSHIP_NOT_FOUND = 2;
  // If member already belongs to a different team
  ADD_TEAM_MEMBER_TO_GROUP_ERROR_CODE_MEMBER_BELONGS_TO_OTHER_TEAM = 3;
}

// Reasons adding a team member to team account can fail.
enum AddTeamMemberToTeamAccountErrorCode {
  // This should not occur.
  ADD_TEAM_MEMBER_TO_TEAM_ACCOUNT_ERROR_CODE_UNSPECIFIED = 0;
  // If team account not found
  ADD_TEAM_MEMBER_TO_TEAM_ACCOUNT_ERROR_CODE_TEAM_ACCOUNT_NOT_FOUND = 1;
  // If team not found by team ID
  ADD_TEAM_MEMBER_TO_TEAM_ACCOUNT_ERROR_CODE_TEAM_NOT_FOUND_BY_ID = 2;
  // If team-member not found by consumer ID
  ADD_TEAM_MEMBER_TO_TEAM_ACCOUNT_ERROR_CODE_TEAM_MEMBER_NOT_FOUND_BY_CONSUMER_ID = 3;
  // If team-member has no permission to add team-member
  ADD_TEAM_MEMBER_TO_TEAM_ACCOUNT_ERROR_CODE_PERMISSION_DENIED = 4;
  // If maximum limit of emails added at once exceeded
  ADD_TEAM_MEMBER_TO_TEAM_ACCOUNT_ERROR_CODE_MAX_EMAILS_LIMIT_EXCEEDED = 5;
  // If input email is invalid
  ADD_TEAM_MEMBER_TO_TEAM_ACCOUNT_ERROR_CODE_INVALID_EMAIL = 6;
  // If input email (pending member) has already been invited by different team
  ADD_TEAM_MEMBER_TO_TEAM_ACCOUNT_ERROR_CODE_ALREADY_INVITED_BY_OTHER_TEAM = 7;
  // If input email (active member) already belongs to a different team
  ADD_TEAM_MEMBER_TO_TEAM_ACCOUNT_ERROR_CODE_ALREADY_BELONGS_TO_OTHER_TEAM = 8;
  // If input email (active member) does not have any memberships
  ADD_TEAM_MEMBER_TO_TEAM_ACCOUNT_ERROR_CODE_ACTIVE_MEMBERSHIP_NOT_FOUND = 9;
  // If maximum limit of team members for current plan exceeded
  ADD_TEAM_MEMBER_TO_TEAM_ACCOUNT_ERROR_CODE_MEMBERS_PER_TEAM_ACCOUNT_PLAN_LIMIT_EXCEEDED = 10;
}
