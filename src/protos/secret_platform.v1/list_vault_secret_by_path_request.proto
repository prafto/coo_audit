syntax = "proto3";

package secret_platform.v1;

import "secret_platform.v1/common.proto";

option go_package = "github.com/doordash/services-protobuf/generated/secret_platform.v1";

// VaultSecretListMode defines the action to be performed on a list action
enum VaultSecretListMode {
  // VAULT_SECRET_LIST_MODE_UNSPECIFIED indicates the list mode is not defined.
  VAULT_SECRET_LIST_MODE_UNSPECIFIED = 0;
  // VAULT_SECRET_LIST_MODE_CHECK_SECRET checks if a secret with exact path exist. If not, return empty arrays.
  VAULT_SECRET_LIST_MODE_CHECK_SECRET = 1;
  // VAULT_SECRET_LIST_MODE_CHECK_FOLDER checks if a folder with exact path exist. If not, return empty arrays.
  VAULT_SECRET_LIST_MODE_CHECK_FOLDER = 2;
  // VAULT_SECRET_LIST_MODE_SECRETS_IN_CURRENT_FOLDER return a list of secrets in current folder.
  VAULT_SECRET_LIST_MODE_SECRETS_IN_CURRENT_FOLDER = 3;
  // VAULT_SECRET_LIST_MODE_SECRETS_IN_RECURSIVE_FOLDERS return a list of secrets and folders in current and sub-folders.
  VAULT_SECRET_LIST_MODE_SECRETS_IN_RECURSIVE_FOLDERS = 4;
}

// ListVaultSecretByPathRequest queries a list of secret key-value pairs from a given folder
message ListVaultSecretByPathRequest {
  // vault_cluster defines which vault cluster the request should send to (e.g. staging / prod)
  VaultEnv vault_cluster = 1;
  // path defines where to list the secrets and folders should be sent to
  string path = 2;
  // vault_secret_list_mode defines the behavior of the list operation
  VaultSecretListMode vault_secret_list_mode = 3;
}

// ListVaultSecretByPathResponse returns the secret paths and folder paths in a vault path
message ListVaultSecretByPathResponse {
  // secret_paths returns a list of secrets that live in the folder
  repeated string secret_paths = 1;
  // secret_paths returns a list of folders that live in the folder
  repeated string secret_folders = 2;
}
