syntax = "proto3";

package secret_platform.v1;

import "secret_platform.v1/archive_vault_secret.proto";
import "secret_platform.v1/batch_rotate_api_keys.proto";
import "secret_platform.v1/create_api_key.proto";
import "secret_platform.v1/create_vault_secret.proto";
import "secret_platform.v1/create_vault_service.proto";
import "secret_platform.v1/delete_api_key.proto";
import "secret_platform.v1/delete_rollout_preference.proto";
import "secret_platform.v1/delete_vault_service.proto";
import "secret_platform.v1/describe_vault_secret_by_service.proto";
import "secret_platform.v1/get_action_item.proto";
import "secret_platform.v1/get_api_key.proto";
import "secret_platform.v1/get_diff.proto";
import "secret_platform.v1/get_rollout_preference.proto";
import "secret_platform.v1/get_task.proto";
import "secret_platform.v1/get_vault_secret_by_path.proto";
import "secret_platform.v1/get_vault_service.proto";
import "secret_platform.v1/health_check.proto";
import "secret_platform.v1/list_action_items.proto";
import "secret_platform.v1/list_api_keys.proto";
import "secret_platform.v1/list_tasks.proto";
import "secret_platform.v1/list_vault_secret_by_path_request.proto";
import "secret_platform.v1/permission_check.proto";
import "secret_platform.v1/preview_vault_secret_by_service.proto";
import "secret_platform.v1/rollback.proto";
import "secret_platform.v1/rollout.proto";
import "secret_platform.v1/rotate_api_key.proto";
import "secret_platform.v1/set_rollout_preference.proto";
import "secret_platform.v1/share_vault_secret.proto";
import "secret_platform.v1/sync_resource.proto";
import "secret_platform.v1/unarchive_vault_secret.proto";
import "secret_platform.v1/unwrap_shared_secret.proto";
import "secret_platform.v1/update_api_key.proto";
import "secret_platform.v1/update_vault_secret.proto";
import "secret_platform.v1/update_vault_service.proto";

option go_package = "github.com/doordash/services-protobuf/generated/secret_platform.v1";

// WebService is responsible for supporting review query
service WebService {
  // ArchiveVaultSecret will move an exisiting vault secrets into the archive folder
  rpc ArchiveVaultSecret(ArchiveVaultSecretRequest) returns (ArchiveVaultSecretResponse);
  // BatchRotateApiKeys rotates multiple api keys at once
  rpc BatchRotateApiKeys(BatchRotateApiKeysRequest) returns (BatchRotateApiKeysResponse);
  // CreateApiKey creates a new api key for accessing secret platform
  rpc CreateApiKey(CreateApiKeyRequest) returns (CreateApiKeyResponse);
  // CreateVaultSecret creates a new secret key-value pair in the secret path
  rpc CreateVaultSecret(CreateVaultSecretRequest) returns (CreateVaultSecretResponse);
  // CreateVaultService register a new service into vault
  rpc CreateVaultService(CreateVaultServiceRequest) returns (CreateVaultServiceResponse);
  // DeleteAPIKey remove an exsiting api key
  rpc DeleteApiKey(DeleteApiKeyRequest) returns (DeleteApiKeyResponse);
  // DeleteRolloutPreference deletes the preferred namespace in a catalog
  rpc DeleteRolloutPreference(DeleteRolloutPreferenceRequest) returns (DeleteRolloutPreferenceResponse);
  // DeleteVaultService detach an existing service from vault
  rpc DeleteVaultService(DeleteVaultServiceRequest) returns (DeleteVaultServiceResponse);
  // DescribeVaultSecretByService lists out the secret key info
  rpc DescribeVaultSecretByService(DescribeVaultSecretByServiceRequest) returns (DescribeVaultSecretByServiceResponse);
  // GetActionItem returns the action item in a specific task
  rpc GetActionItem(GetActionItemRequest) returns (GetActionItemResponse);
  // GetApiKey queries an existing api key of secret platform
  rpc GetApiKey(GetApiKeyRequest) returns (GetApiKeyResponse);
  // GetDiff returns the difference between two different vault paths
  rpc GetDiff(GetDiffRequest) returns (GetDiffResponse);
  // GetRolloutPreference returns the preferred environment a namespace should rollout to
  rpc GetRolloutPreference(GetRolloutPreferenceRequest) returns (GetRolloutPreferenceResponse);
  // GetTask returns the task of a rollout or rollback
  rpc GetTask(GetTaskRequest) returns (GetTaskResponse);
  // GetVaultSecretByPath returns the secret key value pairs;
  rpc GetVaultSecretByPath(GetVaultSecretByPathRequest) returns (GetVaultSecretByPathResponse);
  // GetVaultService display the details of an existing service in vault
  rpc GetVaultService(GetVaultServiceRequest) returns (GetVaultServiceResponse);
  // HealthCheck returns the current status of server
  rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse);
  // ListActionItems returns a list of exisiting vault action items
  rpc ListActionItems(ListActionItemsRequest) returns (ListActionItemsResponse);
  // ListApiKeys lists all api keys within a catalog and namespace
  rpc ListApiKeys(ListApiKeysRequest) returns (ListApiKeysResponse);
  // ListTasks returns a list of exisiting tasks
  rpc ListTasks(ListTasksRequest) returns (ListTasksResponse);
  // ListVaultSecretByPath returns the list of vault secret paths in a folder
  rpc ListVaultSecretByPath(ListVaultSecretByPathRequest) returns (ListVaultSecretByPathResponse);
  // PermissionCheck returns if the current user has permission to operate on certain namespace
  rpc PermissionCheck(PermissionCheckRequest) returns (PermissionCheckResponse);
  // PreviewVaultSecretByService returns the vault secret key-values for specific namespace-service-app
  rpc PreviewVaultSecretByService(PreviewVaultSecretByServiceRequest) returns (PreviewVaultSecretByServiceResponse);
  // Rollback initiates a secret rollback from the previous snapshot of a specific environment
  rpc Rollback(RollbackRequest) returns (RollbackResponse);
  // Rollout initiates a secret migration between secret_v2 to a specific environment
  rpc Rollout(RolloutRequest) returns (RolloutResponse);
  // RotateApiKey rotate the api secret of an existing api key
  rpc RotateApiKey(RotateApiKeyRequest) returns (RotateApiKeyResponse);
  // SetRolloutPreference sets the preferred environments a namespace can rollout to
  rpc SetRolloutPreference(SetRolloutPreferenceRequest) returns (SetRolloutPreferenceResponse);
  // ShareVaultSecret share the secret key-value pair via token
  rpc ShareVaultSecret(ShareVaultSecretRequest) returns (ShareVaultSecretResponse);
  // SyncResource will initiate a synchronize resource task in secret platform across clusters
  rpc SyncResource(SyncResourceRequest) returns (SyncResourceResponse);
  // UnarchiveVaultSecret restores the vault secrets from archive folder
  rpc UnarchiveVaultSecret(UnarchiveVaultSecretRequest) returns (UnarchiveVaultSecretResponse);
  // UnwrapVaultSecret unwraps the encrypted secret key-value pair
  rpc UnwrapVaultSecret(UnwrapVaultSecretRequest) returns (UnwrapVaultSecretResponse);
  // UpdateApiKey update the capabilities of an existing api key
  rpc UpdateApiKey(UpdateApiKeyRequest) returns (UpdateApiKeyResponse);
  // UpdateVaultSecret update the existing vault secrets in place
  rpc UpdateVaultSecret(UpdateVaultSecretRequest) returns (UpdateVaultSecretResponse);
  // UpdateVaultService update an existing service in vault
  rpc UpdateVaultService(UpdateVaultServiceRequest) returns (UpdateVaultServiceResponse);
}
