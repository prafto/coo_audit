syntax = "proto3";

package secret_platform.v1;

import "google/protobuf/descriptor.proto";

option go_package = "github.com/doordash/services-protobuf/generated/secret_platform.v1";

// VaultEnv defines how many clusters specific environments are supported
enum VaultEnv {
  // VAULT_ENV_UNSPECIFIED indicates the vault environment is unknown
  VAULT_ENV_UNSPECIFIED = 0;
  // VAULT_ENV_STAGING indicates the environment from vault-staging secret_v2
  VAULT_ENV_STAGING = 100;
  // VAULT_ENV_STAGING indicates the environment from vault-staging secret_dev00-staging
  VAULT_ENV_DEV00_STAGING = 101;
  // VAULT_ENV_MAIN00_STAGING indicates the environment from vault-staging secret_main00-staging
  VAULT_ENV_MAIN00_STAGING = 102;
  // VAULT_ENV_DATA_01_STAGING_US_WEST_2 indicates the environment from vault-staging data-01-staging-us-west-2
  VAULT_ENV_DATA_01_STAGING_US_WEST_2 = 104;
  // VAULT_ENV_DATA00_STAGING indicates the environment from vault-staging data00-staging
  VAULT_ENV_DATA00_STAGING = 103;
  // VAULT_ENV_DEV_02_STAGING_US_WEST_2 indicates the environment from vault-staging dev-02-staging-us-west-2
  VAULT_ENV_DEV_02_STAGING_US_WEST_2 = 105;
  // VAULT_ENV_DEV01_STAGING indicates the environment from vault-staging dev01-staging
  VAULT_ENV_DEV01_STAGING = 106;
  // VAULT_ENV_INFRA_CONTROL_PLANE_STAGING indicates the environment from vault-staging infra-control-plane
  VAULT_ENV_INFRA_CONTROL_PLANE_STAGING = 107;
  // VAULT_ENV_INFRA_RELIABILITY00_STAGING indicates the environment from vault-staging infra-reliability00-staging
  VAULT_ENV_INFRA_RELIABILITY00_STAGING = 108;
  // VAULT_ENV_INFRA00_STAGING indicates the environment from vault-staging infra00-staging
  VAULT_ENV_INFRA00_STAGING = 109;
  // VAULT_ENV_MAIN00_BUILD_DEV indicates the environment from vault-staging main00-build-dev
  VAULT_ENV_MAIN00_BUILD_DEV = 110;
  // VAULT_ENV_MAIN00_BUILD_STAGING indicates the environment from vault-staging main00-build-staging
  VAULT_ENV_MAIN00_BUILD_STAGING = 111;
  // VAULT_ENV_PRODUCTION indicates the environment from vault production secret_v2
  VAULT_ENV_PRODUCTION = 200;
  // VAULT_ENV_CELL_001_00_CELL_001_PROD_MAIN_US_WEST_2 indicates the environment from cell001
  VAULT_ENV_CELL_001_00_CELL_001_PROD_MAIN_US_WEST_2 = 201;
  // VAULT_ENV_CELL_002_00_CELL_002_PROD_MAIN_US_WEST_2 indicates the environment from cell002
  VAULT_ENV_CELL_002_00_CELL_002_PROD_MAIN_US_WEST_2 = 202;
  // VAULT_ENV_CELL_003_00_CELL_003_PROD_MAIN_US_WEST_2 indicates the environment from cell003
  VAULT_ENV_CELL_003_00_CELL_003_PROD_MAIN_US_WEST_2 = 203;
  // VAULT_ENV_CELL_004_00_CELL_004_PROD_MAIN_US_WEST_2 indicates the environment from cell004
  VAULT_ENV_CELL_004_00_CELL_004_PROD_MAIN_US_WEST_2 = 204;
  // VAULT_ENV_SANDBOX_CELL_001_PROD_MAIN_US_WEST_2 indicates the environment from cell001 sandbox
  VAULT_ENV_SANDBOX_CELL_001_PROD_MAIN_US_WEST_2 = 205;
  // VAULT_ENV_SANDBOX_CELL_002_PROD_MAIN_US_WEST_2 indicates the environment from cell002 sandbox
  VAULT_ENV_SANDBOX_CELL_002_PROD_MAIN_US_WEST_2 = 206;
  // VAULT_ENV_SANDBOX_CELL_003_PROD_MAIN_US_WEST_2 indicates the environment from cell003 sandbox
  VAULT_ENV_SANDBOX_CELL_003_PROD_MAIN_US_WEST_2 = 207;
  // VAULT_ENV_SANDBOX_CELL_004_PROD_MAIN_US_WEST_2 indicates the environment from cell004 sandbox
  VAULT_ENV_SANDBOX_CELL_004_PROD_MAIN_US_WEST_2 = 208;
  // VAULT_ENV_CELL_001_00_WOLT_PROD_EU_WEST_1 indicates the environment from cell001 wolt eu-west-1
  VAULT_ENV_CELL_001_00_WOLT_PROD_EU_WEST_1 = 209;
  // VAULT_ENV_CELL_002_00_WOLT_PROD_EU_WEST_1 indicates the environment from cell002 wolt eu-west-1
  VAULT_ENV_CELL_002_00_WOLT_PROD_EU_WEST_1 = 210;
  // VAULT_ENV_BIGID00_PROD indicates the environment from bigid00-prod
  VAULT_ENV_BIGID00_PROD = 211;
  // VAULT_ENV_DATA_01_PROD_US_WEST_2 indicates the environment from data-01-prod-us-west-2
  VAULT_ENV_DATA_01_PROD_US_WEST_2 = 212;
  // VAULT_ENV_DATA00_PROD indicates the environment from data00-prod
  VAULT_ENV_DATA00_PROD = 213;
  // VAULT_ENV_FLINK_00_PROD_US_WEST_2 indicates the environment from flink-00-prod-us-west-2
  VAULT_ENV_FLINK_00_PROD_US_WEST_2 = 214;
  // VAULT_ENV_INFRA_CONTROL_PLANE_PROD indicates the environment from prod infra-control-plane
  VAULT_ENV_INFRA_CONTROL_PLANE_PROD = 215;
  // VAULT_ENV_INFRA_RELIABILITY00_PROD indicates the environment from infra-reliability00-prod
  VAULT_ENV_INFRA_RELIABILITY00_PROD = 216;
  // VAULT_ENV_INFRA00_PROD indicates the environment from infra00-prod
  VAULT_ENV_INFRA00_PROD = 217;
  // VAULT_ENV_MAIN00_BUILD_PROD indicates the environment from main00-build-prod
  VAULT_ENV_MAIN00_BUILD_PROD = 218;
  // VAULT_ENV_MAIN00_PROD indicates the environment from main00-prod
  VAULT_ENV_MAIN00_PROD = 219;
  // VAULT_ENV_MAIN01_PROD indicates the environment from main01-prod
  VAULT_ENV_MAIN01_PROD = 220;
  // VAULT_ENV_MAIN02_PROD indicates the environment from main02-prod
  VAULT_ENV_MAIN02_PROD = 221;
  // VAULT_ENV_MAIN03_PROD indicates the environment from main03-prod
  VAULT_ENV_MAIN03_PROD = 222;
  // VAULT_ENV_MAIN04_PROD indicates the environment from main04-prod
  VAULT_ENV_MAIN04_PROD = 223;
  // VAULT_ENV_ML_00_PROD_US_WEST_2 indicates the environment from ml-00-prod-us-west-2
  VAULT_ENV_ML_00_PROD_US_WEST_2 = 224;
  // VAULT_ENV_SANDBOX_00_PROD_US_WEST_2 indicates the environment from sandbox-00.prod-us-west-2
  VAULT_ENV_SANDBOX_00_PROD_US_WEST_2 = 225;
  // VAULT_ENV_LOCAL indicates the environment from vault local secret_v2
  VAULT_ENV_LOCAL = 300;
  // VAULT_ENV_DEV00_LOCAL indicates the environment from vault-local secret_dev00-local
  VAULT_ENV_DEV00_LOCAL = 301;
  // VAULT_ENV_MAIN00_LOCAL indicates the environment from vault-local secret_main00-local
  VAULT_ENV_MAIN00_LOCAL = 302;
  // VAULT_ENV_LOCAL_LEAVES indicates all the leaf cluster for local environment
  VAULT_ENV_LOCAL_LEAVES = 310;
  // VAULT_ENV_LOCAL_LEAF_US_WEST_2 indicates the leaf cluster at us-west-2 for local environment
  VAULT_ENV_LOCAL_LEAF_US_WEST_2 = 311;
  // VAULT_ENV_LOCAL_LEAF_US_EAST_2 indicates the leaf cluster at us-east-2 for local environment
  VAULT_ENV_LOCAL_LEAF_US_EAST_2 = 312;
  // VAULT_ENV_PPOC indicates the main environment for pedregal-poc account
  VAULT_ENV_PPOC = 400;
  // VAULT_ENV_PPOC_ROOT_USW2 indicates the root cluster at us-west-2 for pedregal-poc account
  VAULT_ENV_PPOC_ROOT_USW2 = 401;
  // VAULT_ENV_PPOC_ROOT_EUW1 indicates the root cluster at eu-west-1 for pedregal-poc account
  VAULT_ENV_PPOC_ROOT_EUW1 = 402;
  // VAULT_ENV_PPOC_LEAVES indicates all the leaf cluster for pedregal-poc account
  VAULT_ENV_PPOC_LEAVES = 410;
  // VAULT_ENV_PPOC_LEAF_US_WEST_2 indicates the leaf cluster at us-west-2 for pedregal-poc account
  VAULT_ENV_PPOC_LEAF_US_WEST_2 = 411;
  // VAULT_ENV_PPOC_LEAF_US_EAST_2 indicates the leaf cluster at us-east-2 for pedregal-poc account
  VAULT_ENV_PPOC_LEAF_US_EAST_2 = 412;
  // VAULT_ENV_PPOC_LEAF_EU_WEST_1 indicates the leaf cluster at eu-west-1 for pedregal-poc account
  VAULT_ENV_PPOC_LEAF_EU_WEST_1 = 413;
  // VAULT_ENV_PPOC_LEAF_EU_WEST_1 indicates the leaf cluster at eu-central-1 for pedregal-poc account
  VAULT_ENV_PPOC_LEAF_EU_CENTRAL_1 = 414;
  // VAULT_ENV_PPOC_LEAF_AP_SOUTHEAST_1 indicates the leaf cluster at ap-southeast-1 for pedregal-poc account
  VAULT_ENV_PPOC_LEAF_AP_SOUTHEAST_1 = 415;
  // VAULT_ENV_PPOC_LEAF_AP_SOUTHEAST_2 indicates the leaf cluster at ap-southeast-2 for pedregal-poc account
  VAULT_ENV_PPOC_LEAF_AP_SOUTHEAST_2 = 416;
  // VAULT_ENV_PMVP indicates the main environment for pedregal-mvp account
  VAULT_ENV_PMVP = 500;
  // VAULT_ENV_PMVP_ROOT_USW2 indicates the root cluster at us-west-2 for pedregal-mvp account
  VAULT_ENV_PMVP_ROOT_USW2 = 501;
  // VAULT_ENV_PMVP_ROOT_EUW1 indicates the root cluster at eu-west-1 for pedregal-mvp account
  VAULT_ENV_PMVP_ROOT_EUW1 = 502;
  // VAULT_ENV_PMVP_LEAVES indicates all the leaf cluster for pedregal-mvp account
  VAULT_ENV_PMVP_LEAVES = 510;
  // VAULT_ENV_PMVP_LEAF_US_WEST_2 indicates the leaf cluster at us-west-2 for pedregal-mvp account
  VAULT_ENV_PMVP_LEAF_US_WEST_2 = 511;
  // VAULT_ENV_PMVP_LEAF_US_EAST_2 indicates the leaf cluster at us-east-2 for pedregal-mvp account
  VAULT_ENV_PMVP_LEAF_US_EAST_2 = 512;
  // VAULT_ENV_PMVP_LEAF_EU_WEST_1 indicates the leaf cluster at eu-west-1 for pedregal-mvp account
  VAULT_ENV_PMVP_LEAF_EU_WEST_1 = 513;
  // VAULT_ENV_PMVP_LEAF_EU_WEST_1 indicates the leaf cluster at eu-central-1 for pedregal-mvp account
  VAULT_ENV_PMVP_LEAF_EU_CENTRAL_1 = 514;
  // VAULT_ENV_PMVP_LEAF_AP_SOUTHEAST_1 indicates the leaf cluster at ap-southeast-1 for pedregal-mvp account
  VAULT_ENV_PMVP_LEAF_AP_SOUTHEAST_1 = 515;
  // VAULT_ENV_PMVP_LEAF_AP_SOUTHEAST_2 indicates the leaf cluster at ap-southeast-2 for pedregal-mvp account
  VAULT_ENV_PMVP_LEAF_AP_SOUTHEAST_2 = 516;
  // VAULT_ENV_ENTERPRISE_STAGING indicates the environment from vault-staging enterprise cluster for migration purpose
  VAULT_ENV_ENTERPRISE_STAGING = 1001;
  // VAULT_ENV_OSS_STAGING indicates the environment from vault-staging oss cluster for migration purpose
  VAULT_ENV_OSS_STAGING = 1002;
  // VAULT_ENV_ENTERPRISE_PRODUCTION indicates the environment from vault-staging oss cluster for migration purpose
  VAULT_ENV_ENTERPRISE_PRODUCTION = 1011;
  // VAULT_ENV_OSS_PRODUCTION indicates the environment from vault-staging oss cluster for migration purpose
  VAULT_ENV_OSS_PRODUCTION = 1012;
}

// ResourceType define which kind of secret engine resource is being accessed
enum ResourceType {
  // RESOURCE_TYPE_UNSPECIFIED means no resource is specified
  RESOURCE_TYPE_UNSPECIFIED = 0;
  // RESOURCE_TYPE_VAULT_SECRET means the resource is a vault secret
  RESOURCE_TYPE_VAULT_SECRET = 1;
  // RESOURCE_TYPE_VAULT_POLICY means the resource is a vault policy
  RESOURCE_TYPE_VAULT_POLICY = 2;
  // RESOURCE_TYPE_VAULT_ROLE means the resource is a vault authentication role (k8s, approle)
  RESOURCE_TYPE_VAULT_ROLE = 3;
  // RESOURCE_TYPE_VAULT_AUTH_ENDPOINT means the auth endpoint enablement
  RESOURCE_TYPE_VAULT_AUTH_ENDPOINT = 4;
  // RESOURCE_TYPE_VAULT_SERVICE means everything in a service (k8s-role, oidc-role, approle, policy)
  RESOURCE_TYPE_VAULT_SERVICE = 5;
  // RESOURCE_TYPE_VAULT_CLUSTER means everything manually created inside a cluster (auth-endpoints, roles, policies, secrets, transit)
  RESOURCE_TYPE_VAULT_CLUSTER = 6;
}

// VaultSecretResourceData indicates how the secret will be resolved
message VaultSecretResourceData {
  // secret_path is the secret path in vault (e.g. secret-platform/API_KEY or /* or /**/*)
  string secret_path = 1;
  // secret_mount is the secret engine that the vault is used (e.g. secret_v2)
  string secret_mount = 2;
}

// VaultPolicyResourceData indicates how the policy will be resolved
message VaultPolicyResourceData {
  // policy_names are the policies in vault (e.g. [cloud-kv2-eng-read-policy, cloud-kv2-*])
  repeated string policy_names = 1;
}

// VaultRoleResourceData indicates how the vault role will be resolved
message VaultRoleResourceData {
  // role_name is the role in vault (e.g. cloud-test)
  string role_name = 1;
  // auth_endpoints declares where the role are mounted in vault (e.g. [kubernetes-main-00-prod, kubernetes-*])
  repeated string auth_endpoints = 2;
}

// VaultAuthEndpointResourceData indicates how the vault authentication endpoint will be resolved
message VaultAuthEndpointResourceData {
  // auth_endpoints declares where the endpoints are defined (e.g. [kubernetes-*])
  string auth_endpoints = 1;
}

// VaultServiceResourceData indicates how the service will be resolved
message VaultServiceResourceData {
  // service_name indicates the service that has been onboarded on secret platform (e.g. dasher-service)
  string service_name = 1;
}

// VaultClusterResourceData indicates how the cluster will be resolved
message VaultClusterResourceData {
  // entity_path indicates which type of entity will be synced over (e.g. [*, auth/*, auth/kubernetes-main00/role/*, auth/approle/role/*, sys/auth/*, sys/policies/*, transit/*, secret_v2/*, secret_stage_rollout/*])
  string entity_path = 1;
}

// ActionTarget defines the target an action will be performed
enum ActionTarget {
  // ACTION_TARGET_UNSPECIFIED means the action target is not specified
  ACTION_TARGET_UNSPECIFIED = 0;
  // ACTION_TARGET_VAULT means the action must be taken in vault
  ACTION_TARGET_VAULT = 1;
  // ACTION_TARGET_KUBERNETES means the action must be taken in kubernetes
  ACTION_TARGET_KUBERNETES = 2;
  // ACTION_TARGET_SECRET_PLATFORM means the action will be taken place in secret platform itself
  ACTION_TARGET_SECRET_PLATFORM = 3;
}

// VaultActionDetails defines what action will be taken in Vault to perform secret procedure
message VaultActionDetails {
  // vault_action_type is the action of the vault needs to perform, like secret creation, deletion
  string vault_action_type = 1;
  // vault_data_source indicates where is the secret data coming from
  string vault_data_source = 2;
  // vault_data_destination indicates where the data will be sent to
  string vault_data_destination = 3;
  // vault_cluster_source indicates where is the source cluster
  VaultEnv vault_cluster_source = 10;
  // vault_cluster_destination indicates where is the destination cluster
  VaultEnv vault_cluster_destination = 11;
}

// KubernetesActionDetails defines what action will be taken in Kubernetes to finish a rollout
message KubernetesActionDetails {
  // kubernetes_action_type is the action of the kubernetes needs to perform, like create a new rollout
  string kubernetes_action_type = 1;
  // target_resource is the resource where the kubernetes control plane needs to perform
  string target_resource = 2;
}

// ApiCapability defines an API capability which is associated to an API key
message ApiCapability {
  // api_name defines which API endpoint is trying to access (e.g. Rollout)
  string api_name = 1;
  // metadata defines additional API capability data will be stored in this capability (e.g. namespace: cloud)
  map<string, string> metadata = 2;
}

// RolloutPreference defines which vault environment a namespace can rollout to
message RolloutPreference {
  // service_namespace is the name of the kubernetes namespace that the service lives in
  string service_namespace = 1;
  // environments indicates which environments the service can rollout to
  repeated VaultEnv environments = 2;
}

// TaskType defines the different tasks to be listed
enum TaskType {
  // TASK_TYPE_UNSPECIFIED indicates the task type filter is not set, all tasks will be returned
  TASK_TYPE_UNSPECIFIED = 0;
  // TASK_TYPE_SECRET_ROLLOUT indicates listing task by secret rollout tasks
  TASK_TYPE_SECRET_ROLLOUT = 1;
  // TASK_TYPE_SECRET_SNAPSHOT indicates listing task by secret snapshot tasks
  TASK_TYPE_SECRET_SNAPSHOT = 2;
  // TASK_TYPE_SECRET_ROLLBACK indicates listing task by secret rollback tasks
  TASK_TYPE_SECRET_ROLLBACK = 3;
  // TASK_TYPE_POLICY_ROLLOUT indicates listing task by policy rollout tasks
  TASK_TYPE_POLICY_ROLLOUT = 11;
  // TASK_TYPE_POLICY_ROLLBACK indicates listing task by policy rollback tasks
  TASK_TYPE_POLICY_ROLLBACK = 12;
  // TASK_TYPE_ROLE_ROLLOUT indicates listing task by policy rollout tasks
  TASK_TYPE_ROLE_ROLLOUT = 21;
  // TASK_TYPE_ROLE_ROLLBACK indicates listing task by policy rollback tasks
  TASK_TYPE_ROLE_ROLLBACK = 22;
  // TASK_TYPE_AUTH_ENDPOINT_ROLLOUT indicates listing task by policy rollout tasks
  TASK_TYPE_AUTH_ENDPOINT_ROLLOUT = 31;
  // TASK_TYPE_AUTH_ENDPOINT_ROLLBACK indicates listing task by policy rollback tasks
  TASK_TYPE_AUTH_ENDPOINT_ROLLBACK = 32;
  // TASK_TYPE_SYNC_RESOURCE_VAULT_POLICY indicates listing task by policy synchronization tasks
  TASK_TYPE_SYNC_RESOURCE_VAULT_POLICY = 41;
  // TASK_TYPE_SYNC_RESOURCE_VAULT_ROLE indicates listing task by role synchronization tasks
  TASK_TYPE_SYNC_RESOURCE_VAULT_ROLE = 42;
  // TASK_TYPE_SYNC_RESOURCE_VAULT_AUTH_ENDPOINT indicates listing task by role synchronization tasks
  TASK_TYPE_SYNC_RESOURCE_VAULT_AUTH_ENDPOINT = 43;
  // TASK_TYPE_SYNC_RESOURCE_VAULT_SECRET indicates listing task by secret synchronization tasks
  TASK_TYPE_SYNC_RESOURCE_VAULT_SECRET = 44;
  // TASK_TYPE_SYNC_RESOURCE_VAULT_SERVICE indicates listing task by service synchronization tasks
  TASK_TYPE_SYNC_RESOURCE_VAULT_SERVICE = 45;
}

// OrderBy defines the result order which will be returned from backend
enum OrderBy {
  // ORDER_BY_UNSPECIFIED indicates that the order is not defined by user
  ORDER_BY_UNSPECIFIED = 0;
  // ORDER_BY_CREATED_AT_ASC indicates the result will be returned by created time in ascending order
  ORDER_BY_CREATED_AT_ASC = 1;
  // ORDER_BY_CREATED_AT_DESC indicates the result will be returned by created time in decending order
  ORDER_BY_CREATED_AT_DESC = 2;
  // ORDER_BY_UPDATED_AT_ASC indicates the result will be returned by updated time in ascending order
  ORDER_BY_UPDATED_AT_ASC = 3;
  // ORDER_BY_UPDATED_AT_DESC indicates the result will be returned by updated time in decending order
  ORDER_BY_UPDATED_AT_DESC = 4;
  // ORDER_BY_DELETED_AT_ASC indicates the result will be returned by deleted time in ascending order
  ORDER_BY_DELETED_AT_ASC = 5;
  // ORDER_BY_DELETED_AT_DESC indicates the result will be returned by deleted time in decending order
  ORDER_BY_DELETED_AT_DESC = 6;
  // ORDER_BY_SUCCEEDED_AT_ASC indicates the result will be returned by succeeded time in ascending order
  ORDER_BY_SUCCEEDED_AT_ASC = 7;
  // ORDER_BY_SUCCEEDED_AT_DESC indicates the result will be returned by succeeded time in decending order
  ORDER_BY_SUCCEEDED_AT_DESC = 8;
  // ORDER_BY_FAILED_AT_ASC indicates the result will be returned by succeeded time in ascending order
  ORDER_BY_FAILED_AT_ASC = 9;
  // ORDER_BY_FAILED_AT_DESC indicates the result will be returned by succeeded time in decending order
  ORDER_BY_FAILED_AT_DESC = 10;
  // ORDER_BY_CANCELLED_AT_ASC indicates the result will be returned by succeeded time in ascending order
  ORDER_BY_CANCELLED_AT_ASC = 11;
  // ORDER_BY_CANCELLED_AT_DESC indicates the result will be returned by succeeded time in decending order
  ORDER_BY_CANCELLED_AT_DESC = 12;
}

// SecretScope defines the scope level of the secret
enum SecretScope {
  // SECRET_SCOPE_UNSPECIFIED indicates that the secret scope is unspecified
  SECRET_SCOPE_UNSPECIFIED = 0;
  // SECRET_SCOPE_NAMESPACE indicates that the secret is visible to the project namespace
  SECRET_SCOPE_NAMESPACE = 1;
  // SECRET_SCOPE_SERVICE indicates that the secret is visible to the service
  SECRET_SCOPE_SERVICE = 2;
  // SECRET_SCOPE_APP indicates that the secret is visible to the app
  SECRET_SCOPE_APP = 3;
}

// Extension the field control
extend google.protobuf.FieldOptions {
  // audit_masked will ensure the field is masked when sending to audit pipeline
  optional bool audit_masked = 10001;
}
